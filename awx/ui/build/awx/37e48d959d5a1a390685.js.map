{"version":3,"file":"37e48d959d5a1a390685.js","mappings":"yKAGO,IAAWA,EAAc,SAAdA,GAAc,OAAdA,EAAAA,EAAc,mBAAdA,EAAAA,EAAc,eAAdA,EAAAA,EAAc,mBAAdA,EAAAA,EAAc,uBAAdA,EAAAA,EAAc,yBAAdA,CAAc,MAQdC,EAAmB,SAAnBA,GAAmB,OAAnBA,EAAAA,EAAmB,eAAnBA,EAAAA,EAAmB,mBAAnBA,EAAAA,EAAmB,uBAAnBA,CAAmB,M,sGCHrC,MAAMC,EAAsC,CAC1CC,GAAIC,OAAOC,EAAAA,EAAaC,MAAMC,QAAQ,KAAM,KAC5CC,GAAIJ,OAAOK,EAAAA,EAAaH,MAAMC,QAAQ,KAAM,KAC5CG,GAAIN,OAAOO,EAAAA,EAAaL,MAAMC,QAAQ,KAAM,KAC5CK,GAAIR,OAAOS,EAAAA,EAAaP,MAAMC,QAAQ,KAAM,KAC5CO,GAAIV,OAAOW,EAAAA,EAAaT,MAAMC,QAAQ,KAAM,KAC5CS,IAAKZ,OAAOa,EAAAA,EAAcX,MAAMC,QAAQ,KAAM,MAmCzC,SAASW,EAAcC,GAC5B,MAAMC,EA/BD,WACL,MAAOA,EAAYC,IAAiBC,EAAAA,EAAAA,WAAqB,IACnDC,OAAOC,YAActB,EAAYM,GAAW,KACvCe,OAAOC,YAActB,EAAYQ,GAAW,KAC5Ca,OAAOC,YAActB,EAAYU,GAAW,KAC5CW,OAAOC,YAActB,EAAYY,GAAW,KAC5CS,OAAOC,YAActB,EAAYc,IAAY,KAC1C,QAERS,GAAeC,EAAAA,EAAAA,cAAY,KAC3BH,OAAOC,YAActB,EAAYM,GAAIa,EAAc,MAC9CE,OAAOC,YAActB,EAAYQ,GAAIW,EAAc,MACnDE,OAAOC,YAActB,EAAYU,GAAIS,EAAc,MACnDE,OAAOC,YAActB,EAAYY,GAAIO,EAAc,MACnDE,OAAOC,YAActB,EAAYc,IAAKK,EAAc,MACxDA,EAAc,MAAM,GACxB,IAUH,OARAM,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAUH,EAEhB,OADAF,OAAOM,iBAAiB,SAAUD,GAC3B,IAAML,OAAOO,oBAAoB,SAAUF,EAAQ,GACzD,CAACH,KAEJE,EAAAA,EAAAA,YAAU,IAAMF,KAAgB,CAACA,IAE1BL,CACT,CAIqBW,GACnB,OAAQZ,GACN,IAAK,KACH,OAAO,EACT,IAAK,KACH,OAAQC,GACN,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,MACH,OAAO,EACT,QACE,OAAO,EAEb,IAAK,KACH,OAAQA,GACN,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,MACH,OAAO,EACT,QACE,OAAO,EAEb,IAAK,KACH,OAAQA,GACN,IAAK,KACL,IAAK,KACL,IAAK,MACH,OAAO,EACT,QACE,OAAO,EAEb,IAAK,KACH,OAAQA,GACN,IAAK,KACL,IAAK,MACH,OAAO,EACT,QACE,OAAO,EAEb,IAAK,MACH,MACO,QADCA,EAOd,C,mJCpGO,IAAKY,EAAQ,SAARA,GAAQ,OAARA,EAAQ,kBAARA,EAAQ,cAARA,EAAQ,kBAARA,EAAQ,YAARA,EAAQ,YAARA,EAAQ,UAARA,EAAQ,gBAARA,EAAQ,gBAARA,EAAQ,gBAARA,EAAQ,kBAARA,EAAQ,YAARA,EAAQ,oBAARA,CAAQ,MA6Bb,SAASC,EAAmBC,GACjC,OAAQA,GACN,IAAK,UACH,OACF,IAAK,QACL,IAAK,UACH,OAAOC,EACT,IAAK,MACL,IAAK,SACH,OAAOC,EACT,IAAK,SACL,IAAK,SACL,IAAK,UACH,OAAOC,EACT,IAAK,OACL,IAAK,OACH,OAAOC,EACT,IAAK,OACL,IAAK,WACH,OAAOC,EAEb,CAEO,MAAMJ,EAAY,0CACZC,EAAW,yCACXC,EAAY,0CACZC,EAAS,uCACTC,EAAa,2CAEbC,EAAgB,yCCxDtB,SAASC,EAAMC,GACpB,MAAMC,GAAcC,EAAAA,EAAAA,SACpB,OAAOC,EAAMH,IAAUC,CACzB,CAEO,SAASE,EACdH,GAEA,MAAqB,iBAAVA,EACFA,EAAMI,cAAcvC,QAAQ,KAAM,KAAKA,QAAQ,KAAM,KAAKA,QAAQ,MAAO,KAG9EmC,EAAMK,GACDL,EAAMK,GAGXL,EAAMM,KACDN,EAAMM,KAAKF,cAAcvC,QAAQ,KAAM,KAAKA,QAAQ,KAAM,KAAKA,QAAQ,MAAO,KAGnFmC,EAAMO,MACDP,EAAMO,MAAMH,cAAcvC,QAAQ,KAAM,KAAKA,QAAQ,KAAM,KAAKA,QAAQ,MAAO,KAGpFmC,EAAMQ,MACDR,EAAMQ,MAAMJ,cAAcvC,QAAQ,KAAM,KAAKA,QAAQ,KAAM,KAAKA,QAAQ,MAAO,UADxF,CAGF,C,0BCWA,MAAM4C,EAA8C,CAClDC,GAAI,KACJC,WAAY,SACZC,aAAc,WACdC,SAAU,YACVC,gBAAiB,oBACjBC,eAAgB,mBAChBC,UAAW,QACXC,YAAa,UACbC,UAAW,eACXC,cAAe,gBACfC,UAAW,QACXC,OAAQ,SACRC,SAAU,YACVC,cAAe,iBACfC,gBAAiB,mBACjBC,aAAc,iBACdC,eAAgB,mBAChBC,uBAAwB,0EACxBC,YAAa,eACbC,aAAc,gBACdC,iBAAkB,wCAClBC,OAAQ,KACRC,YAAa,UACbC,0BAA2B,gCAC3BC,eAAgB,aAChBC,WAAY,cACZC,aAAc,WACdC,SAAU,YACVC,KAAM,OACNC,WAAY,SACZC,eAAgB,aAChBC,YAAa,UACbC,UAAW,aACXC,aAAc,gBACdC,WAAY,iBAGRC,GAA+BC,EAAAA,EAAAA,eAKnC,CAACrC,EAAqB,IAAMsC,MAAM,uCAE7B,SAASC,EAA8BhD,GAC5C,MAAMiD,GAAQrE,EAAAA,EAAAA,UAAiC6B,GAC/C,OACEyC,EAAAA,EAAAA,KAACL,EAA6BM,SAAQ,CAACvF,MAAOqF,EAAMG,SACjDpD,EAAMoD,UAGb,CAEO,SAASC,IACd,OAAOC,EAAAA,EAAAA,YAAWT,EACpB,CC5FO,SAASU,EACdC,EACAC,GAEA,GAAI,cAAeD,EACjB,OAAQA,EAAOE,WACb,KAAKnG,EAAoBoG,KACvB,GAAIH,EAAOI,SACT,OAAOJ,EAAOI,WAEhB,MAEF,KAAKrG,EAAoBsG,OACvB,GAAIL,EAAOI,SACT,OAAKH,GACED,EAAOI,SAASH,GAK/B,OAAO,CACT,CAEO,SAASK,IACd,MAAOC,GAAgBV,IACvB,OAAOrE,EAAAA,EAAAA,cACL,CACEwE,EACAC,EACAO,KAEA,GAAI,cAAeR,EACjB,OAAQA,EAAOE,WACb,KAAKnG,EAAoBoG,KACvB,GAAiC,iBAAtBH,EAAOS,WAChB,OAAOT,EAAOS,WAEhB,GAAIT,EAAOS,WACT,OAAOT,EAAOS,aAEhB,MAEF,KAAK1G,EAAoBsG,OACvB,GAAiC,iBAAtBL,EAAOS,WAChB,OAAOT,EAAOS,WAEhB,GAAIT,EAAOS,WACT,OAAKR,EACED,EAAOS,WAAWR,GADCM,EAAanC,YAGzC,MAEF,KAAKrE,EAAoB2G,SACvB,GAAiC,iBAAtBV,EAAOS,WAChB,OAAOT,EAAOS,WAEhB,GAAIT,EAAOS,WACT,OAAKD,EACER,EAAOS,WAAWD,GADED,EAAalC,aAKhD,GAEF,CAACkC,EAAanC,YAAamC,EAAalC,cAE5C,CCjEO,SAASsC,EAAmCnE,GAMjD,MAAM,OAAEwD,EAAM,QAAEY,EAAO,aAAEX,EAAY,SAAEY,GAAarE,EAG9CiE,EADuBH,GACVQ,CAAqBd,EAAQC,GAE1Cc,EAAUH,GAAWI,EAAAA,SAErBC,IAAYhB,GAAeD,EAAOkB,WAAWjB,GAE7CkB,EAAUV,IAEZT,EAAOmB,QACLnB,EAAOmB,QACPN,EACEI,EACEjB,EAAOhD,MACPgD,EAAOoB,UAAYpB,EAAOhD,WAC5BqE,GAEFxE,GAAKH,EAAAA,EAAAA,SAEX,IAAIM,EAA4BgD,EAAOhD,MACnC6D,IAAuC,IAA3Bb,EAAOsB,kBACrBtE,OAAQqE,GAGV,IAAID,EAA+BpB,EAAOoB,SAK1C,OAJIP,IAAuC,IAA3Bb,EAAOsB,kBACrBF,OAAWC,IAIX3B,EAAAA,EAAAA,KAACqB,EAAO,CAAAnB,UACNF,EAAAA,EAAAA,KAAA,OACE,UAAQ,gBACR6B,MAAO,CAAEC,WAAYX,EAAW,QAAKQ,EAAWI,YAAaZ,EAAW,QAAKQ,GAAYzB,UAEzFF,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CAACC,QAASR,EAASS,QAAST,OAAUE,EAAY,SAASzB,UACjEF,EAAAA,EAAAA,KAACmC,EAAAA,EAAM,CACLhF,GAAIA,EACJ,aAAYmD,EAAO8B,UAAUb,GAC7BjE,MAAOA,EACPoE,SAAUA,EACVH,UAAWA,EACXc,cAAc,EACdtB,aAAYA,EACZuB,SAAUA,KACR,OAAQhC,EAAOE,WACb,KAAKnG,EAAoBoG,KACvBH,EAAOiC,UAAUhB,GACjB,MACF,KAAKlH,EAAoBsG,OACnBJ,GACGD,EAAOiC,SAAShC,GAAegB,GAG1C,EAEFiB,gBAAmCb,IAAvBrB,GAAQkC,WAA2BlC,EAAOkC,WAAarB,SAM/E,CCpDA,MAAMsB,EAAqBC,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,iJACU,EAAGI,kBAC9CA,EAAe,YAASnB,IACyB,EAAGmB,kBACpDA,EAAe,YAASnB,IACc,EAAGoB,eACzCA,EAAY,8CAA2CpB,IAGrDqB,EAAkBN,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,4DAoB3B,SAASO,EAAqCnG,GACnD,MAAM,KACJoG,EAAI,SACJ/B,EAAQ,WACRJ,EAAU,MACVzD,EAAK,OACL6F,EAAM,SACNC,EAAQ,aACR7C,EAAY,cACZO,EAAa,QACbW,EAAO,QACP4B,GACEvG,EAEJ,IAAI,QAAEwG,GAAYxG,EAElBwG,EAAUA,EAAQnF,QAAQmC,IAAYD,EAAmBC,EAAQC,KACjE+C,EA0SK,SAAkDA,GACvD,IAAIC,EAAkB,IAAID,GAG1B,KAAOC,EAAgBC,OAAS,GAAKD,EAAgB,GAAGE,OAASrJ,EAAesJ,WAC9EH,EAAgBI,QAIlB,KACEJ,EAAgBC,OAAS,GACzBD,EAAgBA,EAAgBC,OAAS,GAAGC,OAASrJ,EAAesJ,WAEpEH,EAAgBK,MAMlB,OAFAL,EAKF,SAAsDD,GACpD,MAAMO,EAA2B,GACjC,IAAIC,EACJ,IAAK,MAAMxD,KAAUgD,EACfhD,EAAOmD,OAASrJ,EAAesJ,WAC5BI,GAAkBA,EAAeL,OAASrJ,EAAesJ,WAI9DG,EAAOE,KAAKzD,GAEdwD,EAAiBxD,EAEnB,OAAOuD,CACT,CAnBoBG,CAA2BT,GAEtCA,CACT,CA9TYU,CAAuBX,GAEjC,MAAOY,EAAcC,IAAmBzI,EAAAA,EAAAA,WAAS,GAC3C0I,GAAiBC,EAAAA,EAAAA,UACrB,KACGf,EAAQgB,OACNhE,KAAa,cAAeA,IAAWA,EAAOE,YAAcnG,EAAoB2G,YAErF,CAACsC,IAEGiB,GAAWF,EAAAA,EAAAA,UACf,SAGQ1C,IAFN2B,EAAQkB,MACLlE,GAAWA,EAAOmD,OAASrJ,EAAesJ,gBAA6B/B,IAAhBrB,EAAO4C,QAEnE,CAACI,IAEGmB,GAAcJ,EAAAA,EAAAA,UAClB,SAIQ1C,IAHN2B,EAAQkB,MACLlE,GACCA,EAAOmD,OAASrJ,EAAesJ,WAAapD,EAAOmD,OAASrJ,EAAe+H,UAEjF,CAACmB,KAGHvH,EAAAA,EAAAA,YAAU,KACRoH,IAAS7F,GAAS,UAAW4G,EAAa,GACzC,CAACA,EAAc5G,EAAO6F,EAAQrG,IAEjC,MAAMK,EAAKF,EAAMH,EAAMQ,OAAS,oBAEhC,GAAuB,IAAnBgG,EAAQE,OAAc,OAAOxD,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,IACjC,MAAMC,EACJtB,IAAYuB,EAAAA,GAAcC,SAAYT,KAAoBtD,GAAe0C,OAErEsB,EACJzB,IAAYuB,EAAAA,GAAcC,UAAYT,KAAoBtD,GAAe0C,OACrEuB,EAAUC,SAAS1H,IAAU4F,GAC7B+B,EAAa/B,EAEnB,IAAIgC,EAEFA,EADEnE,GAEOU,IAEAN,EACQ7D,OAEAqE,GAGnB,MAAMwD,EACJhE,GAAY8D,GACVjF,EAAAA,EAAAA,KAACoF,EAAAA,EAAI,CAAAlF,UACHF,EAAAA,EAAAA,KAACiF,EAAU,MAGb3H,EAGE+H,GACJC,EAAAA,EAAAA,MAACC,EAAAA,GAAM,CACL,UAASpI,EACT+F,KACE+B,GACEjF,EAAAA,EAAAA,KAACoF,EAAAA,EAAI,CAAAlF,UACHF,EAAAA,EAAAA,KAACiF,EAAU,WAEXtD,EAENE,MAAO,CACL2D,gBAAiB,WAEnBC,gBAAc,EAAAvF,SAAA,CAEbiF,GACDnF,EAAAA,EAAAA,KAAA,QAAM6B,MAAO,CAAE6D,YAAa,QAASxF,UACnCF,EAAAA,EAAAA,KAAC2F,EAAAA,GAAa,CAAC,wBAKrB,OACE3F,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CAACC,QAASiD,EAAgBhD,QAASgD,OAAiBvD,EAAY,SAASzB,SAC9Ea,EACCsE,GAEArF,EAAAA,EAAAA,KAAC4F,EAAAA,EAAQ,CACPC,OAAQ3B,EACR4B,SAAUA,IAAM3B,GAAgB,GAChC4B,aAAeF,GAAW1B,EAAgB0B,GAC1CG,YAAa,CACXC,SAAUA,IAAMC,SAASC,KACzBC,iBAAiB,EACjBC,YAAY,EACZjD,SAAUA,GAEZkD,OAASC,IACPvG,EAAAA,EAAAA,KAACwG,EAAAA,EAAU,CACTC,IAAKF,EACL,UAASpJ,EACTA,GAAI4H,EAAU,eAAiB,kBAC/B2B,UAAW3B,EAAU,eAAiB,kBACtChE,aAAcA,EACd,aAAYgE,EAAU,wBAA0B,kBAChD1B,QAASyB,EAAc,YAAcH,EAAY,UAAY,QAC7DgC,QAASA,IAAMxC,GAAiBD,GAChC0C,WAAY1C,EACZrC,MAAO8C,IAAcrH,EAAQ,CAAEhB,MAAO,yCAA4C,CAAC,EACnF4G,KACE+B,GACEjF,EAAAA,EAAAA,KAACoF,EAAAA,EAAI,CAAAlF,UACHF,EAAAA,EAAAA,KAACiF,EAAU,WAEXtD,EACLzB,SAEAiF,IAAqBnF,EAAAA,EAAAA,KAAC6G,EAAAA,GAAa,MAEtC3G,UAEFF,EAAAA,EAAAA,KAAC8G,EAAAA,EAAY,CAAA5G,SACVoD,EAAQyD,KAAI,CAACzG,EAAQ0G,KACpBhH,EAAAA,EAAAA,KAACiH,EAAsB,CAErB3G,OAAQA,EACRQ,cAAeA,GAAiB,GAChCP,aAAcA,EACdgE,SAAUA,EACVE,YAAaA,EACbuC,MAAOA,GANF,UAAW1G,EAASA,EAAOhD,MAAQ,UAAU0J,YAclE,CAEA,SAASC,EAAyCnK,GAQhD,MAAM,OAAEwD,EAAM,cAAEQ,EAAa,aAAEP,EAAY,SAAEgE,EAAQ,YAAEE,EAAW,MAAEuC,GAAUlK,GACxE,EAAEoK,IAAMC,EAAAA,EAAAA,MAERpG,EADuBH,GACVQ,CAAqBd,EAAQC,EAAcO,GAE9D,OAAQR,EAAOmD,MACb,KAAKrJ,EAAemL,OAAQ,CAC1B,IAEI9D,EAFAwD,EAA6D3E,EAAO4C,MACnE+B,GAAcV,IAAUU,EAAamC,GAIxC3F,EADEV,IAEOT,EAAOmB,QACNnB,EAAOmB,QACRnB,EAAO4C,KACN5C,EAAOhD,WAEPqE,GAGZ,IAAI0F,IAAqBtG,EAMzB,OALIT,EAAOE,YAAcnG,EAAoB2G,UAAaF,EAAc0C,SACtE/B,EAAUyF,EAAE,0CACZG,GAAmB,IAInBrH,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CAAoBC,QAASR,EAASS,QAAST,OAAUE,EAAY,SAASzB,UACpFF,EAAAA,EAAAA,KAACyC,EAAkB,CAACK,aAAc2B,EAAa1B,UAAWiC,QAAQ1E,EAAOgH,UAAUpH,UACjFoF,EAAAA,EAAAA,MAACiC,EAAAA,EAAY,CACXpK,GAAIF,EAAMqD,GACV,UAASrD,EAAMqD,IAASkH,MAAM,KAAKC,KAAK,KACxChC,eAAgB4B,EAChBV,QAASA,KACP,OAAQrG,EAAOE,WACb,KAAKnG,EAAoBoG,KACvBH,EAAOqG,UACP,MACF,KAAKtM,EAAoBsG,OACnBJ,GAAcD,EAAOqG,QAAQpG,GACjC,MACF,KAAKlG,EAAoB2G,SACnBF,GAAeR,EAAOqG,QAAQ7F,GAEtC,EAEFe,MAAO,CACLvF,MACEgE,EAAOgH,WAAavG,EAAa1E,EAAmBD,EAASsL,aAAU/F,GACzEzB,SAAA,CAED+E,GACCjF,EAAAA,EAAAA,KAACoF,EAAAA,EAAI,CACH7J,KAAK,KACLoM,SAAS,KACT9F,MAAO,CACL+F,aAAc,SACd1H,UAEFF,EAAAA,EAAAA,KAACiF,EAAU,WAEXtD,EACHrB,EAAOhD,YAnCAgD,EAAOhD,MAwCzB,CAEA,KAAKlD,EAAeyN,KAAM,CACxB,IAAI5C,EAA6D3E,EAAO4C,MACnE+B,GAAcV,IAAUU,EAAamC,GAC1C,MAAM3F,EAAUV,GAA0BT,EAAOmB,QACjD,IAAIqG,EAEJ,OAAQxH,EAAOE,WACb,KAAKnG,EAAoBoG,KACvBqH,EAAKxH,EAAOyH,KACZ,MACF,KAAK1N,EAAoBsG,OAErBmH,EADEvH,EACGD,EAAOyH,KAAKxH,GACP,GACZ,MACF,QACEuH,EAAK,GAIT,OACE9H,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CAAoBC,QAASR,EAASS,QAAST,OAAUE,EAAY,SAASzB,UACpFoF,EAAAA,EAAAA,MAACiC,EAAAA,EAAY,CACXO,GAAIA,EACJrC,eAAgBT,QAAQjE,GACxB,UAAS9D,EAAMqD,IAASkH,MAAM,KAAKC,KAAK,KACxC5F,MAAO,CACLvF,MACEgE,EAAOgH,WAAavG,EAAa1E,EAAmBD,EAASsL,aAAU/F,GACzEzB,SAAA,CAED+E,GACCjF,EAAAA,EAAAA,KAACoF,EAAAA,EAAI,CACH7J,KAAK,KACLoM,SAAS,KACT9F,MAAO,CACL+F,aAAc,SACd1H,UAEFF,EAAAA,EAAAA,KAACiF,EAAU,WAEXtD,EACHrB,EAAOhD,UArBEgD,EAAOhD,MAyBzB,CAEA,KAAKlD,EAAe+H,OAClB,OACEnC,EAAAA,EAAAA,KAACgD,EAAe,CAAA9C,UACdF,EAAAA,EAAAA,KAACiB,EAAgB,CAACX,OAAQA,EAAQC,aAAcA,MAKtD,KAAKnG,EAAewL,SAAU,CAC5B,MAAMnE,EAAUnB,EAAOhD,MACvB,OACE0C,EAAAA,EAAAA,KAACiD,EAAkB,CAEjB3F,MAAOgD,EAAOhD,MACdgG,QAAShD,EAAOgD,QAChB/C,aAAcA,EACdO,cAAeA,EACfC,WAAYA,EACZU,QAASA,GANJnB,EAAOhD,MAUlB,CAEA,KAAKlD,EAAesJ,UAClB,OAAO1D,EAAAA,EAAAA,KAACgI,EAAAA,EAAO,CAACC,UAAU,MAAU,aAAajB,KAEvD,CAEA,MAAMI,EAAkBA,KAAMpH,EAAAA,EAAAA,KAACkI,EAAAA,GAAU,CAACrG,MAAO,CAAEsG,QAAS,K,4BC7VrD,SAASC,GAAmCtL,GAoBjD,MAAM,OAAEwD,EAAM,YAAEwE,EAAW,QAAE5D,EAAO,SAAEC,EAAQ,aAAEZ,EAAY,cAAEO,GAAkBhE,EAG1EiE,EADuBH,GACVQ,CAAqBd,EAAQC,EAAcO,GAExDO,EAAUH,GAAWI,EAAAA,SACrB8D,EAAO9E,EAAO4C,KAEpB,IAAIzB,EACJ,MAAM,EAAEyF,IAAMC,EAAAA,EAAAA,MAGZ1F,EADEV,IAEOT,EAAOmB,QACNnB,EAAOmB,QACRN,EACCb,EAAOhD,WAEPqE,GAGZ,IAAI0F,IAAqBtG,EAEvBT,EAAOE,YAAcnG,EAAoB2G,UACvCF,GAAkBA,EAAc0C,SAElC/B,EAAUyF,EAAE,0CACZG,GAAmB,GAGrB,IAWIS,EAXAzE,EAAU/C,EAAO+C,SAAWuB,EAAAA,GAAcyD,UAY9C,GAXIvD,GAAe,CAACF,EAAAA,GAAcC,QAASD,EAAAA,GAAc0D,QAAQC,SAASlF,KACxEA,EAAUuB,EAAAA,GAAcyD,WAEtBhF,IAAYuB,EAAAA,GAAcC,SAAWvE,EAAOgH,WAC9CjE,EAAUuB,EAAAA,GAAc0D,QAEtBnH,IACFkC,EAAUuB,EAAAA,GAAc4D,OAItBlI,EAAOmD,OAASrJ,EAAeyN,KACjC,OAAQvH,EAAOE,WACb,KAAKnG,EAAoBoG,KACvBqH,EAAKxH,EAAOyH,KACZ,MACF,KAAK1N,EAAoBsG,OAErBmH,EADEvH,EACGD,EAAOyH,KAAKxH,GACP,GACZ,MACF,QACEuH,EAAK,GAKX,MAAM3K,EAAKN,EAAMyD,GACX2B,EAAUd,GAAYiE,GAAOpF,EAAAA,EAAAA,KAACoF,EAAI,IAAM9E,EAAOhD,MAErD,OACE0C,EAAAA,EAAAA,KAACqB,EAAO,CAAAnB,UACNF,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CAACC,QAASR,EAASS,QAAST,OAAUE,EAAY,SAASzB,UACjEF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLpI,GAAIA,EACJ,UAASA,EACTkG,QAASA,EACTiE,SAAUhH,EAAOgH,SACjBpE,KAAMkC,GAAOpF,EAAAA,EAAAA,KAACoF,EAAI,SAAMzD,EACxB8D,eAAgB4B,EAChBV,QAASA,KACP,GAAIrG,EAAOmD,OAASrJ,EAAeyN,KACjC,OAAQvH,EAAOE,WACb,KAAKnG,EAAoBoG,KACvBH,EAAOqG,UACP,MACF,KAAKtM,EAAoBsG,OACnBJ,GAAcD,EAAOqG,QAAQpG,GACjC,MACF,KAAKlG,EAAoB2G,SACnBF,GAAeR,EAAOqG,QAAQ7F,GAGxC,EAEF,aAAYK,EAAWb,EAAOhD,MAAQ,GACtCmL,OAAQtL,EACR8K,UACE3H,EAAOmD,OAASrJ,EAAeyN,KAAQa,IAAM1I,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,IAAKa,EAAGZ,GAAIA,SAASnG,EACxEzB,SAEA+B,OAKX,CC3GO,SAAS0G,GAAoC7L,GAClD,MAAM,QAAEwG,EAAO,cAAExC,EAAa,aAAEP,EAAY,QAAEW,EAAO,SAAEC,EAAQ,OAAEgC,GAAWrG,EAC5E,OAAuB,IAAnBwG,EAAQE,QAAqBxD,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,KAE/B1E,EAAAA,EAAAA,KAAC4I,GAAAA,EAAK,CAACC,WAAY1H,EAAUU,MAAO,CAAEiH,WAAY,YAAa5I,SAC5DoD,EAAQyD,KAAI,CAACzG,EAAQ0G,KACpBhH,EAAAA,EAAAA,KAAC+I,GAAgB,CAEfzI,OAAQA,EACRC,aAAcA,EACdO,cAAeA,EACfI,QAASA,EACTC,SAAUA,EACVgC,OAAQA,GANH6D,MAWf,CAaO,SAAS+B,GAAmCjM,GACjD,MAAM,OAAEwD,EAAM,cAAEQ,EAAa,aAAEP,EAAY,QAAEW,EAAO,OAAEiC,GAAWrG,EAC3DsE,EAAuBR,IAE7B,OAAQN,EAAOmD,MACb,KAAKrJ,EAAesJ,UAClB,OAAO1D,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,IAET,KAAKtK,EAAemL,OAClB,OACEvF,EAAAA,EAAAA,KAACoI,GAAgB,CACf9H,OAAQA,EACRC,aAAcA,EACdO,cAAeA,EACfK,SAAUrE,EAAMqE,SAChBD,QAASA,IAIf,KAAK9G,EAAeyN,KAClB,OACE7H,EAAAA,EAAAA,KAACoI,GAAgB,CACf9H,OAAQA,EACRC,aAAcA,EACdO,cAAeA,EACfK,SAAUrE,EAAMqE,SAChBD,QAASA,EACT8H,QAAM,IAIZ,KAAK5O,EAAe+H,OAClB,OACEnC,EAAAA,EAAAA,KAACiB,EAAgB,CACfX,OAAQA,EACRC,aAAcA,EACdW,QAASA,EACTC,SAAUrE,EAAMqE,WAItB,KAAK/G,EAAewL,SAAU,CAC5B,MAAM7E,EAAaK,EAAqBd,EAAQC,EAAcO,GAC9D,IAAIW,EAUJ,OAPEA,EADEV,IAEOT,EAAOmB,QACNnB,EAAOmB,QAEPnB,EAAOhD,QAIjB0C,EAAAA,EAAAA,KAACiD,EAAkB,CACjBC,KAAM5C,EAAO4C,KACb5F,MAAOgD,EAAOhD,MACdgG,QAAShD,EAAOgD,QAChB/C,aAAcA,EACdO,cAAeA,EACfK,SAAUrE,EAAMqE,SAChBiC,SAAU6F,GAAAA,GAAiBC,MAC3BzH,QAASA,EACTV,WAAYA,EACZsC,QAAS/C,EAAO+C,QAChBF,OAAQA,GAGd,EAEJ,CC7EO,SAASgG,GAA8BrM,GAC5C,MAAM,QAAEwG,EAAO,aAAE/C,EAAY,SAAEY,EAAQ,OAAEgC,GAAWrG,EAE9CsM,EAAqB9N,EACN,UAAnBwB,EAAMuM,UAA2C,WAAnBvM,EAAMuM,SAAwBvM,EAAMuM,UAAY,KAAO,MAEjFC,EACe,UAAnBxM,EAAMuM,WAA4C,WAAnBvM,EAAMuM,WAA0BD,GAG3DG,GAAiBlF,EAAAA,EAAAA,UACrB,IAAMf,EAAQnF,QAAQmC,IAAYD,EAAmBC,EAAQC,MAC7D,CAAC+C,EAAS/C,IAINiJ,GAAkCnF,EAAAA,EAAAA,UAAQ,IAC1CiF,EAAwB,GACrBC,GAAgBpL,OAAOsL,KAC7B,CAACH,EAAiBC,IAGfG,GAAoCrF,EAAAA,EAAAA,UAAQ,IAC5CiF,EAAwBC,EACrBA,GAAgBpL,QAAQmC,IAAYmJ,GAAmBnJ,MAAY,IACzE,CAACgJ,EAAiBC,KAIdI,EAAYC,IAAiBlO,EAAAA,EAAAA,UAAkC,CAAC,IACvEK,EAAAA,EAAAA,YAAU,KACJ8N,OAAOC,OAAOH,GAAYnF,MAAMuF,GAAMA,IAAI5G,KAAS,GAClDA,KAAS,EAAM,GACnB,CAACA,EAAQwG,IACZ,MAAMK,GAAelO,EAAAA,EAAAA,cAAY,CAACwB,EAAe2M,KAC/CL,GAAeM,IACTA,EAAO5M,KAAW2M,KACpBC,EAAS,IAAKA,IACP5M,GAAS2M,GAEXC,IACP,GACD,IAEH,OACE5E,EAAAA,EAAAA,MAAC6E,EAAAA,EAAI,CACHC,SAAU,CAAEC,QAAS,UACrBC,WAAY,CAAED,QAASlJ,EAAW,iBAAmB,gBACrDoJ,eAAgB,CAAEF,QAAS,yBAA0BnK,SAAA,MAElCyB,IAAlB6H,GAA+BA,EAAchG,OAAS,IACrDxD,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAAtK,UACPF,EAAAA,EAAAA,KAAC2I,GAAiB,IAAK7L,EAAOwG,QAASkG,EAAerG,OAAQ6G,MAGjEN,EAAgBlG,OAAS,IACxBxD,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAAtK,UACPF,EAAAA,EAAAA,KAACiD,EAAkB,IAAKnG,EAAOwG,QAASoG,EAAiBvG,OAAQ6G,QAK3E,CAEA,SAASP,GAAqCnJ,GAC5C,MAAO,aAAcA,GAAUA,EAAOmK,QACxC,C,wCC1GO,MAAMC,IAA0B9K,EAAAA,EAAAA,eAAiC,CACtE+K,SAAUA,IAAM,KAChBC,YAAaA,IAAM,KACnBC,aAAcA,IAAM,KACpBC,aAAcA,IAAM,OAEf,SAASC,KACd,OAAO3K,EAAAA,EAAAA,YAAWsK,GACpB,CAEO,SAASM,GAAyBlO,GACvC,MAAOmO,EAAeC,IAAoBxP,EAAAA,EAAAA,UAAuB,KAC1DyP,IAAoBzP,EAAAA,EAAAA,WAA4B,KAIrD,SAASkP,EAAY/K,GACnBqL,GAAkBE,GAAWA,EAAOjN,QAAQkN,GAAMA,IAAMxL,KAC1D,CAgCA,MAAO,CAAE8K,SA/BT,SAAkB9K,GACZrF,OAAO8Q,UAAUzL,EAAM0L,WACzBC,YAAW,IAAMZ,EAAY/K,IAAQA,EAAM0L,gBACpC1L,EAAM0L,SAEfL,GAAkBE,IAChB,MAAMK,EAAaL,EAAOM,WAAWL,GAAMA,IAAMxL,IACjD,IAAoB,IAAhB4L,EAAmB,CACrB,MAAME,EAAY,IAAIP,GAEtB,OADAO,EAAUF,GAAc5L,EACjB8L,CACT,CACE,MAAO,IAAIP,EAAQvL,EACrB,GAEJ,EAgBmB+K,cAAaE,aArChC,SAAsB3M,GACpB+M,GAAkBE,GAAYjN,EAASiN,EAAOjN,OAAOA,GAAU,IACjE,EAmC8C0M,aAf9C,SAAsBe,EAAsB/L,GAC1CqL,GAAkBE,IAChB,MAAMS,EAAgBT,EAAOM,WAAWL,GAAMA,IAAMO,IACpD,IAAuB,IAAnBC,EAAsB,CACpBrR,OAAO8Q,UAAUzL,EAAM0L,WACzBC,YAAW,IAAMZ,EAAY/K,IAAQA,EAAM0L,gBACpC1L,EAAM0L,SAEf,MAAMI,EAAY,IAAIP,GAEtB,OADAO,EAAUE,GAAiBhM,EACpB8L,CACT,CACA,OAAOP,CAAM,GAEjB,EAC4D,IAE9D,OACE9F,EAAAA,EAAAA,MAACoF,GAAwBzK,SAAQ,CAACvF,MAAOyQ,EAAiBjL,SAAA,EACxDF,EAAAA,EAAAA,KAAC8L,GAAAA,EAAU,CAAC,UAAQ,gBAAgBC,SAAO,EAACC,cAAY,EAAA9L,SACrD+K,EAAclE,KAAI,CAACkF,EAAYjF,KAC9BkF,EAAAA,EAAAA,eAACC,GAAAA,EAAK,IACAF,EACJG,IAAKH,EAAWG,KAAOH,EAAW9O,IAAM6J,EACxCqF,aACErM,EAAAA,EAAAA,KAACsM,GAAAA,EAAsB,CAACC,QAASA,IAAMpB,EAAiBP,YAAYqB,WAK3EnP,EAAMoD,WAGb,CCnEO,MAAMsM,WAAsBC,EAAAA,UAAwBC,WAAAA,IAAAC,GAAA,gBAAAA,GAAA,KAClD5M,MAAe,CACpB6M,UAAU,GACX,KAED,+BAAcC,CAAyBC,GAErC,MAAO,CAAEF,UAAU,EACrB,CAEOG,iBAAAA,CAAkBC,EAAcC,GAErCC,QAAQF,MAAM,kBAAmBA,EAAOC,EAC1C,CAEOE,MAAAA,GACL,OAAIC,KAAKrN,MAAM6M,UACN5M,EAAAA,EAAAA,KAAA,MAAAE,SAAKkN,KAAKtQ,MAAMuQ,UAGlBD,KAAKtQ,MAAMoD,QACpB,EChCK,SAASoN,GAAUxQ,GACxB,MAAM,MAAEyQ,GAAUzQ,EAClB,GAAc,IAAVyQ,EAAa,OAAOvN,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SAAE,MAC1B,KAAMqN,EAAO,OAAOvN,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,IAEpB,MACM8I,EAAW1Q,EAAM0Q,SAAW1Q,EAAM0Q,SAAW,EAC7CC,EAAKD,EAAW,EAAI,EAAIA,EAGxBE,EAAIC,KAAKC,MAAMD,KAAKE,IAAIN,GAASI,KAAKE,IALlC,OAOV,OAAO7N,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SAAG,GAAG4N,YAAYP,EAAQI,KAAKI,IAP5B,KAOmCL,IAAIM,QAAQP,OAJ3C,CAAC,QAAS,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAIKC,MACzE,C,4BCOO,SAASO,GAAa1C,GAAuB,GAClD,MAAM,IAAQpE,EAAAA,EAAAA,OACP+G,EAAaC,IAAkBzS,EAAAA,EAAAA,WAAkB,GAClD0S,EAAerD,KAEfsD,EAA2B,CAC/BhL,QAAS,UACThG,MAAO6J,EAAE,uBACTqE,QAASA,GAGL+C,EAAyB,CAC7BjL,QAAS,SACThG,MAAO6J,EAAE,gCAGLqH,EAAoC,CACxClL,QAAS,UACThG,MAAO6J,EAAE,gDAyBX,MAAO,CAAEgH,cAAaM,iBAtBIC,IACKC,WAC3B,GAAKC,UAAUC,UAIf,UACQD,UAAUC,UAAUC,UAAUJ,GACpCL,EAAazD,SAAS0D,GACtBF,GAAe,EACjB,CAAE,MAAOW,GACPV,EAAaxD,YAAYyD,GACzBD,EAAazD,SAAS2D,EACxB,MAVEF,EAAazD,SAAS4D,EAUxB,EAGFQ,GAAuBC,OAAM,KAC3BZ,EAAaxD,YAAYyD,GACzBD,EAAazD,SAAS2D,EAAW,GACjC,EAIN,CC5DO,SAASW,GAASnS,GACvB,MAAM,iBAAE0R,GAAqBP,MACvB,EAAE/G,IAAMC,EAAAA,EAAAA,MAEd,OAAKrK,EAAM2R,MAETzO,EAAAA,EAAAA,KAACkP,GAAAA,GAAa,CACZC,SAAUjI,EAAE,qBACZkI,SAAUlI,EAAE,qCACZ7D,QAAQ,iBACRgM,cAAenI,EAAE,kBACjBoI,gBAAiBpI,EAAE,gBACnBrF,MAAO,CAAE0N,QAAS,OAAQnF,SAAU,SAAUoF,aAAc,GAC5DC,OAAQA,KACNjB,EAAiB1R,EAAM2R,MAAQ,GAAG,EAClCvO,UAEFF,EAAAA,EAAAA,KAAC0P,GAAAA,EAAQ,CAACzN,QAASnF,EAAM2R,KAAM5M,MAAO,CAAE8N,SAAU7S,EAAM6S,eAbpC3P,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,GAgB1B,C,wCCDO,MAAMkL,IAAsBhQ,EAAAA,EAAAA,eAEjC,CAAC,CAAC,EAAG,IAAM,OAEN,SAASiQ,KACd,MAAOC,IAAY1P,EAAAA,EAAAA,YAAWwP,IAC9B,OAAOE,CACT,CAEO,SAASC,GAAqBjT,GAInC,MAAOgT,EAAUE,IAAoBtU,EAAAA,EAAAA,WAAwB,KAC3D,MAAMuU,EAAqBC,aAAaC,QAAQ,oBAChD,IAAIL,EAA0B,CAAC,EAC/B,GAAIG,EACF,IACEH,EAAWM,KAAKC,MAAMJ,EACxB,CAAE,MAAOK,GACP,CAcJ,OAVAR,EAAW,CACTS,gBAAiBzT,EAAM0T,uBACvBC,MAAO,SACPC,YAAa,cACbC,YAAa,WACbC,WAAY,WACZC,WAAY,YACZC,iBAAkB,UACfhB,GAEEA,CAAQ,IAGXiB,GAAcjV,EAAAA,EAAAA,cAAagU,IAC/BI,aAAac,QAAQ,mBAAoBZ,KAAKa,UAAUnB,IACxDE,EAAiBF,EAAS,GACzB,IAEGoB,GAAc7M,EAAAA,EAAAA,UAAQ,IACA,UAAnByL,EAASW,OAAwC,SAAnBX,EAASW,MAC1C9U,OAAOwV,WAAW,gCAAgCC,QAChD,OACA,QACFtB,EAASW,OACZ,CAACX,EAASW,QAcb,OAZA1U,EAAAA,EAAAA,YAAU,KACRiU,GAAkBF,GACZA,EAASoB,cAAgBA,EAAoBpB,EAC1C,IAAKA,EAAUoB,iBAEJ,SAAhBA,EACFhL,SAASmL,gBAAgBC,UAAUC,IAAI,oBAEvCrL,SAASmL,gBAAgBC,UAAUE,OAAO,mBAC5C,GACC,CAACN,KAGFlR,EAAAA,EAAAA,KAACyR,GAAAA,GAAS,CACR/W,MAAO,CAAE6V,gBAAiBT,EAASS,gBAA6C,IAA3BT,EAASS,gBAAyB,GAAIrQ,UAE3FF,EAAAA,EAAAA,KAAC4P,GAAoB3P,SAAQ,CAACvF,MAAO,CAACoV,EAAUiB,GAAa7Q,SAC1DpD,EAAMoD,YAIf,CC5FO,SAASwR,GAAiBC,GAC/B,OAAKA,GAIkB,iBAAZA,IACTA,EAAU,IAAIC,KAAKD,IAEdA,EAAQE,kBANN,EAOX,CCFO,SAASC,GAAShV,GACvB,MAAMiV,EAAO,IAAIH,KAAK9U,EAAMpC,OAC5B,OACE4K,EAAAA,EAAAA,MAACsD,GAAAA,EAAK,CAACC,WAAS,EAAA3I,SAAA,EACdF,EAAAA,EAAAA,KAACgS,GAAAA,EAAS,CAAA9R,SAAE6R,EAAKE,wBACjBjS,EAAAA,EAAAA,KAACgS,GAAAA,EAAS,CAAA9R,SAAE6R,EAAKG,yBAGvB,CAEA,MAAMC,GAAezP,EAAAA,GAAO0P,KAAIxP,WAAA,CAAAC,YAAA,qBAAXH,CAAW,yBAIzB,SAAS2P,GAAavV,GAK3B,MAAM,IAAQqK,EAAAA,EAAAA,OACPtG,GAAgBV,KACjB,OAAEmS,EAAM,QAAE3L,GAAY7J,GACrByV,EAAUC,IAAe9W,EAAAA,EAAAA,UAAwB,MAClDoU,EAAWD,KACX4C,EAAS3C,EAASe,WAAaf,EAASe,WAAa,YAErD6B,GAAa5W,EAAAA,EAAAA,cACjB,CAACpB,EAA2C+X,KAC1C,IAAIV,EAEFA,EADmB,iBAAVrX,EACFiY,GAAAA,GAASC,WAAWlY,GAEpBiY,GAAAA,GAASE,QAAQnY,GAGnB,UADC+X,EAEAE,GAAAA,GAASG,MAAMC,WAAahB,EAAKgB,WAAa,IAChDP,EAAYtL,EAAE,2BAEdsL,EAAYT,EAAKiB,cAKnBR,EAAYd,GAAiBK,EAAKkB,YAEtC,GAEF,CAAC/L,IAWH,OARAnL,EAAAA,EAAAA,YAAU,KAER,GADA2W,EAAW5V,EAAMpC,MAAO+X,GACT,UAAXA,EAAoB,CACtB,MAAMlH,EAAU2H,aAAY,IAAMR,EAAW5V,EAAMpC,MAAO+X,IAAS,KACnE,MAAO,IAAMU,aAAa5H,EAC5B,IACC,CAACkH,EAAQ3V,EAAMpC,MAAOgY,IAEpB5V,EAAMpC,OAGT4K,EAAAA,EAAAA,MAAC6M,GAAY,CAACzL,UAAU,YAAWxG,SAAA,CAChCqS,EACAD,IAAUhN,EAAAA,EAAAA,MAAA,QAAApF,SAAA,CAAM,IAAOW,EAAarD,GAAG,OACvCmJ,GACC3G,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAAClC,QAAQ,OAAO+P,UAAQ,EAACzM,QAASA,EAAQzG,SAC9CoS,KAGHtS,EAAAA,EAAAA,KAAA,QAAAE,SAAOoS,QAXYtS,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,GAe3B,CC/EO,SAAS2O,GAAgBvW,GAC9B,MAAMwW,GAAQjP,EAAAA,EAAAA,UAAQ,IAAM,IAAIuN,KAAK9U,EAAMwW,OAAS,GAAGC,WAAW,CAACzW,EAAMwW,QACnEE,GAASnP,EAAAA,EAAAA,UAAQ,IAAM,IAAIuN,KAAK9U,EAAM0W,QAAU,GAAGD,WAAW,CAACzW,EAAM0W,UAEpEC,EAASC,IAAchY,EAAAA,EAAAA,UAASiS,KAAKgG,IAAI,EAAGH,EAASF,EAAMC,aAElExX,EAAAA,EAAAA,YAAU,KACR,MAAMwP,EAAU2H,aAAY,KACtBI,IACGxW,EAAM0W,OACNE,EAAW/F,KAAKgG,IAAI,EAAGH,EAASF,IADlBI,EAAW/F,KAAKgG,IAAI,EAAG/B,KAAKkB,MAAQQ,IAEzD,GACC,KACH,MAAO,IAAMH,aAAa5H,EAAQ,GACjC,CAAC+H,EAAOE,EAAQ1W,EAAM0W,SAEzB,MAAMI,EAAejG,KAAKC,MAAM6F,EAAU,KACpCI,EAAUlG,KAAKC,MAAMgG,EAAe,IACpCE,EAAUnG,KAAKC,MAAOgG,EAAe,GAAM,IAC3CG,EAAQpG,KAAKC,MAAOgG,EAAe,GAAK,GAAM,IAC9CI,EAAOrG,KAAKC,MAAMgG,EAAe,GAAK,GAAK,IAEjD,OAAKN,GAEHhO,EAAAA,EAAAA,MAACsD,GAAAA,EAAK,CAAA1I,SAAA,CACM,IAAT8T,IACC1O,EAAAA,EAAAA,MAAC0M,GAAAA,EAAS,CAAA9R,SAAA,CACP8T,EACA,IAAI,OAGE,IAAVD,IACCzO,EAAAA,EAAAA,MAAC0M,GAAAA,EAAS,CAAA9R,SAAA,CACP6T,EACA,IAAI,OAGI,IAAZD,IACCxO,EAAAA,EAAAA,MAAC0M,GAAAA,EAAS,CAAA9R,SAAA,CACP4T,EACA,IAAI,QAIPxO,EAAAA,EAAAA,MAAC0M,GAAAA,EAAS,CAAA9R,SAAA,CACP2T,EACA,WAxBU7T,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,GA6BrB,C,4BCpCO,SAASuP,GAAWnX,GACzB,OACEkD,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CACTC,UAAWrX,EAAMqX,WAAa,IAC9BtS,MAAO/E,EAAMsX,OAAS,CAAEhK,SAAU,eAAazI,EAAUzB,SAExDpD,EAAMoN,OACHpN,EAAMoN,OAAOnD,KAAKzJ,IAAU0C,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAAnU,SAAc5C,GAARA,KACxCR,EAAMwX,gBAAgBvN,KAAKwN,IACzBvU,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAC/X,MAAM,OAAM4D,UACjBF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CAACC,GAAIyM,EAAcC,KAAKtU,SAAEqU,EAAcnX,QADtBmX,EAAcnX,SAMnD,C,gBC/BO,SAASqX,GAAY3X,GAO1B,MAAM4X,EAIF,CAAC,EAED5X,EAAMR,QACRoY,EAASpY,MAAQD,EAAmBS,EAAMR,QAGxCQ,EAAMvB,OACRmZ,EAASnZ,KAAOuB,EAAMvB,MAGxB,IAAIqM,EAAe,EACnB,GAAI9K,EAAM6X,SACR,OAAQ7X,EAAMvB,MACZ,IAAK,KAGL,IAAK,KACHqM,EAAe,EACf,MACF,IAAK,KACHA,EAAe,EACf,MACF,IAAK,KACHA,EAAe,GAKrB,IAAIlC,EAAc,EAClB,GAAI5I,EAAM8X,QACR,OAAQ9X,EAAMvB,MACZ,IAAK,KAGL,IAAK,KACHmK,EAAc,EACd,MACF,IAAK,KACHA,EAAc,EACd,MACF,IAAK,KACHA,EAAc,GAIpB,MAAMmP,EAAcC,EAAAA,SAASC,QAAQjY,EAAMoD,UAAU6G,KAAKiO,IACpDC,EAAAA,EAAAA,gBAAeD,IACVE,EAAAA,EAAAA,cAAaF,EAAON,GAEpBM,IAIX,OAAOhV,EAAAA,EAAAA,KAAA,OAAK6B,MAAO,CAAE+F,eAAclC,eAAcxF,SAAE2U,GACrD,CClDO,SAASM,GAASrY,GACvB,MAAMsY,GAAWC,EAAAA,GAAAA,MACjB,OACE/P,EAAAA,EAAAA,MAAC6E,EAAAA,EAAI,CACHG,WAAY,CAAED,QAAS,kBACvBD,SAAU,CAAEC,QAAS,UACrBvB,WAAY,CAAEuB,QAAS,sBAAuBnK,SAAA,CAE7CpD,EAAMoG,YACiBvB,IAArB7E,GAAOwY,WAA4BxY,EAAMwY,WAAiC,UAApBxY,EAAMwY,aAC3DtV,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAC+K,UAAW,CAAElL,QAAS,mBAAoBnK,UAClDF,EAAAA,EAAAA,KAACyU,GAAW,CACVlZ,KAAMuB,EAAM6K,UAAY,KACxBrL,MAAOQ,EAAM0Y,WAAa1Y,EAAMR,MAChCqY,UAAQ,EAAAzU,SAEPpD,EAAMoG,SAIdpG,EAAM2R,OACLzO,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAC3I,MAAO,CAAE4T,SAAU,QAASvV,UACpCF,EAAAA,EAAAA,KAAA,OACE6B,MAAO,CACL4T,SAAU3Y,EAAM2Y,UAAY,OAC5BC,WAAY,SACZC,aAAc,WACdC,SAAU,SACVtZ,MAAOQ,EAAMR,MAAQD,EAAmBS,EAAMR,YAASqF,GACvDzB,SAEApD,EAAM+Y,eAAiB/Y,EAAMgL,KAAMhL,EAAM6J,SAmBzC3G,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SAAGpD,EAAM2R,QAlBTzO,EAAAA,EAAAA,KAAA,KACE6B,MAAO,CACLvF,MAAOQ,EAAMR,MAAQD,EAAmBS,EAAMR,YAASqF,GAEzDoG,KAAMjL,EAAMgL,GACZnB,QAAU2J,IAER,GADAA,EAAEwF,iBACEhZ,EAAM6J,QACR7J,EAAM6J,cACD,CACL,IAAK7J,EAAMgL,GAAI,OACfsN,EAAStY,EAAMgL,GACjB,GACA5H,SAEDpD,EAAM2R,WAQhB3R,EAAMoG,MAA4B,UAApBpG,EAAMwY,YACnBtV,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAC+K,UAAW,CAAElL,QAAS,mBAAoBnK,UAClDF,EAAAA,EAAAA,KAACyU,GAAW,CACVlZ,KAAMuB,EAAM6K,UAAY,KACxBiN,SAAS,EACTtY,MAAOQ,EAAM0Y,WAAa1Y,EAAMR,MAAM4D,SAErCpD,EAAMoG,WAMnB,C,gBC7EO,SAAS6S,GAAmBjZ,GAKjC,MAAM2J,GAAMuP,EAAAA,EAAAA,QAAuB,OAC5BC,EAAeC,IAAoBxa,EAAAA,EAAAA,UAA4B,CACpEya,MAAO1P,EAAI2P,SAASC,aAAe,EACnCC,OAAQ7P,EAAI2P,SAASC,aAAe,IAEhCE,GAAaza,EAAAA,EAAAA,cACjB,IACEoa,GAAkBD,IAChB,MAAMO,EAAmB,CACvBL,MAAO1P,EAAI2P,SAASC,aAAe,EACnCC,OAAQ7P,EAAI2P,SAASK,cAAgB,GAEvC,OACED,EAAiBL,QAAUF,EAAcE,OACzCK,EAAiBF,SAAWL,EAAcK,OAEnCE,EAEFP,CAAa,KAExB,IAIF,OAFAla,EAAAA,EAAAA,YAAU,IAAMwa,KAAc,CAAC9P,EAAK8P,KACpCG,EAAAA,GAAAA,GAAkBjQ,GAAK,IAAM8P,OAE3BvW,EAAAA,EAAAA,KAAC2W,GAAiB,CAAClQ,IAAKA,EAAKC,UAAW5J,EAAM4J,UAAW7E,MAAO,CAAEyU,OAAQxZ,EAAMwZ,QAASpW,UACvFF,EAAAA,EAAAA,KAAC4W,GAAQ,CAAA1W,SAAEpD,EAAMoD,SAAS+V,MAGhC,CAEA,MAAMU,GAAoBjU,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,qBAAVH,CAAU,mGAS9BkU,GAAWlU,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,qBAAVH,CAAU,wB,gBClDpB,SAASmU,GAAW/Z,GAOzB,MAAMga,GAAQd,EAAAA,EAAAA,QAAuB,OAC9Be,EAAWC,IAAgBtb,EAAAA,EAAAA,WAAS,IACpCub,EAAcC,IAAmBxb,EAAAA,EAAAA,WAAS,GAC3Cyb,GAASrb,EAAAA,EAAAA,cAAY,KACzB,IAAKgb,EAAMV,QAAS,OACpBY,EAAaF,EAAMV,QAAQgB,UAAY,GACvC,MAAMC,EACJP,EAAMV,QAAQkB,aAAeR,EAAMV,QAAQgB,UAAYN,EAAMV,QAAQK,aAAe,EACtFS,EAAgBG,EAAe,GAAI,GAClC,KACHtb,EAAAA,EAAAA,YAAU,IAAMob,KAAU,CAACA,EAAQra,EAAMoD,YACzCwW,EAAAA,GAAAA,GAAkBI,GAAO,IAAMK,MAE/B,MAAMI,EAAkB,CAAC,oBACrBza,EAAM0a,WAAWD,EAAgBxT,KAAK,cACtCjH,EAAM2a,cAAcF,EAAgBxT,KAAK,iBAC7C,MAAM2T,EAAiBH,EAAgB9P,KAAK,KAE5C,OACEnC,EAAAA,EAAAA,MAAA,OAAKoB,UAAW,oBAAoB5J,EAAM4J,YAAa7E,MAAO/E,EAAM+E,MAAM3B,SAAA,EACxEF,EAAAA,EAAAA,KAAA,OAAK0G,UAAWgR,EAAgBjR,IAAKqQ,EAAOa,SAAUR,EAAOjX,SAC1DpD,EAAMoD,WAER6W,IAAa/W,EAAAA,EAAAA,KAAA,OAAK0G,UAAU,0BAC5BuQ,IAAgBjX,EAAAA,EAAAA,KAAA,OAAK0G,UAAW,+BAGvC,CChCO,MAAMkR,IAAuBhY,EAAAA,EAAAA,eAAc,CAAEiY,QAAS,IAEvDC,GAAU,MAET,SAASC,GAAcjb,GAC5B,MAAM2J,GAAMuP,EAAAA,EAAAA,QAAuB,OAE5B6B,EAASG,IAActc,EAAAA,EAAAA,UAAS,GAUvC,OARAuc,EAAAA,EAAAA,kBAAgB,KACdD,EAAWrK,KAAKgG,IAAI,EAAGhG,KAAKC,OAAOnH,EAAI2P,SAASC,aAAe,GAAKyB,KAAU,GAC7E,KAEHpB,EAAAA,GAAAA,GAAkBjQ,GAAMyR,IACtBF,EAAWrK,KAAKgG,IAAI,EAAGhG,KAAKC,OAAOsK,EAAMC,YAAYhC,OAAS,GAAK2B,KAAU,KAI7E9X,EAAAA,EAAAA,KAAC4X,GAAqB3X,SAAQ,CAACvF,MAAO,CAAEmd,WAAU3X,UAChDF,EAAAA,EAAAA,KAAC6W,GAAU,CAAA3W,UACTF,EAAAA,EAAAA,KAACoY,GAAAA,GAAW,CAACC,gBAAc,EAAAnY,UACzBF,EAAAA,EAAAA,KAAA,OACEyG,IAAKA,EACL5E,MAAO,CAAE0N,QAAS,OAAQ+I,IAAK,GAAIC,oBAAqB,UAAUV,WAAkB3X,SAEnFpD,EAAMoD,gBAMnB,C,uIChBO,MAAMsY,GAAa9V,EAAAA,GAAO+V,OAAM7V,WAAA,CAAAC,YAAA,oBAAbH,CAAa,iHCdhC,SAASgW,GAAK5b,GAKnB,MAAM,KAAE6b,EAAI,MAAEtb,EAAK,QAAEub,GAAY9b,GAC1B+D,GAAgBV,IACvB,OAAKwY,GAEH3Y,EAAAA,EAAAA,KAAC6Y,GAAAA,EAAO,CACNC,cAAezb,EACf0b,aACEzT,EAAAA,EAAAA,MAAC0T,GAAAA,EAAK,CAACnQ,WAAS,EAAA3I,SAAA,CACb+Y,MAAMC,QAAQP,GACbA,EAAK5R,KAAI,CAAC4R,EAAM3R,KAAUhH,EAAAA,EAAAA,KAACmZ,GAAAA,EAAS,CAAAjZ,SAAcyY,GAAR3R,MAE1ChH,EAAAA,EAAAA,KAACmZ,GAAAA,EAAS,CAAAjZ,SAAEyY,IAEbC,IACC5Y,EAAAA,EAAAA,KAACmZ,GAAAA,EAAS,CAAAjZ,UACRF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLrC,MAAMlD,EAAAA,EAAAA,KAACoZ,GAAAA,EAAmB,IAC1B/V,QAAQ,OACRsD,QAASA,IAAMhL,OAAOsO,KAAK2O,EAAS,UACpCxF,UAAQ,EACR3P,KAAK,SAAQvD,SAEZW,EAAa5C,qBAKvBiC,UAEDF,EAAAA,EAAAA,KAACqZ,GAAgB,CAAC5V,KAAK,SAAQvD,UAC7BF,EAAAA,EAAAA,KAACoF,EAAAA,EAAI,CAAC7J,KAAK,KAAI2E,UACbF,EAAAA,EAAAA,KAACsZ,GAAAA,GAA0B,WA7BjBtZ,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,GAkCpB,CAEA,MAAM2U,IAAmB3W,EAAAA,EAAAA,IAAO8V,IAAW5V,WAAA,CAAAC,YAAA,oBAAlBH,CAAkB,sBC9BrC6W,GAAa,GAEZ,SAASC,GAAkB1c,GA4ChC,MAAMK,EAAKN,EAAMC,GAEX2c,GAAmBrZ,EAAAA,EAAAA,YAAWwX,IAEpC,IAAI8B,EAAU,CACZC,IAAK,EACLpf,GAAI,EACJK,GAAI,EACJE,GAAI,EACJE,GAAI,GACJE,GAAI,GACJE,IAAK,IACL0B,EAAMqZ,OAAS,MACbuD,EAAUD,EAAiB5B,UAC7B6B,EAAUD,EAAiB5B,SAG7B,MAAO+B,EAAaC,IAAqBne,EAAAA,EAAAA,UACa,SAApDwU,aAAaC,QAAQ,MAAQhT,EAAK,eAOpC,IAAI2c,EAAa,CACfvf,GAAI,EACJK,GAAI,EACJE,GAAI,EACJE,GAAI,EACJE,GAAI,EACJE,IAAK,GACL2e,UAAMpY,GACN7E,EAAMwZ,QAAU,QAEdsD,IAAaE,OAAanY,GAE9B,MAAM2U,EAASwD,EAAaP,GAAaO,EAAa,IAAMA,EAAa,QAAKnY,EAE9E,IAAIqY,EAAU,CACZzf,GAAI,EACJK,GAAI,EACJE,GAAI,EACJE,GAAI,EACJE,GAAI,EACJE,IAAK,GACL2e,KAAMD,GACNhd,EAAMwZ,QAAU,QAEdsD,IAAaI,OAAUrY,GAE3B,MAAMsY,EAAYD,EAAUT,GAAaS,EAAU,IAAMA,EAAU,QAAKrY,EAExE,OACE2D,EAAAA,EAAAA,MAAC4U,GAAAA,EAAI,CACH/c,GAAIA,EACJgd,QAAM,EACNC,WAAS,EACTvY,MAAO,CACLwY,WAAY,mBACZC,WAAY,QAAQZ,IACpBa,QAASP,EAAU,QAAQA,SAAYrY,EACvCsY,YACAO,UAAWlE,EACXb,SAAU,UACP3Y,EAAM+E,OAEX4Y,UAAW3d,EAAM2d,UACjB/T,UAAU,sBACV,UAASvJ,EAAG+C,SAAA,EAEVpD,EAAMO,OAASP,EAAM4d,YACrBpV,EAAAA,EAAAA,MAACqV,GAAAA,EAAU,CAAAza,SAAA,EACToF,EAAAA,EAAAA,MAAC6E,EAAAA,EAAI,CACHG,WAAY,CAAED,QAAS,gBACvBvB,WAAY,CAAEuB,QAAS,oBACvBE,eAAgB,CAAEF,QAAS,yBAA0BnK,SAAA,EAErDoF,EAAAA,EAAAA,MAACkF,EAAAA,EAAQ,CAACoQ,KAAM,CAAEvQ,QAAS,QAASnK,SAAA,CACjCpD,EAAM+d,aACL7a,EAAAA,EAAAA,KAAC8a,GAAAA,EAAI,CAAC,UAAQ,YAAY7S,UAAU,QAAQpG,MAAO,CAAEsG,QAAS,IAAMjI,SACjEpD,EAAM+d,cAGXvV,EAAAA,EAAAA,MAAA,OAAApF,SAAA,EACEF,EAAAA,EAAAA,KAAC+a,GAAAA,EAAK,CACJ,UAAQ,aACRC,aAAa,KACbzf,KAAK,KACLsG,MAAO,CAAE0N,QAAS,eAAgB0L,cAAe,UAAWC,WAAY,OAAQhb,SAE/EpD,EAAMO,SAET2C,EAAAA,EAAAA,KAAC0Y,GAAI,CAACC,KAAM7b,EAAM6b,KAAMtb,MAAOP,EAAMqe,UAAWvC,QAAS9b,EAAMse,iBAEhEte,EAAMue,WACLrb,EAAAA,EAAAA,KAAC8a,GAAAA,EAAI,CAAC,UAAQ,gBAAgB7S,UAAU,QAAQpG,MAAO,CAAEsG,QAAS,IAAMjI,SACrEpD,EAAMue,cAIZve,EAAMwe,iBAAkBtb,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAAtK,SAAEpD,EAAMwe,kBAC1Ctb,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAAtK,UACPF,EAAAA,EAAAA,KAAC8a,GAAAA,EAAI,CAAC,UAAQ,iBAAiB7S,UAAU,QAAO/H,SAC7CpD,EAAM4d,WAAY1a,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CAACC,GAAIhL,EAAMgL,GAAa5H,SAAEpD,EAAM4d,eAG3D5d,EAAMye,cACLvb,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAAtK,UACPF,EAAAA,EAAAA,KAACwb,GAAAA,GAAc,CACb3Z,MAAO,CACL4Z,UAAW7B,EAAc,eAAiB,gBAC1CS,WAAY,aAEd1T,QAASA,KAAM+U,OA7F7B7B,EADoB8B,GA8FuB/B,QA5F3C1J,aAAac,QAAQ,MAAQ7T,EAAK,aAAcwe,EAAY,OAAS,SAFjDA,KA8FoC,SAKjD7e,EAAM8e,cAAgBhC,IACrB5Z,EAAAA,EAAAA,KAAA,QAAM6B,MAAO,CAAEsG,QAAS,GAAK0T,WAAY,GAAI3b,SAAEpD,EAAM8e,kBAIzDhC,GAAe9c,EAAMoD,UACrB0Z,GAAe9c,EAAMgf,qBACrB9b,EAAAA,EAAAA,KAAC+b,GAAAA,EAAU,CAACla,MAAO,CAAEma,UAAW,OAAQ9b,UACtCF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLlC,QAAQ,OACRH,KAAMpG,EAAMgf,mBAAmB5Y,KAAOpG,EAAMgf,mBAAmB5Y,KAAO,KACtEyD,QAASA,KACF7J,EAAMgf,oBAAoBnV,SAAS,EACxCzG,SAEDpD,EAAMgf,mBAAmBze,YAMtC,C,oGC1MO,SAAS4e,GAAgBnf,GAO9B,OAAIA,EAAMof,YAENlc,EAAAA,EAAAA,KAACmc,GAA8B,CAAAjc,SAC5BpD,EAAMsf,OAAOrV,KAAI,CAACsV,EAAMrV,IACJ,IAAfqV,EAAKC,QAAmC,IAApBxf,EAAMyf,WAA2Bvc,EAAAA,EAAAA,KAACsB,EAAAA,SAAQ,GAAM0F,IAEtE1B,EAAAA,EAAAA,MAACkX,GAAkC,CAAAtc,SAAA,EACjCF,EAAAA,EAAAA,KAACyc,GAAoB,CACnBtf,GAAI,GAAGL,EAAMK,MAAMkf,EAAK/e,MAAMJ,cAAcvC,QAAQ,KAAM,aAC1D2B,MAAO+f,EAAK/f,SAEa,IAA1BQ,EAAM4f,gBAA4B,MAAO1c,EAAAA,EAAAA,KAAC2c,GAAoB,CAACL,MAAOD,EAAKC,SAC5Etc,EAAAA,EAAAA,KAAC4c,GAAoB,CAACtf,MAAO+e,EAAK/e,MAAOkX,KAAM6H,EAAK7H,SANbxN,QAcjDhH,EAAAA,EAAAA,KAAC6c,GAA4B,CAAA3c,SAC1BpD,EAAMsf,OAAOrV,KAAI,CAACsV,EAAMrV,IACJ,IAAfqV,EAAKC,QAAmC,IAApBxf,EAAMyf,WAA2Bvc,EAAAA,EAAAA,KAACsB,EAAAA,SAAQ,GAAM0F,IAEtE1B,EAAAA,EAAAA,MAAChE,EAAAA,SAAQ,CAAApB,SAAA,EACPF,EAAAA,EAAAA,KAACyc,GAAoB,CAACngB,MAAO+f,EAAK/f,SACP,IAA1BQ,EAAM4f,gBAA4B,MACjC1c,EAAAA,EAAAA,KAAC2c,GAAoB,CACnBxf,GAAI,GAAGL,EAAMK,MAAMkf,EAAK/e,MAAMJ,cAAcvC,QAAQ,KAAM,aAC1D2hB,MAAOD,EAAKC,SAGhBtc,EAAAA,EAAAA,KAAC4c,GAAoB,CAACtf,MAAO+e,EAAK/e,MAAOkX,KAAM6H,EAAK7H,SARvCxN,MAczB,CAEA,SAASyV,GAAqB3f,GAC5B,OAAOkD,EAAAA,EAAAA,KAAC8c,GAAyB,CAAC3f,GAAIL,EAAMK,GAAI0E,MAAO,CAAE2D,gBAAiB1I,EAAMR,QAClF,CAEA,SAASqgB,GAAqB7f,GAC5B,OAAOkD,EAAAA,EAAAA,KAAC+c,GAAyB,CAAC5f,GAAIL,EAAMK,GAAG+C,SAAEpD,EAAMwf,OACzD,CAEA,SAASM,GAAqB9f,GAC5B,OACEkD,EAAAA,EAAAA,KAACgd,GAAyB,CAAA9c,SACvBpD,EAAM0X,MACLxU,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CAACC,GAAIhL,EAAM0X,KAAM3S,MAAO,CAAEob,eAAgB,QAAS/c,SACrDpD,EAAMQ,QAGTR,EAAMQ,OAId,CAEA,MAAM6e,GAAiCzZ,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,wGAS3C8Z,GAAqC9Z,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,wFAQ/Cma,GAA+Bna,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,sGAQzCoa,GAA4Bpa,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,gEAOtCqa,GAA4Bra,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,wDAMtCsa,GAA4Bta,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,sCC9FtCwa,IAAyBC,EAAAA,GAAAA,GAAgB,UAAW,UAInD,SAASC,GAAmBtgB,GAmCjC,MAAM,UAAEyf,EAAS,OAAEc,EAAM,OAAEC,EAAM,UAAEC,EAAS,iBAAEC,GAAqB1gB,EACnE,IAAI,OAAE2gB,GAAW3gB,EACjB2gB,EAASlB,EACLkB,EACAA,EAAOtf,QAAQuf,IACb,IAAK,MAAMhjB,KAASgjB,EAAM5T,OACxB,GAAoB,IAAhBpP,EAAMA,MAAa,OAAO,EAEhC,OAAO,CAAK,IAElB,MAAMijB,EAAaF,EAChBtf,QAAQuf,KAAYA,EAAMpgB,QAC1ByJ,KAAI,CAAC2W,EAAO1W,KACJ,CACL4W,UAAW,GAAG5W,IACd5J,KAAMsgB,EAAMpgB,MACZugB,OAAQ,CAAEC,KAAMJ,EAAMphB,MAAOmH,KAAM,cAInC2Y,EAASqB,EACZtf,QAAQuf,KAAYA,EAAMpgB,QAC1ByJ,KAAK2W,IAAK,CACTpgB,MAAOogB,EAAMpgB,MACbgf,MAAOoB,EAAM5T,OAAOiU,QAAO,CAACC,EAAKtjB,IAAUsjB,EAAMtjB,EAAMA,OAAO,GAC9D4B,MAAOohB,EAAMphB,MACbkY,KAAMkJ,EAAMlJ,SAGVyJ,GAAa5Z,EAAAA,EAAAA,UAAQ,KACzB,MAAM6Z,EAAoC,CAAC,EAC3C,IAAK,MAAMR,KAASD,EAClB,IAAK,MAAMvF,KAASwF,EAAM5T,OACxBoU,EAAUhG,EAAM5a,QAAU4gB,EAAUhG,EAAM5a,QAAU,GAAK4a,EAAMxd,MAGnE,OAAOmP,OAAOC,OAAOoU,GAAWH,QAAO,CAACpK,EAAKjZ,IAAWA,EAAQiZ,EAAMjZ,EAAQiZ,GAAM,EAAE,GACrF,CAAC8J,IAEEU,EAAU,CACdC,KAAMthB,EAAMqhB,SAASC,KAAO,GAAK,GACjCC,QAASvhB,EAAMqhB,SAASE,QAAU,IAAM,GACxCC,MAAOxhB,EAAMqhB,SAASG,MAAQ,IAAiD,IAA3C3Q,KAAK4Q,MAAMN,GAAYO,WAAWhb,OAAe,GACrF0F,OAAQpM,EAAMqhB,SAASjV,OAAS,GAAK,IAGvC,OACE5D,EAAAA,EAAAA,MAAA,OACEzD,MAAO,CACLyU,OAAQxZ,EAAMwZ,OACd/G,QAAS,OACTkP,SAAU,EACVxE,UAAW,QACX/Z,SAAA,CAEDod,IACCtd,EAAAA,EAAAA,KAAC0e,GAAU,CAACphB,MAAOggB,EAAQzB,WAAYsC,EAAQC,IAAKO,cAAeR,EAAQE,UAE7E/Y,EAAAA,EAAAA,MAAA,OACEzD,MAAO,CACL0N,QAAS,OACTqP,cAAe,SACfH,SAAU,EACVnG,IAAK,IACLpY,SAAA,EAEFF,EAAAA,EAAAA,KAAA,OAAK6B,MAAO,CAAEyU,OAAQ,OAAQuI,QAAS,IAAK3e,UAC1CF,EAAAA,EAAAA,KAAC+V,GAAkB,CAACrP,UAAU,aAAYxG,SACtC3E,IACA+J,EAAAA,EAAAA,MAACwZ,GAAAA,EAAK,CACJX,QAASA,EACTY,WAAYtB,EAAO1W,KAAK2W,GAAUA,EAAMphB,QACxCga,OAAQ/a,EAAK+a,OACbH,MAAO5a,EAAK4a,MACZoH,UAAWA,EACXyB,UAAW,CAAEC,EAAGhB,GAChBiB,oBACElf,EAAAA,EAAAA,KAACkd,GAAsB,CACrBiC,gBAAgB,IAChBjV,OAASkV,GAA6CA,EAAMC,MAAMJ,EAAET,WACpEc,gBACEtf,EAAAA,EAAAA,KAACuf,GAAAA,EACC,CACA5B,WAAYA,EACZ6B,aAAc,IAGlBC,qBAAmB,EACnBC,iBAAiB,IACjBC,eAAgB,KAEnBzf,SAAA,EAEDF,EAAAA,EAAAA,KAAC4f,GAAAA,EAAS,CAACC,iBAAe,KAC1B7f,EAAAA,EAAAA,KAAC4f,GAAAA,EAAS,CACRE,eAAa,EACbC,UAAQ,EACRC,YACuB,IAArBxC,OACI7b,EACCuF,GAAe1M,OAAO8Q,UAAUpE,GAAKA,EAAI,KAG/B,cAAlBpK,EAAMuG,SACLoa,EAAO1W,KAAI,CAAC2W,EAAO1W,KACjBhH,EAAAA,EAAAA,KAACigB,GAAAA,EAAS,CAER7iB,KAAM4J,EAAMwX,WACZ3c,MAAO,CAAEqe,KAAM,CAAEC,YAAa,EAAGC,OAAQ1C,EAAMphB,QAC/C4jB,KAAMxC,EAAM5T,OAAO/C,KAAKrM,IAAK,CAAQ2lB,EAAG3lB,EAAM4C,MAAO2hB,EAAGvkB,EAAMA,UAC9D4lB,cAAc,aAJTtZ,KAOQ,cAAlBlK,EAAMuG,SACLoa,EAAO1W,KAAI,CAAC2W,EAAO1W,KACjBhH,EAAAA,EAAAA,KAACugB,GAAAA,EAAY,CAEXnjB,KAAM,WAAa4J,EACnBkZ,KAAMxC,EAAM5T,OAAO/C,KAAKrM,IAAK,CAAQ2lB,EAAG3lB,EAAM4C,MAAO2hB,EAAGvkB,EAAMA,UAC9Da,KAAMA,EAAGilB,YAAcA,EAAS,EAAI,EACpC3e,MAAO,CAAEqe,KAAM,CAAEpC,KAAMJ,EAAMphB,SAJxB,WAAa0K,OAOrBlK,EAAMuG,SAA6B,qBAAlBvG,EAAMuG,WACxBrD,EAAAA,EAAAA,KAACygB,GAAAA,EAAU,CAAAvgB,SACRud,EAAO1W,KAAI,CAAC2W,EAAO1W,KAClBhH,EAAAA,EAAAA,KAAC0gB,GAAAA,EAAS,CAERtjB,KAAM4J,EAAMwX,WACZ0B,KAAMxC,EAAM5T,OAAO/C,KAAKrM,IAAK,CAAQ2lB,EAAG3lB,EAAM4C,MAAO2hB,EAAGvkB,EAAMA,UAC9D4lB,cAAc,YACdze,MAAO,CAAEqe,KAAM,CAAEC,YAAa,KAJzBnZ,SASVlK,EAAMuG,SAA6B,qBAAlBvG,EAAMuG,WACxBrD,EAAAA,EAAAA,KAACygB,GAAAA,EAAU,CAAAvgB,SACRud,EAAO1W,KAAI,CAAC2W,EAAO1W,KAClBhH,EAAAA,EAAAA,KAACugB,GAAAA,EAAY,CAEXnjB,KAAM,WAAa4J,EACnBkZ,KAAMxC,EAAM5T,OAAO/C,KAAKrM,IAAK,CAC3B2lB,EAAG3lB,EAAM4C,MACT2hB,EAAGvkB,EAAMA,UAEXa,KAAMA,EAAGilB,YAAcA,EAAS,EAAI,GAN/B,WAAaxZ,cAejCqW,IACCrd,EAAAA,EAAAA,KAAC2gB,GAAU,CAACrjB,MAAO+f,EAAQ3X,YAAayY,EAAQG,KAAM1W,aAAcuW,EAAQjV,SAE9ElJ,EAAAA,EAAAA,KAACic,GAAe,CACd9e,GAAIL,EAAMK,IAAM,QAChBif,OAAQA,EACRF,YAAU,EACVQ,gBAAiB5f,EAAM4f,gBACvBH,UAAWzf,EAAMyf,iBAK3B,CAEA,SAASoE,GAAW7jB,GAClB,OACEkD,EAAAA,EAAAA,KAAA,QACE6B,MAAO,CACL2Y,UAAW,MACXjL,QAAS,OACThF,eAAgB,SAChBzB,WAAY,SACZpD,YAAa5I,EAAM4I,YACnBkC,aAAc9K,EAAM8K,cACpB1H,SAEDpD,EAAMQ,OAGb,CAEA,SAASohB,GAAW5hB,GAMlB,OACEkD,EAAAA,EAAAA,KAAA,OACE6B,MAAO,CACL4T,SAAU,MACVlG,QAAS,OACThF,eAAgB,SAChBzB,WAAY,SACZpD,YAAa5I,EAAM4I,YACnBiZ,cAAe7hB,EAAM6hB,cACrB9C,WAAY/e,EAAM+e,WAClB9Z,YAAa,IACb7B,UAEFF,EAAAA,EAAAA,KAAA,QAAM6B,MAAO,CAAE4Z,UAAW,iBAAkB/F,WAAY,UAAWxV,SAAEpD,EAAMQ,SAGjF,C,mDCnQA,MAAMsjB,GAAgBle,EAAAA,GAAO+V,OAAM7V,WAAA,CAAAC,YAAA,oBAAbH,CAAa,2RAQnC,SAASme,GAAgB/jB,GAOvB,MAAM,UAAEsF,EAAY,GAAE,QAAEH,EAAO,OAAE6e,EAAM,GAAE3jB,EAAK,GAAE,SAAEsY,EAAW,MAAOsL,GAASjkB,GACtE+D,GAAgBV,IACvB,OAAK8B,GAIHjC,EAAAA,EAAAA,KAAC6Y,GAAAA,EAAO,CACNE,YAAa9W,EACb6W,cAAegI,EACfE,oBAAkB,EAClB7jB,GAAIA,EACJ,UAASA,EACTsY,SAAUA,KACNsL,EAAI7gB,UAERF,EAAAA,EAAAA,KAAC4gB,GAAa,CACZ,aAAYxe,GAAavB,EAAavC,gBACtC,gBAAc,OACdoI,UAAU,iCACVC,QAAU2J,GAAMA,EAAEwF,iBAClBrS,KAAK,SAAQvD,UAEbF,EAAAA,EAAAA,KAACihB,GAAAA,GAAQ,QAnBN,IAuBX,CCrCO,SAASC,GAAWpkB,GAQzB,MAAMK,EAAKN,EAAMC,IACX,MAAEQ,EAAK,SAAE4C,EAAQ,SAAEihB,EAAQ,QAAEC,GAAYtkB,EAC/C,OAAIoD,SAAqE,KAAbA,GAGxDkhB,GAFKphB,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,KAMPY,EAAAA,EAAAA,MAAC+b,GAAAA,EAAoB,CAACxf,MAAO,CAAEyY,WAAYxd,EAAMwkB,UAAY,cAAW3f,GAAYzB,SAAA,CACjF5C,IACCgI,EAAAA,EAAAA,MAACic,GAAAA,EAAmB,CAAC,UAAS,SAASpkB,IAAK+C,SAAA,CACzC5C,EACA6jB,GAAWnhB,EAAAA,EAAAA,KAAC6gB,GAAe,CAACC,OAAQxjB,EAAO2E,QAASkf,IAAe,SAGxEnhB,EAAAA,EAAAA,KAACwhB,GAAgC,CAACrkB,GAAIA,EAAI,UAASA,EAAG+C,SACnDA,MAIT,CAEA,MAAMshB,IAAmC9e,EAAAA,EAAAA,IAAO+e,GAAAA,GAA2B7e,WAAA,CAAAC,YAAA,qBAAlCH,CAAkC,kB,gBCnCpE,SAASgf,GAAY5kB,GAS1B,MAAM,eAAE6kB,EAAc,aAAEC,GAAiB9kB,EACnCgT,EAAWD,KACXgS,EAAc/kB,EAAMglB,kBAAoBhS,EAASc,WACjDmR,EAAkBjlB,EAAMilB,gBAAkBjlB,EAAMilB,gBAAkBjS,EAASa,YAC3E8J,EAAY3d,EAAM2d,UAExB,IAAIxS,GACF3C,EAAAA,EAAAA,MAAC0c,GAAiB,CAAC3e,QAAQ,QAAQ8a,QAAS,CAAE9T,QAAS,aAAcnK,SAAA,CAClE0hB,GACCA,EAAape,OAAS,GACtBoe,EAAa7a,KAAI,CAACkb,EAAavU,KAC7B1N,EAAAA,EAAAA,KAACmM,GAAAA,EAAK,CACJtK,MAAO,CAAEgd,OAAQ,IACjBzL,UAAQ,EACR/V,MAAO4kB,EACP5e,QAAQ,UAER,UAAS4e,GADJvU,MAIX1N,EAAAA,EAAAA,KAACkiB,GAAAA,EAAe,CACdL,YAAa,CACXjnB,GAAIinB,EACJ/mB,GAAI+mB,EACJ7mB,GAAI6mB,EACJ3mB,GAAI2mB,EACJ,MAAOA,GAETM,eACsB,aAApBJ,EACI,CACE1X,QAAS,OACTzP,GAAI,OACJE,GAAI,OACJE,GAAI,OACJE,GAAI,OACJ,MAAO,QAEW,QAApB6mB,EACE,CACE1X,QAAS,OACTzP,GAAI,OACJE,GAAI,OACJE,GAAI,OACJE,GAAI,OACJ,MAAO,aAETyG,EAERE,MAAO,CAAE4T,SAAU,KAAM0I,QAASwD,OAAiBhgB,EAAY,IAC/D8Y,UAAWA,EAAUva,SAEpBpD,EAAMoD,cAOb,OAHKpD,EAAMslB,gBACTna,GAAYjI,EAAAA,EAAAA,KAAC6W,GAAU,CAAA3W,SAAE+H,KAEpBA,CACT,CAEA,MAAM+Z,IAAoBtf,EAAAA,EAAAA,IAAO0V,GAAAA,IAAYxV,WAAA,CAAAC,YAAA,qBAAnBH,CAAmB,mCC7EtC,IAAK2f,GAAkB,SAAlBA,GAAkB,OAAlBA,EAAkB,cAAlBA,EAAkB,YAAlBA,EAAkB,cAAlBA,CAAkB,MCOlBC,GAAiB,SAAjBA,GAAiB,OAAjBA,EAAiB,0BAAjBA,EAAiB,oBAAjBA,EAAiB,gBAAjBA,CAAiB,MAYjBC,GAAgB,SAAhBA,GAAgB,OAAhBA,EAAgB,YAAhBA,EAAgB,oBAAhBA,EAAgB,0BAAhBA,EAAgB,gBAAhBA,EAAgB,kBAAhBA,EAAgB,sBAAhBA,CAAgB,MAqBhBC,GAAgB,SAAhBA,GAAgB,OAAhBA,EAAgB,YAAhBA,EAAgB,oBAAhBA,EAAgB,0BAAhBA,EAAgB,gBAAhBA,CAAgB,MAehBC,GAAiB,SAAjBA,GAAiB,OAAjBA,EAAiB,gBAAjBA,CAAiB,MAMjBC,GAAqB,SAArBA,GAAqB,OAArBA,EAAqB,gBAArBA,CAAqB,MAOrBC,GAAc,SAAdA,GAAc,OAAdA,EAAc,YAAdA,CAAc,MAsHnB,SAASC,GAAkC9lB,GAIhD,MAAM,KAAEuf,EAAI,OAAEwG,GAAW/lB,EACzB,IAAK+lB,EAAQ,OAAO7iB,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,IACpB,OAAQme,EAAOpf,MACb,IAAK,OACH,OAAOzD,EAAAA,EAAAA,KAACmV,GAAQ,CAAC1G,KAAMoU,EAAOnoB,MAAM2hB,GAAOvU,GAAI+a,EAAO/a,KAAKuU,KAC7D,IAAK,cACH,OAAOrc,EAAAA,EAAAA,KAAA,OAAK6B,MAAO,CAAE8N,SAAU,IAAK+F,WAAY,UAAWxV,SAAE2iB,EAAOnoB,MAAM2hB,KAC5E,IAAK,WACH,OAAOrc,EAAAA,EAAAA,KAACqS,GAAY,CAAC3X,MAAOmoB,EAAOnoB,MAAM2hB,KAC3C,IAAK,QAEH,OAAOrc,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SAAG2iB,EAAOnoB,MAAM2hB,IAAS,MAClC,IAAK,SACH,OAAOrc,EAAAA,EAAAA,KAACiU,GAAU,CAAC/J,OAAQ2Y,EAAOnoB,MAAM2hB,IAAS,KACnD,QACE,OAAOrc,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SAAG2iB,EAAOC,KAAKzG,KAE5B,CAiCO,SAAS0G,GAAyClL,GACvD,OAAOxT,EAAAA,EAAAA,UACL,IAAMwT,EAAQ1Z,QAAQ0kB,GAAWA,EAAOG,QAAUP,GAAkBQ,UACpE,CAACpL,GAEL,CAGO,SAASqL,GAAsCrL,GAOpD,OADAA,EAwDK,SAAwDA,GAC7D,OAAOxT,EAAAA,EAAAA,UACL,IACEwT,EAAQ9Q,KAAK8b,IAAM,IACdA,EACHM,MAAON,EAAOM,QAAUb,GAAkBc,cAAWzhB,EAAYkhB,EAAOM,WAE5E,CAACtL,GAEL,CAjEYwL,CADVxL,EAoDK,SAAiDA,GACtD,OAAOxT,EAAAA,EAAAA,UAAQ,IAAMwT,EAAQ9Q,KAAK8b,IAAM,IAAWA,EAAQzjB,UAAMuC,OAAe,CAACkW,GACnF,CAtDYyL,CAJVzL,GAAUxT,EAAAA,EAAAA,UACR,IAAMwT,EAAQ1Z,QAAQ0kB,GAAWA,EAAOU,YAAcb,GAAsBO,UAC5E,CAACpL,KAKL,CC1PO,SAAS2L,GAAyC1mB,GAMvD,MAAM,KAAEuf,EAAI,QAAExE,EAAO,SAAE3X,GAAapD,EAE9B2mB,GAAmBpf,EAAAA,EAAAA,UACvB,IACEwT,EAAQ1Z,QAAQ0kB,IACd,IAAKxG,EAAM,OAAO,EAClB,GAAI,UAAWwG,GAAUA,EAAOnoB,MAAO,CACrC,MAAMgpB,EAAYb,EAAOnoB,MAAM2hB,GAC/B,GACEqH,SAEsB,iBAAdA,GAAsD,IAA5BA,EAAUC,OAAOngB,OAEnD,OAAO,CACX,CACA,OAAO,CAAI,KAEf,CAACqU,EAASwE,IAONuH,GAAevf,EAAAA,EAAAA,UACnB,IAAMof,EAAiBtlB,QAAQ0kB,GAAWA,EAAOgB,WAAalB,GAAemB,QAC7E,CAACL,IAEGM,GAAc1f,EAAAA,EAAAA,UAClB,IAAMof,EAAiBtlB,QAAQ0kB,GAAWA,EAAOgB,WAAalB,GAAemB,QAC7E,CAACL,IAEH,OAAKpH,GACAoH,EAAiBjgB,QAEpB8B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,CACG0jB,EAAa7c,KAAK8b,IAEf7iB,EAAAA,EAAAA,KAACkhB,GAAU,CAETC,SAAU0B,EAAO1B,SACjB7jB,MAAOulB,EAAO/B,OAAO5gB,UAErBF,EAAAA,EAAAA,KAAC4iB,GAAe,CAACC,OAAQA,EAAQxG,KAAMA,KAJlCwG,EAAO1lB,IAAM0lB,EAAO/B,UAQ9B5gB,GAAsB,KACtB6jB,EAAYhd,KAAK8b,IAEd7iB,EAAAA,EAAAA,KAACkhB,GAAU,CAAkC5jB,MAAOulB,EAAO/B,OAAO5gB,UAChEF,EAAAA,EAAAA,KAAC4iB,GAAe,CAACC,OAAQA,EAAQxG,KAAMA,KADxBwG,EAAO1lB,IAAM0lB,EAAO/B,aAlB3B,IAyBpB,C,mGCnEO,MAAMkD,GAAuBhX,IAClC,MAAMiX,EAA4B,CAAC,QAC7BC,EAA6B,CAAC,oBAE9BC,EAAsC,GACtCC,EAAkC,GAExC,cAAepX,GACb,IAAK,SACHmX,EAAcpgB,KAAK,CAAEsJ,QAASL,IAC9B,MACF,IAAK,SACH,GAAc,OAAVA,EAAgB,MAEpB,GAAIiM,MAAMC,QAAQlM,GAAQ,CACxB,IAAK,MAAMtS,KAASsS,EACG,iBAAVtS,GACTypB,EAAcpgB,KAAK,CAAEsJ,QAAS3S,IAGlC,KACF,CAEA,IAAK,MAAM2pB,KAAmBJ,EAC5B,GACEI,KAAmBrX,GAC4C,iBAAvDA,EAAkCqX,IACc,OAAvDrX,EAAkCqX,GAGnC,IAAK,MAAMjnB,KAAS4P,EAA8BqX,GAAkB,CAClE,MAAM3pB,EACHsS,EAAkCqX,GACnCjnB,GACF,GAAI8mB,EAAiB3b,SAASnL,IAC5B,GAAqB,iBAAV1C,EACTypB,EAAcpgB,KAAK,CAAEsJ,QAAS3S,SACzB,GAAIue,MAAMC,QAAQxe,GACvB,IAAK,MAAM2S,KAAW3S,EACG,iBAAZ2S,GACT8W,EAAcpgB,KAAK,CAAEsJ,iBAK3B,GAAqB,iBAAV3S,EACT0pB,EAAYrgB,KAAK,CAAE3G,OAAMiQ,QAAS3S,SAC7B,GAAIue,MAAMC,QAAQxe,GACvB,IAAK,MAAM2S,KAAW3S,EACG,iBAAZ2S,GACT+W,EAAYrgB,KAAK,CAAE3G,OAAMiQ,WAKnC,MACSL,aAAiBsX,OAC1BH,EAAcpgB,KAAK,CAAEsJ,QAASL,EAAMK,UAM5C,MAAO,CAAE8W,gBAAeC,cAAa,E,kSC1ChC,SAASG,GAA+BznB,GAC7C,MAAO+I,EAAQ2e,IAAa9oB,EAAAA,EAAAA,WAAS,GAC/B+oB,EAAkBnpB,EAAc,OAC/BuF,GAAgBV,KAEjB,UAAEukB,EAAS,cAAE5jB,EAAa,YAAE6jB,EAAW,YAAEC,EAAW,cAAEC,GAAkB/nB,EAExEgoB,OACgBnjB,IAApB7E,EAAMioB,WACNjoB,EAAMioB,UAAY,GAClBL,GACAA,EAAUlhB,OAAS,IAClBkhB,GAAa,IAAIpgB,OAAO+X,GAASvb,GAAeyH,SAAS8T,KAEtD2I,GAAmBlpB,EAAAA,EAAAA,cAAY,KAC/BgpB,EACFF,MAEAD,IAAcD,GAAa,GAC7B,GACC,CAACI,EAAsBF,EAAaD,EAAaD,IAE9CO,GAAa5gB,EAAAA,EAAAA,UAAQ,IACrBogB,EACE3jB,GAAiBA,EAAc0C,OAAS,EACnC,GAAG1C,EAAc0C,kBAEnB,GAEH1C,GAAiBA,EAAc0C,OAAS,EACnC,GAAG1C,EAAc0C,SAEnB,IAER,CAACihB,EAAiB3jB,IAEfokB,GAAsB7gB,EAAAA,EAAAA,UAC1B,IAAMqgB,GAAWvmB,QAAQke,IAAUvb,GAAeyH,SAAS8T,MAC3D,CAACqI,EAAW5jB,IAORqkB,GAAsB9gB,EAAAA,EAAAA,UAC1B,IACEW,QACE6f,GACE/jB,GACAokB,IACCJ,GACDhkB,GAAe0C,OAAS0hB,EAAoB1hB,OAASqhB,IAE3D,CAACC,EAAsBD,EAAe/jB,EAAeokB,IAGjD5e,GAASjC,EAAAA,EAAAA,UAAQ,KACrB,MAAM+gB,EAAgBtkB,EAAgBA,EAAc0C,OAAS,EAC7D,OACExD,EAAAA,EAAAA,KAACqlB,GAAAA,EAAc,CACbC,iBAAkB,EAChBtlB,EAAAA,EAAAA,KAACulB,GAAAA,EAAsB,CACrBpoB,GAAG,aACHsL,OAAQ,aAER,UAAQ,aACR,aAAW,aACXlH,YAAWujB,GAA8BM,EAAgB,GAAI,KAC7D9iB,SAAU0iB,EAAiB9kB,SAE1B+kB,GANG,eASR1iB,SAAUA,CAACijB,EAAQ3f,IAAW2e,EAAU3e,GACxC9E,WAAYokB,GACZ,GAEH,CAACrkB,EAAegkB,EAAsBE,EAAkBC,EAAYE,IAEjEM,GAAyBphB,EAAAA,EAAAA,UAAQ,KAEnCrE,EAAAA,EAAAA,KAACuH,GAAAA,EAAY,CACXpK,GAAG,cACHsL,OAAQ,cAER9B,QAASA,KACPie,MACAJ,GAAU,EAAM,EAChBtkB,SAEDpD,EAAM4oB,gBAAkB7kB,EAAa5B,YANlC,gBASP,CAACnC,EAAM4oB,eAAgB7kB,EAAa5B,WAAY2lB,IAE7Ce,GAAyBthB,EAAAA,EAAAA,UAAQ,KAEnCrE,EAAAA,EAAAA,KAACuH,GAAAA,EAAY,CACXpK,GAAG,cACHsL,OAAQ,cAER9B,QAASA,KACPge,IAAcD,GAAa,IAC3BF,GAAU,EAAM,EAChBtkB,SAED,UAAUwkB,GAAWlhB,QAAU,gBAN5B,gBASP,CAACmhB,EAAaD,IAEXkB,GAAgBvhB,EAAAA,EAAAA,UAAQ,IACHvD,GAAiBA,EAAc0C,OAAS,EAGxD,CAACiiB,EAAwBE,GAEzB,CAACA,IAET,CAACF,EAAwBE,EAAwB7kB,IAEpD,OAEEd,EAAAA,EAAAA,KAAA,OAAK6B,MAAO,CAAEC,YAAa,GAAI5B,UAC7BF,EAAAA,EAAAA,KAAC4F,GAAAA,EAAQ,CACPC,OAAQA,EACRS,OAAQA,EACRsf,cAAeA,EAEf/jB,MAAO,CAAEgkB,OAAQ,QAIzB,C,sOC3JO,SAASC,GACdprB,EACAqrB,GAEA,MAAOC,EAAYC,IAAiBvqB,EAAAA,EAAAA,WAAY,IAAMhB,KACtDqB,EAAAA,EAAAA,YAAU,IAAMkqB,EAAcvrB,IAAQ,CAACA,IAEvC,MAAMwrB,GAAapqB,EAAAA,EAAAA,cAChBpB,IACKqrB,EACFA,EAASrrB,GAETurB,EAAcvrB,EAChB,GAEF,CAACqrB,IAGH,MAAO,CAACC,EAAYE,EACtB,CCsHO,SAASC,GAGdrpB,GACA,MAAM,IAAQqK,EAAAA,EAAAA,OACR,GACJhK,EAAE,KACF+F,EAAI,YACJkjB,EAAW,OACXtc,EAAM,SACNhE,EAAQ,QACRugB,EAAO,QACPhjB,EAAO,sBACPijB,EAAqB,YACrBC,EAAW,WACXC,EAAU,oBACVC,GACE3pB,GACGmN,EAAMyc,GAAWZ,GAAoBhpB,EAAMmN,OAAQ,EAAOnN,EAAM4pB,UAChEC,EAAaC,GAAkBd,GACpChpB,EAAM6pB,aAAe,GACrB7pB,EAAM8pB,gBAGFC,GAAgB7Q,EAAAA,EAAAA,QAAuB,MAEvC8Q,GAAkBziB,EAAAA,EAAAA,UAAQ,KAC9B,MAAMyiB,EAA8C,GACpD,IAAK,MAAMpsB,KAASoP,GAAU,GAAI,CAChC,MAAMid,EAASV,EAAQ7hB,MAAMuiB,GAC3BN,EAAsBA,EAAoBM,EAAOrsB,MAAOA,GAASqsB,EAAOrsB,QAAUA,IAEhFqsB,EACFD,EAAgB/iB,KAAKgjB,GACZP,QACK7kB,IAAVjH,GACFosB,EAAgB/iB,KAAK,CAAEzG,MAAOkpB,EAAW9rB,GAAkBA,SAGjE,CACA,OAAOosB,CAAe,GACrB,CAACT,EAASG,EAAY1c,EAAQ2c,IAiF3BO,GAAW3iB,EAAAA,EAAAA,UAAQ,IAAMyiB,EAAgB/f,KAAKggB,GAAWA,EAAOzpB,SAAQ,CAACwpB,IAEzEG,GAAkBnrB,EAAAA,EAAAA,cACtB,CAACgR,EAAYoa,KACXphB,GAAUqhB,IACR,MAAMC,EAAoBf,EAAQ7hB,MAAMuiB,QACnBplB,IAAfolB,EAAO3a,IAA0B2a,EAAO3a,MAAQ8a,EACxCH,EAAOzpB,QAAU4pB,IAoB/B,OAlBIE,SAMMzlB,IAJNwlB,GAAgB3iB,MAAM9J,GACpB+rB,EACIA,EAAoB/rB,EAAO0sB,EAAkB1sB,OAC7CA,IAAU0sB,EAAkB1sB,QAGlCysB,EAAiBA,EAAehpB,QAAQzD,GACtC+rB,GACKA,EAAoB/rB,EAAO0sB,EAAkB1sB,OAC9CA,IAAU0sB,EAAkB1sB,SAGlCysB,EAAiBA,EAAiB,IAAIA,GAAkB,IACzCpjB,KAAKqjB,EAAkB1sB,QAGnCysB,CAAc,GACrB,GAEJ,CAACrhB,EAAUugB,EAASI,IAGhBY,GAAYrR,EAAAA,EAAAA,QAAyB,OAC3Cja,EAAAA,EAAAA,YAAU,KACHkO,GACH2c,EAAe,GACjB,GACC,CAAC3c,EAAM2c,IAEV,MAAMU,GAAiBjjB,EAAAA,EAAAA,UAAQ,KAC7B,MAAMkjB,EAAalB,EAAQloB,QAAQ4oB,GACb,KAAhBJ,GACQI,EAAOzpB,MAAMJ,cAAcqL,SAASoe,EAAYzpB,iBAK9D,OAHKJ,EAAM0qB,oBACTD,EAAWnoB,MAAK,CAACiM,EAAGoc,IAAMpc,EAAE/N,MAAMJ,cAAcwqB,cAAcD,EAAEnqB,MAAMJ,iBAEjEqqB,CAAU,GAChB,CAAClB,EAASvpB,EAAM0qB,mBAAoBb,IAEjClJ,GAASpZ,EAAAA,EAAAA,UAAQ,KAErB,GADkBgiB,EAAQsB,MAAMZ,KAAaA,EAAOrJ,QACrC,CACb,MAAMD,EAAqD,CAAC,EAC5D,IAAK,MAAMsJ,KAAUO,EAAgB,CACnC,MAAM5J,EAAQqJ,EAAOrJ,OAAS,GACzBD,EAAOC,KAAQD,EAAOC,GAAS,IACpCD,EAAOC,GAAO3Z,KAAKgjB,EACrB,CACA,OAAOtJ,CACT,IACC,CAAC4I,EAASiB,IAEb,OACEhiB,EAAAA,EAAAA,MAACsiB,GAAAA,EAAM,CACLzqB,GAAI,GAAGA,WACP6pB,SAAUA,EACVlhB,SAAUmhB,EACVphB,OAAQoE,EACRlE,aAAc2gB,EACdpgB,OAtJYC,IAEZvG,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CAACC,QAASnF,EAAMiE,WAAYmB,QAASpF,EAAMiE,gBAAaY,EAAY,SAASzB,UACnFF,EAAAA,EAAAA,KAACwG,EAAAA,EAAU,CACTrJ,GAAIA,EACJsJ,IAAKF,EACLI,QAASA,IAAM+f,GAASzc,GACxBrD,WAAYqD,EACZ4d,UAAYC,IACV,OAAQA,EAAM1b,KACZ,IAAK,MACL,IAAK,QACL,IAAK,QACH,MACF,QACEsa,GAAQ,GACRlb,YAAW,KACL6b,EAAUjR,UACZiR,EAAUjR,QAAQ2R,QAClBV,EAAUjR,QAAQ1b,MAAQotB,EAAM1b,IAClC,GACC,GAEP,EAEF,UAASjP,EACT+F,KAAMA,EACNnC,aAAcjE,EAAMiE,WACpBinB,aAAW,EACXnmB,MAAO,CAAEga,WAAY,EAAG8C,cAAe,EAAG1E,UAAW,IAAK/Z,SAEzD4mB,EAAgBtjB,OAAS,GACxBxD,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SACe,UAAZmD,GACCrD,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CACHC,WAAY5B,EACZ3f,QAASA,IAAMb,GAAS,IAAM,KAC9BjE,MAAO,CAAEsmB,WAAY,EAAGC,cAAe,GAAIloB,SAE1C4mB,EAAgBtjB,UAGnB8B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACqoB,GAAAA,EAAS,CAACC,SAAU,GAAGpoB,SACrB4mB,EAAgB/f,KAAKggB,IACpB/mB,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAEHC,WAAYprB,EAAMyrB,kBAClBC,aAAcjC,EACd1kB,MAAO,CAAEsmB,WAAY,EAAGC,cAAe,GACvCzhB,QAASA,IACPb,GAAUqhB,GACRA,GAAgBhpB,QAAQ4L,GAAMA,IAAMgd,EAAOrsB,UAE9CwF,SAEA6mB,EAAOzpB,OAVHypB,EAAOzpB,YAchBgpB,IACAtmB,EAAAA,EAAAA,KAACyoB,GAAAA,GAAS,CACRC,KAAK,SACL,iBACA/hB,QAASA,IAAMb,GAAS,IAAM,KAC9BjE,MAAO,CAAEoZ,cAAe,SAAUnZ,WAAY,WAOxD9B,EAAAA,EAAAA,KAAA,QAAM6B,MAAO,CAAEsG,QAAS,IAAMjI,SAAEkmB,QA+EtCpgB,YAAa,CAAEC,SAAUA,IAAMC,SAASC,KAAMC,iBAAiB,EAAMC,YAAY,GACjFsiB,SAAU9B,EAAc3mB,SAAA,EAExBF,EAAAA,EAAAA,KAAC4oB,GAAAA,EAAU,CAAA1oB,UACTF,EAAAA,EAAAA,KAAC6oB,GAAAA,EAAe,CAAC,UAAQ,eAAc3oB,UACrCF,EAAAA,EAAAA,KAAC8oB,GAAAA,EAAW,CACV3rB,GAAI,GAAGA,WACPsJ,IAAK4gB,EACL3sB,MAAOisB,EACPrkB,SAAUA,CAACwK,EAAGpS,IAAkBksB,EAAelsB,GAC/CquB,QAAUjB,IACRA,EAAMkB,kBACNpC,EAAe,GAAG,EAEpBqC,aACE3B,EAAe9jB,SAAW6iB,EAAQ7iB,OAC9B,GAAG8jB,EAAe9jB,YAAY6iB,EAAQ7iB,cACtC7B,EAENkmB,UAAYC,IACV,OAAQA,EAAM1b,KACZ,IAAK,YACL,IAAK,MAAO,CACV0b,EAAMhS,iBACNgS,EAAMkB,kBACN,MAAME,EAAerC,GAAezQ,SAAS+S,cAC3C,oDAEFD,GAAiBA,EAA6BnB,QAC9C,KACF,EACF,SAKR/nB,EAAAA,EAAAA,KAACgI,EAAAA,EAAO,IACmB,IAA1Bsf,EAAe9jB,QACdxD,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SACGpD,EAAMssB,WACLppB,EAAAA,EAAAA,KAACqpB,GAAAA,EAAQ,CAACxnB,MAAO,CAAEsc,QAAS,IAAKje,UAC/BF,EAAAA,EAAAA,KAACspB,GAAAA,EAAO,CAAC/tB,KAAK,UAGhByE,EAAAA,EAAAA,KAACupB,GAAAA,EAAY,CAACxoB,YAAU,EAAAb,SACrBgH,EAAE,qBADwB,gBAMjClH,EAAAA,EAAAA,KAACwpB,GAAgB,CAAAtpB,SACdud,GACCzd,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SACG2J,OAAO4f,KAAKhM,GAAQ1W,KAAK2iB,IACxB1pB,EAAAA,EAAAA,KAAC2pB,GAAAA,EAAW,CAACrsB,MAAOosB,EAAUxpB,UAC5BF,EAAAA,EAAAA,KAAC4pB,GAAmB,CAClBvC,UAAWA,EACXhB,QAASiB,EACTR,gBAAiBA,KAJe4C,QAUxC1pB,EAAAA,EAAAA,KAAC4pB,GAAmB,CAClBvC,UAAWA,EACXhB,QAASiB,EACTR,gBAAiBA,MAKxBhqB,EAAM+sB,SAAU7pB,EAAAA,EAAAA,KAAC8pB,GAAAA,EAAU,CAAA5pB,SAAEpD,EAAM+sB,WAG1C,CAEA,SAASD,GAAoB9sB,GAK3B,OACEkD,EAAAA,EAAAA,KAAC+pB,GAAAA,EAAU,CACTlC,UAAYC,IAEH,QADCA,EAAM1b,MAEV0b,EAAMhS,iBACNgS,EAAMkB,kBACNlsB,EAAMuqB,UAAUjR,SAAS2R,QAE7B,EACA7nB,SAEDpD,EAAMupB,QAAQtf,KAAKggB,IAClB,MAAMiD,EAAW/sB,EAAM8pB,GACvB,OACE/mB,EAAAA,EAAAA,KAACupB,GAAAA,EAAY,CACXpsB,GAAI6sB,EACJ9mB,KAAM6jB,EAAO7jB,KAEbxI,WAAsBiH,IAAfolB,EAAO3a,IAAoB2a,EAAO3a,IAAM2a,EAAOzpB,MACtDse,YACEmL,EAAOnL,aACL5b,EAAAA,EAAAA,KAAA,OAAK6B,MAAO,CAAE4T,SAAU,KAAMvV,SAAE6mB,EAAOnL,mBACrCja,EAENsoB,aAAW,EACXC,WAAYptB,EAAMgqB,gBAAgBve,SAASwe,GAC3C,UAASiD,EAAS9pB,SAEjB6mB,EAAOzpB,YAXYqE,IAAfolB,EAAO3a,IAAoB2a,EAAO3a,IAAM2a,EAAOzpB,MAYvC,KAKzB,CAEA,MAAMksB,IAAmB9mB,EAAAA,EAAAA,IAAOmU,IAAWjU,WAAA,CAAAC,YAAA,qBAAlBH,CAAkB,sBChZpC,SAASynB,GAGdrtB,GACA,MAAM,IAAQqK,EAAAA,EAAAA,OAEPijB,EAASC,IAAc3uB,EAAAA,EAAAA,WAAS,IAChC4uB,EAAWC,IAAgB7uB,EAAAA,EAAAA,WAAS,IACpC8uB,EAAcC,IAAmB/uB,EAAAA,EAAAA,aACjCgvB,EAAOC,IAAYjvB,EAAAA,EAAAA,UAAS,IAC5B2qB,EAASuE,IAAclvB,EAAAA,EAAAA,aACvBuO,EAAMyc,IAAWhrB,EAAAA,EAAAA,WAAS,GAE3BmvB,GAAU7U,EAAAA,EAAAA,WACT2Q,EAAaC,IAAkBlrB,EAAAA,EAAAA,UAAiB,IAEjDovB,GAAYhvB,EAAAA,EAAAA,cAChBivB,EAAAA,GAAAA,KAAUC,GAAmBpE,EAAeoE,IAAS,KACrD,IAGIC,GAAejV,EAAAA,EAAAA,QAAOlZ,EAAMmuB,cAAc7U,QAE1C8U,GAAwBlV,EAAAA,EAAAA,QAA+B,MACvDmV,GAAervB,EAAAA,EAAAA,cAAY,KAC3BovB,EAAsB9U,SACxB8U,EAAsB9U,QAAQgV,QAEhC,MAAMC,EAAkB,IAAIC,gBAwD5B,OAvDAJ,EAAsB9U,QAAUiV,EAChChB,GAAW,KACTE,GAAa,GACbE,OAAgB9oB,GAChBipB,GAAYW,GACNA,QAGF,IAGCN,EAAa,CAChBO,KAAMX,EAAQzU,QACdqV,OAAQJ,EAAgBI,OACxBT,OAAQrE,IAEP+E,MAAM7nB,IACDwnB,EAAgBI,OAAOE,UAC3Bd,EAAQzU,QAAUvS,EAAO2nB,KACpB3nB,EAAO+nB,WACVrB,GAAa,GAEfK,GAAYW,IACV,GAAIF,EAAgBI,OAAOE,QAAS,OAAOJ,EAC3C,IAAIhE,EAAyC,IACvCgE,GAAe,MAChB1nB,EAAOwiB,SAEZ,MAAMwF,EAAe,IAAIC,IAczB,OAbAvE,EAAaA,EAAWppB,QAAQ4oB,IAC1B8E,EAAaE,IAAIhF,EAAOrsB,SAC5BmxB,EAAata,IAAIwV,EAAOrsB,QACjB,KAET6sB,EAAWnoB,MAAK,CAACiM,EAAGoc,KAClB,MAAMuE,EAAM3gB,EAAE/N,MAAMJ,cACd+uB,EAAMxE,EAAEnqB,MAAMJ,cACpB,OAAI8uB,EAAMC,GAAa,EACnBD,EAAMC,EAAY,EACf,CAAC,IAEVtB,EAAS9mB,EAAO+nB,UAAYrE,EAAW/jB,QAChC+jB,CAAU,IACjB,IAEHvY,OAAOF,IACFuc,EAAgBI,OAAOE,SAC3BlB,EAAgB3b,aAAewV,MAAQxV,EAAM,IAAIwV,MAAMpd,EAAE,kBAAkB,IAE5EglB,SAAQ,KACHb,EAAgBI,OAAOE,SAC3BtB,GAAW,EAAM,KAEd,KAEF,IAAMgB,EAAgBD,OAAO,GACnC,CAACH,EAActE,EAAazf,IAEzBilB,GAAarwB,EAAAA,EAAAA,cAChBwU,IACCA,EAAEwF,iBACFxF,EAAE0Y,kBACFmC,GAAc,GAEhB,CAACA,IAGGiB,GAAUtwB,EAAAA,EAAAA,cACbwU,IACCA,EAAEwF,iBACFxF,EAAE0Y,kBACF2B,EAAS,GACTC,EAAW,IACXC,EAAQzU,aAAUzU,EAClBwpB,GAAc,GAEhB,CAACA,KAGHpvB,EAAAA,EAAAA,YAAU,KACJkO,IACF0gB,EAAS,GACTC,EAAW,IACXC,EAAQzU,aAAUzU,EAClBwpB,IACF,GACC,CAAClhB,EAAMkhB,IAEV,MAAMtB,GACJvkB,EAAAA,EAAAA,MAAC0T,GAAAA,EAAK,CAACnQ,WAAS,EAAA3I,SAAA,EACdoF,EAAAA,EAAAA,MAAC6E,EAAAA,EAAI,CAAAjK,SAAA,EACHF,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAACoQ,KAAM,CAAEvQ,QAAS,QAASnK,UAClCoF,EAAAA,EAAAA,MAAC+mB,GAAAA,EAAU,CAAAnsB,SAAA,CACRpD,EAAMwvB,WACLtsB,EAAAA,EAAAA,KAACusB,GAAAA,EAAc,CAAArsB,UACbF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLpI,GAAG,SACHwJ,QAAU2J,IACRA,EAAEwF,iBACFxF,EAAE0Y,kBACFtC,GAAQ,GACR5pB,EAAMwvB,YAAY,EAClBpsB,SAEDgH,EAAE,eAIPojB,IACAtqB,EAAAA,EAAAA,KAACusB,GAAAA,EAAc,CAAArsB,UACbF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLpI,GAAG,YACHisB,UAAWgB,EACXzjB,QAASwlB,EACTprB,WAAYqpB,EAAQlqB,SAETgH,EAAVkjB,EAAY,aAAkB,uBAMvCE,GAAuB,IAAVI,IACb1qB,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAAtK,SACNgH,EAAE,gCAAiC,CAClCoV,MAAO+J,GAAS7iB,QAAU,EAC1BknB,MAAOA,SAKd5tB,EAAM+sB,UAIX,OAAIW,GAEAxqB,EAAAA,EAAAA,KAACwsB,GAAe,CACdrvB,GAAIL,EAAMK,GACVkG,QAAQ,YACRiE,UAAQ,EACRpE,MAAMlD,EAAAA,EAAAA,KAACysB,GAAAA,GAAW,IAClBC,aAAa,QACb/lB,QAASylB,EAAQlsB,SAEgB,mBAAzBpD,EAAM6vB,eACV7vB,EAAM6vB,eAAenC,GACrB1tB,EAAM6vB,gBAAkBzlB,EAAE,4BAMlClH,EAAAA,EAAAA,KAACmmB,GAAe,CACdhpB,GAAIL,EAAMK,GACV+F,KAAMpG,EAAMoG,KACZkjB,YAAatpB,EAAMspB,YACnBC,QAASA,GAAW,GACpBvc,OAAQhN,EAAMgN,OACdhE,SAAUhJ,EAAMgJ,SAChBzC,QAASvG,EAAMuG,QACfwmB,OAAQA,EACR5f,KAAMA,EACNyc,QAASA,EACTC,YAAaA,EACbC,eAAgBkE,EAChB1B,UAAWgB,EACX9D,sBAAuBxpB,EAAMwpB,sBAC7BiC,kBAAmBzrB,EAAMyrB,kBACzB/B,WAAY1pB,EAAM0pB,WAClBC,oBAAqB3pB,EAAM2pB,qBAGjC,CAEA,MAAM+F,IAAkB9pB,EAAAA,EAAAA,IAAO6C,EAAAA,IAAO3C,WAAA,CAAAC,YAAA,oBAAdH,CAAc,iC,2BC5G/B,SAASkqB,GAGd9vB,GACA,MAAM,IAAQqK,EAAAA,EAAAA,OACR,GAAEhK,EAAE,KAAE+F,EAAI,MAAExI,EAAK,SAAEoL,EAAQ,QAAEugB,EAAO,YAAED,EAAW,WAAEI,GAAe1pB,GAEjEmN,EAAMyc,GAAWZ,GAAoBhpB,EAAMmN,OAAQ,EAAOnN,EAAM4pB,UACvE3qB,EAAAA,EAAAA,YAAU,KACJkO,GACFuB,YAAW,IAAM6b,EAAUjR,SAAS2R,SAAS,EAC/C,GACC,CAAC9d,IAEJ,MAAO0c,EAAaC,GAAkBd,GACpChpB,EAAM6pB,aAAe,GACrB7pB,EAAM8pB,gBAGFC,GAAgB7Q,EAAAA,EAAAA,QAAuB,MAEvC6W,GAAiBxoB,EAAAA,EAAAA,UACrB,IAAMgiB,EAAQ7hB,MAAMuiB,GAAWrsB,IAAUqsB,EAAOrsB,SAChD,CAAC2rB,EAAS3rB,IAGNoyB,GAAgBzoB,EAAAA,EAAAA,UAAQ,KAC5B,IAAIyoB,EAA2BD,GAAgBvvB,MAI/C,OAHKwvB,QAA2BnrB,IAAVjH,GAAiC,KAAVA,GAA0B,OAAVA,IAC3DoyB,EAAgBtG,IAAa9rB,IAExBoyB,CAAa,GACnB,CAACtG,EAAYqG,GAAgBvvB,MAAO5C,IAgEjCusB,GAAkBnrB,EAAAA,EAAAA,cACtB,CAACgR,EAAYoa,KACX,MAAME,EAA0Df,EAAQ7hB,MAAMuiB,QACzDplB,IAAfolB,EAAO3a,IAA0B2a,EAAO3a,MAAQ8a,EACxCH,EAAOzpB,QAAU4pB,IAE3BE,IACFthB,EAASshB,EAAkB1sB,OAC3BgsB,GAAQ,GACV,GAEF,CAAC5gB,EAAUugB,EAASK,IAGhBW,GAAYrR,EAAAA,EAAAA,QAAyB,OAC3Cja,EAAAA,EAAAA,YAAU,KACHkO,GACH2c,EAAe,GACjB,GACC,CAAC3c,EAAM2c,KAEV7qB,EAAAA,EAAAA,YAAU,KACHe,EAAMiwB,oBAAqBjwB,EAAMkwB,YAAeH,GAAqC,IAAnBxG,EAAQ7iB,QAC7EsC,EAASugB,EAAQ,GAAG3rB,MACtB,GACC,CAACoL,EAAUugB,EAASvpB,EAAMiwB,kBAAmBjwB,EAAMkwB,WAAYH,IAElE,MAAMvF,GAAiBjjB,EAAAA,EAAAA,UAAQ,KAC7B,IAAIijB,EAAiBjB,EAgBrB,OAfKvpB,EAAM8pB,iBACTU,EAAiBA,EAAenpB,QAAQ4oB,GAClB,KAAhBJ,GACQI,EAAOzpB,MAAMJ,cAAcqL,SAASoe,EAAYzpB,kBAG3DJ,EAAM0qB,qBACTF,EAAiBA,EAAeloB,MAAK,CAACiM,EAAGoc,KACvC,MAAMuE,EAAM3gB,EAAE/N,MAAMJ,cACd+uB,EAAMxE,EAAEnqB,MAAMJ,cACpB,OAAI8uB,EAAMC,GAAa,EACnBD,EAAMC,EAAY,EACf,CAAC,KAGL3E,CAAc,GACpB,CAACjB,EAASvpB,EAAM0qB,mBAAoB1qB,EAAM8pB,eAAgBD,IAEvDlJ,GAASpZ,EAAAA,EAAAA,UAAQ,KAErB,GADkBgiB,EAAQsB,MAAMZ,KAAaA,EAAOrJ,QACrC,CACb,MAAMD,EAAqD,CAAC,EAC5D,IAAK,MAAMsJ,KAAUO,EAAgB,CACnC,MAAM5J,EAAQqJ,EAAOrJ,OAAS,GACzBD,EAAOC,KAAQD,EAAOC,GAAS,IACpCD,EAAOC,GAAO3Z,KAAKgjB,EACrB,CACA,OAAOtJ,CACT,IACC,CAAC4I,EAASiB,IAEb,OACEtnB,EAAAA,EAAAA,KAACitB,GAAwBhtB,SAAQ,CAACvF,MAAO,CAAEuP,OAAMyc,WAAUxmB,UACzDoF,EAAAA,EAAAA,MAACsiB,GAAAA,EAAM,CACLzqB,GAAI,GAAGA,WACP6pB,SAAU6F,EACV/mB,SAAUmhB,EACVphB,OAAQoE,EACRlE,aAAc2gB,EACdpgB,OAAQxJ,EAAMwJ,QAlIJC,KACdvG,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CAACC,QAASnF,EAAMiE,WAAYmB,QAASpF,EAAMiE,gBAAaY,EAAY,SAASzB,UACnFoF,EAAAA,EAAAA,MAAC6E,EAAAA,EAAI,CAACC,SAAU,CAAEC,QAAS,UAAWnK,SAAA,EACpCF,EAAAA,EAAAA,KAACwG,EAAAA,EAAU,CACTrJ,GAAIA,EACJ,UAASA,EACTsJ,IAAKF,EACLrD,KAAMA,GAAQ2pB,GAAgB3pB,KAC9ByD,QAASA,IAAM+f,GAASzc,GACxBrD,WAAYqD,EACZlJ,aAAcjE,EAAMiE,WACpBc,MAAO,CAELqrB,cAAepwB,EAAMiE,WAAa,aAAUY,EAC5CwrB,OAAQrwB,EAAMiE,WAAa,mBAAgBY,GAE7CkmB,UAAYC,IACV,OAAQA,EAAM1b,KACZ,IAAK,MACL,IAAK,QACH,MACF,QACE0b,EAAMhS,iBACmB,IAArBgS,EAAM1b,IAAI5I,QACZojB,EAAekB,EAAM1b,KAEvBsa,GAAQ,GACRlb,YAAW,KACL6b,EAAUjR,SACa,IAArB0R,EAAM1b,IAAI5I,SACZ6jB,EAAUjR,QAAQ1b,MAAQotB,EAAM1b,IAAMib,EAAUjR,QAAQ1b,MAE5D,GACC,GAEP,EAEFstB,aAAW,EAAA9nB,SAEV4sB,IAAgC9sB,EAAAA,EAAAA,KAAA,QAAM6B,MAAO,CAAEsG,QAAS,IAAMjI,SAAEkmB,OAEjEtpB,EAAMkwB,YAAcF,IACpB9sB,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLlC,QAAQ,UACR,UAAQ,QACRsD,QAASA,KACP+f,GAAQ,GACR5gB,EAAS,MACS,OAAdS,GAAsB,YAAaA,GACrCA,EAAU6P,SAAS2R,OACrB,EACA7nB,UAEFF,EAAAA,EAAAA,KAACoF,EAAAA,EAAI,CAAC7J,KAAK,KAAKsG,MAAO,CAAEsG,QAAS,IAAMjI,UACtCF,EAAAA,EAAAA,KAACyoB,GAAAA,GAAS,CAAC,iBAAY5mB,MAAO,CAAEsc,QAAS,EAAGU,OAAQ,eA6E1D7Y,YAAa,CAAEC,SAAUA,IAAMC,SAASC,KAAMC,iBAAiB,EAAMC,YAAY,GACjF+mB,2BAAyB,EACzBzE,SAAU9B,EAAc3mB,SAAA,EAExBF,EAAAA,EAAAA,KAAC4oB,GAAAA,EAAU,CAAA1oB,UACTF,EAAAA,EAAAA,KAAC6oB,GAAAA,EAAe,CAAC,UAAQ,eAAc3oB,UACrCF,EAAAA,EAAAA,KAAC8oB,GAAAA,EAAW,CACV3rB,GAAI,GAAGA,WACPsJ,IAAK4gB,EACL3sB,MAAOisB,EACPrkB,SAAUA,CAACwK,EAAGpS,IAAkBksB,EAAelsB,GAC/CquB,QAAUjB,IACRA,EAAMkB,kBACNpC,EAAe,GAAG,EAEpBqC,aACE3B,EAAe9jB,SAAW6iB,EAAQ7iB,OAC9B,GAAG8jB,EAAe9jB,YAAY6iB,EAAQ7iB,cACtC7B,EAENkmB,UAAYC,IACV,OAAQA,EAAM1b,KACZ,IAAK,YACL,IAAK,MAAO,CACV0b,EAAMhS,iBACNgS,EAAMkB,kBACN,MAAME,EAAerC,GAAezQ,SAAS+S,cAC3C,oDAEFD,GAAiBA,EAA6BnB,QAC9C,KACF,EACF,SAKR/nB,EAAAA,EAAAA,KAACgI,EAAAA,EAAO,IACmB,IAA1Bsf,EAAe9jB,QACdxD,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SACGpD,EAAMssB,WACLppB,EAAAA,EAAAA,KAACqpB,GAAAA,EAAQ,CAACxnB,MAAO,CAAEsc,QAAS,IAAKje,UAC/BF,EAAAA,EAAAA,KAACspB,GAAAA,EAAO,CAAC/tB,KAAK,UAGhByE,EAAAA,EAAAA,KAACupB,GAAAA,EAAY,CAACxoB,YAAU,EAAAb,SACrBgH,EAAE,qBADwB,gBAMjClH,EAAAA,EAAAA,KAACwpB,GAAgB,CAAAtpB,SACdud,GACCzd,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SACG2J,OAAO4f,KAAKhM,GAAQ1W,KAAK2iB,IACxB1pB,EAAAA,EAAAA,KAAC2pB,GAAAA,EAAW,CAACrsB,MAAOosB,EAAUxpB,UAC5BF,EAAAA,EAAAA,KAACqtB,GAAoB,CAAChG,UAAWA,EAAWhB,QAAS5I,EAAOiM,MAD1BA,QAMxC1pB,EAAAA,EAAAA,KAACqtB,GAAoB,CAAChG,UAAWA,EAAWhB,QAASiB,MAI1DxqB,EAAM+sB,SAAU7pB,EAAAA,EAAAA,KAAC8pB,GAAAA,EAAU,CAAA5pB,SAAEpD,EAAM+sB,aAI5C,CAEO,SAASwD,GAAqBvwB,GAInC,OACEkD,EAAAA,EAAAA,KAAC+pB,GAAAA,EAAU,CACTlC,UAAYC,IAEH,QADCA,EAAM1b,MAEV0b,EAAMhS,iBACNgS,EAAMkB,kBACNlsB,EAAMuqB,UAAUjR,SAAS2R,QAE7B,EACA7nB,SAEDpD,EAAMupB,QAAQtf,KAAKggB,IAClB,MAAMiD,EAAW/sB,EAAM8pB,GACvB,OACE/mB,EAAAA,EAAAA,KAACupB,GAAAA,EAAY,CACXpsB,GAAI6sB,EACJ9mB,KAAM6jB,EAAO7jB,KAEbxI,WAAsBiH,IAAfolB,EAAO3a,IAAoB2a,EAAO3a,IAAM2a,EAAOzpB,MACtDse,YAAamL,EAAOnL,YACpB,UAASoO,EAAS9pB,SAEjB6mB,EAAOzpB,YALYqE,IAAfolB,EAAO3a,IAAoB2a,EAAO3a,IAAM2a,EAAOzpB,MAMvC,KAKzB,CAEA,MAAMksB,IAAmB9mB,EAAAA,EAAAA,IAAOmU,IAAWjU,WAAA,CAAAC,YAAA,mBAAlBH,CAAkB,sBAI9BuqB,IAA0BrtB,EAAAA,EAAAA,eAGpC,CACDqK,MAAM,EACNyc,QAASA,SC/XJ,SAAS4G,GAGdxwB,GACA,MAAM,IAAQqK,EAAAA,EAAAA,OAER,aAAE8jB,EAAY,cAAEsC,GAAkBzwB,GACjCstB,EAASC,IAAc3uB,EAAAA,EAAAA,WAAS,IAChC4uB,EAAWC,IAAgB7uB,EAAAA,EAAAA,WAAS,IACpC8uB,EAAcC,IAAmB/uB,EAAAA,EAAAA,aACjCgvB,EAAOC,IAAYjvB,EAAAA,EAAAA,UAAS,IAC5B2qB,EAASuE,IAAclvB,EAAAA,EAAAA,aACvBuO,EAAMyc,IAAWhrB,EAAAA,EAAAA,WAAS,GAE3BmvB,GAAU7U,EAAAA,EAAAA,WACT2Q,EAAaC,IAAkBlrB,EAAAA,EAAAA,UAAiB,IAGjDovB,GAAYhvB,EAAAA,EAAAA,aAChBivB,MAAUC,GAAmBpE,EAAeoE,IAAS,KACrD,IAGIllB,GAAWkQ,EAAAA,EAAAA,QAAOlZ,EAAMgJ,UAAUsQ,QAElC8U,GAAwBlV,EAAAA,EAAAA,QAA+B,MACvDmV,GAAervB,EAAAA,EAAAA,cAAY,KAC3BovB,EAAsB9U,SACxB8U,EAAsB9U,QAAQgV,QAEhC,MAAMC,EAAkB,IAAIC,gBA6D5B,OA5DAJ,EAAsB9U,QAAUiV,EAChChB,GAAW,KACTE,GAAa,GACbE,OAAgB9oB,GAChBipB,GAAYW,GACNA,QAGF,IAGCN,EAAa,CAChBO,KAAMX,EAAQzU,QACdqV,OAAQJ,EAAgBI,OACxBT,OAAQrE,IAEP+E,MAAM7nB,IACDwnB,EAAgBI,OAAOE,UAC3Bd,EAAQzU,QAAUvS,EAAO2nB,KACpB3nB,EAAO+nB,WACVrB,GAAa,GAEfK,GAAYW,IACV,IAAIhE,EAAyC,IACvCgE,GAAe,MAChB1nB,EAAOwiB,SAEZ,MAAMwF,EAAe,IAAIC,IAoBzB,OAnBAvE,EAAaA,EAAWppB,QAAQ4oB,IAC1B8E,EAAaE,IAAIhF,EAAOrsB,SAC5BmxB,EAAata,IAAIwV,EAAOrsB,QACjB,KAET6sB,EAAWnoB,MAAK,CAACiM,EAAGoc,KAClB,MAAMuE,EAAM3gB,EAAE/N,MAAMJ,cACd+uB,EAAMxE,EAAEnqB,MAAMJ,cACpB,OAAI8uB,EAAMC,GAAa,EACnBD,EAAMC,EAAY,EACf,CAAC,IAELtF,GAAoC,IAArB9iB,EAAO+nB,WAAyC,IAAtBrE,EAAW/jB,QACvDsC,EAASyhB,EAAW,GAAG7sB,OAEzBiwB,EAAS9mB,EAAO+nB,UAAYrE,EAAW/jB,QACnC+pB,GAAiB1pB,EAAO+nB,UAAYrE,EAAW/jB,SAAW,GAC5D+jB,EAAWxjB,KAAKwpB,EAAc5G,IAEzBY,CAAU,IACjB,IAEHvY,OAAOF,IACFuc,EAAgBI,OAAOE,SAC3BlB,EAAgB3b,aAAewV,MAAQxV,EAAM,IAAIwV,MAAMpd,EAAE,kBAAkB,IAE5EglB,SAAQ,KACHb,EAAgBI,OAAOE,SAC3BtB,GAAW,EAAM,KAEd,KAEF,IAAMgB,EAAgBD,OAAO,GACnC,CAACtlB,EAAUmlB,EAActE,EAAazf,EAAGqmB,IAEtCpB,GAAarwB,EAAAA,EAAAA,cAChBwU,IACCA,EAAEwF,iBACFxF,EAAE0Y,kBACFmC,GAAc,GAEhB,CAACA,IAGGiB,GAAUtwB,EAAAA,EAAAA,cACbwU,IACCA,EAAEwF,iBACFxF,EAAE0Y,kBACF2B,EAAS,GACTC,EAAW,IACXlE,GAAQ,GACRmE,EAAQzU,aAAUzU,EAClBwpB,GAAc,GAEhB,CAACA,KAGHpvB,EAAAA,EAAAA,YAAU,KACJkO,IACF0gB,EAAS,GACTC,EAAW,IACXC,EAAQzU,aAAUzU,EAClBwpB,IACF,GACC,CAAClhB,EAAMkhB,KAEVpvB,EAAAA,EAAAA,YAAU,KACJyuB,GACF9D,GAAQ,EACV,GACC,CAAC8D,IAEJ,MAAMX,GACJvkB,EAAAA,EAAAA,MAAC0T,GAAAA,EAAK,CAACnQ,WAAS,EAAA3I,SAAA,EACdoF,EAAAA,EAAAA,MAAC6E,EAAAA,EAAI,CAAAjK,SAAA,EACHF,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAACoQ,KAAM,CAAEvQ,QAAS,QAASnK,UAClCoF,EAAAA,EAAAA,MAAC+mB,GAAAA,EAAU,CAAAnsB,SAAA,EACPoqB,IACAtqB,EAAAA,EAAAA,KAACusB,GAAAA,EAAc,CAAArsB,UACbF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLpI,GAAG,YACHisB,UAAWgB,EACXzjB,QAASwlB,EACTprB,WAAYqpB,EAAQlqB,SAETgH,EAAVkjB,EAAY,aAAkB,iBAIpCttB,EAAMwvB,WACLtsB,EAAAA,EAAAA,KAACusB,GAAAA,EAAc,CAAArsB,UACbF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLpI,GAAG,SACHwJ,QAAU2J,IACRA,EAAEwF,iBACFxF,EAAE0Y,kBACFtC,GAAQ,GACR5pB,EAAMwvB,YAAY,EAEpBjpB,QAAQ,YAAWnD,SAElBgH,EAAE,oBAMXojB,GAAuB,IAAVI,IACb1qB,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAAtK,SACNgH,EAAE,gCAAiC,CAClCoV,MAAO+J,GAAS7iB,QAAU,EAC1BknB,MAAOA,SAKd5tB,EAAM+sB,UAIX,OACE7pB,EAAAA,EAAAA,KAAC4sB,GAAgB,CACfzvB,GAAIL,EAAMK,GACV+F,KAAMpG,EAAMoG,KACZkjB,YAAatpB,EAAMspB,YACnBC,QAASA,GAAW,GACpB3rB,MAAOoC,EAAMpC,MACboL,SAAUhJ,EAAMgJ,SAChB/E,WAAYjE,EAAMiE,WAClB8oB,OAAQA,EACR5f,KAAMA,EACNyc,QAASA,EACTC,YAAaA,EACbC,eAAgBkE,EAChB1B,UAAWgB,EACX5D,WAAY1pB,EAAM0pB,WAClBuG,mBAAiB,EACjBC,WAAYlwB,EAAMkwB,WAClB1mB,OACEkkB,EACKjkB,IACCvG,EAAAA,EAAAA,KAACwsB,GAAe,CACd/lB,IAAKF,EACLpJ,GAAIL,EAAMK,GACVkG,QAAQ,YACRiE,UAAQ,EACRpE,MAAMlD,EAAAA,EAAAA,KAACysB,GAAAA,GAAW,IAClB9lB,QAASylB,EAAQlsB,SAEgB,mBAAzBpD,EAAM6vB,eACV7vB,EAAM6vB,eAAenC,GACrB1tB,EAAM6vB,gBAAkBzlB,EAAE,gCAGlCvF,GAIZ,CAEA,MAAM6qB,IAAkB9pB,EAAAA,EAAAA,IAAO6C,EAAAA,IAAO3C,WAAA,CAAAC,YAAA,qBAAdH,CAAc,iC,wCCjP/B,IAAK8qB,GAAsB,SAAtBA,GAAsB,OAAtBA,EAAsB,oBAAtBA,EAAsB,0BAAtBA,EAAsB,qBAAtBA,EAAsB,uBAAtBA,CAAsB,MAkB3B,SAASC,GAAuB3wB,GACrC,MAAM,aAAE4wB,EAAY,gBAAEC,EAAe,YAAEvH,EAAW,WAAE4G,EAAU,aAAEY,GAAiB9wB,EAE3E+wB,EAAgBH,GAAgBA,EAAalqB,OAAS,EAAIkqB,EAAa,QAAK/rB,EAC5EkrB,EAAiB/vB,EAAMupB,QAAQ7hB,MAAMuiB,GAAWA,EAAOrsB,QAAUmzB,IAEnEb,IAAeH,GACjBc,GAAgB,IAAM,CAACC,GAAgB9wB,EAAMupB,QAAQ,GAAG3rB,SAW1D,MAAOozB,EAAMC,IAAWryB,EAAAA,EAAAA,WAA6B,KACnD,GAAIgyB,GAAgBA,EAAalqB,OAAS,EAAG,OAAOkqB,EAAa,EACjD,KAGX5lB,EAAIkmB,IAAStyB,EAAAA,EAAAA,WAA6B,KAC/C,GAAIgyB,GAAgBA,EAAalqB,OAAS,EAAG,OAAOkqB,EAAa,EACjD,IAgBlB,OAbA3xB,EAAAA,EAAAA,YAAU,KACR,GAAI8wB,GAAkBA,EAAeoB,SAAU,CAC7C,MAAMC,EAAY,CAACrB,EAAenyB,OAC9BozB,IACFI,EAAUnqB,KAAK+pB,GACXhmB,GACFomB,EAAUnqB,KAAK+D,IAGnB6lB,GAAgB,IAAMO,GACxB,IACC,CAACrB,EAAgBiB,EAAMhmB,EAAI6lB,KAG5BroB,EAAAA,EAAAA,MAAC6oB,GAAAA,EAAW,CAAAjuB,SAAA,EACVF,EAAAA,EAAAA,KAAC4sB,GAAgB,CACflyB,MAAOmyB,GAAgBnyB,OAAS,GAChCoL,SAnCN,SAAwBpL,GACR,OAAVA,GACWoC,EAAMupB,QAAQ7hB,MAAMuiB,GAAWA,EAAOrsB,QAAUA,KAE7DizB,GAAgB,IAAM,CAACjzB,IAE3B,EA8BM2rB,QAASvpB,EAAMupB,QACfD,YAAaA,EACboB,oBAAkB,IAEnBqF,GAAkBA,EAAeoB,WAChCjuB,EAAAA,EAAAA,KAACouB,GAAS,CAACtmB,GAAIA,EAAIkmB,MAAOA,EAAOF,KAAMA,EAAMC,QAASA,MAI9D,CAEO,SAASK,GAAUtxB,GAMxB,MAAM,GAAEgL,EAAE,MAAEkmB,EAAK,KAAEF,EAAI,QAAEC,GAAYjxB,GAC/B,EAAEoK,IAAMC,EAAAA,EAAAA,MAURknB,EAAWP,EAAO,IAAIlc,KAAKkc,QAAQnsB,EASzC,OACE2D,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACsuB,GAAAA,EAAU,CACT5zB,MAAOozB,EACPxrB,SArBeisB,CAAC/I,EAAiBsI,KACrCC,EAAQD,EAAK,EAqBT,aAAW,aACX1H,YAAY,aACZ,UAAQ,yBAEVpmB,EAAAA,EAAAA,KAAA,OAAK6B,MAAO,CAAE0T,UAAW,WAAY4I,QAAS,GAAIje,SAAEgH,EAAE,SACtDlH,EAAAA,EAAAA,KAACsuB,GAAAA,EAAU,CACT5zB,MAAOoN,EACPxF,SAzBaksB,CAAChJ,EAAiB1d,KACnCkmB,EAAMlmB,EAAG,EAyBL/G,YAAastB,KAAaI,EAAAA,GAAAA,GAAYJ,GACtCK,WAAYL,EACZM,WAAY,CAtBG5c,GACnBsc,GACII,EAAAA,GAAAA,GAAYJ,IAAatc,GAAQsc,EAC/B,GACAnnB,EAAE,+CACJ,IAkBA,aAAW,WACXkf,YAAalf,EAAE,OACf0nB,kBAAmB1nB,EAAE,8BAEfvF,IAAPmG,IACC9H,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLlC,QAAQ,UACRxB,MAAO,CAAE0T,UAAW,cACpB5O,QAASA,IAAMqnB,OAAMrsB,GAAWzB,UAEhCF,EAAAA,EAAAA,KAAC6uB,GAAAA,GAAe,QAK1B,C,4EC3HO,SAASC,GAAuBhyB,GAQrC,MAAM,IAAQqK,EAAAA,EAAAA,OACPzM,EAAOqrB,IAAYrqB,EAAAA,EAAAA,UAAS,IACnC,IAAI0qB,EAActpB,EAAMspB,YACxB,IAAKA,EACH,OAAQtpB,EAAMiyB,YACZ,IAAK,WACH3I,EAAclf,EAAE,YAChB,MACF,IAAK,aACHkf,EAAclf,EAAE,eAChB,MACF,IAAK,WACHkf,EAAclf,EAAE,aAChB,MACF,IAAK,SACHkf,EAAclf,EAAE,UAKtB,OACE5B,EAAAA,EAAAA,MAAC0pB,GAAAA,EAAU,CAAA9uB,SAAA,EACTF,EAAAA,EAAAA,KAACivB,GAAAA,EAAc,CAAA/uB,UACboF,EAAAA,EAAAA,MAAC4pB,GAAAA,EAAc,CAAC,UAAS,aAAcrtB,MAAO,CAAE8N,SAAU,KAAMzP,SAAA,EAC9DF,EAAAA,EAAAA,KAACmvB,GAAAA,EAAkB,CACjBhyB,GAAIL,EAAMK,GACVzC,MAAOA,EACP4H,SAAUA,CAACgO,EAAGvG,KACegc,EAAV,iBAANzV,EAAyBA,EACtBvG,EAAE,EAElBqlB,QAAUtH,IACJptB,GAAuB,UAAdotB,EAAM1b,MACjBtP,EAAMuyB,UAAU30B,GAChBqrB,EAAS,IACX,EAEFK,YAAaA,IAEJ,KAAV1rB,IACCsF,EAAAA,EAAAA,KAACsvB,GAAAA,EAAuB,CAAApvB,UACtBF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLlC,QAAQ,QACR,aAAW,eACXsD,QAASA,IAAMof,EAAS,IACxBlkB,MAAO,CAAEsG,QAASzN,OAAQiH,EAAY,GACtC4tB,UAAW,EAAErvB,UAEbF,EAAAA,EAAAA,KAACyoB,GAAAA,GAAS,cAOpBzoB,EAAAA,EAAAA,KAACivB,GAAAA,EAAc,CAAA/uB,UACbF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLlC,QAAS3I,EAAQ,UAAY,UAC7B,UAAQ,eACR,aAAW,eACXiM,QAASA,KACP7J,EAAMuyB,UAAU30B,GAChBqrB,EAAS,GAAG,EAEdwJ,UAAW,EACXxuB,YAAarG,EAAMwF,UAEnBF,EAAAA,EAAAA,KAACwvB,GAAAA,GAAc,UAKzB,CAEO,SAASC,GAAwB3yB,GAUtC,MAAM,IAAQqK,EAAAA,EAAAA,OACPzM,EAAOqrB,IAAYrqB,EAAAA,EAAAA,UAASoB,EAAMpC,OAAS,IAClD,IAAI0rB,EAActpB,EAAMspB,aAAe,GACvC,IAAKA,EACH,OAAQtpB,EAAMiyB,YACZ,IAAK,WACH3I,EAAclf,EAAE,YAChB,MACF,IAAK,aACHkf,EAAclf,EAAE,eAChB,MACF,IAAK,WACHkf,EAAclf,EAAE,aAChB,MACF,IAAK,SACHkf,EAAclf,EAAE,UAMtB,MAAMwoB,GAAoB5zB,EAAAA,EAAAA,aACxBivB,MAAUrwB,GAAkBoC,EAAMipB,SAASrrB,IAAQ,KACnD,IASF,OANAqB,EAAAA,EAAAA,YAAU,KACHe,EAAM6yB,QACT5J,EAAS,GACX,GACC,CAACjpB,EAAM6yB,UAGR3vB,EAAAA,EAAAA,KAACgvB,GAAAA,EAAU,CAAA9uB,UACTF,EAAAA,EAAAA,KAACivB,GAAAA,EAAc,CAAA/uB,UACboF,EAAAA,EAAAA,MAAC4pB,GAAAA,EAAc,CAAC,UAAS,aAAcrtB,MAAO,CAAE8N,SAAU,KAAMzP,SAAA,EAC9DF,EAAAA,EAAAA,KAACmvB,GAAAA,EAAkB,CACjBhyB,GAAIL,EAAMK,GACVzC,MAAOA,EACP4H,SAAUA,CAACgO,EAAGvG,KACK,iBAANuG,GACTyV,EAASzV,GACTof,EAAkBpf,KAElByV,EAAShc,GACT2lB,EAAkB3lB,GACpB,EAEFqc,YAAaA,IAEJ,KAAV1rB,IACCsF,EAAAA,EAAAA,KAACsvB,GAAAA,EAAuB,CAAApvB,UACtBF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLlC,QAAQ,QACR,aAAW,eACXsD,QAASA,KACPof,EAAS,IACTjpB,EAAMipB,SAAS,GAAG,EAEpBlkB,MAAO,CAAEsG,QAASzN,OAAQiH,EAAY,GACtC4tB,UAAW,EAAErvB,UAEbF,EAAAA,EAAAA,KAACyoB,GAAAA,GAAS,cAQ1B,C,gBC9LO,SAASmH,GAAuB9yB,GACrC,MAAO8J,EAAYipB,IAAiBn0B,EAAAA,EAAAA,WAAS,IAIvC,YAAEo0B,EAAW,eAAEC,IAAmB3vB,EAAAA,EAAAA,YAAW4vB,IAcnD,OAZAj0B,EAAAA,EAAAA,YAAU,KACJ6K,GACFmpB,EAAejzB,EAAMK,GACvB,GACC,CAACyJ,EAAYmpB,EAAgBjzB,EAAMK,MAEtCpB,EAAAA,EAAAA,YAAU,KACJ+zB,IAAgBhzB,EAAMK,IACxB0yB,GAAc,EAChB,GACC,CAACC,EAAahzB,EAAMK,MAEhB6C,EAAAA,EAAAA,KAACiwB,GAAAA,EAAkB,IAAKnzB,EAAO8J,WAAYA,EAAYrE,SAjB5CijB,IAChBqK,GAAejpB,EAAW,GAiB9B,CASO,MAAMopB,IAAgCpwB,EAAAA,EAAAA,eAAkD,CAC7FkwB,YAAa,GACbC,eAAgBA,SCTX,IAAKG,GAAiB,SAAjBA,GAAiB,OAAjBA,EAAAA,EAAiB,2BAAjBA,EAAAA,EAAiB,yBAAjBA,EAAAA,EAAiB,+BAAjBA,EAAAA,EAAiB,6BAAjBA,EAAAA,EAAiB,yBAAjBA,EAAAA,EAAiB,yCAAjBA,EAAAA,EAAiB,uCAAjBA,CAAiB,MAuC7B,SAASC,GAAmBrzB,GAC1B,MAAM,eAAEszB,EAAc,YAAEC,EAAW,eAAEC,GAAmBxzB,GAEjDyzB,EAAmBC,IAAuB90B,EAAAA,EAAAA,WAAwB,IACvE00B,GAAkBA,GAAgB5sB,OAAS,EAAI4sB,EAAe,GAAGhkB,IAAY,KAGzEqkB,EAAiBL,GAAgB5rB,MAAMrG,GAAWA,EAAOiO,MAAQmkB,IAEvE,IAAKE,EAAgB,OAAOzwB,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,IAC5B,IAAK0rB,EAAgB,OAAOpwB,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,IAC5B,GAA8B,IAA1B0rB,EAAe5sB,OAAc,OAAOxD,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,IAExC,IAAIgsB,EAAsC,IAA1BN,EAAe5sB,OAa/B,OAZI4sB,EAAe5sB,QAAU,IAEzB4sB,EAAe,GAAG3sB,OAASysB,GAAkBS,eAC7CP,EAAe,GAAG3lB,eACsB9I,IAAvC0uB,EAAYD,EAAe,GAAGhkB,MACkB,IAA/CikB,EAAYD,EAAe,GAAGhkB,MAAM5I,SAGtCktB,GAAY,KAKd1wB,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SAC6B,IAA1BkwB,EAAe5sB,QACd8B,EAAAA,EAAAA,MAAC6oB,GAAAA,EAAW,CAAAjuB,SAAA,CACTwwB,IACC1wB,EAAAA,EAAAA,KAAA,OAAK6B,MAAO,CAAEsmB,UAAW,EAAGpmB,YAAa,EAAG2T,WAAY,UAAWxV,SAChEkwB,EAAe,GAAG9yB,SAGvB0C,EAAAA,EAAAA,KAAC4wB,GAAsB,CACrBzzB,GAAG,eACHgB,OAAQsyB,EACRJ,YAAaA,EACbC,eAAgBA,EAChB,UAASG,EACTI,6BAA8B/zB,EAAM+zB,mCAIxCvrB,EAAAA,EAAAA,MAAC6oB,GAAAA,EAAW,CAAAjuB,SAAA,EACVF,EAAAA,EAAAA,KAAC4sB,GAAgB,CACfzvB,GAAG,SACHzC,MAAO61B,EACPzqB,SAAU0qB,EACVttB,MAAMlD,EAAAA,EAAAA,KAAC8wB,GAAAA,GAAU,IACjBzK,QAAS+J,EAAerpB,KAAK5I,IAAM,CACjCb,MAAOa,EAAOb,MACd5C,MAAOyD,EAAOiO,QAEhBga,YAAY,GACZ,UAASqK,EACTjJ,oBAAkB,EAClBwF,YAAU,KAEZhtB,EAAAA,EAAAA,KAAC4wB,GAAsB,CACrBzzB,GAAG,eACHgB,OAAQsyB,EACRJ,YAAaA,EACbC,eAAgBA,EAChB,UAASG,EACTI,6BAA8B/zB,EAAM+zB,mCAMhD,CAGO,SAASE,GAAmBj0B,GACjC,MAAM,eAAEszB,EAAc,eAAEE,EAAc,YAAED,GAAgBvzB,GAEjD+D,GAAgBV,IAGjB6wB,GAAmB11B,EAAc,MAEvC,IAAK80B,EAAgB,OAAOpwB,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,IAC5B,GAA8B,IAA1B0rB,EAAe5sB,OAAc,OAAOxD,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,IAGxC,MAAMusB,EAAiBb,EAAejyB,QAAQA,IACpCA,EAAOsM,WAIXymB,EAAgBd,EAAejyB,QAAQA,KAClCA,EAAOsM,WAGlB,OACEzK,EAAAA,EAAAA,KAAC4vB,GAAsB,CAACuB,YAAYnxB,EAAAA,EAAAA,KAAC8wB,GAAAA,GAAU,IAAKM,WAAW,KAAKj0B,GAAG,UAAS+C,UAC9EoF,EAAAA,EAAAA,MAAC+rB,GAAAA,EAAY,CAAChuB,QAAQ,eAAexB,MAAO,CAAEuI,SAAU,OAAQkO,IAAK,GAAIpY,SAAA,CACtE8wB,IAAmBhxB,EAAAA,EAAAA,KAACmuB,GAAAA,EAAW,CAAC9qB,QAAQ,QAAOnD,SAAEW,EAAa1C,UAC/D6B,EAAAA,EAAAA,KAACmwB,GAAkB,CACjBC,eAAgBa,EAChBX,eAAgBA,EAChBD,YAAaA,EACbQ,6BAA8B/zB,EAAM+zB,+BAErCK,GAAenqB,KAAK5I,IACnB6B,EAAAA,EAAAA,KAACmwB,GAAkB,CAEjBC,eAAgB,CAACjyB,GACjBmyB,eAAgBA,EAChBD,YAAaA,EACbQ,6BAA8B/zB,EAAM+zB,8BAJ/B1yB,EAAOiO,OAQfgkB,GAAgBrpB,KAAK5I,IAEpB,MAAM2L,EAASumB,IAAclyB,EAAOiO,MAAQ,GAI5C,OAAIjO,EAAOsM,UAAYtM,EAAOsF,OAASysB,GAAkBS,cACrDxyB,EAAOsM,UAAYtM,EAAOsF,OAASysB,GAAkB9B,UADqB,MAI5EpuB,EAAAA,EAAAA,KAACsxB,GAAAA,EAAa,CAEZC,aAAcpzB,EAAOb,MACrBk0B,MAAO,IACF1nB,EAAO/C,KAAKrM,IACb,OAAQyD,EAAOsF,MACb,KAAKysB,GAAkBS,aACvB,KAAKT,GAAkBuB,YACvB,KAAKvB,GAAkB9B,UACrB,OACEjwB,EAAOkoB,SAAS7hB,MAAMktB,GACbA,EAAEh3B,QAAUA,KACjB4C,OAAS5C,EAEjB,KAAKw1B,GAAkByB,kBACvB,KAAKzB,GAAkB0B,iBACrB,MAAO,CAAExlB,IAAK1R,EAAOm3B,KAAM1zB,EAAOqoB,WAAW9rB,IAC/C,QACE,OAAOA,EACX,KAGJo3B,WAAYA,CAACC,EAAQr3B,KACnB41B,KAAkB0B,IAChB,MAAMC,EAAW,IAAKD,GAEtB,OADAt3B,EAAyB,iBAAVA,EAAqBA,EAAQA,EAAM0R,IAC1CjO,EAAOsF,MACb,KAAKysB,GAAkBS,aACvB,KAAKT,GAAkBuB,YACvB,KAAKvB,GAAkB9B,UAErB1zB,EAAQyD,EAAOkoB,QAAQ7hB,MAAMktB,GAAMA,EAAEp0B,QAAU5C,KAAQA,OAASA,EAGpE,IAAIoP,EAASkoB,EAAQ7zB,EAAOiO,KAS5B,OARItC,IACFA,EAASA,EAAO3L,QAAQ4L,GAAMA,IAAMrP,IACd,IAAlBoP,EAAOtG,cACFyuB,EAAS9zB,EAAOiO,KAEvB6lB,EAAS9zB,EAAOiO,KAAOtC,GAGpBmoB,CAAQ,GACf,EAEJC,gBAAiBA,KACf5B,KAAkB0B,IAChB,MAAMC,EAAW,IAAKD,GAEtB,cADOC,EAAS9zB,EAAOiO,KAChB6lB,CAAQ,GACf,EAGJE,iBAAiB,EAAMjyB,UAEvBF,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,KAvDKvG,EAAOb,MAwDE,QAM5B,CAGA,SAASszB,GAAuB9zB,GAO9B,MAAM,OAAEqB,EAAM,YAAEkyB,EAAW,eAAEC,GAAmBxzB,EAE1C4wB,EAAe2C,IAAclyB,EAAOiO,KAEpCuhB,GAAkB7xB,EAAAA,EAAAA,cACrBs2B,IACC9B,GAAgB0B,IACd,MAAMK,EAAa,IAAKL,GAClBtE,EAAe2E,EAAWl0B,EAAOiO,MAAQ,GAE/C,OADAimB,EAAWl0B,EAAOiO,KAAOgmB,EAAO1E,GACzB2E,CAAU,GACjB,GAEJ,CAACl0B,EAAOiO,IAAKkkB,IAGTjB,GAAYvzB,EAAAA,EAAAA,cACfpB,IACC41B,GAAgB0B,IACd,MAAMK,EAAa,IAAKL,GAClBtE,EAAe2E,EAAWl0B,EAAOiO,MAAQ,GAE/C,OADAimB,EAAWl0B,EAAOiO,KAAO,IAAIshB,EAAchzB,GACpC23B,CAAU,GACjB,GAEJ,CAACl0B,EAAOiO,IAAKkkB,IAGf,IAAIgC,GAAgB,EACpB,GAAIjC,EACF,IAAK,MAAMjkB,KAAOikB,EAAa,CAC7B,GAAIjkB,IAAQjO,EAAOiO,IAAK,SACxB,MAAMshB,EAAe2C,EAAYjkB,GACjC,GAAIshB,GAAgBA,GAAclqB,QAAU,EAAG,CAC7C8uB,GAAgB,EAChB,KACF,CACF,CAGF,OAAQn0B,EAAOsF,MACb,KAAKysB,GAAkBqC,WACrB,OACEvyB,EAAAA,EAAAA,KAACyvB,GAAuB,CAEtBtyB,GAAIL,EAAMK,IAAMgB,EAAOiO,IACvBga,YAAajoB,EAAOioB,YACpB2I,WAAY5wB,EAAO4wB,WACnBhJ,SAAWrrB,GAAUizB,GAAgB,IAAOjzB,EAAQ,CAACA,GAAS,KAC9DA,MAAOgzB,GAAgBA,GAAclqB,OAAS,EAAIkqB,EAAa,GAAK,GACpEiC,SAAUU,IAAclyB,EAAOiO,MAN1BjO,EAAOiO,KAUlB,KAAK8jB,GAAkBsC,UACrB,OAAIF,GAAiBx1B,EAAM+zB,8BAEvB7wB,EAAAA,EAAAA,KAACyvB,GAAuB,CAEtBtyB,GAAIL,EAAMK,IAAMgB,EAAOiO,IACvBga,YAAajoB,EAAOioB,YACpB2I,WAAY5wB,EAAO4wB,WACnBhJ,SAAWrrB,GAAUizB,GAAgB,IAAOjzB,EAAQ,CAACA,GAAS,KAC9DA,MAAOgzB,GAAgBA,GAAclqB,OAAS,EAAIkqB,EAAa,GAAK,GACpEiC,SAAUU,IAAclyB,EAAOiO,MAN1BjO,EAAOiO,MAWhBpM,EAAAA,EAAAA,KAAC8uB,GAAsB,CAErB3xB,GAAIL,EAAMK,IAAMgB,EAAOiO,IACvBijB,UAAWA,EACXjJ,YAAajoB,EAAOioB,YACpB2I,WAAY5wB,EAAO4wB,YAJd5wB,EAAOiO,KAQlB,KAAK8jB,GAAkBS,aACrB,OACE3wB,EAAAA,EAAAA,KAAC4sB,GAAgB,CAEfzvB,GAAIL,EAAMK,IAAMgB,EAAOiO,IACvBga,YAAajoB,EAAOioB,YACpB1rB,MAAOgzB,GAAgBA,GAAclqB,OAAS,EAAIkqB,EAAa,GAAK,GACpE5nB,SAAWuW,GAASsR,GAAgB,IAAM,CAACtR,KAC3CgK,QAASloB,EAAOkoB,QAChB2G,WAAY7uB,EAAO6uB,aAAe7uB,EAAOsM,SACzC+c,mBAAoBrpB,EAAOqpB,oBAPtBrpB,EAAOiO,KAWlB,KAAK8jB,GAAkByB,kBACrB,OACE3xB,EAAAA,EAAAA,KAACstB,GAAqB,CAEpBnwB,GAAIL,EAAMK,IAAMgB,EAAOiO,IACvB1R,MAAOgzB,GAAgBA,GAAclqB,OAAS,EAAIkqB,EAAa,GAAK,GACpE5nB,SAAWuW,GAASsR,GAAgB,IAAM,CAACtR,KAC3C+J,YAAajoB,EAAOioB,aAAe,GACnC6E,aAAc9sB,EAAO8sB,aACrB0B,eAAgBxuB,EAAOwuB,eACvB8F,iBAAkBt0B,EAAOs0B,iBACzBzF,WAAY7uB,EAAO6uB,WACnBnD,OACE1rB,EAAOu0B,YACL1yB,EAAAA,EAAAA,KAACitB,GAAwB0F,SAAQ,CAAAzyB,SAC7B0yB,IACA5yB,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLlC,QAAQ,OACRsD,QAASA,KAEPisB,EAAQlM,SAAQ,GAChBvoB,EAAOu0B,cACJlyB,GAAcmtB,GAAgB,IAAM,CAACntB,MACtCktB,GAAgBA,EAAalqB,OAAS,EAAIkqB,EAAa,QAAK/rB,EAC7D,EACDzB,SACH,kBAKHyB,EAEN6kB,WAAYroB,EAAOqoB,WACnBgB,mBAAoBrpB,EAAOqpB,oBA/BtBrpB,EAAOiO,KAmClB,KAAK8jB,GAAkB0B,iBACrB,OAAIU,GAAiBx1B,EAAM+zB,8BAEvB7wB,EAAAA,EAAAA,KAACstB,GAAqB,CAEpBnwB,GAAIL,EAAMK,IAAMgB,EAAOiO,IACvB1R,MAAOgzB,GAAgBA,GAAclqB,OAAS,EAAIkqB,EAAa,GAAK,GACpE5nB,SAAWuW,GAASsR,GAAgB,IAAM,CAACtR,KAC3C+J,YAAajoB,EAAOioB,aAAe,GACnC6E,aAAc9sB,EAAO8sB,aACrB0B,eAAgBxuB,EAAOwuB,eACvB8F,iBAAkBt0B,EAAOs0B,iBACzBzF,WAAY7uB,EAAO6uB,WACnBnD,OACE1rB,EAAOu0B,YACL1yB,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLlC,QAAQ,OACRsD,QAASA,KACPxI,EAAOu0B,cACJlyB,GAAcmtB,GAAgB,IAAM,CAACntB,EAAUgD,OAAShD,EAAU,GAAK,OACxEktB,GAAgBA,EAAalqB,OAAS,EAAIkqB,OAAe/rB,EAC1D,EACDzB,SACH,gBAGCyB,EAEN6kB,WAAYroB,EAAOqoB,WACnBgB,mBAAoBrpB,EAAOqpB,oBAzBtBrpB,EAAOiO,MA8BhBpM,EAAAA,EAAAA,KAACmqB,GAAoB,CAEnBhtB,GAAIL,EAAMK,IAAMgB,EAAOiO,IACvBtC,OAAQ4jB,EACR5nB,SAAU6nB,EACVvH,YAAajoB,EAAOioB,aAAe,GACnC6E,aAAc9sB,EAAO8sB,aACrB0B,eAAgBxuB,EAAOwuB,eACvB8F,iBAAkBt0B,EAAOs0B,iBACzB5I,OACE1rB,EAAOu0B,YACL1yB,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLlC,QAAQ,OACRsD,QAASA,KACPxI,EAAOu0B,cACJlyB,GAAcmtB,GAAgB,IAAMntB,KACrCktB,EACD,EACDxtB,SACH,gBAGCyB,EAEN0B,QAAQ,QACRijB,uBAAqB,EACrBE,WAAYroB,EAAOqoB,WACnBgB,mBAAoBrpB,EAAOqpB,oBA1BtBrpB,EAAOiO,KA8BlB,KAAK8jB,GAAkBuB,YACrB,OAAIa,GAAiBx1B,EAAM+zB,8BAEvB7wB,EAAAA,EAAAA,KAAC4sB,GAAgB,CAEfzvB,GAAIL,EAAMK,IAAMgB,EAAOiO,IACvBga,YAAajoB,EAAOioB,YACpB1rB,MAAOgzB,GAAgBA,GAAclqB,OAAS,EAAIkqB,EAAa,GAAK,GACpE5nB,SAAWuW,GAASsR,GAAgB,IAAM,CAACtR,KAC3CgK,QAASloB,EAAOkoB,QAChBmB,mBAAoBrpB,EAAOqpB,oBANtBrpB,EAAOiO,MAWhBpM,EAAAA,EAAAA,KAACmmB,GAAe,CAEdhpB,GAAIL,EAAMK,IAAMgB,EAAOiO,IACvBga,YAAajoB,EAAOioB,YACpBtc,OAAQ4jB,EACR5nB,SAAU6nB,EACVtH,QAASloB,EAAOkoB,QAChBhjB,QAAQ,QACRijB,uBAAqB,EACrBkB,mBAAoBrpB,EAAOqpB,oBARtBrpB,EAAOiO,KAYlB,KAAK8jB,GAAkB9B,UACrB,OACEpuB,EAAAA,EAAAA,KAACytB,GAAsB,CAErBtwB,GAAIL,EAAMK,IAAMgB,EAAOiO,IACvB9O,MAAOa,EAAOb,MACd8oB,YAAajoB,EAAOioB,aAAe,GACnCsH,aAAcA,EACdC,gBAAiBA,EACjBtH,QAASloB,EAAOkoB,QAChB2G,WAAY7uB,EAAO6uB,WACnBY,aAAczvB,EAAOyvB,cARhBzvB,EAAOiO,KAYtB,C,yECxdO,SAASymB,GAAgB/1B,GAC9B,MAAM,KAAEsC,EAAI,QAAE0zB,EAAO,cAAEC,EAAa,iBAAEC,EAAgB,YAAEC,GAAgBn2B,EAElEo2B,EAAaD,GAAazuB,MAAM0uB,GAAeA,EAAWx4B,QAAU0E,IACpE+zB,EAAWD,EAAaA,EAAWzvB,UAAO9B,GAEzCd,GAAgBV,IAEjBizB,GAAoB/uB,EAAAA,EAAAA,UAAQ,KAChC,OAAQ8uB,GACN,IAAK,OACH,OAAQJ,GACN,IAAK,MACH,OAAO/yB,EAAAA,EAAAA,KAACqzB,GAAAA,GAAe,IACzB,IAAK,OACH,OAAOrzB,EAAAA,EAAAA,KAACszB,GAAAA,GAAoB,IAEhC,MACF,IAAK,SACH,OAAQP,GACN,IAAK,MACH,OAAO/yB,EAAAA,EAAAA,KAACuzB,GAAAA,GAAiB,IAC3B,IAAK,OACH,OAAOvzB,EAAAA,EAAAA,KAACwzB,GAAAA,GAAsB,IAElC,MACF,QACE,OAAQT,GACN,IAAK,MACH,OAAO/yB,EAAAA,EAAAA,KAACyzB,GAAAA,GAAgB,IAC1B,IAAK,OACH,OAAOzzB,EAAAA,EAAAA,KAAC0zB,GAAAA,GAAkB,KAIlC,OAAO1zB,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,GAAK,GACX,CAACquB,EAAeI,IAEnB,OAAKF,GAAeA,EAAYzvB,QAAU,GAAUxD,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,KAGlD1E,EAAAA,EAAAA,KAAC4vB,GAAsB,CAACwB,WAAW,MAAMD,WAAYiC,EAAmBj2B,GAAG,OAAM+C,UAC/EoF,EAAAA,EAAAA,MAAC+rB,GAAAA,EAAY,CAAChuB,QAAQ,eAAexB,MAAO,CAAEuI,SAAU,OAAQkO,IAAK,GAAIpY,SAAA,EACvEF,EAAAA,EAAAA,KAACmuB,GAAAA,EAAW,CAAC9qB,QAAQ,QAAOnD,SAAEW,EAAazB,QAC3CY,EAAAA,EAAAA,KAACmuB,GAAAA,EAAW,CAAAjuB,UACVoF,EAAAA,EAAAA,MAACsD,GAAAA,EAAK,CAAA1I,SAAA,EACJF,EAAAA,EAAAA,KAAC2zB,GAAiB,CAChBV,YAAaA,EACb7zB,KAAMA,EACN0zB,QAASA,EACTE,iBAAkBA,KAEpBhzB,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLlC,QAAQ,UACRH,KAAMkwB,EACNzsB,QAASA,KACsBqsB,IAAP,QAAlBD,EAA4C,OACxB,MAAM,aAQ9C,CAEA,SAASY,GAAkB72B,GAMzB,MAAM,YAAEm2B,EAAW,KAAE7zB,EAAI,QAAE0zB,EAAO,iBAAEE,GAAqBl2B,EACnDgJ,GAAWhK,EAAAA,EAAAA,cACdpB,IACC,GAAIA,EAAO,CACT,MAAMw4B,EAAaD,EAAYzuB,MAAMuiB,GAAWA,EAAOrsB,QAAUA,IAC7Dw4B,GAAc9zB,IAAS1E,GAASw4B,EAAWU,kBAC7CZ,IAAmBE,EAAWU,kBAEhCd,IAAUp4B,EACZ,IAEF,CAACu4B,EAAaH,EAASE,EAAkB5zB,IAE3C,OACEY,EAAAA,EAAAA,KAAC4sB,GAAgB,CACfzvB,GAAG,6BACHipB,YAAY,GACZ1rB,MAAO0E,EACP0G,SAAUA,EACVugB,QAAS4M,EAAYlsB,KAAKggB,IAAM,CAC9BzpB,MAAOypB,EAAOzpB,MACd5C,MAAOqsB,EAAOrsB,UAEhBsyB,YAAU,GAGhB,C,4EC1GO,SAAS6G,GAAgB/2B,GAC9B,MAAM,SAAEg3B,EAAQ,YAAEC,EAAW,gBAAEC,GAAoBl3B,GAE5C+D,GAAgBV,IAEvB,IAAI8zB,EAAgB,EACfn3B,EAAMo3B,kBAAkBD,IACxBn3B,EAAMq3B,iBAAiBF,IACvBn3B,EAAMs3B,iBAAiBH,IAE5B,IAAI/wB,GAAOlD,EAAAA,EAAAA,KAACq0B,GAAAA,GAAS,IAIrB,OAHIP,IAAazR,GAAmBiS,QAAOpxB,GAAOlD,EAAAA,EAAAA,KAACu0B,GAAAA,GAAW,KAC1DT,IAAazR,GAAmBmS,OAAMtxB,GAAOlD,EAAAA,EAAAA,KAACy0B,GAAAA,GAAQ,MAGxDz0B,EAAAA,EAAAA,KAAC4vB,GAAsB,CAACwB,WAAW,KAAKD,WAAYjuB,EAAM/F,GAAG,OAAM+C,UACjEF,EAAAA,EAAAA,KAACqxB,GAAAA,EAAY,CAAChuB,QAAQ,eAAexB,MAAO,CAAE0I,eAAgB,MAAOxI,YAAa,GAAI7B,UACpFF,EAAAA,EAAAA,KAACmuB,GAAAA,EAAW,CAAAjuB,UACVoF,EAAAA,EAAAA,MAACsD,GAAAA,EAAK,CAACC,WAAS,EAAA3I,SAAA,CACb8zB,IACCh0B,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CAACC,QAASpB,EAAaxC,cAAc6B,UAC3CF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAAClC,QAAQ,QAAQH,MAAMlD,EAAAA,EAAAA,KAAC00B,GAAAA,GAAW,IAAK/tB,QAASqtB,MAG3DC,EAAgB,IACfj0B,EAAAA,EAAAA,KAAC20B,GAAAA,EAAW,CAAC,UAAS,oBAAqB,aAAW,oBAAmBz0B,SACtE,EACEpD,EAAMo3B,kBAAoB7R,GAAmBuS,OAC7C93B,EAAMs3B,iBAAmB/R,GAAmBmS,MAC5C13B,EAAMq3B,iBAAmB9R,GAAmBiS,OAE5Cn2B,QAAQuP,GAAMA,IACd3G,KAAK8tB,IACJ,OAAQA,GACN,KAAKxS,GAAmBiS,MACtB,OACEt0B,EAAAA,EAAAA,KAAC80B,GAAAA,EAAe,CACd5xB,MAAMlD,EAAAA,EAAAA,KAACu0B,GAAAA,GAAW,IAClBrK,WAAY4J,IAAazR,GAAmBiS,MAC5C3tB,QAASA,IAAMotB,IAAc1R,GAAmBiS,OAChD,aAAW,YACX,UAAS,aACJ,aAGX,KAAKjS,GAAmBmS,KACtB,OACEx0B,EAAAA,EAAAA,KAAC80B,GAAAA,EAAe,CACd5xB,MAAMlD,EAAAA,EAAAA,KAACy0B,GAAAA,GAAQ,IACfvK,WAAY4J,IAAazR,GAAmBmS,KAC5C7tB,QAASA,IAAMotB,IAAc1R,GAAmBmS,MAChD,aAAW,YACX,UAAS,aACJ,aAGX,KAAKnS,GAAmBuS,MACtB,OACE50B,EAAAA,EAAAA,KAAC80B,GAAAA,EAAe,CACd5xB,MAAMlD,EAAAA,EAAAA,KAACq0B,GAAAA,GAAS,IAChBnK,WAAY4J,IAAazR,GAAmBuS,MAC5CjuB,QAASA,IAAMotB,IAAc1R,GAAmBuS,OAChD,aAAW,aACX,UAAS,cACJ,cAGb,cASpB,CC1EA,MAAMG,GAAcryB,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,kEAOxBsyB,IAAiBtyB,EAAAA,EAAAA,IAAOuyB,GAAAA,GAAiBryB,WAAA,CAAAC,YAAA,oBAAxBH,CAAwB,8EAkExC,SAASwyB,GAA8Bp4B,GAC5C,MAAM,UACJioB,EAAS,KACToQ,EAAI,QACJC,EAAO,QACPC,EAAO,WACPC,EAAU,eACVlF,EAAc,cACdtvB,EAAa,YACbuvB,EAAW,eACXC,EAAc,gBACd0D,EAAe,KACf50B,EAAI,QACJ0zB,EAAO,cACPC,EAAa,iBACbC,EAAgB,YAChBC,EACAr1B,gBAAiB23B,EAAmB,eACpCC,GACE14B,EAEEc,GAAkB9B,EAAAA,EAAAA,cAAY,KAC9By5B,EACFA,IACSjF,GACTA,EAAe,CAAC,EAClB,GACC,CAACA,EAAgBiF,IAEdE,EAAen6B,EAAc,MAC7Bo6B,EAAgBp6B,EAAc,QAE9B,SAAEw4B,EAAQ,YAAEC,GAAgBj3B,EAClC,IAAI,eAAE64B,GAAmB74B,EACzB64B,EAAiBA,GAAkB,GAEnC,MAAO7F,EAAaC,IAAkBr0B,EAAAA,EAAAA,UAAS,IAEzCk6B,GAAY95B,EAAAA,EAAAA,cAChB,CAAC0pB,EAAQ2P,IAAUE,EAAUA,EAAQF,GAAQ,MAC7C,CAACE,IAEGQ,GAAkB/5B,EAAAA,EAAAA,cACtB,CAAC0pB,EAAQ4P,IAAaE,EAAaA,EAAWF,GAAW,MACzD,CAACE,IAGGQ,OAA0Cn0B,IAAnByuB,EACvB2F,OAAwCp0B,IAAnBg0B,GAAgCA,EAAenyB,OAAS,EAE7EwyB,GACiB,IAArBl5B,EAAMk5B,iBACar0B,IAAlBb,GACC60B,GACAA,EAAenxB,MACZyxB,GACC,cAAeA,GAAiBA,EAAcz1B,YAAcnG,EAAoB2G,WAIxF,OADoBg1B,GAAcF,GAAwBC,OAKxCp0B,IAAdojB,GAEA/kB,EAAAA,EAAAA,KAACk2B,GAAAA,EAAO,CACNxvB,UAAU,mCACV7E,MAAO,CACL8c,cAAe8W,OAAe9zB,EAAY,EAC1Cka,WAAY4Z,OAAe9zB,EAAY,GACvCzB,UAEFF,EAAAA,EAAAA,KAACg1B,GAAc,CAAA90B,UACbF,EAAAA,EAAAA,KAACmuB,GAAAA,EAAW,CAACtsB,MAAO,CAAEsU,MAAO,QAASjW,UACpCF,EAAAA,EAAAA,KAACm2B,GAAAA,EAAQ,CAAC7f,OAAO,gBAQzBtW,EAAAA,EAAAA,KAACgwB,GAA8B/vB,SAAQ,CAACvF,MAAO,CAAEo1B,cAAaC,kBAAiB7vB,UAC7EF,EAAAA,EAAAA,KAACk2B,GAAAA,EAAO,CACNztB,OAAO,eACP,UAAQ,eACR7K,gBAAiBA,EACjB8I,UAAU,mCACV7E,MAAO,CACL8c,cAAe8W,OAAe9zB,EAAY,EAC1Cka,WAAY4Z,OAAe9zB,EAAY,GAEzCy0B,MAAO,CACL/rB,QAAS,UACTzP,GAAI,UACJE,GAAI,UACJE,GAAI,UACJE,GAAI,UACJ,MAAO,WACPgF,UAEFoF,EAAAA,EAAAA,MAAC0vB,GAAc,CAACnzB,MAAO,CAAE+F,aAAc8tB,EAAgB,GAAK,GAAIx1B,SAAA,CAE7D81B,IACCh2B,EAAAA,EAAAA,KAACqxB,GAAAA,EAAY,CAAAnxB,UACXF,EAAAA,EAAAA,KAACmuB,GAAAA,EAAW,CAAC9qB,QAAQ,cAAanD,UAChCF,EAAAA,EAAAA,KAACukB,GAAY,IAAKznB,QAMvBuzB,GAAeC,IACdtwB,EAAAA,EAAAA,KAAC+wB,GAAkB,CACjBX,eAAgBA,EAChBC,YAAaA,EACbC,eAAgBA,EAChBO,6BAA8B/zB,EAAM+zB,+BAIvC/zB,EAAMu5B,gBAGPr2B,EAAAA,EAAAA,KAACqxB,GAAAA,EAAY,CAAChuB,QAAQ,eAAcnD,UAClCF,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAASqyB,EACT70B,cAAeA,EACfI,QAASitB,GAAAA,OAKb7oB,EAAAA,EAAAA,MAACyvB,GAAW,CAAA70B,SAAA,EAEVF,EAAAA,EAAAA,KAAC6yB,GAAe,CACdzzB,KAAMA,EACN0zB,QAASA,EACTC,cAAeA,EACfC,iBAAkBA,EAClBC,YAAaA,IAIda,GAAYC,IACX/zB,EAAAA,EAAAA,KAAC6zB,GAAe,CACdK,iBAAkBp3B,EAAMo3B,iBACxBE,gBAAiBt3B,EAAMs3B,gBACvBD,gBAAiBr3B,EAAMq3B,gBACvBL,SAAUA,EACVC,YAAaA,EACbC,gBAAiBA,KAKnBl3B,EAAMw5B,oBAAsBx5B,EAAMy5B,oBAAsBb,IACxD11B,EAAAA,EAAAA,KAACmuB,GAAAA,EAAW,CACVqI,WAAY,CAAEnsB,QAAS,SAAU,MAAO,WACxCxI,MAAO,CAAEC,WAAY,GAAIyT,UAAW,UAAWrV,UAE/CF,EAAAA,EAAAA,KAACy2B,GAAAA,EAAU,CACTpzB,QAASqzB,GAAAA,EAAkBtY,IAC3B3D,WAAS,EACTsK,UAAWA,EACXqQ,QAASA,EACTD,KAAMA,EACNS,UAAWA,EACXC,gBAAiBA,EACjBL,eAAgBA,EAChB3zB,MAAO,CAAEsmB,WAAY,EAAGC,cAAe,kBA9G9CpoB,EAAAA,EAAAA,KAACsB,EAAAA,SAAQ,GAuHpB,CC3QO,SAASq1B,GAAgB75B,GAC9B,MAAM,IAAQqK,EAAAA,EAAAA,MACR9J,EAAQ6J,EAAE,wBACV0U,EAAc1U,EAAE,sDAChBuR,EAASvR,EAAE,YACX,UAAE0vB,EAAS,QAAEvpB,GAAYvQ,EAC/B,OACEwI,EAAAA,EAAAA,MAACuxB,GAAAA,EAAU,CAACC,cAAY,EAAA52B,SAAA,EACtBF,EAAAA,EAAAA,KAAC+2B,GAAAA,EAAgB,CACfC,WAAWh3B,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SAAG02B,GAAav5B,IAC3B6F,MACElD,EAAAA,EAAAA,KAACi3B,GAAAA,EAAc,CACb/zB,KAAMg0B,GAAAA,GACN56B,MAAM,2CAGV0e,aAAa,QAEfhb,EAAAA,EAAAA,KAACm3B,GAAAA,EAAc,CAAAj3B,SAAEmN,KACjB/H,EAAAA,EAAAA,MAAC8xB,GAAAA,EAAgB,CAAAl3B,SAAA,EACfF,EAAAA,EAAAA,KAACm3B,GAAAA,EAAc,CAAAj3B,SAAE0b,KACjB5b,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAAClC,QAAQ,UAAUsD,QAASA,IAAMhL,OAAO07B,SAASC,SAASp3B,SAC/DuY,SAKX,C,2BC3BO,SAAS8e,GAAiBz6B,GAU/B,MAAM,MAAEO,EAAK,YAAEue,EAAW,KAAE1Y,EAAI,OAAEuV,EAAM,SAAE+e,EAAQ,MAAEC,EAAK,QAAEp0B,EAAO,MAAExB,GAAU/E,EAC9E,OACEwI,EAAAA,EAAAA,MAACuxB,GAAAA,EAAU,CAACxzB,QAASA,GAAWq0B,GAAAA,EAAkBC,KAAM91B,MAAOA,EAAOi1B,cAAY,EAAA52B,SAAA,CAC/EgD,IAAQlD,EAAAA,EAAAA,KAACi3B,GAAAA,EAAc,CAAC/zB,KAAMA,KAC/BlD,EAAAA,EAAAA,KAAC+2B,GAAAA,EAAgB,CAACC,WAAWh3B,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SAAG7C,IAAW2d,aAAa,KAAK,UAAQ,uBACrEhb,EAAAA,EAAAA,KAACm3B,GAAAA,EAAc,CAAC,UAASr6B,EAAM8e,YAAY1b,SAAE0b,KAC7CtW,EAAAA,EAAAA,MAAC8xB,GAAAA,EAAgB,CAAAl3B,SAAA,CACduY,IAAUzY,EAAAA,EAAAA,KAAC43B,GAAAA,EAAiB,CAAA13B,SAAEuY,IAC9Bgf,IACCnyB,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,CACG,KACDF,EAAAA,EAAAA,KAAA,SAAM,KAACA,EAAAA,EAAAA,KAACm3B,GAAAA,EAAc,CAAAj3B,SAAEu3B,OAG3BD,IAAYx3B,EAAAA,EAAAA,KAACm3B,GAAAA,EAAc,CAAAj3B,SAAEs3B,SAItC,CCnCO,SAASK,GAAiB/6B,GAO/B,MAAM,OAAE2b,EAAM,YAAEmD,EAAW,MAAEve,EAAK,QAAEgG,EAASH,KAAMkC,GAAStI,EAC5D,OACEkD,EAAAA,EAAAA,KAACu3B,GAAgB,CACfr0B,KAAMkC,IAASqT,EAASqf,GAAAA,GAAiBC,GAAAA,IACzC16B,MAAOA,EACPue,YAAaA,EACbnD,OAAQA,EACRpV,QAASA,GAGf,CCnBA,MAAM20B,IAAoBp4B,EAAAA,EAAAA,eAAc,CACtCq4B,QAAS,GACTC,aAAcA,OACdC,WAAaC,MACbC,UAAWA,SAGN,SAASC,GAAmBx7B,GACjC,MAAOm7B,EAASM,IAAc78B,EAAAA,EAAAA,UAAsB,IAC9Cw8B,GAAep8B,EAAAA,EAAAA,cACnB,IAAMy8B,GAAYniB,GAAaA,EAAQ5S,OAAS,GAAK4S,KACrD,CAACmiB,IAEGJ,GAAar8B,EAAAA,EAAAA,cAChB08B,GAAsBD,GAAYN,GAAY,IAAIA,EAASO,MAC5D,CAACD,IAEGF,GAAYv8B,EAAAA,EAAAA,cAAY,IAAMy8B,GAAYN,GAAYA,EAAQQ,MAAM,GAAI,MAAK,CAACF,IAC9E79B,GAAQ2J,EAAAA,EAAAA,UACZ,KAAM,CAAG4zB,UAASC,eAAcC,aAAYE,eAC5C,CAACH,EAAcD,EAASI,EAAWF,IAErC,OACE7yB,EAAAA,EAAAA,MAAC0yB,GAAkB/3B,SAAQ,CAACvF,MAAOA,EAAMwF,SAAA,CACtC+3B,EAAQz0B,OAAS,GAAKy0B,EAAQA,EAAQz0B,OAAS,GAC/C1G,EAAMoD,WAGb,CAEO,SAASw4B,KACd,OAAOt4B,EAAAA,EAAAA,YAAW43B,GACpB,CAKO,SAASW,KAId,MAAM,QAAEV,EAAO,aAAEC,EAAY,WAAEC,GAAeO,KACxCF,GAASn0B,EAAAA,EAAAA,UACb,IAAO4zB,EAAQz0B,OAAS,EAAIy0B,EAAQA,EAAQz0B,OAAS,QAAK7B,GAC1D,CAACs2B,IAEGW,GAAY98B,EAAAA,EAAAA,cACf08B,IACCN,SACev2B,IAAX62B,GACFL,EAAWK,EACb,GAEF,CAACN,EAAcC,IAEjB,OAAO9zB,EAAAA,EAAAA,UAAQ,IAAM,CAACm0B,EAAQI,IAAqB,CAACJ,EAAQI,GAC9D,CCmCO,SAASC,GAEdC,EAGAC,EAGAC,GAEA,MAAOC,EAAaC,IAAkBx9B,EAAAA,EAAAA,WAAqC,IACrEs9B,EACKA,EAAiBjb,QAAmC,CAACkb,EAAa5c,KACvE4c,EAAY,QAAQF,EAAM1c,MAAWA,EAC9B4c,IACN,CAAC,GAEG,CAAC,KAIZl9B,EAAAA,EAAAA,YAAU,KACRm9B,GAAgBD,IACd,IAAIE,GAAU,EAQd,OAPAL,EAAMM,SAAS/c,IACb,MAAMjQ,EAAM,QAAQ2sB,EAAM1c,KACtB4c,EAAY7sB,IAAQ6sB,EAAY7sB,KAASiQ,IAC3C8c,GAAU,EACVF,EAAY7sB,GAAOiQ,EACrB,IAEK8c,EAAU,IAAKF,GAAgBA,CAAW,GACjD,GACD,CAACH,EAAOC,IAEX,MAAMM,GAAav9B,EAAAA,EAAAA,cAChBugB,IACC6c,GAAgBD,IACd,MAAMK,EAAU,QAAQP,EAAM1c,KAM9B,OALiB4c,EAAYK,KACZjd,KACf4c,EAAc,IAAKA,IACPK,GAAWjd,GAElB4c,CAAW,GAClB,GAEJ,CAACF,IAGGQ,GAAez9B,EAAAA,EAAAA,cAClBugB,IACC6c,GAAgBD,IACd,MAAMK,EAAU,QAAQP,EAAM1c,KAM9B,OALiB4c,EAAYK,WAE3BL,EAAc,IAAKA,IACAK,GAEdL,CAAW,GAClB,GAEJ,CAACF,IAGG7O,GAAapuB,EAAAA,EAAAA,cAChBugB,IACC,MAAMid,EAAU,QAAQP,EAAM1c,KAC9B,YAAgC1a,IAAzBs3B,EAAYK,EAAsB,GAE3C,CAACP,EAAOE,IAGJtU,GAAc7oB,EAAAA,EAAAA,cACjBg9B,IACCI,GAAgBD,IACdA,EAAc,IAAKA,GACnB,IAAK,MAAM5c,KAAQyc,EAEjBG,EADgB,QAAQF,EAAM1c,MACPA,EAEzB,OAAO4c,CAAW,GAClB,GAEJ,CAACF,IAKGS,GAAWxjB,EAAAA,EAAAA,QAAY8iB,IAC7B/8B,EAAAA,EAAAA,YAAU,KACRy9B,EAASpjB,QAAU0iB,CAAK,GACvB,CAACA,IACJ,MAAMW,GAAY39B,EAAAA,EAAAA,cAAY,IAAM6oB,EAAY6U,EAASpjB,UAAU,CAACuO,IAC9D+U,GAAgB59B,EAAAA,EAAAA,cACnBg9B,IACC,IAAK,MAAMzc,KAAQyc,EACjBS,EAAald,EACf,GAEF,CAACkd,IAGG3U,GAAc9oB,EAAAA,EAAAA,cAAY,KAC9Bo9B,GAAgBD,GACVpvB,OAAO4f,KAAKwP,GAAaz1B,OAAS,EAC7B,CAAC,EAEHy1B,GACP,GACD,IAEGn4B,GAAgBuD,EAAAA,EAAAA,UAAQ,IAAMwF,OAAOC,OAAOmvB,IAAc,CAACA,IAC3DU,GAAct1B,EAAAA,EAAAA,UAClB,IAAMvD,EAAc0C,SAAWs1B,EAAMt1B,QACrC,CAACs1B,EAAMt1B,OAAQ1C,EAAc0C,SAG/B,OAAOa,EAAAA,EAAAA,UACL,KAAM,CACJvD,gBACAu4B,aACAE,eACArP,aACAvF,cACA8U,YACA7U,cACA+U,cACAZ,QACAW,mBAEF,CACEC,EACAzP,EACA6O,EACAU,EACAJ,EACA1U,EACA7jB,EACA8jB,EACA2U,EACAG,GAGN,CAkSO,SAASE,GAA2BC,GACzC,MAAOC,EAAOC,IAAYr+B,EAAAA,EAAAA,UAAc,KACjCy5B,EAAME,IAAW35B,EAAAA,EAAAA,UAAS,IAC1B05B,EAASE,IAAc55B,EAAAA,EAAAA,UAAS,IAsBvC,OArBAK,EAAAA,EAAAA,YAAU,KACRg+B,GAAUD,IACR,MAAME,EAAWH,EAAOpB,OAAOtD,EAAO,GAAKC,EAASD,EAAOC,GAC3D,GAAI0E,EAAMt2B,SAAWw2B,EAASx2B,OAC5B,OAAOw2B,EAET,IAAIhzB,EAAQ,EACZ,IAAK,MAAMqV,KAAQ2d,EACjB,GAAIF,EAAM9yB,OAAaqV,EACrB,OAAO2d,EAGX,OAAOF,CAAK,GACZ,GACD,CAAC3E,EAAMC,EAASyE,KACnB99B,EAAAA,EAAAA,YAAU,KACJo5B,EAAOxnB,KAAKssB,KAAKJ,EAAOr2B,OAAS4xB,IACnCC,EAAQ,EACV,GACC,CAACF,EAAMC,EAASyE,EAAOr2B,UAEnBa,EAAAA,EAAAA,UAAQ,KAAM,CAAGy1B,QAAO3E,OAAME,UAASD,UAASE,gBAAe,CAACH,EAAM2E,EAAO1E,GACtF,C,gBC5fO,SAAS8E,GAA+Bp9B,GAC7C,MAAM,IAAQqK,EAAAA,EAAAA,OAER,QACJ0Q,EAAO,MACPkhB,EAAK,MACLD,EAAK,SACLqB,EAAQ,WACRjQ,EAAU,WACVmP,EAAU,aACVE,EAAY,YACZI,EAAW,UACXF,EAAS,YACT7U,EAAW,kBACXwV,EAAiB,yBACjBC,GACEv9B,GAEGw9B,EAAgBC,IAAqB7+B,EAAAA,EAAAA,UAAwB,OAC7D8+B,EAAeC,IAAoB/+B,EAAAA,EAAAA,UAAwB,OAC3Dg/B,EAAYC,IAAiBj/B,EAAAA,EAAAA,WAAS,GAEvCk/B,GAAU5kB,EAAAA,EAAAA,QAAgC,MAE1C6kB,EAAeC,IACnB,GAAIF,EAAQxkB,QAAS,CACnB,MAAM2kB,EAASH,EAAQxkB,QAAQ4kB,wBAC/B,OACEF,EAAIG,QAAUF,EAAO1a,GACrBya,EAAIG,QAAUF,EAAO1a,EAAI0a,EAAO5kB,OAChC2kB,EAAII,QAAUH,EAAO9b,GACrB6b,EAAII,QAAUH,EAAO9b,EAAI8b,EAAOzkB,MAEpC,CACA,OAAO,CAAK,EAGR6kB,EAA6BL,IAC5BD,EAAYC,IACfM,GACF,EAGIA,EAAeA,KACfR,EAAQxkB,SACV6C,MAAM6U,KAAK8M,EAAQxkB,QAAQlW,UAAUk5B,SAASiC,IAC5CA,EAAG/pB,UAAUE,OAAO8pB,GAAAA,EAAOC,UAAUC,UACrCH,EAAGI,aAAa,eAAgB,QAAQ,IAG5ChB,EAAiB,MACjBF,EAAkB,MAClBI,GAAc,EAAM,EA4ChBe,EAAmCZ,IACvC,MAAMa,EAASb,EAAIa,OACnBA,EAAOrqB,UAAUE,OAAO8pB,GAAAA,EAAOC,UAAUC,UACzCG,EAAOF,aAAa,eAAgB,SACpChB,EAAiB,MACjBF,EAAkB,MAClBI,GAAc,EAAM,EAGhBiB,EAAuCd,IAC3C,GAAIF,EAAQxkB,QAAS,CACnB0kB,EAAIe,aAAaC,cAAgB,OACjC,MAAMC,EAAmBjB,EAAIkB,cAAc7+B,GAErC8+B,EAAqBhjB,MAAM6U,KAAK8M,EAAQxkB,QAAQlW,UAAUwL,WAC7D2Q,GAASA,EAAKlf,KAAO29B,EAAIkB,cAAc7+B,KAE1C29B,EAAIkB,cAAcP,aAAa,eAAgB,QAC/ChB,EAAiBsB,GACjBxB,EAAkB0B,EACpB,GAGIC,GAAapgC,EAAAA,EAAAA,cAChBugB,IACC,MAAMrV,EAAQ8xB,EAAMptB,WAAWgC,GAAMqrB,EAAMrrB,KAAOqrB,EAAM1c,KAClD8f,EAAW,IAAIrD,GACrBqD,EAASn1B,GAASqV,EAClB8d,EAASgC,EAAS,GAEpB,CAACrD,EAAOqB,EAAUpB,IAGpB,OACEzzB,EAAAA,EAAAA,MAACsvB,GAAAA,EAAK,CACJ,aAAY1tB,EAAE,6BACdR,UAAWg0B,EAAaY,GAAAA,EAAOC,UAAUa,SAAW,GACpD/4B,QAAQ,UACRg5B,eAAe,GAAEn8B,SAAA,EAEfk6B,IACAp6B,EAAAA,EAAAA,KAACs8B,GAAAA,EAAK,CAAAp8B,UACJoF,EAAAA,EAAAA,MAACi3B,GAAAA,GAAE,CAAAr8B,SAAA,EACDF,EAAAA,EAAAA,KAACw8B,GAAAA,GAAE,IACFnC,IACCr6B,EAAAA,EAAAA,KAACw8B,GAAAA,GAAE,CACDC,OAAQ,CACN32B,SAAUA,CAAC0f,EAAQ0E,KACjBA,EAAauP,IAAc7U,GAAa,EAE1CsF,WAAYyP,KAIjB9hB,EAAQ9Q,KAAI,CAAC8b,EAAQ6Z,KACpB18B,EAAAA,EAAAA,KAACw8B,GAAAA,GAAE,CAAAt8B,SAAoB2iB,EAAO/B,QAArB4b,WAKjB18B,EAAAA,EAAAA,KAAC28B,GAAAA,EAAK,CAACl2B,IAAKm0B,EAASgC,WArGqB9B,IAC5CA,EAAIhlB,iBAEJ,MAAM+mB,EAAe/B,EAAIa,OAAmCmB,QAAQ,MACpE,KACGD,GACCjC,EAAQxkB,SAAWwkB,EAAQxkB,QAAQ2mB,SAASF,IAC9CA,EAAY1/B,KAAOq9B,GAEnB,OAAO,KACF,CACL,MAAMwC,EAASH,EAAY1/B,GACrB8/B,EAAsBhkB,MAAM6U,KAAK8M,EAAQxkB,QAAQlW,UAAUwL,WAC9D2Q,GAASA,EAAKlf,KAAO6/B,IAExB,GAAIC,IAAwB3C,GAAkBE,EAAe,CAC3D,MAAM0C,EAOKC,EAACC,EAAUlW,EAAgBmW,KAC1C,MAAMC,EAAYF,EAAI1xB,WAAW2Q,GAAS0c,EAAM1c,KAAU6K,IAE1D,GAAIoW,IAAcD,EAChB,OAAOD,EAET,MAAMG,EAAOH,EAAII,OAAOF,EAAW,GAGnC,OAFAF,EAAII,OAAOH,EAAS,EAAGE,EAAK,IAErBH,CAAG,EAhBgBD,CAAS,IAAIrE,GAAQ0B,EAAeyC,GAC1D9C,EAAS+C,EACX,CACF,CACA,OAAO,IAAI,EAiFoCO,YAlED3C,IACzCD,EAAYC,IACfP,EAAkB,KACpB,EA+DwEr6B,SACnE44B,EAAM/xB,KAAI,CAACsV,EAAMqhB,KAChB,MAAMtxB,EAAM2sB,EAAM1c,GAClB,OACE/W,EAAAA,EAAAA,MAACi3B,GAAAA,GAAE,CAEDp/B,GAAIiP,EAAIoS,WACRmf,WAAS,EACTxC,OAAQA,EACRO,UAAWA,EACXE,YAAaA,EAAY17B,SAAA,EAEzBF,EAAAA,EAAAA,KAAC49B,GAAAA,GAAE,CAACC,aAAc,CAAE1gC,GAAI,iBAAiBiP,EAAIoS,gBAC5C6b,IACCr6B,EAAAA,EAAAA,KAAC49B,GAAAA,GAAE,CACDnB,OAAQ,CACNiB,WACAr6B,QAAS,WACTyC,SAAUA,CAAC0f,EAAQiX,KACjBA,EAASpD,EAAWhd,GAAQkd,EAAald,EAAK,EAEhD6N,WAAYA,EAAW7N,MAI5BxE,EAAQ9Q,KAAK8b,IACZ7iB,EAAAA,EAAAA,KAAC49B,GAAAA,GAAE,CAAA19B,SAAsB2iB,EAAOC,KAAKzG,EAAM6f,IAAlCrZ,EAAO/B,YArBb1U,EAuBF,QAMjB,CC7KO,SAAS0xB,GAAqCzX,GACnD,MAAOvZ,EAAG8rB,GAAaD,MAChBI,IAASr9B,EAAAA,EAAAA,WAAS,IAAM2qB,EAAQ0S,SAChCgF,IAAUriC,EAAAA,EAAAA,WAAS,IAAM2qB,EAAQ0X,UACjCC,IAAUtiC,EAAAA,EAAAA,WAAS,IAAM2qB,EAAQ2X,UAGjCC,EAAYC,IAAiBxiC,EAAAA,EAAAA,WAA0C,KAC5E,IACE,MAAMhB,EAAQwV,aAAaC,QAAQkW,EAAQlpB,IAC3C,GAAqB,iBAAVzC,EAAoB,CAC7B,MAAMwlB,EAAgB9P,KAAKC,MAAM3V,GACjC,GACEue,MAAMC,QAAQgH,IACdA,EAAK5b,OAAOoJ,GAAmB,iBAANA,KACzBwS,EAAK5b,OAAOoJ,GAAM,QAASA,GAAK,YAAaA,IAE7C,OAAOwS,CAEX,CACF,CAAE,MACA,CAEc,IAGZ4Y,GAAQz0B,EAAAA,EAAAA,UAAQ,IACf45B,EAGI5X,EAAQyS,MACZ/xB,KAAKsV,IACJ,GAAI2hB,EAAQ,CACV,MAAMG,EAAYF,EAAWz5B,MAAMkJ,GAAMA,EAAEtB,MAAQ2sB,EAAM1c,KACrD8hB,GAAaA,EAAUp+B,OACzBi+B,EAAO3hB,EAAM8hB,EAAUp+B,MAE3B,CACA,OAAOsc,CAAI,IAEZjd,MAAK,CAACiM,EAAGoc,KACR,MAAM2W,EAASH,EAAWvyB,WAAWgC,GAAMA,EAAEtB,MAAQ2sB,EAAM1tB,KACrDgzB,EAASJ,EAAWvyB,WAAWgC,GAAMA,EAAEtB,MAAQ2sB,EAAMtR,KAC3D,OAAgB,IAAZ2W,IAA6B,IAAZC,EAAsB,GAC3B,IAAZD,EAAsB,GACV,IAAZC,GAAuB,EACpBD,EAASC,CAAM,IAlBnBhY,EAAQyS,OAqBhB,CAACmF,EAAYlF,EAAOiF,EAAQ3X,EAAQyS,QAEjCh4B,GAAgBuD,EAAAA,EAAAA,UAAQ,IACxB45B,EACKnF,EAAM36B,QAAQke,IACnB,MAAM8hB,EAAYF,EAAWz5B,MAAMkJ,GAAMA,EAAEtB,MAAQ2sB,EAAM1c,KACzD,OAAO8hB,GAAYA,EAAUG,OAAc,IAGtCxF,GAER,CAACA,EAAOmF,EAAYlF,IAEjBwF,GAAiBziC,EAAAA,EAAAA,cACrB,CAAC0iC,EAAuB19B,KACtB,MAAM29B,EAAyCD,EAAaz3B,KAAKsV,IAAI,CACnEjQ,IAAK2sB,EAAM1c,GACXiiB,QAASx9B,EAAcyH,SAAS8T,GAChCtc,MAAOg+B,EAASA,EAAO1hB,QAAQ1a,MAEjCu8B,EAAcO,GACdvuB,aAAac,QAAQqV,EAAQlpB,GAAIiT,KAAKa,UAAUwtB,IAChDpY,EAAQqY,UAAWrY,EAAQqY,SAASF,EAAyB,GAE/D,CAACzF,EAAO1S,EAAS0X,IAcnB,MAAO,CAAEY,gBAXeA,IACtB/F,GACE54B,EAAAA,EAAAA,KAAC4+B,GAAgB,IACXvY,EACJ0S,MAAOA,EACPD,MAAOA,EACP+F,qBAAsB/9B,EACtBy9B,eAAgBA,KAIIO,aAAch+B,EAC1C,CAEO,SAAS89B,GACd9hC,GAKA,MAAM,IAAQqK,EAAAA,EAAAA,OACR,MAAE9J,EAAK,YAAEue,EAAW,QAAE/D,EAAO,eAAE0mB,GAAmBzhC,GACjDi8B,IAASr9B,EAAAA,EAAAA,WAAS,IAAMoB,EAAMi8B,SAC9BjsB,EAAG8rB,GAAaD,KACjBpsB,EAAUA,IAAMqsB,OAAUj3B,IACzBm3B,EAAOqB,IAAYz+B,EAAAA,EAAAA,WAAkB,IAAMoB,EAAMg8B,SAClD,cACJh4B,EAAa,WACbopB,EAAU,WACVmP,EAAU,aACVE,EAAY,YACZI,EAAW,UACXF,EAAS,YACT7U,GACEiU,GAAYC,EAAOC,EAAOj8B,EAAM+hC,sBAOpC,OACEv5B,EAAAA,EAAAA,MAACy5B,GAAAA,EAAK,CACJ1hC,MAAOA,EACP,aAAYA,EACZoL,OAAQpL,EACRue,aAAa5b,EAAAA,EAAAA,KAAA,OAAK6B,MAAO,CAAEumB,aAAc,IAAKloB,SAAE0b,IAChDvY,QAASvG,EAAMuG,SAAW27B,GAAAA,EAAaC,OACvCp5B,QAAM,EACN0G,QAASA,EACTjJ,QAAS,EACPtD,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAAalC,QAAQ,UAAUsD,QAf5Bu4B,KACdX,EAAezF,EAAOh4B,GACtB83B,OAAUj3B,EAAU,EAauCzB,SAAEgH,CAAC,SAA9C,UACZlH,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAAclC,QAAQ,OAAOsD,QAAS4F,EAAQrM,SAAEgH,CAAC,UAA5C,WAEdi4B,kBAAgB,EAAAj/B,SAAA,EAEhBF,EAAAA,EAAAA,KAACgI,EAAAA,EAAO,KACRhI,EAAAA,EAAAA,KAACo/B,GAAAA,EAAY,CAACv9B,MAAO,CAAEsc,QAAS,GAAIje,UAClCF,EAAAA,EAAAA,KAACk6B,GAAY,CACXnB,MAAOA,EACPD,MAAOA,EACPqB,SAAUA,EACVtiB,QAASA,EACTqS,WAAYA,EACZmP,WAAYA,EACZE,aAAcA,EACdI,YAAaA,EACbF,UAAWA,EACX7U,YAAaA,EACbwV,kBAAmBt9B,EAAMs9B,kBACzBC,0BAAkD,IAAxBv9B,EAAMuiC,mBAGpCr/B,EAAAA,EAAAA,KAACgI,EAAAA,EAAO,MAGd,CCnNO,SAASs3B,KACd,OACEt/B,EAAAA,EAAAA,KAAC40B,GAAAA,EAAK,CAACyH,eAAe,GAAG31B,UAAU,aAAYxG,UAC7CF,EAAAA,EAAAA,KAAC28B,GAAAA,EAAK,CAAAz8B,SACH,IAAI+Y,MAAM,IAAI6E,KAAK,GAAG/W,KAAI,CAAC+F,EAAG9F,KAC7BhH,EAAAA,EAAAA,KAACu8B,GAAAA,GAAE,CAAAr8B,UACDF,EAAAA,EAAAA,KAAC49B,GAAAA,GAAE,CAAA19B,UACDF,EAAAA,EAAAA,KAACm2B,GAAAA,EAAQ,CAAC7f,OAAO,YAFZtP,QASnB,CCIO,SAASu4B,GAAeziC,GAC7B,MAAM,QAAEu4B,EAAO,WAAEC,GAAex4B,EAC1B84B,GAAY95B,EAAAA,EAAAA,cAAuB,CAAC0pB,EAAQ2P,IAASE,EAAQF,IAAO,CAACE,IACrEQ,GAAkB/5B,EAAAA,EAAAA,cACtB,CAAC0pB,EAAQ4P,IAAYE,EAAWF,IAChC,CAACE,IAEGkK,GAAWlkC,EAAc,MAE/B,OACE0E,EAAAA,EAAAA,KAACy2B,GAAAA,EAAU,CACT,UAAQ,aACRpzB,QAASqzB,GAAAA,EAAkBrY,OAC3B0G,UAAWjoB,EAAMioB,UACjBoQ,KAAMr4B,EAAMq4B,KACZC,QAASt4B,EAAMs4B,QACfQ,UAAWA,EACXC,gBAAiBA,EACjBL,eAAgB14B,EAAM04B,eACtB3zB,MAAO,IACF/E,EAAM+E,MACT49B,UAAW,OAEX5Z,OAAQ,IAERhK,WAAY2jB,EAAU,EAAI,EAC1B7gB,cAAe6gB,EAAU,EAAI,GAG/B94B,UAAU,yBAGhB,CClDO,SAASg5B,GAAS5iC,GACvB,MAAMvB,EAAOuB,EAAMvB,MAAQ,IACrBogC,GAAS3lB,EAAAA,EAAAA,QAAuB,OAC/BuC,EAAqBonB,IAA0BjkC,EAAAA,EAAAA,UAAS,OACzDkkC,GAAS9jC,EAAAA,EAAAA,cACZqa,IACC,IAAI0B,EAAUlK,KAAKkyB,IAAI/iC,EAAMgjC,YAAc,GAAInyB,KAAKgG,IAAIhG,KAAKC,MAAMuI,EAAQ5a,GAAO,IAC9Esc,EAAU,IAAGA,EAAU,GAC3B8nB,GAAuB,IAAM,IAAI1mB,MAAMpB,GAASiG,KAAK,OAAOrW,KAAK,MAAK,GAExE,CAAC3K,EAAMgjC,WAAYvkC,IAWrB,OATAmb,EAAAA,GAAAA,GAAkBilB,GAASzjB,GAAU0nB,EAAO1nB,EAAMC,YAAYhC,UAC9D8B,EAAAA,EAAAA,kBAAgB,KACd2nB,EAAOjE,EAAOvlB,SAASC,aAAe,EAAE,GACvC,CAACupB,KAOF5/B,EAAAA,EAAAA,KAAA,OAAKyG,IAAKk1B,EAAQ95B,MAAO,CAAE0N,QAAS,OAAQwwB,aAAc,MAAOxnB,sBAAqBD,IAJ5E,IAIkFpY,SACzFpD,EAAMoD,UAGb,C,qCCIO,MAAM8/B,GAAQt9B,EAAAA,GAAOu9B,MAAKr9B,WAAA,CAAAC,YAAA,oBAAZH,CAAY,kBAyB3Bw9B,GAAgBx9B,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,mDAM1By9B,GAAcz9B,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,yBAIxB09B,GAAa19B,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,6EAQvB29B,GAAU39B,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,qBAIpB49B,GAAgB59B,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,+DAO1B69B,GAAsB79B,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,kBAIzB89B,GAAgB99B,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,0DAO1B+9B,GAAa/9B,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,gDAM7B,SAASg+B,GAAgC5jC,GAU9C,MAAM,KACJuf,EAAI,aACJskB,EAAY,WACZzW,EAAU,WACVmP,EAAU,aACVE,EAAY,YACZqH,EAAW,WACX5K,EAAU,oBACV6K,GACE/jC,EAEEgkC,GAAOz8B,EAAAA,EAAAA,UAAQ,IAAMs8B,EAAatkB,IAAO,CAACA,EAAMskB,IAEhDI,IAAmB7W,IAAa7N,GAEhC2kB,GAAgBllC,EAAAA,EAAAA,cAAY,KAC5BouB,IAAa7N,GACfkd,IAAeld,GAEfgd,IAAahd,EACf,GACC,CAAC6N,EAAY7N,EAAMgd,EAAYE,IAE5B0H,OAA+Bt/B,IAAhBi/B,GAA6BA,EAAYp9B,OAAS,EACjE09B,EAAclL,GAAciL,EAElC,OACE37B,EAAAA,EAAAA,MAAC4U,GAAAA,EAAI,CACH/c,GAAI2jC,EAAK3jC,GACTsL,OAAQq4B,EAAK3jC,GAEbgd,QAAM,EACNgnB,SAAO,EACP/mB,WAAS,EACTgnB,aAAcL,EACd7W,WAAY6W,EACZl/B,MAAO,CACLwY,WAAY,mBACZ8S,OAAQ,UACR1X,SAAU,QACVvV,SAAA,EAEFF,EAAAA,EAAAA,KAAC2a,GAAAA,EAAU,IACJumB,GAAe,CAClB59B,QAAS,CACPA,SACEgC,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,CACG0gC,GAAeA,EAAYp9B,SAC1BxD,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAASs9B,EACTx9B,SAAU6F,GAAAA,GAAiBC,MAC3B3I,aAAc8b,EACdlb,UAAQ,EACRkI,SAAS,WAGZ2sB,IACCh2B,EAAAA,EAAAA,KAACqhC,GAAAA,EAAQ,CACP9/B,UAAW2oB,IAAa7N,GACxB/Z,SAAU0+B,EAEV7jC,GAAG,eAMXmkC,aAAa,EACb56B,eAAW/E,IAGfE,MAAO,CAAE0N,QAAS,OAAQnF,SAAU,SAAUqL,SAAU,QAASvV,UAEjEoF,EAAAA,EAAAA,MAAC46B,GAAa,CAAAhgC,SAAA,EACZoF,EAAAA,EAAAA,MAAC86B,GAAU,CAAAlgC,SAAA,CACR4gC,EAAKS,eACF,KACAT,EAAK59B,OAAQlD,EAAAA,EAAAA,KAACyU,GAAW,CAAClZ,KAAK,KAAI2E,SAAE4gC,EAAK59B,QAC9CoC,EAAAA,EAAAA,MAAC+6B,GAAO,CAAAngC,SAAA,CACL4gC,EAAKS,gBACJvhC,EAAAA,EAAAA,KAACmgC,GAAW,CAAAjgC,SACT4gC,EAAK59B,OAAQlD,EAAAA,EAAAA,KAACyU,GAAW,CAAClZ,KAAK,KAAI2E,SAAE4gC,EAAK59B,SAE3C,MACJlD,EAAAA,EAAAA,KAACwhC,GAAAA,EAAS,CAAAthC,UACRF,EAAAA,EAAAA,KAAC0P,GAAAA,EAAQ,CAACzN,QAAS6+B,EAAKzjC,UAEzByjC,EAAKzlB,UACJrb,EAAAA,EAAAA,KAAC8a,GAAAA,EAAI,CAAC7S,UAAU,QAAQpG,MAAO,CAAEsG,QAAS,IAAMjI,SAC7C4gC,EAAKzlB,WAGRwlB,IACE7gC,EAAAA,EAAAA,KAAC8a,GAAAA,EAAI,CAAC7S,UAAU,QAAQpG,MAAO,CAAEsG,QAAS,IAAMjI,SAC7C2gC,UAMVC,EAAKW,OAASX,EAAKY,eAClB1hC,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAAtK,UAEPF,EAAAA,EAAAA,KAAA,OAAK2G,QAAU2J,GAAMA,EAAE0Y,kBAAkB9oB,UACvCF,EAAAA,EAAAA,KAAC6Y,GAAAA,EAAO,CAACC,cAAegoB,EAAKa,kBAAmB5oB,YAAa+nB,EAAKY,aAAaxhC,UAC7EF,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAC/X,MAAOwkC,EAAKc,WAAW1hC,SAAE4gC,EAAKW,cAK5CX,EAAKW,QAAUX,EAAKY,eACnB1hC,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAAtK,UACPF,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAC/X,MAAOwkC,EAAKc,WAAW1hC,SAAE4gC,EAAKW,eAK5CX,EAAKe,SACLf,EAAK52B,SACJlK,EAAAA,EAAAA,KAAC+b,GAAAA,EAAU,CAAA7b,UACTF,EAAAA,EAAAA,KAACsgC,GAAa,CAAApgC,UACZF,EAAAA,EAAAA,KAACugC,GAAmB,CAAArgC,SACjB4gC,EAAK52B,SACJlK,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAACC,UAAW,IAAIjU,SACxB4gC,EAAK52B,OAAOnD,KAAKsV,IAChBrc,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAEJ/X,MAAO+f,EAAK/f,MACZ4G,KAAMmZ,EAAKnZ,KACXG,QAASgZ,EAAKhZ,QAAQnD,UAEtBF,EAAAA,EAAAA,KAAC0P,GAAAA,EAAQ,CAACzN,QAASoa,EAAK/e,MAAOuE,MAAO,CAAE8N,SAAU,MAL7C0M,EAAK/e,iBAczBwjC,EAAKgB,aACJ9hC,EAAAA,EAAAA,KAACmM,GAAAA,EAAK,CAAC9O,MAAOyjC,EAAKgB,WAAY1uB,UAAQ,EAAC/P,QAASy9B,EAAKiB,aAAa7hC,SAChE4gC,EAAKkB,iBAhHLlB,EAAK3jC,IAAM2jC,EAAKzjC,MAqH3B,CC7PO,SAAS4kC,GAAiCnlC,GAC/C,MAAM,MACJi8B,EACArU,UAAWoU,EAAK,aAChBoJ,EAAY,WACZhY,EAAU,WACVmP,EAAU,aACVE,EAAY,WACZ4I,EAAU,WACVnM,EACAoM,gBAAiBvB,GACf/jC,EAEE6jC,EDkPD,SACL9oB,EACAkhB,GAEA,MAAM7Y,GAAO7b,EAAAA,EAAAA,UAAQ,KACnB,IAAIg+B,EACAC,EACAC,EACJ,MAAMC,EAA2C,GACjD,IAAIC,EACJ,MAAMC,EAAiC,GAEvC,IAAK,MAAM7f,KAAUhL,EACnB,GAAoB,WAAhBgL,EAAOie,KACX,OAAQje,EAAOpf,MACb,IAAK,cACE8+B,IAAmBA,EAAoB1f,GAC5C,MACF,IAAK,SACE4f,IAAaA,EAAc5f,GAChC,MACF,IAAK,QACH2f,EAAaz+B,KAAK8e,GAClB,MACF,QACE,OAAQA,EAAOie,MACb,IAAK,OACHuB,EAAaxf,EACb,MACF,IAAK,WACHyf,EAAiBzf,EACjB,MACF,IAAK,cACH0f,EAAoB1f,EACpB,MACF,QACE6f,EAAY3+B,KAAK8e,IAM3B,MAAO,CACLwf,aACAC,iBACAC,oBACAC,eACAE,cACAD,cACD,GACA,CAAC5qB,KAEE,WAAEwqB,EAAU,eAAEC,EAAc,kBAAEC,EAAiB,aAAEC,EAAY,YAAEE,EAAW,YAAED,GAChFviB,EAEF,OAAO7b,EAAAA,EAAAA,UAAqC,IAClCgY,IACN,IAAIsmB,IAAmBJ,EACnBA,GAAmB7nC,QAAU6nC,EAAkB7nC,MAAM2hB,KACvDsmB,GAAiB,GAGnB,MAAMC,EAAqBF,EAAYvkC,QACpC0kB,IAAYA,EAAOnoB,OAASmoB,EAAOnoB,MAAM2hB,KAGtCwmB,EAAgC,CACpC1lC,GAAI47B,EAAM1c,GACVnZ,KAAMm/B,GAAYn/B,OAAOmZ,GACzBhf,OAAO2C,EAAAA,EAAAA,KAAC4iB,GAAe,CAACC,OAAQwf,EAAYhmB,KAAMA,IAClDhB,SAAUinB,KAAoBA,EAAe5nC,OAAS4nC,EAAe5nC,MAAM2hB,MACzErc,EAAAA,EAAAA,KAAC4iB,GAAe,CAACC,OAAQyf,EAAgBjmB,KAAMA,IAEjDwlB,UACE7hC,EAAAA,EAAAA,KAAC8iC,GAAAA,EAAQ,CAAA5iC,UACPoF,EAAAA,EAAAA,MAAC4c,GAAAA,EAAe,CAACzH,WAAS,EAAAva,SAAA,CACvByiC,GAAkBJ,IACjBviC,EAAAA,EAAAA,KAACkhB,GAAU,CAAAhhB,SACmB,gBAA3BqiC,EAAkB9+B,MACjBzD,EAAAA,EAAAA,KAAA,OAAAE,SAAMqiC,EAAkB7nC,MAAM2hB,MAE9Brc,EAAAA,EAAAA,KAAC4iB,GAAe,CAACC,OAAQ0f,EAAmBlmB,KAAMA,KAJrCkmB,EAAkBplC,IAAMolC,EAAkBzhB,QAQ5D8hB,EAAmB77B,KAAK8b,IACvB7iB,EAAAA,EAAAA,KAACkhB,GAAU,CAAkC5jB,MAAOulB,EAAO/B,OAAO5gB,UAChEF,EAAAA,EAAAA,KAAC4iB,GAAe,CAACC,OAAQA,EAAQxG,KAAMA,KADxBwG,EAAO1lB,IAAM0lB,EAAO/B,UAItC0hB,EAAah/B,OAAS,IACrBxD,EAAAA,EAAAA,KAACkhB,GAAU,CAAAhhB,UACTF,EAAAA,EAAAA,KAACwgC,GAAa,CAAAtgC,SACXsiC,EAAaz7B,KAAI,CAAC8b,EAAQnV,KACzBpI,EAAAA,EAAAA,MAACm7B,GAAU,CAAAvgC,SAAA,EACTF,EAAAA,EAAAA,KAAC4iB,GAAe,CAACC,OAAQA,EAAQxG,KAAMA,KACvCrc,EAAAA,EAAAA,KAACggC,GAAK,CAAA9/B,SAAE2iB,EAAO/B,WAFApT,QAHP,sBAcxBxD,OAAQu4B,GAAeA,EAAY/nC,MAAM2hB,IAAOtV,KAAKzJ,IAAK,CAAQA,aAKpE,OAHKqlC,GAAgD,IAA9BC,EAAmBp/B,QAAwC,IAAxBg/B,EAAah/B,SACrEq/B,EAAchB,cAAWlgC,GAEpBkhC,CAAa,GAErB,CACDH,EACAF,EACAD,EACAE,EACAJ,EACAC,EACAvJ,GAEJ,CC3WuBgK,CAAwBb,EAAcnJ,GAErDiK,GAAe3+B,EAAAA,EAAAA,UAAQ,KAEzBrE,EAAAA,EAAAA,KAAC0/B,GAAQ,CAACnkC,KAAM,IAAI2E,SACjB44B,GAAO/xB,KAAKsV,IACXrc,EAAAA,EAAAA,KAAC0gC,GAAa,CAEZrkB,KAAMA,EACNskB,aAAcA,EACdzW,WAAYA,EACZmP,WAAYA,EACZE,aAAcA,EACdqH,YAAauB,EACbnM,WAAYA,EACZ6K,oBAAqBA,GARhB9H,EAAM1c,SAalB,CACDyc,EACAC,EACA4H,EACAzW,EACAmP,EACAE,EACA4I,EACAnM,EACA6K,IAGF,OAAO7gC,EAAAA,EAAAA,KAACoY,GAAAA,GAAW,CAACvW,MAAO,CAAE4c,SAAU,GAAIve,SAAE8iC,GAC/C,C,wFCtBO,SAASC,GAAgCnmC,GAC9C,MAAM,MACJi8B,EAAK,UACLrU,EAAS,aACTwd,EAAY,WACZhY,EAAU,WACVmP,EAAU,aACVE,EAAY,WACZ4I,EACAC,gBAAiBvB,EAAmB,WACpC7K,GACEl5B,EAEEomC,EAkBD,SACLhB,EACAnJ,EACA7O,EACAmP,EACAE,EACA4I,EACAtB,EACA7K,GAEA,MAAM9V,GAAO7b,EAAAA,EAAAA,UAAQ,KACnB,IAAIg+B,EACAC,EACAC,EACJ,MAAMC,EAA2C,GACjD,IAAIC,EACJ,MAAMU,EAAoC,GACpCC,EAAsC,GAE5C,IAAK,MAAMvgB,KAAUqf,EACnB,GAAoB,WAAhBrf,EAAOwgB,KACX,OAAQxgB,EAAOpf,MACb,IAAK,cACE8+B,IAAmBA,EAAoB1f,GAC5C,MACF,IAAK,SACE4f,IAAaA,EAAc5f,GAChC,MACF,IAAK,QACH2f,EAAaz+B,KAAK8e,GAClB,MACF,QACE,OAAQA,EAAOwgB,MACb,IAAK,OACHhB,EAAaxf,EACb,MACF,IAAK,WACHyf,EAAiBzf,EACjB,MACF,IAAK,cACH0f,EAAoB1f,EACpB,MACF,IAAK,YACHugB,EAAiBr/B,KAAK8e,GACtB,MACF,QACEsgB,EAAep/B,KAAK8e,IAM9B,MAAO,CACLwf,aACAC,iBACAC,oBACAC,eACAW,iBACAC,mBACAX,cACD,GACA,CAACP,IAEElB,GAAgBllC,EAAAA,EAAAA,cACnBugB,IACK6N,IAAa7N,GACfkd,IAAeld,GAEfgd,IAAahd,EACf,GAEF,CAAC6N,EAAYmP,EAAYE,KAGrB,WACJ8I,EAAU,eACVC,EAAc,kBACdC,EAAiB,aACjBC,EAAY,eACZW,EAAc,iBACdC,EAAgB,YAChBX,GACEviB,EAEJ,OAAOpkB,EAAAA,EAAAA,cACJugB,IACC,MAAMjQ,EAAM2sB,EAAM1c,GACZ0kB,EAAiB7W,IAAa7N,GACpC,OACErc,EAAAA,EAAAA,KAACsjC,GAAAA,EAAY,CAAW,kBAAiB,aAAal3B,IAAOxF,WAAYm6B,EAAe7gC,UACtFoF,EAAAA,EAAAA,MAACi+B,GAAAA,EAAe,CAAArjC,SAAA,CACb81B,IACCh2B,EAAAA,EAAAA,KAACwjC,GAAAA,EAAa,CACZ,kBAAiB,mBAAmBp3B,IACpChP,KAAM,mBAAmBgP,IACzB7K,UAAW2oB,IAAa7N,GACxB1V,QAASA,IAAMq6B,EAAc3kB,GAC7B,UAAS,qBAGbrc,EAAAA,EAAAA,KAACyjC,GAAAA,EAAiB,CAChBC,cAAe,EACb1jC,EAAAA,EAAAA,KAAC2jC,GAAAA,EAAY,CAAextB,MAAO,EAAEjW,UACnCF,EAAAA,EAAAA,KAACmK,EAAAA,EAAI,CAAAjK,UACHoF,EAAAA,EAAAA,MAAC0T,GAAAA,EAAK,CAACnQ,WAAS,EAAA3I,SAAA,EACdoF,EAAAA,EAAAA,MAAC6E,EAAAA,EAAI,CAACrB,WAAY,CAAEuB,QAAS,oBAAqBnK,SAAA,CAC/CmiC,GAAYn/B,OACXlD,EAAAA,EAAAA,KAACyU,GAAW,CAAClZ,KAAK,KAAI2E,SAAEmiC,GAAYn/B,KAAKmZ,MAE3C/W,EAAAA,EAAAA,MAAC0T,GAAAA,EAAK,CAAA9Y,SAAA,EACJF,EAAAA,EAAAA,KAAC+a,GAAAA,EAAK,CACJC,aAAa,KACbnZ,MAAO,CAAEsmB,WAAY,EAAGyb,WAAY,QACpC,UAAS,iBAAiB1jC,UAE1BF,EAAAA,EAAAA,KAAA,QAAM7C,GAAI,aAAaiP,IAAMlM,UAC3BF,EAAAA,EAAAA,KAAC4iB,GAAe,CAACC,OAAQwf,EAAYhmB,KAAMA,QAG9CimB,GACCtiC,EAAAA,EAAAA,KAAC8a,GAAAA,EAAI,CAAC7S,UAAU,QAAQpG,MAAO,CAAEsG,QAAS,IAAMjI,UAC9CF,EAAAA,EAAAA,KAAC4iB,GAAe,CAACC,OAAQyf,EAAgBjmB,KAAMA,MAGjDwkB,IACE7gC,EAAAA,EAAAA,KAAC8a,GAAAA,EAAI,CAAC7S,UAAU,QAAQpG,MAAO,CAAEsG,QAAS,IAAMjI,SAC7C2gC,WAMT0B,GACAY,EAAe3/B,OAAS,GACxBg/B,EAAah/B,OAAS,GACtBi/B,KACAn9B,EAAAA,EAAAA,MAAC4c,GAAAA,EAAe,CAACzH,WAAS,EAAAva,SAAA,CACvBqiC,KACGA,EAAkB7nC,OAAS6nC,EAAkB7nC,MAAM2hB,MACnDrc,EAAAA,EAAAA,KAACqhB,GAAAA,EAAoB,CAAAnhB,UACnBF,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,UACzBF,EAAAA,EAAAA,KAAC4iB,GAAe,CAACC,OAAQ0f,EAAmBlmB,KAAMA,OAF3BkmB,EAAkBzhB,QAMhDqiB,EAAep8B,KAAK8b,GACfA,EAAOnoB,QAAUmoB,EAAOnoB,MAAM2hB,IAAcrc,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,KAE9CY,EAAAA,EAAAA,MAAC+b,GAAAA,EAAoB,CAAAnhB,SAAA,EACnBF,EAAAA,EAAAA,KAACuhB,GAAAA,EAAmB,CAAC1f,MAAO,CAAE6T,WAAY,SAAUvN,QAAS,IAAMjI,SAChE2iB,EAAO/B,UAEV9gB,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,UACzBF,EAAAA,EAAAA,KAAC4iB,GAAe,CAACC,OAAQA,EAAQxG,KAAMA,QALhBwG,EAAO/B,UAUrC0hB,EAAah/B,OAAS,IACrBxD,EAAAA,EAAAA,KAACqhB,GAAAA,EAAoB,CAAAnhB,UACnBF,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,UACzBF,EAAAA,EAAAA,KAAA,OACE6B,MAAO,CACL0N,QAAS,OACT+I,IAAK,GACL6P,UAAW,EACX/d,SAAU,QACVlK,SAEDsiC,EAAaz7B,KAAI,CAAC8b,EAAQnV,KACzBpI,EAAAA,EAAAA,MAAA,OAEEzD,MAAO,CAAE0N,QAAS,OAAQ+I,IAAK,EAAGxP,WAAY,YAAa5I,SAAA,EAE3DF,EAAAA,EAAAA,KAAC4iB,GAAe,CAACC,OAAQA,EAAQxG,KAAMA,KACvCrc,EAAAA,EAAAA,KAAA,SAAO6B,MAAO,CAAEsG,QAAS,IAAMjI,SAAE2iB,EAAO/B,WAJnCpT,UAZW,UAuB3B+0B,IACCziC,EAAAA,EAAAA,KAACqhB,GAAAA,EAAoB,CAAAnhB,UACnBF,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,UACzBF,EAAAA,EAAAA,KAAC4iB,GAAe,CAACC,OAAQ4f,EAAapmB,KAAMA,OAFrBomB,EAAY3hB,iBAjFjC,WA4FlBsiB,EAAiB5/B,OAAS,GACxBxD,EAAAA,EAAAA,KAAC2jC,GAAAA,EAAY,CAAAzjC,UACXF,EAAAA,EAAAA,KAACkiB,GAAAA,EAAe,CAACzH,WAAS,EAAAva,SACvBkjC,EAAiBr8B,KAAK8b,GACjBA,EAAOnoB,QAAUmoB,EAAOnoB,MAAM2hB,IAAcrc,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,KAE9CY,EAAAA,EAAAA,MAAC+b,GAAAA,EAAoB,CAAAnhB,SAAA,EACnBF,EAAAA,EAAAA,KAACuhB,GAAAA,EAAmB,CAAC1f,MAAO,CAAE6T,WAAY,SAAUvN,QAAS,IAAMjI,SAChE2iB,EAAO/B,UAEV9gB,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,UACzBF,EAAAA,EAAAA,KAAC4iB,GAAe,CAACC,OAAQA,EAAQxG,KAAMA,QALhBwG,EAAO/B,aALxB,aAiBhB,QAGPqhB,IACCniC,EAAAA,EAAAA,KAAC6jC,GAAAA,EAAc,CACb,kBAAgB,0CAChB1mC,GAAG,uBACH,aAAW,UACX2mC,qBAAmB,EACnBjiC,MAAO,CAAE6T,WAAY,UACrB,UAAS,mBAAmBxV,UAE5BF,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAAS6+B,EACT/+B,SAAU6F,GAAAA,GAAiBC,MAC3B3I,aAAc8b,EACdlb,UAAQ,EACRkI,SAAS,iBA5IA+C,EAiJJ,GAGnB,CACE2sB,EACA7O,EACA8L,EACAqM,EACAC,EACAzB,EACAsC,EACAZ,EACAC,EACAC,EACAW,EACAjB,EACAnB,GAGN,CA/Q4B+C,CACxB7B,EACAnJ,EACA7O,EACAmP,EACAE,EACA4I,EACAtB,EACA7K,GAGF,OACEh2B,EAAAA,EAAAA,KAACgkC,GAAAA,GAAQ,CAAC,aAAW,OAAOniC,MAAO,CAAEsmB,WAAY,EAAG1S,SAAU,OAAQG,SAAU,UAAW1V,SACxFwkB,GAAW3d,IAAIm8B,IAGtB,CCOA,MAAMe,GAAYvhC,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,aAuJrB,SAASwhC,GAA4BpnC,GAC1C,MAAM,GAAEK,EAAE,eAAEw4B,EAAc,YAAEtF,EAAW,MAAErjB,EAAK,UAAE+X,GAAcjoB,EAExDk5B,EACJl5B,EAAMk5B,iBAGAr0B,IAFNg0B,GAAgBnxB,MACblE,GAAW,cAAeA,GAAUA,EAAOE,YAAcnG,EAAoB2G,WAG5EmjC,GAAoBrnC,EAAMo3B,iBAC1BkQ,GAAmBtnC,EAAMs3B,iBAGxBN,EAAUuQ,IAAoB3oC,EAAAA,EAAAA,WAA4B,KAE/D,OADcoB,EAAMK,GAAK+S,aAAaC,QAAQrT,EAAMK,GAAK,cAAWwE,GAElE,IAAK,QACH,OAAO0gB,GAAmBuS,MAC5B,IAAK,OACH,OAAOvS,GAAmBmS,KAC5B,IAAK,QACH,OAAOnS,GAAmBiS,MAE9B,OACEx3B,EAAMwnC,mBACLH,EACG9hB,GAAmBuS,MACnBwP,EACE/hB,GAAmBmS,KACnBnS,GAAmBiS,MAAM,IAG7BP,GAAcj4B,EAAAA,EAAAA,cACjBg4B,IACCuQ,EAAiBvQ,GACbh3B,EAAMK,IACR+S,aAAac,QAAQlU,EAAMK,GAAK,QAAS22B,EAC3C,GAEF,CAACh3B,EAAMK,MAGH,qBAAEonC,EAAoB,eAAEC,GC/PzB,SACLrnC,EACA+kC,EACAhO,EACAE,EACAD,GAEA,MAAM,EAAEjtB,IAAMC,EAAAA,EAAAA,MACR0Q,GAAUxT,EAAAA,EAAAA,UAAQ,KACtB,MAAMwT,EAGA,CAAC,CAAEiJ,OAAQ5Z,EAAE,QAAS4b,KAAOD,GAA4BA,EAAO/B,SAoKtE,OAlKKoT,GACHrc,EAAQ9T,KAAK,CACX+c,OAAQ5Z,EAAE,SACV4b,KAAMA,CAACD,EAAyB4hB,KAC9BzkC,EAAAA,EAAAA,KAAC4sB,GAAgB,CACflyB,MAAOmoB,EAAOM,OAAS,GACvBrd,SAAWpL,IACT,OAAQA,GACN,IAAK,GACH+pC,EAAU,IAAK5hB,EAAQM,WAAOxhB,IAC9B,MACF,KAAK2gB,GAAkB1G,YACvB,KAAK0G,GAAkBc,SACvB,KAAKd,GAAkBW,OACrBwhB,EAAU,IAAK5hB,EAAQM,MAAOzoB,IAElC,EAEF0rB,YAAalf,EAAE,UACfmf,QAAS,CACP,CACE3rB,MAAO,GACP4C,MAAO4J,EAAE,UACT0U,YAAa1U,EAAE,kCAEjB,CACExM,MAAO4nB,GAAkB1G,YACzBte,MAAO4J,EAAE,eACT0U,YAAa1U,EACX,2EAGJ,CACExM,MAAO4nB,GAAkBc,SACzB9lB,MAAO4J,EAAE,YACT0U,YAAa1U,EAAE,2DAEjB,CACExM,MAAO4nB,GAAkBW,OACzB3lB,MAAO4J,EAAE,UACT0U,YAAa1U,EAAE,sBAGnB8lB,YAAU,MAMboH,GACHvc,EAAQ9T,KAAK,CACX+c,OAAQ5Z,EAAE,QACV4b,KAAMA,CAACD,EAAyB4hB,KAC9BzkC,EAAAA,EAAAA,KAAC4sB,GAAgB,CACflyB,MAAOmoB,EAAOwgB,MAAQ,GACtBv9B,SAAWpL,IACT,OAAQA,GACN,IAAK,GACH+pC,EAAU,IAAK5hB,EAAQwgB,UAAM1hC,IAC7B,MACF,IAAK,OACL,IAAK,WACL,IAAK,cACL,IAAK,UACL,IAAK,YACL,IAAK,SACH8iC,EAAU,IAAK5hB,EAAQwgB,KAAM3oC,IAEjC,EAEF2rB,QAAS,CACP,CACE3rB,MAAO,OACP4C,MAAO4J,EAAE,QACT0U,YAAa1U,EAAE,kDAEjB,CACExM,MAAO,WACP4C,MAAO4J,EAAE,YACT0U,YAAa1U,EAAE,gEAEjB,CACExM,MAAO,cACP4C,MAAO4J,EAAE,eACT0U,YAAa1U,EAAE,kDAEjB,CACExM,MAAO,UACP4C,MAAO4J,EAAE,aACT0U,YAAa1U,EAAE,kDAEjB,CACExM,MAAO,YACP4C,MAAO4J,EAAE,cACT0U,YAAa1U,EAAE,mDAEjB,CACExM,MAAO,SACP4C,MAAO4J,EAAE,UACT0U,YAAa1U,EAAE,kCAGnBkf,YAAalf,EAAE,aACf8lB,YAAU,MAMbmH,GACHtc,EAAQ9T,KAAK,CACX+c,OAAQ5Z,EAAE,QACV4b,KAAMA,CAACD,EAAyB4hB,KAC9BzkC,EAAAA,EAAAA,KAAC4sB,GAAgB,CACflyB,MAAOmoB,EAAOie,MAAQ,GACtBh7B,SAAWpL,IACT,OAAQA,GACN,IAAK,GACH+pC,EAAU,IAAK5hB,EAAQie,UAAMn/B,IAC7B,MACF,IAAK,OACL,IAAK,WACL,IAAK,cACL,IAAK,SACH8iC,EAAU,IAAK5hB,EAAQie,KAAMpmC,IAEjC,EAEF0rB,YAAalf,EAAE,UACfmf,QAAS,CACP,CACE3rB,MAAO,OACP4C,MAAO4J,EAAE,QACT0U,YAAa1U,EAAE,6CAEjB,CACExM,MAAO,WACP4C,MAAO4J,EAAE,YACT0U,YAAa1U,EAAE,gEAEjB,CACExM,MAAO,cACP4C,MAAO4J,EAAE,eACT0U,YAAa1U,EAAE,6CAEjB,CACExM,MAAO,GACP4C,MAAO4J,EAAE,UACT0U,YAAa1U,EAAE,oDAEjB,CACExM,MAAO,SACP4C,MAAO4J,EAAE,UACT0U,YAAa1U,EAAE,kCAGnB8lB,YAAU,MAMXnV,CAAO,GACb,CAACsc,EAAiBC,EAAiBF,EAAkBhtB,IAElDw9B,GAAa5oC,EAAAA,EAAAA,cAAY,CAAC+mB,EAAyB3C,KACnC,iBAATA,GAA8B,OAATA,IAC1B,UAAWA,GAA8B,iBAAfA,EAAKiD,MACjCN,EAAOM,MAAQjD,EAAKiD,MAEpBN,EAAOM,WAAQxhB,EAEb,SAAUue,GAA6B,iBAAdA,EAAKmjB,KAChCxgB,EAAOwgB,KAAOnjB,EAAKmjB,KAQnBxgB,EAAOwgB,UAAO1hC,EAEZ,SAAUue,GAA6B,iBAAdA,EAAK4gB,KAChCje,EAAOie,KAAO5gB,EAAK4gB,KAEnBje,EAAOie,UAAOn/B,EAElB,GACC,IAEGgjC,GAAa7oC,EAAAA,EAAAA,cAAa+mB,IAC9B,MAAM,MAAEM,EAAK,KAAEkgB,EAAI,KAAEvC,GAASje,EAC9B,MAAO,CAAEM,QAAOkgB,OAAMvC,OAAM,GAC3B,KAEKnC,gBAAiB4F,EAAsBzF,aAAc0F,GAAmB1G,GAE9E,CACA3gC,GAAIA,EACJE,MAAO6J,EAAE,kBACT0U,YAAa1U,EAAE,uDACf4xB,MAAOoJ,EACPnJ,MAAQ6L,GAAgBA,EAAYznC,IAAMynC,EAAY9jB,OACtDjJ,UACAmmB,OAAQ0G,EACR3G,OAAQ4G,EACRtF,eAAe,IAGjB,MAAO,CACLkF,uBACAC,iBAEJ,CD2BmDK,EAC9C1nC,GAAM,IAAM,WACbL,EAAMolC,aACNpO,IAAazR,GAAmBuS,MAChCd,IAAazR,GAAmBmS,KAChCV,IAAazR,GAAmBiS,OAG5BrB,GhBzINiP,EgByIyDplC,EAAMolC,chBvI3C79B,EAAAA,EAAAA,UAAQ,KAC1B,MAAM4uB,EAAqC,GAC3C,IAAK,MAAMpQ,KAAUqf,EACnB,GAAIrf,EAAOzjB,KAAM,CACf,GAAIyjB,EAAOiiB,YAAa,CAEtB7R,EAAYlvB,KAAK,CACfzG,MAAOulB,EAAO/B,OACdpmB,MAAOmoB,EAAOzjB,KACdqE,KAAM,OACNmwB,iBAAkB/Q,EAAOkiB,uBAE3B,QACF,CAEA,OAAQliB,EAAOpf,MACb,IAAK,QACHwvB,EAAYlvB,KAAK,CACfzG,MAAOulB,EAAO/B,OACdpmB,MAAOmoB,EAAOzjB,KACdqE,KAAM,SACNmwB,iBAAkB/Q,EAAOkiB,uBAE3B,MACF,IAAK,OACH9R,EAAYlvB,KAAK,CACfzG,MAAOulB,EAAO/B,OACdpmB,MAAOmoB,EAAOzjB,KACdqE,KAAM,OACNmwB,iBAAkB/Q,EAAOkiB,uBAE3B,MACF,QACE9R,EAAYlvB,KAAK,CACfzG,MAAOulB,EAAO/B,OACdpmB,MAAOmoB,EAAOzjB,KACdw0B,iBAAkB/Q,EAAOkiB,uBAIjC,CAEF,OAAO9R,CAAW,GACjB,CAACiP,KA9CC,IACLA,EgBszBqB8C,EA5qBrB,GAAIh4B,EACF,OAAOhN,EAAAA,EAAAA,KAAC22B,GAAe,CAACC,UAAW95B,EAAMmoC,gBAAiB53B,QAASL,EAAMK,UAG3E,GAAkB,IAAd0X,GAA6D,IAA1Clb,OAAO4f,KAAK4G,GAAe,CAAC,GAAG7sB,OACpD,OACExD,EAAAA,EAAAA,KAAC63B,GAAgB,CACfx6B,MAAOP,EAAMooC,gBACbtpB,YAAa9e,EAAMqoC,sBACnBjiC,KAAMpG,EAAMsoC,qBACZ3sB,OACG3b,EAAMuoC,wBACLrlC,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACL,UACEzI,EAAMwoC,sBA8pBCN,EA7pBWloC,EAAMwoC,qBA8pB/BN,EAAE9nC,cAAcsK,MAAM,KAAKC,KAAK,MA7pBrB,kBAENpE,QAAQ,UACRsD,QAAS7J,EAAMuoC,sBACfniC,KAAMpG,EAAMyoC,qBAAuBzoC,EAAMyoC,qBAAuB,KAAKrlC,SAEpEpD,EAAMwoC,wBAGVxoC,EAAM0oC,oBACLxlC,EAAAA,EAAAA,KAACmK,EAAAA,EAAI,CAACI,eAAgB,CAAEF,QAAS,wBAAyBnK,UACxDF,EAAAA,EAAAA,KAACmJ,GAAW,CAAC7F,QAASxG,EAAM0oC,wBAQxC,IAAIC,EAAa3oC,EAAM2oC,WAevB,OAdIA,IACFA,GACEzlC,EAAAA,EAAAA,KAACoY,GAAAA,GAAW,CACV/U,QAAQ,QACR8a,QAAS,CAAE9T,QAAS,aACpBxI,MAAO,CACL4V,aAAc,oDACdvX,SAEDpD,EAAM2oC,eAMXngC,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACk1B,GAAW,IACNp4B,EACJk3B,gBAAiBl3B,EAAMK,GAAKonC,OAAuB5iC,EACnDq0B,WAAYA,EACZlC,SAAUA,EACVC,YAAaA,EACbd,YAAaA,EACbpC,6BAA8B/zB,EAAM+zB,+BAErCiD,IAAazR,GAAmBuS,QAC/B50B,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SACGpD,EAAM4oC,kBACLpgC,EAAAA,EAAAA,MAACuR,GAAU,CAAA3W,SAAA,CACRulC,GACC3oC,EAAM6oC,YAAa3lC,EAAAA,EAAAA,KAAC4lC,GAAa,IAAK9oC,EAAOolC,aAAcsC,QAG/Dl/B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,CACGulC,GACC3oC,EAAM6oC,YAAa3lC,EAAAA,EAAAA,KAAC4lC,GAAa,IAAK9oC,EAAOolC,aAAcsC,SAKpE1Q,IAAazR,GAAmBmS,OAC/Bx0B,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SACGpD,EAAM4oC,kBACLpgC,EAAAA,EAAAA,MAACuR,GAAU,CAAA3W,SAAA,CACRulC,GACDzlC,EAAAA,EAAAA,KAACoY,GAAAA,GAAW,CAAC+F,QAAS,CAAE9T,QAAS,aAAcnK,UAC3CpD,EAAM6oC,YACN3lC,EAAAA,EAAAA,KAACijC,GAAa,IAAKnmC,EAAOk5B,WAAYA,EAAYkM,aAAcsC,UAKtEl/B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,CACGulC,GACDzlC,EAAAA,EAAAA,KAAC6W,GAAU,CAAA3W,UACTF,EAAAA,EAAAA,KAACoY,GAAAA,GAAW,CAAC+F,QAAS,CAAE9T,QAAS,aAAcnK,UAC3CpD,EAAM6oC,YACN3lC,EAAAA,EAAAA,KAACijC,GAAa,IACRnmC,EACJk5B,WAAYA,EACZkM,aAAcsC,aAS7B1Q,IAAazR,GAAmBiS,QAC/Bt0B,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SACGpD,EAAM4oC,kBACLpgC,EAAAA,EAAAA,MAACuR,GAAU,CAAA3W,SAAA,CACRulC,GACC3oC,EAAM6oC,YACN3lC,EAAAA,EAAAA,KAACiiC,GAAc,IAAKnlC,EAAOk5B,WAAYA,EAAYkM,aAAcsC,QAIrEl/B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,CACGulC,GACDzlC,EAAAA,EAAAA,KAAC6W,GAAU,CAAA3W,UACPpD,EAAM6oC,YACN3lC,EAAAA,EAAAA,KAACiiC,GAAc,IACTnlC,EACJk5B,WAAYA,EACZkM,aAAcsC,YAQ1B1nC,EAAMw5B,qBACJx5B,EAAMy5B,qBAAuBz5B,EAAMioB,WAAa,GAAKjoB,EAAMs4B,WAC3Dp1B,EAAAA,EAAAA,KAACu/B,GAAc,IAAKziC,EAAO+oC,WAAY/oC,EAAMy5B,uBAIvD,CAEA,SAASqP,GAAgC9oC,GACvC,MAAM,UACJ4nB,EAAS,WACT2U,EAAU,aACVE,EAAY,WACZrP,EAAU,iBACV4b,EAAgB,MAChB/M,EAAK,WACLoJ,EAAU,eACVxM,EAAc,UACd5Q,EAAS,gBACTnnB,EAAe,SACfkI,EAAQ,YACR8e,EAAW,cACXC,GACE/nB,EAEEolC,E7BvND,SAAkDrqB,GACvD,OAAOxT,EAAAA,EAAAA,UACL,IACEwT,EAAQ1Z,QAAQ0kB,GACVA,EAAOM,QAAUb,GAAkBW,QACnCJ,EAAOM,QAAUb,GAAkB1G,aACnCiH,EAAOM,QAAUb,GAAkBc,YAG3C,CAACvL,GAEL,C6B4MuBkuB,CAAuBjpC,EAAMolC,cAE5C8D,G7BtJgDnuB,E6BsJL/a,EAAMolC,c7BrJhD79B,EAAAA,EAAAA,UACL,IACEwT,EAAQ1Z,QAAQ0kB,GACVA,EAAOM,QAAUb,GAAkBW,QACnCJ,EAAOM,QAAUb,GAAkB1G,eAG3C,CAAC/D,KARE,IAAiDA,E6BuJtD,MAAMouB,E7B1ID,SAA8CpuB,GACnD,OAAOxT,EAAAA,EAAAA,UACL,IACEwT,EAAQ1Z,QAAQ0kB,GACVA,EAAOM,QAAUb,GAAkBW,QACnCJ,EAAOM,QAAUb,GAAkBc,YAG3C,CAACvL,GAEL,C6BgI6BquB,CAAmBppC,EAAMolC,cAC9CiE,GAAc9hC,EAAAA,EAAAA,UAAQ,KAC1B,MAAM+hC,EAAmD,GAEzD,GAAIJ,EAAmBxiC,OACrB,IAAK,MAAM++B,KAAqByD,EAC1B,UAAWzD,EACb6D,EAAqBriC,MAAMsY,IACzB,MAAM3hB,EAAQ6nC,EAAkB7nC,QAAQ2hB,GACxC,GAAI3hB,EACF,OAAOsF,EAAAA,EAAAA,KAAA,OAAAE,SAA6DxF,GAAnD6nC,EAAkBplC,IAAMolC,EAAkBzhB,OAC7D,IAGFslB,EAAqBriC,MAAMsY,GAASkmB,EAAkBzf,KAAKzG,KA6BjE,GAxBI4pB,EAAmBziC,QACrB4iC,EAAqBriC,MAAMsY,GACG4pB,EAAmBte,MAC5C9E,QAAoClhB,IAAzBkhB,EAAOnoB,QAAQ2hB,MAI3Brc,EAAAA,EAAAA,KAAC0hB,GAAW,CACVC,gBAAc,EACdI,gBAAgB,WAChBD,iBAAiB,WACjBrH,WAAS,EACT2H,eAAa,EAAAliB,UAEbF,EAAAA,EAAAA,KAACwjB,GAAsB,CAAmBnH,KAAMA,EAAMxE,QAASouB,GAAlClN,EAAM1c,MATN,OAejCvf,EAAMqpC,aACRC,EAAqBriC,KAAKjH,EAAMqpC,aAGE,IAAhCC,EAAqB5iC,OAUzB,OARwB6Y,GAIY,IAHP+pB,EACxBr/B,KAAKs/B,GAAOA,EAAGhqB,KACfle,QAAQ8D,GAAYA,UACAuB,OAAqB,MACrCxD,EAAAA,EAAAA,KAACgZ,GAAAA,EAAK,CAACnQ,WAAS,EAAA3I,SAAEkmC,EAAqBr/B,KAAKs/B,GAAOA,EAAGhqB,MAG1C,GACpB,CAAC2pB,EAAoBC,EAAoBlN,EAAOj8B,EAAMqpC,eAElDtlC,GAAgBV,IACjB61B,EACJl5B,EAAMk5B,iBAGAr0B,IAFNg0B,GAAgBnxB,MACblE,GAAW,cAAeA,GAAUA,EAAOE,YAAcnG,EAAoB2G,WAE5EslC,GAAetwB,EAAAA,EAAAA,QAAuB,OACrCuwB,EAAQC,IAAa9qC,EAAAA,EAAAA,UAKzB,CACD4iB,KAAM,EACNpV,MAAO,EACPkV,IAAK,EACLC,OAAQ,IAEJooB,GAAe3qC,EAAAA,EAAAA,cAAa6G,IAC3BA,GACL6jC,EAAU,CACRpoB,IAAKzb,EAAIyU,UACTiH,OAAQ1b,EAAI2U,aAAe3U,EAAI8T,aAAe9T,EAAIyU,UAClDkH,KAAM3b,EAAI+jC,WACVx9B,MAAOvG,EAAIgkC,YAAchkC,EAAI0T,YAAc1T,EAAI+jC,YAC/C,GACD,IACG/uB,GAAW7b,EAAAA,EAAAA,cACdgsB,GAAmC2e,EAAa3e,EAAMkU,gBACvD,CAACyK,KAEH/vB,EAAAA,GAAAA,GAAkB4vB,GAAc,IAAMG,EAAaH,EAAalwB,YAChEra,EAAAA,EAAAA,YAAU,IAAM0qC,EAAaH,EAAalwB,UAAU,CAACqwB,IAErD,MAAM32B,EAAWD,KAEjB,IAAI+2B,EA2FJ,OAzFEA,OADsBjlC,IAApB7E,EAAMioB,gBAAyCpjB,IAAd+iB,GACnB1kB,EAAAA,EAAAA,KAACs/B,GAAgB,KAG/Bh6B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEoF,EAAAA,EAAAA,MAACsvB,GAAAA,EAAK,CACJ,aAAW,eACXnsB,OAAO,eACPpF,QACEvG,EAAM0iC,SAA+C,YAAzB1vB,EAASY,YAArB,eAA6D/O,EAE/EklC,SAAU/pC,EAAMgqC,WAChBzK,eAAe,GACf0K,gBAAc,EACdrgC,UAAU,aAAYxG,SAAA,EAEtBF,EAAAA,EAAAA,KAACgnC,GAAS,IACJlqC,EACJk5B,WAAYA,EACZ0Q,WAAYH,EAAOjoB,KAAO,EAC1B2oB,YAAaV,EAAOr9B,MAAQ,EAC5Bg5B,aAAcA,EACdp8B,SAAUA,EACVqgC,YAAaA,KAEfnmC,EAAAA,EAAAA,KAAC28B,GAAAA,EAAK,CAAAz8B,SACHwkB,EAAU3d,KAAI,CAACsV,EAAMqhB,KACpB19B,EAAAA,EAAAA,KAACknC,GAAQ,CAEPrvB,QAASqqB,EACT7lB,KAAMA,EACN0kB,eAAgB7W,IAAa7N,GAC7BypB,iBAAkBA,EAClBzM,WAAYA,EACZE,aAAcA,EACd4I,WAAYA,EACZzE,SAAUA,EACV1H,WAAYA,EACZ0Q,WAAYH,EAAOjoB,KAAO,EAC1B2oB,YAAaV,EAAOr9B,MAAQ,EAC5B0b,YAAaA,EACb9e,SAAUA,EACVqgC,YAAaA,EACbgB,UAAWzJ,IAAahZ,EAAUlhB,OAAS,EAC3C4jC,qBAAsBtqC,EAAMsqC,qBAC5BviB,cAAeA,EACf/jB,cAAehE,EAAMgE,cACrBumC,oBAAqBvqC,EAAMuqC,qBAnBtBtO,EAAQA,EAAM1c,GAAQqhB,UAwBpB,IAAd3Y,IACCzf,EAAAA,EAAAA,MAACuxB,GAAAA,EAAU,CAACC,cAAY,EAAA52B,SAAA,EACtBF,EAAAA,EAAAA,KAAC+2B,GAAAA,EAAgB,CACfC,WAAWh3B,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SAAGW,EAAarC,iBAC3B0E,MAAMlD,EAAAA,EAAAA,KAACi3B,GAAAA,EAAc,CAAC/zB,KAAMpG,EAAMwqC,gBAAkBC,GAAAA,KACpDvsB,aAAa,QAEfhb,EAAAA,EAAAA,KAACm3B,GAAAA,EAAc,CAAAj3B,SAAEW,EAAapC,0BAC9BuB,EAAAA,EAAAA,KAACo3B,GAAAA,EAAgB,CAAAl3B,SACdtC,IACCoC,EAAAA,EAAAA,KAAC43B,GAAAA,EAAiB,CAAA13B,UAChBF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAAClC,QAAQ,UAAUsD,QAAS/I,EAAgBsC,SAChDW,EAAajD,4BAW3Bd,EAAM4oC,mBACTkB,GACE5mC,EAAAA,EAAAA,KAACikC,GAAS,CACRv9B,UAAU,+BACVD,IAAK6/B,EACL3uB,SAAUA,EACV9V,MAAO,CACL2D,gBAAiB,6CACjBtF,SAED0mC,KAKAA,CACT,CAEA,SAASI,GAA4BlqC,GAanC,MACEolC,aAAcrqB,EACdsqB,WAAYvB,EAAW,KACvBxhC,EAAI,QACJ0zB,EAAO,cACPC,EAAa,iBACbC,EAAgB,WAChBgD,EAAU,SACVlwB,EAAQ,YACRqgC,GACErpC,EAEE0qC,GAAgB1rC,EAAAA,EAAAA,cAGpB,CAAC4gC,EAAqB7Z,KACpB,GAAKA,EAAOzjB,KACZ,MAAO,CACLqoC,OAAQA,CAACjiB,EAAoBkiB,EAAsBC,KAC7C9kB,EAAOzjB,OACT0zB,IAAUjQ,EAAOzjB,MACjB4zB,IAAmB2U,GACrB,EAEFC,OAAQ,CACN5gC,MAAO6b,EAAOzjB,OAASA,EAAOs9B,OAAc/6B,EAC5CkmC,UAAWhlB,EAAOzjB,OAASA,EAAO2zB,OAAgBpxB,EAClDiyB,iBAAkB/Q,EAAOkiB,sBAE3BrI,cACD,GAEH,CAAC5J,EAASE,EAAkB5zB,EAAM2zB,IAGpC,OACE/yB,EAAAA,EAAAA,KAACs8B,GAAAA,EAAK,CAAAp8B,UACJoF,EAAAA,EAAAA,MAACi3B,GAAAA,GAAE,CAAC71B,UAAU,aAAYxG,SAAA,CACvBimC,IAAenmC,EAAAA,EAAAA,KAACw8B,GAAAA,GAAE,CAAC36B,MAAO,CAAEsc,QAAS,GAAKzX,UAAU,gBACnDsvB,GAAclwB,KACd9F,EAAAA,EAAAA,KAACw8B,GAAAA,GAAE,CACDsL,gBAAc,EACdC,eAAe,MACfC,eAAgBlrC,EAAM4pC,WACtB,UAAS,2BACThgC,UAAW5J,EAAM4pC,WAAa,eAAiB,aAAaxmC,SAC7D,MAIF2X,EAAQ9Q,KAAI,CAAC8b,EAAQ7b,KAElBhH,EAAAA,EAAAA,KAACw8B,GAAAA,GAAE,CAEDp9B,KAAMooC,EAAcxgC,EAAO6b,GAC3BolB,SAAS,SACTpmC,MAAO,CACL8N,SACsB,IAApBkT,EAAOlT,SACH,UACoBhO,IAApBkhB,EAAOlT,SACLkT,EAAOlT,cACPhO,EACR8T,cAA8B9T,IAApBkhB,EAAOpN,SAAyBoN,EAAOpN,cAAW9T,EAC5DwU,MAAO0M,EAAOvB,UAAY,YAAS3f,GAErC,UAAS1E,EAAM4lB,EAAO/B,OAAS,kBAC/Bpa,UAAU,aAAYxG,SAErB2iB,EAAO/B,QAhBH+B,EAAO/B,eAoBDnf,IAAhBi/B,IACC5gC,EAAAA,EAAAA,KAAC49B,GAAAA,GAAE,CACDsK,cAAY,EACZJ,gBAAc,EACdC,eAAe,MACflmC,MAAO,CACLqH,MAAO,EACPiV,QAAS,EACTvW,aAAc,EACdie,OAAQ,KAEVnf,UAAW5J,EAAMmqC,YAAc,gCAAkC,aACjE,UAAS,uBAAuB/mC,SACjC,UAOX,CAEA,SAASgnC,GAA2BpqC,GAqBlC,MAAM,QACJ+a,EAAO,YACP+M,EAAW,WACXyU,EAAU,aACVE,EAAY,eACZwH,EAAc,iBACd+E,EAAgB,KAChBzpB,EAAI,WACJ8lB,EAAU,SACVzE,EAAQ,WACR1H,EAAU,SACVlwB,EAAQ,YACRqgC,EAAW,qBACXiB,EAAoB,cACpBviB,EAAa,cACb/jB,GACEhE,EACEqrC,EAAqBhC,IAAc9pB,IAClC+G,EAAUglB,IAAe1sC,EAAAA,EAAAA,YAAWoB,EAAMuqC,uBAAyBc,GACpEr4B,EAAWD,KACXw4B,GAAavsC,EAAAA,EAAAA,cAChBugB,GACKvb,GAAe0C,SAAWqhB,IAEpB/jB,GAAeyH,SAAS8T,IAIpC,CAACwI,EAAe/jB,IAGlB,OACEwE,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEoF,EAAAA,EAAAA,MAACi3B,GAAAA,GAAE,CACD16B,MAAO,CACL49B,UAAW,QACXhoB,aAAc2L,GAAatmB,EAAMqqC,WAAaC,EAAwB,aAAUzlC,EAChFwrB,OAAQrnB,EAAW,UAAY,WAEjC,YACE,OAAQuW,IAA4B,iBAAZA,EAAKlf,IAAsC,iBAAZkf,EAAKlf,GAExD,OAAOugC,IADP,UAAUrhB,EAAKlf,GAAGqhB,aAGxB9X,UAAWq6B,EAAiB,gBAAap/B,EACzCgF,QAASA,KACFb,IACAggC,GACHlhB,MAEEkhB,GAAoB/E,EACtBxH,IAAeld,GAEfgd,IAAahd,GAEfvW,EAASuW,GAAK,EACdnc,SAAA,CAEDimC,IACCnmC,EAAAA,EAAAA,KAAC49B,GAAAA,GAAE,CACD0K,OACEH,EACI,CACEzK,WACA92B,WAAYwc,EACZ7gB,SAAUA,IAAM6lC,GAAahlB,IAAcA,UAE7CzhB,EAENE,MAAO,CAAE6D,YAAayiC,EAAqB,EAAI,GAC/C,UAAS,uBAGZnS,IACCh2B,EAAAA,EAAAA,KAACw8B,GAAAA,GAAE,CACDC,YACqB96B,IAAnBo/B,EACI,CACEj7B,SAAUA,CAAC0f,EAAQ+iB,KACbA,EACFlP,IAAahd,GAEbkd,IAAeld,EACjB,EAEF6N,WAAY6W,EACZhgC,cAAY8jB,IAAiB/jB,IAAgBunC,EAAWhsB,SAE1D1a,EAENmmC,eAAgBhrC,EAAM4pC,WACtBqB,eAAe,MACfC,eAAgBlrC,EAAM4pC,WACtB,UAAS,uBACThgC,UAAW5J,EAAM4pC,WAAa,kBAAe/kC,IAGhDmE,IACC9F,EAAAA,EAAAA,KAAC49B,GAAAA,GAAE,CACDnB,OAAQ,CACNiB,WACAxT,WAAY6W,IAAkB,EAC9B19B,QAASyiC,EAAmB,WAAa,QACzC/kC,cAAY8jB,IAAiB/jB,IAAgBunC,EAAWhsB,IAE1DyrB,eAAgBhrC,EAAM4pC,WACtBqB,eAAe,MACfC,eAAgBlrC,EAAM4pC,WACtB,UAAS,uBACThgC,UAAW5J,EAAM4pC,WAAa,kBAAe/kC,KAGjD3B,EAAAA,EAAAA,KAACwoC,GAAU,CACT3wB,QAASA,EACTwE,KAAMA,EACN8lB,WAAYA,EACZuE,WAAY5pC,EAAM4pC,WAClBO,YAAanqC,EAAMmqC,iBAGtBd,GAAe/iB,GAAY+kB,IAC1B7iC,EAAAA,EAAAA,MAACi3B,GAAAA,GAAE,CACD31B,WAAYwc,EACZvhB,MAAO,CAAE49B,UAAW,SACpB/4B,UAAWq6B,EAAiB,gBAAap/B,EAAUzB,SAAA,EAEnDF,EAAAA,EAAAA,KAAC49B,GAAAA,GAAE,IACF5H,IACCh2B,EAAAA,EAAAA,KAACw8B,GAAAA,GAAE,CACDsL,eAAgBhrC,EAAM4pC,WACtBqB,eAAe,MACfC,eAAgBlrC,EAAM4pC,WACtBhgC,UAAW5J,EAAM4pC,WAAa,kBAAe/kC,IAGhDmE,IAAY9F,EAAAA,EAAAA,KAAC49B,GAAAA,GAAE,CAACkK,gBAAc,EAACC,eAAe,MAAMC,eAAgBlrC,EAAM4pC,cAC3E1mC,EAAAA,EAAAA,KAAC49B,GAAAA,GAAE,CACDlkB,QAAS7B,EAAQrU,OACjB3B,MAAO,CAAE8c,cAAwC,YAAzB7O,EAASY,YAA4B,GAAK,GAAImL,WAAY,GAAI3b,UAEtFF,EAAAA,EAAAA,KAACyoC,GAAAA,EAAc,CAAAvoC,SAAEioC,WAEHxmC,IAAfwgC,GAA4BA,EAAW3+B,OAAS,IAC/CxD,EAAAA,EAAAA,KAAC49B,GAAAA,GAAE,CACDsK,cAAY,EACZJ,eAAgBhrC,EAAMmqC,YACtBc,eAAe,MACflmC,MAAO,CAAEqH,MAAO,EAAGiV,QAAS,EAAGvW,aAAc,GAC7ClB,UAAW5J,EAAMmqC,YAAc,mCAAgCtlC,EAAUzB,SAC1E,WAQb,CAEA,SAASsoC,GAA6B1rC,GAOpC,MAAM,QAAE+a,EAAO,KAAEwE,EAAI,WAAE8lB,GAAerlC,GAC/B4rC,EAAiBC,IAAsBjtC,EAAAA,EAAAA,WAAS,GAEvD,OACE4J,EAAAA,EAAAA,MAAChE,EAAAA,SAAQ,CAAApB,SAAA,CACN2X,EAAQ9Q,KAAK8b,IAEV7iB,EAAAA,EAAAA,KAAC49B,GAAAA,GAAE,CAEDgL,UAAW/lB,EAAO/B,OAClBmnB,SAAS,SACTpmC,MAAO,CAAEsU,MAA2B,IAApB0M,EAAOlT,SAAiB,UAAOhO,GAC/C,UAAS1E,EAAM4lB,EAAO/B,OAAS,gBAAgB5gB,UAE/CF,EAAAA,EAAAA,KAAC4iB,GAAe,CAACvG,KAAMA,EAAMwG,OAAQA,KANhCA,EAAO/B,eAUFnf,IAAfwgC,GAA4BA,EAAW3+B,OAAS,IAC/CxD,EAAAA,EAAAA,KAAC49B,GAAAA,GAAE,CACDsK,cAAY,EACZJ,eAAgBhrC,EAAMmqC,YACtBc,eAAe,MACflmC,MAAO,CACLqH,MAAO,EACPiV,QAAS,EACTvW,aAAc,EACdie,OAAQ6iB,EAAkB,SAAM/mC,GAElC,UAAS,sBACT+E,UAAW5J,EAAMmqC,YAAc,mCAAgCtlC,EAAUzB,UAEzEF,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAAS6+B,EACT5hC,aAAc8b,EACdjZ,SAAU6F,GAAAA,GAAiBC,MAC3B/H,UAAQ,EACRgC,OAAQwlC,QAMpB,CEt7BO,SAASE,KACd,MAAMC,GAAqB9yB,EAAAA,EAAAA,QAAO,IAAIsV,iBAKtC,OAJAvvB,EAAAA,EAAAA,YAAU,KACR,MAAMsvB,EAAkByd,EAAmB1yB,QAC3C,MAAO,IAAMiV,EAAgBD,OAAO,GACnC,IACI0d,EAAmB1yB,OAC5B,CC2EO,SAAS2yB,GAAmCjsC,GACjD,MAAM,MACJO,EAAK,MACLy7B,EAAK,MACLC,EAAK,cACLiQ,EAAa,SACbC,EAAQ,WACRC,EAAU,QACV38B,EAAO,eACPvN,EAAc,SACdsI,EAAQ,aACR6hC,EAAenlB,GAAmB,YAClCpI,GACE9e,GACE,EAAEoK,IAAMC,EAAAA,EAAAA,OACPtG,GAAgBV,KAChBipC,EAAcC,IAAiB3tC,EAAAA,EAAAA,WAAS,IACxC4tC,EAAYC,IAAe7tC,EAAAA,EAAAA,WAAS,IACpC8tC,EAAUC,IAAe/tC,EAAAA,EAAAA,UAAS,IAClCsR,EAAO08B,IAAYhuC,EAAAA,EAAAA,UAAS,KAC5BiuC,EAAUC,IAAeluC,EAAAA,EAAAA,YAC1B2vB,EAAkBwd,MACjB/7B,EAAG8rB,GAAaD,KAEjBkR,GAAkB/tC,EAAAA,EAAAA,cAAY,KAClCytC,GAAY,GACZle,EAAgBD,QAChBie,GAAc,GACdO,GAAaD,IACX,MAAMG,EAAc,IAAKH,GACzB,IAAK,MAAMttB,KAAQyc,EAAO,CACxB,MAAM1sB,EAAM2sB,EAAM1c,QACO1a,IAArBmoC,EAAY19B,KACd09B,EAAY19B,GAAOlF,EAAE,aAEzB,CACA,OAAO4iC,CAAW,GAClB,GACD,CAACze,EAAiByN,EAAOC,EAAO7xB,IAE7B6iC,GAAiBjuC,EAAAA,EAAAA,cAAY,KACjC88B,OAAUj3B,GACV4K,IACE+8B,EAAa,WAAat8B,EAAQ,WAAa,UAC/C8rB,EAAM36B,QAAQke,GAAqC,OAA5BstB,IAAW5Q,EAAM1c,MACxCyc,EAAM36B,QAAQke,GAAqC,OAA5BstB,IAAW5Q,EAAM1c,MACxCyc,EAAM36B,QAAQke,QAAqC1a,IAA5BgoC,IAAW5Q,EAAM1c,MACzC,GACA,CAACrP,EAAOs8B,EAAYxQ,EAAOC,EAAOxsB,EAASqsB,EAAW+Q,KAEzD5tC,EAAAA,EAAAA,YAAU,MACR2S,iBACE,MAAMs7B,GAAQC,EAAAA,GAAAA,GAAO,GACrB,IAAIT,EAAW,EACf,MAAMU,EAAuB,SACvBC,QAAQC,IACZtR,EAAM/xB,KAAKsV,GACT2tB,GAAMt7B,UACJ,GAAI2c,EAAgBI,OAAOE,QAAS,OACpC,MAAMvf,EAAM2sB,EAAM1c,GAClB,UACQ4sB,EAAS5sB,EAAMgP,EAAgBI,QAChCJ,EAAgBI,OAAOE,SAC1Bie,GAAaD,IAAQ,IAAYA,GAAY,CAAC,EAAI,CAACv9B,GAAM,SAE3D89B,EAAgBnmC,KAAKsY,EACvB,CAAE,MAAOvN,GACP,MAAM,cAAEqV,EAAa,YAAEC,GAAgB+kB,EAAar6B,GAC9Cu7B,EAAe,IAAIlmB,KAAkBC,EAAYjmB,QAAQmS,GAAMA,EAAEjD,WACvE,IAAKge,EAAgBI,OAAOE,QAAS,CACnC,GAAI7c,aAAewV,MAAO,CACxB,MAAMjX,EAC+B,iBAA5Bg9B,EAAa,GAAGh9B,SAAgD,IAAxBg9B,EAAa7mC,OACxD6mC,EAAa,GAAGh9B,QAChBnG,EAAE,iBACR0iC,GAAaD,IAAQ,IACfA,GAAY,CAAC,EACjB,CAACv9B,GAAMiB,KAEX,MACEu8B,GAAaD,IAAQ,IACfA,GAAY,CAAC,EACjB,CAACv9B,GAAMlF,EAAE,qBAGbwiC,EAAS7oC,EAAa3C,UACxB,CACF,CAAE,QACKmtB,EAAgBI,OAAOE,SAC1B8d,IAAcD,EAElB,QAIDne,EAAgBI,OAAOE,SAC1B0d,GAAc,GAEhBH,IAAagB,EACf,CACKI,EAAS,GACb,CACDjf,EACA4d,EACAnQ,EACAC,EACAmQ,EACAroC,EAAa3C,UACbgJ,EACAiiC,IAGF,MAAMoB,EAAa3Q,GAASd,GAEtB0R,EAAeznB,GAAuBimB,GAE5C,OACE1jC,EAAAA,EAAAA,MAACy5B,GAAAA,EAAK,CACJ0L,iBAAkBnjC,EAAW,eAAY3F,EACzCtE,MAAOA,EACPoL,OAAQpL,EACR,aAAYA,EACZue,YAAaA,EACbvY,QAAS27B,GAAAA,EAAaC,OACtBp5B,QAAM,EACN0G,QAASA,KACPs9B,IACAE,GAAgB,EAElBzmC,QACE8lC,EACI,EACEppC,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAAclC,QAAQ,OAAOsD,QAASkjC,EAAgB3pC,SAC1DW,EAAapD,YADJ,WAId,EACEuC,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAAalC,QAAQ,YAAYsD,QAASojC,EAAe7pC,SAC7DW,EAAa/C,WADJ,UAKpBqhC,kBAAgB,EAAAj/B,SAAA,EAEhBF,EAAAA,EAAAA,KAACo/B,GAAAA,EAAY,CAACv9B,MAAO,CAAE8c,cAAe,EAAGjZ,YAAa,EAAGkC,aAAc,GAAI1H,UACzEF,EAAAA,EAAAA,KAAA,OACE6B,MAAO,CACL0N,QAAS,OACTqP,cAAe,SACfpE,UAAW,IACX5E,SAAU,SACV4B,UAAW,oDACXtX,UAEFF,EAAAA,EAAAA,KAACkkC,GAAS,CAERxf,UAAW,IAAI6lB,EAAWzQ,OAC1B/U,UAAW+T,EAAMt1B,OACjB0+B,aAAc,IACTsI,EACH,CACE1pB,OAAQ5Z,EAAE,UACV4b,KAAOzG,IACL,MAAMjQ,EAAM2sB,EAAM1c,GACZquB,EAASf,IAAWv9B,GAC1B,YAAezK,IAAX+oC,GAEAplC,EAAAA,EAAAA,MAAA,QAAMzD,MAAO,CAAEvF,MAAOI,GAASwD,SAAA,EAC5BF,EAAAA,EAAAA,KAAC2qC,GAAAA,GAAW,IAAI,KAAQ9pC,EAAa/B,eAI7B,OAAX4rC,GAEAplC,EAAAA,EAAAA,MAAA,QAAMzD,MAAO,CAAEvF,MAAOC,GAAY2D,SAAA,EAC/BF,EAAAA,EAAAA,KAAC4qC,GAAAA,GAAe,IAAI,KAAQ/pC,EAAatB,gBAK9C+F,EAAAA,EAAAA,MAAA,QAAMzD,MAAO,CAAEvF,MAAOE,GAAW0D,SAAA,EAC9BF,EAAAA,EAAAA,KAACk3B,GAAAA,GAAqB,IAAI,KAAQyS,IAAWv9B,KACzC,IAKf2sB,MAAOA,EAEPyG,SAAO,EACPyF,gBAAgB,GAChBC,gBAAiBh+B,EAAE,YACnBqvB,oBAAoB,EACpBsU,oBAAkB,KACdN,GAvCA,eA2CVvqC,EAAAA,EAAAA,KAACo/B,GAAAA,EAAY,CAACv9B,MAAO,CAAEga,WAAY,GAAI3b,UACrCF,EAAAA,EAAAA,KAAC8qC,GAAAA,EAAQ,CACP,UAAQ,WACRpwC,MAAQ8uC,EAAW1Q,EAAMt1B,OAAU,IACnCnG,MACEguB,EAAgBI,OAAOE,QACnB9qB,EAAanD,aACbsP,EACEnM,EAAa3C,UACZkrC,EAECpqC,GAAkB6B,EAAa7B,eAD/B6B,EAAatB,YAGvBhE,KAAMwvC,GAAAA,EAAa/vC,GACnBqI,QACE2J,GAASs8B,EACL0B,GAAAA,GAAgB1iC,OAChBkhC,IAAa1Q,EAAMt1B,OACjBwnC,GAAAA,GAAgBC,aAChBtpC,QAMlB,CAYO,SAASupC,GACdC,EAAoCnnB,IAEpC,MAAOlX,EAAG8rB,GAAaD,MAChB77B,EAAOsuC,IAAY1vC,EAAAA,EAAAA,YAuB1B,OAtBAK,EAAAA,EAAAA,YAAU,KACR,GAAIe,EAAO,CACT,MAAMuuC,EAAiBA,CACrBX,EACAR,EACAoB,EACAC,KAEAH,OAASzpC,GACT7E,EAAMyP,UAAUm+B,EAAQR,EAAiBoB,EAAaC,EAAc,EAEtE3S,GACE54B,EAAAA,EAAAA,KAAC+oC,GAAgB,IACXjsC,EACJqsC,aAAcrsC,EAAMqsC,cAAgBgC,EACpC5+B,QAAS8+B,IAGf,MACEzS,OAAUj3B,EACZ,GACC,CAAC7E,EAAO87B,EAAWuS,IACfC,CACT,C,gBC5TO,SAASI,GAAengC,EAA8Boc,GAC3D,YAAU9lB,IAAN0J,QAAyB1J,IAAN8lB,EAAwB,EAC3Cpc,QAAsC,EACtCoc,SACGpc,EAAIoc,GADgC,EACvBpc,EAAIoc,EAAI,EAAI,CAClC,CCbA,MAAMgkB,GAAe/oC,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,qBAAVH,CAAU,sIAOzBgpC,GAAgBhpC,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,qBAAVH,CAAU,mEAoDhC,SAASipC,GAAyC7uC,GAChD,MAAM,MACJO,EAAK,MACLy7B,EAAK,MACLC,EAAK,OACL6S,EAAM,aACNhqB,EAAY,oBACZiqB,EAAmB,oBACnBC,EAAmB,UACnBC,EAAS,QACTx/B,EAAO,YACPxO,EAAW,iBACXiuC,EAAgB,SAChB1kC,GACExK,GACGgQ,EAAG8rB,GAAaD,MAChB93B,GAAgBV,IACjB4pC,GAAiBjuC,EAAAA,EAAAA,cAAY,KACjC88B,OAAUj3B,GACV4K,KAAW,GACV,CAACA,EAASqsB,IAUP2R,EAAa3Q,IAPCv1B,EAAAA,EAAAA,UAAa,IAC3BynC,GAAuBhT,EAAMnR,KAAKmkB,GAC7BhT,EAAM15B,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeM,EAAoBG,GAAIH,EAAoBI,MAElFpT,GACN,CAACA,EAAOgT,MAGJK,EAAWC,IAAgB1wC,EAAAA,EAAAA,WAAUqC,GAKtCsuC,GAA4ChoC,EAAAA,EAAAA,UAA2B,IACvEynC,GAAuBhT,EAAMnR,KAAKmkB,GAC7B,CACL,CACEhrB,OAAQ,GACRgC,KAAOzG,GACLyvB,EAAoBzvB,IAClBrc,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CACNC,QAAS6pC,EAAoBzvB,GAC7Bna,QAAS4pC,EAAoBzvB,QAAQ1a,EAAY,SAASzB,UAE1DF,EAAAA,EAAAA,KAACoF,EAAAA,EAAI,CAACslC,OAAO,UAASxqC,UACpBF,EAAAA,EAAAA,KAACssC,GAAAA,GAAuB,QAG1B,SAELT,GAGAA,GACN,CAACA,EAAqBC,EAAqBhT,IAExCyT,GAAkBloC,EAAAA,EAAAA,UAAa,IAC/BynC,EACKhT,EAAM36B,QAAQke,IAAUyvB,EAAoBzvB,KAE9Cyc,GACN,CAACgT,EAAqBhT,IAEnB0R,EAAeznB,GAAuBspB,GAE5C,OACErsC,EAAAA,EAAAA,KAAC++B,GAAAA,EAAK,CACJ0L,iBAAkBnjC,EAAW,eAAY3F,EACzCtE,MAAOA,EACP,aAAYA,EACZoL,OAAQpL,EACRue,YAAagwB,EACbvoC,QAAS27B,GAAAA,EAAaC,OACtBp5B,QAAM,EACN0G,QAASw9B,EACTzmC,QAAS,EACPtD,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLpI,GAAG,SAEHsL,OAAO,SACPpF,QAASiE,EAAW,SAAW,UAC/BX,QAASA,KACPojC,IACAgC,GAAW,EAEbtmC,gBAAiB0mC,EAAUjsC,SAE1B8rC,GATG,WAWNhsC,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAACpI,GAAG,SAAsBkG,QAAQ,OAAOsD,QAAS4F,EAAQrM,SAC9DW,EAAapD,YADQ,WAI1B0hC,kBAAgB,EAAAj/B,SAEf44B,EAAMt1B,OAAS,IACd8B,EAAAA,EAAAA,MAAC85B,GAAAA,EAAY,CAACv9B,MAAO,CAAE6D,YAAa,EAAGkC,aAAc,GAAI1H,SAAA,EACvDoF,EAAAA,EAAAA,MAACmmC,GAAY,CAAAvrC,SAAA,CACV0hB,GACCA,EAAape,OAAS,GACtBoe,EAAa7a,KAAI,CAACkb,EAAavU,KAC7B1N,EAAAA,EAAAA,KAACmM,GAAAA,EAAK,CACJ,UAAQ,gBACRiH,UAAQ,EACR/V,MAAO4kB,EACP5e,QAAQ,WACHqK,MAGX1N,EAAAA,EAAAA,KAACkkC,GAAS,CAERxf,UAAW6lB,EAAWzQ,MACtB/U,UAAW+T,EAAMt1B,OACjB0+B,aAAcsI,EACdzR,MAAOA,EAEPyG,SAAO,EACPyF,gBAAgB,QAChBC,gBAAgB,WAChB3O,oBAAoB,EACpBsU,oBAAkB,KACdN,GAXA,YAcPxsC,GAAewuC,EAAgB/oC,OAAS,IACvCxD,EAAAA,EAAAA,KAAC0rC,GAAa,CAAAxrC,UACZF,EAAAA,EAAAA,KAACqhC,GAAAA,EAAQ,CACPlkC,GAAG,UACHsL,OAAO,UACPnL,MAAOS,EACPwD,UAAW4qC,EACX7pC,SAAUA,CAACkjB,EAAQgnB,IAAQJ,EAAaI,WAQxD,CA2BO,SAASC,GACdtD,EAA6BnlB,IAE7B,MAAM0oB,EA5BR,WACE,MAAO5/B,EAAG8rB,GAAaD,MAChB77B,EAAOsuC,IAAY1vC,EAAAA,EAAAA,YAY1B,OAXAK,EAAAA,EAAAA,YAAU,KACR,GAAIe,EAAO,CACT,MAAMuuC,EAAiBA,KACrBD,OAASzpC,GACT7E,EAAMyP,WAAW,EAEnBqsB,GAAU54B,EAAAA,EAAAA,KAAC2rC,GAAsB,IAAQ7uC,EAAOyP,QAAS8+B,IAC3D,MACEzS,OAAUj3B,EACZ,GACC,CAAC7E,EAAO87B,IACJwS,CACT,CAaiCuB,GACzBC,EAAmB1B,KACzB,OAAOpvC,EAAAA,EAAAA,cAEHuqB,IAGA,MAAMwmB,EAAoB,IAAKxmB,EAAS8iB,gBAMxC,OALI9iB,EAAQylB,0BAAuDnqC,IAAhC0kB,EAAQylB,sBACzCe,EAAkB/T,MAAQzS,EAAQyS,MAAM36B,QACrCke,QAAyC1a,IAAhC0kB,EAAQylB,sBAAsCzlB,EAAQylB,oBAAoBzvB,MAGjFqwB,EAAuB,IACzBrmB,EACH0lB,UAAWA,IAAMa,EAAiBC,IAClC,GAEJ,CAACD,EAAkBF,EAAwBvD,GAE/C,CC7PO,SAASvf,GAAsC9sB,GACpD,MAAM,KAAEgwC,EAAI,aAAE5K,EAAY,eAAE9R,EAAc,cAAEvL,EAAa,sBAAEkoB,EAAqB,UAAEtyB,GAChF3d,GACK+D,GAAgBV,IAEvB,YAAuBwB,IAAnBmrC,EAAK/nB,gBAA0CpjB,IAAfmrC,EAAK9/B,OAChChN,EAAAA,EAAAA,KAACm2B,GAAAA,EAAQ,CAAC7f,OAAO,UAIxBhR,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEoF,EAAAA,EAAAA,MAACsD,GAAAA,EAAK,CAACC,WAAS,EAAA3I,SAAA,EACdF,EAAAA,EAAAA,KAACgS,GAAAA,EAAS,CAACnQ,MAAO,CAAE+hC,WAAY,OAAQluB,WAAY,UAAWxV,SAC5D6sC,GAAyBlsC,EAAa3B,eAExC4tC,EAAKhsC,cAAc0C,OAAS,GAC3BxD,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACR4sC,EAAKhsC,cAAciG,KAAI,CAACsV,EAAM3O,IACzBw0B,GAAgBA,EAAa1+B,OAAS,GAEtCxD,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAS9H,QAASA,IAAMugC,EAAKvT,aAAald,GAAMnc,UACpDF,EAAAA,EAAAA,KAAC4iB,GAAe,CACdvG,KAAMA,EACNwG,OACEqf,EAAa19B,MACVqe,GAA2B,SAAhBA,EAAOie,MAAmC,SAAhBje,EAAOwgB,QAC1CnB,EAAa,MANZx0B,IAYT1N,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,SAIX1E,EAAAA,EAAAA,KAACgS,GAAAA,EAAS,CAACnQ,MAAO,CAAEmrC,UAAW,UAAW9sC,SAAEW,EAAajC,uBAG7DoB,EAAAA,EAAAA,KAACkkC,GAAS,CACRhC,aAAcA,EACd9R,eAAgBA,KACZ0c,EACJ5H,gBAAiBpoC,EAAMooC,iBAAmBrkC,EAAatC,aACvD0mC,gBAAiBnoC,EAAMmoC,iBAAmBpkC,EAAa3C,UACvD83B,YAAU,EACV7B,iBAAe,EACfC,iBAAe,EACfoL,QAAS/kB,EACTowB,oBAAkB,EAClBhmB,cAAeA,MAIvB,CChDO,SAASooB,GAAoCnwC,GAClD,MAAM,MACJO,EAAK,YACLue,EAAW,KACXkxB,EAAI,aACJ5K,EAAY,eACZ9R,EAAc,gBACd8U,EAAe,gBACfD,EAAe,YACflnC,EAAW,WACXN,EAAU,SACVqI,EAAQ,cACR+e,EAAa,oBACbqoB,GACEpwC,GACGgQ,EAAG8rB,GAAaD,KACvB,IAAIpsB,GAAUzQ,EAAAA,EAAAA,cAAY,IAAM88B,OAAUj3B,IAAY,CAACi3B,IACnD97B,EAAMyP,UACRA,EAAUzP,EAAMyP,SAElB,MAAO1L,GAAgBV,IACjBqqC,EAAeznB,GAAuBmf,GAC5C,OACEliC,EAAAA,EAAAA,KAAC++B,GAAAA,EAAK,CACJ1hC,MAAOA,EACP,aAAYA,EACZoL,OAAQpL,EACRue,YAAaA,EACb/V,QAAM,EACN0G,QAASA,EACTlJ,QAAS27B,GAAAA,EAAaC,OACtB1P,SAAU,EACVjsB,QAAS,EACPtD,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAELlC,QAAQ,UACRlG,GAAG,SACHwJ,QAASA,KACP4F,IACAzG,EAASgnC,EAAKhsC,cAAc,EAE9B2E,eAA8C,IAA9BqnC,EAAKhsC,cAAc0C,SAAiB0pC,EAAoBhtC,SAEvEnC,GAAe8C,EAAa9C,aATzB,WAWNiC,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAACpI,GAAG,SAAsBkG,QAAQ,OAAOsD,QAAS4F,EAAQrM,SAC9DzC,GAAcoD,EAAapD,YADN,WAI1B0hC,kBAAgB,EAAAj/B,UAEhBF,EAAAA,EAAAA,KAACo/B,GAAAA,EAAY,CAACv9B,MAAO,CAAE+T,SAAU,UAAW1V,UAC1CF,EAAAA,EAAAA,KAAC4pB,GAAmB,CAClBkjB,KAAMA,EACN5K,aAAcsI,EACdpa,eAAgBA,EAChB8U,gBAAiBA,EACjBD,gBAAiBA,EACjBpgB,cAAeA,EACfpK,WAAS,OAKnB,CC7EO,SAAS0yB,KACd,MAAM,EAAEjmC,IAAMC,EAAAA,EAAAA,MACRiO,GAAWC,EAAAA,GAAAA,MACjB,OACE/P,EAAAA,EAAAA,MAACuxB,GAAAA,EAAU,CAACC,cAAY,EAAA52B,SAAA,EACtBF,EAAAA,EAAAA,KAAC+2B,GAAAA,EAAgB,CACfC,WAAWh3B,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SAAGgH,EAAE,oBAChBhE,MAAMlD,EAAAA,EAAAA,KAACi3B,GAAAA,EAAc,CAAC/zB,KAAMg0B,GAAAA,KAC5Blc,aAAa,QAEfhb,EAAAA,EAAAA,KAACm3B,GAAAA,EAAc,CAAAj3B,SAAEgH,EAAE,mCACnBlH,EAAAA,EAAAA,KAACo3B,GAAAA,EAAgB,CAAAl3B,UACfF,EAAAA,EAAAA,KAAC43B,GAAAA,EAAiB,CAAA13B,UAChBoF,EAAAA,EAAAA,MAAC0T,GAAAA,EAAK,CAACnQ,WAAS,EAAA3I,SAAA,EACdF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAACoB,QAASA,IAAMyO,GAAU,GAAGlV,SAAEgH,EAAE,8BACxClH,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAAC0C,UAAYnL,IAAUkD,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CAACC,GAAG,OAAQhL,IAAUoD,SACtDgH,EAAE,kCAOjB,CCrBA,MAAMkmC,GAA4CA,EAAGpgC,WAC9B,iBAAVA,EACF,KAGLiM,MAAMC,QAAQlM,IAAUA,EAAMxJ,OAAS,GAEvCxD,EAAAA,EAAAA,KAAA,MAAAE,SACG8M,EAAMjG,KAAI,CAAC+H,EAAK9H,KACfhH,EAAAA,EAAAA,KAAA,MAAAE,SAAiB4O,GAAR9H,OAMbqmC,EAAAA,eAAqBrgC,IAChBhN,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SAAG8M,IAGL,KAGF,SAASsgC,IAAW,MAAEtgC,EAAK,KAAEugC,EAAI,SAAEC,IACxC,MAAM,EAAEtmC,IAAMC,EAAAA,EAAAA,MAEd,IAAK6F,EACH,OAAO,KAGT,MACMygC,EAAex0B,MAAMC,QAAQlM,IAAUA,EAAMxJ,OAAS,EACtD3B,EAAQ0rC,GAAQC,EAAW,CAAE9nC,YAFf,aAE+B/D,EAc7CtE,EAXiB,iBAAV2P,EACFA,EAGLiM,MAAMC,QAAQlM,IAAUA,EAAMxJ,OAAS,EAClCwJ,EAAMxJ,OAAS,EAAI0D,EAAE,UAAYwmC,OAAO1gC,EAAM,IAGhD9F,EAAE,SAKX,OACElH,EAAAA,EAAAA,KAACmM,GAAAA,EAAK,CAAC9I,QAAQ,SAAShG,MAAOA,EAAO+V,UAAQ,EAACvR,MAAOA,EAAO4rC,aAAcA,EAAavtC,UACtFF,EAAAA,EAAAA,KAACotC,GAAY,CAACpgC,MAAOA,KAG3B,C,oDChEO,SAAS2gC,GAAqB7wC,GACnC,MAAM,aAAE8wC,EAAY,OAAEC,IAAWC,EAAAA,GAAAA,OAC3B,YAAEC,IAAgBC,EAAAA,GAAAA,MAElBC,EAAYJ,GAAUhkC,OAAO4f,KAAKokB,GAAQrqC,OAAS,EACzD,OAGExD,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLoB,QAASA,KACHsnC,GACFF,GACF,EAEF,UAAS,SACTtqC,KAAK,SACL1C,WAAY6sC,EACZxkB,UAAWwkB,EACXtmC,SAAU2mC,EACV5qC,QAAS4qC,EAAY,iBAActsC,EACnCE,MAAO/E,EAAM+E,MAAM3B,SAElBpD,EAAMoD,UAIb,CAEO,SAASguC,GAAqBpxC,GACnC,OACEkD,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAAC,UAAS,SAAU9B,KAAK,SAASJ,QAAQ,OAAOsD,QAAS7J,EAAM0wC,SAASttC,SAC7EpD,EAAMoD,UAGb,CCXA,MAAMiuC,IAAgBzrC,EAAAA,EAAAA,IAAO0V,GAAAA,IAAYxV,WAAA,CAAAC,YAAA,qBAAnBH,CAAmB,uDAInC0rC,IAAkB1rC,EAAAA,EAAAA,IAAO2rC,GAAAA,GAAYzrC,WAAA,CAAAC,YAAA,qBAAnBH,CAAmB,mCAiEpC,SAAS4rC,GAA2BxxC,GACzC,MAAM,aAAEqsC,EAAenlB,GAAmB,SAAEuqB,GAAW,GAAUzxC,GAE3D,KAAE0xC,EAAI,aAAEC,EAAY,MAAEzhC,EAAK,SAAE08B,EAAQ,kBAAEgF,EAAiB,cAAEC,GA3C3D,SACL/gB,EACAub,EACAoF,GAAW,GAEX,MAAMC,GAAOR,EAAAA,GAAAA,IAAW,CACtBY,cAAehhB,GAAiB,CAAC,KAE7B,aAAE6gB,EAAc/E,SAAUiF,GAAkBH,GAC3CxhC,EAAO08B,IAAYhuC,EAAAA,EAAAA,UAAiD,MA4B3E,MAAO,CAAE8yC,OAAMC,eAAczhC,QAAO08B,WAAUgF,kBA1BnB5/B,IACzB,MAAM,cAAEqV,EAAa,YAAEC,GAAgB+kB,EAAar6B,GAGpD,GAAIqV,EAAc3gB,OAAS,EAAG,CAC5B,MAAMqrC,EAA6B1qB,EAAcpd,KAAK+nC,GAAiBA,EAAazhC,UACpFq8B,EAASmF,GAGLN,GACFI,EAAc,OAAQ,CAAEthC,QAASwhC,EAA2BpnC,KAAK,MAErE,MACEiiC,EAAS,MAIPtlB,EAAY5gB,OAAS,GACvB4gB,EAAYgV,SAAS2V,IACnBJ,EAAcI,EAAW3xC,KAA4B,CACnDiQ,QAAuC,iBAAvB0hC,EAAW1hC,QAAuB0hC,EAAW1hC,aAAU1L,GACvE,GAEN,EAG+DgtC,gBACnE,CAMIK,CAAiBlyC,EAAM8wB,aAAcub,EAAcoF,IAC9Cz+B,IAAY1P,EAAAA,EAAAA,YAAWwP,KACvBq/B,GAAyB9uC,IAC1BotC,EAAOjyC,EAAc,MACrB4zC,GAAepyC,EAAMqyC,YAA6C,eAAxBr/B,EAASc,WACnDw+B,GAAkBtyC,EAAMuyC,cAAgD,aAAzBv/B,EAASa,YAE9D,IAAIzQ,EAAWpD,EAAMoD,SASrB,OAR0B,IAAtBpD,EAAMwyC,cACRpvC,GACEF,EAAAA,EAAAA,KAACuvC,GAAY,CAACJ,WAAYryC,EAAMqyC,WAAYE,aAAcvyC,EAAMuyC,aAAanvC,SAC1EpD,EAAMoD,aAMXF,EAAAA,EAAAA,KAACwvC,GAAAA,GAAY,IAAKhB,EAAItuC,UACpBoF,EAAAA,EAAAA,MAACmqC,GAAAA,EAAI,CACH5nB,UAAYC,IACQ,UAAdA,EAAM1b,KAAmBtP,EAAM4yC,sBACjC5nB,EAAMhS,gBACR,EAGF4oB,SAAU+P,GAAa//B,UACrBg7B,EAAS,MACT,UACQ5sC,EAAM4hC,SAASxe,GAAOlT,GAAU08B,EAAS18B,IAAQ2hC,EACzD,CAAE,MAAO7/B,GACP4/B,EAAkB5/B,EACpB,KAEFogC,aAAcA,EACdS,aAAc7yC,EAAM6yC,aACpB9tC,MAAO,CACL0N,QAAS,OACTqP,cAAe,SACfH,SAAU,EACVnI,OAAQ,OACRkE,UAAW,OACX5E,SAAU,SACV0C,IAAK,GACLpY,SAAA,CAED8M,IAAShN,EAAAA,EAAAA,KAACstC,GAAU,CAACtgC,MAAOA,EAAOugC,KAAMA,EAAMC,SAAU1wC,EAAM0wC,YAChExtC,EAAAA,EAAAA,KAAC6W,GAAU,CAAA3W,UACTF,EAAAA,EAAAA,KAACmuC,GAAa,CACZ9qC,QAAQ,QACRusC,UAAQ,EACRv3B,gBAAc,EACd8F,QAAS,CAAE9T,QAASvN,EAAM6kB,eAAiB,YAAc,WACzD9f,MAAO,CAAE4T,SAAU25B,OAAkBztC,EAAY,KAAOzB,SAEvDA,MAGJpD,EAAM+sB,OACL/sB,EAAM+sB,QAEN7pB,EAAAA,EAAAA,KAACoY,GAAAA,GAAW,CAAC/U,QAAQ,QAAQusC,UAAU,EAAOlpC,UAAU,wBAAuBxG,UAC7EoF,EAAAA,EAAAA,MAAC8oC,GAAe,CAAAluC,SAAA,EACdF,EAAAA,EAAAA,KAAC2tC,GAAoB,CAAAztC,SAAEpD,EAAMuC,aAC5BvC,EAAM+yC,kBACN/yC,EAAM0wC,WACLxtC,EAAAA,EAAAA,KAACkuC,GAAoB,CAACV,SAAU1wC,EAAM0wC,SAASttC,SAC5CpD,EAAMW,YAAcwxC,EAAsBxxC,sBAS7D,CAQO,SAAS8xC,GAAazyC,GAM3B,MAAOgT,IAAY1P,EAAAA,EAAAA,YAAWwP,IACxBs/B,GAAepyC,EAAMqyC,YAA6C,eAAxBr/B,EAASc,WACnDw+B,GAAkBtyC,EAAMuyC,cAAgD,aAAzBv/B,EAASa,YAGxD7V,EAAyCs0C,EAAmBF,EAAe,GAAK,EAAK,GACrFl0C,EAAyCo0C,EAAkC,EAAS,GACpFl0C,EAAyCk0C,EAAkC,EAAS,GACpFU,EAA0CV,EAAkC,EAAS,GAQ3F,OALEpvC,EAAAA,EAAAA,KAAC+vC,GAAAA,EAAI,CAAClnC,WAAS,EAACuJ,KAAM,GAAIxX,GAPqD,GAO7CE,GAAIA,EAAIE,GAAIA,EAAIE,GAAIA,EAAI40C,IAAKA,EAAKppC,UAAW5J,EAAM4J,UAAUxG,SAC5FpD,EAAMoD,UAKb,C,gBC9MO,SAAS8vC,GAAsBvhC,GACpC,OAAOA,EAAOA,EAAKwhC,OAAO,GAAGC,cAAgBzhC,EAAKgqB,MAAM,GAAK,EAC/D,CCCO,SAAS0X,GAA0B7yC,EAAgB0vB,GACxD,MAAwB,iBAAV1vB,IAAqC,IAAf0vB,EAChC,CACEtyB,OAAO,EACP2S,SAASnG,EAAAA,GAAAA,GAAE,yBAA0B,CACnC5J,MAAO8yC,GAAgBJ,GAAsB1yC,EAAM+yC,8BAGvD1uC,CACN,CAEA,SAASyuC,GAAgB9yC,GACvB,MAAMgzC,EAAQ,CAAC,WACf,IAAK,MAAMlzC,KAAQkzC,EACjBhzC,EAAQA,EAAM3C,QAAQq1C,GAAsB5yC,EAAKizC,qBAAsBjzC,GAEzE,OAAOE,CACT,CCcO,SAASizC,GAGdzzC,GACA,MAAM,KAAEM,EAAI,SAAEozC,EAAQ,SAAEC,GAAa3zC,GAC/B,QACJ4zC,EAAO,SACP3qB,EACA4qB,WAAW,aAAE/C,KACXgD,EAAAA,GAAAA,OAEE,EAAE1pC,IAAMC,EAAAA,EAAAA,MAER0pC,EAAWV,GAA0BrzC,EAAMQ,MAAOR,EAAMkwB,YAE9D,OACEhtB,EAAAA,EAAAA,KAAC8wC,GAAAA,GAAU,CACT1zC,KAAMA,EACNszC,QAASA,EACT9iB,aAAc9wB,EAAM8wB,aACpBmjB,kBAAgB,EAChB5jC,OAAQA,EAAG6jC,OAAS1uC,WAAU5H,SAASu2C,YAAcjkC,aACnD,MAAMkkC,EAAoBlkC,GAAOK,QACjC,OACErN,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,UACEF,EAAAA,EAAAA,KAACqhC,GAAAA,EAAQ,CACPjkC,KAAMA,EACND,GAAIL,EAAMK,IAAMC,EAAKoK,MAAM,KAAKC,KAAK,KACrC,UAAS3K,EAAMK,IAAMC,EAAKoK,MAAM,KAAKC,KAAK,KAC1C,aAAY3K,EAAMQ,MAClBoJ,UAAW5J,EAAM4J,UACjBpJ,OACEgI,EAAAA,EAAAA,MAAA,OAAKzD,MAAO,CAAE0N,QAAS,QAASrP,SAAA,EAC9BoF,EAAAA,EAAAA,MAAA,OAAApF,SAAA,CACGpD,EAAMQ,MACNR,EAAMq0C,YACLnxC,EAAAA,EAAAA,KAAC0Y,GAAI,CAACrb,MAAOP,EAAMs0C,eAAgBz4B,KAAM7b,EAAMq0C,gBAGnDnxC,EAAAA,EAAAA,KAAA,OAAK6B,MAAO,CAAEsmB,WAAY,EAAGC,cAAe,GAAIloB,UAC9CF,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAAS,CACP,CACEhG,MAAO4J,EAAE,oBACTzD,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/BkG,QAASA,KACPof,EACE3oB,EACAN,EAAM8wB,aAIP,EAEHltB,SAAUA,KAAO5D,EAAMu0C,aAAe32C,IAAUoC,EAAM8wB,eAG1DxqB,SAAU6F,GAAAA,GAAiBC,aAKnC3H,YAAa7G,EACb4H,SAAUA,EACVkuC,SAAUA,GAAY5C,EACtB7sC,WAAYjE,EAAMiE,WAClBisB,WAAYlwB,EAAMkwB,WAClBpR,YACEs1B,GACElxC,EAAAA,EAAAA,KAAA,QAAM6B,MAAO,CAAEvF,MAAOD,EAAmBD,EAASsL,SAAUxH,SACzDgxC,IAGHp0C,EAAM8e,eAIX,EAGP01B,MAAO,CAAET,WAAUJ,aAGzB,C,wHCxGO,SAASc,GAAWz0C,GAWzB,MAAMK,EAAKN,EAAMC,IACX,SAAE00C,EAAQ,MAAE92C,EAAK,SAAE4H,EAAQ,SAAEonC,EAAQ,WAAExhB,GAAeprB,GAErD20C,EAAOC,IAAYh2C,EAAAA,EAAAA,WAAS,GAG7Bi2C,GAAa37B,EAAAA,EAAAA,QAAuB,MACpC47B,GAAa57B,EAAAA,EAAAA,QAAuB,MAGpC67B,GAAqB/1C,EAAAA,EAAAA,cAAapB,IACtC,IAAKi3C,EAAWv7B,QAAS,OACzBu7B,EAAWv7B,QAAQvU,MAAMoY,UAAY,GAAG63B,GAAmBC,OAC3D,MAAMC,EAAet3C,EAAM8M,MAAM,MAAMhE,OACvCmuC,EAAWv7B,QAAQvU,MAAMyU,OAAS,GAAG07B,EAAeF,GAAmBC,MAAsB,GAC5F,IAGGE,GAAYj8B,EAAAA,EAAAA,QAAyD,CAAC,IAC5Eja,EAAAA,EAAAA,YAAU,KACR,GAAI61C,EAAWx7B,QAAS,CACtB,MAAM87B,EAASC,GAAAA,OAAcC,OAAOR,EAAWx7B,QAAS,CACtDi8B,YAAav1C,EAAMu1C,YAAc,KAAO,MACxCC,qBAAsBx1C,EAAMu1C,iBAAc1wC,EAAY,EACtD8O,MAAO,mBACP0N,QAAS,CAAEC,IAAKm0B,GAAkBl0B,OAAQm0B,IAC1CC,SAAU,GACVC,WAAY,aACZC,sBAAsB,EACtBC,QAAS,CAAEtU,SAAS,GAEpBuU,kCAAkC,EAClCC,UAAW,CACTC,yBAAyB,KAI7B,OADAd,EAAU77B,QAAQ87B,OAASA,EACpB,IAAMA,EAAOc,SACtB,IACC,CAACl2C,EAAMu1C,eAGVt2C,EAAAA,EAAAA,YAAU,KACR,MAAMm2C,EAASD,GAAW77B,SAAS87B,OACnC,IAAKA,EAAQ,OAEb,MAAMe,EAAQf,EAAOgB,WACrB,IAAKD,EAAO,OAEZ,MAAME,EAA6BF,EAAMG,oBAAmB,KAC1D,MAAM14C,EAAQw3C,EAAOmB,YAAc,GACnC/wC,EAAS5H,GACTm3C,EAAmBn3C,EAAM,IAE3B,MAAO,IAAMy4C,EAA2BH,SAAS,GAChD,CAAC1wC,EAAUuvC,KAGd91C,EAAAA,EAAAA,YAAU,KACR,MAAMm2C,EAASD,GAAW77B,SAAS87B,OAC9BA,GACDA,EAAOmB,aAAe34C,IAC1Bw3C,EAAOnsB,SAASrrB,GAChBm3C,EAAmBn3C,GAAM,GACxB,CAACA,EAAOm3C,KAGX91C,EAAAA,EAAAA,YAAU,KACR,MAAMm2C,EAASD,GAAW77B,SAAS87B,OAC9BA,GACLA,EAAOoB,cAAc,CAAE9C,SAAUtoB,GAAa,GAC7C,CAACA,IAGJ,MAAOtb,EAAU2mC,IAAe73C,EAAAA,EAAAA,WAAS,IACzCK,EAAAA,EAAAA,YAAU,KACR,MAAMm2C,EAASD,GAAW77B,SAAS87B,OACnC,IAAKA,EAAQ,OAEb,MAAMe,EAAQf,EAAOgB,WACrB,IAAKD,EAAO,OAEZd,GAAAA,OAAcqB,iBAAiBP,EAAOzB,GAEtC,MAAMiC,EAA6BtB,GAAAA,OAAcuB,oBAAmB,KAClE,MAAMC,EAAUxB,GAAAA,OAAcyB,gBAAgB,CAC5CC,MAAOZ,EAAMa,gBACbC,SAAUd,EAAMe,MAElBT,EAAYI,EAAQnwC,OAAS,GAC7BkmC,EAASiK,EAAQnwC,OAAS,EAAImwC,EAAQ5sC,KAAKktC,GAAWA,EAAO5mC,UAAS5F,KAAK,WAAQ9F,EAAU,IAG/F,MAAO,IAAM8xC,EAA2BT,SAAS,GAChD,CAACxB,EAAU9H,KAGdhzB,EAAAA,GAAAA,GAAkBk7B,GAAY,KAC5B,MAAMM,EAASD,GAAW77B,SAAS87B,OAC9BA,IACLA,EAAOgC,SACPxC,GAAS,GAAK,IAIhB,MAAM5hC,EAAWD,KASjB,OARA9T,EAAAA,EAAAA,YAAU,KACR,MAAMm2C,EAASD,GAAW77B,SAAS87B,OAC9BA,GACLA,EAAOoB,cAAc,CACnB7iC,MAAgC,SAAzBX,EAASoB,YAAyB,mBAAqB,qBAC9D,GACD,CAACpB,EAASoB,eAGXlR,EAAAA,EAAAA,KAACm0C,GAAQ,CACPztC,UAAW5J,EAAM4J,UACjB,eAAckG,EAAW,YAASjL,EAClC8E,IAAKkrC,EAAWzxC,UAEhBF,EAAAA,EAAAA,KAACo0C,GAAQ,CACPj3C,GAAIA,EACJ,UAASA,EACTsJ,IAAKmrC,EACLlrC,UAAU,cACV,gBAAe+qC,EAAQ,QAAU,UAIzC,CAGA,MAAM0C,GAAWzxC,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,wCAMrB0xC,GAAW1xC,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,gCAMrBovC,GAAmB,GACnBS,GAAmB,EACnBC,GAAsB,EACtBT,GAAgBQ,GAAmBC,GAKzC,IAAI6B,GACAC,GACAC,GAkCJ54C,OAAO64C,kBAAoB,CAAEC,UAjC7B,SAAmBC,EAAkBp3C,GACnC,OAAQA,GACN,IAAK,sBAOH,OANK+2C,KACHA,GAAsB,IAAIM,OACxB,IAAIC,IAAI,mBACR,CAAEnxC,UAAM,KAGL4wC,GACT,IAAK,OAUH,OATKC,KACHA,GAAa,IAAIK,OACf,IAAIC,IACF,mBAGF,CAAEnxC,UAAM,KAGL6wC,GACT,IAAK,OAOH,OANKC,KACHA,GAAa,IAAII,OACf,IAAIC,IAAI,mBACR,CAAEnxC,UAAM,KAGL8wC,GACT,QACE,MAAM,IAAIjwB,MAAM,iBAAiBhnB,KAEvC,GAIA60C,GAAAA,UAAiB0C,KAAKC,aAAaC,sBAAsB,CAAEtE,UAAU,KAGrEuE,EAAAA,GAAAA,GAAoB7C,GAAQ,CAC1B1B,UAAU,EACVh+B,QAAQ,EACRwiC,QAAS,CACP,CACEjB,IAAK,GACLkB,UAAW,GACXC,OAAQ,CACN1xC,KAAM,SACN2xC,WAAY,CAAC,EACbC,sBAAsB,OAO9BlD,GAAAA,OAAcmD,YAAY,mBAAoB,CAC5CC,KAAM,UACNC,SAAS,EACTC,OAAQ,CACN,oBAAqB,YACrB,qBAAsB,YACtB,6BAA8B,YAC9B,iBAAkB,YAClB,6BAA8B,YAC9B,iCAAkC,YAClC,8BAA+B,YAC/B,4BAA6B,YAC7B,gCAAiC,aAEnCnE,MAAO,CAAC,CAAEoE,MAAO,GAAIC,WAAY,cAInCxD,GAAAA,OAAcmD,YAAY,oBAAqB,CAC7CC,KAAM,KACNC,SAAS,EACTC,OAAQ,CACN,oBAAqB,YACrB,qBAAsB,YACtB,6BAA8B,YAC9B,iBAAkB,YAClB,6BAA8B,YAC9B,iCAAkC,YAClC,8BAA+B,YAC/B,4BAA6B,YAC7B,gCAAiC,aAEnCnE,MAAO,K,gBCtQF,SAASsE,GAAS94C,GAOvB,MAAM,IAAQqK,EAAAA,EAAAA,MACRiH,EAAerD,MACbowB,OAAQ0a,GAAW/4C,EACrBq+B,GAASr/B,EAAAA,EAAAA,cACZg6C,IACC,IAAKA,GAA0B,IAAjBA,EAAMtyC,OAAc,OAClC,MAAMuyC,EAAOD,EAAM,GACbE,EAAS,IAAIC,WACnBD,EAAOE,OAAS,KACd,MAAMC,EAAWH,EAAOnyC,OACxB,GAAwB,iBAAbsyC,EAAuB,CAChC,MAAMt2C,EAAoB,CACxBwD,QAAS,UACThG,MAAO6J,EAAE,iBACTqE,SAAS,GAEX6C,EAAazD,SAAS9K,GACtBg2C,EAAOM,EACT,GAEFH,EAAOI,QAAU,KACf,MAAMv2C,EAAoB,CACxBwD,QAAS,SACThG,MAAO6J,EAAE,yBACThH,SAAUgH,EAAE,qBAEdkH,EAAazD,SAAS9K,EAAM,EAE9Bm2C,EAAOK,WAAWN,EAAK,GAEzB,CAAC7uC,EAAGkH,EAAcynC,KAGd,aAAES,EAAY,cAAEC,IAAkBC,EAAAA,GAAAA,IAAY,CAClDrb,SACAsb,SAAS,EACTC,OAAQ55C,EAAM45C,QAAU,CACtB,mBAAoB,CAAC,SACrB,YAAa,CAAC,QAAS,WAI3B,OACEpxC,EAAAA,EAAAA,MAAA,OACEnI,GAAG,0BACCm5C,EAAa,CAAEK,UAAU,IAC7B90C,MAAO,CAAEsU,MAAO,OAAQG,OAAQ,QAASpW,SAAA,EAEzCF,EAAAA,EAAAA,KAAA,SAAO7C,GAAG,gCAAiCo5C,IAAiB9vC,IAAK3J,EAAM85C,WACtE95C,EAAMoD,WAGb,C,gBC7DO,SAAS22C,GAAW/5C,GAMzB,OACEkD,EAAAA,EAAAA,KAACoF,EAAAA,EAAI,CAAC7J,KAAMuB,EAAMvB,MAAQ,KAAK2E,UAC7BF,EAAAA,EAAAA,KAAC82C,GAAAA,GAAa,CACZ,UAAQ,aACRj1C,MAAO,CACL4Z,UAAW3e,EAAM8J,WACb,eACoB,SAApB9J,EAAM+qC,UACJ,gBACA,iBACNxtB,WAAY,iBACZ9E,UAAW,UAEb5O,QAASA,IAAM7J,EAAMsrC,aAAatrC,EAAM8J,YACxC,aAAY9J,EAAM8J,YAAaM,EAAAA,GAAAA,GAAE,aAAcA,EAAAA,GAAAA,GAAE,aAIzD,CC5BO,SAAS6vC,GAAiB35C,EAAc6E,EAAiB+0C,EAAoB,OAClF,MAAMjB,EAAO,IAAIkB,KAAKh1C,EAAQuF,MAAM,MAAO,CAAE/D,KAAM,eAE7CyzC,EAAUhxC,SAASixC,cAAc,KACvCD,EAAQnvC,KAAO6sC,IAAIwC,gBAAgBrB,GACnCmB,EAAQG,SAAWj6C,EAAO,IAAM45C,EAEhC9wC,SAASC,KAAKmxC,YAAYJ,GAC1BA,EAAQK,QACRrxC,SAASC,KAAKqxC,YAAYN,EAC5B,C,mDCYO,SAASO,GAAc36C,GAC5B,MAAM,SAAEoD,EAAQ,WAAEw3C,EAAU,kBAAExG,EAAiB,WAAElkB,EAAU,UAAEmkB,EAAS,eAAEC,EAAc,MAAE9zC,GACtFR,EAEF,OACEwI,EAAAA,EAAAA,MAACqyC,GAAAA,EAAS,CACRx6C,GAAI,GAAGL,EAAM86C,qBACbA,QAAS96C,EAAM86C,QACft6C,OACEgI,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,CACGpD,EAAMoG,KACN5F,KAGLu6C,UAAW1G,GAAYnxC,EAAAA,EAAAA,KAAC0Y,GAAI,CAACrb,MAAO+zC,EAAgBz4B,KAAMw4B,SAAgBxvC,EAC1Em2C,UAAWh7C,EAAMi7C,mBACjB/qB,WAAYA,EACZ,UAAS,GAAGlwB,EAAM86C,qBAAqB13C,SAAA,CAEtCA,GACCw3C,GAAcxG,KACdlxC,EAAAA,EAAAA,KAACg4C,GAAAA,EAAc,CAAA93C,UACbF,EAAAA,EAAAA,KAACi4C,GAAAA,EAAU,CAAA/3C,UACTF,EAAAA,EAAAA,KAACk4C,GAAAA,EAAc,CAAC70C,QAAS6tC,EAAoB,aAAUvvC,EAAUzB,SAC9DgxC,GAAwCwG,UAOvD,CCwBO,SAASS,GAMdr7C,GACA,MAAM,IAAQqK,EAAAA,EAAAA,OACR,KACJ/J,EACAqV,OAAQ2lC,EAAW,YACnBC,EAAW,cACXC,EAAa,gBACbC,EAAe,cACfC,EAAa,SACb/H,EAAQ,QACRv3B,GACEpc,EACEK,EAAKN,EAAMC,IAEf6zC,WAAW,aAAE/C,EAAY,aAAE6K,GAAc,SACzC/O,EAAQ,UACRgP,EAAS,YACT3K,EAAW,QACX2C,IACEE,EAAAA,GAAAA,MAEE+H,EADW9oC,KACgBiB,kBAAoB,QAC9C0gC,EAAUoH,IAAel9C,EAAAA,EAAAA,UAA8Bi9C,IACvD/xC,EAAYwhC,IAAe1sC,EAAAA,EAAAA,WAAUoB,EAAM+7C,mBAG3CC,EAAiBC,IAAsBr9C,EAAAA,EAAAA,WAAiB,KAC7D,MAAMhB,EAAQg+C,EAAUt7C,GACxB,MAAqB,iBAAV1C,EAA2BA,EAC1Bs+C,GAAet+C,EAAOi+C,EAAgB,IAG9CvqC,EAAerD,MACf,iBAAEyD,GAAqBP,KAEvBgrC,GAAan9C,EAAAA,EAAAA,cACjB,IAAM0S,EAAiBwqC,GAAeE,GAAcR,EAAUt7C,GAAO8b,GAAUs4B,KAC/E,CAACkH,EAAWx/B,EAASs4B,EAAUp0C,EAAMoR,IAGjC2sB,GAASr/B,EAAAA,EAAAA,cACZq6C,IACC4C,EAAmBC,GAAeE,GAAc/C,EAAUj9B,GAAUs4B,GAAU,GAEhF,CAACt4B,EAASs4B,IAGN2H,GAAmBnjC,EAAAA,EAAAA,QAAyB,MAC5CojC,GAAet9C,EAAAA,EAAAA,cAAY,IAAMq9C,EAAiB/iC,SAASmhC,SAAS,IAEpE8B,GAAiBv9C,EAAAA,EAAAA,cAAY,KACjC,MACMk7C,EAAyB,SAAbxF,EAAsB,OAAS,OACjDuF,GAFiB35C,GAAQ,OAIvB47C,GAAeE,GAAcR,EAAUt7C,GAAO8b,GAAUs4B,GACxDwF,GAEF5oC,EAAazD,SAAS,CAAEtH,QAAS,UAAWhG,MAAO6J,EAAE,mBAAoBqE,SAAS,GAAO,GACxF,CAAC6C,EAAcsqC,EAAWx/B,EAASs4B,EAAUp0C,EAAM8J,KAEtD+Q,EAAAA,EAAAA,kBAAgB,KACd,MAAMvd,EAAQs+C,GAAeE,GAAcR,EAAUt7C,GAAO8b,GAAUs4B,GACtEuH,EAAmBr+C,EAAM,GACxB,CAACg+C,EAAWx/B,EAASs4B,EAAUp0C,IAElC,MAAM,SACJ2oB,EACA4qB,WAAW,cAAE/B,KACXgC,EAAAA,GAAAA,MAEEC,EAAWV,GAA0BrzC,EAAMQ,MAAOR,EAAMkwB,YAExDssB,EAAYjG,KAASzE,EAAyB9xC,EAAMM,MAK1D,OACE4C,EAAAA,EAAAA,KAAC8wC,GAAAA,GAAU,CACT1zC,KAAMA,EACNszC,QAASA,EACTK,kBAAgB,EAChB5jC,OAAQA,EAAG6jC,OAASt2C,QAAO0C,OAAMkF,YAAY2uC,YAAcjkC,aAqBvD1H,EAAAA,EAAAA,MAACmyC,GAAa,CACZG,QAASz6C,EACT+F,MACGs1C,IAAiBx4C,EAAAA,EAAAA,KAAC62C,GAAU,CAACjwC,WAAYA,EAAYwhC,YAAaA,IAErE9qC,MAAOR,EAAMQ,MACb8zC,eAAgBt0C,EAAMs0C,gBAAkBt0C,EAAMQ,MAC9C6zC,UAAWr0C,EAAMq0C,UACjB4G,oBACE/3C,EAAAA,EAAAA,KAACu5C,GAAiB,CAChBN,YAAaZ,GAAeY,EAC5BG,cAAed,GAAiBc,EAChCC,gBAAiBd,GAAmBc,EACpC7H,SAAUA,EACVoH,YAAaA,EAAY14C,SAExBpD,EAAMi7C,qBAGXL,WAAY56C,EAAM46C,WAClBxG,oBAAqBT,GAAYgI,IAAiBzrC,GAAOK,SAAS7F,MAAM,MACxEwlB,WAAYlwB,EAAMkwB,WAAW9sB,SAAA,CAE5B0G,IACCtB,EAAAA,EAAAA,MAAA,OAAKzD,MAAO,CAAE0N,QAAS,QAASrP,SAAA,EAC9BF,EAAAA,EAAAA,KAAC41C,GAAQ,CACPza,OAAQA,EACRp6B,WAAY6sC,GAAgB9wC,EAAMorB,WAClC0uB,SAAUuC,EAAiBj5C,UAE3BF,EAAAA,EAAAA,KAACuxC,GAAU,CACT,UAASp0C,EACTA,GAAIA,EACJC,KAAMA,EACNo0C,SAAUA,EACV92C,MAAOo+C,EACPx2C,SAxDZ,SAAsBk3C,GACpB,IACE,MAAMC,EAAgBP,GAAcM,EAAatgC,GACjD,GACO,WADCk/B,EAGJ,YADA91C,EAASm3C,GAGTn3C,EAAS02C,GAAeS,EAAerB,IAI3CrK,EAAY3wC,EACd,CAAE,MAAO0R,GACHA,aAAewV,OACjBolB,EAAStsC,EAAM,CAAEiQ,QAASyB,EAAIzB,SAElC,CACF,EAuCYq8B,SAAW18B,IACJA,EACA08B,EAAStsC,EAAM,CAAEiQ,QAASL,IADnB+gC,EAAY3wC,EACe,EAEzC8qB,WAAYprB,EAAMorB,YAAc0lB,EAChClnC,UACE5J,EAAMorB,WACF,qCACA,4BAIVloB,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAAS,CACP,CACEhG,MAAO4J,EAAE,gBACTzD,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/BkG,QAASA,KACPof,EACEjpB,EAAMM,KACNk8C,GAEFP,EAAmB,IACnBvtC,YAAW,KACTutC,EACEC,GAAeE,GAAcI,EAAWpgC,GAAUs4B,GACnD,GACA,EAAE,EAEP9wC,SAAUA,KAAO5D,EAAM48C,YAAcC,KAAYj/C,EAAO4+C,IAE1D,CACEh8C,MAAO4J,EAAE,oBACTzD,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/BkG,QAASA,KACPof,EACEjpB,EAAMM,KACNN,EAAM8wB,cAKRmrB,EAAmB,IACnBvtC,YAAW,KACTutC,EACEC,GAAeE,GAAcp8C,EAAM8wB,aAAc1U,GAAUs4B,GAC5D,GACA,EAAE,EAEP9wC,SAAUA,KAAO5D,EAAMu0C,aAAesI,KAAYj/C,EAAOoC,EAAM8wB,gBAInExqB,SAAU6F,GAAAA,GAAiBC,YAI/BtC,IAAc5G,EAAAA,EAAAA,KAAA,OAAK0G,UAAU,4BAIrC4qC,MAAO,CAAET,WAAUJ,SAAU3zC,EAAM2zC,WAGzC,CAEO,SAASmJ,GAAkB98C,GAMhC,MAAM,IAAQqK,EAAAA,EAAAA,OACR,WAAE8xC,EAAU,eAAEI,EAAc,aAAED,GAAiBt8C,EACrD,OAAKm8C,GAAeI,GAAmBD,GAErC9zC,EAAAA,EAAAA,MAAC6E,EAAAA,EAAI,CAACG,WAAY,CAAED,QAAS,gBAAiBnK,SAAA,CAC3C+4C,IACCj5C,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAAtK,UACPF,EAAAA,EAAAA,KAACwY,GAAU,CACTrb,GAAG,cACH,UAAQ,cACR,aAAY+J,EAAE,qBACdzD,KAAK,SACLkD,QAASsyC,EAAW/4C,UAEpBF,EAAAA,EAAAA,KAACoF,EAAAA,EAAI,CAAC7J,KAAK,KAAI2E,UACbF,EAAAA,EAAAA,KAAC65C,GAAAA,GAAQ,UAKhBT,IACCp5C,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAAtK,UACPF,EAAAA,EAAAA,KAACwY,GAAU,CACTrb,GAAG,gBACH,UAAQ,gBACR,aAAY+J,EAAE,oBACdzD,KAAK,SACLkD,QAASyyC,EAAal5C,UAEtBF,EAAAA,EAAAA,KAACoF,EAAAA,EAAI,CAAC7J,KAAK,KAAI2E,UACbF,EAAAA,EAAAA,KAAC85C,GAAAA,GAAU,UAKlBT,IACCr5C,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAAtK,UACPF,EAAAA,EAAAA,KAACwY,GAAU,CACTrb,GAAG,kBACH,UAAQ,kBACR,aAAY+J,EAAE,iBACdzD,KAAK,SACLkD,QAAS0yC,EAAen5C,UAExBF,EAAAA,EAAAA,KAACoF,EAAAA,EAAI,CAAC7J,KAAK,KAAI2E,UACbF,EAAAA,EAAAA,KAAC+5C,GAAAA,GAAY,cA3CmC/5C,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,GAkD9D,CAEO,SAAS60C,GAAkBz8C,GAQhC,MAAM,IAAQqK,EAAAA,EAAAA,OACR,WAAE8xC,EAAU,eAAEI,EAAc,aAAED,EAAY,SAAE5H,EAAQ,YAAEoH,GAAgB97C,EAC5E,OACEwI,EAAAA,EAAAA,MAAC6E,EAAAA,EAAI,CAACG,WAAY,CAAED,QAAS,gBAAiBnK,SAAA,EAC5CF,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAAtK,SAAEpD,EAAMoD,YACjBF,EAAAA,EAAAA,KAAC45C,GAAiB,CAChBX,WAAYA,EACZI,eAAgBA,EAChBD,aAAcA,KAEhBp5C,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAACwvC,MAAO,CAAE3vC,QAAS,cAAenK,UACzCoF,EAAAA,EAAAA,MAACqvB,GAAAA,EAAW,CAACla,WAAS,EAAAva,SAAA,EACpBF,EAAAA,EAAAA,KAAC80B,GAAAA,EAAe,CACd33B,GAAG,cACH,UAAQ,cACR,aAAY+J,EAAE,kBACdgjB,WAAyB,SAAbsnB,EACZ/iC,KAAK,OACLhL,KAAK,SACLnB,SAAUA,IAAMs2C,EAAY,WAE9B54C,EAAAA,EAAAA,KAAC80B,GAAAA,EAAe,CACd33B,GAAG,cACH,UAAQ,cACR,aAAY+J,EAAE,kBACdgjB,WAAyB,SAAbsnB,EACZ/iC,KAAK,OACLhL,KAAK,SACLnB,SAAUA,IAAMs2C,EAAY,iBAMxC,CAEO,SAASM,GACdx+C,EACAwe,GAEA,GAAIxe,QACF,OAAOwe,EAAU,GAAK,CAAC,EAGzB,GAAqB,iBAAVxe,EACT,IACEA,EAAQ0V,KAAKC,MAAM3V,EACrB,CAAE,MACA,IACEA,EAAQu/C,GAAAA,GAAAA,KAAYv/C,EACtB,CAAE,MAAOoU,GACP,OAAIA,aAAewV,OAASxV,aAAeorC,GAAAA,GAClC,IAAI51B,MAAMxV,EAAIzB,SAEhB,CAAC,CACV,CACF,CAGF,OAAI6L,EACED,MAAMC,QAAQxe,GACTA,EAEA,GAGLue,MAAMC,QAAQxe,GACT,CAAC,EAEDA,CAGb,CAEO,SAASs+C,GAAemB,EAAa3I,GAC1C,GAAI2I,QACF,MAAO,GAGT,OAAQ3I,GACN,IAAK,OACH,OAAOphC,KAAKa,UAAUkpC,EAAK,KAAM,GACnC,IAAK,OAAQ,CACX,MAAMC,EAAOH,GAAAA,GAAAA,KAAYE,GAAKE,UAC9B,OAAQD,GACN,IAAK,OACL,IAAK,KACL,IAAK,KACH,MAAO,GACT,QACE,OAAOA,EAEb,CACA,QACE,MAAO,GAEb,C,2BCvVO,SAASE,GAIdx9C,GACA,MAAM,KACJM,EAAI,MACJE,EAAK,eACL8zC,EAAc,UACdD,EAAS,mBACT4G,EAAkB,gBAClBwC,EAAe,QACfl0B,EAAO,OACPwD,EAAM,WACN6tB,EAAU,WACV32C,EAAU,WACVmnB,EAAU,WACV8E,EAAU,SACVyjB,EAAQ,8BACR+J,GACE19C,EAEEK,EAAKN,EAAMC,IAEX,EAAEoK,IAAMC,EAAAA,EAAAA,OAER,QACJupC,EAAO,SACP3qB,EACA4qB,WAAW,aAAE/C,EAAY,aAAE6K,EAAY,cAAE7J,GAAe,WACxD6L,IACE7J,EAAAA,GAAAA,OAEG3mC,EAAMyc,IAAWhrB,EAAAA,EAAAA,WAAS,GAC3B6G,GAAWzG,EAAAA,EAAAA,cAAY,IAAM4qB,GAASzc,IAAO,CAACA,KAE7CpJ,GAAgBV,IACjB0wC,EAAWV,GAA0BrzC,EAAMQ,MAAOR,EAAMkwB,YAExDssB,EAAYjG,KAASzE,EAAyB9xC,EAAMM,MAK1D,OACE4C,EAAAA,EAAAA,KAAC8wC,GAAAA,GAAU,CACT1zC,KAAMA,EACNszC,QAASA,EACT9iB,aAAc9wB,EAAM8wB,aACpBmjB,kBAAgB,EAChB5jC,OAAQA,EAAG6jC,OAAS1uC,WAAU5H,SAASu2C,YAAcjkC,aACrC,KAAVtS,GACqB,IAAnB2rB,EAAQ7iB,QAAgBwpB,GAC1B1qB,EAAS+jB,EAAQ,GAAG3rB,OAGxB,MAaMw2C,EAAoBlkC,GAAOK,QAC7BojC,GAAYgI,EACV53C,EAAanB,WACbsN,GAAOK,aACT1L,EAEEqlB,EAAWX,EAAQ7hB,MAAMuiB,GAAWA,EAAOrsB,QAAUA,IAE3D,OACEsF,EAAAA,EAAAA,KAACy3C,GAAa,CACZG,QAASz6C,EACTG,MAAOA,EACP8zC,eAAgBA,GAAkB9zC,EAClC6zC,UAAWA,EACX4G,mBAAoBA,EACpBL,WAAYA,EACZxG,kBAAmBA,EACnBlkB,WAAYA,EAAW9sB,UAEvBoF,EAAAA,EAAAA,MAAA,OAAKzD,MAAO,CAAE0N,QAAS,QAASrP,SAAA,EAC9BF,EAAAA,EAAAA,KAAC4nB,GAAAA,EAAM,CACLzqB,GAAIA,EACJu9C,OAAQv9C,EACRo9C,gBAAiBA,EACjBl3C,QAAQ,SACR,mBAAkB,GAAGlG,eACrBw9C,WAAY3zB,GAAU1pB,MACtBwI,SAxCgBmhB,CACtBzB,EACAloB,KAEA,MAAMypB,EAASV,EAAQ7hB,MAAMuiB,GAAWA,EAAOzpB,QAAUA,EAAMkhB,cAAa9jB,MAC5E4H,EAASykB,GACTyzB,GAAgCC,EAAWD,GACvC19C,EAAMwF,UACRxF,EAAMwF,SAASykB,GAEjBL,GAAQ,EAAM,EA+BR7gB,OAAQoE,EACR1H,SAAUA,EACVwmB,QACEiE,OACIrrB,EACA,KACEW,EAAS,MACTokB,GAAQ,EAAM,EAGtBlM,UAAW,IACXogC,UAAW1J,EAAoB,aAAUvvC,EACzCZ,WAAYA,GAAcmnB,GAAc0lB,EACxCiN,qBAAmB,EACnBhxB,OAAQA,EACRphB,OAAO,cACP,UAAStL,EAAG+C,SAEXmmB,EAAQtf,KAAKggB,IACZ,MAAMiD,EAAW/sB,EAAM8pB,GACvB,OACE/mB,EAAAA,EAAAA,KAACupB,GAAAA,EAAY,CACXpsB,GAAI6sB,EAEJtvB,MAAOqsB,EAAOzpB,MACdA,MAAOypB,EAAOzpB,MACdse,YAAamL,EAAOnL,YACpB,UAASoO,EAAS9pB,SAEjB6mB,EAAOzpB,OANHypB,EAAOzpB,MAOC,OAIrB0C,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAAS,CACP,CACEhG,MAAO4J,EAAE,gBACTzD,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/BkG,QAASA,KACPof,EACEjpB,EAAMM,KACNk8C,EACD,EAEH54C,SAAUA,KAAO5D,EAAM48C,YAAch/C,IAAU4+C,GAEjD,CACEh8C,MAAO4J,EAAE,oBACTzD,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/BkG,QAASA,KACPof,EACEjpB,EAAMM,KACNN,EAAM8wB,aAIP,EAEHltB,SAAUA,KAAO5D,EAAMu0C,aAAe32C,IAAUoC,EAAM8wB,eAG1DvqB,QAASuB,EAAAA,GAAc8rC,QACvBttC,SAAU6F,GAAAA,GAAiBC,YAGjB,EAGpBooC,MAAO,CACLT,WACAJ,aAIR,CC/PO,SAASqK,GAGdh+C,GACA,MAAM,KACJM,EAAI,WACJs6C,EAAU,SACVjH,EAAQ,mBACRsH,EAAkB,MAClBz6C,EAAK,UACL6zC,EAAS,eACTC,EAAc,QACd2J,EAAO,SACPr5C,GACE5E,GACE,QACJ4zC,EACAC,WAAW,aAAE/C,EAAY,aAAE6K,KACzB7H,EAAAA,GAAAA,MACEzzC,EAAKN,EAAMC,GACjB,OACEkD,EAAAA,EAAAA,KAAC8wC,GAAAA,GAAU,CACT1zC,KAAMA,EACNszC,QAASA,EACTK,kBAAgB,EAChB5jC,OAAQA,EAAG6jC,OAAS1uC,WAAU5H,SAASu2C,YAAcjkC,aACnD,MAAMkkC,EAAsBT,GAAYgI,OAAiC92C,EAAjBqL,GAAOK,QAC/D,OACErN,EAAAA,EAAAA,KAACy3C,GAAa,CACZG,QAASz6C,EACT,UAASA,EAAK,cACdG,MAAOA,EACP8zC,eAAgBA,GAAkB9zC,EAClC6zC,UAAWA,EACXuG,WAAYA,EACZxG,kBAAmBA,EACnB6G,mBAAoBA,EAAmB73C,UAEvCF,EAAAA,EAAAA,KAACmC,EAAAA,EAAM,CACL,UAAShF,EAAK,UACd,aAAYG,EACZiE,UAAW7G,EACX4H,SAAWgO,GAAMhO,EAASgO,GAC1BvP,WAAY6sC,EACZtwC,MAAOy9C,EACPr5C,SAAUA,KAEE,GAK1B,C,uCCzEO,SAASs5C,GAKdl+C,GAIA,MAAM,KACJ2G,EAAI,KACJrG,EAAI,MACJE,EAAK,eACL8zC,EAAc,UACdD,EAAS,mBACT4G,EAAkB,YAClB3xB,EAAW,OACX3N,EAAM,WACNi/B,EAAU,WACV32C,EAAU,WACVmnB,EAAU,WACV8E,EAAU,SACVyjB,EAAQ,UACRwK,EAAS,UACTC,EAAS,IACTrb,EAAG,IACHlsB,EAAG,QACHwnC,EAAO,YACPC,EAAW,WACXC,EAAU,YACVC,EAAW,UACXC,EAAS,aACT5L,EAAY,kBACZ6L,GACE1+C,EAEEK,EAAKN,EAAMC,IAEX,QACJ4zC,EAAO,SACP3qB,EACA4qB,WAAW,aAAE/C,EAAY,aAAE6K,KACzB7H,EAAAA,GAAAA,OAEG6K,EAAYC,IAAiBhgD,EAAAA,EAAAA,WAAS,IAEtCmF,GAAgBV,IACjB0wC,EAAWV,GAA0BrzC,EAAMQ,MAAOR,EAAMkwB,YAE9D,OACEhtB,EAAAA,EAAAA,KAAC8wC,GAAAA,GAAU,CACT1zC,KAAMA,EACNszC,QAASA,EACTK,kBAAgB,EAChB5jC,OAAQA,EAAG6jC,OAAS1uC,WAAU5H,QAAO0C,QAAQ6zC,YAAcjkC,aACzD,MAAMkkC,EAAoBlkC,GAAOK,QAC7BojC,GAAYgI,EACV53C,EAAanB,WACbsN,GAAOK,aACT1L,EAKJ,OACE3B,EAAAA,EAAAA,KAACy3C,GAAa,CACZG,QAASz6C,EACTG,MAAOA,EACP8zC,eAAgBA,GAAkB9zC,EAClC6zC,UAAWA,EACX4G,mBAAoBA,EACpBL,WAAYA,EACZxG,kBAAmBA,EACnBlkB,WAAYA,EAAW9sB,UAEvBoF,EAAAA,EAAAA,MAAC0pB,GAAAA,EAAU,CAAA9uB,SAAA,EACTF,EAAAA,EAAAA,KAACivB,GAAAA,EAAc,CAAC0sB,QAAM,EAAAz7C,UACpBF,EAAAA,EAAAA,KAAC47C,GAAAA,GAAQ,CACPz+C,GAAIA,EACJipB,YAAaA,EACb9jB,SAAUA,CAACkjB,EAAQ9qB,IAnB7B,SAAyBA,GACvB4H,EAAS5H,EAAMmhD,YACjB,CAiB+CC,CAAgBphD,GACrDA,MAAOA,GAAS,GAChB,mBAAkByC,EAAK,GAAGA,oBAAkBwE,EAC5Ci5C,UAAW1J,EAAoB,aAAUvvC,EACzC8B,KAAe,aAATA,EAAuBg4C,EAAa,OAAS,WAAch4C,EACjEs4C,gBAAiB7zB,EAAa,eAAYvmB,EAC1CZ,WAAYA,EACZw6C,UAAWA,EACX5L,aAAcA,GAAgB,MAC9B,UAASxyC,EACT6+C,gBAAkCr6C,IAAtB65C,IAA0CA,MAGhD,aAAT/3C,IACCzD,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLlC,QAAQ,UACRsD,QAASA,IAAM+0C,GAAeD,GAC9B16C,WAAYA,GAAcmnB,EAAWhoB,SAEpCu7C,GAAaz7C,EAAAA,EAAAA,KAACi8C,GAAAA,GAAO,KAAMj8C,EAAAA,EAAAA,KAACk8C,GAAAA,GAAY,MAG5Cd,IACCp7C,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLkD,OAAQ,UAAUrL,WAClBiG,QAAQ,UACRsD,QAASA,IACP00C,KAAch/B,IACZ,GAAIi/B,EAAa,CACf,MAAM5gD,EAAQ4gD,EAAYj/B,GAC1B0J,EAAS3oB,EAAM1C,EAAyD,CACtEyhD,gBAAgB,GAEpB,IACCf,GAEL,aAAW,eACXr6C,WAAYA,GAAc6sC,EAAa1tC,UAEvCF,EAAAA,EAAAA,KAACunC,GAAAA,GAAU,MAGd9uB,GAAUA,MAEC,EAGpB64B,MAAO,CACLT,WACAJ,WAEAwK,UACmB,iBAAV39C,GAA2C,iBAAd29C,EAChC,CACEvgD,MAAOugD,EACP5tC,QAAS,GAAG2iC,GACV1yC,EAAM+yC,yCACc4K,iBAExBA,EAENC,UACmB,iBAAV59C,GAA2C,iBAAd49C,EAChC,CACExgD,MAAOwgD,EACP7tC,QAAS,GAAG2iC,GACV1yC,EAAM+yC,+CACoB6K,iBAE9BA,EAENrb,IACmB,iBAAVviC,GAAsC,iBAARuiC,GAAmC,iBAARA,EAO5Dob,EANA,CACEvgD,MAAOmlC,EACPxyB,QAAS,GAAG2iC,GACV1yC,EAAM+yC,0CACexQ,MAI/BlsB,IACmB,iBAAVrW,GAAsC,iBAARqW,GAAmC,iBAARA,EAO5DsnC,EANA,CACEvgD,MAAOiZ,EACPtG,QAAS,GAAG2iC,GACV1yC,EAAM+yC,+CACoB18B,MAIpCwnC,YAIR,C,gBCWO,SAASiB,GAIdt/C,GACA,MAAM,KACJ2G,EAAI,KACJrG,EAAI,MACJE,EAAK,eACL8zC,EAAc,UACdD,EAAS,mBACT4G,EAAkB,YAClB3xB,EAAW,OACX3N,EAAM,WACNi/B,EAAU,WACV32C,EAAU,WACVmnB,EAAU,WACV8E,EAAU,SACVyjB,EAAQ,UACRwK,EAAS,UACTC,EAAS,IACTrb,EAAG,IACHlsB,EAAG,QACHwnC,EAAO,YACPC,EAAW,WACXC,EAAU,YACVC,EAAW,UACXC,EAAS,aACT5L,GACE7yC,EAEEK,EAAKN,EAAMC,IACX,EAAEoK,IAAMC,EAAAA,EAAAA,OAER,QACJupC,EAAO,SACP3qB,EACA4qB,WAAW,aAAE/C,EAAY,aAAE6K,EAAY,cAAE7J,KACvCgC,EAAAA,GAAAA,OAEG6K,EAAYC,IAAiBhgD,EAAAA,EAAAA,WAAS,IAEtCmF,GAAgBV,IACjB0wC,EAAWV,GAA0BrzC,EAAMQ,MAAOR,EAAMkwB,YAExDssB,EAAYjG,KAASzE,EAAyB9xC,EAAMM,MAK1D,OACE4C,EAAAA,EAAAA,KAAC8wC,GAAAA,GAAU,CACT1zC,KAAMA,EACNszC,QAASA,EACTK,kBAAgB,EAChBnjB,aAAc9wB,EAAM8wB,aACpBzgB,OAAQA,EAAG6jC,OAAS1uC,WAAU5H,QAAO0C,QAAQ6zC,YAAcjkC,aACzD,MAAMkkC,EAAoBlkC,GAAOK,QAC7BojC,GAAYgI,EACV53C,EAAanB,WACbsN,GAAOK,aACT1L,EAEJ,IAAI06C,EAAsB3hD,EAC1B,GACO,mBADC+I,GAEA/I,EAAO,CACT,MAAM4hD,EAAU,IAAI1qC,KAAKlX,GAEzB2hD,EADkB,IAAIzqC,KAAK0qC,EAAQC,UAA0C,IAA9BD,EAAQE,qBAC/BC,cAAchkB,MAAM,EAAG,GACjD,CAkCJ,OACEz4B,EAAAA,EAAAA,KAACy3C,GAAa,CACZG,QAASz6C,EACTG,MAAOA,EACP8zC,eAAgBA,GAAkB9zC,EAClC6zC,UAAWA,EACX4G,mBAAoBA,EACpBL,WAAYA,EACZxG,kBAAmBA,EACnBlkB,WAAYA,EAAW9sB,UAEvBoF,EAAAA,EAAAA,MAAC0pB,GAAAA,EAAU,CAAA9uB,SAAA,EACTF,EAAAA,EAAAA,KAACivB,GAAAA,EAAc,CAAC0sB,QAAM,EAAAz7C,UACpBF,EAAAA,EAAAA,KAAC08C,GAAAA,GAAS,CACRv/C,GAAIA,EACJipB,YAAaA,EACb9jB,SAAUA,CAACkjB,EAAQ9qB,IA9C7B,SAAyBA,GACvB,OAAQoC,EAAM2G,MACZ,IAAK,iBACHnB,EAAS,IAAIsP,KAAKlX,GAAO+hD,eACzB,MAEF,IAAK,SAAU,CACb,IAAIE,EAAcniD,OAAOE,GACzB,GAAc,KAAVA,GAAgBkiD,MAAMD,GAGxB,OAFA52B,EAAS3oB,EAAM,WACfkF,EAAS,WAICX,IAARgS,GAAqBgpC,EAAcniD,OAAOmZ,KAC5CgpC,EAAcniD,OAAOmZ,SAGXhS,IAARk+B,GAAqB8c,EAAcniD,OAAOqlC,KAC5C8c,EAAcniD,OAAOqlC,IAEvB9Z,EAAS3oB,EAAMu/C,GACfr6C,EAASq6C,GACT,KACF,CACA,QACEr6C,EAAS5H,EAAMmhD,aAErB,CAkB+CC,CAAgBphD,GACrDA,MAAO2hD,GAAe,GACtB,mBAAkBl/C,EAAK,GAAGA,oBAAkBwE,EAC5Ci5C,UAAW1J,EAAoB,aAAUvvC,EACzC8B,KAAe,aAATA,EAAuBg4C,EAAa,OAAS,WAAch4C,EACjEs4C,gBAAiB7zB,EAAa,eAAYvmB,EAC1CZ,WAAYA,EACZw6C,UAAWA,EACX5L,aAAcA,GAAgB,MAC9B,UAASxyC,MAGH,aAATsG,IACCzD,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLlC,QAAQ,UACRsD,QAASA,IAAM+0C,GAAeD,GAC9B16C,WAAYA,GAAcmnB,EAAWhoB,SAEpCu7C,GAAaz7C,EAAAA,EAAAA,KAACi8C,GAAAA,GAAO,KAAMj8C,EAAAA,EAAAA,KAACk8C,GAAAA,GAAY,MAG5Cd,IACCp7C,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLkD,OAAQ,UAAUrL,WAClBiG,QAAQ,UACRsD,QAASA,IACP00C,KAAch/B,IACZ,GAAIi/B,EAAa,CACf,MAAM5gD,EAAQ4gD,EAAYj/B,GAC1B0J,EAAS3oB,EAAM1C,EAAyD,CACtEyhD,gBAAgB,GAEpB,IACCf,GAEL,aAAW,eACXr6C,WAAYA,GAAc6sC,EAAa1tC,UAEvCF,EAAAA,EAAAA,KAACunC,GAAAA,GAAU,CAAC,UAAQ,oBAGvB9uB,GACDzY,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAAS,CACP,CACEhG,MAAO4J,EAAE,gBACTzD,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/BkG,QAASA,KACPof,EACEjpB,EAAMM,KACNk8C,EACD,EAEH54C,SAAUA,KAAO5D,EAAM48C,YAAch/C,IAAU4+C,GAEjD,CACEh8C,MAAO4J,EAAE,oBACTzD,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/BkG,QAASA,KACPof,EACEjpB,EAAMM,KACNN,EAAM8wB,aAIP,EAEHltB,SAAUA,KAAO5D,EAAMu0C,aAAe32C,IAAUoC,EAAM8wB,eAG1DvqB,QAASuB,EAAAA,GAAc8rC,QACvBttC,SAAU6F,GAAAA,GAAiBC,YAGjB,EAGpBooC,MAAO,CACLT,WACAJ,WAEAwK,UACmB,iBAAV39C,GAA2C,iBAAd29C,EAChC,CACEvgD,MAAOugD,EACP5tC,QAAS,GAAG2iC,GACV1yC,EAAM+yC,yCACc4K,iBAExBA,EAENC,UACmB,iBAAV59C,GAA2C,iBAAd49C,EAChC,CACExgD,MAAOwgD,EACP7tC,QAAS,GAAG2iC,GACV1yC,EAAM+yC,+CACoB6K,iBAE9BA,EAENrb,IACmB,iBAAVviC,GAAsC,iBAARuiC,GAAmC,iBAARA,EAO5Dob,EANA,CACEvgD,MAAOmlC,EACPxyB,QAAS,GAAG2iC,GACV1yC,EAAM+yC,oDACyBxQ,MAIzClsB,IACmB,iBAAVrW,GAAsC,iBAARqW,GAAmC,iBAARA,EAO5DA,EANA,CACEjZ,MAAOiZ,EACPtG,QAAS,GAAG2iC,GACV1yC,EAAM+yC,+CACoB18B,MAIpCwnC,YAIR,CCnbO,MAAM0B,IAAwBj9C,EAAAA,EAAAA,eAAmC,CACtEiG,QAAQ,EACRi3C,SAAUA,KAAA,CAAS,KAGd,SAASC,KACd,OAAO38C,EAAAA,EAAAA,YAAWy8C,GACpB,CAEO,SAASG,GAAuBlgD,GACrC,MAAMmgD,EAAO3hD,EAAc,OACpBuK,EAAQ6gB,IAAWhrB,EAAAA,EAAAA,WAAS,IAAMuhD,IACnCH,GAAWhhD,EAAAA,EAAAA,cAAaiE,SACP4B,IAAjB5B,EAAM8F,QACR6gB,EAAQ3mB,EAAM8F,OAChB,GACC,IAEH,OADA9J,EAAAA,EAAAA,YAAU,IAAM+gD,EAAS,CAAEj3C,OAAQo3C,KAAS,CAACA,EAAMH,KAEjD98C,EAAAA,EAAAA,KAAC68C,GAAsB58C,SAAQ,CAACvF,MAAO,CAAEmL,SAAQi3C,YAAW58C,SACzDpD,EAAMoD,UAGb,CC7BA,MAAMg9C,IAAwBt9C,EAAAA,EAAAA,eAE5B,CAAC,CAAC,EAAG,SAYA,SAASu9C,GAA6BrgD,GAE3C,MAAOsgD,EAAQC,IAAa3hD,EAAAA,EAAAA,UAAoC,CAAC,GAC3D4hD,GAAgBxhD,EAAAA,EAAAA,cAAayhD,IACjCF,EAAUG,GAAuB,GAAID,GAAY,GAChD,IACG7iD,GAAQ2J,EAAAA,EAAAA,UACZ,IAAM,CAAC+4C,EAAQE,IACf,CAACF,EAAQE,IAEX,OACEt9C,EAAAA,EAAAA,KAACk9C,GAAsBj9C,SAAQ,CAACvF,MAAOA,EAAMwF,SAAEpD,EAAMoD,UAEzD,CAEA,SAASs9C,GAAuBjI,EAAcgI,GAC5C,MAAMH,EAAoC,CAAC,EAU3C,OATAG,EAAWnkB,SAAS/c,IAClB,MAAMohC,GAAYlI,EAAO,IAAMl5B,EAAKqhC,MAAM/iD,QAAQ,KAAM,KACpD,OAAQ0hB,GAA2B,iBAAZA,EAAKlf,KAC9BigD,EAAO/gC,EAAKlf,IAAMsgD,GAEhB,aAAcphC,GAChBxS,OAAO8zC,OAAOP,EAAQI,GAAuBC,EAAUphC,EAAKnc,UAC9D,IAEKk9C,CACT,C,0KCSO,MAAMQ,IAA2Bh+C,EAAAA,EAAAA,eAAkC,CACxEi+C,yBAAyB,EACzBC,2BAA4BA,KAC1B,MAAM,IAAIx5B,MAAM,2CAA2C,EAE7Dy5B,mBAAoB,CAAC,EACrBC,sBAAuBA,KACrB,MAAM,IAAI15B,MAAM,2CAA2C,IAIxD,SAAS25B,KACd,OAAO79C,EAAAA,EAAAA,YAAWw9C,GACpB,CAEO,SAASM,GAA0BphD,GACxC,MAAO+gD,EAAyBC,IAA8BpiD,EAAAA,EAAAA,WAAS,IAChEqiD,EAAoBC,IAAyBtiD,EAAAA,EAAAA,UAElD,CAAC,GACH,OACEsE,EAAAA,EAAAA,KAAC49C,GAAyB39C,SAAQ,CAChCvF,MAAO,CACLqjD,qBACAC,wBACAH,0BACAC,8BACA59C,SAEDpD,EAAMoD,UAGb,CAEO,SAASi+C,GAAwBrhD,GACtC,MAAM,IAAQqK,EAAAA,EAAAA,OAER,wBAAE02C,EAAuB,2BAAEC,GAA+BG,KAC1DG,GAAYpoC,EAAAA,EAAAA,QAAwB,OAOpC,mBAAE+nC,GAAuBE,KAE/B,OACEj+C,EAAAA,EAAAA,KAACq+C,GAAAA,GAAM,CAACz3C,WAAYi3C,EAAyBS,SAAUA,IAAMR,GAA2B,GAAM59C,UAC5FF,EAAAA,EAAAA,KAACu+C,GAAAA,EAAa,CACZC,cACEx+C,EAAAA,EAAAA,KAACy+C,GAAAA,EAAkB,CAAAv+C,UACjBoF,EAAAA,EAAAA,MAACo5C,GAAAA,EAAkB,CAAC,UAAQ,uBAAsBx+C,SAAA,EAChDF,EAAAA,EAAAA,KAAC2+C,GAAAA,EAAwB,CAACthD,MAAO6J,EAAE,iBAAiBhH,UAClDF,EAAAA,EAAAA,KAAC4+C,GAAAA,EAAiB,CAACj4C,QAdjC,WACEm3C,GAA2B,GAC3BM,EAAUhoC,SAAS2R,OACrB,OAaY/nB,EAAAA,EAAAA,KAAC6+C,GAAAA,EAAsB,CAAA3+C,UACrBF,EAAAA,EAAAA,KAAC8+C,GAAAA,EAA2B,CAAA5+C,SACzB2J,OAAOC,OAAOi0C,GAAoBh3C,KAAI,CAAC2W,EAAO1W,KAC7ChH,EAAAA,EAAAA,KAAC++C,GAAqB,CAAarhC,MAAOA,GAAd1W,cAMvC9G,UAEDF,EAAAA,EAAAA,KAACg/C,GAAuB,CAAA9+C,SAAEpD,EAAMoD,cAIxC,CAEA,MAAM8+C,IAA0Bt8C,EAAAA,EAAAA,IAAOu8C,GAAAA,GAAkBr8C,WAAA,CAAAC,YAAA,mBAAzBH,CAAyB,sBAIzD,SAASq8C,GAAsBjiD,GAC7B,MAAM,IAAQqK,EAAAA,EAAAA,OACPP,EAAYipB,IAAiBn0B,EAAAA,EAAAA,WAAS,GAC7C,OACEsE,EAAAA,EAAAA,KAACk/C,GAAAA,EAAuB,CACtB7hD,MAAOP,EAAM4gB,MAAMrgB,MACnBuJ,WAAYA,EACZ0V,MAAOxf,EAAM4gB,MAAMyhC,cAAc37C,OACjC86C,SAAUA,CAACxxC,EAAGw7B,IAAWzY,EAAcyY,GAAQpoC,UAE/CoF,EAAAA,EAAAA,MAAC85C,GAAAA,EAAsB,CAAC1+C,UAAWkG,EAAW1G,SAAA,CAC3CpD,EAAM4gB,MAAMyhC,cAAcp4C,KAAI,CAACs4C,EAAcr4C,KAC5ChH,EAAAA,EAAAA,KAACs/C,GAAgB,CAAaD,aAAcA,GAArBr4C,KAEa,IAArClK,EAAM4gB,MAAMyhC,cAAc37C,SACzB8B,EAAAA,EAAAA,MAACuxB,GAAAA,EAAU,CAACxzB,QAASq0B,GAAAA,EAAkBC,KAAKz3B,SAAA,EAC1CF,EAAAA,EAAAA,KAAC+2B,GAAAA,EAAgB,CAAC/b,aAAa,KAAKgc,UAAW9vB,EAAE,uBACjDlH,EAAAA,EAAAA,KAACm3B,GAAAA,EAAc,CAAAj3B,SAAEgH,EAAE,kDAM/B,CAEA,SAASo4C,GAAiBxiD,GACxB,MAAMyiD,EAC2B,SAA/BziD,EAAMuiD,aAAah8C,aAAqB1B,EAAY7E,EAAMuiD,aAAah8C,QACnE+R,GAAWC,EAAAA,GAAAA,OACX,2BAAEyoC,GAA+BG,KACjCuB,EAAY1iD,EAAMuiD,aAAaG,UACjC,IAAI5tC,KAAK9U,EAAMuiD,aAAaG,gBAC5B79C,EACE89C,EAAkBD,EACpB,GAAGA,EAAUvtC,wBAAwButC,EAAUttC,4BAC/CvQ,EACJ,OACE2D,EAAAA,EAAAA,MAACo6C,GAAAA,EAA0B,CACzBr8C,QAASvG,EAAMuiD,aAAah8C,QAC5BsD,QAASA,KACPyO,EAAStY,EAAMuiD,aAAav3C,IAC5Bg2C,GAA2B,EAAM,EACjC59C,SAAA,EAEFF,EAAAA,EAAAA,KAAC2/C,GAAAA,EAAgC,CAC/BtiD,MAAOP,EAAMuiD,aAAahiD,MAC1BgG,QAASk8C,KAEXv/C,EAAAA,EAAAA,KAAC4/C,GAAAA,EAA8B,CAACJ,UAAWC,EAAgBv/C,SACxDpD,EAAMuiD,aAAazjC,gBAI5B,CC7KO,MAAMikC,IAAyBjgD,EAAAA,EAAAA,eAAsC,CAC1EkgD,cAAe,CAAC,EAChBC,iBAAkBA,SAGb,SAASC,GAAwBljD,GACtC,MAAOgjD,EAAeC,IAAoBrkD,EAAAA,EAAAA,YAC1C,OACEsE,EAAAA,EAAAA,KAAC6/C,GAAuB5/C,SAAQ,CAACvF,MAAO,CAAEolD,gBAAeC,oBAAmB7/C,SACzEpD,EAAMoD,UAGb,CAEO,MAAM+/C,GAAqBA,KAA8B7/C,EAAAA,EAAAA,YAAWy/C,ICNpE,SAASK,GAAcpjD,GAC5B,OACEkD,EAAAA,EAAAA,KAACF,EAA6B,CAAAI,UAC5BF,EAAAA,EAAAA,KAAC+P,GAAoB,CAACS,uBAAwB1T,EAAM0T,uBAAuBtQ,UACzEF,EAAAA,EAAAA,KAACm9C,GAA4B,CAAAj9C,UAC3BF,EAAAA,EAAAA,KAACs4B,GAAkB,CAAAp4B,UACjBF,EAAAA,EAAAA,KAACgL,GAAwB,CAAA9K,UACvBF,EAAAA,EAAAA,KAACg9C,GAAsB,CAAA98C,UACrBF,EAAAA,EAAAA,KAACk+C,GAAyB,CAAAh+C,UACxBF,EAAAA,EAAAA,KAACggD,GAAuB,CAAA9/C,SAAEpD,EAAMoD,wBASlD,C,4BCLA,SAASigD,GAAYrjD,GACnB,MAAMsY,GAAWC,EAAAA,GAAAA,MACjB,OAAKvY,EAAMsjD,aAETpgD,EAAAA,EAAAA,KAACqgD,GAAAA,EAAU,CAACx+C,MAAO/E,EAAM+E,MAAM3B,SAC5BpD,EAAMsjD,YAAYr5C,KAAI,CAACu5C,EAAYt5C,IAC7Bs5C,EAAWhjD,OAEd0C,EAAAA,EAAAA,KAACugD,GAAAA,EAAc,CACb,UAASD,EAAWhjD,MACpBH,GAAImjD,EAAWnjD,GAEf8K,UAAWq4C,EAAWr4C,UACtBu4C,cAA4B7+C,IAAlB2+C,EAAWx4C,GAAiB5H,SAErCogD,EAAWx4C,IACV9H,EAAAA,EAAAA,KAAA,KACE+H,KAAMu4C,EAAWx4C,GACjB,UAASw4C,EAAWhjD,MACpBqJ,QAAU2J,IACRA,EAAEwF,iBACGwqC,EAAWx4C,IAChBsN,EAASkrC,EAAWx4C,GAAG,EACvB5H,SAEDogD,EAAWhjD,QAGdgjD,EAAWhjD,OAjBR0J,IALqBhH,EAAAA,EAAAA,KAACsB,EAAAA,SAAQ,GAAM0F,QAJpBhH,EAAAA,EAAAA,KAACsB,EAAAA,SAAQ,GAiC1C,CAsCO,SAASm/C,GAAW3jD,GACzB,MAAM,MAAEO,EAAK,YAAEue,EAAW,SAAE8kC,EAAQ,cAAEC,EAAa,OAAE92B,GAAW/sB,EAC1D8jD,EAAOtlD,EAAc,MACrB2hD,EAAO3hD,EAAc,MACrBm6B,EAAen6B,EAAc,OAC5BuF,GAAgBV,KAEjB,cAAE2/C,GAAkBG,KAEpBY,GAAkBx8C,EAAAA,EAAAA,UAAQ,KAC9B,MAAMw8C,EAAkB,GAMxB,OALI/jD,EAAMsjD,cACRS,EAAgB98C,QAAQjH,EAAMsjD,aAC1BN,GAAee,EAAgB98C,KAAK+7C,IAGnCe,CAAe,GACrB,CAAC/jD,EAAMsjD,YAAaN,IAEvB,OACE9/C,EAAAA,EAAAA,KAACoY,GAAAA,GAAW,CACV/U,QAASy9C,GAAAA,GAAoBC,MAC7Br6C,UAAU,2BACV7E,MAAO,CACLga,WAAuCohC,EAAO,GAAK,GACnDt+B,cAAes+B,EAAO,GAAK,IAC3B/8C,UAEFoF,EAAAA,EAAAA,MAAC0T,GAAAA,EAAK,CAACnQ,WAAS,EAAA3I,SAAA,EACdoF,EAAAA,EAAAA,MAAC6E,EAAAA,EAAI,CAACC,SAAU,CAAEC,QAAS,UAAYvB,WAAY,CAAEuB,QAAS,qBAAsBnK,SAAA,EAClFoF,EAAAA,EAAAA,MAACkF,EAAAA,EAAQ,CAACoQ,KAAM,CAAEvQ,QAAS,QAASnK,SAAA,CACjC2gD,EAAgBr9C,OAAS,IACxBxD,EAAAA,EAAAA,KAACmgD,GAAW,CACVC,YAAaS,GAAiBr9C,OAASq9C,OAAkBl/C,EACzDE,MAAO,CAAE8c,cAAeiiC,EAAO,EAAI,KAGtCvjD,EACCP,EAAMkkD,WACJhhD,EAAAA,EAAAA,KAAC6Y,GAAAA,EAAO,CACNC,cAAehc,EAAMmkD,gBAAkBnkD,EAAMO,MAC7C0b,aACEzT,EAAAA,EAAAA,MAAC0T,GAAAA,EAAK,CAACnQ,WAAS,EAAA3I,SAAA,CACc,iBAApBpD,EAAMkkD,WACZhhD,EAAAA,EAAAA,KAACmZ,GAAAA,EAAS,CAAAjZ,SAAEpD,EAAMkkD,YAElBlkD,EAAMkkD,UAAUj6C,KAAI,CAAC4R,EAAM3R,KACzBhH,EAAAA,EAAAA,KAACmZ,GAAAA,EAAS,CAAAjZ,SAAcyY,GAAR3R,KAGnBlK,EAAMokD,eACLlhD,EAAAA,EAAAA,KAACmZ,GAAAA,EAAS,CAAAjZ,UACRF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLrC,MAAMlD,EAAAA,EAAAA,KAACoZ,GAAAA,EAAmB,IAC1B/V,QAAQ,OACRsD,QAASA,IAAMhL,OAAOsO,KAAKnN,EAAMokD,aAAc,UAC/C9tC,UAAQ,EAAAlT,SAEPW,EAAa5C,qBAMxBmF,SAAS,eAAclD,UAEvBoF,EAAAA,EAAAA,MAACyV,GAAAA,EAAK,CAAC,UAAQ,aAAaC,aAAa,KAAI9a,SAAA,CAC1C7C,GACD2C,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLlC,QAAQ,OACRxB,MAAO,CACLsc,QAAS,EACTgK,UAAW,EACXrmB,WAAY,EACZmZ,cAAe,OACf/a,UAEFF,EAAAA,EAAAA,KAACsZ,GAAAA,GAA0B,YAKjCtZ,EAAAA,EAAAA,KAAC+a,GAAAA,EAAK,CAAC,UAAQ,aAAaC,aAAa,KAAI9a,SAC1C7C,KAIL2C,EAAAA,EAAAA,KAAC+a,GAAAA,EAAK,CAACC,aAAa,KAAI9a,UACtBF,EAAAA,EAAAA,KAACm2B,GAAAA,EAAQ,CAAChgB,MAAM,YAGnBsf,GAAgB7Z,IACf5b,EAAAA,EAAAA,KAAA,OAAK,UAAQ,kBAAkB6B,MAAO,CAAEga,WAAYohC,EAAO,EAAI,EAAG90C,QAAS,IAAMjI,SAC9E0b,OAINve,IAAUsjD,GAAiBD,KAC1Bp7C,EAAAA,EAAAA,MAAC6E,EAAAA,EAAI,CACH,UAAQ,cACR09B,UAAW,CAAEx9B,QAAS,UACtBC,WAAY,CAAED,QAAS,eAAgBnP,GAAI,gBAC3CqP,eAAgB,CAAEF,QAAS,wBAAyBnK,SAAA,CAEnDwgD,IAAY1gD,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAACoQ,KAAM,CAAEvQ,QAAS,QAASnK,SAAEwgD,IAClDC,IAAiB3gD,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAAtK,SAAEygD,UAIlC92B,MAIT,CCxMO,SAASs3B,GAAWrkD,GACzB,MAAO+D,GAAgBV,IACvB,OACEH,EAAAA,EAAAA,KAACwM,GAAa,CAACa,QAASxM,EAAa3C,UAAUgC,UAC7CF,EAAAA,EAAAA,KAAA,OAAK6B,MAAO,CAAE0N,QAAS,OAAQqP,cAAe,SAAUtI,OAAQ,OAAQkE,UAAW,QAASta,SACzFpD,EAAMoD,YAIf,C,sFCVO,SAASkhD,GAAatkD,GAC3B,MAAM2nB,EAAkBnpB,EAAc,MACtC,OACEgK,EAAAA,EAAAA,MAAC+7C,GAAAA,EAAQ,CACP9xC,QAAS,CAAElF,QAAS,UACpBxI,MAAO,CACL4V,aAAc,kBACd7P,aAAc,GACd1H,SAAA,EAEFF,EAAAA,EAAAA,KAACshD,GAAkB,IAClB78B,IACCzkB,EAAAA,EAAAA,KAACuhD,GAAAA,EAAY,CAAArhD,UACXF,EAAAA,EAAAA,KAACwhD,GAAAA,EAAa,CAACv5C,UAAYnL,IAAUkD,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,IAAK/K,EAAOgL,GAAG,MAAO5H,SAC7DpD,EAAM2kD,WAIbzhD,EAAAA,EAAAA,KAAC0hD,GAAAA,EAAe,CAAC7/C,MAAO,CAAEC,WAAY,EAAGmY,UAAW,GAAI/Z,UACtDF,EAAAA,EAAAA,KAACk2B,GAAAA,EAAO,CACN/4B,GAAG,UACH,UAAQ,UACRi5B,MAAO,CAAE/rB,QAAS,aAClBxI,MAAO,CAAEsc,QAAS,GAAIje,UAEtBF,EAAAA,EAAAA,KAACg1B,GAAAA,EAAc,CAAA90B,SAAEpD,EAAMoD,iBAKjC,CAEO,SAASohD,KACd,MAAMK,EAAS5E,KACf,OACE/8C,EAAAA,EAAAA,KAAC4hD,GAAAA,EAAc,CAACj7C,QAASA,IAAMg7C,EAAO7E,SAAS,CAAEj3C,QAAS87C,EAAO97C,SAAU3F,UACzEF,EAAAA,EAAAA,KAAC6hD,GAAAA,EAAgB,CAAC,UAAS,aAAcx+C,QAAQ,QAAQ,aAAW,oBAAmBnD,UACrFF,EAAAA,EAAAA,KAAC8hD,GAAAA,GAAQ,OAIjB,C,gBCtDO,SAASC,KACd,MAAM,2BAAEjE,EAA0B,mBAAEC,GAAuBE,KAErD3hC,EAAQzS,OAAOC,OAAOi0C,GAAoBhgC,QAC9C,CAACzB,EAAOoB,IAAUpB,EAAQoB,EAAMyhC,cAAc37C,QAC9C,GAGF,OACExD,EAAAA,EAAAA,KAACgiD,GAAAA,EAAiB,CAChB,UAAQ,qBACR3+C,QAAmB,IAAViZ,EAAc,OAAS,SAChCA,MAAOA,EACP3V,QAASA,IAAMm3C,GAA4B7zC,IAAUA,KAG3D,C,4BCdO,SAASg4C,KACd,MAAOnyC,EAAUiB,IAAe3Q,EAAAA,EAAAA,YAAWwP,IAC3C,MAA6B,SAAzBE,EAASoB,aAETlR,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACL,UAAQ,gBACRlC,QAAQ,QACRsD,QAASA,IAAMoK,EAAY,IAAKjB,EAAUW,MAAO,UAAWvQ,UAE5DF,EAAAA,EAAAA,KAACkiD,GAAAA,GAAQ,OAKbliD,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACL,UAAQ,aACRlC,QAAQ,QACRsD,QAASA,IAAMoK,EAAY,IAAKjB,EAAUW,MAAO,SAAUvQ,UAE3DF,EAAAA,EAAAA,KAACmiD,GAAAA,GAAO,KAGd,C,uFCTO,SAASC,GAAetlD,GAC7B,MAAQygD,WAAY8E,GAAoBvlD,EAClC6kD,EAAS5E,KAEf,OACE/8C,EAAAA,EAAAA,KAACsiD,GAAAA,GAAW,CAACC,cAAeZ,EAAO97C,OAAQa,UAAU,aAAYxG,UAC/DF,EAAAA,EAAAA,KAACwiD,GAAAA,EAAe,CAAAtiD,UACdF,EAAAA,EAAAA,KAACyiD,GAAAA,GAAG,CAAC,UAAQ,kBAAkB/7C,UAAU,WAAUxG,UACjDF,EAAAA,EAAAA,KAAC0iD,GAAAA,EAAO,CAAAxiD,UACNF,EAAAA,EAAAA,KAAC2iD,GAAmB,CAACC,UAAW9lD,EAAM+lD,UAAY,GAAI/pB,MAAOupB,WAMzE,CAEA,SAASM,GAAoB7lD,GAC3B,OACEkD,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SACGpD,EAAMg8B,MACJ36B,QAAQke,KACH,WAAYA,KACS,IAAhBA,EAAK4G,SAIflc,KAAI,CAACsV,EAAMrV,KACVhH,EAAAA,EAAAA,KAAC8iD,GAA2B,CAE1BzmC,KAAMA,EACNumC,UAAW9lD,EAAM8lD,WAFZvmC,EAAKlf,IAAMkf,EAAK/e,OAAS0J,MAO1C,CAEA,SAAS87C,GAA4BhmD,GACnC,MAAM,KAAEuf,GAASvf,GACV8J,EAAYipB,IAAiBn0B,EAAAA,EAAAA,WAClC,IACmD,SAAjDwU,aAAaC,QAAQ,yBAC2C,SAAhED,aAAaC,SAASkM,EAAKlf,IAAMkf,EAAK/e,OAAS,eAOnD,IAAIH,EACJ,GAAI,OAAQL,EAAMuf,KAChBlf,EAAKL,EAAMuf,KAAKlf,QACX,GAAI,aAAcL,EAAMuf,KAAM,CACnC,MAAM0mC,EAAYjmD,EAAMuf,KAAKnc,SAASsE,MAAMwQ,GAAyB,KAAfA,EAAM0oC,OACxDqF,GAAa,OAAQA,IACvB5lD,EAAK4lD,EAAU5lD,GAEnB,CAEA,MAAM6lD,EV5CD,WACL,MAAM5tC,GAAWC,EAAAA,GAAAA,MACX4nC,EAAO3hD,EAAc,MACrBqmD,EAAS5E,KAQf,OAPgBjhD,EAAAA,EAAAA,cACb4hD,IACCtoC,EAASsoC,GACJT,GAAM0E,EAAO7E,SAAS,CAAEj3C,QAAS87C,EAAO97C,QAAS,GAExD,CAACuP,EAAU6nC,EAAM0E,GAGrB,CUgCyBsB,GACvB,IAAIC,EAAQpmD,EAAM8lD,UAAY,IAAMvmC,EAAKqhC,KAEzC,GADAwF,EAAQA,EAAMvoD,QAAQ,KAAM,KACV,MAAd0hB,EAAKqhC,MAAgB,aAAcrhC,EACrC,OAAOrc,EAAAA,EAAAA,KAAC2iD,GAAmB,CAAC7pB,MAAOzc,EAAKnc,SAAU0iD,UAAW,KAG/D,MAAMO,EAAmB,aAAc9mC,GAAQA,EAAKnc,UAAUsE,MAAMwQ,GAAUA,EAAM1X,QAC9E8lD,EAA+B,CAAE3Q,SAAU,QAAStqC,QAAS,GAAK6T,UAAW,QAEnF,IAAKmnC,GAAoB,UAAW9mC,EAAM,CACxC,IAAIqhC,EAAQpT,IAAkC4Y,EAC9CxF,EAAOA,EAAK/iD,QAAQ,KAAM,KAE1B,MAAM6lD,GAAWnkC,EAAKtU,MAAesvB,SAASgsB,SAASC,WAAW5F,GAClE,OACEp4C,EAAAA,EAAAA,MAACi+C,GAAAA,EAAO,CACNpmD,GAAIA,EACJ4K,KAAMsU,EAAKtU,MAAQm7C,EACnB1C,SAAUA,EACV95C,UAAW85C,EAAW,kBAAe7+C,EACrCgF,QAASA,IAAO0V,EAAKtU,KAAOpM,OAAOsO,KAAKoS,EAAKtU,KAAM,UAAYi7C,EAAeE,GAC9EvnB,OAAQtf,EAAKtU,KAAO,SAAW,GAC/B,UAAS5K,EACT0E,MAAO,CAAE0N,QAAS,OAAQzG,WAAY,UAAW8V,cAAe,UAAW1e,SAAA,EAE3EoF,EAAAA,EAAAA,MAAC6E,EAAAA,EAAI,CAAAjK,SAAA,EACHF,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAACoQ,KAAM,CAAEvQ,QAAS,QAASnK,SAAEmc,EAAK/e,QAC1C,UAAW+e,GAAQA,EAAKolB,QACvBzhC,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAAtK,UACPF,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAACoG,WAAS,EAACpX,QAAQ,UAAU/G,MAAO+f,EAAKulB,WAAW1hC,SACvDmc,EAAKolB,UAIX,SAAUplB,GAAQA,EAAKtU,OACtB/H,EAAAA,EAAAA,KAAA,QAAM0G,UAAU,sBAAqBxG,UACnCF,EAAAA,EAAAA,KAAA,QAAM0G,UAAU,2BAA0BxG,UACxCF,EAAAA,EAAAA,KAACoZ,GAAAA,EAAmB,WAK3BiD,EAAKhB,WAAYrb,EAAAA,EAAAA,KAAA,OAAK6B,MAAOuhD,EAAcljD,SAAEmc,EAAKhB,aAGzD,CAEA,OAAK8nC,QAAmCxhD,IAAf0a,EAAK/e,MAIzB+e,EAAK/e,OAKR0C,EAAAA,EAAAA,KAACwjD,GAAAA,EAAa,CACZnmD,OAEIiI,EAAAA,EAAAA,MAAA,OAAApF,SAAA,EACEF,EAAAA,EAAAA,KAAA,OAAK6B,MAAO,CAAEma,UAAW,QAAS9b,SAAEmc,EAAK/e,QACxC+e,EAAKhB,WAAYrb,EAAAA,EAAAA,KAAA,OAAK6B,MAAOuhD,EAAcljD,SAAEmc,EAAKhB,cAIzDzU,WAAYA,EACZ03C,SAAUA,CAACmF,EAAIrgC,IAlFEA,KACnByM,EAAczM,GACdlT,aAAac,SAASqL,EAAKlf,IAAMkf,EAAK/e,OAAS,YAAa8lB,EAAW,OAAS,QAAQ,EAgFjDglB,CAAYhlB,GAAUljB,UAE3DF,EAAAA,EAAAA,KAAC2iD,GAAmB,CAAC7pB,MAAOzc,EAAKnc,SAAU0iD,UAAWM,OAhBjDljD,EAAAA,EAAAA,KAAC2iD,GAAmB,CAAC7pB,MAAOzc,EAAKnc,SAAU0iD,UAAWM,IAJtD,IAuBX,CC7IO,SAASQ,GAAQ5mD,GAmBtB,MAAM,WAAEygD,EAAU,SAAEoG,GAAa7mD,EAC3BulD,GAAkBh+C,EAAAA,EAAAA,UACtB,IAAM,CACJ,CACEq5C,KAAM5gD,EAAM+lD,UAAY,IACxB3L,SACEl3C,EAAAA,EAAAA,KAAC4jD,GAAAA,EAAI,CACH9iC,OAAQ6iC,EACRE,SAAS7jD,EAAAA,EAAAA,KAACoiD,GAAc,CAAC7E,WAAYA,EAAYsF,SAAU/lD,EAAM+lD,WAAa3iD,UAE9EF,EAAAA,EAAAA,KAACm+C,GAAuB,CAAAj+C,UACtBoF,EAAAA,EAAAA,MAAA,OACEzD,MAAO,CACL2Y,UAAW,OACX5E,SAAU,SACVU,OAAQ,OACR/G,QAAS,OACTqP,cAAe,UACf1e,SAAA,CAEDpD,EAAMgnD,QACP9jD,EAAAA,EAAAA,KAAA,OAAK6B,MAAO,CAAE4c,SAAU,EAAG7I,SAAU,UAAW1V,UAC9CF,EAAAA,EAAAA,KAAC+jD,GAAAA,GAAM,aAMjB7jD,SAAUq9C,EAAWp/C,QAAO,EAAG4J,WAAYA,KAE7C,CAAE21C,KAAM,IAAKxG,SAASl3C,EAAAA,EAAAA,KAACmtC,GAAY,OAErC,CAACwW,EAAUpG,EAAYzgD,EAAMgnD,OAAQhnD,EAAM+lD,YAEtC/1C,EAAGwwC,IVjDHl9C,EAAAA,EAAAA,YAAW88C,IUoDlB,OAFAnhD,EAAAA,EAAAA,YAAU,IAAMuhD,EAAc+E,IAAkB,CAACA,EAAiB/E,KAE3Dt9C,EAAAA,EAAAA,KAACgkD,GAAAA,GAAM,CAAA9jD,SAAEmiD,EAAgBt7C,IAAIk9C,KACtC,CAEA,SAASA,GAAgBf,GACvB,OACEljD,EAAAA,EAAAA,KAACkkD,GAAAA,GAAK,CAAkBxG,KAAMwF,EAAMxF,KAAMxG,QAASgM,EAAMhM,QAAQh3C,SAC9DgjD,EAAMhjD,UAAU6G,IAAIk9C,KADXf,EAAMxF,KAItB,CCtEO,SAASyG,KACd,MAAM/G,GXICh9C,EAAAA,EAAAA,YAAW88C,IAAuB,GWHzC,OAAOphD,EAAAA,EAAAA,cACL,CACEqB,EACAkpB,KAKA,IAAI+9B,EAAMhH,EAAOjgD,IAAO,GACxB,MAAMknD,EAASh+B,GAASg+B,OAClBC,EAAQj+B,GAASi+B,MA4BvB,OA3BIF,GACEC,IACFD,EAAMv6C,OAAO4f,KAAK46B,GAAQtmC,QAAO,CAACC,EAAK5R,KACrC,IAAI1R,EAAQ2pD,EAAOj4C,GACnB,QAAczK,IAAVjH,EAAqB,OAAOsjB,EAChCtjB,EAAQ6pD,mBAAmB7pD,EAAM8jB,YACjC,MAAMgmC,EAAkB,IAAMp4C,EAExBq4C,EAAQ,IAAIC,OAAOF,EAAkB,QAAUA,EAAkB,IAAK,KAC5E,OAAOxmC,EAAIrjB,QAAQ8pD,EAAO/pD,EAAM,GAC/B0pD,IAEDE,IACFF,EAAM,GAAGA,KAAOv6C,OAAO4f,KAAK66B,GACzBv9C,KAAKqF,IACJ,IAAI1R,EAAQ4pD,EAAMl4C,GAClB,YAAczK,IAAVjH,EAA4B,IAChCA,EAAQ6pD,mBAAmB7pD,EAAM8jB,YAC1B,GAAGpS,KAAO1R,IAAO,IAEzB+M,KAAK,KACL9M,QAAQ,QAAS,SAGtBuS,QAAQF,MAAM,WAAW7P,eAGpBinD,CAAG,GAEZ,CAAChH,GAEL,CC3CO,SAASuH,KACd,MAAMvvC,GAAWC,EAAAA,GAAAA,MACXuvC,EAAaT,KACnB,OAAOroD,EAAAA,EAAAA,cACL,CACE+oD,EACAx+B,KAKA,MAAM+9B,EAAMQ,EAAWC,EAAQx+B,GAC3B+9B,GACFhvC,EAASgvC,EACX,GAEF,CAAChvC,EAAUwvC,GAEf,CCpBO,SAASE,KACd,MAAMC,ECFD,WACL,MAAOA,EAAWC,IAAgBtpD,EAAAA,EAAAA,WAAS,GAO3C,OANAK,EAAAA,EAAAA,YACE,IAAM,KACJipD,GAAa,EAAM,GAErB,IAEKD,CACT,CDPoBE,IACX5tB,EAAU6tB,IAAexpD,EAAAA,EAAAA,UAC9BqpD,EAAYppD,OAAO07B,cAAW11B,GAG1BwjD,GAAoBrpD,EAAAA,EAAAA,cAAY,KACpCopD,EAAYvpD,OAAO07B,SAAS,GAC3B,KAEHt7B,EAAAA,EAAAA,YAAU,KACR,GAAKgpD,EAKL,OAJK1tB,GACH8tB,IAEFxpD,OAAOM,iBAAiB,WAAYkpD,GAC7B,KACLxpD,OAAOO,oBAAoB,WAAYipD,EAAkB,CAC1D,GACA,CAACJ,EAAW1tB,EAAU8tB,IAEzB,MAAMphD,GAAOjI,EAAAA,EAAAA,cACVsoD,IACCzoD,OAAOypD,QAAQC,aAAa,KAAM,GAAIjB,GACtCe,GAAmB,GAErB,CAACA,IAGGhuC,GAASrb,EAAAA,EAAAA,cACZsoD,IACCzoD,OAAOypD,QAAQC,aAAa,KAAM,GAAIjB,GACtCe,GAAmB,GAErB,CAACA,IAGH,MAAO,CAAE9tB,WAAUtzB,OAAMoT,SAC3B,CEpCO,SAASmuC,KAId,MAAMjuB,EAAWytB,KACXzB,EAAWhsB,EAASA,UAAUgsB,UAAY,IAC1CkC,GAAelhD,EAAAA,EAAAA,UAAyB,KAE5C,IAAI2mB,EAASqM,EAASA,UAAUrM,OAMhC,OALIA,GAAUA,EAAOziB,SAAS,cAC5ByiB,EAASA,EAAOw6B,UAAU,EAAGx6B,EAAOy6B,QAAQ,eACnCz6B,GAAUA,EAAOziB,SAAS,gBACnCyiB,EAASA,EAAOw6B,UAAU,EAAGx6B,EAAOy6B,QAAQ,gBAEvC,IAAIC,gBAAgB16B,GAAU,IAAI,GACxC,CAACqM,EAASA,UAAUrM,SAEjB26B,GAAkB7pD,EAAAA,EAAAA,cACrBypD,IACC,MAAMK,EAAYL,EAAa/mC,WAC3BonC,EAAWvuB,EAASlgB,OAAO,IAAMyuC,GAChCvuB,EAASlgB,OAAOksC,EAAS,GAEhC,CAAChsB,EAAUgsB,IAEb,MAAO,CAACkC,EAAcI,EACxB,CClBO,MAAME,IAAoBjmD,EAAAA,EAAAA,eAA+B,CAAC,GAC1D,SAASkmD,KACd,OAAO1lD,EAAAA,EAAAA,YAAWylD,GACpB,CAMO,SAASE,GAAuBC,GACrC,YAAoDrkD,IAA5CqkD,GAA+BC,QACzC,CAEO,SAASC,GAAqCppD,GAMnD,MAAM,MAAEqpD,EAAK,SAAEznB,GAAa5hC,GACrBspD,EAAkBC,IAAqB3qD,EAAAA,EAAAA,WAAS,IAChD4qD,EAAYC,IAAiB7qD,EAAAA,EAAAA,UAAgC,OAC7D8qD,EAAYC,IAAiB/qD,EAAAA,EAAAA,UAAqB,CAAC,IACnDgrD,EAAUC,IAAejrD,EAAAA,EAAAA,UAAiCoB,EAAM8wB,cAAgB,CAAC,IACjFg5B,EAAWC,IAAgBnrD,EAAAA,EAAAA,UAAiC,CAAC,IAC7DorD,EAAaC,IAAkBrrD,EAAAA,EAAAA,aAE/BoR,EAAG64C,GAAmBL,KACvB0B,GAAiB3iD,EAAAA,EAAAA,UAAQ,IAgGjC,SAA2B8hD,GACzB,OAAOA,EAAMpoC,QAAO,CAACC,EAAuBgoC,KAC1ChoC,EAAIja,KAAKiiD,GACLD,GAAuBC,IACzBhoC,EAAIja,QAAQiiD,EAAKC,UAEZjoC,IACN,GACL,CAxGuCipC,CAAkBd,IAAQ,CAACA,KAGhEpqD,EAAAA,EAAAA,YAAU,KACR,MAAMmrD,EAAeC,GAAgBhB,EAAOK,IACxCF,GAAeY,EAAa1jD,SAG3B0jD,EAAa,GAA4BjB,SAC5CM,EAAeW,EAAa,GAA4BjB,SAAS,IAEjEM,EAAcW,EAAa,IAC7B,GACC,CAACZ,EAAYH,EAAOK,IAEvB,MAAMY,GAAStrD,EAAAA,EAAAA,cACb4S,MAAO24C,EAAmB,CAAC,KACzB,MAAMC,EAAwBC,GAAyBpB,EAAO,IACzDK,KACAa,IAGL,GAAmB,OAAff,EACF,OAAOnc,QAAQqd,UASjB,IANKzB,GAAuBO,IAAeA,EAAW7V,gBAC9C6V,EAAW7V,SAAS4W,EAAUb,GAIpCF,GAAYnpD,KAAOmqD,EAAsBA,EAAsB9jD,OAAS,IAAIrG,GAC9D,CACd,UACQuhC,EAAS8nB,EACjB,CAAE,MAAOl2C,GACPy2C,EAAez2C,aAAagU,MAAQhU,EAAI,IAAIgU,OAAMpd,EAAAA,GAAAA,GAAE,uBACtD,CACA,MACF,CAEA,MAAMugD,EAAkBH,EAAsB57C,WAAWs6C,GAASA,EAAK7oD,KAAOmpD,GAAYnpD,KAEpFuqD,EAAW3B,GAAuBuB,EAAsBG,EAAkB,IAC5EH,EAAsBG,EAAkB,GACxCH,EAAsBG,EAAkB,GAO5C,OAJA9B,EAAgB,IAAID,gBAAgB,KACpCe,GAAekB,IAAY,IAAWA,KAASN,MAC/CV,GAAagB,IAAI,IAAWA,EAAM,CAACrB,GAAYnpD,IAAKkqD,MACpDd,EAAcmB,GACPvd,QAAQqd,SAAS,GAE1B,CAAClB,EAAYH,EAAOznB,EAAUinB,EAAiBa,EAAYO,IAGvDa,GAAS9rD,EAAAA,EAAAA,cAAY,KACzB,MAAMwrD,EAAwBH,GAAgBH,EAAgBR,GAExDiB,EAAkBH,EAAsB57C,WAAWs6C,GAASA,EAAK7oD,KAAOmpD,GAAYnpD,KACpF0qD,EAAe9B,GAAuBuB,EAAsBG,EAAkB,IAChFH,EAAsBG,EAAkB,GACxCH,EAAsBG,EAAkB,GAE5C9B,EAAgB,IAAID,gBAAgB,KACpCa,EAAcsB,EAAa,GAC1B,CAACvB,GAAYnpD,GAAI6pD,EAAgBrB,EAAiBa,IAErD,OACExmD,EAAAA,EAAAA,KAAC6lD,GAAkB5lD,SAAQ,CACzBvF,MAAO,CACL8rD,aACAC,cAAeA,EACfC,WACAC,YAAaA,EACbR,MAAOrpD,EAAMqpD,MACbe,aAAcC,GAAgBhB,EAAOK,GACrCc,sBAAuBC,GAAyBpB,EAAOK,GACvDF,aACAC,cAAeA,EACfK,YACAC,aAAcA,EACdC,cACAC,eAAgBA,EAChBX,iBAAkBA,EAClBC,kBAAmBA,EACnBe,SACAQ,UACA1nD,SAEDpD,EAAMoD,UAGb,CAYA,SAASinD,GAAgBhB,EAAyBK,GAChD,OAAOL,EAAMhoD,QAAQ6nD,GAlIhB,SAAuBA,EAAsBl8C,GAClD,OAAQk8C,EAAK/iC,QAAW+iC,EAAK/iC,OAAOnZ,GAAiB,KAAPk8C,CAChD,CAgIgC8B,CAAc9B,EAAMQ,IACpD,CAEA,SAASe,GAAyBpB,EAAyBK,GAGzD,OAFqBW,GAAgBhB,EAAOK,GAExBzoC,QAAO,CAACC,EAAuBgoC,KACjDhoC,EAAIja,KAAKiiD,GACLD,GAAuBC,IACzBhoC,EAAIja,QAAQiiD,EAAKC,UAEZjoC,IACN,GACL,CC7JO,SAAS+pC,GAAiBjrD,GAK/B,MAAM,IAAQqK,EAAAA,EAAAA,OACR,WAAEm/C,EAAU,sBAAEgB,EAAqB,eAAEP,GAAmBjB,KAGxDkC,EAA+B9gD,EADlBo/C,GAAYnpD,KAAOmqD,EAAsBA,EAAsB9jD,OAAS,GAAGrG,GACvD,SAAc,QAE/C8qD,EAAclC,GAAuBuB,EAAsB,IAC7DhB,GAAYnpD,KAAOmqD,EAAsB,GAAGnqD,GAC5CmpD,GAAYnpD,KAAOmqD,EAAsB,GAAGnqD,GAC1C+qD,EAAgBD,EAClB,+BACA,gCAEJ,OACE3iD,EAAAA,EAAAA,MAAA,UAAQoB,UAAU,+CAA+C,UAAQ,gBAAexG,SAAA,CACtE,OAAfomD,GAAuB,WAAYA,GAClCtmD,EAAAA,EAAAA,KAAC2tC,GAAoB,CAAC9rC,MAAO,CAAE8N,SAAU,IAAKzP,SAAE8nD,KAEhDhoD,EAAAA,EAAAA,KAAA,UACE,UAAQ,cACR0G,UAAU,8BACVjD,KAAK,SACLkD,QAASA,KACPogD,OAAeplD,GACf7E,EAAMsqD,UAAU,EAChBlnD,SAED8nD,KAGLhoD,EAAAA,EAAAA,KAAA,UACEyD,KAAK,SACL,UAAQ,cACRiD,UAAWwhD,EACXvR,SAAUsR,EACVthD,QAASA,KACPogD,OAAeplD,GACf7E,EAAM8qD,UAAU,EAChB1nD,SAEDgH,EAAE,WAELlH,EAAAA,EAAAA,KAAA,OAAK,UAAQ,gBAAgB0G,UAAU,gCAA+BxG,UACpEF,EAAAA,EAAAA,KAAA,UAAQ0G,UAAU,2BAA2BjD,KAAK,SAASkD,QAAS7J,EAAM0wC,SAASttC,SAChFgH,EAAE,gBAKb,CC9CO,SAASihD,IAAe,SAC7B3a,EAAQ,YACR8B,EAAW,aACXnG,EAAY,WACZgG,EAAU,aACVE,IAEA,MAAMj6B,GAAWC,EAAAA,GAAAA,OACX,WAAEixC,EAAU,SAAEI,EAAQ,OAAEU,EAAM,OAAEQ,EAAM,YAAEd,GAAgBhB,KAExDv5C,GAAUzQ,EAAAA,EAAAA,cAAY,KACtB0xC,EACFA,IAEAp4B,GAAU,EACZ,GACC,CAACA,EAAUo4B,IAEd,OACEloC,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACooD,GAAiB,CAACp7C,MAAO85C,IACV,OAAfR,IACE,WAAYA,GACXhhD,EAAAA,EAAAA,MAACgpC,GAAQ,CAEP5P,SAAU0oB,EACVv9B,QAAQ7pB,EAAAA,EAAAA,KAAC+nD,GAAgB,CAACH,OAAQA,EAAQpa,SAAUjhC,IACpDqhB,aAAc84B,EAASJ,EAAWnpD,IAClCgsC,aAAcA,EACdmG,YAAaA,EACbH,WAAYA,EACZE,aAAcA,EACdd,UAAQ,EAAAruC,SAAA,EAERF,EAAAA,EAAAA,KAACqoD,GAAU,IACV/B,EAAWgC,SAXPhC,EAAWnpD,KAclBmI,EAAAA,EAAAA,MAAA,OACE,UAAS,kBAAkBghD,EAAWnpD,KACtC0E,MAAO,CAAE0N,QAAS,OAAQqP,cAAe,SAAUH,SAAU,EAAG7I,SAAU,UAAW1V,SAAA,EAErFF,EAAAA,EAAAA,KAACoY,GAAAA,GAAW,CACV,cAAYlR,EAAAA,GAAAA,GAAE,uBACdqhD,mBAAiB,EACjB3Y,UAAQ,EACRvsC,QAAQ,QAAOnD,SAEdomD,GAAYpP,WAEfl3C,EAAAA,EAAAA,KAAC+nD,GAAgB,CAACX,OAAQA,KAAWA,EAAO,CAAC,EAAG,EAACQ,OAAQA,EAAQpa,SAAUjhC,UAKvF,CAEA,SAAS87C,KACP,MAAM,WAAE/B,EAAU,aAAEO,GAAiBf,MAC/B,OAAEjY,IAAWC,EAAAA,GAAAA,MACb0a,EAAap4C,KAAKa,UAAU48B,GAUlC,OARA9xC,EAAAA,EAAAA,YAAU,KAC2B,IAA/B8N,OAAO4f,KAAKokB,GAAQrqC,OACtBqjD,EAAa,CAAC,GACLP,GACTO,EAAa,CAAE,CAACP,EAAWnpD,IAAK0wC,GAClC,GACC,CAACA,EAAQyY,EAAYO,EAAc2B,IAE/B,IACT,CAEA,SAASJ,GAAkBtrD,GACzB,MAAM,IAAQqK,EAAAA,EAAAA,MACR6F,EAAQlQ,EAAMkQ,MACpB,OAAKlQ,EAAMkQ,MACLlQ,EAAMkQ,iBAAiBsX,MAMzB,YAAaxnB,EAAMkQ,QAAUA,EAAM6nC,MAC9B70C,EAAAA,EAAAA,KAACmM,GAAAA,EAAK,CAAC9I,QAAQ,SAAShG,MAAOP,EAAMkQ,MAAMK,UAEhDL,EAAM6nC,MAEN70C,EAAAA,EAAAA,KAACmM,GAAAA,EAAK,CAAC9I,QAAQ,SAAShG,MAAO2P,EAAMK,QAAS+F,UAAQ,EAAAlT,SACnD2J,OAAOC,OAAOkD,EAAM6nC,MAAM9tC,KAAI,CAACrM,EAAesM,KAC7ChH,EAAAA,EAAAA,KAAA,OAAAE,SAAkBxF,GAARsM,YAJlB,EAR6B,iBAAhBlK,EAAMkQ,OACRhN,EAAAA,EAAAA,KAACmM,GAAAA,EAAK,CAAC9I,QAAQ,SAAShG,MAAOP,EAAMkQ,SAEvChN,EAAAA,EAAAA,KAACmM,GAAAA,EAAK,CAAC9I,QAAQ,SAAShG,MAAO6J,EAAE,wBALjB,IAmB3B,C,4BCpGA,MAAMuhD,GAAe/lD,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,qBAAVH,CAAU,gPAYxB,SAASgmD,GAAiB5rD,GAC/B,MAAM,IAAQqK,EAAAA,EAAAA,MACd,OACE7B,EAAAA,EAAAA,MAACmjD,GAAY,CAAC/hD,WAAWiiD,EAAAA,GAAAA,GAAI,CAACrtB,GAAAA,EAAOstB,aAAc,kBAAkB1oD,SAAA,EACnEF,EAAAA,EAAAA,KAAA,OAAK0G,WAAWiiD,EAAAA,GAAAA,GAAIrtB,GAAAA,EAAOutB,aAAa3oD,UACtCF,EAAAA,EAAAA,KAAA,MAAI,UAAQ,eAAe0G,WAAWiiD,EAAAA,GAAAA,GAAIrtB,GAAAA,EAAOwtB,iBAAiB5oD,SAC/DpD,EAAMO,UAGVP,EAAMyP,UACLvM,EAAAA,EAAAA,KAAA,OAAK0G,WAAWiiD,EAAAA,GAAAA,GAAIrtB,GAAAA,EAAOytB,aAAa7oD,UACtCF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACL,UAAQ,eACRlC,QAAQ,QACR,aAAY6D,EAAE,gBACdP,QAAS7J,EAAMyP,QAAQrM,UAEvBF,EAAAA,EAAAA,KAACyoB,GAAAA,GAAS,CAAC,cAAY,eAMnC,CCrCO,SAASugC,KACd,MAAM,WACJ1C,EAAU,iBACVF,EAAgB,UAChBQ,EAAS,aACTM,EAAY,sBACZI,GACExB,KACEmD,EAAe7C,EACjB,oCACA,iCAEE8C,EAAkBC,KAExB,GAAK7C,EAEL,OACEtmD,EAAAA,EAAAA,KAAA,OAAK0G,UAAWuiD,EAAc,aAAW,QAAQ,UAAQ,aAAY/oD,UACnEF,EAAAA,EAAAA,KAAA,MAAI0G,UAAU,2BAA0BxG,SACrCgnD,EAAangD,KAAKi/C,IAEjB,MAAMh/C,EAAQsgD,EAAsB57C,WACjC09C,GAAgBpD,EAAK7oD,KAAOisD,EAAYjsD,KAErCsqD,EAAkBH,EAAsB57C,WAC3Cs6C,GAASA,EAAK7oD,KAAOmpD,EAAWnpD,KAE7B4D,EAAaiG,EAAQygD,EAErB/gD,EACJ,4BACC4/C,EAAWnpD,KAAO6oD,EAAK7oD,IACvB4oD,GAAuBC,IACtBA,EAAKC,UAAUt+B,MAAM0hC,GAAYA,EAAQlsD,KAAOmpD,EAAWnpD,KAEzD,gBACA,KACH4D,EAAa,iBAAmB,IAEnC,OACEuE,EAAAA,EAAAA,MAAA,MACEoB,UAAU,2BACV,UAAS,mBAAmBs/C,EAAK7oD,KAAK+C,SAAA,EAGtCoF,EAAAA,EAAAA,MAAA,UACEoB,UAAWA,EACXC,QAASA,IAAMuiD,EAAgBliD,GAC/B2vC,SAAU51C,EAAWb,SAAA,CAEpB,IACA8lD,EAAK1oD,MACLspD,EAAUZ,EAAK7oD,KAAOmpD,EAAWnpD,KAAO6oD,EAAK7oD,KAC5C6C,EAAAA,EAAAA,KAAA,QAAM6B,MAAO,CAAEC,WAAY,OAAQ5B,UACjCF,EAAAA,EAAAA,KAACk3B,GAAAA,GAAqB,CAAC56B,MAAM,iBAMjCypD,GAAuBC,IACrBhmD,EAAAA,EAAAA,KAACspD,GAAW,CAACtD,KAAMA,EAAMyB,gBAAiBA,IACxC,OAnBDzgD,EAqBF,OAMjB,CAEA,SAASsiD,GAAYxsD,GACnB,MAAM,WACJwpD,EAAU,UACVM,EAAS,sBACTU,GACExB,MACE,KAAEE,EAAI,gBAAEyB,GAAoB3qD,EAC5BosD,EAAkBC,KAExB,GAAK7C,EACL,OACEtmD,EAAAA,EAAAA,KAAA,MAAI0G,UAAU,2BAA0BxG,SACrC8lD,EAAKC,SAASl/C,KAAKsiD,IAElB,MAAME,EAAiBjC,EAAsB57C,WAC1C09C,GAAgBC,EAAQlsD,KAAOisD,EAAYjsD,KAExC4D,EAAawoD,EAAiB9B,EAE9B/gD,EACJ,4BACC4/C,EAAWnpD,KAAOksD,EAAQlsD,GAEvB,gBACA,KACH4D,EAAa,iBAAmB,IAEnC,OACEf,EAAAA,EAAAA,KAAA,MACE0G,UAAU,2BACV,UAAS,mBAAmB2iD,EAAQlsD,KAAK+C,UAGzCoF,EAAAA,EAAAA,MAAA,UACEoB,UAAWA,EACXC,QAASA,IAAMuiD,EAAgBK,GAC/B5S,SAAU51C,EAAWb,SAAA,CAEpB,IACAmpD,EAAQ/rD,MACRspD,EAAUyC,EAAQlsD,KAAOmpD,EAAWnpD,KAAOksD,EAAQlsD,KAClD6C,EAAAA,EAAAA,KAAA,QAAM6B,MAAO,CAAEC,WAAY,OAAQ5B,UACjCF,EAAAA,EAAAA,KAACk3B,GAAAA,GAAqB,CAAC56B,MAAM,kBAX9B+sD,EAAQlsD,GAeV,KAKf,CAEA,SAASgsD,KACP,MAAM,cAAE5C,EAAa,sBAAEe,GAA0BxB,KAEjD,OAAOhqD,EAAAA,EAAAA,cACJkL,IACC,MAAMg/C,EAAOsB,EAAsBtgD,GAC/Bg/C,IACED,GAAuBC,GACzBO,EAAcP,EAAKC,SAAS,IAE5BM,EAAcP,GAElB,GAEF,CAACO,EAAee,GAEpB,CC3IO,SAASkC,KACd,MAAM,EAAEtiD,IAAMC,EAAAA,EAAAA,OACR,WAAEm/C,EAAU,iBAAEF,EAAgB,kBAAEC,GAAsBP,KACtD2D,GAAoB3tD,EAAAA,EAAAA,cACxB,IAAMuqD,GAAmBqD,IAAmBA,KAC5C,CAACrD,IAEH,OACE/gD,EAAAA,EAAAA,MAAA,UACEqB,QAAS8iD,EACT/iD,WAAWiiD,EAAAA,GAAAA,GAAIrtB,GAAAA,EAAOquB,aAAcvD,GAAoB,iBACxD,aAAYl/C,EAAE,iBACd,gBAAek/C,EACf,UAAQ,gBAAelmD,SAAA,EAEvBF,EAAAA,EAAAA,KAAA,QAAM0G,WAAWiiD,EAAAA,GAAAA,GAAIrtB,GAAAA,EAAOsuB,kBAAkB1pD,UAC5CoF,EAAAA,EAAAA,MAAA,QAAMoB,WAAWiiD,EAAAA,GAAAA,GAAIrtB,GAAAA,EAAOuuB,sBAAsB3pD,SAAA,EAChDF,EAAAA,EAAAA,KAAA,QAAM0G,WAAWiiD,EAAAA,GAAAA,GAAIrtB,GAAAA,EAAOwuB,iBAAiB5pD,SAAE,IAAS,IAAEomD,GAAYhpD,YAG1E0C,EAAAA,EAAAA,KAAA,QAAM0G,WAAWiiD,EAAAA,GAAAA,GAAIrtB,GAAAA,EAAOyuB,kBAAkB7pD,UAC5CF,EAAAA,EAAAA,KAAC2F,EAAAA,GAAa,CAAC,cAAY,aAInC,CCvBO,SAASqkD,GAA6BltD,GAW3C,OACEkD,EAAAA,EAAAA,KAACkmD,GAAkB,CACjBC,MAAOrpD,EAAMqpD,MACbv4B,aAAc9wB,EAAM8wB,aACpB8Q,SAAU5hC,EAAM4hC,SAASx+B,UAEzBoF,EAAAA,EAAAA,MAAA,OACEoB,UAAU,iBACV,UAAQ,SACR7E,MAAO,CACL0N,QAAS,OACTqP,cAAe,SACftI,OAAQ,OACRkE,UAAW,OACX5E,SAAU,UACV1V,SAAA,CAEDpD,EAAMO,QAAS2C,EAAAA,EAAAA,KAAC0oD,GAAgB,CAACrrD,MAAOP,EAAMO,MAAOkP,QAASzP,EAAM0wC,YACrExtC,EAAAA,EAAAA,KAACwpD,GAAgB,KACjBlkD,EAAAA,EAAAA,MAAA,OACEoB,UAAU,6BACV7E,MAAO,CACL0N,QAAS,OACTqP,cAAe,SACfhJ,SAAU,SACVqE,UAAW,GACX/Z,SAAA,EAEFF,EAAAA,EAAAA,KAACgpD,GAAoB,KACrBhpD,EAAAA,EAAAA,KAACmoD,GAAc,CACbhf,aAAcrsC,EAAMqsC,aACpBqE,SAAU1wC,EAAM0wC,SAChB8B,YAAaxyC,EAAMwyC,YACnBH,WAAYryC,EAAMqyC,WAClBE,aAAcvyC,EAAMuyC,sBAMhC,CCzDO,SAAS4a,KACd,OACEjqD,EAAAA,EAAAA,KAACoY,GAAAA,GAAW,CAACw3B,UAAQ,EAACvsC,QAAQ,QAAOnD,UACnCF,EAAAA,EAAAA,KAACqpB,GAAAA,EAAQ,CAAAnpB,UACPF,EAAAA,EAAAA,KAACspB,GAAAA,EAAO,OAIhB,CCNO,SAAS4gC,GAAYptD,GAC1B,OACEwI,EAAAA,EAAAA,MAAChE,EAAAA,SAAQ,CAAApB,SAAA,EACPF,EAAAA,EAAAA,KAACygD,GAAU,CACTL,YACEtjD,EAAMsjD,YACF,CAAC,CAAE9iD,OAAQ0C,EAAAA,EAAAA,KAACm2B,GAAAA,EAAQ,CAAChgB,MAAM,UAAkCiT,WAAW,SACxEznB,EAENtE,OAAQ2C,EAAAA,EAAAA,KAACm2B,GAAAA,EAAQ,CAAChgB,MAAM,YAEzBrZ,EAAMqtD,OACLnqD,EAAAA,EAAAA,KAACoY,GAAAA,GAAW,CAAC/U,QAAQ,QAAQxB,MAAO,CAAEga,WAAY,EAAG8C,cAAe,GAAIze,UACtEF,EAAAA,EAAAA,KAACm2B,GAAAA,EAAQ,CAAChgB,MAAM,aAGpBnW,EAAAA,EAAAA,KAACgI,EAAAA,EAAO,KACRhI,EAAAA,EAAAA,KAACiqD,GAAY,MAGnB,CCtBA,MAAMG,IAAOC,EAAAA,EAAAA,IAAS,4DASTC,IAAc5nD,EAAAA,EAAAA,IAAO+pB,GAAAA,IAAY7pB,WAAA,CAAAC,YAAA,qBAAnBH,CAAmB,yCAC/B0nD,ICuFR,SAASG,GAAQlkC,GACtB,MAAM,cAAEuoB,EAAa,mBAAE4b,EAAkB,sBAAEC,EAAqB,sBAAEC,GAChErkC,EAEIskC,EZ3FD,WACL,MAAM5F,GAAY/uC,EAAAA,EAAAA,QAA+B,CAAE+uC,WAAW,IAO9D,OANAhpD,EAAAA,EAAAA,YACE,IAAM,KACJgpD,EAAU3uC,QAAQ2uC,WAAY,CAAK,GAErC,IAEKA,CACT,CYkFqB6F,IAEZrF,EAAcI,GAAmBL,MAEjCnwB,EAAME,IAAW35B,EAAAA,EAAAA,WAAS,KAC/B,IAAK8uD,EAAoB,CACvB,MAAMK,EAAYtF,EAAauF,IAAI,QACnC,GAAID,EAAW,CACb,MAAM11B,EAAO36B,OAAOqwD,GACpB,GAAIrwD,OAAO8Q,UAAU6pB,GACnB,OAAOA,CAEX,CACF,CACA,OAAO,CAAC,KAGHC,EAASE,IAAc55B,EAAAA,EAAAA,WAAS,KACrC,IAAK8uD,EAAoB,CACvB,MAAMO,EAAexF,EAAauF,IAAI,WACtC,GAAIC,EAAc,CAChB,MAAM31B,EAAU56B,OAAOuwD,GACvB,GAAIvwD,OAAO8Q,UAAU8pB,GACnB,OAAOA,CAEX,CACF,CACA,MAAM41B,EAAe96C,aAAaC,QAAQ,WAC1C,GAAI66C,EAAc,CAChB,MAAM51B,EAAU56B,OAAOwwD,GACvB,GAAIxwD,OAAO8Q,UAAU8pB,GACnB,OAAOA,CAEX,CACA,OAAO,EAAE,KAGJh2B,EAAM0zB,IAAWp3B,EAAAA,EAAAA,WAAS,KAC/B,IAAK8uD,EAAoB,CACvB,MAAMS,EAAY1F,EAAauF,IAAI,QACnC,GAAIG,EACF,OAAIA,EAAU3H,WAAW,KAAa2H,EAAUxyB,MAAM,GAC/CwyB,CAEX,CACA,OAAOrc,GAAexvC,MAAQ,EAAE,KAG3B2zB,EAAeC,IAAoBt3B,EAAAA,EAAAA,WAAyB,KACjE,IAAK8uD,EAAoB,CACvB,MAAMS,EAAY1F,EAAauF,IAAI,QACnC,GAAIG,EACF,OAAIA,EAAU3H,WAAW,KAAa,OAC/B,KAEX,CACA,OAAO1U,GAAe7b,eAAiB,KAAK,KAGvC1C,EAAaC,IAAkB50B,EAAAA,EAAAA,WAAuB,KAC3D,MAAMs2B,EAAwB4c,GAAeve,aAAe,CAAC,EAC7D,IAAK,MAAMjkB,KAAOm5C,EAAa97B,OAAQ,CACrC,GAAIyhC,GAA6B3iD,SAAS6D,GAAM,SAChD,MAAM1R,EAAQ6qD,EAAauF,IAAI1+C,GAC/B,GAAI1R,EAAO,CACT,MAAMoP,EAASpP,EAAM8M,MAAM,KAC3BwqB,EAAQ5lB,GAAOtC,CACjB,CACF,CACA,OAAOkoB,CAAO,IAGVp0B,GAAkB9B,EAAAA,EAAAA,cAAY,IAAMw0B,EAAe,CAAC,IAAI,CAACA,IAEzD+G,EAAWytB,KAuDjB,OArDA/oD,EAAAA,EAAAA,YAAU,KACR,GAAIyuD,EAAoB,OAExB,IAAIx/B,EAASqM,EAASA,UAAUrM,OAC5BA,GAAUA,EAAOziB,SAAS,cAC5ByiB,EAASA,EAAOw6B,UAAU,EAAGx6B,EAAOy6B,QAAQ,eACnCz6B,GAAUA,EAAOziB,SAAS,gBACnCyiB,EAASA,EAAOw6B,UAAU,EAAGx6B,EAAOy6B,QAAQ,gBAE9C,MAAM0F,EAAkB,IAAIzF,gBAAgB16B,GAAU,KACtDmgC,EAAgBC,IAAI,OAAQj2B,EAAK3W,YACjC2sC,EAAgBC,IAAI,UAAWh2B,EAAQ5W,YACvC2sC,EAAgBC,IAAI,OAA0B,QAAlBr4B,EAA0B3zB,EAAO,IAAIA,KAGjE,IAAK,MAAMgN,KAAOm5C,EAAa97B,OACzByhC,GAA6B3iD,SAAS6D,IACtCq+C,GAAuBliD,SAAS6D,KAChCs+C,EACEA,EAAsBniD,SAAS6D,IACjC++C,EAAgBE,OAAOj/C,GAI3B++C,EAAgBE,OAAOj/C,IAIzB,IAAK,MAAMjO,KAAUkyB,EAEnB86B,EAAgBC,IAAIjtD,EAAQkyB,EAAYlyB,GAASsJ,KAAK,MAGxDk+C,EAAgBwF,EAAgB,GAC/B,CACD/rD,EACA2zB,EACA4yB,EACA6E,EACAr1B,EACAC,EACA/E,EACAo6B,EACAC,EACAC,EACApF,EACAluB,EAASA,UAAUrM,UAGrBjvB,EAAAA,EAAAA,YAAU,KACRmU,aAAac,QAAQ,UAAWokB,EAAQ5W,WAAW,GAClD,CAAC4W,KAEG/wB,EAAAA,EAAAA,UACL,KAAM,CACJ8wB,OACAE,UACAD,UACAE,aACAl2B,OACA0zB,UACAC,gBACAC,mBACA3C,cACAC,iBACA1yB,qBAEF,CAACA,EAAiByyB,EAAa8E,EAAMC,EAASh2B,EAAM2zB,GAExD,CDzOAu3B,GAAYgB,YAAc,cC4O1B,MAAMJ,GAA+B,CAAC,OAAQ,UAAW,QCvOlD,SAASK,GAAkCllC,GAQhD,MAAM,MAAEyS,EAAK,MAAEC,EAAK,aAAEmJ,EAAY,eAAE9R,EAAc,mBAAEo6B,GAAuBnkC,EACrEymB,EAAOyd,GAAQ,CACnB3b,cAAe,CAAExvC,KAAM8iC,GAAgBA,EAAa1+B,OAAS0+B,EAAa,GAAG9iC,UAAOuC,GACpF6oD,wBAEI,KAAEr1B,EAAI,QAAEC,EAAO,KAAEh2B,EAAI,cAAE2zB,EAAa,YAAE1C,GAAgByc,EAEtD0e,E9DwWD,SAAqC1yB,GAC1C,MAAO15B,EAAM0zB,IAAWp3B,EAAAA,EAAAA,aAElB,UAAEmsC,EAAS,OAAE4jB,GAAWrsD,GAAQ,CAAC,EAEjCosD,GAASnnD,EAAAA,EAAAA,UAAQ,IAChBy0B,EACD2yB,EACgB,QAAd5jB,EACK,IAAI/O,EAAM15B,KAAKqsD,IAEf,IAAI3yB,EAAM15B,KAAKqsD,GAAQC,WAGzB5yB,EARU,IAUlB,CAAC+O,EAAW/O,EAAO2yB,IAEtB,OAAOpnD,EAAAA,EAAAA,UAAQ,KAAM,CAAGmnD,SAAQpsD,OAAM0zB,aAAY,CAAC1zB,EAAMosD,GAC3D,C8D3XiBG,CAAU7yB,IACnB,QAAEhG,GAAY04B,GACpBzvD,EAAAA,EAAAA,YACE,IACE+2B,EAAQ,CACN31B,GAAIiC,EACJqsD,OAAQA,CAACxf,EAAMC,IjDxChB,SAAyB7gC,EAAYoc,GAE1C,QAAU9lB,IAAN0J,QAAyB1J,IAAN8lB,EAAiB,OAAO,EAE/C,QAAU9lB,IAAN0J,EAAiB,OAAO,EAE5B,QAAU1J,IAAN8lB,EAAiB,OAAQ,EAG7B,GAAiB,iBAANpc,EAAgB,CAEzB,GAAiB,iBAANoc,EACT,OAAO+jB,GAAengC,EAAGoc,GACpB,GAAiB,iBAANA,EAChB,OAAO+jB,GAAengC,EAAGoc,EAAEjJ,WAE/B,MAAO,GAAiB,iBAANnT,EAAgB,CAEhC,GAAiB,iBAANoc,EACT,OAkBC,SAAwBpc,EAA8Boc,GAC3D,YAAU9lB,IAAN0J,QAAyB1J,IAAN8lB,EAAwB,EAC3Cpc,QAAsC,EACtCoc,SACGpc,EAAIoc,GADgC,EACvBpc,EAAIoc,EAAI,EAAI,CAClC,CAvBamkC,CAAevgD,EAAGoc,GACpB,GAAiB,iBAANA,EAChB,OAAO+jB,GAAengC,EAAEmT,WAAYiJ,EAExC,CAEA,OAAO,CACT,CiDiBiBokC,CAFIxY,KAASpH,EAAG7sC,GACZi0C,KAASnH,EAAG9sC,IAGzByoC,UAAW9U,KAEf,CAAC3zB,EAAM2zB,EAAeD,IAGxB,MAAMg5B,E9D6WD,SAAuChzB,EAAYC,GACxD,MAAMgzB,GAAe/1C,EAAAA,EAAAA,QAAuE,CAC1FjP,IAAK,CAAC,KAEDilD,EAAUC,IAAoBvwD,EAAAA,EAAAA,YAC/BwwD,GAAcpwD,EAAAA,EAAAA,cACjBkwD,GAAiDC,GAAiB,IAAMD,KACzE,KAEKF,EAAUK,IAAezwD,EAAAA,EAAAA,UAAc,KAE9CK,EAAAA,EAAAA,YAAU,KACRgwD,EAAa31C,QAAQrP,IAAM,CAAC,CAAC,GAC5B,CAACilD,IAEJ,MAAMI,GAAiBtwD,EAAAA,EAAAA,cACpBugB,IACC,MAAMjQ,EAAM2sB,EAAM1c,GAClB,IAAIgwC,EAASN,EAAa31C,QAAQrP,IAAIqF,GAQtC,OAPKigD,EAGMA,EAAOhwC,OAASA,IACzBgwC,EAAOhwC,KAAOA,EACdgwC,EAAOC,QAASN,GAAWA,EAAS3vC,KAJpCgwC,EAAS,CAAEhwC,OAAMiwC,QAAQN,GAAWA,EAAS3vC,IAC7C0vC,EAAa31C,QAAQrP,IAAIqF,GAAOigD,GAK3BA,EAAOC,MAAM,GAEtB,CAACN,EAAUjzB,IAWb,OARAh9B,EAAAA,EAAAA,YAAU,KAENowD,EADEH,EACUlzB,EAAM36B,OAAOiuD,GAEbtzB,EACd,GACC,CAACA,EAAOkzB,EAAUI,KAEd/nD,EAAAA,EAAAA,UACL,WACE,MAAO,CAAEynD,WAAUI,cACrB,GACA,CAACJ,EAAUI,GAEf,C8D1ZmBK,CAAYf,EAAOA,OAAQzyB,IACtC,YAAEmzB,GAAgBJ,GACxB/vD,EAAAA,EAAAA,YAAU,KACgC,IAApC8N,OAAO4f,KAAK4G,GAAa7sB,OAC3B0oD,OAAYvqD,GAEZuqD,GAAa7vC,IACX,IAAK,MAAMjQ,KAAOikB,EAAa,CAC7B,MAAMm8B,EAAgBp8B,GAAgB5rB,MAAMrG,GAAWA,EAAOiO,MAAQA,IACtE,GAAIogD,EAAe,CACjB,MAAM9xD,EAAQ24C,KAASh3B,EAAMmwC,EAAclI,OAC3C,GAAqB,iBAAV5pD,EAAoB,CAC7B,MAAMgzB,EAAe2C,EAAYjkB,GACjC,GAAIshB,GAAwC,IAAxBA,EAAalqB,SAC1BkqB,EAAanlB,SAAS7N,GACzB,OAAO,CAGb,CACF,CACF,CACA,OAAO,CAAI,GAEf,GACC,CAAC21B,EAAa67B,EAAa97B,IAE9B,MAAM0J,EAAQF,GAASkyB,EAASA,WAC1B,QAAEz2B,EAAO,WAAEC,GAAewE,GAChC/9B,EAAAA,EAAAA,YAAU,IAAMs5B,EAAQF,IAAO,CAACA,EAAM2E,EAAOzE,KAC7Ct5B,EAAAA,EAAAA,YAAU,IAAMu5B,EAAWF,IAAU,CAACA,EAAS0E,EAAOxE,IAEtD,MAAM90B,E9D4JD,SACLs4B,EACAC,GAEA,MAAOE,EAAaC,IAAkBx9B,EAAAA,EAAAA,UAAqC,CAAC,IAE5EK,EAAAA,EAAAA,YAAU,KACRm9B,GAAgBD,IACd,IAAIE,GAAU,EAEd,MAAMszB,EAAa3zB,EAEfA,EAAM/a,QACJ,CAAC0uC,EAAWpwC,KACV,MAAMjQ,EAAM2sB,EAAM1c,GAMlB,OALAowC,EAAUrgD,GAAOiQ,EACb4c,EAAY7sB,IAAQ6sB,EAAY7sB,KAASiQ,IAC3C8c,GAAU,EACVF,EAAY7sB,GAAOiQ,GAEdowC,CAAS,GAElB,CAAC,GAXH,CAAC,EAcCC,EAA8C,CAAC,EACrD,IAAK,MAAMtgD,KAAO6sB,EACXwzB,EAAUrgD,KACbsgD,EAAatgD,IAAO,GAIxB,MAAMugD,EAAa9iD,OAAO4f,KAAKijC,GAC/B,GAAIC,EAAWnpD,OAAQ,CACrB21B,GAAU,EACV,IAAK,MAAM/sB,KAAOugD,SACT1zB,EAAY7sB,EAEvB,CAEA,OAAO+sB,EAAU,IAAKF,GAAgBA,CAAW,GACjD,GACD,CAACH,EAAOC,IAEX,MAAMM,GAAav9B,EAAAA,EAAAA,cAChBugB,IACC6c,GAAgBD,IACd,MAAMK,EAAUP,EAAM1c,GAMtB,OALiB4c,EAAYK,KACZjd,KACf4c,EAAc,IAAKA,IACPK,GAAWjd,GAElB4c,CAAW,GAClB,GAEJ,CAACF,IAGGQ,GAAez9B,EAAAA,EAAAA,cAClBugB,IACC6c,GAAgBD,IACd,MAAMK,EAAUP,EAAM1c,GAMtB,OALiB4c,EAAYK,WAE3BL,EAAc,IAAKA,IACAK,GAEdL,CAAW,GAClB,GAEJ,CAACF,IAGGW,GAAgB59B,EAAAA,EAAAA,cACnBg9B,IACC,IAAK,MAAMzc,KAAQyc,EACjBS,EAAald,EACf,GAEF,CAACkd,IAGGrP,GAAapuB,EAAAA,EAAAA,cAChBugB,IACC,MAAMid,EAAUP,EAAM1c,GACtB,YAAgC1a,IAAzBs3B,EAAYK,EAAsB,GAE3C,CAACP,EAAOE,IAGJtU,GAAc7oB,EAAAA,EAAAA,cACjBg9B,IACCI,GAAgBD,IACdA,EAAc,IAAKA,GACnB,IAAK,MAAM5c,KAAQyc,EAEjBG,EADgBF,EAAM1c,IACCA,EAEzB,OAAO4c,CAAW,GAClB,GAEJ,CAACF,IAGGU,GAAY39B,EAAAA,EAAAA,cAAY,KAC5B6oB,EAAYmU,GAAS,GAAG,GACvB,CAACA,EAAOnU,IAELC,GAAc9oB,EAAAA,EAAAA,cAAY,KAC9Bo9B,GAAgBD,GACVpvB,OAAO4f,KAAKwP,GAAaz1B,OAAS,EAC7B,CAAC,EAEHy1B,GACP,GACD,IAEGn4B,GAAgBuD,EAAAA,EAAAA,UAAQ,IAAMwF,OAAOC,OAAOmvB,IAAc,CAACA,IAC3DU,GAAct1B,EAAAA,EAAAA,UAClB,IAAOvD,EAAc0C,SAAWs1B,GAAOt1B,QACvC,CAACs1B,EAAOh4B,EAAc0C,SAGxB,OAAOa,EAAAA,EAAAA,UACL,KAAM,CACJvD,gBACAu4B,aACAE,eACArP,aACAvF,cACA8U,YACA7U,cACA+U,cACAZ,QACAW,mBAEF,CACEC,EACAzP,EACA6O,EACAU,EACAJ,EACA1U,EACA7jB,EACA8jB,EACA2U,EACAG,GAGN,C8DlToBkzB,CAAoB9zB,EAAOC,GAE7C,OAAO10B,EAAAA,EAAAA,UAAQ,KACN,CACL0gB,UAAW+T,EAAQgzB,EAASA,SAAStoD,YAAS7B,EAC9C+iB,UAAWoU,EAAQgB,EAAMA,WAAQn4B,EACjCqL,MAAOqZ,EAAQrZ,SACZ8/B,KACAtsC,KAEJ,CAACsrD,EAASA,SAAStoD,OAAQs1B,EAAOzS,EAAQrZ,MAAO8sB,EAAMA,MAAOt5B,EAAWssC,GAC9E,C,2BCzFA,MACM+f,GAAiE,SADxD,IAAInH,gBAAgB/pD,OAAO07B,SAASrM,QACV8/B,IAAI,sBAExCgC,GAAAA,GAAAA,IACE,CACHrpD,KAAM,gBACNrG,KAAM,qBACNktC,QAAS,SAAU5vC,GACjB,OAAKmyD,GAGD5zC,MAAMC,QAAQxe,GACT,CAAC,OAAQA,EAAO,KAEhB,IAAIA,KALJA,CAOX,IAEDqyD,IAAIC,GAAAA,GACJD,IAAIE,GAAAA,GACJF,IAAIG,EAAAA,IACJC,KAAK,CACJC,UAAW,CACTC,kBAAmB,OACnBC,aAAc,OACdC,mBAAoB,QAEtBC,YAAa,KACbC,cAAe,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC1DntC,cAAe,CACbotC,aAAa,GAEfC,YAAa,CAAC,wB,eCnCXj/C,eAAek/C,GAAmBC,GACvC,MAAMxgD,EAAkBwgD,EAASC,WACjC,IAAIC,EACA5nD,EACA0uC,EAEJ,MAAMmZ,EAAcH,EAASI,QAAQnD,IAAI,gBAYzC,OAXIkD,GAAazlD,SAAS,oBACxBpC,QAsBJuI,eAAyBm/C,GACvB,IACE,aAAcA,EAAShZ,MACzB,CAAE,MACA,MACF,CACF,CA5BiBqZ,CAAUL,GACdG,GAAazlD,SAAS,gBAC/BpC,QAWJuI,eAAyBm/C,GACvB,IACE,MAAMp/C,QAAao/C,EAASp/C,OAC5B,OAcJ,SAAsB/T,GACpB,IACE,OAAO0V,KAAKC,MAAM3V,EACpB,CAAE,MACA,MACF,CACF,CApBWyzD,CAAa1/C,IAASA,CAC/B,CAAE,MACA,MACF,CACF,CAlBiB2/C,CAAUP,IAGL,iBAAT1nD,GAA8B,OAATA,IAC9B0uC,EAAO1uC,EACP4nD,GAAU98C,EAAAA,GAAAA,IAAU9K,IAGf,IAAIkoD,GAAahhD,EAAS0gD,EAASF,EAASnjB,OAAQvkC,EAAM0uC,EACnE,CA2BO,MAAMwZ,WAAqB/pC,MAMhC5X,WAAAA,CACEW,EACA0gD,EACAO,EACAnoD,EACA0uC,GAEA0Z,MAAMlhD,GACNxD,OAAO2kD,eAAephD,KAAMihD,GAAaI,WACzCrhD,KAAKhQ,KAAO,eACZgQ,KAAK2gD,QAAUA,EACf3gD,KAAKkhD,WAAaA,EAClBlhD,KAAKjH,KAAOA,EACZiH,KAAKynC,KAAOA,CACd,EAGK,SAAS6Z,GAAe1hD,GAC7B,OAAOA,aAAiBqhD,EAC1B,CClEO,SAASM,GAAUC,GACxB,MAAMC,EAAU3oD,SAAS4oD,OAAOtnD,MAAM,KAAKT,KAAK+nD,GAAWA,EAAOnrC,SAClE,IAAK,MAAMmrC,KAAUD,EACnB,GAAIC,EAAOxL,WAAWsL,EAAa,KACjC,OAAOE,EAAOr2B,MAAMm2B,EAAWprD,OAAS,EAG9C,CCZO,SAASurD,GAAc1oC,GAO5B,MAAM,IAAE+9B,EAAG,OAAE4K,EAAM,KAAE7oD,EAAI,OAAEslB,GAAWpF,EAEhC4nC,EAAuB,CAC3BgB,QAAS,mBACT,cAAeN,GAAU,cAAgB,IAM3C,OAJIxoD,IACF8nD,EAAQ,gBAAkB,oBAGrBiB,MAAM9K,EAAK,CAChB4K,SACA7oD,KAAMA,EAAOiK,KAAKa,UAAU9K,QAAQxE,EACpCwtD,YAAa,UACblB,QAAS,IAAKA,KAAY5nC,EAAQ4nC,SAClCxiC,SACA2jC,SAAU,SAEd,CCfO1gD,eAAe2gD,GACpBjL,EACA34B,GAGA,OAAO6jC,GAA6BlL,EADX,CAAE34B,SAAQujC,OAAQ,OAE7C,CAEOtgD,eAAe6gD,GACpBnL,EACAvP,EACAppB,GAOA,OAAO6jC,GAA6BlL,EALX,CACvB4K,OAAQ,OACRna,OACAppB,UAGJ,CAeO/c,eAAe8gD,GACpBpL,EACAvP,GAMA,OAAOya,GAA6BlL,EAJX,CACvB4K,OAAQ,QACRna,QAGJ,CAEOnmC,eAAe+gD,GACpBrL,EACA34B,GAGA,OAAO6jC,GAA6BlL,EADX,CAAE34B,SAAQujC,OAAQ,UAE7C,CAEAtgD,eAAe4gD,GAA6BlL,EAAa/9B,GACvD,MAAM2oC,EAAS3oC,EAAQ2oC,OACjB7oD,EAAOkgB,EAAQwuB,KACfoZ,EAAU5nC,EAAQ4nC,QAClBxiC,EAASpF,EAAQoF,OAEjB5nB,QAAekrD,GAAc,CACjC3K,MACA4K,SACA7oD,OACA8nD,UACAxiC,WAEF,IAAK5nB,EAAO6rD,GACV,YAAY9B,GAAmB/pD,GAGjC,MAAe,WAAXmrD,GACoB,MAAlBnrD,EAAO6mC,QAAoC,MAAlB7mC,EAAO6mC,OAMvB,SAAXskB,GACoB,MAAlBnrD,EAAO6mC,OACF,KAGJ7mC,EAAOgxC,OAVH,IAWb,CAEO,SAAS8a,KACd,OAAON,EACT,CAMO,SAASO,GAAWvzC,GACzB,OAAOA,GAAMlf,GAAGqhB,UAClB,CAEO,MAAMqxC,GAA+B,CAC1CC,iBAAkB,GC9Gb,SAASC,GAAqBzL,GACnC,GAAIA,GAASz6C,OAAO4f,KAAK66B,GAAO9gD,OAAS,EAAG,CAC1C,MAAMwsD,EAAkBnmD,OAAO4f,KAAK66B,GAAOvmC,QACzC,CAACiyC,EAAiB5jD,KAChB4jD,EAAgB5jD,GAAOk4C,EAAMl4C,GAAKoS,WAC3BwxC,IAET,CAAC,GAEH,MAAO,IAAM,IAAItK,gBAAgBsK,GAAiBxxC,UACpD,CACA,MAAO,EACT,CCVA,MAAMyxC,GAAW,CACf,gBAAiB,WACjB,0CAA2C,OAC3C,eAAgB,WAChB,aAAc,WACd,WAAY,OACZ,WAAY,WACZ,iDAAkD,YAG9CC,GAAW,CACf,eAAgB,OAChB,kBAAmB,OACnB,aAAc,OACd,WAAY,SACZ,WAAY,QAGP,SAASC,GAAS/L,GACvB,IAAIgM,EAAU,OACdvmD,OAAOwmD,QAAQJ,IAAU72B,SAAQ,EAAEk3B,EAAGvmD,MAChCq6C,EAAI77C,SAAS+nD,KACfF,EAAUrmD,EACZ,IAGF,IAAIwmD,EAAU,SAOd,OANA1mD,OAAOwmD,QAAQH,IAAU92B,SAAQ,EAAEk3B,EAAGvmD,MAChCq6C,EAAI77C,SAAS+nD,KACfC,EAAUxmD,EACZ,IAGK,CAAEwmD,UAASH,UACpB,CCjCO,SAASI,GAAOC,KAAkC3mD,GACvD,GAAwB,MAApB2mD,EAAQ,KAAK,GACf,MAAM,IAAInsC,MAAM,yCAGlB,IAAI8/B,EAAM,GAQV,OAPAqM,EAAQr3B,SAAQ,CAACs3B,EAAU1pD,KACzBo9C,GAAOsM,EACH1pD,IAAUypD,EAAQjtD,OAAS,IAC7B4gD,GAAOG,mBAAmB,GAAGz6C,EAAOnG,SAAW,MACjD,IAGKygD,CACT,CAEA,SAASuM,GAAWvM,EAAawM,EAAcC,GAC7C,GAAIzM,EAAI77C,SAAS,IAAIsoD,OAAWzM,EAAI77C,SAAS,IAAIsoD,MAC/C,MAAM,IAAIvsC,MAAM,wBAAwBssC,YAAeC,YAAczM,KAEzE,CAwEO,IAAI0M,GAAaxmB,cAMjB,SAASymB,GAAON,KAAkC3mD,GACvD,MAAMyrC,EAAOub,GACb,GAAIvb,GAAQA,EAAKyb,SAAS,KACxB,MAAM,IAAI1sC,MAAM,sDAElB,OAAOixB,EA9ET,SAAmBkb,KAAkC3mD,GACnD,GAAwB,MAApB2mD,EAAQ,KAAK,GACf,MAAM,IAAInsC,MAAM,yCAGlB,IAAI8/B,EAAM,GAcV,GAbAqM,EAAQr3B,SAAQ,CAACs3B,EAAU1pD,KAEzB,GADAo9C,GAAOsM,EACH1pD,IAAUypD,EAAQjtD,OAAS,EAAG,CAChC,MAAMgoB,EAAO1hB,EAAOnG,QAChB6nB,GAAwB,iBAATA,IAAsBklC,EAASM,SAAS,MAAQN,EAASM,SAAS,MAEnF5M,GDFD,SAAwBA,EAAaC,GAC1C,MAAM,QAAEkM,EAAO,QAAEH,GAAYD,GAAS/L,GAChC6M,EAAoC,CAAC,EACrCC,EAAW,CAAE/7B,KAAM,YAAag8B,OAAQ,SAAUZ,GAClDvmB,EAASqa,EAAO+M,WAAa/M,EAAOra,OAAS,GA0BnD,OAvBAngC,OAAOwmD,QAAQhM,GAAU,CAAC,GAAGjrB,SAAQ,EAAEk3B,EAAGvmD,MACpC,CAAC,OAAQ,UAAUxB,SAAS+nD,IAAMC,IAAYD,IACtC,WAANA,GAA8B,SAAZC,IACpBxmD,EAAI,KAAOA,EAAIigC,IAEP,SAANsmB,GAA4B,WAAZC,IAClBxmD,GAAKA,EAAI,GAAKigC,GAEhBsmB,EAAIC,GAGF,CAAC,YAAa,SAAShoD,SAAS+nD,IAAMY,IAAaZ,IACrDA,EAAIY,GAGF,CAAC,OAAQ,WAAY,YAAY3oD,SAAS+nD,IAAMF,IAAYE,IAC9DA,EAAIF,GAINa,EAAUX,GAAK/L,mBAAmBx6C,EAAE,IAG/BgmD,GAAqBkB,EAC9B,CC7BeI,CAAejN,EAAK54B,GAAmDiN,MAAM,GAEpF2rB,GAAOG,mBAAmB,GAAI/4B,GAAwB,KAE1D,KAGE44B,EAAI77C,SAAS,MACf,MAAM,IAAI+b,MAAM,uDAAuD8/B,MAGzE,IAAKA,EAAI77C,SAAS,QAAU67C,EAAI4M,SAAS,KACvC,MAAM,IAAI1sC,MACR8/B,EAAI77C,SAAS,KACT,gDAAgD67C,KAChD,6CAA6CA,MAIrD,GAAIA,EAAIqB,QAAQ,OAASrB,EAAIkN,YAAY,KACvC,MAAM,IAAIhtC,MAAM,oCAAoC8/B,MAGtD,GAAIA,EAAI77C,SAAS,KAAM,CACrB,MAAM,QAAEgoD,EAAO,QAAEH,GAAYD,GAAS/L,GAEtB,SAAZmM,IACFI,GAAWvM,EAAK,OAAQ,UACxBuM,GAAWvM,EAAK,YAAa,UAGf,WAAZmM,IACFI,GAAWvM,EAAK,SAAU,QAC1BuM,GAAWvM,EAAK,QAAS,cAGX,SAAZgM,IACFO,GAAWvM,EAAKgM,EAAS,YACzBO,GAAWvM,EAAKgM,EAAS,aAGX,aAAZA,IACFO,GAAWvM,EAAKgM,EAAS,QACzBO,GAAWvM,EAAKgM,EAAS,aAGX,aAAZA,IACFO,GAAWvM,EAAKgM,EAAS,QACzBO,GAAWvM,EAAKgM,EAAS,YAE7B,CAEA,OAAOhM,CACT,CAagBmN,CAAUd,KAAY3mD,EACtC,CCzGO,IAAI0nD,GAAalnB,UAMjB,SAASmnB,GAAOhB,KAAkC3mD,GACvD,OAAO0nD,GAAahB,GAAOC,KAAY3mD,EACzC,CCGO,MAAM4nD,IAAuB9xD,EAAAA,EAAAA,eAA+B,CAAC,GAE7D,SAAS+xD,KACd,OAAOvxD,EAAAA,EAAAA,YAAWsxD,GACpB,CAEO,SAASE,GAAsB90D,GACpC,OAAOA,GAAO65C,UACZ32C,EAAAA,EAAAA,KAAC0xD,GAAqBzxD,SAAQ,CAACvF,MAAO,CAAC,EAAEwF,SAAEpD,EAAMoD,YAEjDF,EAAAA,EAAAA,KAAC6xD,GAA6B,CAAA3xD,SAAEpD,GAAOoD,UAE3C,CACO,SAAS2xD,GAA8B/0D,GAC5C,MAAM+wD,GAAWiE,EAAAA,GAAAA,IAAkCL,EAAM,OAAQpC,GAAY,CAC3ES,iBAAkB,EAClBv/C,gBAAiB,OAGZwhD,EAAeC,IAAoBt2D,EAAAA,EAAAA,eAAqCiG,IAE/E5F,EAAAA,EAAAA,YAAU,KACRi2D,GAAkBC,GACZpE,EAAS7gD,MACJ,KAGL6gD,EAAS3tC,MAAQ2tC,EAAS3tC,KAAKgyC,QAAQ1uD,OAAS,EAC3CqqD,EAAS3tC,KAAKgyC,QAAQ,GAG3BrE,EAASzkC,UACJ6oC,EAGF,MACP,GACD,CAACpE,IAEJ,MAAMsE,EAAStE,EAASsE,OAClBpyD,GAAQsE,EAAAA,EAAAA,UAAyB,KAC9B,CAAE0tD,gBAAeK,qBAAsBA,KAAWD,OAAOxwD,EAAW,KAC1E,CAACowD,EAAeI,IAEnB,OACEnyD,EAAAA,EAAAA,KAAC0xD,GAAqBzxD,SAAQ,CAACvF,MAAOqF,EAAMG,SAAEpD,EAAMoD,UAExD,C,IC5DImyD,GAAQC,GAAOC,GAAQC,GAAQC,GAAQC,GAAQC,GAAQC,GAAQC,GAAQC,GAAQC,GAASC,GAASC,GAASC,GAASC,GAAUC,GAASC,GAAUC,G,wBCK7I,SAASC,GAAqBz2D,GAMnC,MAAM4zB,EAAYp1B,EAAc,OACzB2O,EAAMyc,IAAWhrB,EAAAA,EAAAA,WAAS,GAC3BoK,GAAWhK,EAAAA,EAAAA,cAAY,IAAM4qB,GAASzc,IAAUA,KAAO,IACvD1H,GAAWzG,EAAAA,EAAAA,cAAY,IAAM4qB,GAASzc,IAAUA,KAAO,IACvD/J,EAAW+Y,MAAMC,QAAQpc,EAAMoD,UAAYpD,EAAMoD,SAAW,CAACpD,EAAMoD,UAEzE,OACEF,EAAAA,EAAAA,KAAC4F,GAAAA,EAAQ,CACPzI,GAAIL,EAAMK,GACVsL,OAAQ3L,EAAMK,GACd2I,SAAUA,EACVQ,QACEtG,EAAAA,EAAAA,KAACqlB,GAAAA,EAAc,CAACmuC,gBAAiB,KAAMjxD,SAAUA,EAASrC,UACxDoF,EAAAA,EAAAA,MAAC6E,EAAAA,EAAI,CACHrB,WAAY,CAAEuB,QAAS,oBACvBD,SAAU,CAAEC,QAAS,UACrBC,WAAY,CAAED,QAAS,gBAAiBnK,SAAA,EAExCF,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAAtK,SAAEpD,EAAMoG,OAChBwtB,GAAa5zB,EAAMQ,QAAS0C,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAACipD,KAAK,SAAQvzD,SAAEpD,EAAMQ,aAIlEuI,OAAQoE,EACRypD,SAAO,EACP9tC,cAAe1lB,EACfkD,SAAS,QACT,UAAStG,EAAMK,IAGrB,CDxCA,SAASw2D,KAAa,OAAOA,GAAW9pD,OAAO8zC,OAAS9zC,OAAO8zC,OAAOiW,OAAS,SAAUC,GAAK,IAAK,IAAIvjD,EAAI,EAAGA,EAAIwjD,UAAUtwD,OAAQ8M,IAAK,CAAE,IAAIpJ,EAAI4sD,UAAUxjD,GAAI,IAAK,IAAI47B,KAAKhlC,GAAG,CAAG,GAAE6sD,eAAeC,KAAK9sD,EAAGglC,KAAO2nB,EAAE3nB,GAAKhlC,EAAEglC,GAAK,CAAE,OAAO2nB,CAAG,EAAGF,GAASM,MAAM,KAAMH,UAAY,CA4GnR,SA1GiB,SAAoBh3D,GACnC,OAAoB,gBAAoB,MAAO62D,GAAS,CACtDO,MAAO,6BACPC,SAAU,WACVh3D,GAAI,wBACJmZ,OAAQ,GACR+J,EAAG,EACHpB,EAAG,EACHm1C,QAAS,qBACRt3D,GAAQu1D,KAAWA,GAAsB,gBAAoB,QAAS,KAAM,sSAAuSC,KAAUA,GAAqB,gBAAoB,OAAQ,CAC/a+B,EAAG,iEACH3tD,UAAW,uBACR6rD,KAAWA,GAAsB,gBAAoB,OAAQ,CAChE8B,EAAG,kKACH3tD,UAAW,uBACR8rD,KAAWA,GAAsB,gBAAoB,OAAQ,CAChE6B,EAAG,gEACH3tD,UAAW,uBACR+rD,KAAWA,GAAsB,gBAAoB,OAAQ,CAChE4B,EAAG,iKACH3tD,UAAW,uBACRgsD,KAAWA,GAAsB,gBAAoB,OAAQ,CAChE2B,EAAG,gEACH3tD,UAAW,uBACRisD,KAAWA,GAAsB,gBAAoB,OAAQ,CAChE0B,EAAG,iKACH3tD,UAAW,uBACRksD,KAAWA,GAAsB,gBAAoB,OAAQ,CAChEyB,EAAG,6DACH3tD,UAAW,uBACRmsD,KAAWA,GAAsB,gBAAoB,OAAQ,CAChEwB,EAAG,oMACH3tD,UAAW,uBACK,gBAAoB,OAAQ,CAC5C2tD,EAAG,oHACHxyD,MAAO,CACLic,KAAM,aAENg1C,KAAWA,GAAsB,gBAAoB,OAAQ,CAC/DuB,EAAG,yGACH3tD,UAAW,uBACK,gBAAoB,OAAQ,CAC5C2tD,EAAG,4BACHxyD,MAAO,CACLic,KAAM,aAEO,gBAAoB,OAAQ,CAC3Cu2C,EAAG,uDACHxyD,MAAO,CACLic,KAAM,aAENi1C,KAAYA,GAAuB,gBAAoB,OAAQ,CACjEsB,EAAG,8DACH3tD,UAAW,uBACK,gBAAoB,OAAQ,CAC5C2tD,EAAG,+IACHxyD,MAAO,CACLic,KAAM,aAEO,gBAAoB,OAAQ,CAC3Cu2C,EAAG,+CACHxyD,MAAO,CACLic,KAAM,aAEO,gBAAoB,OAAQ,CAC3Cu2C,EAAG,uDACHxyD,MAAO,CACLic,KAAM,aAEO,gBAAoB,OAAQ,CAC3Cu2C,EAAG,qHACHxyD,MAAO,CACLic,KAAM,OACNsC,OAAQ,UACRD,YAAa,EACbm0C,iBAAkB,MAElBtB,KAAYA,GAAuB,gBAAoB,OAAQ,CACjEqB,EAAG,kXACH3tD,UAAW,wBACRusD,KAAYA,GAAuB,gBAAoB,SAAU,CACpEsB,GAAI,OACJC,GAAI,GACJtoB,EAAG,GACHxlC,UAAW,wBACRwsD,KAAYA,GAAuB,gBAAoB,OAAQ,CAClEmB,EAAG,uLACH3tD,UAAW,uBACRysD,KAAaA,GAAwB,gBAAoB,SAAU,CACtEoB,GAAI,MACJC,GAAI,IACJtoB,EAAG,GACHxlC,UAAW,wBACR0sD,KAAYA,GAAuB,gBAAoB,OAAQ,CAClEiB,EAAG,uLACH3tD,UAAW,uBACR2sD,KAAaA,GAAwB,gBAAoB,SAAU,CACtEkB,GAAI,OACJC,GAAI,IACJtoB,EAAG,GACHxlC,UAAW,uBACR4sD,KAAYA,GAAuB,gBAAoB,OAAQ,CAClEe,EAAG,wLACH3tD,UAAW,uBAEf,E,oDElGA,SAAS+tD,GAAkB33D,GACzB,MAAOs7B,EAASQ,GAAaD,MACvB,EAAEzxB,IAAMC,EAAAA,EAAAA,MACd,OACEnH,EAAAA,EAAAA,KAAC00D,GAAAA,EAAU,CACT7uD,QAAM,EACN0G,QAASA,KACPqsB,OAAUj3B,GACV7E,EAAMyP,WAAW,EAEnBooD,UAAWztD,EAAE,uCAAwC,CAAE0tD,UAAU,IAAIhjD,MAAOijD,gBAC5EC,cAAeh4D,EAAMg4D,cACrBC,cAAe7tD,EAAE,cACjB8tD,YAAa1qB,MAAgCpqC,UAE7CF,EAAAA,EAAAA,KAACi1D,GAAAA,EAAW,CAAA/0D,UACVoF,EAAAA,EAAAA,MAAC4vD,GAAAA,EAAQ,CAACjtD,UAAU,KAAI/H,SAAA,EACtBF,EAAAA,EAAAA,KAACm1D,GAAAA,EAAY,CAACltD,UAAU,KAAI/H,SAAEgH,EAAE,cAChClH,EAAAA,EAAAA,KAACm1D,GAAAA,EAAY,CAACltD,UAAU,KAAI/H,cAAEoqC,UAKxC,C,gBC5BO,SAAS8qB,KACd,MAAOC,EAAYC,IAAiB55D,EAAAA,EAAAA,WAAS,GACvC65D,GAAUz5D,EAAAA,EAAAA,cAAY,KAC1Bw5D,GAAc,IACTnD,EAAAA,GAAAA,KAAQ/lD,GAAuB,iBAARA,IAAkB8f,SAAQ,KACpDopC,GAAc,EAAM,GACpB,GACD,KACIE,EAAUC,IAAe/5D,EAAAA,EAAAA,UAAS,GAwCzC,OAtCAuc,EAAAA,EAAAA,kBAAgB,KACd,IAAIy9C,EACApiD,EA2BJ,OAAI+hD,GACFK,EAAQC,uBA3BV,SAASC,EAAOpW,QACA79C,IAAV2R,IACFA,EAAQksC,GAEV,MAAM/rC,EAAU+rC,EAAYlsC,EAC5BA,EAAQksC,EACRkW,EAAQC,sBAAsBC,GAC9BH,GAAaG,GAAWA,EAASniD,EAAU,GAC7C,IAoBS,IAAMoiD,qBAAqBH,KAElCA,EAAQC,uBArBV,SAASG,EAAKtW,QACE79C,IAAV2R,IACFA,EAAQksC,GAEV,MAAM/rC,EAAU+rC,EAAYlsC,EAC5BA,EAAQksC,EAERkW,EAAQC,sBAAsBG,GAC9BL,GAAaG,GACPjoD,KAAKC,MAAMgoD,EAAS,OAASjoD,KAAKC,OAAOgoD,EAASniD,EAAU,GAAK,MACnEoiD,qBAAqBH,GACd,GAEFE,EAASniD,EAAU,GAE9B,IAOS,IAAMoiD,qBAAqBH,GACpC,GACC,CAACL,KAGFr1D,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CAACC,QAAQ,UAAUmB,SAAS,SAAS2yD,WAAY,IAAK71D,UAC5DF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAACpI,GAAG,UAAU,UAAQ,UAAUwJ,QAAS4uD,EAASlyD,QAAQ,QAAOnD,UACtEF,EAAAA,EAAAA,KAACg2D,GAAAA,GAAW,CAACn0D,MAAO,CAAE4Z,UAAW,WAAW+5C,cAIpD,CCtDO,SAASS,GACd7R,EACAE,EACA4R,EAAqC,CAAC,GAEtC,MAAMC,EAAaC,KAEfhS,IACFA,GAAO2L,GAAqBzL,IAG9B,MAAMuJ,GAAWiE,EAAAA,GAAAA,IAAU1N,EAAK+R,EAAY,CAC1CrG,iBAAkB,KACfoG,IAECX,GAAUz5D,EAAAA,EAAAA,cAAY,KAAW+xD,EAASsE,QAAQ,GAAE,CAACtE,IAC3D,IAAI7gD,EAAQ6gD,EAAS7gD,MAKrB,OAJIA,GAAWA,aAAiBsX,QAC9BtX,EAAQ,IAAIsX,MAAM,mBAGbjgB,EAAAA,EAAAA,UACL,KAAM,CACJ6b,KAAM2tC,EAAS3tC,KACflT,MAAO6gD,EAASzkC,eAAYznB,EAAYqL,EACxCuoD,UACAnsC,UAAWykC,EAASzkC,aAEtB,CAACykC,EAAS3tC,KAAM2tC,EAASzkC,UAAWpc,EAAOuoD,GAE/C,CAGO,SAASc,GACdjS,EACAjnD,EACA0yD,GAMA,OAJIzL,GAAK4M,SAAS,OAChB5M,EAAMA,EAAI3rB,MAAM,EAAG2rB,EAAI5gD,OAAS,IAG3ByyD,GAAU7R,GAAOjnD,EAAK,GAAGinD,KAAOjnD,UAAQwE,OAAWA,EAAWkuD,EACvE,CAEO,SAASuG,KACd,MAAMttB,GAAqB9yB,EAAAA,EAAAA,QAA8C,CAAC,GAK1E,OAJAja,EAAAA,EAAAA,YAAU,KACR,MAAM0K,EAAMqiC,EACZ,MAAO,IAAMriC,EAAI2P,QAAQiV,iBAAiBD,OAAO,GAChD,IACI1c,MACL01C,EACAE,EACA74B,KAEI24B,IACFA,GAAO2L,GAAqBzL,IAG9B,MAAMuJ,QAA2BkB,GAAc,CAC7C3K,MACA4K,OAAQ,MACRvjC,WAEF,IAAKoiC,EAAS6B,GACZ,YAAY9B,GAAmBC,GAEjC,aAAcA,EAAShZ,MAAM,CAEjC,CCtEA,MAAMyhB,IAAmB12D,EAAAA,EAAAA,eAItB,CAAC,GAEG,SAAS22D,KACd,OAAOn2D,EAAAA,EAAAA,YAAWk2D,IAAkBE,SACtC,CAMO,SAASC,GAAkB35D,GAChC,OAAOA,GAAO65C,UACZ32C,EAAAA,EAAAA,KAACs2D,GAAiBr2D,SAAQ,CACxBvF,MAAO,CACL87D,eAAW70D,EACX+0D,oBAAgB/0D,EAChBg1D,sBAAkBh1D,GAClBzB,SAEDpD,EAAMoD,YAGTF,EAAAA,EAAAA,KAAC42D,GAAyB,CAAA12D,SAAEpD,GAAOoD,UAEvC,CAEO,SAAS02D,GAA0B95D,GACxC,MAAM+wD,GAAWiE,EAAAA,GAAAA,IAAeL,EAAM,WAAYpC,IAC5C30D,GAAQ2J,EAAAA,EAAAA,UACZ,KAAM,CACJmyD,UAAW3I,EAAS3tC,KACpBw2C,eAAgB7I,EAAS7gD,MACzB2pD,iBAAkBA,IAAM9I,EAASsE,YAAOxwD,MAE1C,CAACksD,IAEH,OAAO7tD,EAAAA,EAAAA,KAACs2D,GAAiBr2D,SAAQ,CAACvF,MAAOA,EAAMwF,SAAEpD,EAAMoD,UACzD,C,gBC3BA,MAAM22D,IAAmBj3D,EAAAA,EAAAA,eAA0B,CACjDk3D,YAAaA,IAAM,KACnBC,gBAAiBA,IAAM,KACvBC,YAAa,KACbC,gBAAiB,KACjBC,WAAYC,GAAAA,GAAWC,eACvBC,aAAcA,IAAM,KACpBC,iBAAkBA,IAAM,OAOnB,SAASC,GAAkBz6D,GAChC,MAAO06D,EAAcC,IAAmB/7D,EAAAA,EAAAA,UAAwB,MAC1Dg8D,GAAYC,EAAAA,GAAAA,IAAkBH,EAAc,CAAEI,gBAAiBA,KAAM,KACpEC,EAAeP,IAAoB57D,EAAAA,EAAAA,UAAwB,CAAC,IAEnEK,EAAAA,EAAAA,YAAU,KACR,MAAM+7D,EAAMn8D,OAAO07B,SACnB,IAAI0gC,EAEFA,EADmB,WAAjBD,EAAIE,SACI,OAEA,MAEZD,GAAW,KAAOD,EAAIG,KACtBF,GAAWztB,cACXmtB,EAAgBM,EAAQ,GACvB,IAEH,MAAM,YAAEjB,EAAW,WAAEI,GAAeQ,EAgBpC,OAdA37D,EAAAA,EAAAA,YAAU,KACR,MAAMm8D,EAAYvJ,GAAU,aAC5B,GAAIuJ,GAAahB,IAAeC,GAAAA,GAAWgB,KAAM,CAC/C,MAAM16C,EAAS5T,OAAO4f,KAAKouC,GAAe95C,QACxC,CAACN,EAAQC,KACPD,EAAOC,GAAS7T,OAAO4f,KAAKouC,EAAcn6C,IACnCD,IAET,CAAC,GAEHq5C,EAAY1mD,KAAKa,UAAU,CAAEwM,SAAQ26C,SAAUF,IACjD,IACC,CAACpB,EAAae,EAAeX,KAG9Bl3D,EAAAA,EAAAA,KAAC62D,GAAiB52D,SAAQ,CAACvF,MAAO,IAAKg9D,EAAWJ,oBAAmBp3D,SAClEpD,EAAMoD,UAGb,CAEO,SAASm4D,GACdC,EACAC,GAEA,MAAOC,IAAQ98D,EAAAA,EAAAA,WAAS,IAAM48D,KACxB,YAAExB,EAAW,gBAAEG,EAAe,YAAED,EAAW,WAAEE,EAAU,iBAAEI,IAjDxDl3D,EAAAA,EAAAA,YAAWy2D,IA6FlB,OAzCA96D,EAAAA,EAAAA,YAAU,KACRu7D,GAAkBO,IAChBA,EAAgB,IAAKA,GACrB,IAAK,MAAMn6C,KAAS7T,OAAO4f,KAAK+uC,GAAO,CACrC,IAAIC,EAAsBZ,EAAcn6C,GACnC+6C,IACHA,EAAsB,CAAC,EACvBZ,EAAcn6C,GAAS+6C,GAEzB,IAAK,MAAM3wC,KAAS0wC,EAAK96C,GACvB+6C,EAAoB3wC,IAAU2wC,EAAoB3wC,IAAU,GAAK,CAErE,CACA,OAAO+vC,CAAa,IAEf,KACLP,GAAkBO,IAChBA,EAAgB,IAAKA,GACrB,IAAK,MAAMn6C,KAAS7T,OAAO4f,KAAK+uC,GAAO,CACrC,MAAMC,EAAsBZ,EAAcn6C,GAC1C,GAAI+6C,EAAqB,CACvB,IAAK,MAAM3wC,KAAS0wC,EAAK96C,GACvB+6C,EAAoB3wC,IAAU2wC,EAAoB3wC,IAAU,GAAK,EAC9B,IAA/B2wC,EAAoB3wC,WACf2wC,EAAoB3wC,GAGiB,IAA5Cje,OAAO4f,KAAKgvC,GAAqBj1D,eAC5Bq0D,EAAcn6C,EAEzB,CACF,CACA,OAAOm6C,CAAa,GACpB,IAEH,CAACW,EAAMlB,KAEVv7D,EAAAA,EAAAA,YAAU,KACRw8D,EAAUtB,EAAgB,GACzB,CAACA,EAAiBsB,IAEd,CAAEzB,cAAaE,cAAaE,aACrC,CC3HA,MAAMwB,IAAqB94D,EAAAA,EAAAA,eAAgD,CAAE+4D,aAASh3D,IAM/E,SAASi3D,GAAoB97D,GAIlC,OACEkD,EAAAA,EAAAA,KAAC04D,GAAmBz4D,SAAQ,CAACvF,MAAO,CAAEi+D,QAAS77D,EAAM67D,SAAUz4D,SAC5DpD,EAAMoD,UAGb,CCcO,SAAS24D,GACdC,EACAC,GAEA,MAAM,QAAEJ,ID9BDv4D,EAAAA,EAAAA,YAAWs4D,KC8BsB,CAAEC,QAAS,OAC7CK,EAAcF,GAAQG,cAAcC,aAC1C,OAAIF,GAA+B,SAAhBA,EACV,gFAAgFL,UAAgBQ,GAAgBJ,KAEhH,yDAAyDK,GAAcL,IAElF,CAEA,MAAMK,GAAmC,CACvCC,gBAAiB,kCACjBlK,YAAa,6BACbmK,cAAe,+BACfC,MAAO,uBACPC,MAAO,uBACPC,eAAgB,2CAChBC,aAAc,mCACdC,sBAAuB,wCACvBC,eAAgB,iCAChBC,UAAW,+BACXC,SAAU,iCACVC,UAAW,2BACXC,YAAa,8CACbC,mBAAoB,uCACpBjzD,MAAO,uBACPkzD,MAAO,uBACPC,YAAa,6BACbC,uBAAwB,qDACxBC,kBAAmB,gEACnBC,SAAU,0BACVC,UAAW,+BACXC,mBAAoB,iDACpBC,iBAAkB,kDAClBC,KAAM,sBACNC,UAAW,6BAGPxB,GAAqC,CACzCE,gBAAiB,0EACjBlK,YAAa,0DACbmK,cAAe,qEACfC,MAAO,6DACPC,MAAO,6DACPC,eAAgB,uEAChBC,aAAc,oEACdC,sBACE,8EACFC,eAAgB,uEAChBC,UAAW,qEACXC,SAAU,uEACVC,UAAW,iEACXC,YAAa,mFACbC,mBACE,gGACFjzD,MAAO,yCACPkzD,MAAO,6DACPC,YAAa,0DACbC,uBACE,iGACFC,kBACE,yGACFC,SAAU,uDACVC,UAAW,4DACXC,mBACE,oGACFC,iBACE,+FACFC,KAAM,mDACNC,UAAW,yDCvGN,IAAKC,GAAQ,SAARA,GAAQ,OAARA,EAAQ,UAARA,EAAQ,wBAARA,EAAQ,gBAARA,EAAQ,uBAARA,EAAQ,2BAARA,EAAQ,6BAARA,EAAQ,gFAARA,EAAQ,0BAARA,EAAQ,qCAARA,EAAQ,iCAARA,EAAQ,qCAARA,EAAQ,2CAARA,EAAQ,kDAARA,EAAQ,wDAARA,EAAQ,gFAARA,EAAQ,0BAARA,EAAQ,4CAARA,EAAQ,6DAARA,EAAQ,oCAARA,EAAQ,oCAARA,EAAQ,0CAARA,EAAQ,+DAARA,EAAQ,qDAARA,EAAQ,qDAARA,EAAQ,wCAARA,EAAQ,4CAARA,EAAQ,mDAARA,EAAQ,qDAARA,EAAQ,0DAARA,EAAQ,kDAARA,EAAQ,qDAARA,EAAQ,yDAARA,EAAQ,qDAARA,EAAQ,uDAARA,EAAQ,wEAARA,EAAQ,kDAARA,EAAQ,6CAARA,EAAQ,6CAARA,EAAQ,yDAARA,EAAQ,+DAARA,EAAQ,sEAARA,EAAQ,sEAARA,EAAQ,mEAARA,EAAQ,0EAARA,EAAQ,gFAARA,EAAQ,8EAARA,EAAQ,0EAARA,EAAQ,yFAARA,EAAQ,yDAARA,EAAQ,6DAARA,EAAQ,oEAARA,EAAQ,sEAARA,EAAQ,2EAARA,EAAQ,yDAARA,EAAQ,6CAARA,EAAQ,0EAARA,EAAQ,kEAARA,EAAQ,kEAARA,EAAQ,8BAARA,EAAQ,yCAARA,EAAQ,qCAARA,EAAQ,qCAARA,EAAQ,2CAARA,EAAQ,uDAARA,EAAQ,kDAARA,EAAQ,kDAARA,EAAQ,+CAARA,EAAQ,+CAARA,EAAQ,wBAARA,EAAQ,mCAARA,EAAQ,+BAARA,EAAQ,+BAARA,EAAQ,qCAARA,EAAQ,gDAARA,EAAQ,iDAARA,EAAQ,oDAARA,EAAQ,gDAARA,EAAQ,yCAARA,EAAQ,iCAARA,EAAQ,iCAARA,EAAQ,wCAARA,EAAQ,wCAARA,EAAQ,gDAARA,EAAQ,sDAARA,EAAQ,8BAARA,EAAQ,uCAARA,EAAQ,kDAARA,EAAQ,8DAARA,EAAQ,mCAARA,EAAQ,mCAARA,EAAQ,4CAARA,EAAQ,yCAARA,EAAQ,uCAARA,EAAQ,kDAARA,EAAQ,8CAARA,EAAQ,8CAARA,EAAQ,oDAARA,EAAQ,iEAARA,EAAQ,8EAARA,EAAQ,8CAARA,EAAQ,qDAARA,EAAQ,qCAARA,EAAQ,0CAARA,EAAQ,4CAARA,EAAQ,kDAARA,EAAQ,gDAARA,EAAQ,4CAARA,EAAQ,8CAARA,EAAQ,yCAARA,EAAQ,gDAARA,EAAQ,gDAARA,EAAQ,oDAARA,EAAQ,kEAARA,EAAQ,mCAARA,EAAQ,oDAARA,EAAQ,gDAARA,EAAQ,mDAARA,EAAQ,8DAARA,EAAQ,0DAARA,EAAQ,0DAARA,EAAQ,gEAARA,EAAQ,gDAARA,EAAQ,gDAARA,EAAQ,gDAARA,EAAQ,4CAARA,EAAQ,4CAARA,EAAQ,kBAARA,EAAQ,6BAARA,EAAQ,yBAARA,EAAQ,yBAARA,EAAQ,+BAARA,EAAQ,2BAARA,EAAQ,6BAARA,EAAQ,yBAARA,EAAQ,oBAARA,EAAQ,kCAARA,EAAQ,6CAARA,EAAQ,yCAARA,EAAQ,yCAARA,EAAQ,+CAARA,EAAQ,iDAARA,EAAQ,iDAARA,EAAQ,4EAARA,EAAQ,2DAARA,EAAQ,kDAARA,EAAQ,kDAARA,EAAQ,kBAARA,EAAQ,6BAARA,EAAQ,yBAARA,EAAQ,yBAARA,EAAQ,+BAARA,EAAQ,8BAARA,EAAQ,qCAARA,EAAQ,2BAARA,EAAQ,uCAARA,EAAQ,kBAARA,EAAQ,6BAARA,EAAQ,yBAARA,EAAQ,yBAARA,EAAQ,+BAARA,EAAQ,2CAARA,EAAQ,2BAARA,EAAQ,2BAARA,EAAQ,6BAARA,EAAQ,wCAARA,EAAQ,oCAARA,EAAQ,yCAARA,EAAQ,uCAARA,EAAQ,kBAARA,EAAQ,6BAARA,EAAQ,yBAARA,EAAQ,yBAARA,EAAQ,+BAARA,EAAQ,oCAARA,EAAQ,oCAARA,EAAQ,uCAARA,EAAQ,8CAARA,EAAQ,oDAARA,EAAQ,4DAARA,EAAQ,kDAARA,EAAQ,8CAARA,EAAQ,mDAARA,EAAQ,0DAARA,EAAQ,gEAARA,EAAQ,uEAARA,EAAQ,uEAARA,EAAQ,kDAARA,EAAQ,kDAARA,EAAQ,0DAARA,EAAQ,wDAARA,EAAQ,qCAARA,EAAQ,4CAARA,EAAQ,sDAARA,EAAQ,qEAARA,EAAQ,8DAARA,EAAQ,6DAARA,EAAQ,mEAARA,EAAQ,+DAARA,EAAQ,6DAARA,EAAQ,iEAARA,EAAQ,gDAARA,EAAQ,4CAARA,EAAQ,4CAARA,EAAQ,kDAARA,EAAQ,sDAARA,EAAQ,+DAARA,EAAQ,mEAARA,EAAQ,yDAARA,EAAQ,yDAARA,EAAQ,4CAARA,EAAQ,qCAARA,EAAQ,qDAARA,EAAQ,qDAARA,EAAQ,kDAARA,EAAQ,oDAARA,EAAQ,8CAARA,EAAQ,8CAARA,EAAQ,0BAARA,EAAQ,+BAARA,EAAQ,iCAARA,EAAQ,iCAARA,EAAQ,uCAARA,EAAQ,mCAARA,EAAQ,4DAARA,EAAQ,mDAARA,EAAQ,2DAARA,EAAQ,iEAARA,EAAQ,qEAARA,EAAQ,8DAARA,EAAQ,0DAARA,EAAQ,uEAARA,EAAQ,uEAARA,EAAQ,mEAARA,EAAQ,mEAARA,EAAQ,iCAARA,EAAQ,0BAARA,EAAQ,sBAARA,EAAQ,iDAARA,EAAQ,yCAARA,EAAQ,+BAARA,EAAQ,2CAARA,EAAQ,wBAARA,EAAQ,+CAARA,EAAQ,qCAARA,EAAQ,iCAARA,EAAQ,uCAARA,EAAQ,sDAARA,EAAQ,uDAARA,EAAQ,qDAARA,EAAQ,yCAARA,EAAQ,kBAARA,CAAQ,MCuBb,SAASC,KACd,MAAM,EAAE3zD,IAAMC,EAAAA,EAAAA,MACR2zD,ERUD,WACL,MAAOhuD,EAAG8rB,GAAaD,MAChB77B,EAAOsuC,IAAY1vC,EAAAA,EAAAA,YAY1B,OAXAK,EAAAA,EAAAA,YAAU,KACR,GAAIe,EAAO,CACT,MAAMuuC,EAAiBA,KACrBD,OAASzpC,GACT7E,EAAMyP,WAAW,EAEnBqsB,GAAU54B,EAAAA,EAAAA,KAACy0D,GAAiB,IAAK33D,EAAOyP,QAAS8+B,IACnD,MACEzS,OAAUj3B,EACZ,GACC,CAAC7E,EAAO87B,IACJwS,CACT,CQzBgC2vB,GACxBjC,EAASvC,KACTyE,EAAerW,MACf,cAAEoN,EAAa,qBAAEK,GAAyBT,MAoE3C,WACL,MAAM,EAAEzqD,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,MAEb,KAAEjkC,EAAI,QAAEq1C,GAAYU,GACxBxE,EAAM,uBACN,CAAEL,UAAW,IAAK1mB,OAAQ,YAkB5B2tB,GACE,CAAE3nB,QAAS,CAAC,mBAAoBgqB,KAAM,CAAC,oBAhBV5+D,EAAAA,EAAAA,cAC5BuR,IAEQ,SADCA,GAAS4tD,YAGN,sBADC5tD,GAAS5J,MAER8xD,GAIb,GAEF,CAACA,KAQH,MAAM,sBAAEvX,GAA0BC,MAClCliD,EAAAA,EAAAA,YAAU,KACRiiD,GAAuBvgC,IACrBA,EAAO,sBAAwB,CAC7BpgB,MAAO6J,EAAE,sBACTi4C,cACEj/B,GAAMgyC,QAAQnrD,KAAKm0D,IAAiB,CAClC79D,MAAO69D,EAAkB99D,KACzBwe,YAAas/C,EAAkBC,eAAeC,cAAch+D,KAC5DoiD,UAAW0b,EAAkBG,QAC7Bh4D,QAAS,OACTyE,GAAI88C,EAAWgW,GAASU,wBAAyB,CAC/CjX,OAAQ,CAAElnD,GAAI+9D,EAAkB/9D,WAE7B,IAEJ,IAAKsgB,KACZ,GACD,CAACyC,EAAM0kC,EAAY5G,EAAuB92C,GAG/C,CArHEq0D,GACA,MAAMC,GAAS1/D,EAAAA,EAAAA,cAAY4S,gBACnBwgD,MAAM,gBACZkD,KAAwB,GACvB,CAACA,IACJ,OACEpyD,EAAAA,EAAAA,KAACohD,GAAY,CAACK,OAAOzhD,EAAAA,EAAAA,KAACy7D,GAAQ,CAAC55D,MAAO,CAAEyU,OAAQ,MAASpW,UACvDoF,EAAAA,EAAAA,MAAC+rB,GAAAA,EAAY,CAAChuB,QAAQ,oBAAoBxB,MAAO,CAAE4c,SAAU,GAAIve,SAAA,EAC/DF,EAAAA,EAAAA,KAACmuB,GAAAA,EAAW,CAACtsB,MAAO,CAAEC,WAAY,QAAS5B,UACzCF,EAAAA,EAAAA,KAACo1D,GAAe,OAElBp1D,EAAAA,EAAAA,KAACmuB,GAAAA,EAAW,CAAAjuB,UACVF,EAAAA,EAAAA,KAACiiD,GAAiB,OAEpBjiD,EAAAA,EAAAA,KAACmuB,GAAAA,EAAW,CAAAjuB,UACVF,EAAAA,EAAAA,KAAC+hD,GAAqB,OAExB/hD,EAAAA,EAAAA,KAACmuB,GAAAA,EAAW,CAAAjuB,UACVoF,EAAAA,EAAAA,MAACiuD,GAAoB,CAACp2D,GAAG,YAAY+F,MAAMlD,EAAAA,EAAAA,KAAC07D,GAAAA,GAAkB,IAAIx7D,SAAA,EAChEF,EAAAA,EAAAA,KAACuH,GAAAA,EAAY,CACXpK,GAAG,gBACH+F,MAAMlD,EAAAA,EAAAA,KAACoZ,GAAAA,EAAmB,IAC1BnR,UAAU,IACVF,KAAM8wD,GAAcC,EAAQ,SAC5Bn9B,OAAO,SACP,UAAQ,yBAAwBz7B,SAE/BgH,EAAE,oBAELlH,EAAAA,EAAAA,KAACuH,GAAAA,EAAY,CACXpK,GAAG,QACHwJ,QAASA,IAAMm0D,EAAsB,CAAEhG,cAAe,yBACtD,UAAQ,iBAAgB50D,SAEvBgH,EAAE,iBAITlH,EAAAA,EAAAA,KAACmuB,GAAAA,EAAW,CAAAjuB,UACVoF,EAAAA,EAAAA,MAACiuD,GAAoB,CACnBp2D,GAAG,eACH+F,MACElD,EAAAA,EAAAA,KAACoF,EAAAA,EAAI,CAAC7J,KAAK,KAAI2E,UACbF,EAAAA,EAAAA,KAAC27D,GAAAA,GAAc,MAGnBr+D,MAAOy0D,GAAe6J,SAAS17D,SAAA,EAE/BF,EAAAA,EAAAA,KAACuH,GAAAA,EAAY,CACXpK,GAAG,eACHG,MAAO4J,EAAE,gBACTP,QAASA,IACPq0D,EAAaJ,GAASiB,YAAa,CAAExX,OAAQ,CAAElnD,GAAI40D,GAAe50D,MACnE+C,SAEAgH,EAAE,mBAELlH,EAAAA,EAAAA,KAACuH,GAAAA,EAAY,CAACpK,GAAG,SAASG,MAAO4J,EAAE,UAAWP,QAASA,KAAW60D,GAAS,EAAAt7D,SACxEgH,EAAE,qBAOjB,C,gBCnFO,SAAS40D,KACd,MAAM,EAAE50D,IAAMC,EAAAA,EAAAA,MACd,MAAO,CACL,CACE/J,KAAM,kBACNE,MAAO4J,EAAE,oBACTia,SAAUja,EACR,oGAEFmf,QAAS,CACP,CAAE/oB,MAAO4J,EAAE,aAAcxM,MAAO,GAChC,CAAE4C,MAAO4J,EAAE,cAAexM,MAAO,IACjC,CAAE4C,MAAO4J,EAAE,cAAexM,MAAO,IACjC,CAAE4C,MAAO4J,EAAE,YAAaxM,MAAO,IAC/B,CAAE4C,MAAO4J,EAAE,aAAcxM,MAAO,KAChC,CAAE4C,MAAO4J,EAAE,SAAUxM,MAAO,IAE9BkzB,aAAc,IAEhB,CACExwB,KAAM,QACNE,MAAO4J,EAAE,eACTia,SAAUja,EAAE,2BACZmf,QAAS,CACP,CAAE/oB,MAAO4J,EAAE,UAAWxM,MAAO,SAAUkhB,YAAa1U,EAAE,gCACtD,CAAE5J,MAAO4J,EAAE,SAAUxM,MAAO,QAASkhB,YAAa1U,EAAE,+BACpD,CAAE5J,MAAO4J,EAAE,QAASxM,MAAO,OAAQkhB,YAAa1U,EAAE,+BAEpD0mB,aAAc,UAEhB,CACExwB,KAAM,cACNE,MAAO4J,EAAE,gBACTia,SAAUja,EAAE,oCACZmf,QAAS,CACP,CACE/oB,MAAO4J,EAAE,WACTxM,MAAO,UACPkhB,YAAa1U,EAAE,oDAEjB,CACE5J,MAAO4J,EAAE,eACTxM,MAAO,cACPkhB,YAAa1U,EAAE,2DAGnB0mB,aAAc,eAEhB,CACExwB,KAAM,cACNE,MAAO4J,EAAE,gBACTia,SAAUja,EAAE,wEACZmf,QAAS,CACP,CACE/oB,MAAO4J,EAAE,UACTxM,MAAO,SACPkhB,YAAa1U,EAAE,qDAEjB,CACE5J,MAAO4J,EAAE,YACTxM,MAAO,WACPkhB,YAAa1U,EAAE,uDAGnB0mB,aAAc,YAGhB,CACExwB,KAAM,aACNE,MAAO4J,EAAE,eACTia,SAAUja,EAAE,+DACZmf,QAAS,CACP,CACE/oB,MAAO4J,EAAE,YACTxM,MAAO,QACPkhB,YAAa1U,EAAE,kDAEjB,CACE5J,MAAO4J,EAAE,iBACTxM,MAAO,YACPkhB,YAAa1U,EAAE,kCAGnB0mB,aAAc,aAEhB,CACExwB,KAAM,mBACNE,MAAO4J,EAAE,yBACTia,SAAUja,EAAE,8DACZmf,QAAS,CACP,CAAE/oB,MAAO4J,EAAE,QAASxM,MAAO,QAC3B,CAAE4C,MAAO4J,EAAE,QAASxM,MAAO,SAE7BkzB,aAAc,QAGpB,CC5FO,SAASmuC,KACd,MAAM,EAAE70D,IAAMC,EAAAA,EAAAA,OACP2I,IAAY1P,EAAAA,EAAAA,YAAWwP,IACxBwF,GAAWC,EAAAA,GAAAA,MACX/R,GAAUe,EAAAA,EAAAA,UACd,IAAM,CACJ,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcC,QACvB3B,KAAM84D,GAAAA,GACN1+D,MAAO4J,EAAE,QACTP,QAASA,IAAMyO,EAAS,UACxB3K,UAAU,KAGd,CAAC2K,EAAUlO,IAEPmf,EAAUy1C,KAEhB,OACEx2D,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,oBACTy5C,eAAe3gD,EAAAA,EAAAA,KAACmJ,GAAW,CAAC7F,QAASA,EAASF,SAAU6F,GAAAA,GAAiBC,WAE3ElJ,EAAAA,EAAAA,KAAC0hB,GAAW,CAAAxhB,SACTmmB,EAAQtf,KAAKggB,IACZ/mB,EAAAA,EAAAA,KAACi8D,GAAkB,CAEjBl1C,OAAQA,EACRrsB,MAAQoV,EAA6CiX,EAAO3pB,OAFvD2pB,EAAO3pB,YAQxB,CAEA,SAAS6+D,GAAmBn/D,GAC1B,MAAMo/D,EAAcp/D,EAAMiqB,OAAOV,QAAQ7hB,MAAMuiB,GAAWA,EAAOrsB,QAAUoC,EAAMpC,SAAQ4C,MACzF,OACE0C,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAOR,EAAMiqB,OAAOzpB,MACpB6jB,SAAUrkB,EAAMiqB,OAAO5F,SACvBhkB,GAAIL,EAAMiqB,OAAO3pB,KAAKF,cAAcgD,SAEnCg8D,GAGP,CC9BO,SAASC,GAGdr/D,GACA,MAAMK,EAAKN,EAAMC,IAEX,QAAE4zC,EAAO,UAAEC,IAAcC,EAAAA,GAAAA,OACzB,aAAEhD,EAAY,aAAE6K,GAAiB9H,GAEhC9vC,GAAgBV,IACjB0wC,EAAWV,GAA0BrzC,EAAMQ,MAAOR,EAAMkwB,YAE9D,OACEhtB,EAAAA,EAAAA,KAAC8wC,GAAAA,GAAU,CACT1zC,KAAMN,EAAMM,KACZszC,QAASA,EACTK,kBAAgB,EAChBnjB,aAAc9wB,EAAM8wB,aACpBzgB,OAAQA,EAAG6jC,OAASt2C,QAAO4H,YAAY2uC,YAAcjkC,aACnD,MAAMkkC,EAAoBlkC,GAAOK,QAC7BvQ,EAAM2zC,UAAYgI,EAChB53C,EAAanB,WACbsN,GAAOK,aACT1L,EACJ,IAAIZ,EAAajE,EAAMiE,WAOvB,OANKA,GAAcjE,EAAMorB,aACvBnnB,GAAamG,EAAAA,GAAAA,GAAE,aAEb0mC,IACF7sC,GAAamG,EAAAA,GAAAA,GAAE,gBAGflH,EAAAA,EAAAA,KAACy3C,GAAa,CACZG,QAASz6C,EACTG,MAAOR,EAAMQ,MACb8zC,eAAgBt0C,EAAMs0C,gBAAkBt0C,EAAMQ,MAC9C6zC,UAAWr0C,EAAMq0C,UACjBuG,WAAY56C,EAAM46C,WAClBxG,kBAAmBA,EACnBlkB,WAAYlwB,EAAMkwB,WAClB+qB,mBAAoBj7C,EAAMi7C,mBAAmB73C,UAE7CF,EAAAA,EAAAA,KAAC4sB,GAAgB,CACfzvB,GAAIA,EACJ,UAASA,GAAMC,KACfgpB,YAAatpB,EAAMspB,YACnBC,QAASvpB,EAAMupB,QACf,mBAAkBlpB,EAAK,GAAGA,oBAAkBwE,EAC5CjH,MAAOA,EACPoL,SAAUxD,EACVvB,WAAYA,EACZ8oB,OAAQ/sB,EAAM+sB,OACdmD,WAAYlwB,EAAMkwB,WAClBxF,mBAAoB1qB,EAAM0qB,sBAEd,EAGpB8pB,MAAO,CAAET,WAAUJ,SAAU3zC,EAAM2zC,WAGzC,CCtFO,SAAS2rB,KACd,MAAM,EAAEl1D,IAAMC,EAAAA,EAAAA,MACRiO,GAAWC,EAAAA,GAAAA,OACVvF,EAAUiB,IAAe3Q,EAAAA,EAAAA,YAAWwP,IACrC8uB,GAAW5iC,EAAAA,EAAAA,cACdgU,IACCiB,EAAYjB,GACZsF,EAAS,MACF+0B,QAAQqd,YAEjB,CAACpyC,EAAUrE,IAEPy8B,GAAW1xC,EAAAA,EAAAA,cAAY,IAAMsZ,EAAS,OAAO,CAACA,IAC9CiR,EAAUy1C,KAChB,OACEx2D,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CAACpjD,MAAO6J,EAAE,oBAAqB85C,UAAW95C,EAAE,4BACvDlH,EAAAA,EAAAA,KAACsuC,GAAQ,CACP1gB,aAAc,IACTvH,EAAQtI,QAAO,CAACC,EAAK+I,KAAW,IAAM/I,EAAK,CAAC+I,EAAO3pB,MAAO2pB,EAAO6G,gBAAiB,CAAC,MACnF9d,GAELzQ,WAAY6H,EAAE,yBACdsmC,SAAUA,EACV9O,SAAUA,EAASx+B,SAElBmmB,EAAQtf,KAAKggB,IACZ/mB,EAAAA,EAAAA,KAACm8D,GAAoB,CACnBh/D,GAAI4pB,EAAO3pB,KAAKF,cAChBE,KAAM2pB,EAAO3pB,KAEbE,MAAOypB,EAAOzpB,MACd8oB,YAAalf,EAAE,mBAAoB,CAAE5J,MAAOypB,EAAOzpB,QACnD+oB,QAASU,EAAOV,QAChB8qB,UAAWpqB,EAAO5F,SAClB6L,YAAU,EACVY,aAAc7G,EAAO6G,cANhB7G,EAAO3pB,YAYxB,CCxCO,SAASi/D,GAAkBh2C,GAChC,MAAM,IAAQlf,EAAAA,EAAAA,MACRy9C,EAAaT,KAEnB,OAAO9/C,EAAAA,EAAAA,UACL,IAAM,CACJ,CACEyc,OAAQ5Z,EAAE,QACV4b,KAAO4F,IACL1oB,EAAAA,EAAAA,KAACmV,GAAQ,CACPrN,GACEue,GAASxQ,kBACLlU,EACAijD,EAAWgW,GAAS0B,YAAa,CAC/BjY,OAAQ,CAAElnD,GAAIurB,EAAKvrB,MAG3BsR,KAAMia,EAAKtrB,OAGfgC,KAAMinB,GAASk2C,iBAAc56D,EAAY,OACzCm/B,KAAM,OACNuC,KAAM,QAER,CACEviB,OAAQ5Z,EAAE,eACVzD,KAAM,cACN/I,MAAQguB,GAASA,EAAK9M,YACtBxc,KAAMinB,GAASk2C,iBAAc56D,EAAY,cACzCm/B,KAAM,cACNuC,KAAM,eAER,CACEviB,OAAQ5Z,EAAE,WACV4b,KAAO4F,IAAS1oB,EAAAA,EAAAA,KAACqS,GAAY,CAAC3X,MAAOguB,EAAK2yC,UAC1Cj8D,KAAMinB,GAASk2C,iBAAc56D,EAAY,UACzCojC,qBAAsB,OACtB/hB,MAAOP,GAAkBQ,QAE3B,CACEnC,OAAQ5Z,EAAE,YACVzD,KAAM,OACN/I,MAAQguB,GAAUA,EAAK8zC,QAAUt1D,EAAE,YAAcA,EAAE,YACnD9H,KAAMinB,GAASk2C,iBAAc56D,EAAY,UACzCojC,qBAAsB,MACtBjE,KAAM,WACNuC,KAAM,WACNrgB,MAAOP,GAAkBQ,UAG7B,CAAC/b,EAAGmf,GAASk2C,YAAal2C,GAASxQ,aAAc+uC,GAErD,CCrCO,SAAS6X,KACd,MAAM,EAAEv1D,IAAMC,EAAAA,EAAAA,MAEd,OAAO9C,EAAAA,EAAAA,UACL,KAAM,CACJq4D,cAAe,CACb,iBAAkB,CAChBpR,YAAapkD,EAAE,cACfy1D,YAAa,CACX,qBAAsBz1D,EAAE,kBACxB,wBAAyBA,EAAE,qBAC3B,wBAAyBA,EAAE,qBAC3B,sBAAuBA,EAAE,qBAG7B,2BAA4B,CAC1BokD,YAAapkD,EAAE,yBACfy1D,YAAa,CACX,kCAAmCz1D,EAAE,gCACrC,kCAAmCA,EAAE,gCACrC,gCAAiCA,EAAE,gCAGvC,oBAAqB,CACnBokD,YAAapkD,EAAE,kBACfy1D,YAAa,CACX,wBAAyBz1D,EAAE,sBAC3B,2BAA4BA,EAAE,yBAC9B,2BAA4BA,EAAE,yBAC9B,yBAA0BA,EAAE,yBAGhC,gBAAiB,CACfokD,YAAapkD,EAAE,aACfy1D,YAAa,CACX,oBAAqBz1D,EAAE,iBACvB,sBAAuBA,EAAE,oBACzB,uBAAwBA,EAAE,oBAC1B,uBAAwBA,EAAE,oBAC1B,uBAAwBA,EAAE,oBAC1B,qBAAsBA,EAAE,oBAG5B,kBAAmB,CACjBokD,YAAapkD,EAAE,gBACfy1D,YAAa,CACX,0BAA2Bz1D,EAAE,wBAC7B,yBAA0BA,EAAE,uBAC5B,yBAA0BA,EAAE,uBAC5B,uBAAwBA,EAAE,uBAG9B,2BAA4B,CAC1BokD,YAAapkD,EAAE,yBACfy1D,YAAa,CACX,kCAAmCz1D,EAAE,gCACrC,kCAAmCA,EAAE,gCACrC,gCAAiCA,EAAE,gCAGvC,sBAAuB,CACrBokD,YAAapkD,EAAE,gBACfy1D,YAAa,CACX,6BAA8Bz1D,EAAE,uBAChC,4BAA6BA,EAAE,sBAC/B,6BAA8BA,EAAE,uBAChC,6BAA8BA,EAAE,uBAChC,2BAA4BA,EAAE,qBAC9B,qBAAsBA,EAAE,kBACxB,kBAAmBA,EAAE,eACrB,kBAAmBA,EAAE,eACrB,qBAAsBA,EAAE,kBACxB,qBAAsBA,EAAE,kBACxB,mBAAoBA,EAAE,gBACtB,qBAAsBA,EAAE,eACxB,kBAAmBA,EAAE,YACrB,qBAAsBA,EAAE,eACxB,qBAAsBA,EAAE,eACxB,mBAAoBA,EAAE,aACtB,kCAAmCA,EAAE,iCACrC,kCAAmCA,EAAE,iCACrC,8BAA+BA,EAAE,6BACjC,iCAAkCA,EAAE,gCACpC,iCAAkCA,EAAE,gCACpC,+BAAgCA,EAAE,gCAClC,0BAA2BA,EAAE,wBAC7B,yBAA0BA,EAAE,uBAC5B,yBAA0BA,EAAE,uBAC5B,uBAAwBA,EAAE,qBAC1B,oBAAqBA,EAAE,iBACvB,sBAAuBA,EAAE,oBACzB,uBAAwBA,EAAE,oBAC1B,oBAAqBA,EAAE,iBACvB,uBAAwBA,EAAE,oBAC1B,uBAAwBA,EAAE,oBAC1B,qBAAsBA,EAAE,kBACxB,qBAAsBA,EAAE,kBACxB,qBAAsBA,EAAE,kBACxB,wBAAyBA,EAAE,qBAC3B,wBAAyBA,EAAE,qBAC3B,sBAAuBA,EAAE,mBACzB,+BAAgCA,EAAE,6BAClC,kCAAmCA,EAAE,gCACrC,kCAAmCA,EAAE,gCACrC,gCAAiCA,EAAE,8BACnC,+BAAgCA,EAAE,6BAClC,kCAAmCA,EAAE,gCACrC,kCAAmCA,EAAE,gCACrC,gCAAiCA,EAAE,gCAGvC,cAAe,CACbokD,YAAapkD,EAAE,WACfy1D,YAAa,CACX,qBAAsBz1D,EAAE,kBACxB,kBAAmBA,EAAE,eACrB,qBAAsBA,EAAE,kBACxB,qBAAsBA,EAAE,kBACxB,mBAAoBA,EAAE,kBAG1B,cAAe,CACbokD,YAAapkD,EAAE,QACfy1D,YAAa,CACX,qBAAsBz1D,EAAE,eACxB,qBAAsBA,EAAE,eACxB,qBAAsBA,EAAE,eACxB,mBAAoBA,EAAE,eAG1B,0BAA2B,CACzBokD,YAAapkD,EAAE,yBACfy1D,YAAa,CACX,kCAAmCz1D,EAAE,iCACrC,kCAAmCA,EAAE,iCACrC,iCAAkCA,EAAE,gCACpC,iCAAkCA,EAAE,gCACpC,+BAAgCA,EAAE,oCAK1C,CAACA,GAEL,CC/JO,SAAS01D,GAAmB9/D,GACjC,MAAM,KAAE4rB,GAAS5rB,EACX+/D,EAAgBJ,KAEtB,OACEz8D,EAAAA,EAAAA,KAACkiB,GAAAA,EAAe,CACdgtB,cAAY,EACZ4tB,4BAA6B,CAC3BzyD,QAAS,OACTzP,GAAI,OACJE,GAAI,OACJE,GAAI,OACJE,GAAI,OACJ,MAAO,QAET,UAAQ,+BAA8BgF,UAEtCF,EAAAA,EAAAA,KAACqhB,GAAAA,EAAoB,CAAAnhB,SAClBwoB,EAAKq0C,eACJz3D,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACuhB,GAAAA,EAAmB,CAClB,UAASmH,EAAKq0C,aACdl7D,MAAO,CAAE+hC,WAAY,UAAW1jC,SAG/B28D,EAAcH,cAAch0C,EAAKq0C,eAAezR,aAAe5iC,EAAKq0C,cAFhEr0C,EAAKq0C,eAIZ/8D,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,WACtBwoB,GAAMi0C,YAAYn5D,SACnBxD,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAACC,UAAW,EAAEjU,SACtBwoB,GAAMi0C,YAAY51D,KAAKi2D,IAEpBh9D,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAkB,UAAS2oD,EAAW98D,SACzC28D,EAAcH,cAAch0C,EAAKq0C,eAC9BJ,YAAYK,IAAeA,GAFrBA,aAfDt0C,GAAMq0C,eA6BvC,C,gBC9CO,SAASE,GAASngE,GACvB,MAAM,MAAEkQ,EAAK,cAAEkwD,GAAkBpgE,GAC3B,EAAEoK,IAAMC,EAAAA,EAAAA,MACd,OACE7B,EAAAA,EAAAA,MAACuxB,GAAAA,EAAU,CAACC,cAAY,EAAA52B,SAAA,EACtBF,EAAAA,EAAAA,KAAC+2B,GAAAA,EAAgB,CACfC,WAAWh3B,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SAAG8M,GAAOK,UACrBnK,MAAMlD,EAAAA,EAAAA,KAACi3B,GAAAA,EAAc,CAAC/zB,KAAMg0B,GAAAA,KAC5Blc,aAAa,QAEf1V,EAAAA,EAAAA,MAAC8xB,GAAAA,EAAgB,CAAAl3B,SAAA,CACd8M,aAAiBqhD,IAAgBrhD,EAAM+gD,UACtC/tD,EAAAA,EAAAA,KAACm3B,GAAAA,EAAc,CAAAj3B,SAAE8M,EAAM+gD,UAExBmP,IACCl9D,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAAClC,QAAQ,UAAUsD,QAASu2D,EAAeh6D,MAAMlD,EAAAA,EAAAA,KAACm9D,GAAAA,GAAQ,IAAIj9D,SAClEgH,EAAE,kBAMf,CCnBO,SAASk2D,KACd,MAAM,EAAEl2D,IAAMC,EAAAA,EAAAA,MACR0Q,EAAUwkD,GAAkB,CAAExmD,cAAc,IAC5CwuC,GAASgZ,EAAAA,GAAAA,MAEbn9C,KAAMwI,EAAI,MACV1b,EAAK,QACLuoD,GACEc,GAAwB5E,EAAM,qBAAsBpN,EAAOlnD,IAE/D,OAAI6P,GAAchN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,IACpD7sC,GAGHpjB,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAC0hB,GAAW,CAACU,eAAa,EAAAliB,UACxBF,EAAAA,EAAAA,KAACwjB,GAAsB,CAAcnH,KAAMqM,EAAM7Q,QAASA,OAE5D7X,EAAAA,EAAAA,KAAC0hB,GAAW,CAACU,eAAa,EAACL,gBAAiB,SAAS7hB,UACnDF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,eAAehH,UAClCF,EAAAA,EAAAA,KAAC48D,GAAkB,CAACl0C,KAAMA,YAThB1oB,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,GAcjD,C,mDCtCA,MAAMmT,GAAwB,oBAOvB,SAASC,GAAqBhN,GACnC,MAAOvlC,EAAQF,IAAapvB,EAAAA,EAAAA,UAASC,OAAO07B,SAASrM,SAErDjvB,EAAAA,EAAAA,YAAU,KACJJ,OAAO07B,SAASrM,SAAWA,GAC7BF,EAAUnvB,OAAO07B,SAASrM,OAC5B,KAGFjvB,EAAAA,EAAAA,YAAU,KACR,MAAMoC,EAAS,CACboyD,UACAiN,GAAI7hE,OAAO07B,SAASrM,QAEtByyC,eAAezsD,QAAQssD,GAAuBltD,KAAKa,UAAU9S,GAAQ,GACpE,CAAC6sB,EAAQulC,GACd,CCjBO,SAASmN,GAAe5gE,GAW7B,MAAMk+D,EAAerW,KACfvvC,GAAWC,EAAAA,GAAAA,MACXuvC,EAAaT,KACb9sB,GAAWsmC,EAAAA,GAAAA,OACX,iBAAE5d,GAAqBE,KAEvB2d,EAAY9gE,EAAMqtD,KAAK3lD,MAC1Bq5D,GACCA,IACCjZ,EAAWiZ,EAAI1oC,KAAM,CAAEkvB,OAAQvnD,EAAMunD,WAAchtB,EAASgsB,UAC3DhsB,EAASgsB,SAAS96C,SAASq8C,EAAWiZ,EAAI1oC,KAAM,CAAEkvB,OAAQvnD,EAAMunD,cAItEtoD,EAAAA,EAAAA,YAAU,KACR,GAAI6hE,EAEF,OADA7d,EAAiB,CAAEziD,MAAOsgE,EAAUtgE,QAC7B,IAAMyiD,OAAiBp+C,GAE9Bo+C,OAAiBp+C,EACnB,GACC,CAACi8D,EAAW7d,IAEf,MAAOwF,IAAgBuY,EAAAA,EAAAA,MAEjBC,EAAkE,CAAC,EACzE,GAAIjhE,EAAMkhE,gBACR,IAAK,MAAM5xD,KAAOtP,EAAMkhE,gBACtBD,EAAmB3xD,GAAOm5C,EAAauF,IAAI1+C,IAAQ,GAIvD,MACMk4C,EAmER,SAAoB2Z,GAClB,MAAM3Z,EAAgC,CAAC,EACjC4Z,GAA4B,MAAnBD,EAAY,GAAaA,EAAYE,OAAO,GAAKF,GAAaz2D,MAAM,KACnF,IAAK,IAAIkG,EAAI,EAAGA,EAAIwwD,EAAM16D,OAAQkK,IAAK,CACrC,MAAM0wD,EAAOF,EAAMxwD,GAAGlG,MAAM,KAC5B,GAAI42D,EAAK56D,OAAS,EAAG,SACrB,MAAM4I,EAAMiyD,mBAAmBD,EAAK,IAC9B1jE,EAAQ2jE,mBAAmBD,EAAK,IAAM,IAC5C9Z,EAAMl4C,GAAOiyD,mBAAmB3jE,EAClC,CACA,OAAO4pD,CACT,CA9EgBga,CDzBT,SAA8BlyD,GACnC,MAAMmyD,EAAed,eAAettD,QAAQmtD,IACtCn/D,EAAUogE,EAAenuD,KAAKC,MAAMkuD,GAAgB,CAAEf,GAAI,IAEhE,OAAIr/D,EAAOoyD,UAAYnkD,EACdjO,EAAOq/D,GAET,EACT,CCgBsBgB,CAAqB1hE,EAAM2hE,SAASC,sBAclDvU,EAAOrtD,EAAMqtD,KAChBhsD,QAAQ0/D,KAAUA,IAClB92D,KAAK82D,GACJA,GACE79D,EAAAA,EAAAA,KAAC2+D,GAAAA,EAAG,CAEFC,SAAUf,EAAI1oC,KACd93B,MAAOwgE,EAAIvgE,MACXyK,KAAM68C,EAAWiZ,EAAI1oC,KAAM,CAAEkvB,OAAQvnD,EAAMunD,OAAQC,MAAOyZ,IAC1D,UAASF,EAAIgB,QAJRhB,EAAI1oC,MAMT,OAGR,OACE7vB,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEoF,EAAAA,EAAAA,MAACw5D,GAAAA,EAAI,CACHh5D,SA7BWA,CACfgiB,EACA82C,KAEA92C,EAAMhS,iBACF8oD,IAAa9hE,EAAM2hE,SAAStpC,KAC9B/f,EAASwvC,EAAWga,EAASpgD,WAAY,CAAE6lC,OAAQvnD,EAAMunD,OAAQC,WAEjE0W,EAAa4D,EAASpgD,WAAY,CAAE6lC,OAAQvnD,EAAMunD,OAAQC,MAAOyZ,GACnE,EAqBI3nC,MAAO,CAAE/rB,QAAS,WAClB00D,WAAuBp9D,IAAhB7E,EAAMiiE,OAAsBjiE,EAAMiiE,MACzCC,UAAWpB,EAAYA,EAAUzoC,UAAOxzB,EACxCE,MAAO,CACL2D,gBAAiB,6CACjBy5D,WAAY,GACZ/+D,SAAA,CAEDpD,EAAM2hE,UACLz+D,EAAAA,EAAAA,KAAC2+D,GAAAA,EAAG,CAEFC,SAAU9hE,EAAM2hE,QAAQtpC,KACxB93B,OACEiI,EAAAA,EAAAA,MAAC45D,GAAAA,EAAY,CAAAh/D,SAAA,EACXF,EAAAA,EAAAA,KAACm/D,GAAAA,GAAa,KACdn/D,EAAAA,EAAAA,KAAA,QAAM6B,MAAO,CAAEC,WAAY,GAAI5B,SAAEpD,EAAM2hE,QAAQnhE,WAGnDyK,KAAM68C,EAAW9nD,EAAM2hE,QAAQtpC,KAAM,CAAEkvB,OAAQvnD,EAAMunD,OAAQC,UAC7D,UAASxnD,EAAM2hE,QAAQnhE,MAAM3C,QAAQ,IAAK,KAAK01C,qBAT1CvzC,EAAM2hE,QAAQtpC,MAYtBg1B,MAIHnqD,EAAAA,EAAAA,KAAA,OAAK6B,MAAO,CAAE4c,SAAU,EAAG7I,SAAU,UAAW1V,UAE9CF,EAAAA,EAAAA,KAACmhD,GAAU,CAAAjhD,UACTF,EAAAA,EAAAA,KAAC+jD,GAAAA,GAAM,CAACnxB,QAAS91B,EAAMsiE,wBAKjC,C,gBC9GO,MAAMC,GAAmBryD,IAC9B,MAAMmX,EAAsC,GACtCC,EAAkC,GAExC,GAAIsqC,GAAe1hD,IAAgC,iBAAfA,EAAM6nC,MAAoC,OAAf7nC,EAAM6nC,KAAe,CAClF,MAAM30B,EAAOlT,EAAM6nC,KAEnB,GAAI,WAAY30B,EACVjH,MAAMC,QAAQgH,EAAKo/C,QACrBn7C,EAAcpgB,KAAK,CAAEsJ,QAAS6S,EAAKo/C,OAAO,KAE1Cn7C,EAAcpgB,KAAK,CAAEsJ,QAAS6S,EAAKo/C,cAEhC,GAAI,YAAap/C,EAClBjH,MAAMC,QAAQgH,EAAc,SAC9BiE,EAAcpgB,KAAK,CAAEsJ,QAAS6S,EAAc,QAAE,KAE9CiE,EAAcpgB,KAAK,CAAEsJ,QAAS6S,EAAc,eAEzC,GAAI,WAAYA,EAAM,CAE3B,MAAMooC,EAASpoC,EAAa,OACxBjH,MAAMC,QAAQovC,GAChBA,EAAOlvB,SAASmmC,IACO,iBAAVA,GACTp7C,EAAcpgB,KAAK,CAAEsJ,QAASkyD,GAChC,IAEyB,iBAAXjX,GAAkC,OAAXA,GACvCz+C,OAAOwmD,QAAQ/H,GAAQlvB,SAAQ,EAAEhtB,EAAK1R,MACf,iBAAVA,EACT0pB,EAAYrgB,KAAK,CAAE3G,KAAMgP,EAAKiB,QAAS3S,IAC9Bue,MAAMC,QAAQxe,IAAUA,EAAM8I,OAAS,GAChD4gB,EAAYrgB,KAAK,CAAE3G,KAAMgP,EAAKiB,QAAS3S,EAAM,IAC/C,GAGN,MAAO,GAAI,gBAAiBwlB,EAC1BiE,EAAcpgB,KAAK,CAAEsJ,QAAS6S,EAAKs/C,mBAIhC,GAAI,UAAWt/C,EACdjH,MAAMC,QAAQgH,EAAY,OAC5BiE,EAAcpgB,KAAK,CAAEsJ,QAAS6S,EAAY,MAAE,KAE5CiE,EAAcpgB,KAAK,CAAEsJ,QAAS6S,EAAY,aAG5C,IAAK,MAAM9T,KAAO8T,EAAM,CACtB,IAAIxlB,EAASwlB,EAAiC9T,GACzB,iBAAV1R,EACT0pB,EAAYrgB,KAAK,CAAE3G,KAAMgP,EAAKiB,QAAS3S,IAC9Bue,MAAMC,QAAQxe,KACvBA,EAAQA,EAAM,GAEd0pB,EAAYrgB,KAAK,CAAE3G,KAAMgP,EAAKiB,QAASqgC,OAAOhzC,KAElD,CAEJ,MAAWsS,aAAiBsX,OAC1BH,EAAcpgB,KAAK,CAAEsJ,QAASL,EAAMK,UAEtC,MAAO,CAAE8W,gBAAeC,cAAa,ECnE1Bq7C,GAAyBA,IACpChzB,GAAuB4yB,ICAlB,SAASK,GAAQrjD,GACtB,OAAOA,EAAKlf,EACd,CCKO,SAASwiE,GAAkBz2B,GAChC,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR0kC,EAAsBwwB,GAAkB,CAAExmD,cAAc,EAAM0mD,aAAa,IAC3EvzB,GAAgB3kC,EAAAA,EAAAA,UACpB,IAAM,CACJ,CACEyc,OAAQ5Z,EAAE,QACV4b,KAAO4F,IAAS1oB,EAAAA,EAAAA,KAACmV,GAAQ,CAAC1G,KAAMia,EAAKtrB,OACrC0jC,KAAM,OACNuC,KAAM,UAGV,CAACn8B,KAEG,cAAE6qD,GAAkBJ,KACpBiO,EAAaH,KACbI,EAA2Bn3C,GAC/BA,EAAK8zC,QAAUt1D,EAAE,qCAAuC,GACpD44D,EAAmCA,IACvC/N,GAAegO,aACX,GACA74D,EACE,uIA2DR,OAxDqB84D,IACnB,MAAMC,EAAyCD,EAAM7hE,QAAQuqB,GAASA,EAAK8zC,UAErE0D,EAD+BF,EAAM7hE,QAAQuqB,IAAUA,EAAK8zC,UACIr+D,OACpE2hE,GAGFF,EAAW,CACTviE,MAAO6J,EAAE,2BAA4B,CAAEoV,MAAO0jD,EAAMx8D,SACpDzF,YAAamJ,EAAE,8DAA+D,CAC5EoV,MACE0jD,EAAMx8D,OAASy8D,EAAwBz8D,OAAS08D,EAAiC18D,SAErFwoC,iBAAkB9kC,EAAE,eAAgB,CAClCoV,MACE0jD,EAAMx8D,OAASy8D,EAAwBz8D,OAAS08D,EAAiC18D,SAErFs1B,MAAOknC,EAAM5gE,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QACrDwkB,aACEq+C,EAAwBz8D,QAAU08D,EAAiC18D,OAC/D,IACMy8D,EAAwBz8D,OACxB,CACE0D,EACE,+EACA,CACEoV,MAAO2jD,EAAwBz8D,UAIrC,MACA08D,EAAiC18D,OACjC,CACE0D,EACE,qFACA,CACEoV,MAAO4jD,EAAiC18D,UAI9C,SAEN7B,EACNmqC,oBAAsBpjB,GACpBm3C,EAAwBn3C,GACpBm3C,EAAwBn3C,GACxBo3C,IACN/mC,MAAO2mC,GACPp4D,UAAU,EACVukC,sBACA7C,gBACAE,aACAD,SAAUA,CAACvgB,EAAM+C,IACfgkC,GAAcgC,EAAM,qBAAqB/oC,EAAKvrB,GAAGqhB,cAAeiN,IAClE,CAGN,CC1CO,SAAS00C,GAAqBj3B,GACnC,MAAM,IAAQ/hC,EAAAA,EAAAA,OACR,cAAE4qD,GAAkBJ,KACpByO,EAAcT,GAAkBz2B,GAChC0b,EAAaT,KAEnB,OAAO9/C,EAAAA,EAAAA,UACL,IAAM,CACJ,CACEZ,KAAMrJ,EAAeyN,KACrBrH,UAAWnG,EAAoBsG,OAC/BuC,KAAM84D,GAAAA,GACNvxD,UAAU,EACVpH,QAASuB,EAAAA,GAAcC,QACvBvH,MAAO4J,EAAE,aACTnG,WAAa2nB,GACXA,EAAK8zC,QACDt1D,EAAE,oCACF6qD,GAAegO,kBACbp+D,EACAuF,EACE,uIAEVa,KAAO2gB,GACEk8B,EAAWgW,GAASyF,SAAU,CACnChc,OAAQ,CAAElnD,GAAIurB,EAAKvrB,IAAM,OAI/B,CAAEsG,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,eACTnG,WAAa2nB,GACXA,EAAK8zC,QACDt1D,EAAE,qCACF6qD,GAAegO,kBACbp+D,EACAuF,EACE,yIAGVP,QAAU+hB,GAAS03C,EAAY,CAAC13C,IAChCphB,UAAU,KAGd,CAAC84D,EAAaxb,EAAY19C,EAAG6qD,GAAegO,cAEhD,CCjFO,SAASQ,GAAYzjE,GAI1B,MAAM8nD,EAAaT,MACb,EAAEj9C,IAAMC,EAAAA,EAAAA,MACRk9C,GAASgZ,EAAAA,GAAAA,KACTrC,EAAerW,MAEnBzkC,KAAMwI,EAAI,MACV1b,EAAK,QACLuoD,GACEc,GAAwB5E,EAAM,qBAAsBpN,EAAOlnD,IAEzDyjC,EAAcu/B,IAAqB,KACvCnF,EAAaJ,GAAS4F,MAAM,IAG9B,OAAIxzD,GAAchN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,IACpD7sC,GAGHpjB,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAOqrB,GAAMtrB,KACbgjD,YAAa,CACX,CACE9iD,MAAOR,EAAM2jE,gCAAkCv5D,EAAE,SACjDY,GAAI88C,EAAWgW,GAAS4F,QAE1B,CAAEljE,MAAOorB,GAAMtrB,OAEjBujD,eACE3gD,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAASs9B,EACTx9B,SAAU6F,GAAAA,GAAiBC,MAC3B3I,aAAcmoB,OAIpB1oB,EAAAA,EAAAA,KAAC09D,GAAc,CACbe,QAAS,CACPnhE,MAAOR,EAAM4jE,cAAgBx5D,EAAE,iBAC/BiuB,KAAMylC,GAAS4F,MACf9B,oBAAqB,aAEvBvU,KAAM,CAAC,CAAE7sD,MAAO4J,EAAE,WAAYiuB,KAAMylC,GAAS0B,cAC7CjY,OAAQ,CAAElnD,GAAIknD,EAAOlnD,IAAM,UA5Bf6C,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,GAgCjD,CCzBO,SAASwW,GAAqCt6C,GAsBnD,IAAI,IAAE+9B,GAAQ/9B,EACd,MAAM,eAAE+J,EAAc,aAAE8R,EAAY,mBAAEsoB,GAAuBnkC,EAE7D,IAAIye,EAAkCze,EAAQye,YAC1CC,EAAmD1e,EAAQ0e,qBAG/D,GAAI7C,GAAgBA,EAAa1+B,OAAQ,CACvC,MAAMo9D,EAAoB1+B,EAAa19B,MAAMqe,GAAWA,EAAOiiB,eAAgB5C,EAAa,GAC5F4C,EAAc87B,GAAmBxhE,KACjC2lC,EAAuB67B,GAAmB77B,oBAC5C,CAEA,MAAM+H,EAAOyd,GAAQ,CACnB3b,cAAe,CAAExvC,KAAM0lC,EAAa/R,cAAegS,GACnDylB,uBAEIqW,GAAe7qD,EAAAA,EAAAA,QAA0C,CAAE+O,eAAWpjB,KAEtE,KAAEwzB,EAAI,QAAEC,EAAO,KAAEh2B,EAAI,cAAE2zB,EAAa,YAAE1C,GAAgByc,EAE5D,IAAImxB,EACF53C,GAASy6C,aAAej3D,OAAO4f,KAAKpD,EAAQy6C,aAAat9D,OACrD,IA7DuBs9D,EA6DJz6C,EAAQy6C,YA5D1Bj3D,OAAOwmD,QAAQyQ,GACnB/5D,KAAI,EAAEqF,EAAK1R,EAAQ,MACdue,MAAMC,QAAQxe,GACIA,EAAMqM,KACvBg6D,GAAW,GAAGxc,mBAAmBn4C,MAAQm4C,mBAAmBwc,OAE/Bt5D,KAAK,KAG9B,GAAG88C,mBAAmBn4C,MAAQm4C,mBAAmB7pD,OAG3D+M,KAAK,OAiDF,GA9DD,IAAwBq5D,EA+D7B,GAAIzwC,EACF,IAAK,MAAMjkB,KAAOikB,EAAa,CAC7B,MAAMm8B,EAAgBp8B,GAAgB5rB,MAAMrG,GAAWA,EAAOiO,MAAQA,IACtE,GAAIogD,EAAe,CACjB,IAAI1iD,EAASumB,EAAYjkB,GAEzB,GADItC,IAAQA,EAASA,EAAO3L,QAAQzD,GAAoB,OAAVA,KAC1CoP,GAAUA,EAAOtG,OAAS,EAI5B,GAHey6D,GAAfA,EAA8B,IAAuB,IAGzB,gBAAxBzR,EAAclI,MACM,IAAlBx6C,EAAOtG,QAAgBsG,EAAO6d,MAAMjtB,GAAoB,KAAVA,MAChDujE,GAAe,mBAAmBn0D,EAAO,GACtCtC,MAAM,KACNC,KAAK,wBAAwBqC,EAAO,GAAGtC,MAAM,KAAKC,KAAK,aAEvD,GAA4B,WAAxB+kD,EAAclI,MACvB2Z,GAAen0D,EAAO/C,KAAKrM,GAAU,GAAG8xD,EAAclI,SAAS5pD,MAAS+M,KAAK,UAE7E,GAAIqC,EAAOtG,OAAS,EACdgpD,EAAc/oD,OAASysB,GAAkB9B,UAC3C6vC,GAAe,GAAGzR,EAAclI,cAAcx6C,EAAO,MAAM0iD,EAAclI,cAAcx6C,EAAO,KAE9Fm0D,GAAen0D,EACZ/C,KAAKrM,GAAU,OAAO8xD,EAAclI,SAAS5pD,MAC7C+M,KAAK,UAGV,GAAI+kD,EAAc/oD,OAASysB,GAAkB9B,UAAW,CACtD,MAAMrc,EAAO,IAAIH,KAAKA,KAAKkB,OAG3B,OAFAf,EAAKivD,WAAW,GAChBjvD,EAAKkvD,gBAAgB,GACbn3D,EAAO,IACb,KAAK0jB,GAAuB0zC,SAC1BjD,GAAe,GAAGzR,EAAclI,cAAc,IAAI1yC,KAChDG,EAAKwqC,UAAY,MACjBE,gBACF,MACF,KAAKjvB,GAAuB2zC,YAC1BlD,GAAe,GAAGzR,EAAclI,cAAc,IAAI1yC,KAChDG,EAAKwqC,UAAY,OACjBE,gBACF,MACF,KAAKjvB,GAAuB4zC,SAC1BnD,GAAe,GAAGzR,EAAclI,cAAc,IAAI1yC,KAChDG,EAAKwqC,UAAY,QACjBE,gBACF,MACF,KAAKjvB,GAAuB6zC,UAC1BpD,GAAe,GAAGzR,EAAclI,cAAc,IAAI1yC,KAChDG,EAAKwqC,UAAY,QACjBE,gBAGR,MACEwhB,GAAe,GAAGzR,EAAclI,SAASx6C,EAAO,IAK1D,CACF,CAGE1K,IAAS6+D,EAAY11D,SAAS,cACjB01D,GAAfA,EAA8B,IAAuB,IAEnDA,GADoB,SAAlBlrC,EACa,aAAa3zB,IAEb,YAAYA,KAIhB6+D,GAAfA,EAA8B,IAAuB,IACrDA,GAAe,QAAQ9oC,IAER8oC,GAAfA,EAA8B,IAAuB,IACrDA,GAAe,aAAa7oC,IAE5BgvB,GAAO6Z,EACP,MAAMqD,EAAU3R,KACV9B,GAAWiE,EAAAA,GAAAA,IAA4B1N,EAAKkd,EAASzR,KACrD,KAAE3vC,EAAI,OAAEiyC,GAAWtE,EACnB0H,GAAUz5D,EAAAA,EAAAA,cAAY4S,gBACpByjD,IAASjmC,SAAQ,QAAS,GAC/B,CAACimC,KAEJL,EAAAA,GAAAA,IAA4B5xC,GAAMsL,KAAM81C,EAASzR,IAGjD,IAAI7iD,EAA2B6gD,EAAS7gD,MACpCA,aAAiBqhD,IACM,MAArBrhD,EAAMshD,YAAsBxhB,EAAK3X,KAAO,IAC1C2X,EAAKzX,QAAQ,GACbroB,OAAQrL,GAIZ,MAAMnB,EAAYq4B,GAAY3Y,GAAMgyC,SAAW,GAAItC,GAAYvpC,EAAQ2S,uBAEnDr3B,IAAhBue,GAAM5D,QACRukD,EAAazqD,QAAQ2O,UAAY7E,GAAM5D,OAGzC,MAAMilD,GAAwBzlE,EAAAA,EAAAA,cAC3Bg9B,IACCt4B,EAAUmkB,YAAYmU,GACjBy8B,GAAS,GAEhB,CAACA,EAAS/0D,IAGNghE,GAA0B1lE,EAAAA,EAAAA,cAC7Bg9B,IACCt4B,EAAUk5B,cAAcZ,GACnBy8B,GAAS,GAEhB,CAACA,EAAS/0D,KAGLs4B,EAAOqB,IAAYz+B,EAAAA,EAAAA,eAA0BiG,IACpD5F,EAAAA,EAAAA,YAAU,KACRo+B,EAASja,GAAMgyC,QAAQ,GACtB,CAAChyC,GAAMgyC,UAEV,MAAMh2B,GAAapgC,EAAAA,EAAAA,cAChBugB,IACC,IAAKyc,EAAO,OACZ,MAAM9xB,EAAQ8xB,GAAOptB,WAAWgC,GAAMA,EAAEvQ,KAAOkf,EAAKlf,KACpD,IAAe,IAAX6J,EAAc,CAChB,MAAMm1B,EAAW,IAAIrD,GACrBqD,EAASn1B,GAASqV,EAClB8d,EAASgC,EACX,IAEF,CAACrD,IAGH,OAAOz0B,EAAAA,EAAAA,UAAQ,KACN,CACLkxD,UACAxwC,UAAW87C,EAAazqD,QAAQ2O,UAChCL,UAAWoU,EACX9rB,WACG8/B,KACAtsC,EACH+gE,wBACAC,0BACA3wC,8BAA8B,EAC9BqL,gBAED,CACDlvB,EACA8rB,EACAy8B,EACAgM,EACA/gE,EACAghE,EACAtlC,EACA4Q,GAEJ,C,gBCnPO,SAAS20B,GAAmB3kE,GACjC,MAAM,KAAE4rB,GAAS5rB,GAETojB,KAAMwhD,GAAgBzL,GAC5BxE,EAAM,qBAAqB/oC,EAAKvrB,IAAIqhB,YAAc,OAGpD,OAAKkjD,GAKH1hE,EAAAA,EAAAA,KAAC2hE,GAAAA,EAAoB,CAAAzhE,UACnBF,EAAAA,EAAAA,KAAC48D,GAAkB,CAACl0C,KAAMg5C,OALrB1hE,EAAAA,EAAAA,KAAC2hE,GAAAA,EAAoB,CAAAzhE,UAAEgH,EAAAA,GAAAA,GAAE,eAQpC,CCTO,SAAS06D,KACd,MAAM,EAAE16D,IAAMC,EAAAA,EAAAA,MACd,OACE7B,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,SACT+5C,eAAgB/5C,EAAE,SAClB85C,UAAW95C,EACT,yGAEF0U,YAAa1U,EACX,4GAGJlH,EAAAA,EAAAA,KAACmM,GAAAA,EAAK,CACJ9I,QAAQ,OACRhG,MAAO6J,EAAE,4EACTkM,UAAQ,EACR1M,UAAU,mBAEZ1G,EAAAA,EAAAA,KAAC6hE,GAAa,IAAG,MAGvB,CAEO,SAASA,KACd,MAAM,EAAE36D,IAAMC,EAAAA,EAAAA,MAER+6B,EAAem6B,KAEfjsC,GAAiB/rB,EAAAA,EAAAA,UAAQ,IACK,CAChC,CACE+H,IAAK,OACL9O,MAAO4J,EAAE,QACTzD,KAAMysB,GAAkBsC,UACxB8xB,MAAO,kBACPv1B,WAAY,YAEd,CACE3iB,IAAK,WACL9O,MAAO4J,EAAE,YACTzD,KAAMysB,GAAkBS,aACxB2zB,MAAO,UACPj+B,QAAS,CACP,CAAE/oB,MAAO4J,EAAE,YAAaxM,MAAO,SAC/B,CAAE4C,MAAO4J,EAAE,YAAaxM,MAAO,SAEjC0rB,YAAalf,EAAE,4BAIlB,CAACA,IAEE4lC,EAAO6zB,GAAwB,CACnCvc,IAAKqN,EAAM,qBACXrhC,iBACA8R,iBAGIvM,EC/DD,SAAkCuT,GACvC,MAAM,IAAQ/hC,EAAAA,EAAAA,OACR,cAAE4qD,GAAkBJ,KACpB/M,EAAaT,KACbic,EAAcT,GAAkBz2B,GAEtC,OAAO7kC,EAAAA,EAAAA,UACL,IAAM,CACJ,CACEZ,KAAMrJ,EAAeyN,KACrBrH,UAAWnG,EAAoBoG,KAC/BgK,UAAU,EACVvH,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,eACTnG,WAAYgxD,GAAegO,kBACvBp+D,EACAuF,EACE,gIAENa,KAAM,GAAG68C,EAAWgW,GAASkH,cAC7Bz+D,QAASuB,EAAAA,GAAcC,SAEzB,CAAEpB,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,gBACTP,QAASy5D,EACT94D,UAAU,KAGd,CAAC84D,EAAaxb,EAAY19C,EAAG6qD,GAAegO,cAEhD,CD6ByBgC,CAAyBj1B,EAAK00B,yBAC/Cr/B,EAAag+B,GAAqBrzB,EAAK00B,yBAE7C,OACExhE,EAAAA,EAAAA,KAACkkC,GAAS,IACJ4I,EACJ5K,aAAcA,EACdvM,eAAgBA,EAChBwM,WAAYA,EACZ/R,eAAgBA,EAChB+V,YAAczd,IAAS1oB,EAAAA,EAAAA,KAACyhE,GAAkB,CAAC/4C,KAAMA,IACjDuc,gBAAiB/9B,EAAE,uBACnBg+B,gBAAiBh+B,EAAE,kBACnBk7B,gBAAiBl7B,EAAE,SAGzB,CE5DO,SAAS86D,GAGdllE,GACA,MAAMK,EAAKN,EAAMC,IAEX,QAAE4zC,EAAO,UAAEC,IAAcC,EAAAA,GAAAA,OACzB,aAAEhD,EAAY,aAAE6K,GAAiB9H,GAEhC9vC,GAAgBV,IACjB0wC,EAAWV,GAA0BrzC,EAAMQ,MAAOR,EAAMkwB,YAE9D,OACEhtB,EAAAA,EAAAA,KAAC8wC,GAAAA,GAAU,CACT1zC,KAAMN,EAAMM,KACZszC,QAASA,EACTK,kBAAgB,EAChB5jC,OAAQA,EAAG6jC,OAASt2C,QAAO4H,YAAY2uC,YAAcjkC,aACnD,MAAMkkC,EAAoBlkC,GAAOK,QAC7BvQ,EAAM2zC,UAAYgI,EAChB53C,EAAanB,WACbsN,GAAOK,aACT1L,EACJ,IAAIZ,EAAajE,EAAMiE,WAOvB,OANKA,GAAcjE,EAAMorB,aACvBnnB,GAAamG,EAAAA,GAAAA,GAAE,aAEb0mC,IACF7sC,GAAamG,EAAAA,GAAAA,GAAE,gBAGflH,EAAAA,EAAAA,KAACy3C,GAAa,CACZG,QAASz6C,EACTG,MAAOR,EAAMQ,MACb8zC,eAAgBt0C,EAAMs0C,gBAAkBt0C,EAAMQ,MAC9C6zC,UAAWr0C,EAAMq0C,UACjBuG,WAAY56C,EAAM46C,WAClBxG,kBAAmBA,EACnBlkB,WAAYlwB,EAAMkwB,WAClB+qB,mBAAoBj7C,EAAMi7C,mBAAmB73C,UAE7CF,EAAAA,EAAAA,KAACmmB,GAAe,CACdhpB,GAAIA,EACJ,UAASA,GAAMC,KACfgpB,YAAatpB,EAAMspB,YACnBC,QAASvpB,EAAMupB,QACf,mBAAkBlpB,EAAK,GAAGA,oBAAkBwE,EAC5CmI,OAAQpP,EACRoL,SAAWm8D,GAAiB3/D,EAAS2/D,EAAavnE,IAClDqG,WAAYA,EACZ8oB,OAAQ/sB,EAAM+sB,OACdrC,mBAAoB1qB,EAAM0qB,sBAEd,EAGpB8pB,MAAO,CAAET,WAAUJ,SAAU3zC,EAAM2zC,WAGzC,CC9EO,SAASyxB,GAAkBplE,GAKhC,MAAMpC,GAAQynE,EAAAA,GAAAA,IAAS,CAAE/kE,KAAMN,EAAMslE,QAErC,OADetlE,EAAMmmB,OAAOvoB,IACTsF,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,KACZ1E,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SAAGpD,EAAMoD,UAClB,CCrBO,SAASmiE,KACd,MAAM,MAAEC,IAAUC,EAAAA,GAAAA,OAClBxmE,EAAAA,EAAAA,YAAU,IAAM,IAAOumE,EAA2CE,WAAW,CAACF,GAChF,CAUO,SAASG,KACd,MAAM,MAAEH,IAAUC,EAAAA,GAAAA,MAsBlB,MAAO,CAAEG,eApBa5mE,EAAAA,EAAAA,cAAY,KAChC,IAAK,MAAMsQ,KAAOk2D,EAAM74C,OACtB64C,EAAMjX,OAAOj/C,EACf,GACC,CAACk2D,IAgBoBK,iBAdA7mE,EAAAA,EAAAA,cACrBsQ,IACC,IAAK,MAAMw2D,KAAYN,EAAM74C,OAEL,iBAAbm5C,GACPC,GAAkBD,KAAcC,GAAkBz2D,IAElDk2D,EAAMjX,OAAOuX,EAEjB,GAEF,CAACN,IAIL,CAEA,SAASO,GAAkBze,GACzB,OAAIA,EAAI77C,SAAS,KACR67C,EAAI58C,MAAM,KAAK,GAEjB48C,CACT,CCpCO,SAAS0e,KACd,MAAM,gBAAEH,GAAoBF,KAC5B,OAAO/zD,MAAO01C,EAAaj+C,EAAmBslB,KAC5C,MAAMoiC,QAA2BkB,GAAc,CAC7C3K,MACA4K,OAAQ,QACR7oD,OACAslB,WAEF,IAAKoiC,EAAS6B,GACZ,YAAY9B,GAAmBC,GAGjC,OADA8U,EAAgBve,GAET,MADCyJ,EAASnjB,OAEN,KAEHmjB,EAASI,QAAQnD,IAAI,iBAAiBviD,SAAS,0BACnCslD,EAAShZ,OACdgZ,EAASI,QAAQnD,IAAI,iBAAiBviD,SAAS,oBAC1CslD,EAASp/C,aAETo/C,EAASkV,MAE7B,CAEJ,CC1BO,SAASC,KACd,MAAM,gBAAEL,GAAoBF,KAC5B,OAAO/zD,MAAO01C,EAAaj+C,EAAmBslB,KAC5C,MAAMoiC,QAA2BkB,GAAc,CAC7C3K,MACA4K,OAAQ,OACR7oD,OACAslB,WAEF,IAAKoiC,EAAS6B,GACZ,YAAY9B,GAAmBC,GAGjC,OADA8U,EAAgBve,GAET,MADCyJ,EAASnjB,OAEN,KAEHmjB,EAASI,QAAQnD,IAAI,iBAAiBviD,SAAS,0BACnCslD,EAAShZ,OACdgZ,EAASI,QAAQnD,IAAI,iBAAiBviD,SAAS,oBAC1CslD,EAASp/C,aAETo/C,EAASkV,MAE7B,CAEJ,CClCO,SAASE,GAA8BnmE,GAC5C,OAAOkD,EAAAA,EAAAA,KAACsuC,GAAQ,IAAQxxC,EAAOqsC,aAAck2B,IAC/C,CCmBO,SAASyC,GAAWhlE,GACzB,MAAM,IAAQqK,EAAAA,EAAAA,MACRiO,GAAWC,EAAAA,GAAAA,MACX2lD,EAAerW,KAErB0d,KAEA,MAAM9S,EAAcyT,KAOdpe,EAAaT,KAEnB,OACE7+C,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,eACTk5C,YAAa,CACX,CACE9iD,MAAOR,EAAM2jE,gCAAkCv5D,EAAE,SACjDY,GAAI88C,EAAWgW,GAAS4F,QAE1B,CAAEljE,MAAO4J,EAAE,oBAGflH,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,eACdw3B,SArB+ChwB,UACnD,MAAMw0D,QAAgB3T,EAAYkC,EAAM,qBAAsB0R,GAC9DnI,EAAaJ,GAAS0B,YAAa,CAAEjY,OAAQ,CAAElnD,GAAI+lE,EAAQ/lE,KAAO,EAoB9DM,WAAYyJ,EAAE,UACdsmC,SAnBWA,IAAMp4B,GAAU,GAmBRlV,UAEnBF,EAAAA,EAAAA,KAACojE,GAAa,QAItB,CAEO,SAAS/C,GAASvjE,GACvB,MAAM,IAAQqK,EAAAA,EAAAA,MACRiO,GAAWC,EAAAA,GAAAA,MACX2lD,EAAerW,KACfN,GAASgZ,EAAAA,GAAAA,KACTlgE,EAAK3C,OAAO6pD,EAAOlnD,KACjB+iB,KAAMwI,GAASutC,GAAoBxE,EAAM,qBAAqBt0D,EAAGqhB,eAEzE6jD,KAEA,MAAMgB,EAAeP,KAOfle,EAAaT,KAEnB,GAAI3pD,OAAO8Q,UAAUnO,GACnB,OAAKurB,GAgBDpjB,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAOqrB,GAAMtrB,KAAO8J,EAAE,oBAAqB,CAAEo8D,SAAU56C,GAAMtrB,OAAU8J,EAAE,SACzEk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,SAAUY,GAAI88C,EAAWgW,GAAS4F,QAC7C,CAAEljE,MAAOorB,GAAMtrB,KAAO8J,EAAE,oBAAqB,CAAEo8D,SAAU56C,GAAMtrB,OAAU8J,EAAE,cAG/ElH,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,aACdw3B,SAlC2ChwB,gBAC7C20D,EAAa5R,EAAM,qBAAqBt0D,EAAGqhB,cAAe0B,GAChE86C,EAAaJ,GAAS0B,YAAa,CAAEjY,OAAQ,CAAElnD,OAAO,EAiC9CM,WAAYyJ,EAAE,UACdsmC,SAhCOA,IAAMp4B,GAAU,GAiCvBwY,aAAclF,EAAKxoB,UAEnBF,EAAAA,EAAAA,KAACojE,GAAa,CAACG,oBAAkB,UA7BrCvjE,EAAAA,EAAAA,KAACmhD,GAAU,CAAAjhD,UACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTL,YAAa,CACX,CACE9iD,MAAOR,EAAM2jE,gCAAkCv5D,EAAE,SACjDY,GAAI88C,EAAWgW,GAAS4F,QAE1B,CAAEljE,MAAO4J,EAAE,kBA4BzB,CAEA,SAASk8D,GAActmE,GACrB,MAAM,IAAQqK,EAAAA,EAAAA,OACR,mBAAEo8D,GAAuBzmE,EACzB0mE,EAAkB/G,KAClBM,GAAeoF,EAAAA,GAAAA,IAAsB,CAAE/kE,KAAM,iBACnD,OACEkI,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAAch/C,KAAK,OAAOE,MAAO4J,EAAE,QAAS8lB,YAAU,KACxEhtB,EAAAA,EAAAA,KAACo8C,GAAiB,CAAch/C,KAAK,cAAcE,MAAO4J,EAAE,kBAC5DlH,EAAAA,EAAAA,KAACs6C,GAAc,CACbl9C,KAAM,eACNE,MAAO4J,EAAE,gBACTqzC,gBAAiBrzC,EAAE,yBACnBmf,QAASxc,OAAOwmD,QAAQmT,EAAgB9G,eACrCv+D,QAAO,EAAE4oB,KAAuB,gBAAXA,IACrBhgB,KAAI,EAAEqF,EAAK1R,MAAW,CACrB4C,MAAO5C,GAAO4wD,YACd5wD,MAAO0R,MAEXrL,WAAYwiE,EACZv2C,YAAU,KAEZhtB,EAAAA,EAAAA,KAACkiE,GAAc,CAACE,MAAM,eAAen/C,OAAS85C,IAA0BA,EAAa78D,UACnFF,EAAAA,EAAAA,KAACgiE,GAAmB,CAClB5kE,KAAK,cACLE,MAAO4J,EAAE,eACTmf,QAASxc,OAAOwmD,QACdmT,EAAgB9G,cAAcK,IAAkCJ,aAAe,CAAC,GAChF51D,KAAI,EAAEqF,EAAK1R,MAAW,CACtB4C,MAAO5C,EACPA,MAAO0R,MAETga,YAAalf,EAAE,sBACf8lB,YAAU,QAKpB,C,wCCxJO,MAAMy2C,GAAwDA,EACnEhgE,WAIA,MAAMmhD,EAAaT,KACbiB,GAAU/vC,EAAAA,GAAAA,MAChB,OACErV,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLlC,QAAQ,OACRxB,MAAO,CACLsc,QAAS,EACTgK,UAAW,EACXrmB,WAAY,EACZmZ,cAAe,OAEjBtU,QAASA,IACPy+C,EACER,EAAWgW,GAAS8I,eAAgB,CAClCpf,MAAO,CACL7gD,KAAMA,MAIbvD,UAEDF,EAAAA,EAAAA,KAAC2jE,GAAAA,GAAW,KACL,EC/BN,SAASC,GACdxf,EACAE,GAEA,MAAMuf,EA6BR,WACE,MAAM/6B,GAAqB9yB,EAAAA,EAAAA,QAA8C,CAAC,GAK1E,OAJAja,EAAAA,EAAAA,YAAU,KACR,MAAM0K,EAAMqiC,EACZ,MAAO,IAAMriC,EAAI2P,QAAQiV,iBAAiBD,OAAO,GAChD,KACItvB,EAAAA,EAAAA,cAAY4S,MAAO01C,EAAa34B,KACrC,MAAMoiC,QAA2BkB,GAAc,CAC7C3K,MACA4K,OAAQ,UACRvjC,WAEF,IAAKoiC,EAAS6B,GAIZ,YAAY9B,GAAmBC,GAEjC,OACO,MADCA,EAASnjB,OAEN,KAEHmjB,EAASI,QAAQnD,IAAI,iBAAiBviD,SAAS,0BACnCslD,EAAShZ,OACdgZ,EAASI,QAAQnD,IAAI,iBAAiBviD,SAAS,oBAC1CslD,EAASp/C,aAETo/C,EAASkV,MAE7B,GACC,GACL,CA5DqBe,GACnB1f,GAAO2L,GAAqBzL,GAE5B,MAAOpkC,EAAM6jD,IAAWroE,EAAAA,EAAAA,eAAwBiG,IACzCqL,EAAO08B,IAAYhuC,EAAAA,EAAAA,eAA4BiG,IAC/CynB,EAAW46C,IAAgBtoE,EAAAA,EAAAA,WAAS,GAa3C,OARAK,EAAAA,EAAAA,YAAU,KACHqoD,GACAyf,EAAWzf,GACb14B,MAAMxL,GAAS6jD,EAAQ7jD,KACvBlR,OAAOhC,GAAU08B,EAAS18B,aAAiBsX,MAAQtX,EAAQ,IAAIsX,MAAM,oBACrE4H,SAAQ,IAAM83C,GAAa,IAAO,GACpC,CAACH,EAAYzf,KAET//C,EAAAA,EAAAA,UAAQ,KAAM,CAAG6b,OAAMlT,QAAOoc,eAAc,CAAClJ,EAAMlT,EAAOoc,GACnE,CCVO,MAAM66C,GAAmC,CAC9C,UACA,oBACA,0BACA,sBACA,uBACA,uBACA,oBACA,eAGK,SAASC,KACd,MAAM,EAAEh9D,IAAMC,EAAAA,EAAAA,MA4Dd,OA3DmB9C,EAAAA,EAAAA,UAAQ,IACc,CACrC,CACElH,GAAI,SACJC,KAAM8J,EAAE,mBACR0U,YAAa1U,EAAE,mCACfi9D,aAAc,CAAC,UACfC,WAAY,IAEd,CACEjnE,GAAI,OACJC,KAAM8J,EAAE,gBACR0U,YAAa1U,EAAE,4BACfi9D,aAAc,CAAC,QACfC,WAAY,IAEd,CACEjnE,GAAI,UACJC,KAAM8J,EAAE,oBACR0U,YAAa1U,EAAE,gCACfi9D,aAAc,CAAC,WACfC,WAAY,IAEd,CACEjnE,GAAI,QACJC,KAAM8J,EAAE,4BACR0U,YAAa1U,EAAE,2CACfi9D,aAAc,CAAC,SACfC,WAAY,IAEd,CACEjnE,GAAI,iBACJC,KAAM8J,EAAE,4BACRi9D,aAAc,CACZ,iBACA,iBACA,SACA,aACA,cACA,gBACA,oBACA,wBACA,yBACA,OACA,OACA,SACA,OACA,cAEFC,WAAY,IAEd,CACEjnE,GAAI,QACJC,KAAM8J,EAAE,SACRk9D,WAAY,MAIf,CAACl9D,GAEN,CAEO,SAASm9D,KACd,MAAMC,EAAaJ,KAEbK,EAAkBX,GAAuCnS,EAAM,kBAE/DprC,GAAUhiB,EAAAA,EAAAA,UAAQ,KACtB,IAAKkgE,EAAgBrkD,MAAM5c,QAAQkhE,IAAK,OACxC,IAAKD,EAAgBrkD,MAAM5c,QAAQmhE,IAAK,OAExC,MAAM,QAAEnhE,GAAYihE,EAAgBrkD,KAC9BwkD,EAAU76D,OAAO4f,KAAKnmB,EAAQmhE,KAC9BE,EAAU96D,OAAO4f,KAAKnmB,EAAQkhE,KAM9BI,EAA2BF,EAAQvmE,QACtCkiB,IAAOskD,EAAQp8D,SAAS8X,IAAM/c,EAAQmhE,IAAIpkD,GAAGwkD,kBAGhD,MAAO,IAAIF,KAAYC,GAA0B7mD,QAE/C,CAACC,EAAK5R,KACN,GAAI63D,GAAuB17D,SAAS6D,GAAM,OAAO4R,EACjD,MAAMtjB,EAAQkqE,EAAyBr8D,SAAS6D,GAAO9I,EAAQmhE,IAAIr4D,GAAO9I,EAAQkhE,IAAIp4D,GAEtF,OADA4R,EAAI5R,GAAO1R,EACJsjB,CAAG,GACT,CAAC,EAAE,GACL,CAACumD,EAAgBrkD,OAEdzC,GAASpZ,EAAAA,EAAAA,UAAQ,KACrB,IAAIoZ,EAA8BrN,KAAKC,MAAMD,KAAKa,UAAUqzD,IAC5D,GAAIC,EAAgBn7C,UAAW,OAAOk7C,EACtC,GAAIC,EAAgBv3D,MAAO,OAAOs3D,EAClC,IAAKj+C,EAAS,OAAOi+C,EACrB,IAAK,MAAM5pE,KAASmP,OAAOC,OAAOuc,GAAU,CAC1C,MAAMkL,EAAe72B,EAAMoqE,SACrBC,EAAOrqE,EAAMsqE,cAEnB,IAAItnD,EAAQD,EAAOjZ,MAAMkZ,GAAUA,EAAMymD,cAAc57D,SAASw8D,KAC3DrnD,IACHA,EAAQD,EAAOjZ,MAAMkZ,GAAyB,UAAfA,EAAMtgB,OAChCsgB,IACHA,EAAQ,CAAEvgB,GAAI,QAASC,KAAM,QAASgnE,WAAY,IAClD3mD,EAAO1Z,KAAK2Z,KAIhB,IAAIonD,EAAWpnD,EAAM0mD,WAAW5/D,MAAMsgE,GAAaA,EAAS1nE,OAASm0B,IAChEuzC,IACHA,EAAW,CACT3nE,GAAIo0B,EAAar0B,cAAcvC,QAAQ,KAAM,KAC7CyC,KAAMm0B,EACN0zC,MAAO,IAETvnD,EAAM0mD,WAAWrgE,KAAK+gE,IAExBA,EAASG,MAAMlhE,KAAKghE,EACtB,CASA,OARAtnD,EAASA,EAAOtf,QAAQuf,GAAUA,EAAM0mD,WAAW5gE,OAAS,IAC5Dia,EAAO2b,SAAS1b,GACdA,EAAM0mD,WAAWhlE,MAAK,CAACiM,EAAGoc,KACT/J,EAAMymD,cAAc1e,QAAQp6C,EAAE45D,MAAM,MAAQ,IAC5CvnD,EAAMymD,cAAc1e,QAAQh+B,EAAEw9C,MAAM,MAAQ,OAIxDxnD,CAAM,GACZ,CAAC6mD,EAAYj+C,EAASk+C,EAAgBv3D,MAAOu3D,EAAgBn7C,YAEhE,OAAO/kB,EAAAA,EAAAA,UACL,KAAM,CACJ+kB,UAAWm7C,EAAgBn7C,UAC3Bpc,MAAOu3D,EAAgBv3D,MACvByQ,SACA4I,QAASA,KAEX,CAAC5I,EAAQ8mD,EAAgBv3D,MAAOu3D,EAAgBn7C,UAAW/C,GAE/D,CCpJO,SAAS6+C,KACd,MAAM,EAAEh+D,IAAMC,EAAAA,EAAAA,OAER,UAAEiiB,EAAS,MAAEpc,EAAK,OAAEyQ,GAAW4mD,KACrC,GAAIr3D,EAAO,OAAOhN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,IACnC,GAAIoc,IAAc3L,EAAQ,OAAOzd,EAAAA,EAAAA,KAACkqD,GAAW,IAG7C,MAAMib,EAAsB1nD,EAAOjZ,MAAMkZ,GAAuB,mBAAbA,EAAMvgB,KAEzD,OACEmI,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,0BACTy5C,eAAe3gD,EAAAA,EAAAA,KAACyjE,GAAkB,CAAChgE,KAAM,eAE3CzD,EAAAA,EAAAA,KAAC6W,GAAU,CAAA3W,UACTF,EAAAA,EAAAA,KAACoY,GAAAA,GAAW,CAACC,gBAAc,EAAAnY,UACzBF,EAAAA,EAAAA,KAAC4I,GAAAA,EAAK,CAAA1I,UACJF,EAAAA,EAAAA,KAAColE,GAAW,CAAC3nD,OAAQ,CAAC0nD,aAMlC,CAEA,SAASC,GAAYtoE,GACnB,MAAM8nD,EAAaT,KACnB,OACEnkD,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SACGpD,EAAM2gB,OAAO1W,KAAK2W,IACjBpY,EAAAA,EAAAA,MAAC4U,GAAAA,EAAI,CAACE,WAAS,EAACD,QAAM,EAAAja,SAAA,CACnBwd,EAAMtgB,OACLkI,EAAAA,EAAAA,MAACqV,GAAAA,EAAU,CAAAza,SAAA,EACTF,EAAAA,EAAAA,KAACwhC,GAAAA,EAAS,CAAAthC,SACqB,IAA5Bwd,EAAM0mD,WAAW5gE,QAChBxD,EAAAA,EAAAA,KAAC+a,GAAAA,EAAK,CAACC,aAAa,KAAI9a,UACtBF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAASyK,iBAAkB,CACxChhB,OAAQ,CAAEygB,SAAUpnD,EAAM0mD,WAAW,GAAGjnE,MACvC+C,SAEFwd,EAAMtgB,UAIX4C,EAAAA,EAAAA,KAAC+a,GAAAA,EAAK,CAACC,aAAa,KAAI9a,SAAEwd,EAAMtgB,SAGnCsgB,EAAM9B,cACL5b,EAAAA,EAAAA,KAAA,KAAG6B,MAAO,CAAEsG,QAAS,GAAKsqC,SAAU,UAAWtqB,UAAW,GAAIjoB,SAC3Dwd,EAAM9B,iBAKc,IAA5B8B,EAAM0mD,WAAW5gE,SAChBxD,EAAAA,EAAAA,KAAC8iC,GAAAA,EAAQ,CAAA5iC,UACPF,EAAAA,EAAAA,KAACw0B,GAAAA,GAAI,CAACk/B,SAAO,EAAAxzD,SACVwd,EAAM0mD,WAAWr9D,KAAK+9D,IACrB9kE,EAAAA,EAAAA,KAACslE,GAAAA,EAAQ,CAAAplE,UACPF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAASyK,iBAAkB,CACxChhB,OAAQ,CAAEygB,SAAUA,EAAS3nE,MAC5B+C,SAEF4kE,EAAS1nE,QANC0nE,EAAS1nE,cA7BNsgB,EAAMvgB,OA8C1C,CC9EO,SAASooE,GAA+BzoE,GAC7C,MAAM,UAAEssB,EAAS,MAAEpc,EAAK,OAAEyQ,EAAM,QAAE4I,GAAYg+C,MACxC,WAAEmB,GAAe1oE,EACjB4gB,EAAQD,EAAOjZ,MAAMkZ,GACzBA,EAAM0mD,WAAWz8C,MAAMm9C,GAAaA,EAAS3nE,KAAOqoE,MAEhDV,EAAWpnD,GAAO0mD,WAAW5/D,MAAMsgE,GAAaA,EAAS3nE,KAAOqoE,IAChEp7B,EAAM6rB,GACVxE,EAAM,mBAEF,EAAEvqD,IAAMC,EAAAA,EAAAA,MACRiO,GAAWC,EAAAA,GAAAA,MAEXowD,GAAkBphE,EAAAA,EAAAA,UAAQ,KAC9B,MAAMohE,EAA4D,CAAC,EACnE,GAAIX,GAAYz+C,EACd,IAAK,MAAOja,EAAK1R,KAAUmP,OAAOwmD,QAAQhqC,GACpCy+C,GAAUG,MAAM18D,SAAS7N,EAAMsqE,iBACjCS,EAAgBr5D,GAAO1R,GAI7B,OAAO+qE,CAAe,GACrB,CAACX,EAAUz+C,IAERi+C,EAAaJ,KAEb5gE,GAAUe,EAAAA,EAAAA,UACd,IAAM,CACJ,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcC,QACvB3B,KAAM84D,GAAAA,GACN1+D,MAAO4J,EAAE,QACTP,QAASA,IAAMyO,EAAS,SAAU,CAAEza,SAAS,IAC7C8P,UAAU,KAGd,CAAC2K,EAAUlO,IAGb,GAAI8F,EAAO,OAAOhN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,IACnC,GAAIoc,IAAc1L,IAAUonD,EAAU,OAAO9kE,EAAAA,EAAAA,KAACkqD,GAAW,IACzD,GAAI9f,EAAIp9B,MAAO,OAAOhN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOo9B,EAAIp9B,QAC3C,GAAIo9B,EAAIhhB,YAAcghB,EAAIlqB,KAAM,OAAOlgB,EAAAA,EAAAA,KAACkqD,GAAW,IAEnD,MAAM7sD,EAAQinE,EAAW9/D,MAAMkZ,GAAUA,EAAMvgB,KAAOqoE,KAAapoE,KAEnE,OACEkI,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAOA,GAASynE,EAAS1nE,KACzBujD,eAAe3gD,EAAAA,EAAAA,KAACmJ,GAAW,CAAC7F,QAASA,EAASF,SAAU6F,GAAAA,GAAiBC,WAE3ElJ,EAAAA,EAAAA,KAAC0lE,GAA0B,CAACr/C,QAASo/C,EAAiBvlD,KAAMkqB,EAAIlqB,SAGtE,CAEO,SAASwlD,GAA2B5oE,GAIzC,OACEkD,EAAAA,EAAAA,KAAC0hB,GAAW,CAAAxhB,SACT2J,OAAOwmD,QAAQvzD,EAAMupB,SAAStf,KAAI,EAAEqF,EAAK2a,MACxC/mB,EAAAA,EAAAA,KAAC2lE,GAAyB,CAAW5+C,OAAQA,EAAQ7G,KAAMpjB,EAAMojB,KAAM9iB,KAAMgP,GAA7CA,MAIxC,CAEO,SAASu5D,GAA0B7oE,GAKxC,MAAMiqB,EAASjqB,EAAMiqB,OACrB,OAAQA,EAAOtjB,MACb,IAAK,SACL,IAAK,QAEL,IAAK,UACH,OAAOzD,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAOypB,EAAOzpB,MAAM4C,SAAEpD,EAAMojB,KAAKpjB,EAAMM,QAE5D,IAAK,UACH,OACE4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAOypB,EAAOzpB,MAAM4C,SAC7BpD,EAAMojB,KAAKpjB,EAAMM,OAAQ8J,EAAAA,GAAAA,GAAE,YAAaA,EAAAA,GAAAA,GAAE,cAIjD,IAAK,OACH,OAAoD,IAA/CpK,EAAMojB,KAAKpjB,EAAMM,MAAmBoG,OAAqB,MAE5DxD,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAOypB,EAAOzpB,MAAM4C,SAC5BpD,EAAMojB,KAAKpjB,EAAMM,MAAmB2J,KAAI,CAAC6+D,EAAM5+D,KACxChH,EAAAA,EAAAA,KAAA,OAAAE,SAAkB0lE,GAAR5+D,OAKzB,IAAK,gBACH,OAA6D,IAAzD6C,OAAO4f,KAAK3sB,EAAMojB,KAAKpjB,EAAMM,OAAiBoG,OAAqB,MAErExD,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAOypB,EAAOzpB,MAAOgkB,WAAS,EAAAphB,UACxCF,EAAAA,EAAAA,KAAA,OAAAE,SAAM+5C,GAAAA,GAAAA,KAAYn9C,EAAMojB,KAAKpjB,EAAMM,WAIzC,IAAK,cACH,OACE4C,EAAAA,EAAAA,KAAA,OAAK6B,MAAO,CAAEvF,MAAO,OAAQ4D,UAC3BF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAOypB,EAAOzpB,MAAM4C,SAAE6mB,EAAOtjB,SAI/C,IAAK,SAAU,CACb,MAAMujB,EAAWD,EAAO8+C,QAAQrhE,MAAMshE,GAChCA,EAAO,KAAOhpE,EAAMojB,KAAKpjB,EAAMM,QAC9BN,EAAMojB,KAAKpjB,EAAMM,OAAuB,KAAd0oE,EAAO,KAGxC,OAAO9lE,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAOypB,EAAOzpB,MAAM4C,SAAE8mB,IAAW,IACtD,CAEA,IAAK,WACH,OAAKlqB,EAAMojB,KAAKpjB,EAAMM,OAEpBkI,EAAAA,EAAAA,MAAC4b,GAAU,CAAC5jB,MAAOypB,EAAOzpB,MAAM4C,SAAA,CAC7B,IAAI0R,KAAK9U,EAAMojB,KAAKpjB,EAAMM,OAAiB6U,qBAAqB,KAChE,IAAIL,KAAK9U,EAAMojB,KAAKpjB,EAAMM,OAAiB8U,wBAJZ,KAQtC,QACE,OAAOlS,EAAAA,EAAAA,KAAA,OAAK6B,MAAO,CAAEvF,MAAO,OAAQ4D,SAAEkQ,KAAKa,UAAU8V,EAAQ,KAAM,KAEzE,C,4BCpJO,SAASg/C,GAAgBjpE,GAQ9B,MAAO8c,EAAaosD,IAAkBtqE,EAAAA,EAAAA,UAASoB,EAAM+7C,kBAE/CotB,GAAoB5hE,EAAAA,EAAAA,UACxB,IACEvH,EAAMoyC,aACF,CAAC,cAAe,eAAgB,mBAChC,CAAC,cAAe,iBACtB,CAACpyC,EAAMoyC,eAEHg3B,GAAqB7hE,EAAAA,EAAAA,UACzB,IAAOvH,EAAMoyC,aAAe,CAAC,eAAgB,mBAAqB,CAAC,iBACnE,CAACpyC,EAAMoyC,eAET,OAAKpyC,EAAMO,OAQT2C,EAAAA,EAAAA,KAACmmE,GAAAA,EAAW,CACV9oE,OACEiI,EAAAA,EAAAA,MAAA,OAAKzD,MAAO,CAAE0N,QAAS,OAAQzG,WAAY,SAAUwP,IAAK,GAAIpY,SAAA,CAC3DpD,EAAMye,cACLvb,EAAAA,EAAAA,KAAC62C,GAAU,CACTjwC,YAAagT,EACbwuB,YAAaA,IAAM49B,GAAgBpsD,GAEnCre,KAAK,OAGRuB,EAAMO,SAGXwE,MAAO,CAAEsmB,UAAW,IACpBzhB,UAAWu/D,EAAkBx+D,KAAK,KAAKvH,UAEvCF,EAAAA,EAAAA,KAACuvC,GAAY,CACXF,aAAcvyC,EAAMuyC,aACpB3oC,UAAWkT,EAAc,4BAAyBjY,EAAUzB,SAE3DpD,EAAMoD,cA3BTF,EAAAA,EAAAA,KAAComE,GAAAA,EAAQ,CAACh0D,KAAM,GAAI1L,UAAWw/D,EAAmBz+D,KAAK,KAAKvH,UAC1DF,EAAAA,EAAAA,KAACuvC,GAAY,CAACF,aAAcvyC,EAAMuyC,aAAanvC,SAAEpD,EAAMoD,YA8B/D,C,eCjDO,SAASmmE,GAGdvpE,GACA,MAAM,MACJQ,EAAK,eACL8zC,EAAc,UACdD,EAAS,mBACT4G,EAAkB,WAClBL,EAAU,WACV1qB,EAAU,SACVyjB,EAAQ,cACR61B,GACExpE,GACE,EAAEoK,IAAMC,EAAAA,EAAAA,OACR,QACJupC,EACAC,WAAW,aAAE/C,EAAY,aAAE6K,KACzB7H,EAAAA,GAAAA,OACG21B,EAAUC,IAAe9qE,EAAAA,EAAAA,UAAS,KAClC0tB,EAAW46C,IAAgBtoE,EAAAA,EAAAA,WAAS,IACpC+qE,EAAYC,IAAiBhrE,EAAAA,EAAAA,eAA4BiG,GAE1DglE,GAAwB7qE,EAAAA,EAAAA,cAC5B,CAACgR,EAAYipC,KACXywB,EAAYzwB,EAAK34C,MACbkpE,GACFA,EAAcvwB,GAAM/mC,OAAOhC,IACzB05D,EAAc15D,EAAM,GAExB,GAEF,CAACs5D,IAGGM,EAAyBC,IAC7B7C,GAAa,EAAK,EAEd7mE,EAAKN,EAAMC,GACX+zC,EAAWV,GAA0BrzC,EAAMQ,MAAOR,EAAMkwB,YAE9D,OACEhtB,EAAAA,EAAAA,KAAC8wC,GAAAA,GAAU,CACT1zC,KAAMN,EAAMM,KACZszC,QAASA,EACTK,kBAAgB,EAChB5jC,OAAQA,EAAG6jC,OAAS1uC,WAAU5H,SAASu2C,YAAcjkC,aACnD,MAAMkkC,EAAoBlkC,GAAOK,QAC7BojC,GAAYgI,EACVvxC,EAAE,iBACF8F,GAAOK,QACTo5D,GAAYp5D,QACVo5D,EAAWp5D,aACX1L,EACAmlE,EAAethD,IACnBghD,EAAY,IACZlkE,OAASX,GACL7E,EAAMiqE,cACRjqE,EAAMiqE,aAAavhD,EACrB,EAEIwhD,EAA0BH,IAC9B7C,GAAa,GACb1hE,EAASukE,EAAY,EAEjBI,EAA0BvsE,IACX,SAAfoC,EAAM2G,MACRnB,EAAS5H,EACX,EAEF,OACEsF,EAAAA,EAAAA,KAACy3C,GAAa,CACZG,QAASz6C,EACTG,MAAOA,EACP8zC,eAAgBA,GAAkB9zC,EAClC6zC,UAAWA,EACX4G,mBAAoBA,EACpBL,WAAYA,EACZxG,kBAAmBA,EACnBlkB,WAAYA,EAAW9sB,SAEtBpD,EAAMoG,WAAuBvB,IAAf7E,EAAMoG,MACnBoC,EAAAA,EAAAA,MAAA,OAAKzD,MAAO,CAAE0N,QAAS,OAAQgJ,oBAAqB,YAAarY,SAAA,EAC/DF,EAAAA,EAAAA,KAACknE,GAAAA,EAAU,CACTC,cAAerqE,EAAMqqE,cACrBhqE,GAAIA,EACJ,UAASA,EACTsG,KAAM3G,EAAM2G,MAAQ,UACpB/I,MAAOA,EACP0sE,mBAAoBtqE,EAAMsqE,mBAC1Bb,SAAUn9C,EAAYliB,EAAE,cAAgBq/D,EACxCc,oBAAqBvqE,EAAMspB,YAC3BkhD,kBAAmBX,EACnBY,aAAcA,CAAC/hD,EAAQ9qB,IAAkBusE,EAAuBvsE,GAChE8sE,aAAcA,CAAChiD,EAAQ9qB,IAAkBusE,EAAuBvsE,GAChE+sE,cAAeA,CAACjiD,EAAQqhD,IAAsBD,IAC9Cc,eAAgBA,CAACliD,EAAQqhD,IACvBG,EAAuBH,GAEzBE,aAAcD,EAEda,yBAA0B7qE,EAAM6qE,2BAA4B,EAE5Dz/C,WAAYprB,EAAMorB,YAAc0lB,EAChCgN,UAAW5tC,GAASy5D,EAAa,aAAU9kE,EAC3CZ,WAAYjE,EAAMiE,WAClB6mE,sBAAuB9qE,EAAM8qE,wBAE9B9qE,EAAMoG,KACNpG,EAAM+qE,qBAAuB/qE,EAAM+qE,qBAAuB,SAG7DviE,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACknE,GAAAA,EAAU,CACTC,cAAerqE,EAAMqqE,cACrBhqE,GAAIA,EACJ,UAASA,EACTsG,KAAM3G,EAAM2G,MAAQ,UACpB/I,MAAOA,EACP0sE,mBAAoBtqE,EAAMsqE,mBAC1Bb,SAAUn9C,EAAYliB,EAAE,cAAgBq/D,EACxCc,oBAAqBvqE,EAAMspB,YAC3BkhD,kBAAmBX,EACnBY,aAAcA,CAAC/hD,EAAQ9qB,IAAkBusE,EAAuBvsE,GAChE8sE,aAAcA,CAAChiD,EAAQ9qB,IAAkBusE,EAAuBvsE,GAChE+sE,cAAeA,CAACjiD,EAAQqhD,IAAsBD,IAC9Cc,eAAgBA,CAACliD,EAAQqhD,IACvBG,EAAuBH,GAEzBE,aAAcD,EAEda,yBAA0B7qE,EAAM6qE,2BAA4B,EAE5Dz/C,WAAYprB,EAAMorB,YAAc0lB,EAChCgN,UAAW5tC,EAAQ,aAAUrL,IAE9B7E,EAAM+qE,qBAAuB/qE,EAAM+qE,qBAAuB,SAGjD,EAGpBv2B,MAAO,CAAET,WAAUJ,SAAU3zC,EAAM2zC,WAGzC,CC1JO,SAASq3B,KACd,MAAM,gBAAEnF,GAAoBF,KACtB35B,GAAqB9yB,EAAAA,EAAAA,QAA8C,CAAC,GAK1E,OAJAja,EAAAA,EAAAA,YAAU,KACR,MAAM0K,EAAMqiC,EACZ,MAAO,IAAMriC,EAAI2P,QAAQiV,iBAAiBD,OAAO,GAChD,IACI1c,MAAO01C,EAAa34B,KACzB,MAAMoiC,QAA2BkB,GAAc,CAC7C3K,MACA4K,OAAQ,SACRvjC,OAAQA,IAEV,IAAKoiC,EAAS6B,GACZ,YAAY9B,GAAmBC,GAGjC,OADA8U,EAAgBve,GAET,MADCyJ,EAASnjB,OAEN,KAEHmjB,EAASI,QAAQnD,IAAI,iBAAiBviD,SAAS,0BACnCslD,EAAShZ,OACdgZ,EAASI,QAAQnD,IAAI,iBAAiBviD,SAAS,oBAC1CslD,EAASp/C,aAETo/C,EAASkV,MAE7B,CAEJ,CCdO,SAASgF,GACdjrE,GAIA,MAAM,cAAEkrE,EAAa,WAAE9+B,EAAU,UAAE7Q,GAAcv7B,GAC3C,EAAEoK,IAAMC,EAAAA,EAAAA,MACRiH,EAAerD,KACfk9D,EAAgBH,KAEhBI,GAAcpsE,EAAAA,EAAAA,cAAY4S,UAC9B,UACQy7B,QAAQC,IACZ49B,EAAcjhE,KAAI2H,gBACVu5D,EAAcxW,EAAM,aAAaqT,KAAY,KAErDp5C,MAAK,KACLwd,GAAY,GAEhB,CAAE,MAAOl8B,GACP,MAAM,cAAEmX,EAAa,YAAEC,GAAgBi7C,GAAgBryD,GACvDoB,EAAazD,SAAS,CACpBtH,QAAS,SACThG,MAAO6J,EAAE,6BACThH,UACEoF,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,CACGikB,GAAepd,KAAK+H,GAAQA,EAAIzB,UAChC+W,GAAard,KAAK+H,GAAQA,EAAIzB,cAIvC,CAAE,QACAgrB,GACF,IACC,CAACnxB,EAAGkH,EAAc45D,EAAeC,EAAe/+B,EAAY7Q,IAE/D,OACEr4B,EAAAA,EAAAA,KAAC++B,GAAAA,EAAK,CACJ1hC,MAAO6J,EAAE,mBACTujC,iBAAiB,UACjB,UAAQ,wBACR,aAAYvjC,EAAE,uCACd7D,QAAS27B,GAAAA,EAAaiB,MACtBp6B,QAAM,EACN0G,QAASA,IAAM8rB,IACf/0B,QAAS,EACPtD,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACL,UAAQ,mCACRkD,OAAO,mCAEPpF,QAAQ,SACRsD,QAASA,KAAWuhE,GAAc,EAClC,aAAYhhE,CAAC,qBAAqBhH,SAEjCgH,EAAE,eALC,WAONlH,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAAclC,QAAQ,OAAOsD,QAASA,IAAM0xB,IAAYn4B,SAC5DgH,EAAE,WADO,WAGZhH,SAEDgH,EACC,wHAIR,CCAO,SAASihE,GAAgBrrE,GAI9B,MAAMsY,GAAWC,EAAAA,GAAAA,MACX+yD,EAAQtF,KACRuF,EDvFD,WACL,MAAM,WAAElwC,EAAU,UAAEE,GAAcK,MAC3B57B,EAAOsuC,IAAY1vC,EAAAA,EAAAA,YAU1B,OARAK,EAAAA,EAAAA,YAAU,KACJe,EACFq7B,GAAWn4B,EAAAA,EAAAA,KAAC+nE,GAAe,IAAUjrE,EAAOu7B,UAAWA,KAEvDA,GACF,GACC,CAACv7B,EAAOq7B,EAAYE,IAEhB+S,CACT,CC0EqCk9B,GAC7B5pC,GAAW5iC,EAAAA,EAAAA,cACf4S,UAEE,MAAM65D,EAAqC,CAAC,EAC5C,IAAK,MAAOn8D,EAAK1R,KAAUmP,OAAOwmD,QAAQnwC,GACpCrW,OAAO4f,KAAK3sB,EAAMupB,SAAS9d,SAAS6D,KACtCm8D,EAAUn8D,GAAO1R,SAGf0tE,EAAM3W,EAAM,iBAAkB8W,GACpCnzD,EAAS,KAAK,GAEhB,CAACA,EAAUgzD,EAAOtrE,EAAMupB,WAIpB,QAAEA,EAAO,OAAE5I,IAAWpZ,EAAAA,EAAAA,UAAQ,KAClC,MAAMgiB,EAAoD,CAAC,EACrD5I,EAAqF,GAC3F,IAAK,MAAOrR,EAAK2a,KAAWld,OAAOwmD,QAAQvzD,EAAMupB,SAC/C,GACEja,EAAIk3C,WAAW,gBACfl3C,EAAIk3C,WAAW,gBACfl3C,EAAIk3C,WAAW,gBACfl3C,EAAIk3C,WAAW,gBACfl3C,EAAIk3C,WAAW,eACf,CACA,MAAM55B,EAAYtd,EAAIo5C,UAAU,EAAG,IAAI7qD,QAAQ,KAAM,KACrD,IAAI+iB,EAAQD,EAAOjZ,MAAMkZ,GAAUA,EAAMgM,YAAcA,IAClDhM,IACHA,EAAQ,CAAEgM,YAAWrD,QAAS,CAAC,GAC/B5I,EAAO1Z,KAAK2Z,IAEdA,EAAM2I,QAAQja,GAAO2a,CACvB,MAAO,GAAI3a,EAAIk3C,WAAW,aAAc,CACtC,MAAM55B,EAAYtd,EAAIo5C,UAAU,EAAG,GAAG7qD,QAAQ,KAAM,KACpD,IAAI+iB,EAAQD,EAAOjZ,MAAMkZ,GAAUA,EAAMgM,YAAcA,IAClDhM,IACHA,EAAQ,CAAEgM,YAAWrD,QAAS,CAAC,GAC/B5I,EAAO1Z,KAAK2Z,IAEdA,EAAM2I,QAAQja,GAAO2a,CACvB,MACEV,EAAQja,GAAO2a,EAGnB,MAAO,CAAEV,UAAS5I,SAAQ,GACzB,CAAC3gB,EAAMupB,UAEJmiD,EAAiB3+D,OAAOwmD,QAAQhqC,GACnCloB,QAAO,EAAE,CAAE4oB,KAA4B,YAAhBA,EAAOtjB,OAC9Bsa,QAAiD,CAACC,GAAM5R,EAAK2a,MAC5D/I,EAAI5R,GAAO2a,EACJ/I,IACN,CAAC,GAEAyqD,EAAe5+D,OAAOwmD,QAAQhqC,GACjCloB,QAAO,EAAE,CAAE4oB,KAA4B,YAAhBA,EAAOtjB,OAC9Bsa,QAAiD,CAACC,GAAM5R,EAAK2a,MAC5D/I,EAAI5R,GAAO2a,EACJ/I,IACN,CAAC,GAEN,SAAS0qD,EAAiB5P,GACxB,MAAMmM,EAAQ,IAAIn5C,IASlB,OAPAjiB,OAAOC,OAAOgvD,GAAQ1/B,SAAS/c,IAC7B,MAAM0oD,EAAO1oD,GAAM2oD,cACfD,GACFE,EAAM1zD,IAAIwzD,EACZ,IAGK9rD,MAAM6U,KAAKm3C,EACpB,CAEA,OACE3/D,EAAAA,EAAAA,MAAC29D,GAAW,CACVr1C,aAAc9wB,EAAMojB,KACpB7gB,YAAY6H,EAAAA,GAAAA,GAAE,QACdsmC,SAAUA,IAAMp4B,EAAS,MACzBspB,SAAUA,EACVmR,mBACE7vC,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLlC,QAAQ,YACRsD,QAAU2J,IACRA,EAAEwF,iBACFuyD,EAA2B,CACzBL,cAAeU,EAAiBriD,GAChC6iB,WAAYA,IAAM9zB,EAAS,OAC3B,EACFlV,UAEDgH,EAAAA,GAAAA,GAAE,2BAENhH,SAAA,CAEA2J,OAAOwmD,QAAQoY,GAAc1hE,KAAI,EAAEqF,EAAK2a,MAChC/mB,EAAAA,EAAAA,KAAC2oE,GAAsB,CAAWvrE,KAAMgP,EAAK2a,OAAQA,GAAxB3a,KAErCvC,OAAO4f,KAAK++C,GAAgBhlE,OAAS,IACpCxD,EAAAA,EAAAA,KAAC23C,GAAAA,EAAS,CAACr6C,OAAO4J,EAAAA,GAAAA,GAAE,WAAY0hE,SAAO,EAAClgD,KAAK,QAAOxoB,SACjD2J,OAAOwmD,QAAQmY,GAAgBzhE,KAAI,EAAEqF,EAAK2a,MAClC/mB,EAAAA,EAAAA,KAAC2oE,GAAsB,CAAWvrE,KAAMgP,EAAK2a,OAAQA,GAAxB3a,OAKzCqR,EAAO1W,KAAK2W,IAET1d,EAAAA,EAAAA,KAAC+lE,GAAe,CAEd1oE,MAAOqgB,EAAMgM,UACbnO,aAAW,EACXs9B,iBAAsC,SAApBn7B,EAAMgM,UAAqBxpB,SAE5C2J,OAAOwmD,QAAQ3yC,EAAM2I,SAAStf,KAAI,EAAEqF,EAAK2a,MACjC/mB,EAAAA,EAAAA,KAAC2oE,GAAsB,CAAWvrE,KAAMgP,EAAK2a,OAAQA,GAAxB3a,MANjCsR,EAAMgM,eAavB,CAEO,SAASi/C,GAAuB7rE,GACrC,MAAMiqB,EAASjqB,EAAMiqB,OACfmB,EAAaprB,EAAMiqB,OAAO89C,gBAEhC,GAAI/nE,EAAMM,KAAK4zD,SAAS,WAAal0D,EAAMM,KAAK4zD,SAAS,YACvD,OACEhxD,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB9+C,MAAOypB,EAAOzpB,MACdF,KAAMN,EAAMM,KACZg0C,eAAgBrqB,EAAOzpB,MACvB6zC,UAAWpqB,EAAO8hD,UAClB77C,WAAYjG,EAAO8pB,SACnBptC,KAAK,aAKX,GACE3G,EAAMM,KAAKmL,SAAS,oCACpBzL,EAAMM,KAAKmL,SAAS,mCAEpB,OACEvI,EAAAA,EAAAA,KAAC+lE,GAAe,CAAC12B,cAAY,EAAAnvC,UAC3BF,EAAAA,EAAAA,KAACqmE,GAAkB,CACjB/oE,MAAOypB,EAAOzpB,MACdF,KAAMN,EAAMM,KACZqG,KAAK,OACL2tC,eAAgBrqB,EAAOzpB,MACvB6zC,UAAWpqB,EAAO8hD,UAClB77C,WAAYjG,EAAO8pB,SACnB82B,0BAA0B,EAC1Bz/C,YAAY,MAMpB,OAAQnB,EAAOtjB,MACb,IAAK,SACL,IAAK,QACH,OACEzD,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB9+C,MAAOypB,EAAOzpB,MACdF,KAAMN,EAAMM,KACZg0C,eAAgBrqB,EAAOzpB,MACvB6zC,UAAWpqB,EAAO8hD,UAClB77C,WAAYjG,EAAO8pB,SACnBjjB,aAAc7G,EAAO1c,QACrBqvC,YAAU,EACVrI,aAAW,IAGjB,IAAK,UACH,OACErxC,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB9+C,MAAOypB,EAAOzpB,MACdF,KAAMN,EAAMM,KACZg0C,eAAgBrqB,EAAOzpB,MACvB6zC,UAAWpqB,EAAO8hD,UAClBplE,KAAK,SACLupB,WAAYjG,EAAO8pB,SACnBhR,IAAK9Y,EAAO+hD,UACZn1D,IAAKoT,EAAOgiD,UACZn7C,aAAc7G,EAAO1c,QACrBqvC,YAAU,EACVrI,aAAW,IAGjB,IAAK,UACH,OACErxC,EAAAA,EAAAA,KAAC+lE,GAAe,CAAC12B,cAAY,EAAAnvC,UAC3BF,EAAAA,EAAAA,KAACuwC,GAAgB,CACfjzC,MAAOypB,EAAOzpB,MACdF,KAAMN,EAAMM,KACZg0C,eAAgBrqB,EAAOzpB,MACvB6zC,UAAWpqB,EAAO8hD,UAClBj7C,aAAc7G,EAAO1c,QACrBgnC,aAAW,MAInB,IAAK,OACH,OACErxC,EAAAA,EAAAA,KAAC+lE,GAAe,CAAC12B,cAAY,EAAAnvC,UAC3BF,EAAAA,EAAAA,KAACm4C,GAAkB,CACjB76C,MAAOypB,EAAOzpB,MACdF,KAAMN,EAAMM,KACZg0C,eAAgBrqB,EAAOzpB,MACvB6zC,UAAWpqB,EAAO8hD,UAClBp2D,OAAO,SACPua,WAAYjG,EAAO8pB,SACnB33B,SAAO,EACP0U,aAAc7G,EAAO1c,QACrBqvC,YAAaxxB,EACbmpB,aAAcnpB,EACdA,WAAYA,MAIpB,IAAK,gBAgBL,IAAK,cACH,OACEloB,EAAAA,EAAAA,KAAC+lE,GAAe,CAAC12B,cAAY,EAAAnvC,UAC3BF,EAAAA,EAAAA,KAACm4C,GAAkB,CACjB76C,MAAOypB,EAAOzpB,MACdF,KAAMN,EAAMM,KACZg0C,eAAgBrqB,EAAOzpB,MACvB6zC,UAAWpqB,EAAO8hD,UAClBp2D,OAAO,SACPua,WAAYjG,EAAO8pB,SACnBjjB,aAAc7G,EAAO1c,QACrBqvC,YAAU,EACVrI,aAAW,MAInB,IAAK,SACH,OACErxC,EAAAA,EAAAA,KAACs6C,GAAc,CACbh9C,MAAOypB,EAAOzpB,MACdF,KAAMN,EAAMM,KACZg0C,eAAgBrqB,EAAOzpB,MACvB6zC,UAAWpqB,EAAO8hD,UAClBxiD,QAASU,EAAO8+C,QAAQ9+D,KAAK++D,IAAM,CAAQprE,MAAOorE,EAAO,GAAIxoE,MAAOwoE,EAAO,OAC3E94C,WAAYjG,EAAO8pB,SACnBjjB,aAAc7G,EAAO1c,QACrBqvC,YAAU,EACVrI,aAAW,IAGjB,IAAK,WACH,OACErxC,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB9+C,MAAOypB,EAAOzpB,MACdF,KAAMN,EAAMM,KACZg0C,eAAgBrqB,EAAOzpB,MACvB6zC,UAAWpqB,EAAO8hD,UAClBplE,KAAK,iBACLupB,WAAYjG,EAAO8pB,SACnBjjB,aAAc7G,EAAO1c,QACrBqvC,YAAU,EACVrI,aAAW,IAIjB,QACE,OAAOrxC,EAAAA,EAAAA,KAAA,OAAK6B,MAAO,CAAEvF,MAAO,OAAQ4D,SAAEkQ,KAAKa,UAAU8V,EAAQ,KAAM,KAEzE,CCzXO,SAASiiD,KACd,MAAQlE,SAAUU,IAAenI,EAAAA,GAAAA,KACjC,OAAOr9D,EAAAA,EAAAA,KAACipE,GAAuB,CAACzD,WAAYA,GAAc,IAC5D,CAEO,SAASyD,GAAwBnsE,GACtC,MAAM,UAAEssB,EAAS,MAAEpc,EAAK,OAAEyQ,EAAM,QAAE4I,GAAYg+C,MACxC,WAAEmB,GAAe1oE,EACjB4gB,EAAQD,EAAOjZ,MAAMkZ,GACzBA,EAAM0mD,WAAWz8C,MAAMm9C,GAAaA,EAAS3nE,KAAOqoE,MAEhDV,EAAWpnD,GAAO0mD,WAAW5/D,MAAMsgE,GAAaA,EAAS3nE,KAAOqoE,IAChEp7B,EAAM6rB,GACVxE,EAAM,kBAGFgU,GAAkBphE,EAAAA,EAAAA,UAAQ,KAC9B,MAAMohE,EAA4D,CAAC,EACnE,GAAIX,GAAYz+C,EACd,IAAK,MAAOja,EAAK1R,KAAUmP,OAAOwmD,QAAQhqC,GACpC49C,GAAuB17D,SAAS6D,IAChC04D,GAAUG,MAAM18D,SAAS7N,EAAMsqE,iBACjCS,EAAgBr5D,GAAO1R,GAI7B,OAAO+qE,CAAe,GACrB,CAACX,EAAUz+C,IAERi+C,EAAaJ,KAEnB,GAAIl3D,EAAO,OAAOhN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,IACnC,GAAIoc,IAAc1L,IAAUonD,EAAU,OAAO9kE,EAAAA,EAAAA,KAACkqD,GAAW,IACzD,GAAI9f,EAAIp9B,MAAO,OAAOhN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOo9B,EAAIp9B,QAC3C,GAAIo9B,EAAIhhB,YAAcghB,EAAIlqB,KAAM,OAAOlgB,EAAAA,EAAAA,KAACkqD,GAAW,IAEnD,MAAM7sD,EAAQinE,EAAW9/D,MAAMkZ,GAAUA,EAAMvgB,KAAOqoE,KAAapoE,KAEnE,OACEkI,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CAACpjD,MAAOA,GAASynE,EAAS1nE,QACrC4C,EAAAA,EAAAA,KAACmoE,GAAe,CAAC9hD,QAASo/C,EAAiBvlD,KAAMkqB,EAAIlqB,SAG3D,C,oJCdO,SAASgpD,GAAYC,GAC1B,OAAQA,GACN,IAAK,SACH,OAAOC,GAAAA,GACT,IAAK,YACH,OAAOC,GAAAA,GACT,IAAK,UAIL,QACE,OAAOC,GAAAA,GAHT,IAAK,MACH,OAAOC,GAAAA,GAIb,CAEO,MAAMC,GAA2DA,EACtEtyB,UACApxC,WACAkhB,eAEA,MAAM9G,EAAOg3B,EAAQuyB,UACfrkE,EAAO8a,GAAQgpD,GAAYhpD,EAAKipD,UAEhCO,GAAkBrlE,EAAAA,EAAAA,UAAQ,KAC9B,MAAMnB,EAAOgd,GA3CjB,SAAuBipD,GACrB,OAAQA,GACN,IAAK,QACH,OAAOnpE,EAAAA,EAAAA,KAAC4qC,GAAAA,GAAe,CAAC/oC,MAAO,CAAEic,KAAMvhB,KACzC,IAAK,YACH,OAAOyD,EAAAA,EAAAA,KAAC2pE,GAAAA,GAAS,CAAC9nE,MAAO,CAAEic,KAAMphB,KACnC,IAAK,eACH,OAAOsD,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,CAACj2B,MAAO,CAAEic,KAAMnhB,KACxC,IAAK,iBACH,OAAOqD,EAAAA,EAAAA,KAAC4pE,GAAAA,GAAe,CAAC/nE,MAAO,CAAEic,KAAMnhB,KACzC,IAAK,cACL,IAAK,mBACL,IAAK,iBACH,OAAOqD,EAAAA,EAAAA,KAACk3B,GAAAA,GAAqB,CAACr1B,MAAO,CAAEic,KAAMthB,KAC/C,QACE,OAAOwD,EAAAA,EAAAA,KAAC07D,GAAAA,GAAkB,CAAC75D,MAAO,CAAEic,KAAMnhB,KAEhD,CA0ByBktE,CAAc3pD,EAAK4pD,YACxC,IAAK5mE,EACH,OAAO,KAET,MAAM,EAAEmd,EAAC,EAAEpB,IAAM8qD,EAAAA,GAAAA,KAA+BC,GAAAA,IAAiBC,UAAW/yB,GAc5E,OAXEl3C,EAAAA,EAAAA,KAACkqE,GAAAA,IAAS,CACR7pD,EAAGA,EACHpB,EAAGA,EACHkrD,OAAQC,GAAAA,IACRC,gBAAc,EACd1jE,QAASb,EACT5C,MAAMlD,EAAAA,EAAAA,KAAA,KAAAE,SAAIgD,IACVd,UAAW8d,GAAM4pD,YAIL,GACf,CAAC5pD,EAAMg3B,EAASpxC,IAEnB,OACER,EAAAA,EAAAA,MAACglE,GAAAA,IAAW,CACVpzB,QAASA,EACTpxC,SAAUA,EACVkhB,SAAUA,EACVujD,uBAAwBzkE,EACxB0kE,eAAgB,GAAGtqE,SAAA,EAEnBF,EAAAA,EAAAA,KAAA,KAAGyb,UAAW,oBAAoBvb,SAC/BkF,IAAQpF,EAAAA,EAAAA,KAACoF,EAAI,CAACvD,MAAO,CAAEvF,MAAO,WAAa6Z,MAAO,GAAIG,OAAQ,OAEhEozD,IACW,EC9EZe,IAAQ/nE,EAAAA,EAAAA,IAAOgoE,GAAAA,GAAQ9nE,WAAA,CAAAC,YAAA,oBAAfH,CAAe,gPAYhBioE,GAASA,KACpB,MAAM,EAAEzjE,IAAMC,EAAAA,EAAAA,MACRyjE,EAAkB1B,GAAY,WAC9B2B,EAAoB3B,GAAY,aAChC4B,EAAiB5B,GAAY,UAC7B6B,EAAc7B,GAAY,OAE1B8B,EAAqBluE,IACzB,MAAM,MAAEQ,EAAK,KAAE4F,GAASpG,EACxB,OACEwI,EAAAA,EAAAA,MAAA,OAAApF,SAAA,EACEF,EAAAA,EAAAA,KAAA,QAAM6B,MAAO,CAAEE,YAAa,QAAS7B,SAAEgD,KACvClD,EAAAA,EAAAA,KAAA,QAAAE,SAAO5C,MACH,EAIV,OACE0C,EAAAA,EAAAA,KAACyqE,GAAK,CAAC,UAAQ,kBAAiBvqE,UAC9BF,EAAAA,EAAAA,KAACirE,GAAAA,EAAS,CAAC17C,SAAU,EAAErvB,UACrBF,EAAAA,EAAAA,KAACkrE,GAAAA,EAAa,CAAAhrE,UACZoF,EAAAA,EAAAA,MAAC4c,GAAAA,EAAe,CAAAhiB,SAAA,EACdoF,EAAAA,EAAAA,MAAC+b,GAAAA,EAAoB,CAAAnhB,SAAA,EACnBF,EAAAA,EAAAA,KAACuhB,GAAAA,EAAmB,CAAArhB,SAAEgH,EAAE,iBACxBlH,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,UACzBF,EAAAA,EAAAA,KAACgrE,EAAiB,CAAC1tE,MAAO4J,EAAE,WAAYhE,MAAMlD,EAAAA,EAAAA,KAAC4qE,EAAe,SAEhE5qE,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,UACzBF,EAAAA,EAAAA,KAACgrE,EAAiB,CAAC1tE,MAAO4J,EAAE,aAAchE,MAAMlD,EAAAA,EAAAA,KAAC6qE,EAAiB,SAEpE7qE,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,UACzBF,EAAAA,EAAAA,KAACgrE,EAAiB,CAAC1tE,MAAO4J,EAAE,UAAWhE,MAAMlD,EAAAA,EAAAA,KAAC8qE,EAAc,SAE9D9qE,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,UACzBF,EAAAA,EAAAA,KAACgrE,EAAiB,CAAC1tE,MAAO4J,EAAE,OAAQhE,MAAMlD,EAAAA,EAAAA,KAAC+qE,EAAW,YAG1DzlE,EAAAA,EAAAA,MAAC+b,GAAAA,EAAoB,CAAAnhB,SAAA,EACnBF,EAAAA,EAAAA,KAACuhB,GAAAA,EAAmB,CAAArhB,SAAEgH,EAAE,kBACxBlH,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,UACzBF,EAAAA,EAAAA,KAACgrE,EAAiB,CAChB1tE,MAAO4J,EAAE,SACThE,MAAMlD,EAAAA,EAAAA,KAAC4qC,GAAAA,GAAe,CAACtuC,MAAOC,SAGlCyD,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,UACzBF,EAAAA,EAAAA,KAACgrE,EAAiB,CAChB1tE,MAAO4J,EAAE,gBACThE,MAAMlD,EAAAA,EAAAA,KAACmrE,GAAAA,GAAc,CAAC7uE,MAAOK,SAGjCqD,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,UACzBF,EAAAA,EAAAA,KAACgrE,EAAiB,CAChB1tE,MAAO4J,EAAE,kBACThE,MAAMlD,EAAAA,EAAAA,KAAC4pE,GAAAA,GAAe,CAACttE,MAAOK,SAGlCqD,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,UACzBF,EAAAA,EAAAA,KAACgrE,EAAiB,CAAC1tE,MAAO4J,EAAE,aAAchE,MAAMlD,EAAAA,EAAAA,KAAC2pE,GAAAA,GAAS,CAACrtE,MAAOI,SAEpEsD,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,UACzBF,EAAAA,EAAAA,KAACgrE,EAAiB,CAChB1tE,MAAO4J,EAAE,SACThE,MAAMlD,EAAAA,EAAAA,KAACk3B,GAAAA,GAAqB,CAAC56B,MAAOE,YAI1C8I,EAAAA,EAAAA,MAAC+b,GAAAA,EAAoB,CAAAnhB,SAAA,EACnBF,EAAAA,EAAAA,KAACuhB,GAAAA,EAAmB,CAAArhB,SAAEgH,EAAE,kBACxBlH,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,UACzBF,EAAAA,EAAAA,KAACgrE,EAAiB,CAChB1tE,MAAO4J,EAAE,eACThE,MACElD,EAAAA,EAAAA,KAAA,OAAKmW,MAAM,KAAKG,OAAO,KAAK49C,MAAM,6BAA4Bh0D,UAC5DF,EAAAA,EAAAA,KAAA,QAAMorE,GAAG,IAAIC,GAAG,IAAIC,GAAG,KAAKC,GAAG,IAAInrD,OAAQzjB,EAAYwjB,YAAY,aAK3EngB,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,UACzBF,EAAAA,EAAAA,KAACgrE,EAAiB,CAChB1tE,MAAO4J,EAAE,UACThE,MACElD,EAAAA,EAAAA,KAAA,OAAKmW,MAAM,KAAKG,OAAO,KAAK49C,MAAM,6BAA4Bh0D,UAC5DF,EAAAA,EAAAA,KAAA,QACEorE,GAAG,IACHC,GAAG,IACHC,GAAG,KACHC,GAAG,IACHnrD,OAAQ7jB,EACR4jB,YAAY,IACZqrD,gBAAgB,aAM1BxrE,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,UACzBF,EAAAA,EAAAA,KAACgrE,EAAiB,CAChB1tE,MAAO4J,EAAE,YACThE,MACElD,EAAAA,EAAAA,KAAA,OAAKmW,MAAM,KAAKG,OAAO,KAAK49C,MAAM,6BAA4Bh0D,UAC5DF,EAAAA,EAAAA,KAAA,QACEorE,GAAG,IACHC,GAAG,IACHC,GAAG,KACHC,GAAG,IACHnrD,OAAQ5jB,EACR2jB,YAAY,IACZqrD,gBAAgB,uBAU5B,E,eC5IZ,MAAM30C,IAAan0B,EAAAA,EAAAA,IAAO+oE,GAAAA,GAAa7oE,WAAA,CAAAC,YAAA,qBAApBH,CAAoB,+DAKjCgpE,IAAehpE,EAAAA,EAAAA,IAAOipE,GAAAA,IAAe/oE,WAAA,CAAAC,YAAA,qBAAtBH,CAAsB,iCAK9BkpE,GAASA,EAAGllE,YAAW8iC,eAClC,MAAM,EAAEtiC,IAAMC,EAAAA,EAAAA,MAEd,OACE7B,EAAAA,EAAAA,MAACuxB,GAAU,CAACxzB,QAAQ,OAAOqD,UAAWA,EAAW,UAASA,EAAUxG,SAAA,EAClEF,EAAAA,EAAAA,KAAC0rE,GAAY,KACb1rE,EAAAA,EAAAA,KAAC8qC,GAAAA,EAAQ,CACPpwC,MAAO8uC,EACPqiC,gBAAiBC,GAAAA,GAAwBC,OACzC,aAAY7kE,CAAC,8BACbrF,MAAO,CAAEgd,OAAQ,WAEnB7e,EAAAA,EAAAA,KAACi1D,GAAAA,EAAW,CAACpzD,MAAO,CAAEgd,OAAQ,QAAS3e,UACrCF,EAAAA,EAAAA,KAAC8a,GAAAA,EAAI,CAAC7S,UAAW+jE,GAAAA,EAAa/rC,MAAOp+B,MAAO,CAAE+hC,WAAY,OAAQtnC,MAAO,SAAU4D,SAChFgH,CAAC,4DAGK,ECrCX+kE,GAAOvpE,EAAAA,GAAO0P,KAAIxP,WAAA,CAAAC,YAAA,qBAAXH,CAAW,uCAIjB,SAASwpE,GAAOpvE,GACrB,OAAOkD,EAAAA,EAAAA,KAACisE,GAAI,CAAA/rE,SAAEpD,EAAMoD,UACtB,CCNO,SAASisE,GAAuBrvE,GAKrC,OACEkD,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,OAAO4J,EAAAA,GAAAA,GAAE,iBAAiBhH,UACpCF,EAAAA,EAAAA,KAACqS,GAAY,CAAC3X,MAAOoC,EAAMpC,MAAO4X,OAAQxV,GAAOwV,OAAQ3L,QAAS7J,GAAO6J,WAG/E,C,oDCEO,SAASylE,GAAWtvE,GAMzB,MAAM,IAAQqK,EAAAA,EAAAA,MACRujC,EAAS5tC,EAAM4tC,OAEfptC,EAAQ+uE,GAAS3hC,EAAQxjC,GACzB5K,EAAQgwE,GAAS5hC,GACjBtlC,EAAOmnE,GAAQ7hC,GAErB,OACE1qC,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAM3R,EAAM0vE,UAAY,GAAKlvE,EAC7BhB,MAAOA,EACP4G,KAAMkC,GAAOpF,EAAAA,EAAAA,KAACoF,EAAI,IAAM,KACxB0C,GAAIhL,EAAMgL,GACV+N,aAAc/Y,EAAM+Y,cAG1B,CAEO,SAAS42D,GAAY3vE,GAC1B,MAAM,IAAQqK,EAAAA,EAAAA,MACRujC,EAAS5tC,EAAM4tC,QAAU,UACzBm0B,EAAS/hE,EAAM+hE,QAAU,GAEzBvhE,EAAQ+uE,GAAS3hC,EAAQxjC,GACzB5K,EAAQgwE,GAAS5hC,GACjBtlC,EAAOmnE,GAAQ7hC,GAErB,OACE1qC,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAC,UAASwqD,EAAQx7D,QAAQ,UAAU/G,MAAOA,EAAO4G,KAAMkC,GAAOpF,EAAAA,EAAAA,KAACoF,EAAI,IAAM,KAAKlF,SAClF5C,GAGP,CAEA,SAAS+uE,GAAS3hC,EAA4BxjC,GAC5C,YAAevF,IAAX+oC,EAA6BxjC,EAAE,WACO,CACxCwlE,SAAUxlE,EAAE,YACZylE,UAAWzlE,EAAE,aACb0lE,SAAU1lE,EAAE,YACZiyB,QAASjyB,EAAE,WACX2lE,SAAU3lE,EAAE,YACZ4lE,OAAQ5lE,EAAE,UACV,mBAAoBA,EAAE,uBACtB6lE,eAAgB7lE,EAAE,kBAClByvC,SAAUzvC,EAAE,YACZ8F,MAAO9F,EAAE,SACT8lE,OAAQ9lE,EAAE,UACV+lE,QAAS/lE,EAAE,WACXgmE,UAAWhmE,EAAE,aACbimE,IAAKjmE,EAAE,OACP,gBAAiBA,EAAE,iBACnBwoD,GAAIxoD,EAAE,MACN,eAAgBA,EAAE,qBAClBkmE,QAASlmE,EAAE,WACXmmE,aAAcnmE,EAAE,gBAChBuqC,MAAOvqC,EAAE,SACTomE,QAASpmE,EAAE,WACXqmE,QAASrmE,EAAE,WACXsmE,SAAUtmE,EAAE,YACZumE,SAAUvmE,EAAE,YACZwmE,QAASxmE,EAAE,WACX+jC,QAAS/jC,EAAE,WACXymE,WAAYzmE,EAAE,WACd0mE,SAAU1mE,EAAE,aACZ2mE,YAAa3mE,EAAE,eACf4mE,aAAc5mE,EAAE,gBAChB6mE,QAAS7mE,EAAE,WACX8mE,YAAa9mE,EAAE,eACf+mE,QAAS/mE,EAAE,WACX,kBAAmBA,EAAE,oBAGTwjC,IAAWA,CAC3B,CAEA,SAAS4hC,GAAS5hC,GAChB,OAAQA,GACN,IAAK,WACL,IAAK,YACL,IAAK,UACL,IAAK,KACL,IAAK,QACL,IAAK,aACL,IAAK,UACH,MAAO,QACT,IAAK,WACL,IAAK,SACL,IAAK,mBACL,IAAK,QACL,IAAK,SACL,IAAK,iBACL,IAAK,WACL,IAAK,cACL,IAAK,cACH,MAAO,MACT,IAAK,YACL,IAAK,MACL,IAAK,gBACL,IAAK,UACL,IAAK,UACL,IAAK,UACH,MAAO,OACT,IAAK,WACL,IAAK,UACL,IAAK,UACH,MAAO,SACT,IAAK,UACH,OAOF,QACE,MAAO,OAEb,CAEA,SAAS6hC,GAAQ7hC,GACf,OAAQA,GACN,IAAK,WACL,IAAK,YACL,IAAK,UACL,IAAK,KACL,IAAK,QACL,IAAK,aACL,IAAK,UACH,OAAOE,GAAAA,GACT,IAAK,SACL,IAAK,MACL,IAAK,gBACH,OAAOsjC,GAAAA,GACT,IAAK,WACL,IAAK,mBACL,IAAK,QACL,IAAK,SACL,IAAK,iBACL,IAAK,WACL,IAAK,cACL,IAAK,cACL,IAAK,eACL,IAAK,kBACH,OAAOh3C,GAAAA,GACT,IAAK,YACL,IAAK,UACL,IAAK,UACH,OAAOyyC,GAAAA,GACT,IAAK,UACH,OAAOrf,GACT,IAAK,WACL,IAAK,UACL,IAAK,UACH,OAAOhe,GAAAA,GACT,IAAK,WACH,OAAO6hC,GAAAA,GACT,IAAK,iBACL,IAAK,eACL,IAAK,UACH,OAAOvE,GAAAA,GACT,IAAK,WACL,IAAK,WACH,OAAOwE,GAAAA,GACT,IAAK,UACH,OAAOC,GAAAA,GACT,QACE,OAAO,KAEb,C,gBC9LO,MAAMC,GAAeC,GACrBA,EAGEA,EACJrxE,cACAsK,MAAM,KACNT,KAAKynE,GAASA,EAAKv+B,OAAO,GAAGC,cAAgBs+B,EAAK/1C,MAAM,KACxDhxB,KAAK,KANC,GAaEgnE,GAAgB/zE,GAC3B,0FAA0Fg0E,KACxFh0E,GCRJ,SAASi0E,GAAgB7xE,GACvB,MAAM,IAAQqK,EAAAA,EAAAA,OACR,WAAEynE,KAAe7tD,GAASjkB,EAC1B8nD,EAAaT,KAEnB,IAAI1gD,EACJ,IAAKmrE,EACH,OAAO,KAGPnrE,EADEmrE,EAAWC,MACN3nE,CAAC,QACqB,mBAApB0nE,EAAWE,KACb5nE,CAAC,iBACqB,QAApB0nE,EAAWE,MAAsC,QAApBF,EAAWE,KAC1CF,EAAWE,KAAK5+B,cAEhBo+B,GAAYM,EAAWE,MAAQ,IAExC,MAAMC,EACgB,UAApBH,EAAWE,MACVF,EAA0BtmB,QAC1BsmB,EAA0BtmB,QAAQymB,SAC9BH,EAA0BtmB,QAAQymB,cACnCptE,EAEN,OACE3B,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAC/X,MAAM,UAAWykB,EAAI7gB,UAC1BoF,EAAAA,EAAAA,MAACuC,EAAAA,GAAI,CAACC,GAAI88C,EAAWgW,GAASoU,kBAAmB,CAAE3qB,OAAQ,CAAElnD,GAAIyxE,EAAWzxE,MAAQ+C,SAAA,EAElFoF,EAAAA,EAAAA,MAAA,UAAApF,SAAA,CAASuD,EAAK,QACO,UAApBmrE,EAAWE,MAAoBC,EAC5B,GAAGH,EAAWxxE,UAAU2xE,EAASvwD,aACjCowD,EAAWxxE,SAIvB,CC3BO,SAAS6xE,GAAsCvuE,GAAoB,GACxE,MAAM,IAAQyG,EAAAA,EAAAA,MAad,OAZe9C,EAAAA,EAAAA,UACb,KAAM,CACJyc,OAAQ5Z,EAAE,MACV4b,KAAOosD,GAASA,EAAK/xE,GACrBwS,SAAU,EACVwT,MAAOziB,EAAW4hB,GAAkBW,YAASthB,EAC7Cm/B,KAAMpgC,EAAW,cAAWiB,EAC5B0hC,KAAM3iC,EAAW,cAAWiB,EAC5BqhB,MAAOtiB,EAAW+hB,GAAkBQ,YAASthB,KAE/C,CAACjB,EAAUwG,GAGf,CAEO,SAASioE,GAad9oD,GASA,MAAM,IAAE+9B,EAAG,QAAEz9C,EAAO,YAAE41D,EAAW,aAAE1mD,GAAiBwQ,GAAW,CAAC,GAC1D,EAAEnf,IAAMC,EAAAA,EAAAA,MAiCd,OAhCe9C,EAAAA,EAAAA,UACb,KAAM,CACJlH,GAAI,OACJ2jB,OAAQuF,GAASvF,QAAU5Z,EAAE,QAC7B4b,KAAOzG,IACLrc,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KACE4N,EAAKjf,MACLif,EAAK+yD,WACJ,mBAAoB/yD,EAAOA,EAAK8+C,gBAAgBkU,MAAMzT,cAAWj6D,GAEpEgG,SAAS,KACTG,GAAI+N,OAAelU,EAAYyiD,GAAKzpD,QAAQ,MAAO0hB,EAAKlf,GAAGqhB,YAC3D7X,SAAUkP,GAAgBlP,EAAU,IAAMA,IAAU0V,QAAQ1a,IAGhEvC,KAAMm9D,OAAc56D,EAAY0kB,GAASjnB,MAAQ,OACjD0hC,KAAM,OACNuC,KAAM,OACNyB,iBAAsCnjC,IAAzB0kB,GAASye,aAA4Bze,GAASye,eAE7D,CACEze,GAASvF,OACTuF,GAASjnB,KACTinB,GAASye,YACT59B,EACAq1D,EACA1mD,EACAuuC,EACAz9C,GAIN,CAEO,SAAS2oE,GAEdjpD,GACA,MAAM,IAAQlf,EAAAA,EAAAA,MAkBd,OAjBe9C,EAAAA,EAAAA,UACb,KAAM,CACJlH,GAAI,cACJ2jB,OAAQ5Z,EAAE,eACVzD,KAAM,cACN/I,MAAQ2hB,GAASA,EAAKT,YACtBuH,MACEkD,GAAW,oBAAqBA,EAC5BA,EAAQkpD,gBACRjtD,GAAkB1G,YACxBynB,KAAM,cACNvC,KAAM,cACN9d,MAAOP,GAAkBQ,OACzBM,UAAWb,GAAsBO,UAEnC,CAAC/b,EAAGmf,GAGR,CA6EO,SAASmpD,GAAiBnpD,GAM/B,MAAM,IAAQlf,EAAAA,EAAAA,MACR6zD,EAAerW,KA8DrB,OA/CItgD,EAAAA,EAAAA,UACF,KAAM,CACJlH,GAAI,UACJ2jB,OAAQ5Z,EAAE,WACV4b,KAAOzG,GACAA,EAAKg/C,SAAYh/C,EAAKozD,YAAepzD,EAAKqzD,aAAgBrzD,EAAKszD,cAGlE3vE,EAAAA,EAAAA,KAACqS,GAAY,CACX3X,MAAO2hB,EAAKg/C,SAAWh/C,EAAKozD,YAAcpzD,EAAKqzD,aAAerzD,EAAKszD,aACnEr9D,OACE,mBAAoB+J,EAAOA,EAAK8+C,gBAAgByU,YAAYhU,cAAWj6D,EAEzEgF,QACE0f,GAASxQ,gBACP,mBAAoBwG,IACwB,YAA9CA,EAAK8+C,gBAAgByU,YAAYhU,cAC7Bj6D,EACA,KACEq5D,EAAa30C,GAASwpD,mBAAqBjV,GAASiB,YAAa,CAC/DxX,OAAQ,CACNlnD,GAAIkf,EAAK8+C,gBAAgByU,YAAYzyE,KAEvC,KAjBL6C,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,IAuBXtF,KAAMinB,GAASk2C,iBAAc56D,EAAY0kB,GAASjnB,MAAQ,UAC1D2lC,qBAAsB,OACtB5hB,MAAO,SACP2d,KAAM,SACNuC,KAAM,YACNrgB,MAAO,SACPO,UAAW,SACXM,SAAUlB,GAAemB,QAE3B,CACE5c,EACAmf,GAASk2C,YACTl2C,GAASjnB,KACTinB,GAASxQ,aACTwQ,GAASwpD,kBACT7U,GAIN,CAEO,SAAS8U,GAAkBzpD,GAMhC,MAAM,IAAQlf,EAAAA,EAAAA,MACR6zD,EAAerW,KAqDrB,OA7CItgD,EAAAA,EAAAA,UACF,KAAM,CACJlH,GAAI,WACJ2jB,OAAQ5Z,EAAE,iBACV4b,KAAOzG,GACAA,EAAK0zD,UAAa1zD,EAAK2zD,aAE1BhwE,EAAAA,EAAAA,KAACqS,GAAY,CACX3X,MAAO2hB,EAAK0zD,SAAW1zD,EAAK0zD,SAAW1zD,EAAK2zD,YAC5C19D,OACE,mBAAoB+J,EAAOA,EAAK8+C,gBAAgB8U,aAAarU,cAAWj6D,EAE1EgF,QACE0f,GAASxQ,gBACP,mBAAoBwG,IACyB,YAA/CA,EAAK8+C,gBAAgB8U,aAAarU,cAC9Bj6D,EACA,IACEq5D,EAAa30C,GAASwpD,mBAAqBjV,GAASiB,YAAa,CAC/DxX,OAAQ,CACNlnD,GAAIkf,EAAK8+C,gBAAgB8U,aAAa9yE,SAfN6C,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,IAsBlDtF,KAAMinB,GAASk2C,iBAAc56D,EAAY0kB,GAASjnB,MAAQ,WAC1D2lC,qBAAsB,OACtB5hB,MAAO,SACP2d,KAAM,SACNuC,KAAM,YACNrgB,MAAO,SACPO,UAAW,SACXM,SAAUlB,GAAemB,QAE3B,CACE5c,EACAmf,GAASk2C,YACTl2C,GAASjnB,KACTinB,GAASxQ,aACTwQ,GAASwpD,kBACT7U,GAIN,CAEO,SAASkV,GACdC,EACA9pD,EAIAuH,GAEA,MAAM,EAAE1mB,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KA4BnB,OApBK9/C,EAAAA,EAAAA,UACH,KAAM,CACJyc,OAAQ5Z,EAAE,gBACV4b,KAAOzG,IACLrc,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAM4N,EAAK8+C,gBAAgBiV,cAAchzE,MAAQwwB,GAAgB,GACjE9lB,GAAI88C,EAAWurB,EAAiB,CAC9B9rB,OAAQ,CAAElnD,GAAIkf,EAAK8+C,gBAAgBiV,cAAcjzE,MAEnD0Y,gBACE+X,GAAiBvR,EAAK8+C,gBAAgBiV,cAAchzE,OAAcipB,GAASxQ,eAIjFnb,MAAQ2hB,GAASA,EAAK8+C,gBAAgBiV,cAAchzE,KACpDgC,KAAMinB,GAASk2C,iBAAc56D,EAAY,eACzC4hB,UAAW,YAEb,CAACqK,EAAcg3B,EAAYv+B,GAASxQ,aAAcwQ,GAASk2C,YAAa4T,EAAiBjpE,GAG7F,CAyDO,SAASmpE,GAWdC,EACAjqD,GAMA,MAAM,EAAEnf,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KA4BnB,OA3Be9/C,EAAAA,EAAAA,UACb,KAAM,CACJyc,OAAQ5Z,EAAE,aACV4b,KAAOzG,IACLrc,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAM4N,EAAK8+C,gBAAgBoV,WAAWnzE,KACtC0K,GAAI88C,EAAW0rB,EAAuB,CACpCjsB,OAAQ,CACNlnD,GAAIkf,EAAK8+C,gBAAgBoV,WAAWpzE,GACpCqzE,eAAgBC,GAAkBp0D,EAAK8+C,gBAAgBoV,WAAWzB,MAAQ,OAG9Ej5D,aAAcwQ,GAASxQ,eAG3Bnb,MAAQ2hB,GAASA,EAAK8+C,gBAAgBoV,WAAWnzE,KACjDgC,KAAMinB,GAASk2C,iBAAc56D,EAAY,YACzCwhB,MACEkD,GAAW,oBAAqBA,EAC5BA,EAAQkpD,gBACRjtD,GAAkBc,SACxB0d,KAAM,SACNuC,KAAM,SACNrgB,MAAOP,GAAkBQ,UAE3B,CAAC2hC,EAAYv+B,EAASiqD,EAAuBppE,GAGjD,CAEO,SAASwpE,GACdC,EACAtqD,GAMA,MAAM,EAAEnf,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KAqCnB,OA7BK9/C,EAAAA,EAAAA,UACH,KAAM,CACJyc,OAAQ5Z,EAAE,WACV4b,KAAOzG,IACLrc,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAM4N,EAAK8+C,gBAAgByV,SAASxzE,KACpC0K,GAAI88C,EAAW+rB,EAAqB,CAClCtsB,OAAQ,CAAElnD,GAAIkf,EAAK8+C,gBAAgByV,SAASzzE,MAE9C0Y,aAAcwQ,GAASxQ,eAG3Bnb,MAAQ2hB,GAASA,EAAK8+C,gBAAgByV,SAASxzE,KAC/CgC,KAAMinB,GAASk2C,iBAAc56D,EAAY,UACzCwhB,MAAOb,GAAkBc,SACzB0d,KAAM,SACNuC,KAAM,SACNrgB,MAAOP,GAAkBQ,OACzBM,UAAW8C,GAASwqD,sBAAmBlvE,KAEzC,CACEijD,EACAv+B,GAASwqD,gBACTxqD,GAASxQ,aACTwQ,GAASk2C,YACToU,EACAzpE,GAIN,CAEO,SAAS4pE,GAAgCzqD,GAQ9C,MAAM,aAAE0qD,GAAiB1qD,GAAW,CAAC,GAC/B,EAAEnf,IAAMC,EAAAA,EAAAA,MAYd,OAXgC9C,EAAAA,EAAAA,UAC9B,KAAM,CACJyc,OAAQ5Z,EAAE,QACVxM,MAAQ2hB,GAAS00D,EAAa10D,GAC9B5Y,KAAM,OACNq9B,KAAM,WACNuC,KAAM,WACNjkC,KAAMinB,GAASk2C,iBAAc56D,EAAY0kB,GAASjnB,QAEpD,CAAC8H,EAAG6pE,EAAc1qD,EAAQk2C,YAAal2C,EAAQjnB,MAGnD,CAoCA,MAAMqxE,GAA+C,CACnD,GAAI,YACJO,MAAO,kBACPC,YAAa,yBCrkBR,SAASC,KACd,MAAM,EAAEhqE,IAAMC,EAAAA,EAAAA,MACd,MAAO,CACLgqE,OAAQjqE,EACN,6NAEFwpC,QAASxpC,EACP,8IAEFkqE,UAAWlqE,EACT,8KAEFmqE,IAAKnqE,EACH,uHAGN,C,gBCZO,SAASoqE,GAAoBx0E,GAClC,MAAM,SAAEy0E,GAAaz0E,GACf,cAAE00E,EAAa,0BAAEC,GAA8BC,GAAmBhkC,OAAO6jC,EAASp0E,KAClFw0E,EAA8C,IAA1BJ,EAASK,cAAgD,IAA1BL,EAASM,cAC5D,cAAE9f,GAAkBJ,KAE1B,OACErsD,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAA,OAAK,UAAQ,eAAcE,UAAEgH,EAAAA,GAAAA,GAAE,GAAGsqE,cAClCxxE,EAAAA,EAAAA,KAAC8xE,GAAAA,EAAM,CACLC,0BAAwB,EACxBp+D,IAAK49D,EAASM,aACdhyC,IAAK0xC,EAASK,aACdl3E,MAAO82E,EACPlvE,SAAUA,CAACkjB,EAA6B9qB,KACjC+2E,EAA0B/2E,EAChC,EACDqG,cAEKgxD,GAAegO,cAAgBhO,GAAeigB,oBAC/CT,EAASjzC,SACTqzC,OAMZ,CC9BO,SAASM,GAAYn1E,GAC1B,OACEkD,EAAAA,EAAAA,KAAA,QACE6B,MAAO,CACLvF,MAAOD,EAAmB,QAC1B6D,SAEDpD,EAAMoD,UAGb,CCQO,SAASgyE,GACd7rD,EACA8rD,GAEA,MAAM,EAAEjrE,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KAEfytB,EAEFlB,KAEEmB,GAAYv2E,EAAAA,EAAAA,cACfy1E,GACCvW,EAAaJ,GAAS0X,gBAAiB,CACrCjuB,OAAQ,CAAElnD,GAAIo0E,EAASp0E,OAE3B,CAAC69D,IAGG+V,GAAej1E,EAAAA,EAAAA,cAClBy1E,IAEGvxE,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CAACC,QAASmwE,EAAWb,EAASgB,WAAWryE,UAC/CF,EAAAA,EAAAA,KAACksE,GAAM,CAAAhsE,SAAE,GAAG8vC,GAAsBuhC,EAASgB,kBAIjD,CAACH,IAGG/vC,EAAa8sC,GAAwB,IACtC9oD,EACH1f,QAASwrE,GAAeE,EACxBvxD,OAAQ5Z,EAAE,QACV9H,KAAM,aAGFozE,EAAgBhD,GAAiBnpD,GACjCosD,EAAiB3C,GAAkBzpD,GAqFzC,OAnFqBhiB,EAAAA,EAAAA,UACnB,IAAM,CACJg+B,EACA,CACEvhB,OAAQ5Z,EAAE,UACV4b,KAAOyuD,IACLvxE,EAAAA,EAAAA,KAACosE,GAAU,CAAC1hC,OAAQ6mC,EAASmB,qBAAuB,UAAYnB,EAASoB,aAE3EvzE,KAAM,SACN4jB,MAAO,UAET,CACEF,KAAMiuD,EACN3xE,KAAM,YACN0hB,OAAQ5Z,EAAE,aACV45B,KAAM,WACNuC,KAAM,YAER,CACEviB,OAAQ5Z,EAAE,uBACV4b,KAAOyuD,GACiBqB,GACpBrB,EAASM,aACTN,EAASK,aACT9jE,WAAWyjE,EAASsB,sBAEF,GACX7yE,EAAAA,EAAAA,KAACsxE,GAAmB,CAACC,SAAUA,IAER,QAAvBA,EAASgB,WACdvyE,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CACN8wE,sBAAsB,EACtB7wE,QAASiF,EAAE,yCAAyChH,UAEpDF,EAAAA,EAAAA,KAACksE,GAAM,CAAAhsE,SAAEgH,EAAE,oBAGblH,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CAAC8wE,sBAAsB,EAAM7wE,QAASiF,EAAE,oCAAoChH,UAClFF,EAAAA,EAAAA,KAACksE,GAAM,CAAAhsE,SAAEgH,EAAE,mBAKnB8b,MAAOP,GAAkBQ,QAE3B,CACEnC,OAAQ5Z,EAAE,iBACV4b,KAAOyuD,GACkB,QAAvBA,EAASgB,eAAsB5wE,EAAY4vE,EAASjzC,SAClDt+B,EAAAA,EAAAA,KAAC8qC,GAAAA,EAAQ,CAACpwC,MAAOiT,KAAK4Q,MAAM,IAAMgzD,EAASwB,+BAE3C/yE,EAAAA,EAAAA,KAACiyE,GAAW,CAAA/xE,SAAEgH,EAAE,iBAEpBm8B,KAAM,YACNrgB,MAAO,UAET,CACElC,OAAQ5Z,EAAE,gBACV4b,KAAOyuD,GAAaA,EAASyB,aAC7B7vD,MAAOb,GAAkBc,UAE3B,CACEtC,OAAQ5Z,EAAE,cACV4b,KAAOyuD,GAAaA,EAAS0B,WAC7B9vD,MAAOb,GAAkBc,UAE3B,CACEtC,OAAQ5Z,EAAE,UACV4b,KAAOyuD,GAAaA,EAAS2B,SAAUlzE,EAAAA,EAAAA,KAACsN,GAAS,CAACC,MAAOgkE,EAAS2B,SAClE9zE,KAAM,SACNikC,KAAM,YACNlgB,MAAOb,GAAkBc,UAE3B,CACEtC,OAAQ5Z,EAAE,eACV4b,KAAOyuD,GAAcA,EAAS4B,kBAAoBjsE,EAAE,QAAUA,EAAE,UAChEic,MAAOb,GAAkBc,UAE3BovD,EACAC,IAEF,CAACvrE,EAAGsrE,EAAenwC,EAAY0uC,EAAc0B,GAGjD,CCvIO,SAASW,GAAmBlqC,GACjC,MAAMhH,EAAegwC,GAAoB,CAAEr8D,cAAc,IACnDg2B,GAAsBxnC,EAAAA,EAAAA,UAC1B,IAAM69B,EAAa/jC,QAAQke,GAAS,CAAC,OAAQ,aAAa9T,SAAS8T,EAAKyE,WACxE,CAACohB,KAGG,EAAEh7B,IAAMC,EAAAA,EAAAA,MACRksE,EAAyBlE,GAAc,CAAEt5D,cAAc,EAAM0mD,aAAa,IAC1EvzB,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAACgvE,IAAyB,CAACA,IACzDzT,EAAaH,KAuBnB,OAtByB6T,IACvB1T,EAAW,CACTviE,MAAO6J,EAAE,+BAAgC,CAAEoV,MAAOg3D,EAAU9vE,SAC5DzF,YACuB,IAArBu1E,EAAU9vE,OACN0D,EAAE,uDACFA,EAAE,kEAAmE,CACnEoV,MAAOg3D,EAAU9vE,SAEzBwoC,iBAAkB9kC,EAAE,kBAAmB,CAAEoV,MAAOg3D,EAAU9vE,SAC1Ds1B,MAAOw6C,EAAUl0E,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QACzD27B,MAAO62B,GACPtoD,UAAU,EACVukC,sBACA7C,gBACAE,aACAD,SAAWqqC,GACT9jB,GAAaiC,EAAM,cAAc6hB,EAAUn2E,GAAGqhB,cAAe,CAC3Dm0D,WAAY,oBAEhB,CAGN,C,gBCnBO,SAASY,GAAsBrqC,GACpC,MAAMsqC,EAAiDC,GAA2BvqC,GAC5EwqC,EAA8CC,GAA2BzqC,GAAY,GACrF0qC,EAA+CC,KAErD,OAAOxvE,EAAAA,EAAAA,UACL,IAAM,CAACmvE,EAAyBE,EAAsBE,IACtD,CAACJ,EAAyBE,EAAsBE,GAEpD,CAEO,SAASH,GAA2BvqC,GACzC,MAAM,IAAQ/hC,EAAAA,EAAAA,OACR,cAAE4qD,GAAkBJ,KAEpBmiB,GAAgFh4E,EAAAA,EAAAA,cACpF4S,MAAO6iE,EAAUjzC,WACTkxB,GAAaiC,EAAM,cAAc8f,EAASp0E,GAAGqhB,cAAe,CAAE8f,YACpE4K,EAAW,CAACqoC,GAAU,GAExB,CAACroC,IAEG6qC,EAAahiB,GAAegO,cAAgBhO,GAAeigB,kBAEjE,OAAO3tE,EAAAA,EAAAA,UACL,KAAM,CACJZ,KAAMrJ,EAAe+H,OACrBC,UAAY4xE,GACE9sE,EAAZ8sE,EAAc,4BAAiC,4BACjDxzE,UAAWnG,EAAoBsG,OAC/B8J,UAAU,EACVlI,SAAUA,CAACgvE,EAAUjzC,IAAYw1C,EAAqBvC,EAAUjzC,GAChE98B,WAAa+vE,GAAaA,EAASjzC,QACnChhC,MAAO4J,EAAE,oBACTxF,SAAUwF,EAAE,qBACZtF,iBAAiB,EACjBlB,SAAW6wE,GAAoC,QAAvBA,EAASgB,UACjCxxE,WAAakzE,GACVF,OAIGpyE,EAHAuF,EACE,0IAIV,CAACA,EAAG4sE,EAAsBC,GAE9B,CAEO,SAASJ,GACdzqC,EACAxoC,GAEA,MAAM,EAAEwG,IAAMC,EAAAA,EAAAA,MAERiH,EAAerD,MACf,cAAEgnD,GAAkBJ,KAE1B,OAAOttD,EAAAA,EAAAA,UACL,KAAM,CACJZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/B0C,QAASuB,EAAAA,GAAcyD,UACvBoC,UAAU,EACV1J,WAAawwE,GACX2C,GAAkC3C,EAAUrqE,IAC5CitE,GAAqCpiB,EAAe7qD,IACpDktE,GAAyC7C,EAAUrqE,IACnDmtE,GAAiC9C,EAAUrqE,GAC7CxG,SAAUA,IAAMA,EAChBwC,KAAMoxE,GAAAA,GACNh3E,MAAO4J,EAAE,oBACTP,QAAU4qE,IACR,MAAM1xE,EAAoB,CACxBwD,QAAS,UACThG,MAAO6J,EAAE,2BAA2BqqE,EAASnC,aAC7C7jE,QAAS,KAEXgkD,GAAYkC,EAAM,cAAc8f,EAASp0E,GAAGqhB,2BAA4B,CAAC,GACtEkN,MAAK,KACJtd,EAAazD,SAAS9K,GACtBqpC,EAAW,CAACqoC,GAAU,IAEvBviE,OAAOhC,IACNoB,EAAazD,SAAS,CACpBtH,QAAS,SACThG,MAAO6J,EAAE,kCACThH,SAAU8M,aAAiBsX,OAAStX,EAAMK,SAC1C,GACF,KAGR,CAACnG,EAAGgiC,EAAY96B,EAAc2jD,EAAerxD,GAEjD,CAEO,SAASmzE,GAAyBxtD,GACvC,MAAM,IAAQlf,EAAAA,EAAAA,MACR6zD,EAAerW,MACf,cAAEoN,GAAkBJ,MACpB,KAAEzxC,GAAS+1C,GAAiBxE,EAAM,qBAClCsiB,EAAahiB,GAAegO,cAAgBhO,GAAeigB,kBAC3DuC,EAAQr0D,GAAMs0D,OAEpB,OAAOnwE,EAAAA,EAAAA,UACL,KAAM,CACJZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAM84D,GAAAA,GACNvxD,SAAU4b,GAAS5b,WAAY,EAC/B/J,SAAUA,IAAM2lB,GAAS3lB,WAAY,EACrCpD,MAAO4J,EAAE,iBACTP,QAAU4qE,GAAavW,EAAaJ,GAAS6Z,aAAc,CAAEpwB,OAAQ,CAAElnD,GAAIo0E,EAASp0E,MACpF4D,WAAakzE,GACVF,GAAeQ,OAIZ5yE,EAHAuF,EACE,0IAIV,CAACA,EAAG8zD,EAAcuZ,EAAOR,EAAY1tD,GAAS3lB,SAAU2lB,GAAS5b,UAErE,CCzHO,SAASinE,GAAmBgD,GACjC,MAAM,QAAEnf,EAASr1C,KAAMy0D,GAAgBte,GAAqB5E,EAAM,cAAeijB,IAE1EnD,EAAUqD,IAAel5E,EAAAA,EAAAA,UAAmBi5E,IAC5CE,EAAgBC,IAAqBp5E,EAAAA,EAAAA,aACrC81E,EAAeuD,IAAoBr5E,EAAAA,EAAAA,UAAS,GAuDnD,OArDAK,EAAAA,EAAAA,YAAU,KACqB2S,WAC3B,MAAM6iE,QAAiBliB,GAAqBoC,EAAM,cAAcijB,MAC1DG,QAAuBxlB,GAC3BoC,EAAM,cAAcijB,sBAEtBE,EAAYrD,GACZuD,EAAkBD,GAClBE,EACEnC,GACErB,EAASM,aACTN,EAASK,aACT9jE,WAAWyjE,EAASsB,sBAEvB,EAGEmC,EAAsB,GAC1B,CAACN,IAmCG,CACLG,iBACArD,gBACAsC,qBApC2BplE,gBACrB8gD,GAAuBiC,EAAM,cAAc8f,EAASp0E,GAAGqhB,cAAe,CAC1E8f,YAEFi3B,GAAS,EAiCTkc,2BArBgCwD,EAAAA,GAAAA,IAAUvmE,UAC1C,MAEMwmE,GAAmC,EAAH,IAAPx6E,GAR/BmlC,EAMoBlyB,KAAKkyB,IAAI0xC,EAASM,aAAcN,EAASK,iBACzCjkE,KAAKgG,IAAI49D,EAASM,aAAcN,EAASK,cAJI/xC,GAK3B,EAZxC,IAIEA,EASA,MAAMguB,QAAiB2B,GAAuBiC,EAAM,cAAc8f,EAASp0E,GAAGqhB,cAAe,CAC3Fq0D,oBAAqBqC,EAAYlnE,QAAQ,KAE3C+mE,EACEnC,GACE/kB,EAASgkB,aACThkB,EAAS+jB,aACT9jE,WAAW+/C,EAASglB,uBAGxBtd,GAAS,GACR,KAQL,CAEO,SAAS4f,KACd,MAAM9wB,GAASgZ,EAAAA,GAAAA,MACPn9C,KAAMqxD,EAAQ,QAAEhc,GAAYc,GAAqB5E,EAAM,aAAcpN,EAAOlnD,KAC9E,KAAE+iB,GAAS+1C,GAAiBxE,EAAM,sBAClC,cAAEM,GAAkBJ,KAEpB4iB,EAAQr0D,GAAMs0D,OAEdY,EAAoB7D,GAAU/U,UAAW,EAEzC97D,GACM,IAAV6zE,IACExiB,GAAegO,eAAiBhO,GAAeigB,mBACjDoD,EAEIC,EAAqBxB,GAAyB,CAClDnzE,SAAUA,EACV+J,UAAU,IAEN6qE,EAYD,SAAqC50E,GAC1C,MAAM,IAAQyG,EAAAA,EAAAA,MACR6zD,EAAerW,KACf4wB,EAAkBnC,IAAoBoC,GAC1Cxa,EAAaJ,GAAS6a,cAElB,KAAEv1D,GAAS+1C,GAAiBxE,EAAM,qBAClC8iB,EAAQr0D,GAAMs0D,QACd,cAAEziB,GAAkBJ,KAE1B,OAAOttD,EAAAA,EAAAA,UACL,KAAM,CACJZ,KAAMrJ,EAAemL,OACrB7E,SAAUA,IAAMA,EAChB+J,UAAU,EACVjK,UAAWnG,EAAoBsG,OAC/BuC,KAAM0mE,GAAAA,GACNtsE,MAAO4J,EAAE,mBACTP,QAAU4qE,GAAuBgE,EAAgB,CAAChE,IAClDxwE,WAAawwE,GAAamE,GAAsB,CAACnE,GAAWrqE,EAAG6qD,EAAewiB,IAAS,GACvFjtE,UAAU,KAEZ,CAACJ,EAAGquE,EAAiBhB,EAAOxiB,EAAerxD,GAE/C,CApC+Bi1E,CAA4Bj1E,GACnDk1E,EAAuBjC,GAC3Bpe,EACwB,cAAxBgc,GAAUgB,WAGZ,OAAOluE,EAAAA,EAAAA,UACL,IAAM,CAACgxE,EAAoBC,EAAsBM,IACjD,CAACP,EAAoBC,EAAsBM,GAE/C,CA4BO,SAASF,GACdpC,EACApsE,EACA6qD,EACAwiB,GAEA,MAAMsB,EAAoB9jB,GAAegO,cAAgBhO,GAAeigB,kBACxE,OAAyB,IAArBsB,EAAU9vE,OACL0D,EAAE,2CACCqtE,EAEAsB,EAEDvC,EAAU9uE,MAAM+sE,IAuD7B,SAA4BA,GAC1B,MAA2B,cAAvBA,EAASgB,WAAoD,QAAvBhB,EAASgB,SAIrD,CA5DqDuD,CAAmBvE,KAC7DrqE,EACL,yFAGG,GANEA,EAAE,2DAFFA,EAAE,oDASb,CAEO,SAASmtE,GACd9C,EACArqE,GAEA,OAAIqqE,EAASmB,qBACJxrE,EACL,0GAEG,EACT,CAEO,SAASgtE,GACd3C,EACArqE,GAEA,MAA2B,cAAvBqqE,EAASgB,UACJrrE,EAAE,yDACJ,EACT,CAEO,SAASktE,GACd7C,EACArqE,GAEA,OAAIqqE,GAAU/U,QAAgBt1D,EAAE,sDACzB,EACT,CAEO,SAASitE,GACdpiB,EACA7qD,GAEA,OAAK6qD,GAAegO,cAAiBhO,GAAeigB,kBAE7C,GADE9qE,EAAE,2EAEb,CAEO,SAAS0rE,GACdmD,EACAC,EACAC,GAEA,MAAMC,EAAcvoE,KAAKkyB,IAAIk2C,EAAaC,GACpCG,EAAcxoE,KAAKgG,IAAIoiE,EAAaC,GAC1C,OAAOroE,KAAKC,MAAMsoE,GAAeC,EAAcD,GAAeD,EAChE,C,oDCvMO,SAASG,GAAqBt5E,GAUnC,MAAM,MACJpC,EAAK,MACL4C,EAAK,SACL6jB,EAAQ,UACRG,GAAY,EAAI,oBAChB+0D,GAAsB,EAAI,eAC1BC,GAAiB,EAAI,QACrBp9D,GAAU,GACRpc,GAEE,GAAEK,IAAOkgE,EAAAA,GAAAA,MACT,EAAEn2D,IAAMC,EAAAA,EAAAA,OACPovE,EAAQC,IAAa96E,EAAAA,EAAAA,WAAS,GAE/Bi9C,EADW9oC,KACgBiB,kBAAoB,QAC9C0gC,EAAUoH,IAAel9C,EAAAA,EAAAA,UAA8Bi9C,IACvD89B,EAAiBC,IAAsBh7E,EAAAA,EAAAA,UAAiBhB,IACzD,YAAEwT,EAAW,iBAAEM,GAAqBP,MAO1CgK,EAAAA,EAAAA,kBAAgB,KACd,GAAIq+D,EAAgB,CAClB,MAAMK,EAAgB39B,GAAeE,GAAcx+C,EAAOwe,GAAUs4B,GACpEklC,EAAmBC,EACrB,IACC,CAACnlC,EAAU8kC,EAAgB57E,EAAOwe,IAErC,MAAM5V,EACJ+yE,GAAuBC,GACrBhxE,EAAAA,EAAAA,MAAC+nC,EAAAA,SAAc,CAAAntC,SAAA,CACZm2E,IACCr2E,EAAAA,EAAAA,KAAC42E,GAAAA,EAAe,CAAA12E,UACdF,EAAAA,EAAAA,KAAC62E,GAAAA,EAAmB,CAClB15E,GAAG,oBACH25E,OAAO,eACP,aAAW,oBACXnwE,QAAU2J,IApBpB9B,EAoBqC9T,QAnBrC87E,EAAUtoE,IAoBA6oE,UAAWR,EAAS,KAAO,IAC3B9gE,SAAS,QACTpS,QAAQ,QACR2zE,gBAAiBA,IAAMR,GAAU,GAAOt2E,SAE9BgH,EAATqvE,EAAW,oCAAyC,yBAI1DD,IACCt2E,EAAAA,EAAAA,KAAC42E,GAAAA,EAAe,CAAA12E,UACdoF,EAAAA,EAAAA,MAACqvB,GAAAA,EAAW,CAACla,WAAS,EAAAva,SAAA,EACpBF,EAAAA,EAAAA,KAAC80B,GAAAA,EAAe,CACd33B,GAAG,cACH,UAAQ,cACR,aAAY+J,EAAE,kBACdgjB,WAAyB,SAAbsnB,EACZ/iC,KAAK,OACLhL,KAAK,SACLnB,SAAUA,IAAMs2C,EAAY,WAE9B54C,EAAAA,EAAAA,KAAC80B,GAAAA,EAAe,CACd33B,GAAG,cACH,UAAQ,cACR,aAAY+J,EAAE,kBACdgjB,WAAyB,SAAbsnB,EACZ/iC,KAAK,OACLhL,KAAK,SACLnB,SAAUA,IAAMs2C,EAAY,kBAMpC,KACN,OACE54C,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAOA,GAAS4J,EAAE,aAClBia,SAAUA,EACVC,QAAStkB,GAAOskB,QAChBE,UAAWA,EAAUphB,UAErBF,EAAAA,EAAAA,KAACi3E,GAAAA,EAAS,CAAC95E,GAAIA,EAAImG,QAASA,EAAQpD,UAClCF,EAAAA,EAAAA,KAACk3E,GAAAA,EAAa,CAAC,UAAS,mBAAmBh3E,SAAEu2E,OAIrD,CCxGO,SAASU,GAAer6E,GAC7B,MAAM,IAAQqK,EAAAA,EAAAA,OACR,SAAEoqE,GAAaz0E,GACf,qBAAEg3E,GAAyBpC,GAAmBhkC,OAAO5wC,EAAMy0E,SAASp0E,MACpE,cAAE40D,GAAkBJ,KAEpBrxD,EAA4C,CAChDmD,KAAMrJ,EAAe+H,OACrBI,SAAUA,KACHuxE,GAAsBvC,GAAUjzC,QAAQ,EAE/C98B,WAAYA,IAAM+vE,GAAUjzC,QAC5Bv9B,WAAakzE,GACVliB,GAAegO,kBAEZp+D,EADAuF,EAAE,uDAER9E,UAAY4xE,GAAoC9sE,EAAZ8sE,EAAc,UAAe,YACjExzE,UAAWnG,EAAoBsG,OAC/BrD,MAAO,IAGT,OAAO0C,EAAAA,EAAAA,KAACiB,EAAgB,CAACX,OAAQA,EAAQC,aAAcgxE,GACzD,CCDO,SAASe,KACd,MAAMjuB,GAASgZ,EAAAA,GAAAA,MACT,GAAElgE,EAAE,YAAEi6E,GAAgB/yB,GACtB,MACJr3C,EACAkT,KAAMqxD,EAAQ,QACdhc,GACEc,GAAqB5E,EAAM,aAAc2lB,GAAej6E,IACtD,eAAE03E,EAAc,cAAErD,GAAkBE,GAAmB0F,GAAgBj6E,GAC7E,OAAI6P,GAAchN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,IACpDgc,GAEHvxE,EAAAA,EAAAA,KAACmhD,GAAU,CAAAjhD,SACRqxE,GACCvxE,EAAAA,EAAAA,KAACq3E,GAAkB,CACjB9F,SAAUA,EACVsD,eAAgBA,EAChBrD,cAAeA,KAGjBxxE,EAAAA,EAAAA,KAACoY,GAAAA,GAAW,CAAC/U,QAAQ,QAAOnD,UAC1BF,EAAAA,EAAAA,KAACm2B,GAAAA,EAAQ,SAXKn2B,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,GAgBrD,CAEO,SAASktB,GAAmBv6E,GAMjC,MAAM,IAAQqK,EAAAA,EAAAA,MACR6zD,EAAerW,KACfC,EAAaT,MACb,SAAEotB,EAAQ,eAAEsD,EAAc,cAAErD,GAAkB10E,EAC9Cs1E,EAAyClB,KAE/C,OACE5rE,EAAAA,EAAAA,MAACoc,GAAW,CAACK,gBAAiBjlB,EAAMilB,gBAAiBK,eAAa,EAAAliB,SAAA,EAChEF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,QAAS,UAAQ,OAAMhH,UAC1CF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLlC,QAAQ,OACR+P,UAAQ,EACRzM,QAASA,IACPq0D,EAAaJ,GAAS0X,gBAAiB,CACrCjuB,OAAQ,CAAElnD,GAAIo0E,EAASp0E,MAE1B+C,SAEAqxE,EAASnC,cAGdpvE,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,aAAc,UAAQ,YAAWhH,UACpDF,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CAACC,QAASmwE,EAAWb,EAASgB,WAAWryE,UAC/CF,EAAAA,EAAAA,KAACksE,GAAM,CAAAhsE,SAAE,GAAG8vC,GAAsBuhC,EAASgB,oBAG/CvyE,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,UAAW,UAAQ,cAAahH,UACnDF,EAAAA,EAAAA,KAACosE,GAAU,CAAC1hC,OAAQ6mC,EAASmB,qBAAuB,UAAYnB,EAASoB,eAE1EkC,GAAkBA,EAAe3iB,QAAQ1uD,OAAS,IACjDxD,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,mBAAoB,UAAQ,kBAAiBhH,SAC/D20E,EAAe3iB,QAAQnrD,KAAKwqE,IAC3BvxE,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAC/X,MAAM,OAAOuF,MAAO,CAAEE,YAAa,QAAS7B,UACjDF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS0c,qBAAsB,CAC5CjzB,OAAQ,CAAElnD,GAAIo0E,EAASp0E,MACtB+C,SAEFqxE,EAASn0E,QAN2Cm0E,EAASp0E,SAYtEo0E,EAAS/U,SAAW+U,EAASgG,SAASC,iBACtCx3E,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,CAAC,kBAAmB,UAAQ,kBAAiBhH,UAC9DF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLhK,KAAK,KACL,aAAY2L,CAAC,kBACbe,UAAU,IACVovC,SAAU,GAAGk6B,EAASgG,SAASC,iBAC/BzvE,KAAM,GAAGwpE,EAASgG,SAASC,iBAC3B77C,OAAO,SACPt4B,QAAQ,YACRo0E,IAAI,sBAAqBv3E,UAEzBF,EAAAA,EAAAA,KAAC+5C,GAAAA,GAAY,QAIlBw3B,EAASmG,gBACR13E,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,CAAC,gBAAiB,UAAQ,gBAAehH,SACzDqxE,EAASmG,iBAGd13E,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,iBAAkB,UAAQ,gBAAehH,SAC3DqxE,EAASjzC,SACRt+B,EAAAA,EAAAA,KAAC8qC,GAAAA,EAAQ,CAACpwC,MAAOiT,KAAK4Q,MAAM,IAAMgzD,EAASwB,+BAE3C/yE,EAAAA,EAAAA,KAACiyE,GAAW,CAAA/xE,SAAEgH,EAAE,oBAGpBlH,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,gBAAiB,UAAQ,eAAchH,SACzDqxE,EAASyB,aAAax0D,cAEzBxe,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,cAAe,UAAQ,aAAYhH,SACrDqxE,EAAS0B,WAAWz0D,cAEvBxe,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,eAAgB,UAAQ,cAAahH,SACvDqxE,EAAS4B,kBAAoBjsE,EAAE,QAAUA,EAAE,aAE9ClH,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,UAAW,UAAQ,SAAQhH,UAC9CF,EAAAA,EAAAA,KAACsN,GAAS,CAACC,MAAOgkE,EAAS2B,YAE7BlzE,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,qBAAsB,UAAQ,oBAAmBhH,SACnEwR,GAAiB6/D,EAASoG,sBAE7B33E,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,WAAY,UAAQ,UAAShH,SAC/CwR,GAAiB6/D,EAASlW,YAE7Br7D,EAAAA,EAAAA,KAACmsE,GAAsB,CAACzxE,MAAO62E,EAASxB,SAAU,UAAQ,cAC1D/vE,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,SACT,UAAQ,QACRka,QAAgC,QAAvBmwD,EAASgB,WAAuBf,GAAiB,EAAEtxE,UAE5DF,EAAAA,EAAAA,KAACsxE,GAAmB,CAACC,SAAUA,OAEjCvxE,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,WAAY,UAAQ,UAAShH,UAChDF,EAAAA,EAAAA,KAACm3E,GAAc,CAAC5F,SAAUA,OAE5BvxE,EAAAA,EAAAA,KAACo2E,GAAoB,CACnB17E,MAAO62E,EAAS1jC,OAChBvwC,MAAO4J,EAAE,UACTka,QAA6B,KAApBmwD,EAAS1jC,OAClBvsB,WAAW,MAInB,C,gBC3KO,SAASs2D,KACd,MAAMC,GAAaC,EAAAA,GAAAA,QACb,eAAEC,GAAmBC,KAE3B,OAAOl8E,EAAAA,EAAAA,cAAY,KACjB+7E,EAAW/6B,SAAS,IAAK+6B,EAAWI,WAAYC,YAAa,GAAIC,gBAAYx2E,IAC7Eo2E,OAAep2E,EAAU,GACxB,CAACk2E,EAAYE,GAClB,CC+DO,IAUKK,GAAU,SAAVA,GAGY,OAHZA,EAAAA,EAAU,OACXC,GAAAA,IAAW/vE,QAAM,SADhB8vE,EAAAA,EAAU,QAEVC,GAAAA,IAAWptC,SAAO,UAFlBmtC,EAAAA,EAAU,KAGbC,GAAAA,IAAWC,MAAI,OAHZF,CAAU,MChFf,SAASG,KACd,MAAM,EAAErxE,IAAMC,EAAAA,EAAAA,MACd,OAAOrL,EAAAA,EAAAA,cACL,CAAC+9B,EAAgB8B,EAAgB68C,KAC/B,MAAMC,EAAM,CACV,CAACL,GAAWntC,SAAU/jC,EAAE,kBACxB,CAACkxE,GAAW9vE,QAASpB,EAAE,eACvB,CAACkxE,GAAWE,MAAOpxE,EAAE,eACrBsxE,GAOF,MAAO,CACLr7E,GAAI,GAAG08B,KAAU8B,IACjBl4B,KAAM,OACNo2B,SACA8B,SACA+8C,SAAS,EACTx4D,KAAM,CACJy4D,eAbmB,CACrB,CAACP,GAAWntC,SAAU,UACtB,CAACmtC,GAAW9vE,QAAS,UACrB,CAAC8vE,GAAWE,MAAO,QACnBE,GAUE3+C,SACA4+C,MACAD,YACA78C,SACAi9C,gBAAiBC,GAAAA,IAAiBC,YAClCC,kBAAmBP,EACnBQ,gBAAiB,IAEpB,GAEH,CAAC9xE,GAEL,CCrCO,SAAS+xE,GAAqBx1E,GACnC,MAAM,IAAQ0D,EAAAA,EAAAA,MACR+xE,EAAc,CAClBC,IAAKjyE,EAAE,gBACPk0D,aAAcl0D,EAAE,yBAChBkyE,eAAgBlyE,EAAE,WAClBmyE,iBAAkBnyE,EAAE,oBACpBg0D,kBAAmBh0D,EAAE,qBACrBoyE,WAAYpyE,EAAE,mBAEhB,OAAKzD,EACEy1E,EAAYz1E,GADD,IAEpB,CCbO,MAAM81E,GAAW,4BAIXC,GAAgB,GAChBC,GAAgB,YAEhBC,GAAwD,CACnEP,IAAK,MACL/d,aAAc,eACdge,eAAgB,iBAChBle,kBAAmB,oBACnBme,iBAAkB,mBAClBC,WAAY,cCgBP,SAASK,KACd,MAAM,EAAEzyE,IAAMC,EAAAA,EAAAA,MACRyyE,EC3BD,WACL,MAAMC,EAAatB,KAEnB,OAAOz8E,EAAAA,EAAAA,cACJo7C,IACC,MAAM4iC,EAAwB,GAE9B5iC,EAAQ6iC,YAAW,GACnB,MAAMC,EAAiB9iC,EAAQ+iC,iBACzBC,EAAkBhjC,EAAQijC,iBAEhCH,EAAe5gD,SAASghD,IACtBA,EAAWL,YAAW,EAAM,IAI9BG,EAAgB9gD,SAASihD,IACvBA,EAAUN,YAAW,GAErBC,EAAe5gD,SAASghD,IACtBA,EAAWE,YAAYx9B,SAAS,CAAEizB,UAAU,IAE5C,MAAMwK,EAAcH,EAAWE,YAAYE,QACrCC,EAAaJ,EAAUK,YAAYF,QACnCG,EAAY,GAAGJ,KAAeE,IACpC,IAAI,UAAEjC,GAAc6B,EAAU5Q,UAQ9B,GAJI8Q,IAAgBd,KAClBjB,EAAYJ,GAAWE,MAGrBphC,EAAQ0jC,gBAAgBC,YAAYF,GAEtCzjC,EAAQ0jC,gBAAgBC,YAAYF,IAAYZ,YAAW,OACtD,CAEL,MAAMe,EAAUjB,EAAWU,EAAaE,EAAYjC,GACpDsB,EAAS/1E,KAAK+2E,EAChB,IACA,IAGJ,MAAM7nC,EAAQiE,EAAQ0jC,gBAAgBG,UACjC9nC,EAAM+nC,QACT/nC,EAAM+nC,MAAQ,IAEhB/nC,EAAM+nC,MAAQ,IAAI/nC,EAAM+nC,SAAUlB,GAElC5iC,EAAQ0jC,gBAAgBK,UAAUhoC,EAAM,GAE1C,CAAC4mC,GAEL,CD3BqBqB,GACbrD,GAAaC,EAAAA,GAAAA,OACb+B,EAAatB,KACb4C,GAAoB76E,EAAAA,GAAAA,MAAQ86E,IAChCA,EAAMhiD,SAAS8d,IACb0iC,EAAW1iC,EAAQ,IAGrB2gC,EAAW/6B,SAAS,IAAK+6B,EAAWI,WAAYlI,UAAU,IAC1D8H,EAAWwD,WAAWnnC,QAAQ,IAG1BonC,GAAiBj3E,EAAAA,EAAAA,UACrB,KAAM,CACJyc,OAAQ5Z,EAAE,QACV4b,KAAOzG,IACL,MAAM6D,EAAO7D,EAAKotD,UACZ11B,EAAW7zB,GAAM6zB,SACjB32C,EAAO22C,GAAUonB,gBAAgBogB,sBAAsBn+E,KAC7D,OAAO4C,EAAAA,EAAAA,KAACmV,GAAQ,CAAC1G,KAAMrR,GAAQ8J,EAAE,WAAYS,SAAS,MAAO,KAGjE,CAACT,IAEGs0E,GAAen3E,EAAAA,EAAAA,UACnB,KAAM,CACJyc,OAAQ5Z,EAAE,cACV4b,KAAOzG,IACL,MAAMlf,EAAKkf,EAAKotD,WAAW11B,SAAS0nC,WACpC,OAAOz7E,EAAAA,EAAAA,KAACmV,GAAQ,CAAC1G,KAAMtR,EAAIwK,SAAS,MAAO,KAG/C,CAACT,IAGGw0E,GAA0Br3E,EAAAA,EAAAA,UAC9B,IAAM,CAACi3E,EAAgBE,IACvB,CAACF,EAAgBE,IAGbG,GAAoBt3E,EAAAA,EAAAA,UAAQ,IAAM,CAACi3E,IAAiB,CAACA,IACrD1b,EAAanzB,KAEbmvC,GAAc9/E,EAAAA,EAAAA,cACjBs/E,IACC,MAAMS,EAAmBT,EAAM53E,OAAS,EACxCo8D,EAAW,CACT7mC,MAAQ1c,GAASA,EAAKm+D,QACtBn9E,MAA0B6J,EAAnB20E,EAAqB,mBAAwB,eACpD/iD,MAAOsiD,EACPr9E,YAAa89E,EACT30E,EAAE,8DAA+D,CAC/DoV,MAAO8+D,EAAM53E,SAEf0D,EAAE,mDACN8kC,iBAAkB6vC,EACd30E,EAAE,mBAAoB,CAAEoV,MAAO8+D,EAAM53E,SACrC0D,EAAE,eACNI,UAAU,EACVukC,oBAAqB6vC,EACrB1yC,cAAe2yC,EACf1yC,SAAUA,KACRkyC,EAAkBC,GACXjxC,QAAQqd,YAEjB,GAEJ,CAACm0B,EAAmB/b,EAAY8b,EAAyBx0E,EAAGi0E,IAExDW,GAAez3E,EAAAA,EAAAA,UACnB,KAAM,CACJyc,OAAQ5Z,EAAE,eACV4b,KAAOzG,IACL,MAAMwd,EAASxd,EAAKi+D,YACpB,OAAOt6E,EAAAA,EAAAA,KAACmV,GAAQ,CAAC1G,KAAMorB,EAAOkiD,YAAc70E,EAAE,WAAYS,SAAS,MAAO,KAG9E,CAACT,IAEG80E,GAAe33E,EAAAA,EAAAA,UACnB,KAAM,CACJyc,OAAQ5Z,EAAE,eACV4b,KAAOzG,IACL,MAAMsf,EAAStf,EAAKq+D,YACpB,OAAO16E,EAAAA,EAAAA,KAACmV,GAAQ,CAAC1G,KAAMktB,EAAOogD,WAAYp0E,SAAS,MAAO,KAG9D,CAACT,IAEG+0E,GAAe53E,EAAAA,EAAAA,UACnB,KAAM,CACJyc,OAAQ5Z,EAAE,UACV4b,KAAOzG,IACL,MAAM6D,EAAO7D,EAAKotD,UAClB,OAAKvpD,GAYElgB,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAC/X,MAXd,SAAwBk8E,GACtB,OAAQA,GACN,IAAK,UACH,MAAO,QACT,IAAK,SACH,MAAO,MACT,IAAK,OACH,MAAO,OAEb,CAEqB0D,CAAeh8D,EAAKs4D,WAAWt4E,SAAEggB,EAAKu4D,MAZzC,IAYqD,KAG3E,CAACvxE,IAEGi1E,GAA0B93E,EAAAA,EAAAA,UAC9B,IAAM,CAACy3E,EAAcE,EAAcC,IACnC,CAACH,EAAcE,EAAcC,IAGzBG,GAAoB/3E,EAAAA,EAAAA,UACxB,IAAM,CAACy3E,EAAcE,IACrB,CAACF,EAAcE,IAEXK,EAAiB5vC,KAEjB6vC,GAAmBh8E,EAAAA,GAAAA,MAAQ42C,IAC/BA,EAAQ6iC,YAAW,GACnB7iC,EAAQojC,YAAYx9B,SAAS,CAAEizB,UAAU,IACzC74B,EAAQwjC,YAAY59B,SAAS,CAAEizB,UAAU,IACzC74B,EAAQojC,YAAYiC,cAAclE,GAAAA,IAAWhuE,SAC7C6sC,EAAQwjC,YAAY6B,cAAclE,GAAAA,IAAWhuE,SAC7C,MAAMwtE,EAAa3gC,EAAQ0jC,gBACrB3nC,EAAQ4kC,EAAWkD,UAEzBlD,EAAW/6B,SAAS,IAAK+6B,EAAWI,WAAYlI,UAAU,KACxC74B,EAAQwjC,YACST,iBACc97E,QAAQq+E,GAASA,EAAKC,cAE9Cj5E,QACvByvC,EAAM+nC,OAAOj3E,KAAK81E,EAAWJ,GAAeviC,EAAQwjC,YAAYF,QAASpC,GAAWE,OAEtFT,EAAWoD,UAAUhoC,GAAO,GAC5B4kC,EAAWwD,WAAWnnC,QAAQ,IAqBhC,MAAO,CAAE0nC,cAAac,YAnBH5gF,EAAAA,EAAAA,cAChBo7C,IACCmlC,EAAe,CACbtjD,MAAQ1c,GAASA,EAAKm+D,QACtBn9E,MAAO6J,EAAE,eACT4xB,MAAO,CAACoe,GACRn5C,YAAamJ,EAAE,mDACf8kC,iBAAkB9kC,EAAE,eACpBI,UAAU,EACVukC,oBAAqBswC,EACrBnzC,cAAeozC,EACfnzC,SAAUA,KACRqzC,EAAiBplC,GACV/M,QAAQqd,YAEjB,GAEJ,CAAC40B,EAAmBC,EAAgBF,EAAyBj1E,EAAGo1E,IAGpE,CEjMO,SAASK,GAAWC,GACzB,GAA0B,KAAtBA,EAAWj5D,OACb,MAAO,GAET,MAAMjpB,EAAQ0V,KAAKC,MAAMusE,GACzB,OAAqC,IAAjC/yE,OAAOwmD,QAAQ31D,GAAO8I,OACjB,GAEFy2C,GAAAA,GAAAA,KAAYv/C,EACrB,CAcO,SAASmiF,GAAWC,GACzB,MAAMpiF,EAAgBu/C,GAAAA,GAAAA,KAAY6iC,GAClC,IAAKpiF,EACH,MAAO,KAET,GAAqB,iBAAVA,EACT,MAAM,IAAI4pB,MAAM,gCAElB,OAAOlU,KAAKa,UAAUvW,EAAO,KAAM,EACrC,CACO,SAASqiF,GAAmBC,GACjC,MAAsB,QAAlBA,GAA6C,OAAlBA,EACtB,CAAC,GAzBL,SAAsBJ,GAC3B,GAA0B,iBAAfA,EACT,OAAO,EAET,IAAIliF,EACJ,IACEA,EAAQ0V,KAAKC,MAAMusE,EACrB,CAAE,MAAOtsE,GACP,OAAO,CACT,CAEA,MAAwB,iBAAV5V,GAAgC,OAAVA,CACtC,CAeOuiF,CAAaD,KAChBA,EAAgBH,GAAWG,IAGtB5sE,KAAKC,MAAM2sE,GACpB,C,gBCrCO,SAASE,GAAoC94B,EAAa0c,GAC/D,MAAM3K,EAAaC,KACb+mB,GAASrhF,EAAAA,EAAAA,cACb,CAACshF,EAAmBC,IACdA,IAAqBA,EAAiB7xD,KAAa,KAChD,GAAG44B,IAAM2L,GAAqB,IAChC+Q,EACH3rC,KAAMioD,EAAY,EAClBhsB,UAAW,SAGf,CAAChN,EAAK0c,KAGF,KAAE5gD,EAAI,MAAElT,EAAK,UAAEoc,EAAS,OAAE+oC,IAAWmrB,EAAAA,GAAAA,IACzCH,EACAhnB,EACA,CACEonB,YAAa,MAgBjB,MAAO,CAAErrB,SAZO7tD,EAAAA,EAAAA,UAAQ,IACf6b,GAAMnC,QAAO,CAACm0C,EAAc/8B,IAC7Blc,MAAMC,QAAQic,EAAK+8B,SACd,IAAIA,KAAY/8B,EAAK+8B,SAEvBA,GACN,KACF,CAAChyC,IAKclT,QAAOoc,YAAWmsC,SAHpBz5D,EAAAA,EAAAA,cAAY,KACrBq2D,GAAQ,GACZ,CAACA,IAEN,CCnCO,SAASqrB,GAA6CC,EAAernE,GAE1EA,EAAUA,GAAW,GACrB,MAAMsnE,EAAa,GACbC,EAAe,GAWrB,OAdAF,EAAWA,GAAY,IAIdrkD,SAASwkD,IACXxnE,EAAQ5R,MAAMq5E,GAAQA,EAAI1gF,KAAOygF,EAAKzgF,MACzCwgF,EAAQ55E,KAAK65E,EACf,IAEFxnE,EAAQgjB,SAASykD,IACVJ,EAASj5E,MAAMo5E,GAASA,EAAKzgF,KAAO0gF,EAAI1gF,MAC3CugF,EAAM35E,KAAK85E,EACb,IAEK,CAAEH,QAAOC,UAClB,CCsBO,SAASG,GAAkBC,GAChC,MAAMlG,GAAaC,EAAAA,GAAAA,OACbzsD,EAAkBwd,KAClBo/B,EAAgBH,KAChBkW,EAAoBlb,KACpBmb,EAA4Bnb,KAC5Bob,EAAoBlb,KACpBmb,EAAmBnb,KACnBob,EAAmBpb,KACnBqb,EAA2Brb,KAC3Bsb,EAAqBC,KACrBC,EAAwBC,KACxBC,EAAgBC,MAEdppB,QAASqpB,GAAwB1B,GACvCzrB,EAAM,2BAA2BssB,GAAc,sBAGjD,OAAOjiF,EAAAA,EAAAA,cAAY4S,UACjB,MAAMmwE,EAAahH,EAChBwD,WACAyD,WACA3gF,QAAQ0zB,GAASA,EAAK2oD,UAAYf,KAC/B15E,EAAQ83E,EAAWI,WACnB8G,EAA2B,GAC3BC,EAAkE,GAClEC,EAAkE,GAClEC,EAAiE,GACjEC,EAAqE,GACrEC,EAAqE,GACrEC,EAAoE,GACpEC,EAAgC,GAChCC,EAAmC,GACnCC,EAAwB,GACxBC,EAA2B,GAEjC,SAASC,EAAiB7tD,EAAiB8tD,GACzC,MAAMC,EAAW/tD,EAAK43C,WACtBnpE,EAAAA,GAAAA,MAAO,KACLuxB,EAAKguD,MAAMF,EAAMnhE,YACjBqT,EAAKkyC,QAAQ,IACR6b,EACH7rC,SAAU,IACL6rC,EAAS7rC,SACZ+rC,aAAc,GACdC,cAAe,GACfC,cAAe,KAEjB,GAVJ1/E,EAYF,CAsXAu+E,EAAWzlD,SAASvH,IAClB,MAAMouD,EAASpuD,EAAK2oD,QACd0F,EAAYruD,EAAKomD,WACjBkI,GAAatuD,EAAK4qD,YAClB2D,EAAYH,EAAO13E,SAAS,eAC5B83E,EAAWr7E,QAAQk7E,GAAWnQ,YAAcoQ,IAAcC,EAE5DD,IAAcC,GAtHpB,SAA4BvuD,GAC1BktD,EAAeh7E,KAAK8tB,EAAK2oD,QAC3B,CAqHI8F,CAAmBzuD,GAEjBuuD,IAAcD,GArHpB,SAAuBtuD,GACrB,MAAM+tD,EAAW/tD,EAAK43C,UAGpBmW,EAAS7rC,SAASonB,gBAAgBogB,sBAAsBgF,mBACxD7G,GAAcxe,kBAEdokB,EAAiBv7E,KAAK8tB,GAEtB2tD,EAASz7E,KAAK8tB,EAElB,CA2GI2uD,CAAc3uD,GAEZwuD,IAAaF,GA3GnB,SAAwBtuD,GACtB,MAAM+tD,EAAW/tD,EAAK43C,UAEpBmW,EAAS7rC,SAASonB,gBAAgBogB,sBAAsBgF,mBACxD7G,GAAcxe,kBAEdqkB,EAAoBx7E,KAAK8tB,GAEzB4tD,EAAY17E,KAAK8tB,EAErB,CAkGI4uD,CAAe5uD,EACjB,UAnYFnjB,eAAmCgyE,GACjC,MAAMC,EAAWD,EAAc35E,KAAI2H,UACjC,MAAMkxE,EAAW/tD,EAAK43C,UAChBmX,EAAe/uD,EAAK43C,WAAW11B,UAAUonB,gBAAgBogB,qBACzDsF,EAAiBC,GAAc,aAAclB,EAAS7rC,SAAS0nC,YAErE,IAAKmF,EAAc,OAEnB,MAAMG,QAAqB3C,EACzB3sB,EAAM,2BAA2B1xD,EAAMihF,iBAAiB7jF,GAAGqhB,6BAC3D,CACEyiE,0BAA2BrB,EAAS7rC,SAASktC,6BAC1CJ,GAELx1D,EAAgBI,QAGds1D,GAAgBA,EAAa5jF,WACzBkhF,EACJ5sB,EAAM,gCAAgCsvB,EAAa5jF,GAAGqhB,uCACtD,CACEphB,KAAMwjF,EAAaxjF,KACnBwe,YAAaglE,EAAahlE,aAAe,GACzCrQ,QAASq1E,EAAar1E,SAAW,GAEnC8f,EAAgBI,QAElBi0D,EAAiB7tD,EAAMkvD,EAAa5jF,GAAGqhB,YACzC,UAEI2rB,QAAQC,IAAIu2C,EACpB,CAuWMO,CAAoB5B,SAvT1B5wE,eAA8B8wE,GAC5B,MAAMmB,EAAWnB,EAASz4E,KAAI2H,UAC5B,MAAMyyE,EAAwD,CAAC,EACzDp7D,EAAWA,CACf3Z,EACA1R,EACA0mF,GAAoB,KAEpB,GAAIA,EAAU,CACZ,MAAMC,EAAUC,GAAa7D,UAAU8D,cAiBvC,IAhBqB,CACnBC,UAAWH,GAASI,wBACpBC,WAAYL,GAASM,wBACrBC,sBAAuBP,GAASQ,oCAChCC,MAAOT,GAASU,oBAChBxR,UAAW8Q,GAASW,wBACpBC,gBAAiBZ,GAASa,8BAC1BC,SAAUd,GAASe,uBACnBp4C,MAAOq3C,GAASgB,oBAChBC,WAAYjB,GAASkB,yBACrBC,UAAWnB,GAASoB,wBACpBC,SAAUrB,GAASsB,mBACnBp3E,QAAS81E,GAASuB,sBAClBC,UAAWxB,GAASyB,yBAGJ12E,GAChB,MAEJ,CAEI,MAAO1R,GAAqD,KAAVA,IAItDymF,EAAkB/0E,GAAO1R,EAAK,EAE1BklF,EAAW/tD,EAAK43C,WAChB,YAAE6X,EAAW,SAAEvtC,EAAQ,YAAEgvC,GAAgBnD,GACzC,qBAAErE,GAAyBxnC,EAASonB,eAE1C,IAAKogB,EAAsB,OAE3Bx1D,EAAS,4BAA6BguB,EAASktC,2BAC/Cl7D,EAAS,aAAcguB,GAAU0nC,YACjC11D,EAAS,uBAAwBw1D,EAAqBp+E,IAGtD4oB,EAAS,YAAau7D,GAAaE,WAAW,GAC9Cz7D,EAAS,wBAAyBu7D,GAAaM,uBAAuB,GACtE77D,EAAS,QAASu7D,GAAaQ,OAAO,GACtC/7D,EAAS,YAAau7D,GAAa/Q,WAAWpzE,IAAI,GAClD4oB,EAAS,kBAAmBu7D,GAAaW,iBAAiB,GAC1Dl8D,EAAS,WAAYu7D,GAAaoB,UAAU37E,KAAK0xE,GAAQA,EAAIr7E,OAAMqK,KAAK,MAAM,GAC9Ese,EAAS,WAAYu7D,GAAaa,UAAU,GAC5Cp8D,EAAS,QAASu7D,GAAat3C,OAAO,GACtCjkB,EAAS,aAAcu7D,GAAagB,YAAY,GAChDv8D,EAAS,YAAau7D,GAAaoB,UAAU37E,KAAK0xE,GAAQA,EAAIr7E,OAAMqK,KAAK,MAAM,GAC/Ese,EAAS,UAAWu7D,GAAa/1E,SAAS,GAC1Cwa,EAAS,YAAau7D,GAAauB,WAAW,GAG5CtH,EAAqBgF,mBAAqB7G,GAAcJ,YACxDvlC,EAAS2tC,YAAY1tE,KAErB+R,EAAS,aAAc,CAAE/R,KAAM+/B,EAAS2tC,WAAW1tE,OAC1CstE,GAAa0B,YACtBj9D,EAAS,aAAcg3D,GAAmBuE,GAAa0B,aAAa,GAElED,GACFh9D,EAAS,aAAc,IAClBg3D,GAAmBuE,GAAa0B,YAAc,UAC9CD,IAIP,MAAME,QAAgB7E,EACpB3sB,EAAM,2BAA2B1xD,EAAMihF,iBAAiB7jF,GAAGqhB,6BAC3D2iE,EACA91D,EAAgBI,QAGlB,IAAKw3D,EAAQ9lF,GAAI,OACjB,MAAM+lF,EAAYD,EAAQ9lF,GAAGqhB,iBACvBkgE,EAAcwE,EAAW5B,SACzB9C,EAAsB0E,EAAW5B,SACjChD,EAAmB4E,EAAW5B,GACpC5B,EAAiB7tD,EAAMqxD,EAAU1kE,WAAW,UAExC2rB,QAAQC,IAAIu2C,EACpB,CA8NMwC,CAAe3D,SAtWrB9wE,eAAmCgyE,GACjC,MAAMC,EAAWD,EAAc35E,KAAI2H,UACjC,MAAMkxE,EAAW/tD,EAAK43C,UAChBmX,EAAe/uD,EAAK43C,WAAW11B,UAAUonB,gBAAgBogB,qBACzDsF,EAAiBC,GAAc,aAAclB,EAAS7rC,SAAS0nC,YAErE,IAAKmF,EAAc,OAEnB,MAAMG,QAAqB/C,EACzBvsB,EAAM,gCAAgC5/B,EAAK2oD,WAC3C,CACEyG,0BAA2BrB,EAAS7rC,SAASktC,6BAC1CJ,GAELx1D,EAAgBI,QAGds1D,GAAgBA,EAAa5jF,MAEN,IAArByjF,EAAazjF,UACTkhF,EACJ5sB,EAAM,gCAAgCsvB,EAAa5jF,GAAGqhB,uCACtD,CACEphB,KAAMwjF,EAAaxjF,KACnBwe,YAAaglE,EAAahlE,aAAe,GACzCrQ,QAASq1E,EAAar1E,SAAW,GAEnC8f,EAAgBI,QAElBi0D,EAAiB7tD,EAAMkvD,EAAa5jF,GAAGqhB,mBAEjCy/D,EACJxsB,EAAM,gCAAgCmvB,EAAazjF,GAAGqhB,cACtD,CACEphB,KAAMwjF,EAAaxjF,KACnBwe,YAAaglE,EAAahlE,aAAe,GACzCrQ,QAASq1E,EAAar1E,SAAW,GAEnC8f,EAAgBI,QAGtB,UAEI0e,QAAQC,IAAIu2C,EACpB,CA2TMyC,CAAoB7D,SA7N1B7wE,eAAmC+wE,SAC3Bt1C,QAAQk5C,WACZ5D,EAAY14E,KAAI2H,UACd,MAAM40E,EAAyD,CAAC,EAC1D1D,EAAW/tD,EAAK43C,UAChBwW,EAASpuD,EAAK2oD,SACd,YAAE8G,EAAW,YAAEyB,EAAW,SAAEhvC,GAAa6rC,GACzC,qBAAErE,GAAyBxnC,EAASonB,eAE1C,IAAKogB,EAAsB,OAE3B,MAAMx1D,EAAWA,CACf3Z,EACA1R,EACA0mF,GAAoB,KAEpB,GAAIA,EAAU,CACZ,MAAMC,EAAUC,GAAa7D,UAAU8D,cAgBvC,IAfqB,CACnBC,UAAWH,GAASI,wBACpBG,sBAAuBP,GAASQ,oCAChCC,MAAOT,GAASU,oBAChBxR,UAAW8Q,GAASW,wBACpBC,gBAAiBZ,GAASa,8BAC1BC,SAAUd,GAASe,uBACnBp4C,MAAOq3C,GAASgB,oBAChBC,WAAYjB,GAASkB,yBACrBC,UAAWnB,GAASoB,wBACpBC,SAAUrB,GAASsB,mBACnBp3E,QAAS81E,GAASuB,sBAClBC,UAAWxB,GAASyB,yBAGJ12E,GAChB,MAEJ,CAEI,MAAO1R,GAAqD,KAAVA,IAItD4oF,EAAmBl3E,GAAO1R,EAAK,EAGjCqrB,EAAS,4BAA6BguB,EAASktC,2BAC/Cl7D,EAAS,aAAcguB,EAAS0nC,YAChC11D,EAAS,uBAAwBw1D,EAAqBp+E,IAGtD4oB,EAAS,YAAau7D,GAAaE,WAAW,GAC9Cz7D,EAAS,wBAAyBu7D,GAAaM,uBAAuB,GACtE77D,EAAS,QAASu7D,GAAaQ,OAAO,GACtC/7D,EAAS,YAAau7D,GAAa/Q,WAAWpzE,IAAI,GAClD4oB,EAAS,kBAAmBu7D,GAAaW,iBAAiB,GAC1Dl8D,EAAS,WAAYu7D,GAAaoB,UAAU37E,KAAK0xE,GAAQA,IAAKhxE,KAAK,MAAM,GACzEse,EAAS,WAAYu7D,GAAaa,UAAU,GAC5Cp8D,EAAS,QAASu7D,GAAat3C,OAAO,GACtCjkB,EAAS,aAAcu7D,GAAagB,YAAY,GAChDv8D,EAAS,YAAau7D,GAAaoB,UAAU37E,KAAK0xE,GAAQA,IAAKhxE,KAAK,MAAM,GAC1Ese,EAAS,UAAWu7D,GAAa/1E,SAAS,GAC1Cwa,EAAS,YAAau7D,GAAauB,WAAW,GAG5CtH,EAAqBgF,mBAAqB7G,GAAcJ,YACxDvlC,EAAS2tC,YAAY1tE,KAErB+R,EAAS,aAAc,CAAE/R,KAAM+/B,EAAS2tC,WAAW1tE,OAC1CstE,GAAa0B,YACtBj9D,EAAS,aAAcg3D,GAAmBuE,GAAa0B,aAAa,GAElED,GACFh9D,EAAS,aAAc,IAClBg3D,GAAmBuE,GAAa0B,YAAc,UAC9CD,UAIDrE,EAAcuB,EAAQqB,SACtB9C,EAAsByB,EAAQqB,SAC9BhD,EAAmB2B,EAAQqB,SAC3BtD,EACJvsB,EAAM,gCAAgCwuB,KACtCqD,EACAj4D,EAAgBI,OACjB,IAGP,CAsIM83D,CAAoB9D,GAC1BZ,EAAWzlD,SAASvH,IAClB,MAAMquD,EAAYruD,EAAKomD,WACjBkI,GAAatuD,EAAK4qD,YACPz3E,QAAQk7E,GAAWnQ,YAAcoQ,GA3GpD,SAAgCtuD,GAC9B,MAAM+tD,EAAW/tD,EAAK43C,UAChB+Z,EAAc3xD,EAAKsoD,kBAEvBpmC,UAAU,aAAE+rC,EAAe,GAAE,cAAEC,EAAgB,GAAE,cAAEC,EAAgB,KACjEJ,EAEAI,EAAcx8E,OAAS,GACzBw8E,EAAc5mD,SAASqqD,IACrBD,EAAYpqD,SAASojD,IACnB,MAAM,UAAEhE,GAAcgE,EAAK/S,UACvBga,EAAcjlE,aAAeg+D,EAAK9B,YAAYF,UAC5ChC,IAAcJ,GAAWntC,SAAYuxC,EAAKC,aAC5C0C,EAAyBp7E,KAAK,CAC5B2/E,SAAU7xD,EAAK2oD,QACfmJ,SAAUF,EAAcjlE,aAG9B,GACA,IAGFuhE,EAAcv8E,OAAS,GACzBu8E,EAAc3mD,SAASwqD,IACrBJ,EAAYpqD,SAASojD,IACnB,MAAM,UAAEhE,GAAcgE,EAAK/S,UACvBma,EAAcplE,aAAeg+D,EAAK9B,YAAYF,UAC5ChC,IAAcJ,GAAW9vE,QAAWk0E,EAAKC,aAC3C2C,EAAyBr7E,KAAK,CAC5B2/E,SAAU7xD,EAAK2oD,QACfmJ,SAAUC,EAAcplE,aAG9B,GACA,IAIFshE,EAAat8E,OAAS,GACxBs8E,EAAa1mD,SAASyqD,IACpBL,EAAYpqD,SAASojD,IACnB,MAAM,UAAEhE,GAAcgE,EAAK/S,UACvBoa,EAAarlE,aAAeg+D,EAAK9B,YAAYF,UAC3ChC,IAAcJ,GAAWE,MAASkE,EAAKC,aACzC4C,EAAwBt7E,KAAK,CAC3B2/E,SAAU7xD,EAAK2oD,QACfmJ,SAAUE,EAAarlE,aAG7B,GACA,IAINglE,EAAYpqD,SAASojD,IACnB,IAAKA,EAAKC,YAAa,OAEvB,MAAMkH,EAAWnH,EAAK9B,YAAYF,SAC5B,UAAEhC,GAAcgE,EAAK/S,UAE3B,OAAQ+O,GACN,KAAKJ,GAAWntC,QACT+0C,GAAez3E,SAASu7E,SAASH,EAAU,MAC9C3E,EAAsBj7E,KAAK,CAAE2/E,SAAU7xD,EAAK2oD,QAASmJ,aAEvD,MACF,KAAKvL,GAAW9vE,OACTy3E,GAAex3E,SAASu7E,SAASH,EAAU,MAC9C1E,EAAsBl7E,KAAK,CAAE2/E,SAAU7xD,EAAK2oD,QAASmJ,aAEvD,MACF,KAAKvL,GAAWE,KACTwH,GAAcv3E,SAASu7E,SAASH,EAAU,MAC7CzE,EAAqBn7E,KAAK,CAAE2/E,SAAU7xD,EAAK2oD,QAASmJ,aAK1D,GAEJ,CA8BII,CAAuBlyD,EACzB,UAGIsY,QAAQC,IACZ+0C,EAAyBp4E,KAAK8qB,GAC5BssD,EACE1sB,EAAM,gCAAgC5/B,EAAK6xD,0BAC3C,CACEvmF,GAAI3C,OAAOq3B,EAAK8xD,UAChBK,cAAc,GAEhB34D,EAAgBI,iBAIhB0e,QAAQC,IACZg1C,EAAyBr4E,KAAK8qB,GAC5BssD,EACE1sB,EAAM,gCAAgC5/B,EAAK6xD,0BAC3C,CACEvmF,GAAI3C,OAAOq3B,EAAK8xD,UAChBK,cAAc,GAEhB34D,EAAgBI,iBAIhB0e,QAAQC,IACZi1C,EAAwBt4E,KAAK8qB,GAC3BssD,EACE1sB,EAAM,gCAAgC5/B,EAAK6xD,yBAC3C,CACEvmF,GAAI3C,OAAOq3B,EAAK8xD,UAChBK,cAAc,GAEhB34D,EAAgBI,iBAIhB0e,QAAQC,IACZ40C,EAAsBj4E,KAAK8qB,GACzBqsD,EACEzsB,EAAM,gCAAgC5/B,EAAK6xD,0BAC3C,CACEvmF,GAAI3C,OAAOq3B,EAAK8xD,WAElBt4D,EAAgBI,iBAIhB0e,QAAQC,IACZ60C,EAAsBl4E,KAAK8qB,GACzBqsD,EACEzsB,EAAM,gCAAgC5/B,EAAK6xD,0BAC3C,CACEvmF,GAAI3C,OAAOq3B,EAAK8xD,WAElBt4D,EAAgBI,iBAIhB0e,QAAQC,IACZ80C,EAAqBn4E,KAAK8qB,GACxBqsD,EACEzsB,EAAM,gCAAgC5/B,EAAK6xD,yBAC3C,CACEvmF,GAAI3C,OAAOq3B,EAAK8xD,WAElBt4D,EAAgBI,iBAIhB0e,QAAQC,IACZ20C,EAAeh4E,KAAK5J,GAClB8qE,EAAcxW,EAAM,gCAAgCt0D,KAAOkuB,EAAgBI,YAI/EnrB,EAAAA,GAAAA,MAAO,KACLs+E,IACA/G,EAAW/6B,SAAS,IAAK/8C,EAAOgwE,UAAU,IAC1C8H,EACGoM,cACA7qD,SAAS8d,GAAYA,EAAQ4F,SAAS,IAAK5F,EAAQ+gC,WAAYlI,UAAU,KAAS,GALvFzvE,EAMI,GACH,CACDu3E,EACAxsD,EACA48C,EACA+V,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAE,EACAE,EACAE,GAEJ,CAEO,SAASkC,GACd10E,EACA1R,GAEA,MAAsB,iBAAVA,GAAgC,KAAVA,GAAkC,iBAAVA,EACjD,CAAE,CAAC0R,GAAM1R,GAET,CAAC,CAEZ,CAOA,MAAMikF,GAAmBA,KACvB,MAAMtzD,EAAkBwd,KAClBs1C,EAAmBnb,KACnBkhB,EAAqBlhB,KAE3B,OAAOlnE,EAAAA,EAAAA,cACL4S,MAAOuxE,EAAgBqB,KACrB,MAAM6C,EACJ7C,GAAa7D,UAAU8D,eAAe6C,sBACtC9C,GAAap3E,QAAQ1G,OAAS,EAC1B6gF,EAAiB/C,GAAa7D,UAAUvzE,OAE9C,GAAIi6E,EAAiB,CACnB,MAAMG,EAAsBhD,EAAYlR,oBAlBhD1hE,iBAEE,aAD4B2gD,GAA2CoC,EAAM,oBACxDS,QAAQ,GAAG/0D,IAAM,CACxC,CAeuEonF,IAEzD,MAAE7G,EAAK,QAAEC,GAAYH,GACzB8D,GAAa7D,UAAUvzE,QAAU,GACjCo3E,GAAap3E,QAAW,IAGpBs6E,EAAyB7G,EAAQ52E,KAAKzJ,GAC1C6gF,EACE1sB,EAAM,gCAAgCwuB,YACtC,CACE9iF,GAAIG,EAAMH,GACV6mF,cAAc,GAEhB34D,EAAgBI,UAIdg5D,EAAsB/G,EAAM32E,KAC/BzJ,GACC4mF,EACEzyB,EAAM,gCAAgCwuB,YACtC,CACE7iF,KAAME,EAAMF,KACZgzE,aAAc9yE,GAAO8yE,cAAgBkU,GAEvCj5D,EAAgBI,gBAIhB0e,QAAQC,IAAI,IAAIo6C,KAA2BC,GACnD,MAAO,GAAIJ,EAAgB,CACzB,MAAMG,EAAyBH,EAAet9E,KAAKzJ,GACjD6gF,EACE1sB,EAAM,gCAAgCwuB,YACtC,CACE9iF,GAAIG,EAAMH,GACV6mF,cAAc,GAEhB34D,EAAgBI,gBAGd0e,QAAQC,IAAIo6C,EACpB,IAEF,CAACrG,EAAkB+F,EAAoB74D,GACxC,EAGGozD,GAA2BA,KAC/B,MAAMpzD,EAAkBwd,KAClBs1C,EAAmBnb,KACnB0hB,EAA6B1hB,KAEnC,OAAOlnE,EAAAA,EAAAA,cACL4S,MAAOuxE,EAAgBqB,KACrB,MAAMqD,EACJrD,GAAa7D,UAAU8D,eAAeqD,+BACtCtD,GAAauD,iBAAiBrhF,OAAS,EACnCshF,EAAyBxD,GAAa7D,UAAUoH,gBAEtD,GAAIF,EAAyB,CAC3B,MAAM,MAAEjH,EAAK,QAAEC,GAAYH,GACzB8D,GAAa7D,UAAUoH,iBAAmB,GAC1CvD,GAAauD,gBAAkBvD,EAAYuD,gBAAmB,IAG1DL,EAAyB7G,EAAQ52E,KAAK2W,GAC1CygE,EACE1sB,EAAM,gCAAgCwuB,qBACtC,CACE9iF,GAAIugB,EAAMvgB,GACV6mF,cAAc,GAEhB34D,EAAgBI,UAIdg5D,EAAsB/G,EAAM32E,KAAK2W,GACrCgnE,EACEjzB,EAAM,gCAAgCwuB,qBACtC,CACE9iF,GAAIugB,EAAMvgB,IAEZkuB,EAAgBI,gBAId0e,QAAQC,IAAI,IAAIo6C,KAA2BC,GACnD,MAAO,GAAIK,EAAwB,CACjC,MAAMN,EAAyBM,EAAuB/9E,KAAK2W,GACzDygE,EACE1sB,EAAM,gCAAgCwuB,qBACtC,CACE9iF,GAAIugB,EAAMvgB,GACV6mF,cAAc,GAEhB34D,EAAgBI,gBAGd0e,QAAQC,IAAIo6C,EACpB,IAEF,CAACrG,EAAkBuG,EAA4Br5D,GAChD,EAGGkzD,GAAwBA,KAC5B,MAAMlzD,EAAkBwd,KAClBs1C,EAAmBnb,KACnB+hB,EAA0B/hB,KAEhC,OAAOlnE,EAAAA,EAAAA,cACL4S,MAAOuxE,EAAgBqB,KACrB,MAAM0D,EAAoB1D,GAAanyB,aAAe,GAChD81B,EAAsB3D,GAAa7D,UAAU8D,eAAe2D,UAAU/1B,aAAe,GACrFg2B,EAAkB7D,GAAa7D,UAAUtuB,aAAe,GAE9D,GAAImyB,GAAanyB,YAAa,CAC5B,MAAM,MAAEuuB,EAAK,QAAEC,GAAYyH,GACzBD,EACAH,EACAC,GAEIT,EAAyB7G,EAAQ52E,KAAK6nE,GAC1CuP,EACE1sB,EAAM,gCAAgCwuB,iBACtC,CACE9iF,GAAIyxE,EAAWzxE,GACf6mF,cAAc,GAEhB34D,EAAgBI,UAIdg5D,EAAsB/G,EAAM32E,KAAK6nE,GACrCmW,EACEtzB,EAAM,gCAAgCwuB,iBACtC,CACE9iF,GAAIyxE,EAAWzxE,IAEjBkuB,EAAgBI,gBAId0e,QAAQC,IAAI,IAAIo6C,KAA2BC,GACnD,IAEF,CAACtG,EAAkB4G,EAAyB15D,GAC7C,EAQG+5D,GAAgCA,CACpCD,EACAH,EACAC,KAGA,MAAMI,EAAuB,IAAIF,KAAoBF,GAkBrD,MAAO,CAAEvH,MAbKsH,EAAkB7mF,QAC7BmnF,IACED,EAAqB7gF,MACnB+gF,GAAwBA,EAAoBpoF,KAAOmoF,EAAiBnoF,OAU3DwgF,QALAwH,EAAgBhnF,QAC7BqnF,IACER,EAAkBxgF,MAAM8gF,GAAqBA,EAAiBnoF,KAAOqoF,EAAeroF,OAGhE,ECxyBpB,SAASsoF,GAAoB/qF,GAClC,MAAM,IAAQyM,EAAAA,EAAAA,MACRoE,EAAU7Q,GAAS,EACnBoZ,EAAUnG,KAAKC,MAAMrC,EAAU,IAC/BsI,EAAUlG,KAAKC,MAAMrC,EAAU,IACrC,OAAOrE,EAAE,mCAAoC,CAC3C4M,QAASA,EAAQ0K,WACjB3K,QAASA,EAAQ2K,YAErB,CCPO,SAASknE,GACdx+E,EACAy+E,EACA9Q,GAEA,GAAK8Q,EACL,MAAO,CACLxoF,GAAIwoF,EAASxoF,SAAMwE,EACnBikF,mBAAoBD,EAASC,qBAAsB,EACnDC,yBAA0BF,EAASE,2BAA4B,EAC/DpE,wBAAyBkE,EAASlE,0BAA2B,EAC7DI,oCAAqC8D,EAAS9D,sCAAuC,EACrFE,oBAAqB4D,EAAS5D,sBAAuB,EACrD6C,8BAA+Be,EAASf,gCAAiC,EACzE5C,wBAAyB2D,EAAS3D,0BAA2B,EAC7DE,8BAA+ByD,EAASzD,gCAAiC,EACzEE,uBAAwBuD,EAASvD,yBAA0B,EAC3DgC,qBAAsBuB,EAASvB,uBAAwB,EACvD/B,oBAAqBsD,EAAStD,sBAAuB,EACrDE,yBAA0BoD,EAASpD,2BAA4B,EAC/DE,wBAAyBkD,EAASlD,0BAA2B,EAC7DE,mBAAoBgD,EAAShD,qBAAsB,EACnDC,sBAAuB+C,EAAS/C,wBAAyB,EACzDjB,wBAAyBgE,EAAShE,0BAA2B,EAC7DmB,wBAAyB6C,EAAS7C,0BAA2B,EAC7DgD,eAAgBH,EAASG,iBAAkB,EAC3C32B,YAAaw2B,EAASxqB,gBAAgBhM,aAAe,GACrDvzC,YAAa+pE,EAAS/pE,aAAe,GACrC4lE,UAAWmE,EAASnE,YAAa,EACjCI,sBAAuB+D,EAASxqB,gBAAgBymB,uBAAyB,KACzEoB,WAAY2C,EAAS3C,YAAc,QACnClB,MAAO6D,EAAS7D,OAAS,EACzBiE,gBAAiBJ,EAASI,iBAAmB,GAC7ClB,gBAAiBhQ,GAAkB,GACnCtE,UAAWoV,EAASxqB,gBAAgBoV,WAAa,KACjD0R,gBAAiB0D,EAAS1D,iBAAmB,EAC7CS,SAAUsD,GAAsBL,EAASjD,UAAY,KAAO,GAC5DP,SAAUwD,EAASxD,UAAY,MAC/Bj4E,OAAQy7E,EAASxqB,gBAAgBjxD,QAAQgoD,SAAW,GACpDloB,MAAO27C,EAAS37C,OAAS,GACzB5sC,KAAMuoF,EAASvoF,MAAQ,GACvBgzE,aAAcuV,EAASvV,mBAAgBzuE,EACvCskF,SAAUN,EAASM,UAAY,GAC/BC,gCAAiCP,EAASO,kCAAmC,EAC7EtV,QAAS+U,EAASxqB,gBAAgByV,QAClC0R,WAAYqD,EAASrD,WACrBE,UAAWwD,GAAsBL,EAASnD,WAAa,KAAO,GAC9Dj3E,QAASo6E,EAASp6E,SAAW,EAC7B46E,eAAgBR,EAASQ,iBAAkB,EAC3CtD,UAAW8C,EAAS9C,WAAa,EACjCuD,gBAAiBT,EAASS,sBAAmBzkF,EAC7C0kF,YAAaV,EAASpO,SAAS+O,iBAC3B,GAAGpgF,SAASmxB,SAASkvD,SAASZ,EAASpO,QAAQ+O,mBAC/Cp/E,EAAE,gDAAgDgpC,cACtDs2C,YAAat/E,EAAE,gDAAgDgpC,cAC/Du2C,mBAAoBd,EAASc,mBAE7BC,8BAA+B1hF,QAAQ2gF,EAASpO,SAASoP,UACzDC,iBAAkB5hF,QAAQ2gF,EAASpO,SAAS+O,kBAC5C/O,QAAS,CACP+O,iBAAkBX,EAASpO,SAAS+O,kBAAoB,GACxDK,SAAUhB,EAASpO,SAASoP,SACxB,GAAGzgF,SAASmxB,SAASkvD,SAASZ,EAASpO,QAAQoP,WAC/C,GACJH,YAAab,EAASpO,SAASiP,aAAe,IAGpD,CAEO,SAASR,GAAsBa,GACpC,MAAMtY,EAASsY,GAAO,GACtB,OAA6B,IAAzBtY,EAAO5qD,OAAOngB,OAAqB,GAChC+qE,GAAQ/mE,MAAM,MAAMT,KAAK0xE,IAAG,CAAQr7E,KAAMq7E,EAAKn7E,MAAOm7E,EAAK/9E,MAAO+9E,KAC3E,CAEO,SAASqO,GAAcC,GAI5B,OAHwBA,EAAK5oF,QAAQs6E,IACnC,GAAiB,KAAbA,EAAIr7E,KAAa,OAAOq7E,EAAIr7E,IAAI,IAEf2J,KAAK2G,GAAMA,EAAEtQ,OAAMqK,KAAK,IACjD,CCrEO,SAASu/E,GAAcn1D,GAC5B,SAAKA,GAAU,aAAcA,GAAUA,EAAKswD,WACrC,CAAC,eAAgB,0BAA0B55E,SAASspB,EAAKswD,SAClE,CAEO,SAAS8E,GACd9d,EACAv7C,EACAs5D,GAEA,OAAO/d,IAAauQ,GAAcxe,kBAAoBgsB,EAAgBt5D,CACxE,CAUO,SAASu5D,GAAa/pF,EAAcgqF,GACzC,OAAK3Y,GAAa2Y,IAAoB,KAAVA,EAGrBhqF,EAFEgqF,CAGX,CAEO,SAASC,GAAoBC,GAClC,OAAuC,IAAnCz9E,OAAO4f,KAAK69D,GAAY9jF,UAE1B8jF,EAAWzB,0BACXyB,EAAW7F,yBACX6F,EAAWzF,qCACXyF,EAAWvF,qBACXuF,EAAW1C,+BACX0C,EAAWtF,yBACXsF,EAAWpF,+BACXoF,EAAWlF,wBACXkF,EAAWlD,sBACXkD,EAAWjF,qBACXiF,EAAW/E,0BACX+E,EAAW7E,yBACX6E,EAAW3E,oBACX2E,EAAW1E,uBACX0E,EAAW3F,yBACX2F,EAAWxE,wBAEf,CCzCO,SAASyE,KACd,OAAOzrF,EAAAA,EAAAA,cAAa+1B,IAClB,IAAKA,EACH,OAAO21D,GAGT,MAAM5H,EAAW/tD,GAAM43C,WACjB,SAAE11B,GAAa6rC,GAAY,CAAC,EAC5B6H,EAAU1zC,GAAUonB,gBAAgBogB,qBACpCpS,EAAWse,GAASlH,iBACpBM,EAAiBpS,GAAa16B,GAAU0nC,YAAc,IAAM,GAAK1nC,GAAU0nC,WAC3EiM,GDLyBC,ECKY5zC,GAAUktC,0BDJnD0G,QACK,MAEAA,EAAc,MAAQ,OAJ1B,IAA4BA,ECM/B,MAAMC,EAAiB7zC,GAAU2tC,YAAY1tE,KACvC6zE,EAAkBJ,GAASl8E,QAC3Bu8E,EAAe3e,EAAW8d,GAAuB9d,EAAU,GAAIse,GAASrqF,MAAQ,IAAM,GAK5F,MAAO,CACL2qF,sBAL0B5e,EACxB8d,GAAuB9d,EAAU,GAAIse,GAAS7rE,aAAe,IAC7D,KAG2C4rE,GAAcO,qBAC3DC,cAAeF,GAAgBN,GAAcQ,cAC7CC,iBAAkBJ,GAAmBL,GAAcS,iBACnDC,WAAYrH,GAAkB2G,GAAcU,WAC5CC,iBAAkBT,GAAmBF,GAAcW,iBACnDC,kBAAmBR,GAAkBJ,GAAcY,kBACnDr0C,SAAU0zC,GAAWD,GAAczzC,SACnCw+B,UAAWpJ,GAAYqe,GAAcjV,UACtC,GACA,GACL,CAGA,MAAMiV,GAAkC,CACtCO,qBAAsB,GACtBC,cAAe,GACfC,iBAAkB,EAClBC,WAAY,GACZC,iBAAkB,MAClBC,kBAAmB,GACnBr0C,SAAU,KACVw+B,UAAWmH,GAAcP,IACzBkP,iBAAkBjQ,GAAWE,MA0I/B5pE,eAAe45E,GAAcC,GAC3B,MAAMC,QAAsBn5B,GAAgCk5B,GAC5D,OAAIC,EAAct2B,QAAQ1uD,QAAU,EAC3BglF,EAAct2B,QAEhB,EACT,CCjMA,MAAMu2B,GAAW/lF,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,qBAAVH,CAAU,+FAUrBgmF,GAAchmF,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,qBAAVH,CAAU,0HA0BjBimF,IAAqB/oF,EAAAA,EAAAA,eAA4B,CAC5DgpF,iBAAkBA,OAClBC,cAAc,EACdC,cAAc,EACdC,aAAcA,OACd3nE,SAAS,EACTgI,WAAW,EACX4/D,iBAAarnF,EACbo2E,eAAgBA,IAAM,KACtB6D,YAAaA,IAAM,KACnBc,WAAYA,IAAM,KAClBxE,YAAa,KAGF+Q,IAAsBC,EAAAA,GAAAA,MAAUpsF,IAC3C,MAAM,SAAEoD,GAAapD,EACf+6E,GAAaC,EAAAA,GAAAA,QACb,YAAEI,GAAgBL,EAAWI,WAC7BmD,EAAQvD,EACXwD,WACAyD,WACAt6E,MAAMqvD,GAAMA,EAAE4oB,aAAe5oB,EAAE2mB,UAAYf,KACxC0P,EAAetR,EAAWkD,UAAUqO,OAAO1Q,QAC3C2Q,IAAoBnR,GAAa10E,QAAU00E,EAAY,KAAOqB,IAC9D,YAAEqC,EAAW,WAAEc,GAAe/C,MAC7Bv4D,EAASkoE,IAAc5tF,EAAAA,EAAAA,WAAS,IAChCmtF,EAAcU,IAAmB7tF,EAAAA,EAAAA,WAAS,IAC1CotF,EAAcU,IAAmB9tF,EAAAA,EAAAA,WAAS,IAC1C0tB,EAAW46C,IAAgBtoE,EAAAA,EAAAA,WAASytF,IACpCH,EAAajR,IAAkBr8E,EAAAA,EAAAA,eAA8CiG,IAEpF5F,EAAAA,EAAAA,YAAU,KAENioE,GADEmlB,EAIJ,GACC,CAACA,KAEJptF,EAAAA,EAAAA,YAAU,KACJqtB,GAGFkgE,OADY3nF,IAAVy5E,EAIJ,GACC,CAACA,EAAOhyD,KAkBXrtB,EAAAA,EAAAA,YAAU,KACJstF,GACFtR,OAAep2E,EACjB,GACC,CAAC0nF,IAEJ,MAAM3uF,EAAQ,CACZmuF,eACAD,iBAxBuBA,KAIrBW,GAHGV,EAIL,EAoBAC,eACAC,aAlBmBA,KAIjBS,GAHGV,EAIL,EAcA1/D,YACAhI,UACA4nE,cACA9Q,cACAH,iBACA6D,cACAc,cAGF,OACE18E,EAAAA,EAAAA,KAAC2oF,GAAmB1oF,SAAQ,CAACvF,MAAOA,EAAMwF,SACvC2oF,GACC7oF,EAAAA,EAAAA,KAACypF,GAAU,CAAAvpF,UACTF,EAAAA,EAAAA,KAAC0oF,GAAW,CAAAxoF,UACVF,EAAAA,EAAAA,KAACyoF,GAAQ,CAAC,UAAQ,uBAAsBvoF,SAAEA,SAI9CF,EAAAA,EAAAA,KAAC0oF,GAAW,CAAAxoF,SAAEA,KAEY,IAIrB83E,GAAiBA,KAC5B,MAAMplD,GAAUxyB,EAAAA,EAAAA,YAAWuoF,IAC3B,IAAK/1D,EACH,MAAM,IAAItO,MAAM,oDAGlB,OAAOsO,CAAO,EAGhB,SAAS62D,GAAW3sF,GAClB,MAAM,SAAEoD,GAAapD,GACdu+B,IAAM3/B,EAAAA,EAAAA,UAASwK,SAASixC,cAAc,QAS7C,OAPAp7C,EAAAA,EAAAA,YAAU,KACRmK,SAASC,KAAKmxC,YAAYjc,GACnB,KACLn1B,SAASC,KAAKqxC,YAAYnc,EAAG,IAE9B,CAACA,IAEGquD,GAAAA,aAAsBxpF,EAAUm7B,EACzC,CCvKO,SAASsuD,GAAc7sF,GAC5B,MAAM,eAAEi7E,GAAmBC,MACrB,EAAE9wE,IAAMC,EAAAA,EAAAA,MACd,OACEnH,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACL,UAAQ,kBACRrC,MAAMlD,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrBz0B,QAASvG,EAAMuG,SAAW,YAC1B/F,MAAO4J,EAAE,YACTP,QAASA,KACPoxE,EAAe,MAAM,EACrB73E,SAEDgH,EAAE,aAGT,CCfA,MAAM0iF,GACJl/C,IAKA,MAAMm/C,EAAgBxtF,EAAmBquC,IAAW/tC,EACpD,MAAO,CACLmhB,KAAM+rE,EACNzpE,OAAQypE,EACT,EAaUC,GAETA,EAAG5pF,WAAU6pF,SAAQC,SAAQt/C,SAAQu/C,gBAAeC,WAAUC,uBAChE,MAGOC,EAAUC,IAAWC,EAAAA,GAAAA,KAAQ,CAACpqF,KAC/B,MAAEiW,EAAK,OAAEG,GAjBWi0E,EAC1BH,EACAI,EACAC,KAIO,CAAEt0E,MAFKi0E,EAAWA,EAASj0E,MAAQq0E,GAAe,EAEzCl0E,OADD8zE,EAAWA,EAAS9zE,OAASm0E,EAAe,IAWjCF,CAAoBH,GAExC/pE,EAAI0pE,EAAS5zE,EAAQ,EACrB8I,EAAI+qE,EAAS1zE,EAAS,GAErB3O,EAAU+iF,IAAWJ,EAAAA,GAAAA,KAAQ,CAACzjF,EAAAA,GATpB,KAUX8jF,EAAoBP,GAAU9zE,OAAS,GAAG8zE,EAAS9zE,OAAS,EAAM,IACxE,OACEhR,EAAAA,EAAAA,MAAA,KAAGmW,UAAW,aAAa4E,MAAMpB,KAAMxY,IAAKyjF,EAAsChqF,SAAA,CAC/EkqF,IACCpqF,EAAAA,EAAAA,KAAA,QACE6B,MAAO+nF,GAAcl/C,GACrBrqB,EAAG,EACHpB,EAAG,EACH9I,MAAOg0E,IAAqBF,EAAgBG,EAASj0E,MAAQ,GAAKi0E,EAASj0E,MAAQ,GACnFG,OAAQA,EACRs0E,GAAI,GACJC,GAAI,MAGR7qF,EAAAA,EAAAA,KAAA,QACEyG,IAAK4jF,EACLxoF,MAAO,CAAEic,KAAM,SACfuC,EAAwC,GACxCpB,EAAG3I,EAAS,EACZw0E,GAAG,SAAQ5qF,SAEVA,KAEDiqF,GAAoBF,IACpB3kF,EAAAA,EAAAA,MAAA,KAAGmB,IAAKikF,EAAShkF,UAAU,iCAAgCxG,SAAA,EACzDF,EAAAA,EAAAA,KAAA,QACE0G,UAAU,+BACV0kE,GAAIj1D,EACJm1D,GAAIn1D,EACJk1D,GAAI,EACJE,GAAI,GAAGj1D,MAER3O,IACC3H,EAAAA,EAAAA,KAAA,QACE,UAAQ,0BACR2G,QAASsjF,EACT51B,EAAG,IACDl+C,EAAQ,WACAw0E,OAAuBA,KAAqBA,WAA2BA,MAAsBA,KAAqBA,OAAuBA,MACnJ9oF,MAAO+nF,GAAcl/C,MAGzB1qC,EAAAA,EAAAA,KAAA,KAAG,UAAQ,0BAA0Byb,UAAW,aAAatF,EAAQ,MAAMG,EAAS,KAAKpW,UACvFF,EAAAA,EAAAA,KAAC6G,EAAAA,GAAa,CAAChF,MAAO,CAAEic,KAAM,kBAIlC,E,ICvFHitE,GAAQ,SAARA,GAAQ,OAARA,EAAQ,YAARA,EAAQ,UAARA,EAAQ,cAARA,EAAQ,gBAARA,CAAQ,EAARA,IAAQ,IAMb,MAUMC,GAAmB,CACvB,CAACD,GAASE,MAAO,CAAE5qE,GAAI,EAAGpB,EAAG,GAC7B,CAAC8rE,GAASG,OAAQ,CAAE7qE,EAAG,EAAGpB,EAAG,GAC7B,CAAC8rE,GAASI,KAAM,CAAE9qE,EAAG,EAAGpB,GAAI,GAC5B,CAAC8rE,GAASK,QAAS,CAAE/qE,EAAG,EAAGpB,EAAG,IAiBhC,MAAMosE,GAAeA,EACnBxxD,SACAyxD,iBAAiBP,GAASK,OAC1BzvD,YAMI2vD,IAAmBP,GAASE,MAAQK,IAAmBP,GAASG,MAC3DrxD,EAAOxZ,EAAIsb,EAAOtb,EAAI,CAAEA,EAAG,EAAGpB,EAAG,GAAM,CAAEoB,GAAI,EAAGpB,EAAG,GAErD4a,EAAO5a,EAAI0c,EAAO1c,EAAI,CAAEoB,EAAG,EAAGpB,EAAG,GAAM,CAAEoB,EAAG,EAAGpB,GAAI,GAGtDssE,GAAWA,CAAClgF,EAAcoc,IAC9B9Z,KAAK69E,KAAK79E,KAAKI,IAAI0Z,EAAEpH,EAAIhV,EAAEgV,EAAG,GAAK1S,KAAKI,IAAI0Z,EAAExI,EAAI5T,EAAE4T,EAAG,IClD5CwsE,GAAgB3uF,IAC3B,MAAM,OAAE6+B,EAAM,MAAE95B,GAAU/E,EAC1B,OACEkD,EAAAA,EAAAA,KAAA,KAAGyb,UAAW,aAAakgB,EAAOtb,EAAI,OAAOsb,EAAO1c,EAAI,MAAM/e,UAC5DF,EAAAA,EAAAA,KAAA,WACEyb,UAAW,sBACXiwE,OAAO,iBACPhlF,UAAW,mEAAmE7E,OAE9E,ECMF8pF,IAMFzC,EAAAA,GAAAA,MAAUpsF,IACZ,MACEo6C,QAAS00C,EAAW,gBACpBC,EAAe,SACfC,EAAQ,SACR9kE,EAAQ,SACRlhB,EAAQ,cACRmkF,EAAa,cACb8B,EAAa,cACbC,KACGjrE,GACDjkB,GACGmvF,EAAO/B,IAAYgC,EAAAA,GAAAA,KAAS,IAC5BC,EAAUC,IAAeF,EAAAA,GAAAA,KAAS,IAEjCxuC,KAAM2uC,EAAQ,YAAEC,GFhBnB,SAAoB9P,GACzB,MAAM8O,EAAiB9O,EAAKlC,YAAYiS,cAClCC,EAAiBhQ,EAAK9B,YAAY6R,eAClC,KAAE7uC,EAAI,iBAAE+uC,GAuMhB,UAA2B,OACzB5yD,EAAM,OACN8B,EAAM,aACNnsB,EAAe,EAAC,OAChB2hD,EAAS,KAET,MAAOu6B,EAAQgB,EAAQC,GAhLzB,UAAmB,OACjB9yD,EAAM,eACNyxD,EAAiBP,GAASK,OAAM,OAChCzvD,EAAM,eACN6wD,EAAiBzB,GAASI,IAAG,OAC7Bh6B,IAQA,MAAMy7B,EAAuB5B,GAAiBM,GACxCuB,EAAuB7B,GAAiBwB,GACxCM,EAA0B,CAC9BzsE,EAAGwZ,EAAOxZ,EAAIusE,EAAUvsE,EAAI8wC,EAC5BlyC,EAAG4a,EAAO5a,EAAI2tE,EAAU3tE,EAAIkyC,GAExB47B,EAA0B,CAC9B1sE,EAAGsb,EAAOtb,EAAIwsE,EAAUxsE,EAAI8wC,EAC5BlyC,EAAG0c,EAAO1c,EAAI4tE,EAAU5tE,EAAIkyC,GAExB67B,EAAM3B,GAAa,CACvBxxD,OAAQizD,EACRxB,iBACA3vD,OAAQoxD,IAEJE,EAAwB,IAAVD,EAAI3sE,EAAU,IAAM,IAClC6sE,EAAUF,EAAIC,GAEpB,IACIE,EAASC,EADT1B,EAAsB,GAE1B,MAAM2B,EAAkB,CAAEhtE,EAAG,EAAGpB,EAAG,GAC7BquE,EAAkB,CAAEjtE,EAAG,EAAGpB,EAAG,IAE5BsuE,EAAgBC,GAoKzB,UAAuB,OACrB3zD,EAAM,OACN8B,IAKA,MAAM8xD,EAAU9/E,KAAK+/E,IAAI/xD,EAAOtb,EAAIwZ,EAAOxZ,GAAK,EAC1C8sE,EAAUxxD,EAAOtb,EAAIwZ,EAAOxZ,EAAIsb,EAAOtb,EAAIotE,EAAU9xD,EAAOtb,EAAIotE,EAEhEE,EAAUhgF,KAAK+/E,IAAI/xD,EAAO1c,EAAI4a,EAAO5a,GAAK,EAGhD,MAAO,CAACkuE,EAFQxxD,EAAO1c,EAAI4a,EAAO5a,EAAI0c,EAAO1c,EAAI0uE,EAAUhyD,EAAO1c,EAAI0uE,EAGxE,CAlL6DC,CAAc,CACvE/zD,SACA8B,WAIF,GAAIixD,EAAUK,GAAeJ,EAAUI,KAAkB,EAAG,CAC1DE,EAAUI,EACVH,EAAUI,EAIV,MAAMK,EAA6B,CACjC,CAAExtE,EAAG8sE,EAASluE,EAAG6tE,EAAa7tE,GAC9B,CAAEoB,EAAG8sE,EAASluE,EAAG8tE,EAAa9tE,IAK1B6uE,EAA+B,CACnC,CAAEztE,EAAGysE,EAAazsE,EAAGpB,EAAGmuE,GACxB,CAAE/sE,EAAG0sE,EAAa1sE,EAAGpB,EAAGmuE,IAIxB1B,EADEkB,EAAUK,KAAiBC,EACJ,MAAhBD,EAAsBY,EAAgBC,EAEtB,MAAhBb,EAAsBa,EAAkBD,CAErD,KAAO,CAEL,MAAME,EAA4B,CAAC,CAAE1tE,EAAGysE,EAAazsE,EAAGpB,EAAG8tE,EAAa9tE,IAClE+uE,EAA4B,CAAC,CAAE3tE,EAAG0sE,EAAa1sE,EAAGpB,EAAG6tE,EAAa7tE,IAQxE,GALEysE,EADkB,MAAhBuB,EACOL,EAAUvsE,IAAM6sE,EAAUc,EAAeD,EAEzCnB,EAAU3tE,IAAMiuE,EAAUa,EAAeC,EAGhD1C,IAAmBkB,EAAgB,CACrC,MAAMyB,EAAOtgF,KAAK+/E,IAAI7zD,EAAOozD,GAAetxD,EAAOsxD,IAGnD,GAAIgB,GAAQ98B,EAAQ,CAClB,MAAM+8B,EAAYvgF,KAAKkyB,IAAIsxB,EAAS,EAAGA,EAAS88B,GAC5CrB,EAAUK,KAAiBC,EAC7BG,EAAgBJ,IACbH,EAAaG,GAAepzD,EAAOozD,IAAgB,EAAI,GAAKiB,EAE/DZ,EAAgBL,IACbF,EAAaE,GAAetxD,EAAOsxD,IAAgB,EAAI,GAAKiB,CAEnE,CACF,CAGA,GAAI5C,IAAmBkB,EAAgB,CACrC,MAAM2B,EAAsC,MAAhBlB,EAAsB,IAAM,IAClDmB,EAAYxB,EAAUK,KAAiBJ,EAAUsB,GACjDE,EACJvB,EAAaqB,GAAuBpB,EAAaoB,GAC7CG,EACJxB,EAAaqB,GAAuBpB,EAAaoB,IAErB,IAA3BvB,EAAUK,MACNmB,GAAaC,GAAwBD,GAAaE,IAC3B,IAA3B1B,EAAUK,MACNmB,GAAaE,GAAwBF,GAAaC,MAGvD3C,EAAyB,MAAhBuB,EAAsBc,EAAeC,EAElD,CAEA,MAAMO,EAAiB,CACrBluE,EAAGysE,EAAazsE,EAAIgtE,EAAgBhtE,EACpCpB,EAAG6tE,EAAa7tE,EAAIouE,EAAgBpuE,GAEhCuvE,EAAiB,CACrBnuE,EAAG0sE,EAAa1sE,EAAIitE,EAAgBjtE,EACpCpB,EAAG8tE,EAAa9tE,EAAIquE,EAAgBruE,GAEjBtR,KAAKgG,IACxBhG,KAAK+/E,IAAIa,EAAeluE,EAAIqrE,EAAO,GAAGrrE,GACtC1S,KAAK+/E,IAAIc,EAAenuE,EAAIqrE,EAAO,GAAGrrE,KAEnB1S,KAAKgG,IACxBhG,KAAK+/E,IAAIa,EAAetvE,EAAIysE,EAAO,GAAGzsE,GACtCtR,KAAK+/E,IAAIc,EAAevvE,EAAIysE,EAAO,GAAGzsE,KAKtCkuE,GAAWoB,EAAeluE,EAAImuE,EAAenuE,GAAK,EAClD+sE,EAAU1B,EAAO,GAAGzsE,IAEpBkuE,EAAUzB,EAAO,GAAGrrE,EACpB+sE,GAAWmB,EAAetvE,EAAIuvE,EAAevvE,GAAK,EAEtD,CAUA,MAAO,CARY,CACjB4a,EACA,CAAExZ,EAAGysE,EAAazsE,EAAIgtE,EAAgBhtE,EAAGpB,EAAG6tE,EAAa7tE,EAAIouE,EAAgBpuE,MAC1EysE,EACH,CAAErrE,EAAG0sE,EAAa1sE,EAAIitE,EAAgBjtE,EAAGpB,EAAG8tE,EAAa9tE,EAAIquE,EAAgBruE,GAC7E0c,GAGkBwxD,EAASC,EAC/B,CA6BmCqB,CAAU,CACzC50D,OAAQ,CAAExZ,EAAGwZ,EAAOxZ,EAAGpB,EAAG4a,EAAO5a,EAlOZ,IAmOrBqsE,eAAgBP,GAASG,MACzBvvD,OAAQ,CAAEtb,EAAGsb,EAAOtb,EAAGpB,EAAG0c,EAAO1c,EApOZ,IAqOrButE,eAAgBzB,GAASE,KACzB95B,WAgBF,MAAO,CAAEzT,KAdIguC,EAAO3tE,QAAe,CAAC2wE,EAAKhmF,EAAGgF,KAC1C,IAAIihF,EAAU,GAUd,OAPEA,EADEjhF,EAAI,GAAKA,EAAIg+E,EAAOloF,OAAS,EArCrC,SAAiB6H,EAAcoc,EAAcmnE,EAAcrzF,GACzD,MAAMszF,EAAWlhF,KAAKkyB,IAAI0rD,GAASlgF,EAAGoc,GAAK,EAAG8jE,GAAS9jE,EAAGmnE,GAAK,EAAGrzF,IAC5D,EAAE8kB,EAAC,EAAEpB,GAAMwI,EAGjB,GAAKpc,EAAEgV,IAAMA,GAAKA,IAAMuuE,EAAEvuE,GAAOhV,EAAE4T,IAAMA,GAAKA,IAAM2vE,EAAE3vE,EACpD,MAAO,IAAIoB,KAAKpB,IAIlB,GAAI5T,EAAE4T,IAAMA,EAGV,MAAO,KAAKoB,EAAIwuE,GAFHxjF,EAAEgV,EAAIuuE,EAAEvuE,GAAK,EAAI,MAEKpB,MAAMoB,KAAKpB,KAAKoB,KAAKpB,EAAI4vE,GAD/CxjF,EAAE4T,EAAI2vE,EAAE3vE,EAAI,GAAK,KAIhC,MAAM6vE,EAAOzjF,EAAEgV,EAAIuuE,EAAEvuE,EAAI,GAAK,EAE9B,MAAO,KAAKA,KAAKpB,EAAI4vE,GADRxjF,EAAE4T,EAAI2vE,EAAE3vE,GAAK,EAAI,OACWoB,KAAKpB,KAAKoB,EAAIwuE,EAAWC,KAAQ7vE,GAC5E,CAmBgB8vE,CAAQrD,EAAOh+E,EAAI,GAAIhF,EAAGgjF,EAAOh+E,EAAI,GAAI8B,GAEzC,GAAS,IAAN9B,EAAU,IAAM,MAAMhF,EAAE2X,KAAK3X,EAAEuW,IAG9CyvE,EAAOC,CAEG,GACT,IAEYlC,iBAAkB,CAAEpsE,EAAGqsE,EAAQztE,EAAG0tE,GACnD,CAnOqCqC,CAAkB,CACnDn1D,OAAQyxD,EACRA,eAAgBP,GAASG,MACzBvvD,OAAQ6wD,EACRA,eAAgBzB,GAASG,MACzB17E,aAAc,GACd2hD,OAAQ,KAGV,MAAO,CAAEzT,OAAM4uC,YAAaG,EAC9B,CEG0CwC,CAAWrD,GAC7CzB,EAAmByB,EAAYtR,YAAYE,UAAYf,GACvDv5D,EAAO0rE,EAAYniB,UACzB,IAAKvpD,EAAM,OAAO,KAClB,MAAM,IAAEu4D,EAAG,UAAED,GAAct4D,EACrBgvE,GAAavmC,EAAAA,GAAAA,GACjB,qBAAqBwmC,GAAAA,IAAe3W,MACnCyT,GAASE,IAAa,cAEzB,OACE7mF,EAAAA,EAAAA,MAAC8pF,GAAAA,IAAK,CAACjyF,GAAI2uF,EAAWuD,GAAAA,SAAY1tF,KAAeof,EAAI7gB,SAAA,EACnDoF,EAAAA,EAAAA,MAAA,KACE,eAAa,2BACboB,UAAWwoF,EACXI,YAAa,EACb7oF,IAAKyjF,EACLvjF,QAASb,EAAS5F,SAAA,EAElBF,EAAAA,EAAAA,KAAA,QAAM0G,UAAU,gCAAgC2tD,EAAGg4B,KACnDrsF,EAAAA,EAAAA,KAAA,QACEs0D,iBAAkB,GAClBi7B,cAAc,QACdl7B,EAAGg4B,EACH5wE,UAAU,qBACV+zE,eAAe,qBACf9oF,UAAU,+BAGb4lF,GACCtsF,EAAAA,EAAAA,KAAC8pF,GAAW,CACVI,SAAUkC,EACVrC,OAAQuC,EAAYjsE,EACpB2pE,OAAQsC,EAAYrtE,EACpByrB,OAAQ8tC,EACR2R,iBAAkBA,KACdrtF,EAAKoD,SAERu4E,IAED,MACJz4E,EAAAA,EAAAA,KAACyrF,GAAY,CACX9vD,OAAQiwD,EAAYlR,YAAY6R,cAChC1qF,MAAO,mEAAmEqtF,QAEtE,IAICO,GAA8EA,EACzFv4C,aACGn2B,MAEH,KAAK2uE,EAAAA,GAAAA,KAAOx4C,GACV,MAAM,IAAI5yB,MAAM,iDAElB,OAAOtkB,EAAAA,EAAAA,KAAC2rF,GAAe,CAACz0C,QAASA,KAAan2B,GAAQ,E,+DCvExD,MAAM4uE,GAAyD,CAC7DtW,iBAAkBuW,GAAAA,GAClBzW,IAAK0W,GAAAA,GACLzW,eAAgB3sD,GAAAA,GAChB6sD,WAAYwW,GAAAA,GACZ50B,kBAAmByO,GAAAA,GACnBvO,aAAc20B,GAAAA,GACdC,iBAAkB1vB,GAAAA,IAGP2vB,IAET/G,EAAAA,GAAAA,MAAS,EAAGhyC,UAASpxC,cAAaib,MACpC,MAAM,eAAEg3D,GAAmBC,KACrBkY,EACJh5C,EAAQuyB,WAAW11B,UAAUonB,gBAAgBogB,sBAAsBgF,iBAE/DpjF,EAAK+5C,EAAQsjC,QACbt6D,EAAOg3B,EAAQuyB,UACrB,IAAKvpD,IAAQiwE,EAAAA,GAAAA,KAAOj5C,GAAU,OAAO,KAErC,MAAM9xC,EAAOuqF,GAASO,GAAW,oBAEjC,OAAO/yF,IAAOs8E,IACZz5E,EAAAA,EAAAA,KAACsqE,GAAAA,IAAW,CACV55C,WAAS,EACTwmB,QAASA,EACTk5C,eAAgB,GAAGjzF,eACnB2I,SAAWwK,IACJ4/E,IACLnY,EAAe,QACfjyE,GAAYA,EAASwK,GAAE,EAEzBk6D,eAAgB,MACZzpD,EACJ0gB,MAAOvhB,GAAMuhB,MACbG,WAAY1hB,GAAM0hB,WAClByuD,eAAgBnwE,GAAMmwE,eACtBC,iBAAkBpwE,GAAMowE,iBAAiBpwF,UAEzCF,EAAAA,EAAAA,KAAA,KAAGyb,UAAW,oBAAoBvb,UAChCF,EAAAA,EAAAA,KAACoF,EAAI,CAACvD,MAAO,CAAEvF,MAAO,WAAa6Z,MAAO,GAAIG,OAAQ,UAI1DtW,EAAAA,EAAAA,KAACsqE,GAAAA,IAAW,IACNvpD,EACJm2B,QAASA,EACTk5C,eAAgB,GAAGjzF,eACnB2uF,UAAU,EACVthB,eAAgB,GAChB/oC,MAAOvhB,GAAMuhB,MACbG,WAAY1hB,GAAM0hB,WAClByuD,eAAgBnwE,GAAMmwE,eACtBC,iBAAkBpwE,GAAMowE,iBAAiBpwF,UAEzCF,EAAAA,EAAAA,KAAA,KAAGyb,UAAW,oBAAoBvb,UAChCF,EAAAA,EAAAA,KAACuwF,GAAAA,GAAQ,CAAC1uF,MAAO,CAAEvF,MAAO,WAAa6Z,MAAO,GAAIG,OAAQ,QAG/D,ICyDI,SAASk6E,GAAgB1zF,GAW9B,MAAM,QAAEo6C,GAAYp6C,EACdojB,EAAOg3B,EAAQuyB,UAEf3wC,EA3HD,SACLoe,GAUA,MAAM,IAAQ/vC,EAAAA,EAAAA,OACR,WAAEu1E,GAAe1E,KAEjBH,GAAaC,EAAAA,GAAAA,OACb2Y,GAAiBnwF,EAAAA,GAAAA,MAAQyvE,IACzBA,GACF74B,EAAQ4F,SAAS,CAAEizB,UAAU,IAC7B74B,EAAQojC,YAAYx9B,SAAS,CAAEizB,UAAU,IACzC8H,EAAW/6B,SAAS,IAAK+6B,EAAWI,WAA6BlI,UAAU,MAE3E74B,EAAQ4F,SAAS,CAAEizB,UAAU,IAC7B74B,EAAQojC,YAAYx9B,SAAS,CAAEizB,UAAU,IAC3C,IAEF,MAAO,CACL,CACE3jE,IAAK,UACLs+B,OAAQ0tC,GAAWntC,QACnB/nC,MACElD,EAAAA,EAAAA,KAACoF,EAAAA,EAAI,CAACslC,OAAO,UAASxqC,UACpBF,EAAAA,EAAAA,KAAC4qC,GAAAA,GAAe,MAGpBttC,MAAO4J,EAAE,kBACTP,QAAUuZ,KACR5f,EAAAA,GAAAA,MAAO,KACL42C,EAAQ6sB,QAAQ,IACX7jD,EACHu4D,IAAKvxE,EAAE,kBACPsxE,UAAWJ,GAAWntC,QACtB8tC,kBAAmB,YAErB0X,EAAe,YAAcvwE,EAAKy4D,eAAe,GAPnDr4E,EAQI,GAGR,CACE8L,IAAK,SACLs+B,OAAQ0tC,GAAWE,KACnBp1E,MACElD,EAAAA,EAAAA,KAACoF,EAAAA,EAAI,CAACslC,OAAO,OAAMxqC,UACjBF,EAAAA,EAAAA,KAACkI,EAAAA,GAAU,MAGf5K,MAAO4J,EAAE,cACTP,QAAUuZ,KACR5f,EAAAA,GAAAA,MAAO,KACL42C,EAAQ6sB,QAAQ,IACX7jD,EACHu4D,IAAKvxE,EAAE,cACPsxE,UAAWJ,GAAWE,KACtBS,kBAAmB,SAErB0X,EAAe,SAAWvwE,EAAKy4D,eAAe,GAPhDr4E,EAQI,GAGR,CACE8L,IAAK,OACLs+B,OAAQ0tC,GAAW9vE,OACnBpF,MACElD,EAAAA,EAAAA,KAACoF,EAAAA,EAAI,CAACslC,OAAO,SAAQxqC,UACnBF,EAAAA,EAAAA,KAACk3B,GAAAA,GAAqB,MAG1B55B,MAAO4J,EAAE,eACTP,QAAUuZ,KACR5f,EAAAA,GAAAA,MAAO,KACL42C,EAAQ6sB,QAAQ,IACX7jD,EACHu4D,IAAKvxE,EAAE,eACPsxE,UAAWJ,GAAW9vE,OACtBywE,kBAAmB,SAErB0X,EAAe,WAAavwE,EAAKy4D,eAAe,GAPlDr4E,EAQI,GAGR,CACE8L,IAAK,YACL9O,MAAO,KAET,CACE8O,IAAK,cACLlJ,MACElD,EAAAA,EAAAA,KAACoF,EAAAA,EAAI,CAACslC,OAAO,SAAQxqC,UACnBF,EAAAA,EAAAA,KAACsgE,GAAAA,GAAS,MAGdh5D,UAAU,EACVhK,MAAO4J,EAAE,eACTP,QAASA,KACP+1E,EAAWxlC,EAAQ,GAI3B,CAgBgBw5C,CAAiBx5C,GAE/B,OAAOpe,EAAM/xB,KAAKsV,GACG,MAAfA,EAAK/e,OACA0C,EAAAA,EAAAA,KAAC2wF,GAAAA,IAAoB,CAAC1oF,UAAU,MAAU,aAAaoU,EAAKjQ,QAInEpM,EAAAA,EAAAA,KAAC4wF,GAAAA,IAAe,CACd,UAASv0E,EAAKjQ,IAEdlJ,KAAMmZ,EAAKnZ,KACXoE,SAAU+U,EAAK/U,SACfX,QAASA,KACP0V,GAAM1V,SAAWuZ,GAAQ7D,EAAK1V,QAAQuZ,EAAK,EAC3ChgB,SAEDmc,EAAK/e,OAPD+e,EAAKjQ,MAWlB,CCvJA,MAAMq+D,IAAQ/nE,EAAAA,EAAAA,IAAOgoE,GAAAA,GAAQ9nE,WAAA,CAAAC,YAAA,qBAAfH,CAAe,0PAahBioE,GAASA,KACpB,MAAM,EAAEzjE,IAAMC,EAAAA,EAAAA,MAER6jE,EAAqBluE,IACzB,MAAM,MAAEQ,EAAK,KAAE4F,GAASpG,EACxB,OACEwI,EAAAA,EAAAA,MAAA,OAAApF,SAAA,EACEF,EAAAA,EAAAA,KAAA,QAAM6B,MAAO,CAAEE,YAAa,QAAS7B,SAAEgD,KACvClD,EAAAA,EAAAA,KAAA,QAAAE,SAAO5C,MACH,EAIV,OACE0C,EAAAA,EAAAA,KAACyqE,GAAK,CAAC,UAAQ,6BAA4BvqE,UACzCF,EAAAA,EAAAA,KAACirE,GAAAA,EAAS,CAAA/qE,UACRF,EAAAA,EAAAA,KAACkrE,GAAAA,EAAa,CAAAhrE,UACZoF,EAAAA,EAAAA,MAAC4c,GAAAA,EAAe,CAAAhiB,SAAA,EACdoF,EAAAA,EAAAA,MAAC+b,GAAAA,EAAoB,CAAC,UAAQ,oBAAmBnhB,SAAA,EAC/CF,EAAAA,EAAAA,KAACuhB,GAAAA,EAAmB,CAAArhB,SAAEgH,EAAE,iBACxBlH,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,UACzBF,EAAAA,EAAAA,KAACgrE,EAAiB,CAAC1tE,MAAO4J,EAAE,gBAAiBhE,MAAMlD,EAAAA,EAAAA,KAAC6vF,GAAAA,GAAkB,SAExE7vF,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,UACzBF,EAAAA,EAAAA,KAACgrE,EAAiB,CAAC1tE,MAAO4J,EAAE,qBAAsBhE,MAAMlD,EAAAA,EAAAA,KAAC+vF,GAAAA,GAAY,SAEvE/vF,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,UACzBF,EAAAA,EAAAA,KAACgrE,EAAiB,CAAC1tE,MAAO4J,EAAE,gBAAiBhE,MAAMlD,EAAAA,EAAAA,KAACysB,GAAAA,GAAW,SAEjEzsB,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,UACzBF,EAAAA,EAAAA,KAACgrE,EAAiB,CAAC1tE,MAAO4J,EAAE,iBAAkBhE,MAAMlD,EAAAA,EAAAA,KAAC2pE,GAAAA,GAAS,SAEhE3pE,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,UACzBF,EAAAA,EAAAA,KAACgrE,EAAiB,CAAC1tE,MAAO4J,EAAE,oBAAqBhE,MAAMlD,EAAAA,EAAAA,KAAC4vF,GAAAA,GAAqB,SAE/E5vF,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,UACzBF,EAAAA,EAAAA,KAACgrE,EAAiB,CAAC1tE,MAAO4J,EAAE,cAAehE,MAAMlD,EAAAA,EAAAA,KAAC8vF,GAAAA,GAAO,YAG7DxqF,EAAAA,EAAAA,MAAC+b,GAAAA,EAAoB,CAAC,UAAQ,2BAA0BnhB,SAAA,EACtDF,EAAAA,EAAAA,KAACuhB,GAAAA,EAAmB,CAAArhB,SAAEgH,EAAE,wBACxBlH,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,UACzBF,EAAAA,EAAAA,KAACgrE,EAAiB,CAChB1tE,MAAO4J,EAAE,UACThE,MACElD,EAAAA,EAAAA,KAACoF,EAAAA,EAAI,CAACslC,OAAO,SAAQxqC,UACnBF,EAAAA,EAAAA,KAACk3B,GAAAA,GAAqB,WAK9Bl3B,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,UACzBF,EAAAA,EAAAA,KAACgrE,EAAiB,CAChB1tE,MAAO4J,EAAE,WACThE,MACElD,EAAAA,EAAAA,KAACoF,EAAAA,EAAI,CAACslC,OAAO,UAASxqC,UACpBF,EAAAA,EAAAA,KAACssC,GAAAA,GAAuB,cAMlChnC,EAAAA,EAAAA,MAAC+b,GAAAA,EAAoB,CAAC,UAAQ,0BAAyBnhB,SAAA,EACrDF,EAAAA,EAAAA,KAACuhB,GAAAA,EAAmB,CAAArhB,SAAEgH,EAAE,uBACxBlH,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,UACzBF,EAAAA,EAAAA,KAACgrE,EAAiB,CAChB1tE,MAAO4J,EAAE,kBACThE,MACEoC,EAAAA,EAAAA,MAACF,EAAAA,EAAI,CAACslC,OAAO,UAASxqC,SAAA,EACpBF,EAAAA,EAAAA,KAAC4qC,GAAAA,GAAe,IAAI,YAK5B5qC,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,UACzBF,EAAAA,EAAAA,KAACgrE,EAAiB,CAChB1tE,MAAO4J,EAAE,eACThE,MACElD,EAAAA,EAAAA,KAACoF,EAAAA,EAAI,CAACslC,OAAO,SAAQxqC,UACnBF,EAAAA,EAAAA,KAACk3B,GAAAA,GAAqB,WAK9Bl3B,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,UACzBF,EAAAA,EAAAA,KAACgrE,EAAiB,CAChB1tE,MAAO4J,EAAE,cACThE,MACElD,EAAAA,EAAAA,KAACoF,EAAAA,EAAI,CAACslC,OAAO,OAAMxqC,UACjBF,EAAAA,EAAAA,KAACkI,EAAAA,GAAU,qBASrB,ECvDL,SAAS2oF,GAAgB/zF,GAC9B,MAAM,QAAEo6C,GAAYp6C,EAEdg8B,EA5DD,SAA0Boe,GAC/B,MAAM,IAAQ/vC,EAAAA,EAAAA,OACR,YAAE+wE,IAAgBJ,EAAAA,GAAAA,OAA6BG,YAC/C,eAAEF,GAAmBC,MACpBlrE,EAAGgkF,IAAkBC,EAAAA,GAAAA,KAAsB,cAAe7Y,IAC3D,YAAE0D,GAAgB5D,MACjBgZ,EAAIC,IAAiBF,EAAAA,GAAAA,KAAsB,cAC5C5zF,EAAK+5C,EAAQsjC,QAEnB,OAAOr9E,IAAOs8E,GACV,CACE,CACErtE,IAAK,WACLlJ,MAAMlD,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrBx6B,MAAO4J,EAAE,YACTP,QAASA,KACPoxE,EAAe,MAAM,IAI3B,CACE,CACE3rE,IAAK,YACLlJ,MAAMlD,EAAAA,EAAAA,KAACg8D,GAAAA,GAAa,IACpB1+D,MAAO4J,EAAE,aACTP,QAASA,MACPrG,EAAAA,GAAAA,MAAO,KACLy3E,EAAe,QACf+Y,EAAe,CAAC3zF,GAAI,GAFtBmD,EAGI,GAGR,CACE8L,IAAK,oBACLlJ,MAAMlD,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrBx6B,MAAO4J,EAAE,qBACTP,QAASA,KACPoxE,EAAe,OACfkZ,EAAc/5C,EAAQ,GAG1B,CACE9qC,IAAK,YACL9O,MAAO,KAET,CACE8O,IAAK,cACLlJ,MAAMlD,EAAAA,EAAAA,KAAC4pE,GAAAA,GAAe,IACtBtiE,UAAU,EACVhK,MAAO4J,EAAE,eACTP,QAASA,KACPi1E,EAAY,CAAC1kC,GAAS,GAIlC,CAKgBg6C,CAAiBh6C,GAC/B,OAAOpe,EAAM/xB,KAAKsV,GACG,MAAfA,EAAK/e,OACA0C,EAAAA,EAAAA,KAAC2wF,GAAAA,IAAoB,CAAC1oF,UAAU,MAAU,aAAaoU,EAAKjQ,QAInEpM,EAAAA,EAAAA,KAAC4wF,GAAAA,IAAe,CACd,UAASv0E,EAAKjQ,IAEdlJ,KAAMmZ,EAAKnZ,KACXoE,SAAU+U,EAAK/U,SACfX,QAASA,KACP0V,GAAM1V,SAAW0V,EAAK1V,SAAS,EAC/BzG,SAEDmc,EAAK/e,OAPD+e,EAAKjQ,MAWlB,CCvGO,SAAS+kF,GAAmBz2F,GACjC,MAAM,IAAQyM,EAAAA,EAAAA,MAEd,OAAQzM,GACN,KAAK,EACH,OAAOwM,EAAE,cACX,KAAK,EACH,OAAOA,EAAE,eACX,KAAK,EACH,OAAOA,EAAE,oBACX,KAAK,EACH,OAAOA,EAAE,aACX,KAAK,EACH,OAAOA,EAAE,wBACX,KAAK,EACH,OAAOA,EAAE,mBACX,QACE,MAAO,GAEb,CCZO,SAASkqF,IAAuB,OAAEv3D,IACvC,MAAM,IAAQ1yB,EAAAA,EAAAA,MACRy9C,EAAaT,KACbktC,EA0CR,WACE,MAAQnxE,KAAMmxE,GAAkBztB,GAC9BnS,EAAM,uBAEF6/B,EAAYD,GAAe/tF,SAASmhE,KAAK5qC,QAAQgsC,SAAS9nD,QAC9D,CAACC,GAAM5R,EAAKogC,MACVxuB,EAAI5R,GAAOogC,EACJxuB,IAET,CAAC,GAEH,OAAOszE,GAAa,CAAC,CACvB,CAtDwBC,GAChBC,EAAkBL,GAAmBt3D,EAAOgpD,WAElD,OACEv9E,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,gBAAiBka,SAAUyY,EAAOshC,eAAeiV,aAAalwE,UACjFF,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAMorB,EAAOshC,eAAeiV,cAAchzE,KAC1C0K,GAAI88C,EAAWgW,GAAS62B,oBAAqB,CAC3CptC,OAAQ,CAAElnD,GAAI08B,EAAOshC,eAAeiV,cAAcjzE,WAIxD6C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,aAAcka,SAAUyY,EAAOshC,eAAeoV,UAAUrwE,UAC3EF,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAMorB,EAAOshC,eAAeoV,WAAWnzE,KACvC0K,GAAI88C,EAAWgW,GAAS82B,iBAAkB,CACxCrtC,OAAQ,CAAElnD,GAAI08B,EAAOshC,eAAeoV,WAAWpzE,WAIrD6C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,WAAYka,SAAUyY,EAAOshC,eAAew2B,eAAezxF,UAC9EF,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAMorB,EAAOshC,eAAew2B,gBAAgBv0F,KAC5C0K,GAAI88C,EAAWgW,GAASg3B,eAAgB,CACtCvtC,OAAQ,CAAElnD,GAAI08B,EAAOshC,eAAew2B,gBAAgBx0F,WAI1D6C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,CAAC,SAAShH,SAAEmxF,EAAcx3D,EAAOA,WACpD75B,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,CAAC,iBAAiBhH,SACX,KAAvB25B,EAAOg4D,YAAqB3qF,CAAC,mBAAqB2yB,EAAOg4D,eAE5D7xF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,CAAC,YAAYhH,SAAEsxF,KAClCxxF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,CAAC,wBAAwBhH,SAAE25B,EAAOyoD,cACrDtiF,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,iBAAiBhH,SAC1B,GAAG25B,GAAQi4D,mCAGnB,CCxCO,SAASC,GAAaj1F,GAO3B,MAAM,IAAQqK,EAAAA,EAAAA,OACR,MAAE7J,EAAK,SAAE4C,EAAQ,aAAE8xF,GAAe,EAAK,gBAAEC,EAAkB,GAAE,QAAE7wE,GAAU,GAAUtkB,EAEzF,GAAIoD,SAAqE,KAAbA,EAC1D,OAAOF,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,IAET,GAAI0c,EACF,OAAOphB,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,IAGT,IAAIjD,EAAU,KACd,GAAIuwF,EAAc,CAChB,MAAME,EAAiBhrF,EAAE,kEACnBhC,GACJI,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,CACGgyF,EAAe,IAAED,KAItBxwF,GACEzB,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CAACoB,SAAS,QAAQnB,QAASiD,EAAehF,UAChDF,EAAAA,EAAAA,KAACoF,EAAAA,EAAI,CAACgO,UAAQ,EAAC7X,KAAK,KAAKoM,SAAS,KAAIzH,UACpCF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAAC,aAAW,YAAYlC,QAAQ,QAAQlG,GAAG,SAAQ+C,UACxDF,EAAAA,EAAAA,KAAC6vF,GAAAA,GAAkB,SAK7B,CAEA,OACEvqF,EAAAA,EAAAA,MAAC+b,GAAAA,EAAoB,CAAAnhB,SAAA,CAClB5C,IACCgI,EAAAA,EAAAA,MAACic,GAAAA,EAAmB,CAAArhB,SAAA,CACjB5C,EACAmE,MAGLzB,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,SAAEA,MAGnC,CCvDO,SAASiyF,IAAqB,MACnC70F,EAAK,cACL80F,EAAa,kBACbC,IAMA,MAAM,GAAEl1F,IAAOkgE,EAAAA,GAAAA,MACT,EAAEn2D,IAAMC,EAAAA,EAAAA,MAERzM,EAAQ03F,GAAiBC,EACzBC,EAAU53F,EAAMipB,SAAW0uE,EAAkB1uE,OAEnD,OACE3jB,EAAAA,EAAAA,KAAC+xF,GAAY,CACXz0F,MAAOA,GAAS4J,EAAE,aAClBka,SAAU1mB,EACVs3F,cAAeM,EACfL,gBAAiBI,EAAkBnyF,UAEnCF,EAAAA,EAAAA,KAACi3E,GAAAA,EAAS,CAAC95E,GAAIA,EAAG+C,UAChBF,EAAAA,EAAAA,KAACk3E,GAAAA,EAAa,CAAC,UAAS,mBAAmBh3E,SAAExF,OAIrD,CCvBO,SAAS63F,IAAc,MAC5Bj1F,EAAK,SACLk1F,EAAW,GAAE,aACbC,EAAe,KAMf,MAAM1L,EAAOyL,EAAShvF,OAAS,EAAIgvF,EAAWC,EACxCH,EAiBR,SAAqBI,EAAqCC,GACxD,GAAID,EAAKlvF,SAAWmvF,EAAKnvF,OACvB,OAAO,EAGT,MAAMovF,EAAS,IAAI9mE,IAAI4mE,EAAK3rF,KAAKozC,GAAQA,EAAI/8C,QACvCy1F,EAAS,IAAI/mE,IAAI6mE,EAAK5rF,KAAKozC,GAAQA,EAAI/8C,QAE7C,GAAIw1F,EAAOr3F,OAASs3F,EAAOt3F,KACzB,OAAO,EAET,IAAK,MAAM8gB,KAAQu2E,EACjB,IAAKC,EAAO9mE,IAAI1P,GACd,OAAO,EAGX,OAAO,CACT,CAlCkBy2E,CAAY/L,EAAM0L,GAElC,OACEzyF,EAAAA,EAAAA,KAAC+xF,GAAY,CACXz0F,MAAOA,EACP8jB,QAA0B,IAAjB2lE,GAAMvjF,OACfwuF,cAAeM,EACfL,gBAAiBQ,EAAa1rF,KAAK0xE,GAAQA,EAAIr7E,OAAMqK,KAAK,MAAMvH,UAEhEF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACR6mF,EAAKhgF,KAAK0xE,IACTz4E,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAAnU,SAAiBu4E,EAAIr7E,MAAfq7E,EAAIr7E,WAK1B,CChCO,SAAS21F,KACd,MAAM,EAAE7rF,IAAMC,EAAAA,EAAAA,MACd,OAAO9C,EAAAA,EAAAA,UACL,IAAM,CACJ,CAAE/G,MAAO4J,CAAC,SAAUxM,MAAO,UAC3B,CAAE4C,MAAO4J,CAAC,SAAUxM,MAAO,UAC3B,CAAE4C,MAAO4J,CAAC,wBAAyBxM,MAAO,kBAE5C,CAACwM,GAEL,CAEO,SAAS8rF,GAAel2F,GAC7B,MAAM,QAAEm2F,GAAYn2F,EACdupB,EAAU0sE,KAEVG,EAAkB7sE,EAAQ7hB,MAAMuiB,GAAWA,EAAOrsB,QAAUu4F,KAAU31F,MAE5E,GAAK41F,EAEL,OAAOA,CACT,CC2HO,SAASC,IAAmB,KACjCthE,EAAI,SACJ8zD,IAKA,MAAM,EAAEz+E,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,MAEb,YACJgL,EAAW,SACXikC,EAAQ,qBACRC,EAAoB,MACpBvR,EAAK,eACLjN,EAAc,UACdtE,EAAS,cACT+iB,EAAa,QACbC,EAAO,QACPrD,EAAO,OACPhmF,EAAM,MACN8/B,EAAK,UACLwpD,EAAS,SACTC,EAAQ,oBACRxO,EAAmB,uBACnByO,EAAsB,sBACtBC,EAAqB,wBACrBC,EAAuB,QACvBroF,EAAO,cACPsoF,EAAa,UACbC,EAAS,UACTjR,EAAS,gBACT2O,EAAe,WACfuC,GArJJ,UAAwC,SACtCpO,EAAQ,KACR9zD,IAKA,MAAQyvD,YAAa0S,EAAcjR,YAAakR,EAAclgD,SAAUmgD,GAAeriE,GAC/E3R,KAAMi0E,GAAel+B,GAAiCi+B,GAAY3c,SAASrtE,SAC3EgW,KAAM6zE,GAAe99B,GAAgC0vB,GAAUpO,SAASiP,cACxEtmE,KAAMk0E,GAAuBn+B,GACnCi+B,GAAY3c,SAASsN,kBAEf3kE,KAAMwzE,GAA2Bz9B,GACvC0vB,GAAUpO,SAASsN,kBAEb3kE,KAAMilE,GAAoBlvB,GAChCi+B,GAAY3c,SAASpoB,cAEfjvC,KAAM+kE,GAAwBhvB,GACpC0vB,GAAUpO,SAASpoB,cAGbjvC,KAAMm0E,GAAch+B,GAC1B5E,EAAM,2BACN/jB,OAAOsmD,GAAcpS,wBAGjBzyB,EACJ6kC,GAAc7kC,aAAeg2B,GAAiBjzB,SAAW+yB,GAAqB/yB,QAC1EkhC,EAAWY,GAAcxS,WAAa0S,GAAY1S,WAAamE,EAASnE,UAC9E,IAAI6R,EAGFA,EADEW,GAAcpS,uBAAyByS,EAClBA,EAGrBH,GAAY/4B,gBAAgBymB,uBAC5B+D,EAASxqB,eAAeymB,sBAG5B,MAAME,EAAQtnF,OAAOw5F,GAAclS,OAASoS,GAAYpS,OAAS6D,EAAS7D,OACpEjN,EACJmf,GAAcnP,iBAAmBuP,GAAoBliC,SAAWwhC,GAAwBxhC,QACpFqe,EACJyjB,GAAczjB,WACd2jB,EAAW/4B,eAAeoV,WAC1BoV,EAASxqB,eAAeoV,UACpB+iB,EACJU,GAAc/R,iBAAmBiS,GAAYjS,iBAAmB0D,EAAS1D,gBACrEsR,EACJS,GAActR,UAAYsD,GAAsBkO,GAAYxR,UAAYiD,EAASjD,UAC7EwN,EAAU8D,GAAc7R,UAAY+R,GAAY/R,UAAYwD,EAASxD,SACrEj4E,EACJ8pF,GAAc9pF,QAAUiqF,GAAYjiC,SAAWyzB,EAASxqB,eAAejxD,QAAQgoD,QAC3EloB,EAAQgqD,GAAchqD,OAASkqD,GAAYlqD,OAAS27C,EAAS37C,MAC7DwpD,EAAYQ,GAAc1R,YAAc4R,GAAY5R,YAAcqD,EAASrD,WAC3EmR,EACJO,GAAcxR,WAAawD,GAAsBkO,GAAY1R,WAAamD,EAASnD,WAC/Ej3E,EAAU/Q,OAAOw5F,GAAczoF,SAAW2oF,GAAY3oF,SAAWo6E,EAASp6E,SAC1EsoF,EAAgBpO,GAAoBl6E,GACpCooF,EAAwBlO,GAAoBE,EAASp6E,SACrDs3E,EAAYmR,GAAcnR,WAAaqR,GAAYrR,WAAa8C,EAAS9C,UACzE2O,EAAkBL,GAAmBtO,GACrC+Q,EAA0BzC,GAAmBxL,EAAS9C,WAC5D,IAAIiR,EACFE,GAAchR,aACbkR,GAAYxS,WAAa/E,GAAWvsE,KAAKa,UAAUijF,EAAWxS,kBAAe//E,IAC9EgkF,EAAS3C,WAEX,GAAIiR,EAAc,CAChB,MAAMK,EAAqC,CAAC,EAExCR,GACYA,EAAUtsF,MAAM,MACxB4xB,SAASwsC,IACb,MAAOx5D,EAAK1R,GAASkrE,EAAKp+D,MAAM,KAAKT,KAAKwtF,GAASA,EAAK5wE,SACxD2wE,EAAQloF,GAAO1R,CAAK,IAIxB,MAAM85F,EAAwE,IACzEF,KACAL,GAGLH,EAAYnX,GAAWvsE,KAAKa,UAAUujF,GACxC,CAEA,MAAO,CACLrlC,cACAikC,WACAC,uBACAvR,QACAjN,iBACAtE,YACA+iB,gBACAC,UACArD,UACAhmF,SACA8/B,QACAwpD,YACAC,WACAxO,sBACAyO,yBACAC,wBACAC,0BACAroF,UACAsoF,gBACAC,YACAjR,YACA2O,kBACAuC,aAEJ,CAoCMU,CAA+B,CAAE9O,WAAU9zD,SAE/C,OACEvsB,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAC+xF,GAAY,CACXz0F,MAAO4J,EAAE,YACTka,SAAU8uE,EACV8B,aAAc9B,IAAYvK,EAASxD,SACnC8P,gBAAiBtM,EAASxD,SAASjiF,SAElCgwF,KAEHlwF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,gBAAiBka,SAAUukE,EAASxqB,eAAeiV,aAAalwE,UACnFF,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAMk3E,EAASxqB,eAAeiV,cAAchzE,KAC5C0K,GAAI88C,EAAWgW,GAAS62B,oBAAqB,CAC3CptC,OAAQ,CAAElnD,GAAIwoF,EAASxqB,eAAeiV,cAAcjzE,WAI1D6C,EAAAA,EAAAA,KAAC+xF,GAAY,CACXz0F,MAAO4J,EAAE,aACT8qF,aAAczhB,GAAWpzE,KAAOwoF,EAASxqB,eAAeoV,WAAWpzE,GACnE80F,gBAAiBtM,EAASxqB,eAAeoV,WAAWnzE,KACpDgkB,SAAUmvD,EAAUrwE,UAEpBF,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAM8hE,GAAWnzE,KACjB0K,GAAI88C,EAAWgW,GAAS82B,iBAAkB,CACxCrtC,OAAQ,CAAElnD,GAAIozE,GAAWpzE,WAI/B6C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,WAAYka,SAAUukE,EAASxqB,eAAeyV,QAAQ1wE,UACzEF,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAMk3E,EAASxqB,eAAeyV,SAASxzE,KACvC0K,GAAI88C,EAAWgW,GAASg3B,eAAgB,CACtCvtC,OAAQ,CAAElnD,GAAIwoF,EAASxqB,eAAeyV,SAASzzE,WAKrD6C,EAAAA,EAAAA,KAAC+xF,GAAY,CACX3wE,SAAUiyE,EACV/1F,MAAO4J,EAAE,yBACT+qF,gBAAiBtM,EAASxqB,gBAAgBymB,uBAAuBxkF,KACjE40F,aACEqB,GAAsBl2F,KAAOwoF,EAASxqB,gBAAgBymB,uBAAuBzkF,GAC9E+C,UAEDF,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAM4kF,GAAsBj2F,KAC5B0K,GAAI88C,EAAWgW,GAAS85B,4BAA6B,CACnDrwC,OAAQ,CACNlnD,GAAIk2F,GAAsBl2F,WAKlC6C,EAAAA,EAAAA,KAAC20F,GAAiB,CAChBxlC,YAAaA,EACb81B,oBAAqBA,GAAqB/yB,SAAW,MAEvDlyD,EAAAA,EAAAA,KAAC40F,GAAoB,CACnB/f,eAAgBA,EAChB6e,uBAAwBA,GAAwBxhC,SAAW,MAE7DlyD,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,YAAYhH,SAAEylF,EAASM,YAC5CjmF,EAAAA,EAAAA,KAAC+xF,GAAY,CACXz0F,MAAO4J,EAAE,yBACTka,SAAUoyE,EACVxB,aAAcwB,IAAc7N,EAASrD,WACrC2P,gBAAiBtM,EAASrD,WAAWpiF,SAEpCszF,KAEHxzF,EAAAA,EAAAA,KAAC+xF,GAAY,CACXz0F,MAAO4J,EAAE,SACTka,SAAU0gE,EACVkQ,aAAclQ,IAAU6D,EAAS7D,MACjCmQ,gBAAiBtM,EAAS7D,MAAM5hF,SAE/B4hF,KAEH9hF,EAAAA,EAAAA,KAAC+xF,GAAY,CACXz0F,MAAO4J,EAAE,SACTka,SAAU4oB,EACVgoD,aAAchoD,IAAU27C,EAAS37C,MACjCioD,gBAAiBtM,EAAS37C,MAAM9pC,SAE/B8pC,KAEHhqC,EAAAA,EAAAA,KAAC+xF,GAAY,CACXz0F,MAAO4J,EAAE,aACTka,SAAUyhE,EACVmP,aAAcnP,IAAc8C,EAAS9C,UACrCoP,gBAAiB2B,EAAwB1zF,SAExCsxF,KAEHxxF,EAAAA,EAAAA,KAAC+xF,GAAY,CACXz0F,MAAO4J,EAAE,gBACTka,SAAUgyE,EACVpB,aAAcoB,IAAazN,EAASnE,UACpCyQ,gBAAiBtM,EAASnE,UAAYt6E,CAAC,KAAOA,CAAC,MAAMhH,SAEpDkzF,EAAWlsF,CAAC,KAAOA,CAAC,SAEvBlH,EAAAA,EAAAA,KAAC+xF,GAAY,CACXz0F,MAAO4J,EAAE,eACTka,SAAUkyE,EACVtB,aAAcsB,IAAkB3N,EAAS1D,gBACzCgQ,gBAAiBtM,EAAS1D,gBAAgB/hF,SAEzCozF,KAEHtzF,EAAAA,EAAAA,KAAC+xF,GAAY,CACXz0F,MAAO4J,EAAE,WACTka,SAAU7V,EACVymF,aAAczmF,IAAYo6E,EAASp6E,QACnC0mF,gBAAiB0B,EAAsBzzF,SAEtC2zF,KAEH7zF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,mBAAoBka,SAAUukE,EAASS,gBAAgBlmF,UAC1EF,EAAAA,EAAAA,KAACgzF,GAAc,CAACC,QAAStN,EAASS,qBAEpCpmF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,eAAgBka,SAAU2yE,GAAYvN,YAAYtmF,SACpE6zF,GAAYvN,eAEfxmF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,eAAgBka,SAAU2yE,GAAYvN,YAAYtmF,SACpE,GAAGvE,OAAO07B,SAASkvD,SAASZ,EAASpO,QAAQ+O,sBAEhDtmF,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,mBACTka,UAAWukE,EAASC,oBAAsBD,EAASS,iBAAiBlmF,UAEpEoF,EAAAA,EAAAA,MAAC4vD,GAAAA,EAAQ,CAACjtD,UAAW4sF,GAAAA,EAAiBC,GAAG50F,SAAA,CACtCylF,EAASC,qBACR5lF,EAAAA,EAAAA,KAACm1D,GAAAA,EAAY,CAACltD,UAAW8sF,GAAAA,EAAqBC,GAAG90F,SAAEgH,CAAC,oBAErDy+E,EAASS,kBACRpmF,EAAAA,EAAAA,KAACm1D,GAAAA,EAAY,CAACltD,UAAW8sF,GAAAA,EAAqBC,GAAG90F,SAAEgH,CAAC,mBAI1DlH,EAAAA,EAAAA,KAACuyF,GAAa,CACZj1F,MAAO4J,EAAE,UACTsrF,SAAUtoF,EACVuoF,aAAc9M,EAASxqB,eAAejxD,QAAQgoD,WAEhDlyD,EAAAA,EAAAA,KAACuyF,GAAa,CACZj1F,MAAO4J,EAAE,YACTsrF,SAAUe,EACVd,aAAczM,GAAsBL,EAASjD,UAAY,OAE3D1iF,EAAAA,EAAAA,KAACuyF,GAAa,CACZj1F,MAAO4J,EAAE,aACTsrF,SAAUiB,EACVhB,aAAczM,GAAsBL,EAASnD,WAAa,OAE5DxiF,EAAAA,EAAAA,KAACmyF,GAAoB,CACnB70F,MAAO4J,EAAE,aACTkrF,cAAe0B,EACfzB,kBAAmB1M,EAAS3C,eAIpC,CAEA,SAAS2R,IAAkB,YACzBxlC,EAAc,GAAE,oBAChB81B,EAAsB,KAKtB,MAAM,EAAE/9E,IAAMC,EAAAA,EAAAA,MACRmrF,EAAU2C,GACd9lC,EAAYpoD,KAAI,EAAG5J,SAAS,CAAGA,SAC/B8nF,GAGF,OACEjlF,EAAAA,EAAAA,KAAC+xF,GAAY,CACXz0F,MAAO4J,CAAC,cACRka,QAAiC,IAAxB+tC,GAAa3rD,OACtBwuF,cAAeM,EACfL,gBAAiBhN,EAAoBl+E,KAAKmuF,GAAOA,EAAG93F,OAAMqK,KAAK,MAAMvH,UAErEF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACRivD,GAAapoD,KAAK6nE,IACjB5uE,EAAAA,EAAAA,KAAC2uE,GAAe,CAACC,WAAYA,GAA+BA,EAAWzxE,SAKjF,CAEA,SAASy3F,IAAqB,eAC5B/f,EAAiB,GAAE,uBACnB6e,EAAyB,KAKzB,MAAM,EAAExsF,IAAMC,EAAAA,EAAAA,MACRmrF,EAAU2C,GACdpgB,EAAe9tE,KAAI,EAAG5J,SAAS,CAC7BA,SAEFu2F,GAEI9uC,EAAaT,KACnB,OACEnkD,EAAAA,EAAAA,KAAC+xF,GAAY,CACXz0F,MAAO4J,CAAC,kBACRka,QAAoC,IAA3ByzD,GAAgBrxE,OACzBwuF,cAAeM,EACfL,gBAAiByB,EAAuB3sF,KAAKmuF,GAAOA,EAAG93F,OAAMqK,KAAK,MAAMvH,UAExEF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACR20E,GAAgB9tE,KAAKmuF,IACpBl1F,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAC/X,MAAM,OAAM4D,UACjBF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS0c,qBAAsB,CAC5CjzB,OAAQ,CACNlnD,GAAI+3F,EAAG/3F,MAER+C,SAEFg1F,EAAG93F,QARiB83F,EAAG/3F,SAetC,CAEA,SAAS83F,GAAcvC,EAAwBC,GAC7C,GAAID,EAAKlvF,SAAWmvF,EAAKnvF,OACvB,OAAO,EAGT,MAAMovF,EAAS,IAAI9mE,IAAI4mE,EAAK3rF,KAAKozC,GAAQA,EAAIh9C,MACvC01F,EAAS,IAAI/mE,IAAI6mE,EAAK5rF,KAAKozC,GAAQA,EAAIh9C,MAE7C,GAAIy1F,EAAOr3F,OAASs3F,EAAOt3F,KACzB,OAAO,EAET,IAAK,MAAM8gB,KAAQu2E,EACjB,IAAKC,EAAO9mE,IAAI1P,GACd,OAAO,EAGX,OAAO,CACT,CC1aA,MAAM84E,GAAiD,CACrD9b,iBAAkBze,GAASw6B,sBAC3Bjc,IAAKve,GAASu4B,mBACd/Z,eAAgBxe,GAASg3B,eACzBtY,WAAY1e,GAASy6B,uBACrBn6B,kBAAmBN,GAASU,wBAC5BF,aAAcR,GAAS06B,4BAGlB,SAASC,IAAe,SAAE3V,IAC/B,MAAM,IAAQz4E,EAAAA,EAAAA,MACRy9C,EAAaT,MAEb,GAAEhnD,EAAE,KAAEC,EAAMmjF,iBAAkB98E,GAASm8E,EAASzkB,gBAAgBogB,sBAAwB,CAAC,EAC/F,IAAI/mE,EAEJ,GAAI/Q,IAASi2E,GAAcL,iBACzB7kE,GAAOxU,EAAAA,EAAAA,KAACw1F,GAAmB,CAACr4F,GAAIA,GAAIqhB,YAAc,GAAGte,SAAE9C,SAClD,GAAIqG,EAAM,CACf,MAAM2gD,EAAMQ,EAAWuwC,GAAa1xF,GAAO,CACzC4gD,OAAQ,CAAElnD,QAEZqX,GAAOxU,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CAACC,GAAIs8C,EAAIlkD,SAAE9C,GACzB,CAEA,OACE4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,QAAQhH,SAC1BuD,IAASi2E,GAAcxe,mBAAqBz3D,IAASi2E,GAAcJ,WAAal8E,EAAOoX,GAG9F,CAEA,SAASghF,IAAoB,GAAEr4F,EAAE,SAAE+C,IACjC,MAAM0kD,EAAaT,MACXjkC,KAAMu1E,GAAoBx/B,GAAwBxE,EAAM,sBAAsBt0D,MAEhFu4F,EAAgBD,GAAiBt6B,gBAAgBoV,UAAUzB,MAAQ,YACnE6mB,EAAcF,GAAiBllB,UAE/BnsB,EAAMQ,EAAWgW,GAASw6B,sBAAuB,CACrD/wC,OAAQ,CACNuxC,UAAWH,GAAiBt4F,GAC5BA,GAAIw4F,EACJnlB,eAAgBklB,KAIpB,OAAO11F,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CAACC,GAAIs8C,EAAIlkD,SAAEA,GACzB,CCzBO,SAAS21F,GAAQ/4F,GACtB,MAAMg5F,EAjCD,SAAoBC,GAIzB,OAAQA,GACN,IAAK,MACH,MAAO,CACLtnF,KAAM,OAEV,IAAK,MACH,MAAO,CACLA,KAAM,OAEV,IAAK,GACH,MAAO,CACLA,KAAM,UAEV,IAAK,WACH,MAAO,CACLA,KAAM,YAEV,IAAK,UACH,MAAO,CACLA,KAAM,kBAEV,QACE,MAAO,CACLA,KAAM,WAGd,CAGcunF,CAAWl5F,EAAMm5F,SAC7B,OAAOj2F,EAAAA,EAAAA,KAACmV,GAAQ,CAACjS,KAAM4yF,EAAI5yF,KAAMyE,SAAS,KAAK8G,KAAMqnF,EAAIrnF,MAC3D,CC/BO,SAASmjF,IAAe,QAAEhhB,IAC/B,MAAM,IAAQzpE,EAAAA,EAAAA,MACR2xD,EAASvC,KACT3R,EAAaT,KAEnB,OACE7+C,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,gBAAiBka,SAAUwvD,EAAQzV,eAAeiV,aAAalwE,UAClFF,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAMmiE,EAAQzV,eAAeiV,cAAchzE,KAC3C0K,GAAI88C,EAAWgW,GAAS62B,oBAAqB,CAC3CptC,OAAQ,CAAElnD,GAAIyzE,EAAQzV,eAAeiV,cAAcjzE,WAIzD6C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,uBAAuBhH,UAC1CF,EAAAA,EAAAA,KAAC61F,GAAO,CAACI,QAASrlB,EAAQmlB,aAE3BnlB,EAAQslB,eACPl2F,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,2BAA2BhH,UAC9CF,EAAAA,EAAAA,KAACiP,GAAQ,CAACR,KAAMmiE,EAAQslB,kBAG5Bl2F,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,sBAAsBhH,SAAE0wE,EAAQulB,WACrDn2F,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,yBAAyBhH,SAAE0wE,EAAQ0R,cACxDtiF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,0BAA0BhH,SAAE0wE,EAAQwlB,eACzDp2F,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,iBAAiBhH,SACnC,GAAG0wE,EAAQylB,sCAEdr2F,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,qBAAqBhH,SAAE44D,GAAQw9B,oBACpDt2F,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,sBAAsBhH,SAAE0wE,EAAQ2lB,eAG3D,CCnCA,MAAMC,GAAwB9zF,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,iDAKjC,SAAS+zF,IAAc,QAC5BlqF,EAAO,MACPlP,IAKA,OACEiI,EAAAA,EAAAA,MAACkxF,GAAqB,CAAAt2F,SAAA,EACpBF,EAAAA,EAAAA,KAAC+a,GAAAA,EAAK,CAACC,aAAa,KAAKnZ,MAAO,CAAEsc,QAAS,aAAcje,SACtD7C,KAEH2C,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAAClC,QAAQ,QAAQsD,QAAS4F,EAAS,aAAW,QAAOrM,UAC1DF,EAAAA,EAAAA,KAACyoB,GAAAA,GAAS,QAIlB,CCLO,SAAS6sE,IAA2B,KACzCzjE,EAAI,SACJ8zD,IAKA,MAAM,EAAEz+E,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,MACXjkC,KAAM6zE,GAAe99B,GAAgC0vB,GAAUpO,SAASiP,cACxEtmE,KAAMi0E,GAAel+B,GAAiCpkC,GAAMkiB,UAAUwjC,SAASrtE,SAC/EgW,KAAMw2E,GAAiBzgC,GAA4B0vB,GAAUpO,SAASof,QAExEC,EAAmBjR,EAASC,oBAAsBD,EAASS,iBACzD9E,YAAa0S,EAAcjgD,SAAUmgD,EAAYnR,YAAakR,GAAiBpiE,EAEjF2hE,EAAYQ,GAAc1R,YAAc4R,GAAY5R,YAAcqD,GAAUrD,WAC5Et4C,EAAQgqD,GAAchqD,OAASkqD,GAAYlqD,OAAS27C,GAAU37C,MAC9DumC,EACJyjB,GAAczjB,WACd2jB,EAAW/4B,eAAeoV,WAC1BoV,EAASxqB,eAAeoV,UAC1B,IAAIujB,EACFE,GAAchR,aACbkR,GAAYxS,WAAa/E,GAAWvsE,KAAKa,UAAUijF,EAAWxS,kBAAe//E,IAC9EgkF,EAAS3C,WAEX,GAAIiR,EAAc,CAChB,MAAMK,EAAqC,CAAC,EAExCR,GACYA,EAAUtsF,MAAM,MACxB4xB,SAASwsC,IACb,MAAOx5D,EAAK1R,GAASkrE,EAAKp+D,MAAM,KAAKT,KAAKwtF,GAASA,EAAK5wE,SACxD2wE,EAAQloF,GAAO1R,CAAK,IAIxB,MAAM85F,EAAwE,IACzEF,KACAL,GAGLH,EAAYnX,GAAWvsE,KAAKa,UAAUujF,GACxC,CAEA,OACElvF,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,gBAAiBka,SAAUukE,EAASxqB,eAAeiV,aAAalwE,UACnFF,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAMk3E,EAASxqB,eAAeiV,cAAchzE,KAC5C0K,GAAI88C,EAAWgW,GAAS62B,oBAAqB,CAC3CptC,OAAQ,CAAElnD,GAAIwoF,EAASxqB,eAAeiV,cAAcjzE,WAI1D6C,EAAAA,EAAAA,KAAC+xF,GAAY,CACXz0F,MAAO4J,EAAE,aACT8qF,aAAczhB,GAAWpzE,KAAOwoF,EAASxqB,eAAeoV,WAAWpzE,GACnE80F,gBAAiBtM,EAASxqB,eAAeoV,WAAWnzE,KACpDgkB,SAAUmvD,EAAUrwE,UAEpBF,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAM8hE,GAAWnzE,KACjB0K,GAAI88C,EAAWgW,GAAS82B,iBAAkB,CACxCrtC,OAAQ,CAAElnD,GAAIozE,GAAWpzE,WAI/B6C,EAAAA,EAAAA,KAAC+xF,GAAY,CACXz0F,MAAO4J,EAAE,yBACTka,SAAUoyE,EACVxB,aAAcwB,IAAc7N,EAASrD,WACrC2P,gBAAiBtM,EAASrD,WAAWpiF,SAEpCszF,KAEHxzF,EAAAA,EAAAA,KAAC+xF,GAAY,CACXz0F,MAAO4J,EAAE,SACTka,SAAU4oB,EACVgoD,aAAchoD,IAAU27C,EAAS37C,MACjCioD,gBAAiBtM,EAAS37C,MAAM9pC,SAE/B8pC,KAEHhqC,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,mBAAoBka,SAAUukE,EAASS,gBAAgBlmF,UAC1EF,EAAAA,EAAAA,KAACgzF,GAAc,CAACC,QAAStN,EAASS,qBAEpCpmF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,eAAgBka,SAAU2yE,GAAYvN,YAAYtmF,SACpE6zF,GAAYvN,eAEfxmF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,eAAgBka,SAAU2yE,GAAYvN,YAAYtmF,SACpE,GAAGvE,OAAO07B,SAASkvD,SAASZ,EAASpO,QAAQ+O,sBAEhDtmF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,mBAAoBka,SAAUw1E,EAAiB12F,UAClEoF,EAAAA,EAAAA,MAAC4vD,GAAAA,EAAQ,CAACjtD,UAAW4sF,GAAAA,EAAiBC,GAAG50F,SAAA,CACtCylF,EAASC,qBACR5lF,EAAAA,EAAAA,KAACm1D,GAAAA,EAAY,CAACltD,UAAW8sF,GAAAA,EAAqBC,GAAG90F,SAAEgH,CAAC,oBAErDy+E,EAASS,kBACRpmF,EAAAA,EAAAA,KAACm1D,GAAAA,EAAY,CAACltD,UAAW8sF,GAAAA,EAAqBC,GAAG90F,SAAEgH,CAAC,mBAI1DlH,EAAAA,EAAAA,KAACuyF,GAAa,CACZj1F,MAAO4J,EAAE,UACTsrF,SACEkE,GAActS,qBACV4P,GAAc9pF,QAAUiqF,GAAYjiC,QACpCyzB,EAASxqB,eAAejxD,QAAQgoD,QAEtCugC,aAAc9M,EAASxqB,eAAejxD,QAAQgoD,WAEhDlyD,EAAAA,EAAAA,KAACuyF,GAAa,CACZj1F,MAAO4J,EAAE,YACTsrF,SACEkE,GAAc/T,mBACVqR,GAActR,UAAYsD,GAAsBkO,GAAYxR,UAAY,IACxEsD,GAAsBL,EAASjD,UAAY,IAEjD+P,aAAczM,GAAsBL,EAASjD,UAAY,OAE3D1iF,EAAAA,EAAAA,KAACuyF,GAAa,CACZj1F,MAAO4J,EAAE,aACTsrF,SACEkE,GAAcjU,wBACVuR,GAAcxR,WAAawD,GAAsBkO,GAAY1R,WAAa,IAC1EwD,GAAsBL,EAASnD,WAAa,IAElDiQ,aAAczM,GAAsBL,EAASnD,WAAa,OAE5DxiF,EAAAA,EAAAA,KAACmyF,GAAoB,CACnB70F,MAAO4J,EAAE,aACTkrF,cAAe0B,EACfzB,kBAAmB1M,EAAS3C,eAIpC,CChGO,SAAS6T,IAAoB,KAAEhlE,IACpC,MAAM,IAAQ1qB,EAAAA,EAAAA,MACRy4E,EAAW/tD,EAAK43C,UAChBqtB,EAAqBlX,GAAU7rC,UAAUonB,gBAAgBogB,sBACzD,KAAEr7D,GAAS+1C,GAxBnB,SAA+B6gC,GAC7B,IAAKA,EAAoB,MAAO,GAChC,OAAQA,GAAoBvW,kBAC1B,IAAK,mBACH,OAAO9uB,EAAM,sBAAsBqlC,GAAoB35F,GAAGqhB,cAC5D,IAAK,MACH,OAAOizC,EAAM,kBAAkBqlC,GAAoB35F,GAAGqhB,cACxD,IAAK,iBACH,OAAOizC,EAAM,aAAaqlC,GAAoB35F,GAAGqhB,cACnD,IAAK,eACH,OAAOizC,EAAM,2BAA2BqlC,GAAoB35F,GAAGqhB,cACjE,IAAK,aACH,OAAOizC,EAAM,yBAAyBqlC,GAAoB35F,GAAGqhB,cAC/D,IAAK,oBACH,OAAOizC,EAAM,gCAAgCqlC,GAAoB35F,GAAGqhB,cACtE,QACE,MAAO,GAEb,CAOIu4E,CAAsBnX,GAAU7rC,UAAUonB,eAAeogB,uBAErDsY,EAAgBpO,GAAoBqR,GAAoBvrF,SAAW,GACnEyrF,EAAiB/d,GAAqB6d,GAAoBvW,kBAC1D1I,GAAaC,EAAAA,GAAAA,QACb,KAAEmf,GAASpf,EAAWI,WAE5B,IAAK2H,EAAU,OAAO,KAEtB,IAAIsX,EACJ,OAAQh3E,GAAMzc,MACZ,IAAK,mBACHyzF,GAAUl3F,EAAAA,EAAAA,KAACoxF,GAAsB,CAACv3D,OAAQ3Z,IAC1C,MACF,IAAK,eACHg3E,GAAUl3F,EAAAA,EAAAA,KAACmzF,GAAkB,CAACthE,KAAM+tD,EAAU+F,SAAUzlE,IACxD,MACF,IAAK,UACHg3E,GAAUl3F,EAAAA,EAAAA,KAAC4xF,GAAc,CAAChhB,QAAS1wD,IACnC,MACF,IAAK,wBACHg3E,GAAUl3F,EAAAA,EAAAA,KAACs1F,GAA0B,CAACzjE,KAAM+tD,EAAU+F,SAAUzlE,IAChE,MACF,IAAK,sBACHg3E,GACEl3F,EAAAA,EAAAA,KAACo2E,GAAoB,CACnB94E,MAAO4J,EAAE,aACTxM,MAAOiiF,GAAWvsE,KAAKa,UAAU2uE,GAAU7rC,UAAU2tC,YAAc,CAAC,MAM5E,OACEp8E,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACm3F,GAAyB,CAACtlE,KAAMA,KACjC7xB,EAAAA,EAAAA,KAAC6W,GAAU,CAACW,WAAS,EAAAtX,UACnBoF,EAAAA,EAAAA,MAACoc,GAAW,CAACK,gBAAgB,SAAQ7hB,SAAA,EACnCF,EAAAA,EAAAA,KAACu1F,GAAc,CAAC3V,SAAUA,GAAU7rC,YACpC/zC,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,QAAQhH,SAAE82F,KAC/Bh3F,EAAAA,EAAAA,KAACkhB,GAAU,CAACE,SAAU01E,GAAoBl7E,YAAate,MAAO4J,EAAE,eAAehH,SAC5E42F,GAAoBl7E,eAEvB5b,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,eAAehH,SACegH,EAAhD04E,GAAU7rC,UAAUktC,0BAA8B,MAAW,UAGhEjhF,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,WACTka,aAAyCzf,IAAhCm1F,GAAoBvrF,QAAqCrL,SAEjE2zF,IAGFqD,GAEDl3F,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,WAAYka,SAAUw+D,GAAU7rC,UAAUsnB,QAAQn7D,UACrEF,EAAAA,EAAAA,KAACqS,GAAY,CAAC3X,MAAOklF,GAAU7rC,UAAUsnB,aAE3Cr7D,EAAAA,EAAAA,KAACmsE,GAAsB,CAACzxE,MAAOklF,GAAU7rC,UAAUg8B,gBAGtDknB,GAAMG,OAAQp3F,EAAAA,EAAAA,KAACq3F,GAAyB,CAACxlE,KAAMA,MAGtD,CAEA,SAASslE,IAA0B,KAAEtlE,IACnC,MAAMylE,EAAe1f,KAEf+X,EAAyD,CAC7DtW,iBAAkBuW,GAAAA,GAClBzW,IAAK0W,GAAAA,GACLzW,eAAgB3sD,GAAAA,GAChB6sD,WAAYwW,GAAAA,GACZ50B,kBAAmByO,GAAAA,GACnBvO,aAAc20B,GAAAA,IAGVnQ,EAAW/tD,EAAK43C,UAChBymB,EAAUtQ,GAAU7rC,UAAUonB,eAAeogB,sBAAsBgF,iBACnEn7E,EAAO8qF,EAAUP,EAASO,GAAW,KAE3C,OACElwF,EAAAA,EAAAA,KAACy2F,GAAa,CACZp5F,OACEiI,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,CACGkF,IAAQpF,EAAAA,EAAAA,KAACoF,EAAI,CAACvD,MAAO,CAAEE,YAAa,SACpC8vB,EAAKkqD,cAGVxvE,QAAS+qF,GAGf,CAEA,SAASD,IAA0B,KAAExlE,IACnC,MAAM,IAAQ1qB,EAAAA,EAAAA,OACR,eAAE4wE,GAAmBC,MACrB,YAAE4D,GAAgB5D,KAClBsf,EAAe1f,KAQrB,OACE53E,EAAAA,EAAAA,KAACoY,GAAAA,GAAW,CAAC/U,QAAQ,QAAQusC,UAAU,EAAOlpC,UAAU,wBAAuBxG,UAC7EoF,EAAAA,EAAAA,MAAC+mB,GAAAA,EAAU,CAAC,UAAQ,oCAAmCnsB,SAAA,EACrDF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAAC,UAAQ,YAAYlC,QAAQ,UAAUsD,QATjC4wF,IAAMxf,EAAe,QASgC73E,SAC/DgH,EAAE,WAELlH,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAAC,UAAQ,cAAclC,QAAQ,SAASsD,QAXhC6wF,KACnB5b,EAAY,CAAC/pD,IACbylE,GAAc,EAS2Dp3F,SAClEgH,EAAE,gBAKb,C,gBCvJO,SAASuwF,GAA8B36F,GAC5C,MAAM,mBACJi7C,EAAkB,WAClBL,EAAU,kBACVxG,EAAiB,WACjBhpB,EAAU,WACV8E,EAAU,aACV4gB,EAAY,MACZtwC,EAAK,UACL6zC,EAAS,eACTC,EAAc,cACdsmD,EAAa,kBACbC,EAAiB,QACjBtxE,EAAO,gBACPk0B,EAAe,MACf7/C,GACEoC,GAEG+I,EAAQ2e,IAAa9oB,EAAAA,EAAAA,WAAS,GAuB/ByB,EAAKN,EAAMC,GAEjB,OACEkD,EAAAA,EAAAA,KAACy3C,GAAa,CACZG,QAASz6C,EACTG,MAAOA,EACP6zC,UAAWA,EACXC,eAAgBA,GAAkB9zC,EAClC4zC,kBAAmBA,EACnBlkB,WAAYA,EACZ+qB,mBAAoBA,EACpBL,WAAYA,EAAWx3C,UAEvBF,EAAAA,EAAAA,KAAC4nB,GAAAA,EAAM,CACLgwE,mBAnCqBA,MACzB,IAAKl9F,EACH,OAEF,MAAMm9F,EAAgBn9F,EAAMyD,QAAQ4L,GAAMA,EAAE3M,MAA0B,KAAlB2M,EAAE3M,KAAKumB,SAC3D,OACE3jB,EAAAA,EAAAA,KAACqoB,GAAAA,EAAS,CAAAnoB,SACP23F,EAAc9wF,KAAKgD,IAClB/J,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAEHthB,QAASA,KACP+wF,EAAc3tF,EAAE3M,KAAK,EACrB8C,SAED6J,EAAE3M,MALE2M,EAAE3M,SAQD,EAkBUw6F,GACpBv0F,QAASy0F,GAAAA,GAAcC,eACvBC,aAAW,EACXz9C,iBAAkB7/C,GAAO8I,QAAU+2C,EAAkBA,OAAkB54C,EACvEkE,OAAQA,EACRoyF,qBAAmB,EACnBlvE,QAASA,IAAM2uE,IACfv6F,GAAIA,EACJsL,OAAO,cACPkyC,WAAYjgD,GAAO8I,OAAS9I,OAAQiH,EACpCY,SAAUA,KACRiiB,GAAW3e,EAAO,EAEpBC,SAAUA,CAACgH,EAAG/C,KACZya,GAAW3e,GACX8xF,EAA+B,iBAAN5tF,EAAiB,CAAE3M,KAAM2M,GAAMA,EAAE,EAE5DhJ,WAAYmnB,GAAc0lB,EAAa1tC,SAEtCmmB,EAAQtf,KAAKggB,IACZ,MAAMiD,EAAW/sB,EAAM8pB,GACvB,OACE/mB,EAAAA,EAAAA,KAACupB,GAAAA,EAAY,CAAyB7uB,MAAOqsB,EAAOrsB,MAAO,UAASsvB,EAAS9pB,SAC1E6mB,EAAOzpB,OADS,GAAGypB,EAAOzpB,QAEd,OAM3B,CC5FO,SAAS46F,GAGdp7F,GACA,MAAM,mBACJi7C,EAAkB,GAClB56C,EAAE,WACF+qB,EAAU,WACV8E,EAAU,MACV1vB,EAAK,UACL6zC,EAAS,eACTC,EAAc,KACdh0C,EAAI,QACJipB,EAAO,gBACPk0B,EAAe,SACf9J,GACE3zC,GACE,QACJ4zC,EACAC,WAAW,aAAE/C,GAAc,UAC3B8K,IACE9H,EAAAA,GAAAA,MACEC,EAAWV,GAA0BrzC,EAAMQ,MAAOR,EAAMkwB,YAC9D,OACEhtB,EAAAA,EAAAA,KAAC8wC,GAAAA,GAAU,CACT1zC,KAAMN,EAAMM,KACZszC,QAASA,EACTK,kBAAgB,EAChB5jC,OAAQA,EAAG6jC,OAAS1uC,WAAU5H,SAASu2C,YAAcjkC,aACnDhN,EAAAA,EAAAA,KAACy3F,GAA6B,CAC5B1/C,mBAAoBA,EACpB7G,kBAAmBlkC,GAAOK,QAC1BlQ,GAAIA,GAAMC,EACV8qB,WAAYA,EACZ0lB,aAAcA,EACd5gB,WAAYA,EACZ1vB,MAAOA,EACP6zC,UAAWA,EACXC,eAAgBA,GAAkB9zC,EAClC+oB,QAASA,EACTk0B,gBAAiBA,EACjB7/C,MAAOA,EACPg9F,cAAgBS,IACd,MAAMruF,EAA6B4uC,EAAU57C,EAAMM,MACnDkF,EAAU61F,EAAYruF,EAAO3L,QAAQ4L,GAAwBA,EAAE3M,OAAS+6F,IAAvD,GAA6D,EAEhFR,kBAAoBt7E,IAClB,IAAI+7E,EACJ,MAAM73F,EAAe8b,EACfvS,EAA6B4uC,EAAU57C,EAAMM,MAOnD,OAJEg7F,EADEtuF,GAAQtF,MAAM9J,GAAUA,EAAM0C,OAASmD,EAAanD,OAC3C0M,EAAO3L,QAAQuP,GAAMA,IAAMnN,IAE3BuJ,GAAQtG,OAAS,IAAIsG,EAAQvJ,GAAgB,CAACA,GAEpD+B,EAAS81F,EAAS,IAI/B9mD,MAAO,CAAET,WAAUJ,SAAUA,IAGnC,CCvEO,SAAS4nD,GAAqCv7F,GACnD,MAAM,MAAEO,EAAK,KAAEyvC,EAAI,aAAE5K,EAAY,eAAE9R,EAAc,YAAEryB,EAAW,WAAEN,EAAU,SAAEqI,GAAahJ,GAClFgQ,EAAG8rB,GAAaD,KACvB,IAAIpsB,GAAUzQ,EAAAA,EAAAA,cAAY,IAAM88B,OAAUj3B,IAAY,CAACi3B,IACnD97B,EAAMyP,UACRA,EAAUzP,EAAMyP,SAGlB,MAAO1L,GAAgBV,IACjBqqC,EAAeznB,GAAuBmf,GAC5C,OACEliC,EAAAA,EAAAA,KAAC++B,GAAAA,EAAK,CACJ1hC,MAAOA,EACP,aAAYA,EACZoL,OAAQpL,EACRwI,QAAM,EACN0G,QAASA,EACTlJ,QAAS27B,GAAAA,EAAaC,OACtB1P,SAAU,EACVjsB,QAAS,EACPtD,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAELlC,QAAQ,UACRlG,GAAG,SACHwJ,QAASA,KACP4F,IACIugC,EAAKhsC,cAAc0C,OAAS,GAC9BsC,EAASgnC,EAAKhsC,cAAc,GAC9B,EAEF2E,eAA8C,IAA9BqnC,EAAKhsC,cAAc0C,OAAatD,SAE/CnC,GAAe8C,EAAa9C,aAXzB,WAaNiC,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAACpI,GAAG,SAAsBkG,QAAQ,OAAOsD,QAAS4F,EAAQrM,SAC9DzC,GAAcoD,EAAapD,YADN,WAI1B0hC,kBAAgB,EAAAj/B,UAEhBF,EAAAA,EAAAA,KAAA,OACE6B,MAAO,CACL0N,QAAS,OACTqP,cAAe,SACfpE,UAAW,IACX5E,SAAU,UACV1V,UAEFF,EAAAA,EAAAA,KAACkkC,GAAS,CACRhC,aAAcsI,EACdpa,eAAgBA,KACZ0c,EACJ5H,gBAAiBpoC,EAAMooC,iBAAmBrkC,EAAatC,aACvD0mC,gBAAiBnoC,EAAMmoC,iBAAmBpkC,EAAa3C,UACvDi2B,iBAAe,EACfC,iBAAe,EACfoL,SAAO,EACPqL,oBAAkB,EAClB/kC,SAAUA,OAGVywB,oBAAkB,OAK5B,CC1CO,SAAS+hE,GAGdx7F,GACA,MAAMK,EAAKN,EAAMC,IAEX,QAAE4zC,EAAO,UAAEC,IAAcC,EAAAA,GAAAA,OACzB,aAAEhD,EAAY,aAAE6K,GAAiB9H,GAEhC9vC,GAAgBV,IACjB0wC,EAAWV,GAA0BrzC,EAAMQ,MAAOR,EAAMkwB,YAE9D,OACEhtB,EAAAA,EAAAA,KAAC8wC,GAAAA,GAAU,CACT1zC,KAAMN,EAAMM,KACZszC,QAASA,EACTK,kBAAgB,EAChB5jC,OAAQA,EAAG6jC,OAASt2C,QAAO4H,YAAY2uC,YAAcjkC,aACnD,MAAMkkC,EAAoBlkC,GAAOK,QAC7BvQ,EAAM2zC,UAAYgI,EAChB53C,EAAanB,WACbsN,GAAOK,aACT1L,EACJ,IAAIZ,EAAajE,EAAMiE,WAOvB,OANKA,GAAcjE,EAAMorB,aACvBnnB,GAAamG,EAAAA,GAAAA,GAAE,aAEb0mC,IACF7sC,GAAamG,EAAAA,GAAAA,GAAE,gBAGflH,EAAAA,EAAAA,KAACy3C,GAAa,CACZG,QAASz6C,EACTG,MAAOR,EAAMQ,MACb8zC,eAAgBt0C,EAAMs0C,gBAAkBt0C,EAAMQ,MAC9C6zC,UAAWr0C,EAAMq0C,UACjBuG,WAAY56C,EAAM46C,WAClBxG,kBAAmBA,EACnBlkB,WAAYlwB,EAAMkwB,WAClB+qB,mBAAoBj7C,EAAMi7C,mBAAmB73C,UAE7CF,EAAAA,EAAAA,KAACstB,GAAqB,CACpBnwB,GAAIA,EACJ,UAASA,GAAMC,KACfgpB,YAAatpB,EAAMspB,YACnB6E,aAAcnuB,EAAMmuB,aACpBwH,iBAAkB31B,EAAM21B,iBACxB9F,eAAgB7vB,EAAM6vB,eACtB,mBAAkBxvB,EAAK,GAAGA,oBAAkBwE,EAC5CjH,MAAOA,EACPoL,SAAUxD,EACVvB,WAAYA,EACZ8oB,OAAQ/sB,EAAM+sB,OACdyC,SAAUxvB,EAAMwvB,SAChB9F,WAAY1pB,EAAM0pB,WAClBuG,mBAAiB,EACjBC,WAAYlwB,EAAMkwB,WAClBO,cAAezwB,EAAMywB,iBAET,EAGpB+jB,MAAO,CACLT,WACAJ,SAAU3zC,EAAM2zC,WAIxB,CC7GO,SAAS8nD,GAAgBz7F,GAK9B,MAAM,KAAEojB,EAAI,UAAEkJ,EAAS,MAAEpc,GAAUqpD,GAAoCv5D,EAAMsnD,IAAKtnD,EAAMK,GAAI,CAC1FoT,gBAAiB,IAGnB,QAAiB5O,IAAb7E,EAAMK,GAAkB,OAAO,KAEnC,GAAIisB,EAAW,OAAOppB,EAAAA,EAAAA,KAACspB,GAAAA,EAAO,CAAC/tB,KAAK,OAEpC,GAAIyR,EACF,MAAmB,iBAAfA,EAAM5P,MAEwB,MADX4P,EACJshD,WACRxxD,EAAMK,GAAGqhB,WAGbxR,EAAMK,QAGf,IAAK6S,EACH,OAAOpjB,EAAMK,GAAGqhB,WAGlB,MAAM9jB,EAAQwlB,EAAKpjB,EAAMk0C,OAAS,QAElC,cAAet2C,GACb,IAAK,SACH,OAAOA,EACT,IAAK,SACH,OAAOA,EAAM8jB,WACf,QACE,OAAO1hB,EAAMK,GAAGqhB,WAEtB,CC/BO,SAASg6E,GAKd17F,GAkBA,MAAMK,EAAKN,EAAMC,GAEXmuB,GAAenvB,EAAAA,EAAAA,cACnB4S,UACE,IACE,MAAM+pF,EAAU37F,EAAMsnD,IAAI58C,MAAM,KAAK,GAC/By2D,EAAcnhE,EAAMsnD,IAAI58C,MAAM,KAAK,GACnCkxF,EAAkB,IAAIhzC,gBAAgBuY,GAK5C,GAJAy6B,EAAgBrtC,OAAO,aACvBqtC,EAAgBttC,IAAI,YAAa,MACjCstC,EAAgBrtC,OAAO,YACvBqtC,EAAgBttC,IAAI,WAAY,QAC5BtuD,EAAMgkE,YACR,IAAK,MAAO10D,EAAK1R,KAAUmP,OAAOwmD,QAAQvzD,EAAMgkE,aAC9C,GAAI7nD,MAAMC,QAAQxe,GAChB,IAAK,MAAMi+F,KAAUj+F,EACnBg+F,EAAgBttC,IAAIh/C,EAAKusF,QAG3BD,EAAgBttC,IAAIh/C,EAAK1R,GAI3B2rB,EAAQmF,MAAMktE,EAAgBttC,IAAI,WAAY/kC,EAAQmF,KAAKhN,YAC3D6H,EAAQ2E,QAAQ0tE,EAAgBttC,IAAI,kBAAmB/kC,EAAQ2E,QACnE,MAAM6iC,QAAiBwB,GACrBopC,EAAU,IAAMp6B,mBAAmBq6B,EAAgBl6E,YACnD6H,EAAQoF,QAEV,MAAO,CACLG,UAAWiiC,EAASvxC,MAAQuxC,EAASqE,QAAQ1uD,OAC7C6iB,QACEwnC,EAASqE,SAASnrD,KAAKgtC,IAAQ,CAC7Bz2C,MAAOy2C,EAAS32C,KAChB1C,MAAOq5C,EAAS52C,GAChBye,YAAam4B,EAASn4B,iBACjB,GACT4P,KAAMqiC,EAASqE,QAAQrE,EAASqE,QAAQ1uD,OAAS,IAAIpG,KAEzD,CAAE,MAAO4P,GACP,MAAO,CACL4e,UAAW,EACXvF,QAAS,GACTmF,KAAM,EAEV,IAEF,CAAC1uB,EAAMsnD,IAAKtnD,EAAMgkE,eAGbh0D,EAAG8rB,GAAaD,MAEjB,SAAE5S,IAAa6qB,EAAAA,GAAAA,MACfl2C,GAAQynE,EAAAA,GAAAA,IAAmB,CAAE/kE,KAAMN,EAAMM,OACzCw7F,GAAmB98F,EAAAA,EAAAA,cACtBgK,IACC8yB,GACE54B,EAAAA,EAAAA,KAAC64F,GAAc,CACbx7F,MAAOP,EAAMQ,MACb8mD,IAAKtnD,EAAMsnD,IACXt+C,SAAUA,EACVsqB,eAAgBtzB,EAAMszB,eACtB8R,aAAcplC,EAAMolC,aACpBlJ,iBAAkBt+B,EAAQ,CAAC,CAAEyC,GAAIzC,IAAW,GAC5ComE,YAAahkE,EAAMgkE,cAEtB,GAEH,CACEhkE,EAAMQ,MACNR,EAAMolC,aACNplC,EAAMszB,eACNtzB,EAAMsnD,IACNxrB,EACAl+B,EACAoC,EAAMgkE,cAIJt6C,GAAa1qB,EAAAA,EAAAA,cAChBpB,IACCsF,EAAAA,EAAAA,KAACu4F,GAAe,CAACn0C,IAAKtnD,EAAMsnD,IAAI58C,MAAM,KAAK,GAAIrK,GAAIzC,KAErD,CAACoC,EAAMsnD,MAGT,OACEpkD,EAAAA,EAAAA,KAACs4F,GAAyB,CACxBn7F,GAAIA,EACJC,KAAMN,EAAMM,KACZE,MAAOR,EAAMQ,MACb2tB,aAAcA,EACd7E,YAAatpB,EAAMspB,YACnBqM,iBAAkB31B,EAAM21B,iBACxB9F,eAAgB7vB,EAAM6vB,eACtBK,WAAYlwB,EAAMkwB,WAClBjsB,WAAYjE,EAAMiE,WAClB22C,WAAY56C,EAAM46C,WAClBvG,UAAWr0C,EAAMq0C,UACjB7kB,SAAUA,IACRssE,GAAkB7kD,GAChBhuB,EAASjpB,EAAMM,KAAM22C,EAAS52C,MAGlCqpB,WAAYA,EACZuxB,mBAAoBj7C,EAAMi7C,oBAGhC,CAEA,SAAS8gD,GAEP/7F,GASA,MAAM47F,GAAkBr0F,EAAAA,EAAAA,UAAQ,IAAM,IAAIqhD,gBAAgB5oD,EAAMsnD,IAAI58C,MAAM,KAAK,KAAK,CAAC1K,EAAMsnD,MAErF0c,GAAcz8D,EAAAA,EAAAA,UAAQ,KAC1B,MAAMigD,EAAqB,CAAC,EAE5B,OADAo0C,EAAgBt/D,SAAQ,CAAC1+B,EAAO0R,IAASk4C,EAAMl4C,GAAO1R,IAC/C4pD,CAAK,GACX,CAACo0C,IAEE5rD,EAAO6zB,GAAqB,CAChCvc,IAAKtnD,EAAMsnD,IAAI58C,MAAM,KAAK,GAC1B4oB,eAAgBtzB,EAAMszB,eACtB8R,aAAcplC,EAAMolC,aACpBsoB,oBAAoB,EACpBxxB,iBAAkBl8B,EAAMk8B,iBACxB8nC,YAAahkE,EAAMgkE,aAAeA,IAEpC,OACE9gE,EAAAA,EAAAA,KAACq4F,GAAkB,CACjBh7F,MAAOP,EAAMO,MACbyI,SAAUhJ,EAAMgJ,SAChBsqB,eAAgBtzB,EAAMszB,gBAAkB,GACxC8R,aAAcplC,EAAMolC,aACpB4K,KAAMA,GAGZ,CCrKO,SAASgsD,GAAsBzyE,GACpC,MAAM,IAAQlf,EAAAA,EAAAA,MACR6zD,EAAerW,KACf0tB,GAAYv2E,EAAAA,EAAAA,cACf8yE,GACC5T,EAAaJ,GAASoU,kBAAmB,CAAE3qB,OAAQ,CAAElnD,GAAIyxE,EAAWzxE,OACtE,CAAC69D,IAEG+9B,EAAW9pB,KACX5sC,EAAa8sC,GAAc,IAAK9oD,EAAS1f,QAAS0rE,IAClD9vC,EAAoB+sC,KACpBkD,EAAgBhD,GAAiBnpD,GACjCosD,EAAiB3C,GAAkBzpD,IAEjC6rC,QAAS8mC,GAAiB9b,GAAkCzrB,EAAM,sBAEpEwnC,GAA+C50F,EAAAA,EAAAA,UAAQ,KAC3D,MAAM60F,EAAsC,CAAC,EAC7C,GAAIF,EAAc,CAChB,IAAK,MAAMG,KAAkBH,EAAc,CACzC,MAAM,GAAE77F,EAAE,KAAEC,GAAS+7F,EACjBh8F,GAAMC,IACR87F,EAAU/7F,GAAMC,EAEpB,CACA,OAAO87F,CACT,CACE,MAAO,CAAC,CACV,GACC,CAACF,IAsBJ,OArBqB30F,EAAAA,EAAAA,UACnB,IAAM,CACJ00F,EACA12D,EACAE,EACA,CACEplC,GAAI,kBACJ2jB,OAAQ5Z,EAAE,mBACV4b,KAAO8rD,GACEqqB,GAAsBA,EAAmBrqB,EAAWwqB,iBACvDH,EAAmBrqB,EAAWwqB,iBAC9BlyF,EAAE,WAER45B,KAAM,WACNuC,KAAM,YAERmvC,EACAC,IAEF,CAACsmB,EAAU12D,EAAYE,EAAmBr7B,EAAGsrE,EAAeC,EAAgBwmB,GAGhF,CC+BO,SAASI,GAAyBv8F,GAIvC,MAAM,YAAEw8F,EAAW,cAAEC,EAAa,mBAAEC,EAAkB,kBAAEC,EAAiB,cAAEC,IACzE1jF,EAAAA,EAAAA,QAAOlZ,GAAOsZ,SACV,EAAElP,IAAMC,EAAAA,EAAAA,MACRi9C,EAAMqN,EAAM,IAAI6nC,KAEhBK,EAAat7B,mBAAmBja,IAChC,KAAElkC,GAAS0jD,GAA6C+1B,GACxDC,GAtEmBt2F,EAsEW4c,GAAM5c,SAASmhE,KArE5CpgE,EAAAA,EAAAA,UAAQ,IACRf,EAGoBuG,OAAOwmD,QAAQ/sD,GAASya,QAQ/C,CAACC,GAAM5R,EAAK1R,MACRA,EAAMm/F,YACR77E,EAAIja,KAAK,CACPqI,MACA3I,KAAM/I,EAAM+I,KACZnG,MAAO5C,EAAM4C,MACbgnD,MAAOl4C,EACPia,QAAS3rB,EAAMmrE,QAAUnrE,EAAMmrE,QAAQ9+D,KAAI,EAAErM,EAAO4C,MAAW,CAAG5C,QAAO4C,YAAY,KAGlF0gB,IACN,IArBM,IAuBR,CAAC1a,KA1BC,IAAoBA,EAuEzB,MAAMw2F,GAAgBh+F,EAAAA,EAAAA,cAMpB4S,MAAOuc,EAA2C7e,KAChD,MAAM2tF,EAAiBC,GAAmB5tF,IAAQotF,IAAqBptF,GACjE6tF,EAAWF,EAAeE,UAAY7tF,EACtC8tF,EAAWH,EAAeG,UAAY9tF,EACtCo8E,QAAsBn5B,GApDlC,SACEpkC,EACAquE,EACAW,EACAE,EACAr5B,GAEA,IAAI1c,EAAMqN,EAAM,IAAI6nC,4BAAsCa,IAoB1D,OAnBIlvE,EAAaO,OACf44B,GAAO,IAAI+1C,SAAgBlvE,EAAaO,QAEtCP,EAAaD,SACfo5B,GAAO,IAAI61C,gBAAuBhvE,EAAaD,UAE7C81C,GACFj3D,OAAOwmD,QAAQyQ,GAAa1nC,SAAQ,EAAEhtB,EAAK1R,MACzC,GAAIue,MAAMC,QAAQxe,GAChB,IAAK,MAAMi+F,KAAUj+F,EACnB0pD,GAAO,IAAIh4C,KAAOusF,SAGpBv0C,GAAO,IAAIh4C,KAAO1R,GACpB,IAIe2jE,mBAAmBja,EAExC,CA2BQg2C,CACEnvE,EACA8uE,EAAeM,QACfJ,EACAC,EACAH,EAAej5B,aAEjB71C,EAAaQ,QAEf,IAAID,EAAe,GACnB,GAAIg9D,EAAct2B,QAAQ1uD,OAAS,EAAG,CACpC,MAAM9I,EAAQ8tF,EAAct2B,QAAQs2B,EAAct2B,QAAQ1uD,OAAS,GAAG02F,GACtE1uE,EAAO9wB,GAAO8jB,YAAc,EAC9B,CACA,MAAO,CACLoN,UAAW48D,EAAclsE,MAAQksE,EAAct2B,QAAQ1uD,OACvD6iB,QAASmiE,EAAct2B,QAAQnrD,KAAKgtC,IAE3B,CAAEz2C,MADKy2C,EAASkmD,IAAWz7E,YAAc,GAChC9jB,MAAOq5C,EAASmmD,IAAW17E,YAAc,OAE3DgN,OACD,GAEH,CAACguE,IAEGc,GAAqBx+F,EAAAA,EAAAA,cACzB,CAACpB,EAAe0R,KACd,MAAM2tF,EAAiBC,GAAmB5tF,IAAQotF,IAAqBptF,GACvE,OAAI2tF,GAEA/5F,EAAAA,EAAAA,KAACu4F,GAAe,CACdn0C,IAAKqN,EAAM,IAAIsoC,EAAeM,WAC9Bl9F,GAAIzC,EACJs2C,MAAO+oD,EAAeE,WAIrBv/F,CAAK,GAEd,CAAC8+F,IAGGxnE,GAA4B3tB,EAAAA,EAAAA,UAAQ,IACpBk2F,EAClBX,EACAL,EACAC,EACAC,EACAC,KAEA,MAAMtpE,EAAmC,GA8FzC,OA5FAwpE,EAAiBxgE,SAAS4X,IAExB,IAAIwpD,KAAchB,IAAsBA,EAAmBxoD,EAAM5kC,MAC7D4tF,GAAmBhpD,EAAM5kC,OAC3BouF,GAAc,GAGG,WAAfxpD,EAAMvtC,KACR2sB,EAAersB,KAAK,CAClBqI,IAAK4kC,EAAM5kC,IACX9O,MAAO4J,EAAE8pC,EAAM1zC,OACfmG,KAAMysB,GAAkBuB,YACxBrL,YAAalf,EAAE,mBAAoB,CAAE8pC,MAAOA,EAAM1zC,MAAMJ,gBACxDonD,MAAOtT,EAAMsT,MACbj+B,QAAS2qB,EAAM3qB,QAAU2qB,EAAM3qB,QAAU,GACzCmB,oBAAoB,IAEE,YAAfwpB,EAAMvtC,KACf2sB,EAAersB,KAAK,CAClBqI,IAAK4kC,EAAM5kC,IACX9O,MAAO4J,EAAE8pC,EAAM1zC,OACfmG,KAAMysB,GAAkBS,aACxBvK,YAAalf,EAAE,sBAAuB,CAAE8pC,MAAOA,EAAM1zC,MAAMJ,gBAC3DonD,MAAOtT,EAAMsT,MACbj+B,QAAS,CACP,CAAE/oB,MAAO4J,EAAE,QAASxM,MAAO,QAC3B,CAAE4C,MAAO4J,EAAE,SAAUxM,MAAO,UAE9B8sB,oBAAoB,IAEE,aAAfwpB,EAAMvtC,KAEf2sB,EAAersB,KAAK,CAClBqI,IAAK4kC,EAAM5kC,IACX9O,MAAO4J,EAAE8pC,EAAM1zC,OACfmG,KAAMysB,GAAkB9B,UACxBhI,YAAalf,EAAE,sBAAuB,CAAE8pC,MAAOA,EAAM1zC,MAAMJ,gBAC3DonD,MAAOtT,EAAMsT,MACbj+B,QAAS,CACP,CAAE/oB,MAAO4J,EAAE,aAAcxM,MAAO8yB,GAAuB0zC,UACvD,CAAE5jE,MAAO4J,EAAE,iBAAkBxM,MAAO8yB,GAAuB2zC,aAC3D,CAAE7jE,MAAO4J,EAAE,eAAgBxM,MAAO8yB,GAAuB4zC,UACzD,CAAE9jE,MAAO4J,EAAE,gBAAiBxM,MAAO8yB,GAAuB6zC,cAGrDm5B,EAETpqE,EAAersB,KAAK,CAClBqI,IAAK4kC,EAAM5kC,IACXk4C,MAAOtT,EAAMsT,MACbhnD,MAAO4J,EAAE8pC,EAAM1zC,OACfmG,KAAMysB,GAAkB0B,iBACxB3G,aAAe5E,GAAYyzE,EAAczzE,EAAS2qB,EAAM5kC,KACxDga,YAAalf,EAAE,mBAAoB,CAAE8pC,MAAOA,EAAM1zC,MAAMJ,gBACxDu1B,iBAAkBvrB,EAAE,cACpBylB,eAAgBzlB,EAAE,2BAClBsf,WAAa9rB,GAAkB4/F,EAAmB5/F,EAAOs2C,EAAM5kC,OAGjEgkB,EAAersB,KAAK,CAClBqI,IAAK4kC,EAAM5kC,IACX9O,MAAO4J,EAAE8pC,EAAM1zC,OACfmG,KAAMysB,GAAkBsC,UACxB8xB,MAAO,GAAGtT,EAAM5kC,iBAChB2iB,WAAY,WACZ3I,YAAalf,EAAE,sCAAuC,CACpD8pC,MAAOA,EAAM1zC,MAAMJ,cACnBu9F,UAAWzpD,EAAMvtC,KAAKvG,iBAG5B,IAGEu8F,GAAqBrpE,EAAe5sB,OAAS,IAC3CyV,MAAMC,QAAQugF,GAChBrpE,EAAersB,QAAQ01F,GAEvBrpE,EAAersB,KAAK01F,IAIpBF,GAAiBA,EAAc/1F,OAAS,GAC1C4sB,EAAehxB,MAAK,CAACiM,EAAGoc,KACtB,MAAMizE,EAASnB,EAAc9zC,QAAQp6C,EAAEe,KACjCuuF,EAASpB,EAAc9zC,QAAQh+B,EAAErb,KACvC,OAAgB,IAAZsuF,IAA6B,IAAZC,EAAsB,GAC3B,IAAZD,EAAsB,GACV,IAAZC,GAAuB,EACpBD,EAASC,CAAM,IAItBjB,GAAiBtpE,EAAe5sB,OAAS,EACpC4sB,EAAejyB,QAAQA,IAAYu7F,EAAcnxF,SAASpK,EAAOiO,OAGnEgkB,CAAc,EAEhBmqE,CACLX,EACAL,EACAC,EACAC,EACAC,IAED,CACDE,EACAL,EACAC,EACAC,EACAC,EACAxyF,EACA4yF,EACAQ,IAGF,OAAOtoE,CACT,CA2BO,MAAMgoE,GAAsD,CACjEZ,gBAAiB,CAAEiB,QAAS,mBAAoBJ,SAAU,OAAQC,SAAU,MAC5EtrB,WAAY,CAAEyrB,QAAS,cAAeJ,SAAU,OAAQC,SAAU,MAClEU,oBAAqB,CAAEP,QAAS,yBAA0BJ,SAAU,OAAQC,SAAU,MACtF9pB,aAAc,CAAEiqB,QAAS,gBAAiBJ,SAAU,OAAQC,SAAU,MACtEtpB,QAAS,CAAEypB,QAAS,WAAYJ,SAAU,OAAQC,SAAU,MAC5DtY,sBAAuB,CAAEyY,QAAS,yBAA0BJ,SAAU,OAAQC,SAAU,MACxF3e,qBAAsB,CAAE8e,QAAS,wBAAyBJ,SAAU,OAAQC,SAAU,MACtFW,eAAgB,CACdZ,SAAU,WACVI,QAAS,YACTH,SAAU,KACVp5B,YAAa,CAAEyR,UAAW,cAE5BuoB,gBAAiB,CACfb,SAAU,WACVC,SAAU,KACVG,QAAS,YACTv5B,YAAa,CAAEyR,UAAW,YAE5BhC,UAAW,CAAE8pB,QAAS,cAAeJ,SAAU,OAAQC,SAAU,MACjEa,SAAU,CAAEV,QAAS,eAAgBJ,SAAU,KAAMC,SAAU,OCjV1D,SAASc,KACd,MAAM,EAAE9zF,IAAMC,EAAAA,EAAAA,MACd,OAAO9C,EAAAA,EAAAA,UACL,KAAM,CACJ+H,IAAK,OACL9O,MAAO4J,EAAE,QACTzD,KAAMysB,GAAkBsC,UACxB8xB,MAAO,kBACPv1B,WAAY,cAEd,CAAC7nB,GAEL,CA8BO,SAAS+zF,KACd,MAAM,EAAE/zF,IAAMC,EAAAA,EAAAA,MACd,OAAO9C,EAAAA,EAAAA,UACL,KAAM,CACJ+H,IAAK,cACL9O,MAAO4J,EAAE,eACTzD,KAAMysB,GAAkBsC,UACxB8xB,MAAO,yBACPv1B,WAAY,cAEd,CAAC7nB,GAEL,CAgBO,SAASg0F,KACd,MAAM,EAAEh0F,IAAMC,EAAAA,EAAAA,MACd,OAAO9C,EAAAA,EAAAA,UACL,KAAM,CACJ+H,IAAK,aACL9O,MAAO4J,EAAE,cACTzD,KAAMysB,GAAkBsC,UACxB8xB,MAAO,kCACPv1B,WAAY,cAEd,CAAC7nB,GAEL,CAEO,SAASi0F,KACd,MAAM,EAAEj0F,IAAMC,EAAAA,EAAAA,MACd,OAAO9C,EAAAA,EAAAA,UACL,KAAM,CACJ+H,IAAK,cACL9O,MAAO4J,EAAE,eACTzD,KAAMysB,GAAkBsC,UACxB8xB,MAAO,mCACPv1B,WAAY,cAEd,CAAC7nB,GAEL,CC9FO,SAASk0F,KAUd,OAPuB/B,GAAyB,CAC9CC,YAAa,cACbC,cAAe,CAAC,OAAQ,kBAAmB,aAAc,eACzDC,mBAAoB,CAAEp8F,KAAM,CAAEi9F,QAAS,eAAiBl9F,GAAI,CAAEk9F,QAAS,gBACvEZ,kBAAmB,CANUyB,KACCC,OASlC,CC+BO,SAASE,GAGdv+F,GACA,MAAMK,EAAKN,EAAMC,IAEX,QAAE4zC,EAAO,UAAEC,IAAcC,EAAAA,GAAAA,OACzB,aAAEhD,EAAY,aAAE6K,GAAiB9H,GAEhC9vC,GAAgBV,IACjB0wC,EAAWV,GAA0BrzC,EAAMQ,MAAOR,EAAMkwB,YAE9D,OACEhtB,EAAAA,EAAAA,KAAC8wC,GAAAA,GAAU,CACT1zC,KAAMN,EAAMM,KACZszC,QAASA,EACTK,kBAAgB,EAChB5jC,OAAQA,EAAG6jC,OAASt2C,QAAO4H,YAAY2uC,YAAcjkC,aACnD,MAAMkkC,EAAoBlkC,GAAOK,QAC7BvQ,EAAM2zC,UAAYgI,EAChB53C,EAAanB,WACbsN,GAAOK,aACT1L,EACJ,IAAIZ,EAAajE,EAAMiE,WAOvB,OANKA,GAAcjE,EAAMorB,aACvBnnB,GAAamG,EAAAA,GAAAA,GAAE,aAEb0mC,IACF7sC,GAAamG,EAAAA,GAAAA,GAAE,gBAGflH,EAAAA,EAAAA,KAACy3C,GAAa,CACZG,QAASz6C,EACTG,MAAOR,EAAMQ,MACb8zC,eAAgBt0C,EAAMs0C,gBAAkBt0C,EAAMQ,MAC9C6zC,UAAWr0C,EAAMq0C,UACjBuG,WAAY56C,EAAM46C,WAClBxG,kBAAmBA,EACnBlkB,WAAYlwB,EAAMkwB,WAClB+qB,mBAAoBj7C,EAAMi7C,mBAAmB73C,UAE7CF,EAAAA,EAAAA,KAACmqB,GAAoB,CACnBhtB,GAAIA,EACJ,UAASA,GAAMC,KACfgpB,YAAatpB,EAAMspB,YACnB6E,aAAcnuB,EAAMmuB,aACpBwH,iBAAkB31B,EAAM21B,iBACxB9F,eAAgB7vB,EAAM6vB,eACtB,mBAAkBxvB,EAAK,GAAGA,oBAAkBwE,EAC5CmI,OAAQpP,EACRoL,SAAWm8D,GAAiB3/D,EAAS2/D,EAAavnE,IAClDqG,WAAYA,EACZ8oB,OAAQ/sB,EAAM+sB,OACdtB,kBAAmBzrB,EAAMyrB,kBACzBjC,sBAAuBxpB,EAAMwpB,sBAC7BgG,SAAUxvB,EAAMwvB,SAChB9F,WAAY1pB,EAAM0pB,WAClBC,oBAAqB3pB,EAAM2pB,uBAEf,EAGpB6qB,MAAO,CACLT,WACAJ,SAAU3zC,EAAM2zC,WAIxB,CCzGO,SAAS6qD,GAKdx+F,GAqBA,MAAM,YAAEy+F,GAA4Bz+F,EAC9BK,EAAKN,EAAMC,GAEXmuB,GAAenvB,EAAAA,EAAAA,cACnB4S,UACE,IACE,MAAM+pF,EAAU37F,EAAMsnD,IAAI58C,MAAM,KAAK,GAC/By2D,EAAcnhE,EAAMsnD,IAAI58C,MAAM,KAAK,GACnCkxF,EAAkB,IAAIhzC,gBAAgBuY,GAK5C,GAJAy6B,EAAgBrtC,OAAO,aACvBqtC,EAAgBttC,IAAI,YAAa,MACjCstC,EAAgBrtC,OAAO,YACvBqtC,EAAgBttC,IAAI,WAAY,QAC5BtuD,EAAMgkE,YACR,IAAK,MAAO10D,EAAK1R,KAAUmP,OAAOwmD,QAAQvzD,EAAMgkE,aAC9C,GAAI7nD,MAAMC,QAAQxe,GAChB,IAAK,MAAMi+F,KAAUj+F,EACnBg+F,EAAgBttC,IAAIh/C,EAAKusF,QAG3BD,EAAgBttC,IAAIh/C,EAAK1R,GAI3B2rB,EAAQmF,MAAMktE,EAAgBttC,IAAI,WAAY/kC,EAAQmF,KAAKhN,YAC3D6H,EAAQ2E,QAAQ0tE,EAAgBttC,IAAI,kBAAmB/kC,EAAQ2E,QACnE,MAAM6iC,QAAiBwB,GACrBopC,EAAU,IAAMp6B,mBAAmBq6B,EAAgBl6E,YACnD6H,EAAQoF,QAEV,MAAO,CACLG,UAAWiiC,EAASvxC,MAAQuxC,EAASqE,QAAQ1uD,OAC7C6iB,QACEwnC,EAASqE,SAASnrD,KAAKgtC,IAAQ,CAC7Br5C,MAAOq5C,EACPn4B,YAAam4B,EAASn4B,YACtBte,MAAOi+F,EAAcA,EAAYxnD,GAAYA,EAAS32C,UACjD,GACTouB,KAAMqiC,EAASqE,QAAQrE,EAASqE,QAAQ1uD,OAAS,IAAIpG,KAEzD,CAAE,MAAO4P,GACP,MAAO,CACL4e,UAAW,EACXvF,QAAS,GACTmF,KAAM,EAEV,IAEF,CAAC1uB,EAAMsnD,IAAKtnD,EAAMgkE,YAAay6B,KAG1BzuF,EAAG8rB,GAAaD,MAEjB,SAAE5S,IAAa6qB,EAAAA,GAAAA,MACfl2C,GAAQynE,EAAAA,GAAAA,IAAmB,CAAE/kE,KAAMN,EAAMM,OACzCw7F,GAAmB98F,EAAAA,EAAAA,cACtBgK,IACC8yB,GACE54B,EAAAA,EAAAA,KAAC64F,GAAc,CACbx7F,MAAOP,EAAMQ,MACb8mD,IAAKtnD,EAAMsnD,IACXt+C,SAAUA,EACVsqB,eAAgBtzB,EAAMszB,eACtB8R,aAAcplC,EAAMolC,aACpB4+B,YAAahkE,EAAMgkE,YACnB9nC,iBACEt+B,GAASue,MAAMC,QAAQxe,GACnBA,EAAMqM,KAAKsV,IACF,CAAElf,GAAIkf,EAAKlf,OAEpB,KAGT,GAEH,CACEL,EAAMQ,MACNR,EAAMolC,aACNplC,EAAMszB,eACNtzB,EAAMsnD,IACNxrB,EACAl+B,EACAoC,EAAMgkE,cAIJt6C,GAAa1qB,EAAAA,EAAAA,cAChBpB,IAAiBsF,EAAAA,EAAAA,KAACu4F,GAAe,CAACn0C,IAAKtnD,EAAMsnD,IAAI58C,MAAM,KAAK,GAAIrK,GAAIzC,EAAMyC,MAC3E,CAACL,EAAMsnD,MAGT,OACEpkD,EAAAA,EAAAA,KAACq7F,GAAwB,CACvBl+F,GAAIA,EACJC,KAAMN,EAAMM,KACZE,MAAOR,EAAMQ,MACb2tB,aAAcA,EACd7E,YAAatpB,EAAMspB,YACnBqM,iBAAkB31B,EAAM21B,iBACxB9F,eAAgB7vB,EAAM6vB,eACtBK,WAAYlwB,EAAMkwB,WAClBjsB,WAAYjE,EAAMiE,WAClB22C,WAAY56C,EAAM46C,WAClBvG,UAAWr0C,EAAMq0C,UACjB7kB,SAAUA,IACRssE,GAAkB4C,IACZA,GACFz1E,EAASjpB,EAAMM,KAAMo+F,EAAUz0F,KAAK2nF,GAAQA,IAC9C,IAGJloE,WAAYA,EACZuxB,mBAAoBj7C,EAAMi7C,mBAC1BtxB,oBAAqB3pB,EAAM2pB,oBAC3BgqB,SAAU3zC,EAAM2zC,UAGtB,CAEA,SAASooD,GAEP/7F,GASA,MAAM47F,GAAkBr0F,EAAAA,EAAAA,UAAQ,IAAM,IAAIqhD,gBAAgB5oD,EAAMsnD,IAAI58C,MAAM,KAAK,KAAK,CAAC1K,EAAMsnD,MAErF0c,GAAcz8D,EAAAA,EAAAA,UAAQ,KAC1B,IAAIigD,EAAqB,CAAC,EAG1B,OAFAo0C,EAAgBt/D,SAAQ,CAAC1+B,EAAO0R,IAASk4C,EAAMl4C,GAAO1R,IACtD4pD,EAAQ,IAAKA,KAAUxnD,EAAMgkE,aACtBxc,CAAK,GACX,CAACo0C,EAAiB57F,EAAMgkE,cAErBh0B,EAAO6zB,GAAqB,CAChCvc,IAAKtnD,EAAMsnD,IAAI58C,MAAM,KAAK,GAC1B4oB,eAAgBtzB,EAAMszB,eACtB8R,aAAcplC,EAAMolC,aACpBsoB,oBAAoB,EACpBxxB,iBAAkBl8B,EAAMk8B,iBACxB8nC,gBAEF,OACE9gE,EAAAA,EAAAA,KAACitC,GAAiB,CAChB5vC,MAAOP,EAAMO,MACbyI,SAAUhJ,EAAMgJ,SAChBsqB,eAAgBtzB,EAAMszB,gBAAkB,GACxC8R,aAAcplC,EAAMolC,aACpB4K,KAAMA,GAGZ,CCrLO,SAAS2uD,GAGd3+F,GAaA,MAAM,IAAQqK,EAAAA,EAAAA,MAERu0F,EAAoB5C,GAAsB,CAAEjjF,cAAc,IAC1D8lF,EAAoBP,KACpBQ,ECzBD,SAAgCC,GAAgC,GACrE,MAAM,IAAQ10F,EAAAA,EAAAA,MACd,OAAOrL,EAAAA,EAAAA,cACL4S,UACE,MAAMotF,EAAgC,GAChCC,EAA+B,GACrCC,GAAqB5iE,SAASw1C,GAC1B,mBAAoBA,EAElBmtB,EAAeh4F,KAAK6qE,GADpBktB,EAAoB/3F,KAAK6qE,EAAWzxE,MAG1C,MAKM8+F,EAAiB,UAL4B9xD,QAAQC,IACzD0xD,EAAoB/0F,KAAKm1F,GACvB7sC,GAAuBoC,EAAM,gBAAgByqC,EAAQ19E,mBAGH,MAAQu9E,GACxDI,EAAWF,EACd99F,QAAQywE,GAAmC,UAApBA,EAAWE,MAAoBF,EAAWtmB,OAAOymB,WACxEhoE,KAAKq1F,GAAcA,EAAU9zC,OAAOymB,SAASvwD,aAC1C69E,EAAuBJ,EAC1B99F,QAAQywE,GAAmC,UAApBA,EAAWE,OAClC/nE,KAAKu1F,GAAiBA,EAAanhC,eAAei+B,gBAAgBh8F,OAE/Dm/F,EACJJ,EAASh+F,QACP,CAACq+F,EAASC,EAAQC,IAAUA,EAAMj3C,QAAQ+2C,KAAaE,EAAMprC,YAAYkrC,KACzEh5F,OAAS,EACPm5F,EAAqC,IACtC,IAAI7wE,IACLuwE,EAAqBl+F,QACnB,CAACy+F,EAAMH,EAAQC,IAAUA,EAAMj3C,QAAQm3C,KAAUF,EAAMprC,YAAYsrC,OAKzE,OAAID,EAAyBn5F,OAAS,IAAMq4F,EACnC30F,EACL,yFAAyFy1F,EAAyBl1F,KAAK,SAGvH80F,EACKr1F,EAAE,uEADX,CAEA,GAEF,CAACA,EAAG20F,GAER,CDtB8BgB,GAAyB//F,GAAO++F,+BAE5D,OAAO/+F,EAAMggG,YACX98F,EAAAA,EAAAA,KAACs7F,GAA8B,CAC7Bl+F,KAAMN,EAAMM,KACZD,GAAIL,EAAMK,GAAKL,EAAMK,GAAK,aAC1BG,MAAOR,EAAMQ,MAAQR,EAAMQ,MAAQ4J,EAAE,cACrCkf,YAAatpB,EAAMspB,YAActpB,EAAMspB,YAAclf,EAAE,sBACvDurB,iBAAkBvrB,EAAE,0BACpBylB,eAAgBzlB,EAAE,6BAClB8lB,WAAYlwB,EAAMkwB,WAClBjsB,WAAYjE,EAAMiE,WAClBowC,UAAWr0C,EAAMq0C,UACjBiT,IAAKqN,EAAM,gBACXvvB,aAAcw5D,EACdtrE,eAAgBurE,EAChB76B,YAAahkE,EAAMgkE,YACnB/oB,mBAAoBj7C,EAAMi7C,mBAC1BtxB,oBAAqBA,CAACs2E,EAA+BC,IACnDD,EAAkB5/F,KAAO6/F,EAAiB7/F,GAE5CszC,SAAUmrD,EACVL,YAAc3sB,GACL,GAAGA,EAAWxxE,UAAUwxE,EAAWzT,eAAei+B,gBAAgBh8F,UAI7E4C,EAAAA,EAAAA,KAACw4F,GAA+B,CAC9Bp7F,KAAMN,EAAMM,KACZD,GAAIL,EAAMK,GAAKL,EAAMK,GAAK,aAC1BG,MAAOR,EAAMQ,MAAQR,EAAMQ,MAAQ4J,EAAE,cACrCkf,YAAatpB,EAAMspB,YAActpB,EAAMspB,YAAclf,EAAE,qBACvDurB,iBAAkBvrB,EAAE,0BACpBylB,eAAgBzlB,EAAE,6BAClB8lB,WAAYlwB,EAAMkwB,WAClBjsB,WAAYjE,EAAMiE,WAClBowC,UAAWr0C,EAAMq0C,UACjBiT,IAAKqN,EAAM,gBACXvvB,aAAcw5D,EACdtrE,eAAgBurE,EAChB76B,YAAahkE,EAAMgkE,YACnB/oB,mBAAoBj7C,EAAMi7C,oBAGhC,CE9DO,SAASklD,GAAgC52E,GAI9C,MAAM,IAAQlf,EAAAA,EAAAA,MACR6zD,EAAerW,KACf0tB,GAAYv2E,EAAAA,EAAAA,cACfu3F,GACCr4B,EAAaJ,GAAS85B,4BAA6B,CACjDrwC,OAAQ,CAAElnD,GAAIk2F,EAAqBl2F,OAEvC,CAAC69D,IAEG34B,EAAa8sC,GAAc,IAC5B9oD,EACH1f,QAAS0rE,IAEL0mB,EAAW9pB,KACX1sC,EAAoB+sC,KACpB4tB,EAAqBhtB,GACzBtV,GAAS62B,oBACTprE,EACAnf,EAAE,uBAEEsrE,EAAgBhD,GAAiBnpD,GACjCosD,EAAiB3C,GAAkBzpD,GAiBzC,OAhBqBhiB,EAAAA,EAAAA,UACnB,IAAM,CACJ00F,EACA12D,EACAE,EACA,CACEzhB,OAAQ5Z,EAAE,SACV4b,KAAOuwE,GAAyBA,EAAqB57D,MACrDr4B,KAAM,SAER89F,EACA1qB,EACAC,IAEF,CAACsmB,EAAU12D,EAAYE,EAAmBr7B,EAAGg2F,EAAoB1qB,EAAeC,GAGpF,CClDO,SAAS0qB,IAAgC,IAC9C/4C,GAGE,CAAC,GACH,MACMk1C,GADUl1C,EAAMA,EAAIzpD,QAAQ62D,GAAY,IAAM,KACrB,yBAgB/B,OAbuB6nC,GAAyB,CAC9CC,YAAaA,EACbC,cAAe,CAAC,OAAQ,KAAM,QAAS,aAAc,eACrDC,mBAAoB,CAClBr8F,GAAI,CACFk9F,QAASf,GAEXl8F,KAAM,CACJi9F,QAASf,IAGbG,kBAAmB,CAbUyB,KACCC,OAelC,CCTO,SAASiC,GAGdtgG,GASA,MAAM,IAAQqK,EAAAA,EAAAA,MACRk2F,EAA8BJ,GAAgC,CAAEpnF,cAAc,IAC9EynF,EAA8BH,KACpC,OACEn9F,EAAAA,EAAAA,KAACw4F,GAA+B,CAC9Bp7F,KAAMN,EAAMM,KACZD,GAAG,uBACHG,MAAOR,EAAMQ,OAAS4J,EAAE,yBACxBkf,YAAalf,EAAE,gCACfurB,iBAAkBvrB,EAAE,qCACpBylB,eAAgBzlB,EAAE,wCAClB8lB,WAAYlwB,EAAMkwB,WAClBjsB,WAAYjE,EAAMiE,WAClB22C,WAAY56C,EAAM46C,WAClB0M,IAAKqN,EAAM,2BACXqP,YACEhkE,EAAMygG,eACF,CACEC,qBAAsB1gG,EAAMygG,eAAe/+E,WAC3Ci/E,yBAA0B,aAE5B97F,EAENugC,aAAcm7D,EACdjtE,eAAgBktE,EAChBvlD,mBAAoBj7C,EAAMi7C,oBAGhC,CCrDO,SAAS2lD,GAAyBr3E,GAIvC,MAAM,IAAQlf,EAAAA,EAAAA,MACR0O,EAAewQ,GAAWA,EAAQxQ,aAClC+uC,EAAaT,KACbquB,EAAgBhD,GAAiBnpD,GACjCosD,EAAiB3C,GAAkBzpD,GAqEzC,OAnEqBhiB,EAAAA,EAAAA,UACnB,IAAM,CACJ,CACEyc,OAAQ5Z,EAAE,QACV4b,KAAO66E,IACL39F,EAAAA,EAAAA,KAACmV,GAAQ,CACPrN,GACE+N,OACIlU,EACAijD,EAAWgW,GAAS0c,qBAAsB,CACxCjzB,OAAQ,CACNlnD,GAAIwgG,EAAcxgG,MAI5BsR,KAAMkvF,EAAcvgG,OAGxBgC,KAAM,OACN0hC,KAAM,OACNuC,KAAM,QAER,CACEviB,OAAQ5Z,EAAE,QACV4b,KAAO66E,IACL39F,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAMkvF,EAAcC,mBAAqB12F,EAAE,mBAAqBA,EAAE,oBAGtE45B,KAAM,WACNuC,KAAM,YAER,CACEviB,OAAQ5Z,EAAE,gBACV4b,KAAO66E,GAAkBA,EAAc3qB,cAEzC,CACElyD,OAAQ5Z,EAAE,cACV4b,KAAO66E,GAAkBA,EAAc1qB,YAEzC,CACEnyD,OAAQ5Z,EAAE,aACV4b,KAAO66E,GAAkBA,EAAcrqB,WAEzC,CACExyD,OAAQ5Z,EAAE,iBACV4b,KAAO66E,GACAA,EAAcC,mBASZ,KARDD,EAAcE,UAEd79F,EAAAA,EAAAA,KAAC8qC,GAAAA,EAAQ,CAACpwC,MAAOiT,KAAK4Q,MAAM,IAAMo/E,EAAc5qB,+BAG7C/yE,EAAAA,EAAAA,KAACmV,GAAQ,CAAC1G,KAAMvH,EAAE,eAAgB5K,MAAM,QAKnD+mC,KAAM,aAERmvC,EACAC,IAGF,CAACvrE,EAAGsrE,EAAeC,EAAgB58D,EAAc+uC,GAIrD,CCnDO,SAASk5C,GAAwB50D,GACtC,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR0kC,EAAsB6xD,GAAyB,CAAE7nF,cAAc,EAAM0mD,aAAa,IAClF8W,EAAyBlE,GAAc,CAAEt5D,cAAc,EAAM0mD,aAAa,IAC1EvzB,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAACgvE,IAAyB,CAACA,IACzDzT,EAAaH,KACbs+B,EAA6BJ,GAC1BA,GAAexiC,gBAAgB6iC,mBAAmB3yC,YACrD1pD,EACAuF,EAAE,wEAEF+2F,GAAoBniG,EAAAA,EAAAA,cACxB4S,MAAOmmE,EAAiCqpB,KACtC,IAAIt8E,EAAyB,GA4B7B,GAtBIizD,EAAerxE,OAAS,IAC1Boe,EAAe,CACb1a,EAAE,2EAA4E,CAC5EoV,MAAOu4D,EAAerxE,OAAS06F,EAA0B16F,WAK3D06F,EAA0B16F,OAAS,GACrCoe,EAAa7d,KACXmD,EACE,8FACA,CACEoV,MAAO4hF,EAA0B16F,UASX,IAA1BqxE,EAAerxE,SAAiB06F,EAA0B16F,OAAQ,CACpE,MAAM26F,QA9DdzvF,eAA+CivF,GAC7C,MAAMS,QAAiC/uC,GACrCoC,EAAM,mCAAmCksC,EAAcxgG,GAAGqhB,cAEtD6/E,QAA+BhvC,GACnCoC,EAAM,iCAAiCksC,EAAcxgG,GAAGqhB,cAEpD8/E,QAA6BjvC,GAEjCoC,EAAM,2CAA2CksC,EAAcxgG,GAAGqhB,cAEpE,MAAO,CACL+/E,mBACEH,GAA0B9hF,MAAQgiF,GAAsBhiF,MAAQ+hF,GAAwB/hF,MAC1FkiF,0BAA2BJ,GAA0B9hF,OAAS,EAC9DmiF,wBAAyBJ,GAAwB/hF,OAAS,EAC1DoiF,sBAAuBJ,GAAsBhiF,OAAS,EAE1D,CA4C+CqiF,CAAgC9pB,EAAe,IACtF,GAAIspB,GAA0BI,mBAAqB,EAAG,CACpD,IAAIK,EAAyB13F,EAC3B,oEAEEi3F,EAAyBO,sBAAwB,IAEjDP,EAAyBI,mBACvBJ,EAAyBO,sBAC3B,EAEAE,GAA0B13F,EAAE,wBAAyB,CACnDoV,MAAO6hF,EAAyBO,wBAGlCE,GAA0B13F,EAAE,sBAAuB,CACjDoV,MAAO6hF,EAAyBO,yBAIlCP,EAAyBK,0BAA4B,IACnDL,EAAyBM,wBAA0B,EACrDG,GAA0B13F,EAAE,4BAA6B,CACvDoV,MAAO6hF,EAAyBK,4BAGlCI,GAA0B13F,EAAE,0BAA2B,CACrDoV,MAAO6hF,EAAyBK,6BAIlCL,EAAyBM,wBAA0B,IACrDG,GAA0B13F,EAAE,wBAAyB,CACnDoV,MAAO6hF,EAAyBM,2BAGpC78E,EAAe,CAACg9E,EAClB,CACF,CAEA,OAAOh9E,CAAY,GAErB,CAAC1a,IAmCH,OAhC6BwH,UAC3B,MAAMwvF,EAA4BrpB,EAAe12E,OAAO4/F,GAClDn8E,QAAqBq8E,EAAkBppB,EAAgBqpB,GACvDW,EAAwBhqB,EAAevwE,OAAO4wF,GAAOA,EAAG0I,qBAC9Dh+B,EAAW,CACTviE,MACI6J,EADG23F,EACD,sCACA,qCADuC,CAAEviF,MAAOu4D,EAAerxE,SAErEzF,YACImJ,EADS23F,EACP,yEAGA,wEAH0E,CAC1EviF,MAAOu4D,EAAerxE,OAAS06F,EAA0B16F,SAK/DwoC,iBAAkB6yD,EACd33F,EAAE,0BACFA,EAAE,wBAAyB,CACzBoV,MAAOu4D,EAAerxE,OAAS06F,EAA0B16F,SAE/Ds1B,MAAO+7C,EAAez1E,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QAC9D27B,MAAO62B,GACPtoD,UAAU,EACVukC,sBACA7C,gBACAE,aACAD,SAAUA,CAAC00D,EAA8BlyE,IACvCgkC,GAAcgC,EAAM,oBAAoBksC,EAAcxgG,GAAGqhB,cAAeiN,GAC1E7J,eACAkqB,oBAAqBiyD,GACrB,CAGN,CCzIO,SAASe,KACd,MAAM,KAAE5+E,GAAS0jD,GAA6CnS,EAAM,sBAC9D,IAAQtqD,EAAAA,EAAAA,MACd,OAAO9C,EAAAA,EAAAA,UACL,IACE6b,GAAQA,EAAK5c,SAAW4c,EAAK5c,QAAc,UACvC3B,EACAuF,EACE,kJAER,CAACgZ,EAAMhZ,GAEX,CAiDO,SAAS63F,GAA2B71D,GACzC,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR6zD,EAAerW,KACfq6C,EAAuBlB,GAAwB50D,GAC/Cmb,GAASgZ,EAAAA,GAAAA,KACf,OAAOh5D,EAAAA,EAAAA,UACL,IAAM,CACJ,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAM84D,GAAAA,GACNvxD,UAAU,EACVpH,QAASghD,EAAOlnD,GAAKyH,EAAAA,GAAcC,QAAUD,EAAAA,GAAc4D,MAC3DlL,MAAO4J,EAAE,uBACTnG,WAAa48F,GACXA,EAAcxiC,gBAAgB6iC,mBAAmB5G,UAC7Cz1F,EACAuF,EACE,iJAERxG,SAAWi9F,GAAkBA,EAAcC,mBAC3Cj3F,QAAUg3F,GACR3iC,EAAaJ,GAASqkC,kBAAmB,CAAE56C,OAAQ,CAAElnD,GAAIwgG,EAAcxgG,OAE3E,CACEsG,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAM84D,GAAAA,GACN34D,QAASghD,EAAOlnD,GAAKyH,EAAAA,GAAcC,QAAUD,EAAAA,GAAc4D,MAC3DiC,UAAU,EACVnN,MAAO4J,EAAE,wBACTnG,WAAa48F,GACXA,EAAcxiC,gBAAgB6iC,mBAAmB5G,UAC7Cz1F,EACAuF,EACE,kJAERxG,SAAWi9F,IAAmBA,EAAcC,mBAC5Cj3F,QAAUg3F,GACR3iC,EAAaJ,GAASskC,mBAAoB,CAAE76C,OAAQ,CAAElnD,GAAIwgG,EAAcxgG,OAE5E,CAAEsG,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,yBACTnG,WAAa48F,GACXA,EAAcxiC,gBAAgB6iC,mBAAmB3yC,YAC7C1pD,EACAuF,EACE,mJAERxG,SAAWi9F,GAAkBA,EAAcC,mBAC3Cj3F,QAAUg3F,GAAkBqB,EAAqB,CAACrB,IAClDr2F,UAAU,GAEZ,CACE7D,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,0BACTnG,WAAa48F,GACXA,EAAcxiC,gBAAgB6iC,mBAAmB3yC,YAC7C1pD,EACAuF,EACE,oJAERxG,SAAWi9F,IAAmBA,EAAcC,mBAC5Cj3F,QAAUg3F,GAAkBqB,EAAqB,CAACrB,IAClDr2F,UAAU,KAGd,CAAC03F,EAAsBhkC,EAAc9zD,EAAGm9C,EAAOlnD,IAEnD,CC3IO,SAASgiG,KACd,MAAM,EAAEj4F,IAAMC,EAAAA,EAAAA,MACRipB,EAAiBgvE,KACjBl9D,EAAew7D,KACf5wD,EAAO6zB,GAAW,CACtBvc,IAAKqN,EAAM,oBACXrhC,iBACA8R,iBAEIvM,EDQD,SACLuT,GAEA,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR6zD,EAAerW,KACfq6C,EAAuBlB,GAAwB50D,GAC/Cm2D,EAAyBP,KAE/B,OAAOz6F,EAAAA,EAAAA,UACL,IAAM,CACJ,CACEZ,KAAMrJ,EAAewL,SACrB1C,KAAM40B,GAAAA,GACNz0B,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVjK,UAAWnG,EAAoBoG,KAC/BnD,MAAO4J,EAAE,gBACTnG,WAAYs+F,EACZ/7F,QAAS,CACP,CACEG,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/BnD,MAAO4J,EAAE,0BACTP,QAASA,IAAMq0D,EAAaJ,GAAS0kC,uBAEvC,CACE77F,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/BnD,MAAO4J,EAAE,yBACTP,QAASA,IAAMq0D,EAAaJ,GAAS2kC,wBAI3C,CAAE97F,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,0BACTP,QAASq4F,EACT13F,UAAU,KAGd,CAAC03F,EAAsBK,EAAwBrkC,EAAc9zD,GAEjE,CCrDyBs4F,CAA+B1yD,EAAK00B,yBACrDr/B,EAAa48D,GAA2BjyD,EAAK00B,yBAC7C69B,EAAyBP,KAE/B,OACEx5F,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,mBACT+5C,eAAgB/5C,EAAE,mBAClB85C,UAAW95C,EACT,6IAEF0U,YAAa1U,EACX,yFAEFy5C,eAAe3gD,EAAAA,EAAAA,KAACyjE,GAAkB,CAAChgE,KAAM,sBAE3CzD,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,4BACHizB,eAAgBA,EAChBuF,eAAgBA,EAChBuM,aAAcA,EACdC,WAAYA,EACZ8C,gBAAiB/9B,EAAE,iCACnBg+B,gBAEMh+B,EADJm4F,EACM,0DACA,0BAERl6D,sBAEMj+B,EADJm4F,EAEM,wFAEA,8DAER/3D,eAAgB+3D,EAAyBtnE,GAAAA,QAAYp2B,EACrD6jC,kBAAmB65D,OAAyB19F,EAAYg0B,EAAe8C,MAAM,EAAG,MAC5EqU,EACJ1K,gBAAiBl7B,EAAE,sBAI3B,CAEO,SAASk4F,KASd,OARuB/F,GAAyB,CAC9CC,YAAa,kBACbC,cAAe,CAAC,OAAQ,MACxBC,mBAAoB,CAClBp8F,KAAM,CAAEi9F,QAAS,mBACjBl9F,GAAI,CAAEk9F,QAAS,qBAIrB,CCtEO,SAASoF,GAGd3iG,GAMA,MAAM,IAAQqK,EAAAA,EAAAA,MACR+6B,EAAew7D,KACf1rE,EAAUotE,KAChB,OACEp/F,EAAAA,EAAAA,KAACs7F,GAA8B,IACzBx+F,EACJM,KAAMN,EAAMM,KACZ8kC,aAAcA,EACd9R,eAAgB4B,EAChBS,iBAAkBvrB,EAAE,8BACpBylB,eAAgBzlB,EAAE,iCAClBk9C,IAAKqN,EAAM,oBACXt0D,GAAG,wBACHipB,YAAalf,EAAE,0BACfiqC,UAAWr0C,EAAMq0C,UACjB7zC,MAAO4J,EAAE,mBACT8lB,WAAYlwB,EAAMkwB,WAClBvG,oBAAqBA,CAACi5E,EAA2BC,IAC/CD,EAAWviG,KAAOwiG,EAAWxiG,IAIrC,CC7BO,SAASyiG,GAGd9iG,GAOA,MAAM,eAAEs0C,EAAc,UAAED,EAAS,KAAE/zC,EAAI,gBAAEm9C,EAAe,mBAAExC,GAAuBj7C,GAC3E,EAAEoK,IAAMC,EAAAA,EAAAA,OAER,QAAE+qD,EAAO,UAAE9oC,GAAc8zD,GAAyBzrB,EAAM,WAAY,CAAEouC,SAAU,SAChFx5E,EAAU+C,EAAY,CAAC,CAAEhsB,KAAM,KAAQ80D,EAC7C,OACElyD,EAAAA,EAAAA,KAACk4F,GAAuB,CACtB9mD,eAAgBA,EAChBD,UAAWA,EACX/zC,KAAMA,EACNm9C,gBAAiBA,GAAmBrzC,EAAE,2BACtC5J,MAAO4J,EAAE,UACT6wC,mBAAoBA,QAAsBp2C,EAC1C0kB,QACEA,GAAStf,KAAKzJ,IAAK,CAAQ5C,MAAO4C,EAAOA,MAAOA,EAAMF,UAAY,CAAC,CAAEE,MAAO,GAAI5C,MAAO,MAI/F,CCKO,SAASolG,GAIdhjG,GACA,MAAM,WACJkwB,EAAU,MACV1vB,EAAK,iBACLyiG,EAAgB,mBAChBC,EAAkB,KAClB5iG,EAAI,iBACJw7F,EAAgB,YAChBxyE,EAAW,MACXk+B,EAAK,cACL27C,EAAa,mBACbC,EAAkB,UAClB/uD,EAAS,eACTC,EAAc,mBACd2G,GACEj7C,EACEK,EAAKN,EAAMC,IAEX,QACJ4zC,EAAO,SACP3qB,EACA4qB,WAAW,aAAE/C,KACXgD,EAAAA,GAAAA,OAEGpmB,EAAcC,IAAmB/uB,EAAAA,EAAAA,aAEjCuzC,GAAyB9uC,IAE1BgrB,GAAervB,EAAAA,EAAAA,cAClBq5B,IACCpP,EAAS3oB,OAAMuE,GACf8oB,OAAgB9oB,GACT2iD,EAAMnvB,GACVzJ,MAAM7nB,IACgB,IAAjBA,EAAO6mB,OAAwC,IAAzB7mB,EAAOiG,OAAOtG,QACtCuiB,EAAS3oB,EAAMyG,EAAOiG,OAAO,IAExBjG,KAERmL,OAAOF,IACNA,aAAewV,MACXmG,EAAgB3b,GAChB2b,EAAgB,IAAInG,MAAM2qB,EAAsBxvC,eAC7C,CAAEirB,MAAO,EAAG5gB,OAAQ,SAGjC,CAACmlC,EAAsBxvC,aAAcrC,EAAMknD,EAAOv+B,IAE9C8qB,EAAWV,GAA0BrzC,EAAMQ,MAAOR,EAAMkwB,YAE9D,OACEhtB,EAAAA,EAAAA,KAAC8wC,GAAAA,GAAU,CACT1zC,KAAMA,EACNszC,QAASA,EACTK,kBAAgB,EAChB5jC,OAAQA,EAAG6jC,OAAS1uC,WAAU5H,SAASu2C,YAAcjkC,aAEjDhN,EAAAA,EAAAA,KAACy3C,GAAa,CACZG,QAASz6C,EACTG,MAAOA,EACP6zC,UAAWA,EACXC,eAAgBA,GAAkB9zC,EAClC4zC,kBAAmB1mB,EAAeu1E,EAAmB/yF,GAAOK,QAC5D2f,WAAYA,EACZ+qB,mBAAoBA,EAAmB73C,UAEvCF,EAAAA,EAAAA,KAACmgG,GAAW,CACVhjG,GAAIA,EACJkG,QAASvG,EAAMuG,QACfihD,MAAOn5B,EACP80E,cAAeA,EACfC,mBAAoBA,EACpB95E,YAAaA,EACb45E,mBAAoBA,EACpBtlG,MAAOA,EACPoL,SAAUxD,EACV4lB,WAAYprB,EAAMorB,YAAc0lB,EAChCgN,UAAWpwB,GAAcnd,SAAWL,GAAOK,QAAU,aAAU1L,EAC/DqrB,WAAYA,EACZgd,MAAOltC,EAAMktC,MACb4uD,iBAAkBA,EAClBpuE,eAAgBA,EAChB41E,UAAW,GAAGhjG,mBAKtBk0C,MAAO,CAAET,aAGf,CA0BO,SAASsvD,GAA2BrjG,GACzC,MAAM,GACJK,EAAE,WACF+qB,EAAU,UACVk4E,EAAS,aACT51E,EAAY,mBACZw1E,EAAkB,SAClBl6F,EAAQ,YACRsgB,EAAW,MACXk+B,EAAK,UACL1J,EAAS,QACTv3C,GACEvG,GAEGmN,EAAMyc,IAAWhrB,EAAAA,EAAAA,WAAS,IAE1BukG,IAAiBvkG,EAAAA,EAAAA,WAAS,IAAMoB,EAAMmjG,iBACtCC,IAAsBxkG,EAAAA,EAAAA,WAAS,IAAMoB,EAAMojG,qBAE5CxlG,GAAQ2J,EAAAA,EAAAA,UAAQ,KACpB,GAAKvH,EAAMpC,MACX,OAAO,IAAI2lG,GAA8BvjG,EAAMpC,MAAOulG,EAAc,GACnE,CAACnjG,EAAMpC,MAAOulG,KAEV55E,EAASuE,IAAclvB,EAAAA,EAAAA,UAAsC,OAC7D4kG,EAAiBC,IAAsB7kG,EAAAA,EAAAA,WAAS,IAEhDuzC,GAAyB9uC,KAEzBiqB,EAASC,IAAc3uB,EAAAA,EAAAA,WAAS,GACjC47B,GAASx7B,EAAAA,EAAAA,cAAY,KACzBuuB,GAAYD,GACNA,IACJQ,EAAW,IACX05B,EAAMxnD,EAAMktC,OACTte,MAAM7nB,IACgB,IAAjBA,EAAO6mB,OAAwC,IAAzB7mB,EAAOiG,OAAOtG,QACtCsC,EAASjC,EAAOiG,OAAO,IAErBjG,EAAO6mB,MAAQ5tB,EAAMktC,OACvBu2D,GAAmB,GACnB31E,EAAW,MAEX21E,GAAmB,GACnB31E,EACE/mB,EAAOiG,OAAO/C,KAAKrM,GAAU,IAAI2lG,GAA8B3lG,EAAOulG,MAE1E,IAEDjxF,OAAM,IAAM,OACZkd,SAAQ,IAAM7B,GAAW,MACrB,IACP,GACD,CAACvkB,EAAUhJ,EAAMktC,MAAOsa,EAAO27C,KAElClkG,EAAAA,EAAAA,WAAUu7B,EAAQ,CAACA,IAEnB,MAAMkpE,GAAW1kG,EAAAA,EAAAA,cACf,CAACgR,EAAY2zF,KACVp6E,GAAW,IACTloB,QAAQ4oB,IACF05E,KACD15E,IAC6E,IAAxEA,EAAOvI,WAAWthB,cAAcuoD,QAAQg7C,EAAYvjG,iBAI9D6J,KAAKggB,IACJ,MAAMiD,EAAW/sB,EAAM8pB,EAAOvI,YAC9B,OACExe,EAAAA,EAAAA,KAACupB,GAAAA,EAAY,CAEX7uB,MAAOqsB,EACPnL,YACE,WAAYmL,GAAUA,EAAOA,OACzBm5E,IAAqBn5E,EAAOA,aAC5BplB,EAEN,UAASqoB,EAAS9pB,SAEjB6mB,EAAOvI,YATHuI,EAAOvI,WAUC,KAGvB,CAAC6H,EAAS65E,IAEZ,OACE56F,EAAAA,EAAAA,MAAC0pB,GAAAA,EAAU,CAAA9uB,SAAA,EACTF,EAAAA,EAAAA,KAACivB,GAAAA,EAAc,CAAC0sB,QAAM,EAAAz7C,UACpBF,EAAAA,EAAAA,KAAC4nB,GAAAA,EAAM,CACL84E,SAAUvjG,EACVsL,OAAO,cACP,kBAAiB23F,EACjB/8F,QAASA,EAAUy0F,GAAAA,GAAc,GAAGz0F,KAAay0F,GAAAA,GAAc6I,OAC/D9lD,qBAAmB,EACnBN,gBACE/vB,EACIykB,EAAsBpxC,eACtBmiG,GACE51E,EACE41E,EAEF55E,EAERw6E,mBAAoBx6E,EACpB,UAAQ,gBACRu0B,WAAYjgD,EACZoL,SAAUA,CAACgH,EAAGpS,KACS,iBAAVA,GAAsB,WAAYA,GAASA,EAAMqsB,SAC1DjhB,EAASpL,EAAMqsB,QACfL,GAAQ,GACV,EAEFqC,QAASruB,IAAUoC,EAAMkwB,WAAa,IAAMlnB,EAAS,WAAQnE,EAC7DkE,OAAQoE,EACR1H,SAAUA,CAACijB,EAAQvb,KACbugB,EACF8M,IAGErtB,EACEq2F,GAAmBxjG,EAAM87F,iBAC3B97F,EAAM87F,iBAAiB9yF,EAAUhJ,EAAMpC,OAEvCgsB,GAAQ,GAGVA,GAAQ,EACV,EAEF8sC,gBACEppC,GACEpqB,EAAAA,EAAAA,KAACspB,GAAAA,EAAO,CACN/tB,KAAK,KACLsG,MAAO,CAAEgd,QAAS,EAAGuJ,cAAe,GACpC,UAAQ,oBAERoC,GACFxqB,EAAAA,EAAAA,KAACysB,GAAAA,GAAW,IACV6zE,GACFtgG,EAAAA,EAAAA,KAACunC,GAAAA,GAAU,CAAC,UAAQ,uBAClB5lC,EAENi5C,UAAWA,EACX75C,WAAwB,OAAZslB,GAAoB+D,GAAWlC,EAC3Cs4E,SAAUA,EACVK,gBAA6B,OAAZx6E,GAAoBA,EAAQ7iB,OAAS,GACtDs9F,aAAa,SACbtmF,UAAW,OACXqP,OACE/sB,EAAM87F,kBACJ54F,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACL,UAAQ,gBACRlC,QAAQ,OACRsD,QAASA,KACP+f,GAAQ,GACR5pB,EAAM87F,mBAAmB9yF,EAAUhJ,EAAMpC,MAAM,EAC/CwF,SACH,gBAGCyB,EACLzB,UAECmmB,GAAW,IAAItf,KAAKggB,IACpB/mB,EAAAA,EAAAA,KAACupB,GAAAA,EAAY,CAEX7uB,MAAOqsB,EACPnL,YACE,WAAYmL,GAAUA,EAAOA,OACzBm5E,IAAqBn5E,EAAOA,aAC5BplB,EACLzB,SAEA6mB,EAAOvI,YARHuI,EAAOvI,kBAcnB1hB,EAAMikG,oBAAiC,IAAZ32E,GAC1BpqB,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAAClC,QAAQ,UAAUsD,QAAS2wB,EAAOp3B,UACxCF,EAAAA,EAAAA,KAACysB,GAAAA,GAAW,OAGdzsB,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,IAED5H,EAAMikG,oBAAiC,IAAZ32E,GAC1BpqB,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAAClC,QAAQ,UAAUtC,YAAU,EAAAb,UAClCF,EAAAA,EAAAA,KAACspB,GAAAA,EAAO,CAAC/tB,KAAK,KAAKsG,MAAO,CAAEgd,QAAS,EAAGuJ,cAAe,QAGzDpoB,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,MAIR,CAEA,MAAM27F,GACJ3zF,WAAAA,CACSqa,EACCi6E,GACR,KAFOj6E,OAAAA,EAAqB,KACpBi6E,SAAAA,CACP,CAEHxiF,QAAAA,GACE,OAAOpR,KAAK4zF,SAAS5zF,KAAK2Z,OAC5B,CAEAk6E,SAAAA,CAAUC,GACR,OAAO9zF,KAAKoR,aAAe0iF,EAAa1iF,UAC1C,ECtWK,SAAS2iF,GAAsB96E,GACpC,MAAM20C,EAAerW,MACf,EAAEz9C,IAAMC,EAAAA,EAAAA,MAERkrE,GAAYv2E,EAAAA,EAAAA,cACfy0E,GAMQvV,EAAaJ,GAAS82B,iBAAkB,CAC7CrtC,OAAQ,CAAEmsB,eAN6B,CACvC,GAAI,YACJQ,MAAO,kBACPC,YAAa,yBAGmBV,EAAUzB,MAAO3xE,GAAIozE,EAAUpzE,OAGnE,CAAC69D,IAEG34B,EAAa8sC,GAAc,IAAK9oD,EAAS1f,QAAS0rE,IAClDG,EAAgBhD,GAAiBnpD,GACjCkc,EAAoB+sC,KACpBmD,EAAiB3C,GAAkBzpD,GACnC62E,EAAqBhtB,GAA0BtV,GAAS62B,oBAAqBprE,GAC7E+6E,GAAa/8F,EAAAA,EAAAA,UACjB,KAAM,CACJyc,OAAQ5Z,EAAE,QACVzD,KAAM,OACN/I,MAAQ61E,IACN,OAAQA,EAAUzB,MAChB,IAAK,QACH,OAAO5nE,EAAE,mBACX,IAAK,cACH,OAAOA,EAAE,yBACX,QACE,OAAOA,EAAE,aACb,EAEF45B,KAAM,WACNuC,KAAM,WACN9f,UAAW,YAEb,CAACrc,IAEG+0E,GAAe53E,EAAAA,EAAAA,UACnB,KAAM,CACJyc,OAAQ5Z,EAAE,UACV4b,KAAOytD,IACL,GAAuB,KAAnBA,EAAUzB,KACZ,OAAO,KAET,IAAIuyB,EAAa,WACb9wB,EAAU+wB,wBAEVD,EADE9wB,EAAUgxB,gCACC,QAEA,aAEX,WAAYhxB,IACd8wB,EAAc9wB,EAAiC7lC,SAInD,IAAIjpC,EAAU,GAOd,OALEA,EADE8uE,EAAU+wB,sBACFp6F,CAAC,6BAEDA,CAAC,qCAGRzF,GAKHzB,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CAACC,QAASR,EAAS2B,SAAS,MAAKlD,UACvCF,EAAAA,EAAAA,KAACosE,GAAU,CAAC1hC,OAAQ22D,OALfrhG,EAAAA,EAAAA,KAACosE,GAAU,CAAC1hC,OAAQ22D,GAMjB,KAIhB,CAACn6F,IAsBH,OApBqB7C,EAAAA,EAAAA,UACnB,IAAM,CACJg+B,EACAE,EACA05C,EACAmlB,EACAlE,EACA1qB,EACAC,IAEF,CACEpwC,EACAE,EACA05C,EACAmlB,EACAlE,EACA1qB,EACAC,GAIN,CC/GO,SAAS+uB,KACd,MAAMC,EjBsJD,WACL,MAAM,EAAEv6F,IAAMC,EAAAA,EAAAA,MACd,OAAO9C,EAAAA,EAAAA,UACL,KAAM,CACJ+H,IAAK,iBACL9O,MAAO4J,EAAE,kBACTzD,KAAMysB,GAAkBuB,YACxB6yB,MAAO,OACPj+B,QAAS,CACP,CAAE/oB,MAAO4J,EAAE,aAAcxM,MAAO,IAChC,CAAE4C,MAAO4J,EAAE,mBAAoBxM,MAAO,SACtC,CAAE4C,MAAO4J,EAAE,yBAA0BxM,MAAO,gBAE9C0rB,YAAalf,EAAE,gBACfsgB,oBAAoB,KAEtB,CAACtgB,GAEL,CiBxKqCw6F,GAenC,OAXuBrI,GAAyB,CAC9CC,YAAa,cACbC,cAAe,CAAC,OAAQ,KAAM,aAAc,cAAe,kBAC3DC,mBAAoB,CAAEp8F,KAAM,CAAEi9F,QAAS,eAAiBl9F,GAAI,CAAEk9F,QAAS,gBACvEZ,kBAAmB,CAPUyB,KACCC,KAS5BsG,GAEF/H,cAAe,CAAC,SAGpB,CCdA,SAASiI,GAAgB7kG,GACvB,MAAMszB,EAAiBoxE,KACjBt/D,EAAei/D,GAAsB,CAAEtrF,cAAc,IACrDi3B,EAAO6zB,GAAsB,CACjCvc,IAAKqN,EAAM,gBACXrhC,iBACA8R,eACAsoB,oBAAoB,IAEtB,OACExqD,EAAAA,EAAAA,KAACq4F,GAAkB,IACbv7F,EACJszB,eAAgBA,EAChB8R,aAAcA,EACd4K,KAAMA,GAGZ,CCdO,SAAS80D,GAGd9kG,GAMA,MAAM,IAAQqK,EAAAA,EAAAA,MACRyxF,EDMD,WACL,MAAO9rF,EAAG8rB,GAAaD,MACjB,EAAEzxB,IAAMC,EAAAA,EAAAA,MAOd,OAN4BrL,EAAAA,EAAAA,cACzBgK,IACC8yB,GAAU54B,EAAAA,EAAAA,KAAC2hG,GAAe,CAACtkG,MAAO6J,EAAE,oBAAqBpB,SAAUA,IAAa,GAElF,CAAC8yB,EAAW1xB,GAGhB,CChB2B26F,GACnBv9C,GAAQxoD,EAAAA,EAAAA,cAAY4S,UACxB,MAAMm/C,QAAiBwB,GACrBoC,EAAM,gBAAgBqwC,OAAO,mBAE/B,OAAO33D,QAAQqd,QAAQ,CACrB98B,MAAOmjC,EAASvxC,MAChBxS,OAAQ+jD,EAASqE,SACjB,GACD,IACH,OACElyD,EAAAA,EAAAA,KAAC8/F,GAAmB,CAClB1iG,KAAMN,EAAMM,KACZD,GAAG,YACHkG,QAAQ,YACR00C,mBAAoBj7C,EAAMi7C,mBAC1Bz6C,MAAO4J,EAAE,aACTo9C,MAAOA,EACP27C,cAAgBvlG,GAAWA,GAAqB0C,MAAQ,GACxDgpB,YAAalf,EAAE,oBACfkqC,eAAgBlqC,EAAE,aAClBiqC,UACEr0C,EAAMq0C,WACNjqC,EAAE,8EAEJ84F,mBAAoB94F,EAAE,0BACtB64F,iBAAkB74F,EAAE,6BACpB8lB,WAAYlwB,EAAMkwB,WAClBgd,MAAO,IACP4uD,iBAAkBA,GAGxB,CAEO,SAASmJ,GAGdjlG,GAOA,MAAM,IAAQqK,EAAAA,EAAAA,MACR0Q,EAAUspF,GAAsB,CAAEtrF,cAAc,IAChDmc,EAAUwvE,KAChB,OACExhG,EAAAA,EAAAA,KAACw4F,GAA+B,CAC9Bp7F,KAAMN,EAAMM,KACZD,GAAG,YACHG,MAAO4J,EAAE,aACTkf,YAAalf,EAAE,oBACfurB,iBAAkBvrB,EAAE,0BACpBylB,eAAgBzlB,EAAE,6BAClB8lB,WAAYlwB,EAAMkwB,WAClBjsB,WAAYjE,EAAMiE,WAClB22C,WAAY56C,EAAM46C,WAClBvG,UAAWr0C,EAAMq0C,UACjBiT,IAAKqN,EAAM,gBACXvvB,aAAcrqB,EACduY,eAAgB4B,GAGtB,CCvFO,SAASgwE,IAAiB,SAC/BthG,GAAW,EAAK,SAChBR,IAKA,OAAOQ,EAAW,MAAOV,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SAAGA,GAC9B,CCeO,SAAS+hG,KACd,MAAM,EAAE/6F,IAAMC,EAAAA,EAAAA,OACR,WAAEq/C,EAAU,YAAEG,GAAgBb,MAI9B,MAAEo8C,IAAUtxD,EAAAA,GAAAA,MACZuxD,GAAahgC,EAAAA,GAAAA,IAAuC,CAAE/kE,KAAM,YAE1DmkF,cAAezoB,EAAM,SAAE/kB,EAAQ,OAAEnI,GAAW4a,EAC9Cm/B,EAAW5xC,EACXwpD,EAAiB5X,GAAUvV,cAAgB,KAiDjD,OA/CAr0E,EAAAA,EAAAA,YAAU,KACR4qD,GAAagB,IAAI,IACZA,EACHy6C,gBAAiB,CACfx2D,OAAQu2D,MAET,GACF,CAACA,EAAYx7C,KAEhB5qD,EAAAA,EAAAA,YAAU,KACR,IAAK+8D,IAAWA,GAAQosB,SAAU,OAClC,MAAM,SAAEA,GAAapsB,EAEfupC,EAAiBnd,GAAUh7E,QAAQnD,KAAKzJ,IAAK,IAC9CA,EACH4qB,YAAY,MAERo6E,EAAsB,CAC1BnzC,YAAavjB,GAAQujB,aAAe+1B,EAAS/1B,YAC7CqyB,UAAW51C,GAAQ41C,WAAa0D,EAAS1D,UACzCI,sBAAuBh2C,GAAQg2C,uBAAyBsD,EAAStD,uBAAuBzkF,GACxF6lF,WAAYp3C,GAAQo3C,YAAckC,EAASlC,WAC3ClB,MAAOl2C,GAAQk2C,OAASoD,EAASpD,MACjC+C,gBAAiBj5C,GAAQi5C,iBAAmBK,EAASL,gBACrDtU,UAAW3kC,GAAQ2kC,YAAc2U,EAAS3U,UAAUpzE,GAAK+nF,EAAS3U,UAAY,MAC9E0R,gBAAiBr2C,GAAQq2C,iBAAmBiD,EAASjD,gBACrDS,SAAU92C,GAAQ82C,UAAYsD,GAAsBd,EAASxC,UAC7DP,SAAUv2C,GAAQu2C,UAAY+C,EAAS/C,SACvCj4E,OAAQ0hC,GAAQ1hC,QAAUm4F,EAC1Br4D,MAAO4B,GAAQ5B,OAASk7C,EAASl7C,MACjComC,aAAcxkC,GAAQwkC,cAAgBmtB,EACtCjb,WAAY12C,GAAQ02C,YAAc4C,EAAS5C,WAC3CE,UAAW52C,GAAQ42C,WAAawD,GAAsBd,EAAS1C,WAC/Dj3E,QAASqgC,GAAQrgC,SAAW25E,EAAS35E,QACrCs3E,UAAWj3C,GAAQi3C,WAAaqC,EAASrC,UACzCqC,YAGFv+B,GAAagB,IAAI,IACZA,EACHy6C,gBAAiB,CACfx2D,OAAQ02D,OAGZJ,EAAM,CAAEt2D,OAAQ02D,GAAsB,GACrC,CAACJ,EAAO3E,EAAgB52C,EAAamS,EAAQltB,IAE3CktB,GAAW6sB,GAKdrgF,EAAAA,EAAAA,MAACiqC,GAAY,CAACJ,YAAU,EAACE,cAAY,EAAAnvC,SAAA,EACnCF,EAAAA,EAAAA,KAACgiG,GAAgB,CAACthG,UAAWo4D,EAAOkpB,wBAAwB9hF,UAC1DF,EAAAA,EAAAA,KAAC4hG,GAAuB,CAAmBxkG,KAAK,mBAAmB4vB,YAAU,OAE/EhtB,EAAAA,EAAAA,KAACgiG,GAAgB,CAACthG,UAAWo4D,EAAO+sB,yBAAyB3lF,UAC3DF,EAAAA,EAAAA,KAACy7F,GAAwB,CACvBr+F,KAAK,qBACLE,MAAO4J,EAAE,eACTkf,YAAalf,EAAE,sBACfiqC,UAAWjqC,EACT,2ZAEF41F,YAAU,OAGd98F,EAAAA,EAAAA,KAACgiG,GAAgB,CAACthG,UAAWo4D,EAAO+oB,oCAAoC3hF,UACtEF,EAAAA,EAAAA,KAACo9F,GAAkC,CACjChgG,KAAK,+BACLmgG,eAAgBA,OAGpBv9F,EAAAA,EAAAA,KAACgiG,GAAgB,CAACthG,UAAWo4D,EAAO8rB,8BAA8B1kF,UAChEF,EAAAA,EAAAA,KAACy/F,GAA2B,CAC1BriG,KAAK,yBACL+zC,UAAWjqC,EAAE,gEAGjBlH,EAAAA,EAAAA,KAACgiG,GAAgB,CAACthG,UAAWo4D,EAAOspB,uBAAuBliF,UACzDF,EAAAA,EAAAA,KAACs6C,GAAc,CACbttB,YAAU,EACV7vB,GAAG,WACHG,MAAO4J,EAAE,YACTkqC,eAAgBlqC,EAAE,YAClBiqC,UAAWjqC,EAAE,4CACb9J,KAAK,kBACLipB,QAAS,CACP,CAAE/oB,MAAO4J,EAAE,SAAUxM,MAAO,SAC5B,CAAE4C,MAAO4J,EAAE,OAAQxM,MAAO,QAE5B6/C,gBAAiBrzC,EAAE,wBAGvBlH,EAAAA,EAAAA,KAACgiG,GAAgB,CAACthG,UAAWo4D,EAAOypB,yBAAyBriF,UAC3DF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,oBACLgpB,YAAalf,EAAE,+BACfkqC,eAAgBlqC,EAAE,yBAClBiqC,UAAWjqC,EACT,yHAEF5J,MAAO4J,EAAE,8BAGblH,EAAAA,EAAAA,KAACgiG,GAAgB,CAACthG,UAAWo4D,EAAOsrB,qBAAqBlkF,UACvDF,EAAAA,EAAAA,KAAC4/F,GAAmB,CAClBxuD,eAAgBlqC,EAAE,UAClBiqC,UAAWjqC,EACT,sJAEF9J,KAAK,qBAGT4C,EAAAA,EAAAA,KAACgiG,GAAgB,CAACthG,UAAWo4D,EAAOipB,oBAAoB7hF,UACtDF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBj/C,GAAG,QACHG,MAAO4J,EAAE,SACTkqC,eAAgBlqC,EAAE,SAClBiqC,UAAWjqC,EACT,2UAEF9J,KAAK,eACLqG,KAAK,SACL2iB,YAAalf,EAAE,uBACf24B,IAAK,OAGT7/B,EAAAA,EAAAA,KAACgiG,GAAgB,CAACthG,UAAWo4D,EAAOupB,oBAAoBniF,UACtDF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBj/C,GAAG,QACHG,MAAO4J,EAAE,SACTkqC,eAAgBlqC,EAAE,SAClBiqC,UAAWjqC,EACT,gOAEF9J,KAAK,eACLgpB,YAAalf,EAAE,+CAGnBlH,EAAAA,EAAAA,KAACgiG,GAAgB,CAACthG,UAAWo4D,EAAOgqB,wBAAwB5iF,UAC1DF,EAAAA,EAAAA,KAACs6C,GAAc,CACbl9C,KAAK,mBACLE,MAAO4J,EAAE,aACTkqC,eAAgBlqC,EAAE,aAClBiqC,UAAWjqC,EACT,8EAEFmf,QAAS,CACP,CAAE/oB,MAAO4J,CAAC,aAAcxM,MAAO,GAC/B,CAAE4C,MAAO4J,CAAC,cAAexM,MAAO,GAChC,CAAE4C,MAAO4J,CAAC,mBAAoBxM,MAAO,GACrC,CAAE4C,MAAO4J,CAAC,YAAaxM,MAAO,GAC9B,CAAE4C,MAAO4J,CAAC,uBAAwBxM,MAAO,GACzC,CAAE4C,MAAO4J,CAAC,kBAAmBxM,MAAO,IAEtC6/C,gBAAiBrzC,EAAE,iCAGvBlH,EAAAA,EAAAA,KAACgiG,GAAgB,CAACthG,UAAWo4D,EAAOopB,8BAA8BhiF,UAChEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBj/C,GAAG,kBACHG,MAAO4J,EAAE,eACTkqC,eAAgBlqC,EAAE,eAClBiqC,UAAWjqC,EACT,sJAEF9J,KAAK,yBACLqG,KAAK,SACL2iB,YAAalf,EAAE,6BAGnBlH,EAAAA,EAAAA,KAACgiG,GAAgB,CAACthG,UAAWo4D,EAAO8pB,sBAAsB1iF,UACxDF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBj/C,GAAG,UACHG,MAAO4J,EAAE,WACTkqC,eAAgBlqC,EAAE,WAClBiqC,UAAWjqC,EACT,4HAEF9J,KAAK,iBACLqG,KAAK,SACL2iB,YAAalf,EAAE,oBAGnBlH,EAAAA,EAAAA,KAACgiG,GAAgB,CAACthG,UAAWo4D,EAAO2oB,wBAAwBvhF,UAC1DF,EAAAA,EAAAA,KAAC86C,GAAc,CACb39C,GAAG,YACHG,MAAO4J,EAAE,gBACTkqC,eAAgBlqC,EAAE,gBAClBiqC,UAAWjqC,EACT,qHAEF9J,KAAK,wBAGT4C,EAAAA,EAAAA,KAACgiG,GAAgB,CAACthG,UAAWo4D,EAAO6pB,mBAAmBziF,UACrDF,EAAAA,EAAAA,KAACk4F,GAAuB,CACtB9mD,eAAgBlqC,EAAE,YAClBiqC,UAAWjqC,EACT,6MAEF9J,KAAK,kBACLm9C,gBAAiBrzC,EAAE,6BACnB5J,MAAO4J,EAAE,YACTmf,QAAS2/D,GAAsBL,GAAUjD,WAAa,QAG1D1iF,EAAAA,EAAAA,KAACgiG,GAAgB,CAACthG,UAAWo4D,EAAO2pB,wBAAwBviF,UAC1DF,EAAAA,EAAAA,KAACk4F,GAAuB,CACtB9mD,eAAgBlqC,EAAE,YAClBiqC,UAAWjqC,EACT,kNAEF9J,KAAK,mBACLm9C,gBAAiBrzC,EAAE,8BACnB5J,MAAO4J,EAAE,aACTmf,QAAS2/D,GAAsBL,GAAUnD,YAAc,QAG3DxiF,EAAAA,EAAAA,KAACgiG,GAAgB,CAACthG,UAAWo4D,EAAO6oB,wBAAwBzhF,UAC1DF,EAAAA,EAAAA,KAACm4C,GAAkB,CACjB/G,eAAgBlqC,EAAE,aAClBiqC,UAAWjqC,EAAE,0DACb5J,MAAO4J,EAAE,aACT9J,KAAK,oBACLqV,OAAO,cAlLN,IAuLX,CCjMO,SAAS8vF,KACd,MAAM,EAAEr7F,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,MAEjBqC,YAAY,OAAE5a,EAAQmI,SAAU4xC,EAAQ,OAAE6c,IACxC18C,MAIE,UACJyqB,EAAS,YACTphB,EAAW,gBACX01B,EAAe,sBACfjD,EAAqB,UACrBJ,EAAS,WACTc,EAAU,WACVU,EAAU,MACVlB,EAAK,gBACLG,EAAe,SACfS,EAAQ,SACRP,EAAQ,OACRj4E,EAAM,MACN8/B,EAAK,UACLw4C,EAAS,QACTj3E,EAAO,UACPs3E,GACEj3C,GAAU,CAAC,GAEP1rB,KAAMuiF,GAAiBxsC,GA7EjC,SAA0B0vB,GACxB,IAAKA,EAAU,MAAO,GACtB,OAAQA,GAAUliF,MAChB,IAAK,eACH,OAAOguD,EAAM,kBAAkBk0B,GAAUxoF,GAAGqhB,0BAC9C,IAAK,wBACH,OAAOizC,EAAM,2BAA2Bk0B,GAAUxoF,GAAGqhB,0BACvD,QACE,MAAO,GAEb,CAmEgDkkF,CAAiB/c,KACvDzlE,KAAMyiF,GAAOtsC,GACnB5E,EAAM,2BACN/jB,OAAOk0C,IAGH2R,EAA8B,iBAAb7Q,EAAwBsD,GAAsBtD,GAAYA,EAC3E+Q,EAAgC,iBAAdjR,EAAyBwD,GAAsBxD,GAAaA,EAC9EgP,EAAkBL,GAAmB32F,OAAOqoF,IAOlD,IAAI+f,EAAkB5f,GAAc,KAKpC,GAJIwf,IACFI,EAxEJ,SACE5f,EACAwf,EACAC,GAEA,MAAMI,EAAe7f,EAAc5yE,KAAKC,MAAMwsE,GAAWmG,IAA0B,CAAC,EAC9E8f,EAAsD,IAAKN,GAEjE,GAAIC,GAAcM,KAAM,CACtB,MAIMC,EAvBV,SAAuBC,EAA4CC,GACjE,MAAMC,EAAU,IAAKF,GAMrB,OALAC,EAAa9pE,SAAShtB,SACQ,IAAjB+2F,EAAQ/2F,KACjB+2F,EAAQ/2F,GAAO,cACjB,IAEK+2F,CACT,CAekCC,CAAcZ,EAJrBC,EAAaM,KACjC5kG,QAAQklG,GAAiB,aAAXA,EAAE5/F,OAChBsD,KAAKs8F,GAAMA,EAAEC,YAGhBz5F,OAAO4f,KAAKu5E,GAAuB5pE,SAASmqE,IAC1CT,EAAcS,GAAeP,EAAsBO,EAAY,GAEnE,CAEA,MAAM/O,EAAwE,IACzEqO,KACAC,GAGL,OAAOnmB,GAAWvsE,KAAKa,UAAUujF,GACnC,CA+CsBgP,CAAcxgB,EAAYwf,EAAQC,GAAgB,QAGjE9c,EAAU,OAAO,KACtB,MAAMvV,EAAeuV,EAASxqB,gBAAgBiV,aAE9C,OACE9qE,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,YAAYhH,SAAEiiF,KACnCniF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,gBAAiBka,SAAUgvD,EAAalwE,UAC3DF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS62B,oBAAqB,CAC3CptC,OAAQ,CAAElnD,GAAIizE,GAAcjzE,MAC3B+C,SAEFkwE,GAAchzE,UAGnB4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,CAAC,YAAaka,SAAUmvD,GAAWpzE,GAAG+C,UACvDF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS82B,iBAAkB,CACxCrtC,OAAQ,CACNlnD,GAAIozE,GAAWpzE,IAAIqhB,WACnBgyD,eA/ByC,CACnD,GAAI,YACJQ,MAAO,kBACPC,YAAa,yBA4B+BV,GAAWzB,MAAQ,OAEtD5uE,SAEFqwE,GAAWnzE,SAGG,iBAAlBuoF,EAASliF,OACRzD,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,CAAC,UAAWka,SAAUukE,EAASxqB,eAAeyV,QAAQ1wE,UACvEF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAASg3B,eAAgB,CACtCvtC,OAAQ,CAAElnD,GAAIwoF,EAASxqB,gBAAgByV,SAASzzE,MAC/C+C,SAEFylF,EAASxqB,eAAeyV,SAASxzE,UAIxC4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,CAAC,wBAAyBka,QAASA,GAAQwgE,GAAuB1hF,UACnFF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS85B,4BAA6B,CACnDrwC,OAAQ,CAAElnD,GAAIykF,EAAwBA,EAAsBpjE,WAAa,MACxEte,SAEFyiG,GAAIvlG,UAGT4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,yBAAyBhH,SAAEoiF,IAC7B,iBAAlBqD,EAASliF,OACRzD,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,YAAYhH,SAAEylF,GAAUM,YAE/CjmF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,eAAgBka,QAASA,GAAQ+tC,GAAajvD,UACjEF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACR+Y,MAAMC,QAAQi2C,IAAgBA,EAAY3rD,OAAS,EAChD2rD,GAAapoD,KAAK6nE,IAChB5uE,EAAAA,EAAAA,KAACyjG,GAAgB,CAACC,aAAc90B,EAAWzxE,IAASyxE,EAAWzxE,MAEjE,UAGR6C,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,CAAC,kBACRia,SAAUja,CAAC,uDACXka,QAASA,GAAQyjE,GAAiB3kF,UAElCF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACR2kF,GAAiB99E,KAAKmuF,IACrBl1F,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAC/X,MAAM,OAAM4D,UACjBF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS0c,qBAAsB,CAC5CjzB,OAAQ,CACNlnD,GAAI+3F,EAAG/3F,MAER+C,SAEFg1F,EAAG93F,QARiB83F,EAAG/3F,WAclC6C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,SAAShH,SAAE4hF,GAAS,KACzC9hF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,SAAShH,SAAE8pC,KAChChqC,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,aAAahH,SAAEsxF,KACpCxxF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,WAAWhH,SAAEqL,GAAW,KAC7CvL,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,gBAAgBhH,SAAEshF,EAAYt6E,CAAC,KAAOA,CAAC,SAC5DlH,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,eAAehH,SAAE+hF,KACtCjiF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,UAAWka,QAASA,GAAQlX,GAAQhK,UACvDF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACRgK,GAAQnD,KAAKzJ,IAAU0C,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAAnU,SAAiB5C,EAAMF,MAAjBE,EAAMH,WAG9C6C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,YAAaka,QAASA,GAAQmyE,GAASrzF,UAC1DF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SAAEqzF,GAASxsF,KAAI,EAAG3J,WAAW4C,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAAnU,SAAa9C,GAAPA,UAEtD4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,aAAcka,QAASA,GAAQqyE,GAAUvzF,UAC5DF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SAAEuzF,GAAU1sF,KAAI,EAAG3J,WAAW4C,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAAnU,SAAa9C,GAAPA,UAEvD4C,EAAAA,EAAAA,KAACo2E,GAAoB,CAAC94E,MAAO4J,EAAE,cAAexM,MAAOkoG,MAG3D,CAEO,SAASa,IAAiB,aAAEC,IACjC,MAAQxjF,KAAMyjF,GAAmB1tC,GAC/BxE,EAAM,gBAAgBiyC,GAAcllF,eAEtC,OAAKmlF,GACE3jG,EAAAA,EAAAA,KAAC2uE,GAAe,CAACC,WAAY+0B,GAAqBD,GAD7B,IAE9B,CAEA,SAAStiF,GAAQ1mB,GACf,OAAIA,UAGAue,MAAMC,QAAQxe,GACQ,IAAjBA,EAAM8I,OAEM,iBAAV9I,IAC4B,IAA9BmP,OAAO4f,KAAK/uB,GAAO8I,QAAgBqG,OAAOC,OAAOpP,GAAO4J,MAAM8c,KAGzE,CC/NA,MAAM+zE,GAAiD,CACrD9b,iBAAkBze,GAASw6B,sBAC3Bjc,IAAKve,GAASu4B,mBACd/Z,eAAgBxe,GAASg3B,eACzBtY,WAAY1e,GAASy6B,uBACrBn6B,kBAAmBN,GAASU,wBAC5BF,aAAcR,GAAS06B,4BAiDlB,SAASsO,KACd,MAAM,EAAE18F,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,MAEb,WAAEqC,EAAU,aAAEU,GAAiBpB,MAI/B,cACJkiC,EAAa,qBACbD,EAAoB,UACpBxV,EAAS,SACTx+B,EAAQ,iBACRk0C,EAAgB,WAChBC,EAAU,iBACVC,EAAgB,kBAChBC,EAAiB,OACjBoa,GACEh8C,GAEItmC,KAAMuiF,GAAiBxsC,GAlEjC,SAA0B0vB,GACxB,IAAKA,EAAU,MAAO,GAGtB,OADaA,GAAUliF,MAAQkiF,GAAUpF,kBAEvC,IAAK,eACL,IAAK,MACH,OAAO9uB,EAAM,kBAAkBk0B,GAAUxoF,GAAGqhB,0BAC9C,IAAK,wBACL,IAAK,eACH,OAAOizC,EAAM,2BAA2Bk0B,GAAUxoF,GAAGqhB,0BACvD,QACE,MAAO,GAEb,CAoDgDkkF,CAAiB3uD,GAAY,OACrE8vD,EAAmB7+F,QAAQkiD,EAAa1iD,MAAMwhD,GAAqB,oBAAZA,EAAK7oD,MAC5D65F,EAAiB/d,GAAqB1G,GACtCuxB,EAAa7c,GAAuB1U,EAAWx+B,GAAU32C,MAAQ,GAAI4qF,GACrE+b,EAAoB9c,GACxB1U,EACAx+B,GAAUn4B,aAAe,GACzBmsE,GAEIic,EAAiD98F,EAAR,QAArBihF,EAA+B,MAAW,OAE9D8b,EAAgBhd,GAAuB1U,EAAW,GADlCkT,GAAoBwC,IAEpCic,EAAiB3xB,IAAcmH,GAAcJ,YAAc0N,GAAcjzC,GACzEowD,EAAkBD,EACpBvnB,GAAWvsE,KAAKa,UAAU,CAAE+C,KAAMo0E,KAClC,GAEJ,IAAIgc,EAAsBx/C,EAAWuwC,GAAa5iB,GAAY,CAC5DluB,OAAQ,CAAElnD,GAAI42C,GAAU52C,MAGtBknG,EAAgB,KAkBpB,OAjBI7B,GAAUC,IACZ4B,EA/DJ,SACE7B,EACAC,GAEA,MAAMK,EAAsD,IAAKN,GAEjE,GAAIC,GAAcM,KAAM,CACtB,MAIMC,EArBV,SAAuBC,EAA4CC,GACjE,MAAMC,EAAU,IAAKF,GAMrB,OALAC,EAAa9pE,SAAShtB,SACQ,IAAjB+2F,EAAQ/2F,KACjB+2F,EAAQ/2F,GAAO,cACjB,IAEK+2F,CACT,CAakCC,CAAcZ,EAJrBC,EAAaM,KACjC5kG,QAAQklG,GAAiB,aAAXA,EAAE5/F,OAChBsD,KAAKs8F,GAAMA,EAAEC,YAGhBz5F,OAAO4f,KAAKu5E,GAAuB5pE,SAASmqE,IAC1CT,EAAcS,GAAeP,EAAsBO,EAAY,GAEnE,CAEA,OAAO5mB,GAAWvsE,KAAKa,UAAU6xF,GACnC,CA6CoBU,CAAchB,EAAQC,GAAgB,OAGpD1uD,GAAY,SAAUA,GAA8B,qBAAlBA,EAAStwC,OAC7C2gG,EAAsBx/C,EAAWgW,GAASw6B,sBAAuB,CAC/D/wC,OAAQ,CACNuxC,UAAW7hD,GAAU52C,GACrBA,GAAI42C,GAAUw8B,UACdC,eAC+C,KAA7Cz8B,GAAUonB,gBAAgBoV,UAAUzB,KAChC,YACA/6B,GAAUonB,gBAAgBoV,UAAUzB,UAM9C9uE,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,UACEoF,EAAAA,EAAAA,MAACoc,GAAW,CAACK,gBAAgB,SAAQ7hB,SAAA,EACnCF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,QAAQhH,SAAE82F,KAC/Bh3F,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,QAAQhH,UAC3BF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CAACC,GAAIs8F,EAAoBlkG,SAAE4jG,OAElC9jG,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,eAAehH,SAAE6jG,KACtC/jG,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,WAAWhH,SAAE+jG,KAClCjkG,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,eAAehH,SAAE8jG,KACtChkG,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,SAAShH,SAAEgoF,IAC/Bgc,GACClkG,EAAAA,EAAAA,KAACo2E,GAAoB,CAAC94E,MAAO4J,EAAE,cAAexM,MAAOypG,IACnD,KACHN,GAAmB7jG,EAAAA,EAAAA,KAACuiG,GAAmB,IAAM,MAC5CsB,GAAoBrB,GACpBxiG,EAAAA,EAAAA,KAACo2E,GAAoB,CAAC94E,MAAO4J,EAAE,cAAexM,MAAO2pG,IACnD,SAIZ,C,gBClIO,SAASC,GAIdxnG,GAIA,MAAMpC,GAAQynE,EAAAA,GAAAA,IAAmC,CAAE/kE,KAAMN,EAAMslE,SACzD,SAAE14B,IAAakH,EAAAA,GAAAA,MACrB,OAAO5wC,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SAAGpD,EAAMoD,SAASxF,EAAOgvC,IAClC,CC9BO,SAAS66D,KACd,MAAM,EAAEr9F,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KA6BnB,OA3BqB9/C,EAAAA,EAAAA,UACnB,IAAM,CACJ,CACElH,GAAI,OACJ2jB,OAAQ5Z,EAAE,QACV4b,KAAO0hF,IACLxkG,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAM+1F,EAAkBpnG,KACxB0K,GAAI88C,EAAWgW,GAASy6B,uBAAwB,CAC9ChxC,OAAQ,CACNlnD,GAAIqnG,EAAkBrnG,QAK9BiC,KAAM,OACN0hC,KAAM,OACNuC,KAAM,QAER,CACEviB,OAAQ5Z,EAAE,eACV4b,KAAO0hF,IAAsBxkG,EAAAA,EAAAA,KAACmV,GAAQ,CAAC1G,KAAM+1F,EAAkB5oF,iBAGnE,CAAC1U,EAAG09C,GAIR,CCjCO,SAAS6/C,KAYd,OATuBpL,GAAyB,CAC9CC,YAAa,uBACbE,mBAAoB,CAClBp8F,KAAM,CAAEi9F,QAAS,wBACjBl9F,GAAI,CAAEk9F,QAAS,yBAEjBd,cAAe,CAAC,OAAQ,KAAM,aAAc,eAC5CE,kBAAmB,CATUyB,KACCC,OAWlC,CCTA,SAASuJ,GAAoB5nG,GAI3B,MAAMszB,EAAiBq0E,KACjBviE,EAAeqiE,KACfz3D,EAAO6zB,GAA8B,CACzCvc,IAAKqN,EAAM,yBACXrhC,iBACA8R,eACAsoB,oBAAoB,IAEtB,OACExqD,EAAAA,EAAAA,KAACq4F,GAAkB,IACbv7F,EACJszB,eAAgBA,EAChB8R,aAAcA,EACd4K,KAAMA,GAGZ,CCpBO,SAAS63D,GAGd7nG,GAMA,MAAM,IAAQqK,EAAAA,EAAAA,MACRyxF,EDYD,WACL,MAAO9rF,EAAG8rB,GAAaD,MACjB,EAAEzxB,IAAMC,EAAAA,EAAAA,MAOd,OAN4BrL,EAAAA,EAAAA,cACzBgK,IACC8yB,GAAU54B,EAAAA,EAAAA,KAAC0kG,GAAmB,CAACrnG,MAAO6J,EAAE,uBAAwBpB,SAAUA,IAAa,GAEzF,CAAC8yB,EAAW1xB,GAGhB,CCtB2B09F,GACnBtgD,GAAQxoD,EAAAA,EAAAA,cAAY4S,UACxB,MAAMm/C,QAAiBwB,GACrBoC,EAAM,0BAGR,OAAOtnB,QAAQqd,QAAQ,CACrB98B,MAAOmjC,EAASvxC,MAChBxS,OAAQ+jD,EAASqE,SACjB,GACD,IAEH,OACElyD,EAAAA,EAAAA,KAAC8/F,GAAmB,CAClB1iG,KAAMN,EAAMM,KACZD,GAAG,iCACHG,MAAO4J,EAAE,2BACTo9C,MAAOA,EACP27C,cAAgBvlG,GACVA,GAA0B,iBAAVA,EACXA,EAEDA,GAA6B0C,MAAQ,GAE/CgpB,YAAalf,EAAE,oCACf84F,mBAAoB94F,EAAE,uCACtB64F,iBAAkB74F,EAAE,0CACpB8lB,WAAYlwB,EAAMkwB,WAClBgd,MAAO,IACP4uD,iBAAkBA,GAGxB,CCzCO,SAASiM,GAA0Bx+E,GAIxC,MAAM,IAAQlf,EAAAA,EAAAA,OACR,KAAE+Y,EAAI,MAAElT,EAAK,UAAEoc,GAAcw6C,GACjCnS,EAAM,uBAEFuJ,EAAerW,KACf0tB,GAAYv2E,EAAAA,EAAAA,cACf25F,GACQz6B,EAAaJ,GAASw6B,sBAAuB,CAClD/wC,OAAQ,CACNmsB,eAAgB,YAChBrzE,GAAIs4F,EAAgBllB,UAAU/xD,WAC9Bo3E,UAAWH,EAAgBt4F,OAIjC,CAAC69D,IAEG8pC,EAAgD5kF,GAAM5c,SAASmhE,KAAK5qC,QAAQgsC,QAC5ExjC,EAAa8sC,GAAc,IAAK9oD,EAAS1f,QAAS0rE,IAClD9vC,EAAoB+sC,KACpB8xB,GAAa/8F,EAAAA,EAAAA,UACjB,KAAM,CACJyc,OAAQ5Z,EAAE,QACVzD,KAAM,OACN/I,MAAQ+6F,IACN,GAAIzoF,GAASoc,EAAW,OACxB,IAAI1uB,EAAQ,GAIZ,OAHAoqG,GAAetgG,MAAK,EAAEugG,EAASznG,KAC7Bm4F,EAAgB57D,SAAWkrE,EAAWrqG,EAAQ4C,EAAS,OAElD5C,CAAK,EAEdomC,KAAM,WACNuC,KAAM,cAER,CAACn8B,EAAG8F,EAAOoc,EAAW07E,IAElB7oB,GAAe53E,EAAAA,EAAAA,UACnB,KAAM,CACJyc,OAAQ5Z,EAAE,UACV4b,KAAO2yE,IACEz1F,EAAAA,EAAAA,KAACosE,GAAU,CAAC1hC,OAAQ+qD,EAAgB/qD,YAG/C,CAACxjC,IAMH,OAJqB7C,EAAAA,EAAAA,UACnB,IAAM,CAACg+B,EAAYE,EAAmB05C,EAAcmlB,IACpD,CAAC/+D,EAAYE,EAAmB05C,EAAcmlB,GAGlD,CChEO,SAAS4D,GAA0B5gD,GAaxC,OAZuBi1C,GAAyB,CAC9CC,YAAal1C,GAAY,oBACzBo1C,mBAAoB,CAClBp8F,KAAM,CACJi9F,QAASj2C,GAAY,qBAEvBjnD,GAAI,CACFk9F,QAASj2C,GAAY,sBAGzBm1C,cAAe,CAAC,OAAQ,KAAM,gBAGlC,CCNA,SAAS0L,GAAsBnoG,GAK7B,MAAM,MAAEO,EAAK,YAAEs4F,EAAW,SAAE7vF,GAAahJ,EACnColC,EAAe2iE,GAA0B,CAAEhvF,cAAc,IACzDuuC,EAAMuxC,EACRlkC,EAAM,gBAAgBkkC,EAAYn3E,gCAClCizC,EAAM,sBACJrhC,EAAiB40E,GAA0B5gD,GAC3CtX,EAAO6zB,GAA4B,CACvCvc,MACAh0B,iBACA8R,eACAsoB,oBAAoB,IAEtB,OACExqD,EAAAA,EAAAA,KAACq4F,GAAkB,CACjBh7F,MAAOA,EACPyI,SAAUA,EACVsqB,eAAgBA,EAChB8R,aAAcA,EACd4K,KAAMA,GAGZ,CC1BO,SAASo4D,GAGdpoG,GACA,MAAM,KAAEM,EAAI,YAAEu4F,EAAW,WAAE3oE,GAAa,GAAUlwB,GAC5C,EAAEoK,IAAMC,EAAAA,EAAAA,MACRyxF,EDsBD,SAAkCjD,GACvC,MAAO7oF,EAAG8rB,GAAaD,MACjB,EAAEzxB,IAAMC,EAAAA,EAAAA,MAad,OAZ4BrL,EAAAA,EAAAA,cACzBgK,IACC8yB,GACE54B,EAAAA,EAAAA,KAACilG,GAAqB,CACpB5nG,MAAO6J,EAAE,2BACTyuF,YAAaA,EACb7vF,SAAUA,IAEb,GAEH,CAAC8yB,EAAW+8D,EAAazuF,GAG7B,CCtC2Bi+F,CAAyBxP,GAE5CrxC,GAAQxoD,EAAAA,EAAAA,cAAY4S,UACxB,MAAMm/C,QAAiBwB,GACrBsmC,QACIlkC,EAAM,oCACNA,EAAM,gBAAgBkkC,EAAYn3E,+CAExC,OAAO2rB,QAAQqd,QAAQ,CACrB98B,MAAOmjC,EAASvxC,MAChBxS,OAAQ+jD,EAASqE,SACjB,GACD,CAACyjC,IAEJ,OACE31F,EAAAA,EAAAA,KAAC8/F,GAAmB,CAClB1iG,KAAMA,EACND,GAAG,0BACHG,MAAO4J,EAAE,oBACTo9C,MAAOA,EACP27C,cAAgBvlG,GACNA,GAA2B0C,MAAQ,GAE7CgpB,YAAalf,EAAE,2BACf84F,mBAAoB94F,EAAE,gCACtB64F,iBAAkB74F,EAAE,mCACpB8lB,WAAYA,EACZgd,MAAO,IACP4uD,iBAAkBA,GAGxB,CC9BO,SAASwM,GAAmB/+E,GACjC,MAAM,IAAQlf,EAAAA,EAAAA,MACRk7B,ECTD,SAA8Bhc,GACnC,MAAM,IAAQlf,EAAAA,EAAAA,OACR,aAAE0O,GAAiBwQ,GAAW,CAAC,EAC/Bu+B,EAAaT,KAgEnB,OA/De9/C,EAAAA,EAAAA,UACb,KAAM,CACJyc,OAAQ5Z,EAAE,QACV4b,KAAO8tD,GACLA,EAAQy0B,oBAAsBz0B,EAAQgqB,qBACpCt1F,EAAAA,EAAAA,MAACsD,GAAAA,EAAK,CAAA1I,SAAA,EACJF,EAAAA,EAAAA,KAACgS,GAAAA,EAAS,CAACnQ,MAAO,CAAEE,YAAa,OAAQ7B,UACvCF,EAAAA,EAAAA,KAAA,OACE6B,MAAO,CACL4T,SAAU,OACVC,WAAY,SACZC,aAAc,WACdC,SAAU,UACV1V,SAED2V,EACC+6D,EAAQxzE,MAER4C,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CAACC,GAAI88C,EAAWgW,GAASg3B,eAAgB,CAAEvtC,OAAQ,CAAElnD,GAAIyzE,EAAQzzE,MAAQ+C,SAC3E0wE,EAAQxzE,YAKjB4C,EAAAA,EAAAA,KAACgS,GAAAA,EAAS,CAAA9R,UACRF,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CACNC,QAASiF,EACP,wFACA,CAAEo+F,SAAU10B,EAAQy0B,oBAEtBjiG,SAAS,QAAOlD,UAEhBF,EAAAA,EAAAA,KAACyU,GAAW,CAAClZ,KAAM,KAAMe,MAAO,UAAU4D,UACxCF,EAAAA,EAAAA,KAACssC,GAAAA,GAAuB,cAMhCtsC,EAAAA,EAAAA,KAAA,OACE6B,MAAO,CACL4T,SAAU,OACVC,WAAY,SACZC,aAAc,WACdC,SAAU,UACV1V,SAED2V,EACC+6D,EAAQxzE,MAER4C,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CAACC,GAAI88C,EAAWgW,GAASg3B,eAAgB,CAAEvtC,OAAQ,CAAElnD,GAAIyzE,EAAQzzE,MAAQ+C,SAC3E0wE,EAAQxzE,SAKnBgC,KAAM,OACN0hC,KAAM,OACNuC,KAAM,OACNyB,aAAa,KAEf,CAAC59B,EAAG2O,EAAc+uC,GAGtB,CD3DqB8rB,CAAqB,CAAE76D,aAAcwQ,GAASxQ,eAC3D0sB,EAAoB+sC,KACpB4tB,EAAqBhtB,GAA0BtV,GAAS62B,oBAAqBprE,GAC7EmsD,EAAgBhD,GAAiBnpD,GACjCosD,EAAiB3C,GAAkBzpD,GACnC41D,EEjBD,SAAgC51D,GAMrC,MAAM,IAAQlf,EAAAA,EAAAA,MACRy9C,EAAaT,KA6CnB,OAjCK9/C,EAAAA,EAAAA,UACH,KAAM,CACJyc,OAAQ5Z,EAAE,UACV4b,KAAOzG,GACLA,EAAK8+C,gBAAgBoqC,aAAelpF,EAAK8+C,gBAAgB4/B,UACvD/6F,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CAACC,QAASokB,GAAS5kB,SAAW,GAAI2B,SAAS,MAAKlD,UACtDF,EAAAA,EAAAA,KAACosE,GAAU,CACT1hC,OAAQruB,EAAKquB,OACb5iC,GAAI88C,EAAWgW,GAAS4qC,UAAW,CACjCnhD,OAAQ,CACN89B,SAAU9lE,EAAK5Y,KACftG,GAAIkf,EAAK8+C,gBAAgBoqC,aAAapoG,IAAMkf,EAAK8+C,gBAAgB4/B,UAAU59F,MAG/E0Y,aAAcwQ,GAASxQ,kBAI3B7V,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CAACC,QAASokB,GAASo/E,YAAc,GAAIriG,SAAS,MAAKlD,UACzDF,EAAAA,EAAAA,KAACosE,GAAU,CAAC1hC,OAAQruB,EAAKquB,WAG/BtrC,KAAMinB,GAASk2C,iBAAc56D,EAAY,YAE3C,CACEuF,EACAmf,GAASk2C,YACTl2C,GAAS5kB,QACT4kB,GAASxQ,aACTwQ,GAASo/E,WACT7gD,GAIN,CFpCuB8gD,CAAuB,IACvCr/E,EACH5kB,QAASyF,CAAC,wCACVu+F,WAAYv+F,CAAC,2CAETy+F,EGjBD,WACL,MAAM,EAAEz+F,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KAkCrB,OAjCetgD,EAAAA,EAAAA,UACb,KAAM,CACJyc,OAAQ5Z,EAAE,aACVxM,MAAQk2E,GAAaA,EAAQg1B,aAAeh1B,EAAQg1B,kBAAejkG,EACnEmhB,KAAOzG,GACAA,EAAKupF,cAER5lG,EAAAA,EAAAA,KAACqS,GAAY,CACX3X,MAAO2hB,EAAKupF,aACZtzF,OACE,mBAAoB+J,EAAOA,EAAK8+C,gBAAgB8U,aAAarU,cAAWj6D,EAE1EgF,QACI,mBAAoB0V,EAElB,IACE2+C,EAAaJ,GAASiB,YAAa,CACjCxX,OAAQ,CACNlnD,GAAIkf,EAAK8+C,gBAAgB8U,aAAa9yE,WAJ5CwE,KATqB3B,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,IAoBjCye,MAAOb,GAAkBc,SACzB0d,KAAM,SACNuC,KAAM,YACNrgB,MAAOP,GAAkBQ,OACzBM,UAAWd,GAAkBQ,UAE/B,CAAC+3C,EAAc9zD,GAGnB,CHpByB2+F,GACjBC,EIlBD,WACL,MAAM,EAAE5+F,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KAqBnB,OApBe9/C,EAAAA,EAAAA,UACb,KAAM,CACJyc,OAAQ5Z,EAAE,uBACVxM,MAAQk2E,GAAYA,EAAQzV,gBAAgBy/B,qBAAqBx9F,KACjE0lB,KAAO8tD,IACL5wE,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAMmiE,EAAQzV,gBAAgBy/B,qBAAqBx9F,KACnD0K,GAAI88C,EAAWgW,GAAS85B,4BAA6B,CACnDrwC,OAAQ,CAAElnD,GAAIyzE,EAAQzV,gBAAgBy/B,qBAAqBz9F,QAIjEgmB,MAAOb,GAAkBc,SACzB0d,KAAM,SACNuC,KAAM,YACNrgB,MAAOP,GAAkBQ,OACzBM,UAAWd,GAAkBQ,UAE/B,CAAC2hC,EAAY19C,GAGjB,CJNmC6+F,GAqCjC,OApCqB1hG,EAAAA,EAAAA,UACnB,IAAM,CACJg+B,EACAE,EACA05C,EACA,CACEn7D,OAAQ5Z,EAAE,QACV4b,KAAO8tD,IAAY5wE,EAAAA,EAAAA,KAAC61F,GAAO,CAACI,QAASrlB,EAAQmlB,WAC7C/yE,MAAOP,GAAkBQ,OACzBM,UAAWd,GAAkBQ,QAE/B,CACEnC,OAAQ5Z,EAAE,YACV4b,KAAO8tD,GACLA,EAAQslB,cAAel2F,EAAAA,EAAAA,KAACiP,GAAQ,CAACR,KAAMmiE,EAAQslB,eAAmBhvF,EAAE,qBACtE8b,MAAOP,GAAkBQ,OACzBM,UAAWd,GAAkBQ,QAE/Bi6E,EACA1qB,EACAC,EACAkzB,EACAG,IAEF,CACEtzB,EACAszB,EACAvjE,EACAojE,EACAlzB,EACApwC,EACA66D,EACAjhB,EACA/0E,GAIN,CK9DO,SAAS8+F,KAiBd,OAbuB3M,GAAyB,CAC9CC,YAAa,WACbE,mBAAoB,CAClBp8F,KAAM,CACJi9F,QAAS,YAEXl9F,GAAI,CACFk9F,QAAS,aAGbd,cAAe,CAAC,OAAQ,KAAM,SAAU,WAAY,aAAc,eAClEE,kBAAmB,CAdUyB,KACCC,OAgBlC,CCdA,SAAS8K,GAAcnpG,GACrB,MAAMszB,EAAiB41E,KACjB9jE,EAAekjE,GAAmB,CAAEvvF,cAAc,IAClDi3B,EAAO6zB,GAAoB,CAC/Bvc,IAAKqN,EAAM,aACXrhC,iBACA8R,eACAsoB,oBAAoB,IAEtB,OACExqD,EAAAA,EAAAA,KAACq4F,GAAkB,IACbv7F,EACJszB,eAAgBA,EAChB8R,aAAcA,EACd4K,KAAMA,GAGZ,CCjBO,SAASo5D,GAGdppG,GACA,MAAM,IAAQqK,EAAAA,EAAAA,MAERyxF,EDaD,WACL,MAAO9rF,EAAG8rB,GAAaD,MACjB,EAAEzxB,IAAMC,EAAAA,EAAAA,MAOd,OAN4BrL,EAAAA,EAAAA,cACzBgK,IACC8yB,GAAU54B,EAAAA,EAAAA,KAACimG,GAAa,CAAC5oG,MAAO6J,EAAE,kBAAmBpB,SAAUA,IAAa,GAE9E,CAAC8yB,EAAW1xB,GAGhB,CCvB2Bi/F,GACnB7hD,GAAQxoD,EAAAA,EAAAA,cAAY4S,UACxB,MAAMm/C,QAAiBwB,GACrBoC,EAAM,aAAaqwC,OAAO,mBAE5B,OAAO33D,QAAQqd,QAAQ,CACrB98B,MAAOmjC,EAASvxC,MAChBxS,OAAQ+jD,EAASqE,SACjB,GACD,IAEH,OACElyD,EAAAA,EAAAA,KAAC8/F,GAAmB,CAClB1iG,KAAMN,EAAMM,KACZD,GAAG,UACHG,MAAO4J,EAAE,WACTo9C,MAAOA,EACP27C,cAAgBvlG,GACVA,GAA0B,iBAAVA,EACXA,EAEDA,GAAmB0C,MAAQ,GAErCgpB,YAAalf,EAAE,kBACf84F,mBAAoB94F,EAAE,uBACtB64F,iBAAkB74F,EAAE,0BACpB8lB,WAAYlwB,EAAMkwB,WAClBgd,MAAO,IACP4uD,iBAAkBA,GAGxB,CC1CO,SAASwN,KACd,MAAMxhD,EAAaT,KAYnB,OAXwBroD,EAAAA,EAAAA,cACrBq9E,GACQv0B,EAAWgW,GAAS4qC,UAAW,CACpCnhD,OAAQ,CACN89B,SAAUkkB,GAASltB,EAAI11E,MACvBtG,GAAIg8E,EAAIh8E,OAId,CAACynD,GAGL,CAEA,MAAMyhD,GAAsC,CAC1CjtB,eAAgB,UAChBC,iBAAkB,YAClBF,IAAK,WACLmtB,eAAgB,UAChBhtB,WAAY,aACZle,aAAc,YCjBV/5D,GAAUqB,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,qBAAVH,CAAU,yCAIb6jG,GAAYA,EAAG7rC,WAC1B,MAAM8rC,EAAoD,CACxDrtB,IAAK,WACLC,eAAgB,UAChBE,WAAY,aACZD,iBAAkB,YAClBitB,eAAgB,UAChBlrC,aAAc,aAEV,EAAEl0D,IAAMC,EAAAA,EAAAA,MACRs/F,EAAkBL,KAClBM,EAAmBvtB,IACvB7zE,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEoF,EAAAA,EAAAA,MAAA,OAAApF,SAAA,CACGgH,CAAC,UAAU,IAAEiyE,EAAIh8E,OAEpBmI,EAAAA,EAAAA,MAAA,OAAApF,SAAA,CACGgH,CAAC,UAAU,IAAEiyE,EAAIzuC,QAAQwF,iBAE3BipC,EAAIwtB,WACHrhG,EAAAA,EAAAA,MAAA,OAAApF,SAAA,CACGgH,CAAC,YAAY,IAAEwK,GAAiBynE,EAAIwtB,gBAMvCC,EAAclsC,GAAM3zD,KAAKoyE,IAC7B,MAAM0tB,EAAeJ,EAAgBttB,GACrC,OACEn5E,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CAACoB,SAAS,MAAMnB,QAASykG,EAAgBvtB,GAAKj5E,UACpDF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACH,aAAYX,EAAE,YAAYiyE,EAAIh8E,MAC9B2K,GACE++F,GAEI,SAASL,EAAsBrtB,EAAI11E,SAAS01E,EAAIh8E,YACrD+C,UAEDF,EAAAA,EAAAA,KAACosE,GAAU,CAAC1hC,OAAQyuC,EAAIzuC,OAAQ8hC,WAAW,OATa2M,EAAIh8E,GAWtD,IAId,OAAO6C,EAAAA,EAAAA,KAACqB,GAAO,CAAAnB,SAAE0mG,GAAsB,ECP5BE,GAAoBnhB,GACb,iBAAlBA,EAASliF,QACPkiF,GAAUxqB,eAAeyV,UACvB+U,GAAUxqB,eAAeoV,YAAcoV,GAAU3D,yBAEhD,SAAS+kB,GAAmB1gF,GACjC,MAAM,IAAQlf,EAAAA,EAAAA,MACRy9C,EAAaT,KAObquB,EAAgBhD,GAAiBnpD,GACjCkc,EAAoB+sC,KACpB03B,EAtCR,WACE,MAAM,EAAE9/F,IAAMC,EAAAA,EAAAA,MAkBd,OAfK9C,EAAAA,EAAAA,UACH,KAAM,CACJyc,OAAQ5Z,EAAE,YACV4b,KAAOzG,IAASrc,EAAAA,EAAAA,KAACumG,GAAS,CAAC7rC,KAAMr+C,EAAK8+C,gBAAgB8rC,cACtDvsG,MAAQ2hB,GACNA,EAAK8+C,gBAAgB8rC,aAAazjG,OAC9B6Y,EAAK8+C,gBAAgB8rC,YAAYzjG,YACjC7B,EACNwhB,MAAOb,GAAkBc,SACzB0d,KAAM,SACNuC,KAAM,SACNrgB,MAAOP,GAAkBQ,UAE3B,CAAC/b,GAGL,CAkByBggG,GACjBz0B,EAAiB3C,GAAkBzpD,GACnC62E,EAAqBhtB,GAA0BtV,GAAS62B,oBAAqBprE,GAC7E8gF,EAAkB92B,GAAuBzV,GAAS82B,iBAAkBrrE,GACpE+gF,EAAgB12B,GAAqB9V,GAASg3B,eAAgBvrE,GAC9DghF,EpG+FD,WACL,MAAM,EAAEngG,IAAMC,EAAAA,EAAAA,MAqBd,OAlBK9C,EAAAA,EAAAA,UACH,KAAM,CACJyc,OAAQ5Z,EAAE,eACV4b,KAAOzG,IACLrc,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACRmc,EAAK8+C,gBAAgBhM,aAAapoD,KAAK6nE,IACtC5uE,EAAAA,EAAAA,KAAC2uE,GAAe,CAACC,WAAYA,GAAiBA,EAAWzxE,QAI/DzC,MAAQ2hB,KAAUA,EAAK8+C,gBAAgBhM,aAAa3rD,aAAgB7B,EACpEwhB,MAAOb,GAAkBc,SACzB0d,KAAM,SACNuC,KAAM,SACNrgB,MAAOP,GAAkBQ,UAE3B,CAAC/b,GAGL,CoGtH4BogG,GACpBC,EpGkED,WACL,MAAM,EAAErgG,IAAMC,EAAAA,EAAAA,MAwBd,OArBK9C,EAAAA,EAAAA,UACH,KAAM,CACJyc,OAAQ5Z,EAAE,UACV4b,KAAOzG,GACAA,EAAK8+C,gBAAgBjxD,QAAQgoD,SAEhClyD,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACRmc,EAAK8+C,eAAejxD,QAAQgoD,QAAQnrD,KAAKlD,IACxC7D,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAAnU,SAAkB2D,EAAOzG,MAAnByG,EAAO1G,SAJyB6C,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,IASpDye,MAAOb,GAAkBc,SACzB1oB,MAAQ2hB,KAAUA,EAAK8+C,gBAAgBjxD,QAAQgoD,QAAQ1uD,aAAgB7B,EACvEm/B,KAAM,SACNuC,KAAM,SACNrgB,MAAOP,GAAkBQ,UAE3B,CAAC/b,GAGL,CoG5FuBsgG,GACfC,EpGqSD,SAWLC,EACArhF,GAKA,MAAM,EAAEnf,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KAkCnB,OAjCgC9/C,EAAAA,EAAAA,UAC9B,KAAM,CACJyc,OAAQ5Z,EAAE,yBACV4b,KAAOzG,GACa,iBAAdA,EAAK5Y,MACAzD,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,KAGL1E,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAM4N,EAAK8+C,gBAAgBymB,uBAAuBxkF,KAClD0K,GAAI88C,EAAW8iD,EAAiB,CAC9BrjD,OAAQ,CAAElnD,GAAIkf,EAAK8+C,gBAAgBymB,uBAAuBzkF,MAE5D0Y,aAAcwQ,GAASxQ,eAK/Bnb,MAAQ2hB,GACY,iBAAdA,EAAK5Y,KACA4Y,EAAK8+C,gBAAgBymB,uBAAuBxkF,UAEnD,EAGJgC,KAAMinB,GAASk2C,iBAAc56D,EAAY,wBACzCwhB,MAAOb,GAAkBc,SACzB0d,KAAM,SACNuC,KAAM,SACNrgB,MAAOP,GAAkBQ,UAE3B,CAAC/b,EAAGmf,GAASk2C,YAAal2C,GAASxQ,aAAc+uC,EAAY8iD,GAGjE,CoG1V6BC,CAAsB/sC,GAASgtC,sBAAuBvhF,GAE3EwhF,EpGyCD,SAA0BxhF,GAM/B,MAAM,IAAQlf,EAAAA,EAAAA,MAad,OAZ8D9C,EAAAA,EAAAA,UAC5D,KAAM,CACJyc,OAAQ5Z,EAAE,YACV4b,KAAOzG,GACAA,EAAKupF,cACH5lG,EAAAA,EAAAA,KAACqS,GAAY,CAAC3X,MAAO2hB,EAAKupF,gBADF5lG,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,IAGjCtF,KAAMinB,GAASk2C,iBAAc56D,EAAY0kB,GAAS+pC,SAAW,eAC7DrrB,qBAAsB,UAExB,CAAC1e,GAASk2C,YAAal2C,GAAS+pC,QAASlpD,GAG7C,CoG7DwB4gG,CAAiBzhF,GACjC0hF,EAAiBj3B,GAAiD,IACnEzqD,EACH0qD,aApB6E4U,GACvD,0BAAlBA,EAASliF,KACJyD,EAAE,yBAEJA,EAAE,kBA6EX,OA1DqB7C,EAAAA,EAAAA,UACnB,IAAM,CACJ,CACEyc,OAAQ5Z,EAAE,QACV4b,KAAO6iE,IACLrgF,EAAAA,EAAAA,MAACsD,GAAAA,EAAK,CAACC,WAAS,EAAA3I,SAAA,EACdF,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAMk3E,EAASvoF,KACf0K,GAAI88C,EACgB,iBAAlB+gC,EAASliF,KACLm3D,GAASu4B,mBACTv4B,GAAS06B,2BACb,CAAEjxC,OAAQ,CAAElnD,GAAIwoF,EAASxoF,QAG5B2pG,GAAiBnhB,KAChB3lF,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CAACC,QAASiF,CAAC,4CAA6C9D,SAAS,QAAOlD,UAC9EF,EAAAA,EAAAA,KAACoF,EAAAA,EAAI,CAACslC,OAAO,SAAS7oC,MAAO,CAAEga,WAAY,OAAQ3b,UACjDF,EAAAA,EAAAA,KAACssC,GAAAA,GAAuB,WAMlCxL,KAAM,OACNuC,KAAM,OACNjkC,KAAM,QAER4nG,EACAzkE,EACAwlE,EACAv1B,EACAC,EACAyqB,EACAiK,EACAM,EACAL,EACAC,EACAE,EACAM,IAEF,CACEjjD,EACA19C,EACA8/F,EACAzkE,EACAwlE,EACAv1B,EACAC,EACAyqB,EACAiK,EACAM,EACAL,EACAC,EACAE,EACAM,GAIN,CC/HA,SAASG,GAAkBlrG,GACzB,MAAMmrG,EAAoBjN,KACpBkN,EAA2BjN,KAC3BkN,EAAyBjN,KACzBkN,EAA0BjN,KAC1B/qE,GAAiB/rB,EAAAA,EAAAA,UACrB,IAAM,CACJ4jG,EACAC,EACAC,EACAC,IAEF,CAACH,EAAmBC,EAA0BC,EAAwBC,IAElElmE,EAAe6kE,GAAmB,CAAElxF,cAAc,IAClDi3B,EAAO6zB,GAAwB,CACnCvc,IAAKqN,EAAM,kBACXrhC,iBACA8R,eACAsoB,oBAAoB,IAEtB,OACExqD,EAAAA,EAAAA,KAACq4F,GAAkB,IACbv7F,EACJszB,eAAgBA,EAChB8R,aAAcA,EACd4K,KAAMA,GAGZ,CClCO,SAASu7D,GAGdvrG,GAMA,MAAM,IAAQqK,EAAAA,EAAAA,OACR,aAAEmhG,EAAe,iBAAoBxrG,EACrC87F,EDyBD,WACL,MAAO9rF,EAAG8rB,GAAaD,MACjB,EAAEzxB,IAAMC,EAAAA,EAAAA,MAOd,OAN2BrL,EAAAA,EAAAA,cACxBgK,IACC8yB,GAAU54B,EAAAA,EAAAA,KAACgoG,GAAiB,CAAC3qG,MAAO6J,EAAE,uBAAwBpB,SAAUA,IAAa,GAEvF,CAAC8yB,EAAW1xB,GAGhB,CCnC2BqhG,GACnBjkD,GAAQxoD,EAAAA,EAAAA,cAAY4S,UACxB,MAAMm/C,QAAiBwB,GACrBoC,EAAM,IAAI62C,KAAgBxG,OAAO,mBAGnC,OAAO33D,QAAQqd,QAAQ,CACrB98B,MAAOmjC,EAASvxC,MAChBxS,OAAQ+jD,EAASqE,SACjB,GACD,CAACo2C,IAEJ,OACEtoG,EAAAA,EAAAA,KAAC8/F,GAAmB,CAClB1iG,KAAMN,EAAMM,KACZD,GAAG,sBACHG,MACyB,2BAAvBR,EAAMwrG,aACFphG,EAAE,yBACFA,EAAE,gBAERo9C,MAAOA,EACP27C,cAAgBvlG,GACVA,GAA0B,iBAAVA,EACXA,EAEDA,GAAuB0C,MAAQ,GAEzCgpB,YACyB,2BAAvBtpB,EAAMwrG,aACFphG,EAAE,kCACFA,EAAE,uBAER84F,mBACyB,2BAAvBljG,EAAMwrG,aACFphG,EAAE,qCACFA,EAAE,4BAER64F,iBACyB,2BAAvBjjG,EAAMwrG,aACFphG,EAAE,wCACFA,EAAE,+BAER8lB,WAAYlwB,EAAMkwB,WAClBgd,MAAO,IACP4uD,iBAAkBA,GAGxB,CCrCO,SAAS4P,GAAa1rG,GAC3B,MAAM,MAAEolG,EAAK,UAAExpD,EAAS,SAAE3yB,EAAQ,UAAE4qB,EAAS,cAAE83D,EAAa,SAAEC,EAAQ,QAAEh4D,IACtEE,EAAAA,GAAAA,OAEI,cAAEhC,GAAkB+B,GAEpB,cACJ8V,EAAa,YACbE,EAAW,SACXD,EACAP,MAAOwiD,GACL7iD,KAiBJ4iD,EAAS,aACTA,EAAS,YACTA,EAAS,UAGT,MAAMv/B,GAAWhH,EAAAA,GAAAA,IAA2B,CAC1C/kE,KAAM,YACNszC,UACA9iB,aAAcghB,GAAe2jC,YAEzBq2B,GAAezmC,EAAAA,GAAAA,IAA2B,CAC9C/kE,KAAM,aAyGR,OAtGArB,EAAAA,EAAAA,YAAU,KACR,MAAM,QAAE8sG,EAAO,UAAEC,GAAcL,EAAc,aACvCM,EAAoBrwD,IACpBswD,EAAiB7/B,IAAauQ,GAAcxe,kBAElDn1C,EAAS,YAAaojD,EAAU,CAAE8/B,aAAa,IAE3CH,IAAcD,GAAWG,IAC3B9G,OAAMvgG,EAAW,CACfunG,mBAAmB,IAErBziD,EAAc,IAAKsiD,EAAmBxnB,cAAe,OACrD56B,EAAY,CAAEwiD,aAAcJ,IAC9B,GACC,CAAC5/B,EAAUs/B,EAAe1iF,EAAUm8E,EAAOyG,EAAUliD,EAAeE,EAAajO,KAEpF38C,EAAAA,EAAAA,YAAU,KACRgqB,EAAS,WAAY,KAAK,GACzB,CAACojD,EAAUpjD,KAEdhqB,EAAAA,EAAAA,YAAU,KAmEJotE,IAAauQ,GAAcP,KAAOhQ,IAAauQ,GAActe,cAlEnC1sD,WAC5B,IAQI45F,EARAc,EAAoB,CAAC,EACrBzjB,EAAWjtC,EAAU,YAMzB,IAJKitC,GAAYijB,IACfjjB,EAAWijB,IAGRjjB,EAAU,OAEX,SAAUA,EACZ2iB,EAAe3iB,EAASliF,KACf,qBAAsBkiF,IAC/B2iB,EAAe3iB,EAASpF,kBAG1B,IAAI8oB,EAAsB,CAAC,EACvBf,IAAiB5uB,GAAcP,KAAwB,iBAAjBmvB,EACxCe,QAA4Bh6C,GAC1BoC,EAAM,kBAAkBk0B,EAASxoF,GAAGqhB,sBAGtC8pF,IAAiB5uB,GAActe,cACd,0BAAjBktC,IAEAe,QAA4Bh6C,GAC1BoC,EAAM,2BAA2Bk0B,EAASxoF,GAAGqhB,uBAGjD,MAAM,SAAEkkE,EAAQ,UAAEF,EAAS,UAAEjS,KAAc2U,GAAamkB,GAAqBnkB,UAAY,CAAC,EAE1FkkB,EAAoB,IACflkB,EACHtD,sBAAuBsD,EAAStD,uBAAuBzkF,GACvDozE,UAAWA,GAAWpzE,GAAKozE,EAAY,KACvCmS,SAAUsD,GAAsBtD,GAAY,IAC5CF,UAAWwD,GAAsBxD,GAAa,KAGhD,MAAM8mB,GAAwBjiB,GAAoBgiB,GAC5CE,EAAuBF,EAAoBG,eACjD,GAAIF,GAAwBC,GAM1B,GALA9iD,GAAekB,IAAI,IACdA,EACH45B,cAAe8nB,MAGb3iD,EAAS07C,iBAAmBwG,EAAc,CAC5C,MAAQC,QAASY,GAAoBhB,EAAc,aAC9CgB,GAAmBb,EAAazrG,KAAOyxC,GAAemF,UAAU52C,IAMnE4oB,EAAS,SAAUqjF,GACf,SAAUR,GAAgBA,EAAanlG,OAAS6kG,GAClDviF,EAAS,WAAY4/D,IAPvB5/D,EAAS,SAAU,IAAK2gC,EAAS07C,iBAAiBx2D,QAUtD,OAEA6a,GAAekB,IAAI,IAAWA,EAAM45B,cAAe,QACrD,EAIKmoB,EACP,GACC,CACDf,EACA/5D,EACA65D,EACA/vD,EACAkwD,EACAz/B,EACApjD,EACA0gC,EACAC,KAIAphD,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAC2pG,GAAa,KACd3pG,EAAAA,EAAAA,KAAC4pG,GAAiB,IACjB9sG,EAAM+sG,gBAAiB7pG,EAAAA,EAAAA,KAAC8pG,GAAc,KACvC9pG,EAAAA,EAAAA,KAAC+pG,GAAgB,KACjB/pG,EAAAA,EAAAA,KAACgqG,GAAU,MAGjB,CAEA,SAASF,KACP,MAAM,EAAE5iG,IAAMC,EAAAA,EAAAA,MACd,OACEnH,EAAAA,EAAAA,KAACs6C,GAAc,CACbh9C,MAAO4J,EAAE,UACT,UAAQ,mBACR9J,KAAK,mBACL4vB,YAAU,EACV3G,QAAS,CACP,CACE/oB,MAAO4J,EAAE,cACTxM,MAAO,OACPkhB,YAAa1U,EAAE,uDAEjB,CACE5J,MAAO4J,EAAE,kBACTxM,MAAO,UACPkhB,YAAa1U,EAAE,gEAEjB,CACE5J,MAAO4J,EAAE,eACTxM,MAAO,SACPkhB,YAAa1U,EAAE,+DAKzB,CACA,SAASyiG,KACP,MAAM,EAAEziG,IAAMC,EAAAA,EAAAA,MACd,OACEnH,EAAAA,EAAAA,KAACs6C,GAAc,CACbttB,YAAU,EACV1vB,MAAO4J,EAAE,aACT9J,KAAK,YACL,UAAQ,YACRipB,QAAS,CACP,CAAE/oB,MAAO4J,EAAE,gBAAiBxM,MAAOg/E,GAAcP,KACjD,CAAE77E,MAAO4J,EAAE,yBAA0BxM,MAAOg/E,GAActe,cAC1D,CAAE99D,MAAO4J,EAAE,YAAaxM,MAAOg/E,GAAcxe,mBAC7C,CAAE59D,MAAO4J,EAAE,gBAAiBxM,MAAOg/E,GAAcN,gBACjD,CAAE97E,MAAO4J,EAAE,yBAA0BxM,MAAOg/E,GAAcL,kBAC1D,CAAE/7E,MAAO4J,EAAE,kBAAmBxM,MAAOg/E,GAAcJ,cAI3D,CAEA,SAASswB,KACP,MAAM,EAAE1iG,IAAMC,EAAAA,EAAAA,MACd,OACEnH,EAAAA,EAAAA,KAACskG,GAAa,CAACliC,MAAM,YAAWliE,SAC5BipE,IACA,OAAQA,GACN,KAAKuQ,GAAcP,IACjB,OACEn5E,EAAAA,EAAAA,KAACqoG,GAAyB,CACxBC,aAAa,gBACblrG,KAAK,WACL4vB,YAAU,IAGhB,KAAK0sD,GAActe,aACjB,OACEp7D,EAAAA,EAAAA,KAACqoG,GAAyB,CACxBC,aAAa,yBACblrG,KAAK,WACL4vB,YAAU,IAGhB,KAAK0sD,GAAcxe,kBACjB,OACE51D,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB9+C,MAAO4J,EAAE,QACT9J,KAAK,gBACLD,GAAG,gBACH6vB,YAAU,KAEZhtB,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB9+C,MAAO4J,EAAE,eACT9J,KAAK,uBACLD,GAAG,0BAEL6C,EAAAA,EAAAA,KAACiqG,GAAa,OAGpB,KAAKvwB,GAAcN,eACjB,OAAOp5E,EAAAA,EAAAA,KAACkmG,GAAqB,CAAmB9oG,KAAK,WAAW4vB,YAAU,IAC5E,KAAK0sD,GAAcL,iBACjB,OAAOr5E,EAAAA,EAAAA,KAACklG,GAA6B,CAAmB9nG,KAAK,WAAW4vB,YAAU,IACpF,KAAK0sD,GAAcJ,WACjB,OACEh0E,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAC2kG,GAA4B,CAAmBvnG,KAAK,WAAW4vB,YAAU,KAC1EhtB,EAAAA,EAAAA,KAACkqG,GAAe,OAGtB,QACE,OACJ,GAIR,CAEA,SAASA,KACP,MAAM,EAAEhjG,IAAMC,EAAAA,EAAAA,OACR,KAAE+Y,GAAS+1C,GAA4CxE,EAAM,0BASnE,OACEzxD,EAAAA,EAAAA,KAACskG,GAAa,CAACliC,MAAM,WAAUliE,SAC3BskG,GATkBA,KACtB,MAAMtU,EACJsU,GAAmBriB,UACnBjiE,GAAMgyC,QAAQ1tD,MAAMX,GAAW2gG,GAAmBrnG,KAAO0G,GAAQ1G,MAAKglF,SACxE,MAAO,CAAC,eAAgB,0BAA0B55E,SAAS2nF,GAAW,GAAG,EAMhEgU,CAAeM,IAGlBxkG,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,oBACLE,MAAO4J,EAAE,+BACTkf,YAAalf,EAAE,wBACfzD,KAAK,SACLupB,YAAU,EACV6S,IAAK,IATsC,MAevD,CAEA,SAASoqE,KACP,MAAM,EAAE/iG,IAAMC,EAAAA,EAAAA,OACR,QAAEupC,IAAYE,EAAAA,GAAAA,MAEpB,OACE5wC,EAAAA,EAAAA,KAAC8wC,GAAAA,GAAU,CACT1zC,KAAK,mBACLszC,QAASA,EACTK,kBAAgB,EAChB5jC,OAAQA,EAAG6jC,YACT,MAAM,SAAE1uC,EAAQ,MAAE5H,GAAUs2C,EAM5B,SAAS8K,GAAgB,MAAEyjB,EAAK,KAAE4qC,IAChC,MAAMC,EAJW,IAKN,YAATD,EAAqB5qC,EAAQ5xD,KAAKC,MAAMpT,OAAOE,GAAS,MAC/C,YAATyvG,EAAqB5qC,EAAQ5xD,KAAKC,MAAMpT,OAAOE,GAAS,KAE1D4H,EAAS8nG,EACX,CAEA,OACEpqG,EAAAA,EAAAA,KAACy3C,GAAa,CAACG,QAAQ,mBAAmBt6C,MAAO4J,EAAE,WAAWhH,UAC5DF,EAAAA,EAAAA,KAACgvB,GAAAA,EAAU,CAAA9uB,UACToF,EAAAA,EAAAA,MAACyqC,GAAAA,EAAI,CAAClnC,WAAS,EAACjO,GAAI,EAAEsF,SAAA,EACpBF,EAAAA,EAAAA,KAAComE,GAAAA,EAAQ,CAAAlmE,UACPoF,EAAAA,EAAAA,MAAC2pB,GAAAA,EAAc,CAAC0sB,QAAM,EAAAz7C,SAAA,EACpBF,EAAAA,EAAAA,KAAC08C,GAAAA,GAAS,CACRt2B,YAAalf,EAAE,sBACf5E,SAAUA,CAACkjB,EAAQ9qB,IACjBohD,EAAgB,CAAEyjB,MAAO/kE,OAAOE,GAAQyvG,KAAM,YAEhDzvG,MAAOiT,KAAKC,MAAMpT,OAAOE,GAAS,IAClC,mBAAiB,sCACjB+I,KAAK,SACL,UAAQ,2BACRo8B,IAAK,KAEP7/B,EAAAA,EAAAA,KAACqqG,GAAAA,EAAc,CAAAnqG,SAAEgH,EAAE,mBAGvBlH,EAAAA,EAAAA,KAAComE,GAAAA,EAAQ,CAAAlmE,UACPoF,EAAAA,EAAAA,MAAC2pB,GAAAA,EAAc,CAAC0sB,QAAM,EAAAz7C,SAAA,EACpBF,EAAAA,EAAAA,KAAC08C,GAAAA,GAAS,CACRt2B,YAAalf,EAAE,sBACf5E,SAAUA,CAACkjB,EAAQ9qB,IACjBohD,EAAgB,CAAEyjB,MAAO/kE,OAAOE,GAAQyvG,KAAM,YAEhDzvG,MAAOiT,KAAKC,MAAMpT,OAAOE,GAAS,IAClC,mBAAiB,sCACjB+I,KAAK,SACL,UAAQ,2BACRo8B,IAAK,KAEP7/B,EAAAA,EAAAA,KAACqqG,GAAAA,EAAc,CAAAnqG,SAAEgH,EAAE,wBAKb,GAK1B,CAEA,SAAS6iG,KACP,MAAM,EAAE7iG,IAAMC,EAAAA,EAAAA,MACR2xD,EAASvC,KACf,OACEv2D,EAAAA,EAAAA,KAACs6C,GAAc,CACbttB,YAAU,EACV1vB,MAAO4J,EAAE,eACT9J,KAAK,mBACL,UAAQ,mBACRg0C,eAAgBlqC,EAAE,eAClBiqC,WACE7rC,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,CACGgH,EAAE,uEAAwE,KAC3ElH,EAAAA,EAAAA,KAAA,KAAG+H,KAAM8wD,GAAcC,EAAQ,oBAAoB54D,SAAEgH,EAAE,uBAG3Dmf,QAAS,CACP,CACE/oB,MAAO4J,EAAE,OACTxM,MAAO,MACPkhB,YAAa1U,EACX,mGAGJ,CACE5J,MAAO4J,EAAE,OACTxM,MAAO,MACPkhB,YAAa1U,EACX,8FAMZ,CAEA,SAAS8iG,KACP,MAAM,EAAE9iG,IAAMC,EAAAA,EAAAA,OAEZwpC,WAAW,cAAE/B,KACXgC,EAAAA,GAAAA,MACE05D,EAAgD,KAA9B17D,GAAes5C,WAEvC,OACEloF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB9+C,MAAO4J,EAAE,cACT9J,KAAK,aACL,UAAQ,aACRg0C,eAAgBlqC,EAAE,cAClBiqC,UAAWjqC,EACT,6GAEF8lB,WAAYs9E,GAGlB,CC/ZO,SAASC,IAAW,WACzBxsB,EAAU,QACVmS,EAAO,aACP7gD,IAMA,MAAM,EAAEnoC,IAAMC,EAAAA,EAAAA,OACR,WAAEq/C,EAAU,SAAEE,GAAaZ,MAC3B,MAAEo8C,IAAUtxD,EAAAA,GAAAA,OACZ,SAAEmD,GAAayS,EACfrpD,EAAK42C,EAAWA,GAAU52C,IAAIqhB,WAAau/D,GAA0B,GAE3EmS,EAAUA,GAnCZ,SAAoBn8C,GAClB,GAAKA,EAAL,CAEA,GAAI,SAAUA,EAAU,CACtB,GAAuB,iBAAnBA,GAAUtwC,KACZ,MAAO,gBACF,GAAuB,0BAAnBswC,GAAUtwC,KACnB,MAAO,wBAEX,CAEA,GAAI,qBAAsBswC,EAAU,CAClC,GAAmC,QAA/BA,GAAUwsC,iBACZ,MAAO,gBACF,GAAmC,iBAA/BxsC,GAAUwsC,iBACnB,MAAO,wBAEX,CAhBqB,CAiBvB,CAiBuBiqB,CAAWz2D,GAEhC,MAAQ7zB,KAAMuqF,GAAgBx0C,GAC5BxE,EAAM,IAAIy+B,GAAW,mBAAmB/yF,mBAG1CpB,EAAAA,EAAAA,YAAU,KACR,MAAMymG,EAAwD,CAAC,EACzDkI,EAAahkD,EAAS87C,OAM5BiI,GAAa1H,MAAM3pE,SAAS+gB,IAC1B,MAAMwwD,EAAiBD,GAAYlI,SAASroD,GAAKmpD,UAEjD,GAAIqH,EACFnI,EAAOroD,EAAImpD,UAAYqH,OAGzB,GAAoB,KAAhBxwD,EAAI9vC,QAGR,GAAiB,gBAAb8vC,EAAI12C,KAKR++F,EAAOroD,EAAImpD,UAAYnpD,EAAI9vC,YAL3B,CACE,MAAMugG,EAAczwD,EAAI9vC,QACxBm4F,EAAOroD,EAAImpD,UAAYsH,EAAYpjG,MAAM,KAE3C,CACkC,IAGpC06F,EAAM,CAAEM,UAAS,GAChB,CAACiI,EAAavI,EAAOx7C,IAExB,MAAMmkD,EAAcztG,IAClB,MAAMyoE,EAAsC,GAa5C,OAZA4kC,GAAa1H,KAAK3pE,SAAS8d,IAEL,mBAAjBA,EAAQzzC,MAA8C,gBAAjByzC,EAAQzzC,OAC9CwV,MAAMC,QAAQg+B,EAAQ2uB,UAElB3uB,EAAQ4zD,gBAAkB1tG,GAC5B85C,EAAQ2uB,SAASzsC,SAAS0sC,IACxBD,EAAQ9hE,KAAK,CAAErJ,MAAOorE,EAAQxoE,MAAO4J,EAAE4+D,IAAU,GAGvD,IAEKD,CAAO,EAGhB,OACE7lE,EAAAA,EAAAA,KAAC+lE,GAAe,CAAC12B,aAAcA,EAAanvC,SACzCuqG,GAAa1H,KAAKh8F,KAAI,CAACmwC,EAASlwC,IACd,SAAjBkwC,EAAQzzC,MACNzD,EAAAA,EAAAA,KAACo8C,GAAiB,CAEhBh/C,KAAM,UAAU85C,EAAQosD,WACxBhmG,MAAO4J,EAAEgwC,EAAQ4zD,eACjB35D,UAAW+F,EAAQ6zD,qBACnB35D,eAAe,GACfpkB,WAAYkqB,EAAQrG,SACpBptC,KAAK,OACLy3C,UAAWhE,EAAQvjC,IACnBsnC,UAAW/D,EAAQrX,KARd74B,GAUY,YAAjBkwC,EAAQzzC,MAYS,UAAjByzC,EAAQzzC,MAXVzD,EAAAA,EAAAA,KAACo8C,GAAiB,CAEhBh/C,KAAM,UAAU85C,EAAQosD,WACxBhmG,MAAO4J,EAAEgwC,EAAQ4zD,eACjB35D,UAAW+F,EAAQ6zD,qBACnB35D,eAAe,GACfpkB,WAAYkqB,EAAQrG,SACpBptC,KAAK,SACLkQ,IAAKujC,EAAQvjC,IACbksB,IAAKqX,EAAQrX,KARR74B,GAsBY,aAAjBkwC,EAAQzzC,MACVzD,EAAAA,EAAAA,KAACo8C,GAAiB,CAEhBh/C,KAAM,UAAU85C,EAAQosD,WACxBhmG,MAAO4J,EAAEgwC,EAAQ4zD,eACjB35D,UAAW+F,EAAQ6zD,qBACnB35D,eAAe,GACfpkB,WAAYkqB,EAAQrG,SACpBptC,KAAK,WACLy3C,UAAWhE,EAAQvjC,IACnBsnC,UAAW/D,EAAQrX,KARd74B,GAUY,aAAjBkwC,EAAQzzC,MACVzD,EAAAA,EAAAA,KAACg7C,GAAgB,CAEf59C,KAAM,UAAU85C,EAAQosD,WACxBhmG,MAAO4J,EAAEgwC,EAAQ4zD,eACjB35D,UAAW+F,EAAQ6zD,qBACnB35D,eAAe,GACfpkB,WAAYkqB,EAAQrG,SACpBqK,UAAWhE,EAAQvjC,IACnBsnC,UAAW/D,EAAQrX,KAPd74B,GASY,mBAAjBkwC,EAAQzzC,MACVzD,EAAAA,EAAAA,KAACs6C,GAAc,CAEbl9C,KAAM,UAAU85C,EAAQosD,WACxB/oD,gBAAiBrzC,EAAE,iBACnB5J,MAAO4J,EAAEgwC,EAAQ4zD,eACjB35D,UAAW+F,EAAQ6zD,qBACnB35D,eAAe,GACf/qB,QAASwkF,EAAW3zD,EAAQ4zD,eAC5B99E,WAAYkqB,EAAQrG,UAPf7pC,GASY,gBAAjBkwC,EAAQzzC,MACVzD,EAAAA,EAAAA,KAACgiE,GAAmB,CAElB5kE,KAAM,UAAU85C,EAAQosD,WACxBl9E,YAAalf,EAAE,oBACf5J,MAAO4J,EAAEgwC,EAAQ4zD,eACjB35D,UAAW+F,EAAQ6zD,qBACnB35D,eAAe,GACf/qB,QAASwkF,EAAW3zD,EAAQ4zD,eAC5B99E,WAAYkqB,EAAQrG,UAPf7pC,QASLrF,KAIZ,CC1LO,SAAS+P,GAAiBC,EAAiBq5F,GAChD,OAAc,OAAPA,EACHr4F,GAAAA,GAASE,QAAQlB,EAAS,CAAEs5F,KAAMD,IAAMn5F,eAAec,GAAAA,GAASu4F,6BAChEv4F,GAAAA,GAASE,QAAQlB,GAASE,eAAec,GAAAA,GAASu4F,4BACxD,CAEO,SAASC,GAAoBC,EAAYJ,GAC9C,IAAIz4F,EAMJ,OAJEA,EADEy4F,EACSr4F,GAAAA,GAASE,QAAQu4F,EAAI,CAAEH,KAAMD,IAE7Br4F,GAAAA,GAASE,QAAQu4F,GAEvB,CAAC74F,EAAS84F,SAAS,cAAe94F,EAAS84F,SAAS,UAC7D,CACO,SAASC,GAAgBz3F,GAC9B,OAAO03F,GAAAA,GAASC,WAAW,CAAE33F,YAAWw3F,SAAS,WACnD,CCOA,MAAMI,IAAe/oG,EAAAA,EAAAA,IAAOgpG,GAAAA,KAAe9oG,WAAA,CAAAC,YAAA,oBAAtBH,CAAsB,qCAK9BipG,IAAsBziB,EAAAA,GAAAA,MAChCpsF,IACC,MAAM+6E,GAAaC,EAAAA,GAAAA,QACb,EAAE5wE,IAAMC,EAAAA,EAAAA,MAERi0E,EADQvD,EAAWkD,UACLK,MACd/tE,ECtBH,SAA2Bu+F,EAAuBzyB,GACvD,MAAO9rE,EAASw+F,IAAcnwG,EAAAA,EAAAA,YAExBowG,GAAyBhwG,EAAAA,EAAAA,cAC5BuR,IACMA,IACLw+F,EAAWx+F,GAEe,SAAxBA,GAAS4tD,YACT5tD,GAAS0+F,gBAAgBvtF,aAAe26D,GAAKh8E,GAAGqhB,YAChDnR,GAASq9B,QAETkhE,IACF,GAEF,CAACzyB,GAAKh8E,GAAIyuG,IAWZ,OATAvzC,GACE,CACE3nB,QAAS,CAAC,mBACVhzB,MAAO,CAAC,iBACRg9C,KAAM,CAAC,mBAEToxC,GAGKz+F,CACT,CDLoB2+F,CAAkBlvG,EAAM8uG,UAAW9uG,EAAMq8E,KAEnD8G,EAAS5yE,GAAS4+F,kBAAkBztF,YAElC0B,KAAM+iE,GAAYhtB,GACxBgqB,EAASxuB,EAAM,uBAAuBwuB,KAAY,QAClDt+E,EACA,CAAE4O,gBAAiB,MAGfshB,EAAOgmD,EAAWq0B,YAAY7+F,GAAS4+F,kBAAkBztF,YAAc,KACvE,kBAAE2tF,GAAsBrvG,EAqD9B,OApDAf,EAAAA,EAAAA,YAAU,KAaR,GAAKsR,GAAS4+F,kBAAqB5+F,GAASq9B,QAAW0wC,GAAO53E,OAA9D,CAIA,GAAI6J,GAAS0+F,gBAAkB1+F,EAAQ0+F,iBAAmBjvG,EAAMq8E,KAAKh8E,IAC/D00B,EAAM,CACR,MAAM,SAAEkiB,GAAaliB,EAAK43C,WAC1BnpE,EAAAA,GAAAA,MAAO,KACLuxB,EAAKkyC,QAAQ,IACRlyC,EAAK43C,UACR11B,SAAU,IACLA,EACHonB,eAAgB,IACXpnB,EAASonB,eACZge,IAAK,IACAplC,EAASonB,eAAege,IAC3Bh8E,GAAIkQ,EAAQ0+F,eACZtoG,KAAM4J,EAAQ5J,SAIpB,GAdJnD,EAgBF,CAGE+M,EAAQs5F,UAtCY1mB,KACjBnjF,EAAMq8E,KAAQ8G,GAEnBpuD,GAAMkyC,QAAQ,IACTlyC,GAAM43C,UACT2iC,eAAgBnpB,EACZ/7E,EAAE,gBAAgBokG,GAAgBroB,GAAS9nB,gBAAgBge,KAAK1lE,SAAW,MAC3E,IAEA,EA8BD44F,CAAeh/F,EAAQ4+F,mBAG9B3rG,EAAAA,GAAAA,MAAO,KACLuxB,GAAM0qD,cAAclvE,EAAQq9B,OAAqB,GADnDpqC,EA5BA,CA8BI,GACH,CAACuxB,EAAMxkB,EAASvQ,EAAMq8E,IAAKjyE,EAAGk0E,EAAO6H,KAExClnF,EAAAA,EAAAA,YAAU,KACRowG,GAAmB,GAClB,CAACt6E,EAAMs6E,KAGRnsG,EAAAA,EAAAA,KAACipF,GAAmB,CAAA/oF,UAClBF,EAAAA,EAAAA,KAAC2oF,GAAmBh2D,SAAQ,CAAAzyB,SACzBA,EAAG4oF,eAAcC,mBAEdzjF,EAAAA,EAAAA,MAACmmG,GAAY,CACX,UAAQ,mCACRa,YACEtsG,EAAAA,EAAAA,KAACusG,GAAAA,IAAkB,CACjBC,gBAAgBC,EAAAA,GAAAA,KAA6B,IACxCC,GAAAA,IACHC,gBAAgBrsG,EAAAA,GAAAA,MAAO,KACrBu3E,EAAWwD,WAAWuxB,QAAQ,EAAI,EAAE,IAEtCC,iBAAiBvsG,EAAAA,GAAAA,MAAO,KACtBu3E,EAAWwD,WAAWuxB,QAAQ,IAAK,IAErCE,qBAAqBxsG,EAAAA,GAAAA,MAAO,KAC1Bu3E,EAAWwD,WAAW0xB,IAAI,GAAG,IAE/BC,mBAAmB1sG,EAAAA,GAAAA,MAAO,KACxBu3E,EAAWwD,WAAW6mB,QACtBrqB,EAAWwD,WAAWnnC,QAAQ,IAEhC93B,QAAQ,EACR6wF,eAAgBlkB,MAItBmkB,aAAa,EAAMhtG,SAAA,CAElB4oF,IAAgB9oF,EAAAA,EAAAA,KAAC2qE,GAAM,KACxB3qE,EAAAA,EAAAA,KAACmtG,GAAAA,IAAoB,UAKT,I,gBE3F5B,MAAM/iD,IAAOC,EAAAA,EAAAA,IAAS,4DAShB51C,GAAc/R,EAAAA,GAAO0qG,EAACxqG,WAAA,CAAAC,YAAA,qBAARH,CAAQ,8DACb0nD,IACO,EAAGkiC,iBACrB,GAAG9xF,OAAO8xF,EAAYjsE,GAAK,OAAO7lB,OAAO8xF,EAAYrtE,GAAK,QC/BxDouF,IAAa3qG,EAAAA,EAAAA,IAAO4nE,GAAAA,KAAY1nE,WAAA,CAAAC,YAAA,qBAAnBH,CAAmB,4LAezB2jG,GAAsC,CACjDjtB,eAAgB,UAChBC,iBAAkB,YAClBF,IAAK,WACLmtB,eAAgB,UAChBhtB,WAAY,aACZle,aAAc,YAGVu0B,GAAyD,CAC7DtW,iBAAkBuW,GAAAA,GAClBzW,IAAK0W,GAAAA,GACLzW,eAAgB3sD,GAAAA,GAChB6sD,WAAYwW,GAAAA,GACZ50B,kBAAmByO,GAAAA,GACnBvO,aAAc20B,GAAAA,GACdC,iBAAkB1vB,GAAAA,IAkBPgtC,IAAqBpkB,EAAAA,GAAAA,MAAS,EAAGhyC,UAASlwB,eACrD,MAAOilE,EAAO/B,IAAYgC,EAAAA,GAAAA,OACpBlxB,EAAerW,KACf+kB,GD3DC5tE,EAAAA,EAAAA,cAAao7C,IAClB,KAAKi5C,EAAAA,GAAAA,KAAOj5C,GACV,OAAO,KAET,MAAMxM,EAAqBwM,EAAQq2D,iBAE7B,EAAEltF,EAAC,EAAEpB,IAAM8qD,EAAAA,GAAAA,KAA+BC,GAAAA,IAAiBC,UAAW/yB,GACtE9xC,EAAOslC,GAkCjB,SAAuBy+B,EAAkBmjB,GACvC,OAAQnjB,GACN,IAAK,UACL,IAAK,aACH,OAAOnpE,EAAAA,EAAAA,KAAC4qC,GAAAA,GAAe,CAAC,UAAQ,kBAAkB/oC,MAAO,CAAEic,KAAMvhB,KACnE,IAAK,UACH,OACEyD,EAAAA,EAAAA,KAACyU,GAAW,CAAC,UAAQ,eAAe63E,YAAaA,EAAYpsF,UAC3DF,EAAAA,EAAAA,KAACysB,GAAAA,GAAW,CAAC5qB,MAAO,CAAEic,KAAMphB,OAGlC,IAAK,OACL,IAAK,SACL,IAAK,QACH,OAAOsD,EAAAA,EAAAA,KAACk3B,GAAAA,GAAqB,CAAC,UAAQ,cAAcr1B,MAAO,CAAEic,KAAMthB,KACrE,IAAK,UACL,IAAK,UACH,OAAOwD,EAAAA,EAAAA,KAAC2pE,GAAAA,GAAS,CAAC,WAAS,eAAe9nE,MAAO,CAAEic,KAAMphB,KAC3D,IAAK,WACH,OAAOsD,EAAAA,EAAAA,KAACwtG,GAAAA,GAAmB,CAAC,UAAQ,gBAAgB3rG,MAAO,CAAEic,KAAMrhB,KACrE,QACE,OAAO,KAEb,CAzD2BotE,CAAcn/B,EAAQ,CAAErqB,IAAGpB,MAElD,OAAa,OAAT7Z,EAAsB,MAExBpF,EAAAA,EAAAA,KAACkqE,GAAAA,IAAS,CACR7pD,EAAGA,EACH,UAAS,kBAAkBqqB,IAC3BzrB,EAAGA,EACHkrD,OAAQC,GAAAA,IACRC,gBAAc,EACdnnE,KAAMkC,EACNsB,UAAW,kBAAkBgkC,KAAUwM,EAAQsjC,UAC/Cp4E,UAAWsoC,GAGC,GACf,ICqCGA,EAASwM,EAAQ0jC,gBAAgBsxB,YAAYh1D,EAAQsjC,UAAU+yB,gBAC/DrtF,EAAOg3B,EAAQuyB,WACf,IAAE0P,EAAG,qBAAEoC,GAAyBr7D,GAAM6zB,UAAUonB,gBAAkB,CAAC,GACjEolB,iBAAkB+nB,GAAiB/sB,GAAwB,CAAC,EAC9Dn2E,EAAOuqF,GAAS2Y,GAAgB,oBAgBtC,OACEtoG,EAAAA,EAAAA,KAACovF,GAAAA,IAAK,CAACjyF,GAAI8uF,EAAQoD,GAAAA,SAAY1tF,EAAUzB,UACvCF,EAAAA,EAAAA,KAAA,KAAGyG,IAAKyjF,EAAmChqF,UACzCoF,EAAAA,EAAAA,MAAC+nG,GAAU,CACT38E,WAAS,EACTwmB,QAASA,EACTk5C,eAAgB,GAAGl5C,EAAQsjC,qBAC3B10E,SArBR,WACE,IAAKqzE,EAAK,OAEV,MAAMs0B,EACS,sBAAbt0B,EAAI11E,KACA,CAAE4gD,OAAQ,CAAElnD,GAAIg8E,EAAIh8E,KACpB,CAAEknD,OAAQ,CAAE89B,SAAUkkB,GAASltB,EAAI11E,MAAOtG,GAAIg8E,EAAIh8E,KAExD69D,EACe,sBAAbme,EAAI11E,KAA+Bm3D,GAASU,wBAA0BV,GAAS4qC,UAC/EiI,EAEJ,EAUQrB,eAAgBlsF,GAAMksF,eACtBplF,WAAUmyD,GAAK11E,MAAOujB,EACtBwjD,eAAgB,GAChB/oC,MAAOvhB,GAAMuhB,MACbG,WAAY1hB,GAAM0hB,WAClByuD,eAAgBnwE,GAAMmwE,eACtBC,iBAAkBpwE,GAAMowE,iBACxB5pF,UAAWgkC,IAAW2tC,GAAAA,IAAWhuE,SAAY8uE,EAAyB,GAAnB,iBAAsBj5E,SAAA,EAEzEF,EAAAA,EAAAA,KAAA,KAAGyb,UAAW,oBAAoBvb,UAChCF,EAAAA,EAAAA,KAACoF,EAAI,CAACvD,MAAO,CAAEvF,MAAO,WAAa6Z,MAAO,GAAIG,OAAQ,OAEvDozD,EAAgBxyB,SAGf,ICtFCw2D,GAAoB,CAC/BtyB,MAAO,GACPJ,MAAO,GACPoO,MAAO,CACLjsF,GAAIo8E,GACJ91E,KAAM,QACNywC,OAAQ,QACRwkC,SAAS,IAGAi1B,GAAiB,CAC5BlsE,MAAO,MACPG,WAAY,4CACZ0uD,iBAAkB,2CAGPsd,GAAkB9wG,IAK7B,MAAM,IAAQqK,EAAAA,EAAAA,MACR0yE,EAAatB,MAEXrmB,QAAS27C,GAAkB3wB,GACjCzrB,EAAM,kBAAkB30D,EAAMq8E,IAAIh8E,GAAGqhB,YAAc,sBAE/CsvF,GAA6ChyG,EAAAA,EAAAA,cACjD,CAACgzE,EAAiBrrE,KAChB,OAAQA,GACN,IAAK,QACH,OAAOsqG,GAAAA,IACT,KAAKt0B,GACH,OAAOwW,GACT,QACE,OAAQnhB,GACN,KAAKk/B,GAAAA,IAAU5kB,MACb,OAAO6kB,EAAAA,GAAAA,MAAAA,CAAcC,GAAAA,KACvB,KAAKF,GAAAA,IAAUn8E,KACb,OAAOs8E,EAAAA,GAAAA,MAAAA,CAAgBb,IACzB,KAAKU,GAAAA,IAAUxxB,KACb,OAAOiT,GACT,QACE,QAER,GAEF,IAGI2e,GAAsBtyG,EAAAA,EAAAA,cAAY,KACtC,MAAMuyG,EAAmB,IAAIC,GAAAA,IAe7B,OAdAD,EAAiBE,wBAAuB,GACxCF,EAAiBG,yBAAyBV,GAC1CO,EAAiBI,uBACf,CAAChrG,EAAc2lF,IACb,IAAIslB,GAAAA,IAAYtlB,EAAO,CACrBulB,QAAS,IACTC,QAAS,GACTC,QAAS,GACTC,QAAS,KACTC,OAAQ,kBACRC,QAAS,QAGfX,EAAiBpzB,UAAUyyB,IAAY,GAChCW,CAAgB,GACtB,CAACP,IAGEmB,GADmBj5F,EAAAA,EAAAA,QAAsBo4F,KACRh4F,QA+EvC,OA7EAra,EAAAA,EAAAA,YAAU,KACR,IAAK8xG,GAAerqG,OAAQ,OAC5B,MAAMw3E,EAAqB,GACrBk0B,EAAY,CAChB/xG,GAAIs8E,GACJh2E,KAAMg2E,GACNn8E,MAAO4J,EAAE,SACTiP,MAAOqjE,GACPljE,OAAQkjE,GACRt5D,KAAM,CACJ6zB,SAAU,CAAE+rC,aAAc,MAGxB1E,EAAQyyB,EAAc9mG,KAAK8sD,IAC/B,MAAMosB,EAASpsB,EAAE12D,GAAGqhB,WAGd2wF,EAAYhoB,GADDtzB,EAAEsH,gBAAgBogB,sBAAsBn+E,MAAQ,GACxBy2D,EAAE4nB,aAAev0E,EAAE,WAE5D2sD,EAAEmsB,cAAc5mD,SAASj8B,IACvB69E,EAAMj3E,KAAK81E,EAAWoG,EAAQ9iF,EAAGqhB,WAAY45D,GAAWntC,SAAS,IAEnE4oB,EAAEksB,cAAc3mD,SAASj8B,IACvB69E,EAAMj3E,KAAK81E,EAAWoG,EAAQ9iF,EAAGqhB,WAAY45D,GAAW9vE,QAAQ,IAElEurD,EAAEisB,aAAa1mD,SAASj8B,IACtB69E,EAAMj3E,KAAK81E,EAAWoG,EAAQ9iF,EAAGqhB,WAAY45D,GAAWE,MAAM,IAEhE,IAAI82B,EAAe,GACfv7C,GAAGsH,gBAAgBge,KAAK1lE,UAC1B27F,EAAO9D,GAAgBz3C,GAAGsH,gBAAgBge,KAAK1lE,UAEjD,MAAMi3B,EAAUmpB,EAAEsH,eAAege,KAAKzuC,aAAyB/oC,EACzDkwB,EAAO,CACX10B,GAAI8iF,EACJx8E,KAAMinC,EAAS,GAAGA,SApBH,OAqBfptC,MAAO6xG,EACPh5F,MAAOqjE,GACPljE,OAAQkjE,GACR61B,MAAOC,GAAAA,IAAUC,OACjB7kE,OAAQA,GAAU2tC,GAAAA,IAAWhuE,QAC7BmlG,cAAeC,GAAAA,IAAcpxF,OAC7B6B,KAAM,CACJksF,eAAgBgD,EAAOloG,EAAE,gBAAgBkoG,UAAUztG,EACnDoyC,SAAU8f,IAId,OAAIA,EAAEotB,0BACG,IAAKpvD,EAAM3R,KAAM,IAAK2R,EAAK3R,QAASytF,KAGtC97E,CAAI,IAEP69E,EAAe10B,EAAMj0E,KAAKy1E,GAASA,EAAK7gD,SACxCg0E,EAAYv0B,GAAOj9E,QACtB0zB,IAAU69E,EAAannG,SAASspB,EAAK10B,KAAO00B,EAAK10B,KAAOs8E,KAE3Dk2B,EAAUv2E,SAASvH,IACjBmpD,EAAMj3E,KAAK81E,EAAWJ,GAAe5nD,EAAK10B,GAAIi7E,GAAWE,MAAM,IAGjE,MAAMrlC,EAAQ,CACZ+nC,QACAI,MAAO,CAAC8zB,KAAc9zB,GACtBgO,MAAO,CACLjsF,GAAIo8E,GACJ91E,KAAM,QACNywC,OAAQ,QACRwkC,SAAS,IAIbu2B,EAAch0B,UAAUhoC,GAAO,GAC/Bg8D,EAAc5zB,WAAW6mB,OAAO,GAC/B,CAACh7F,EAAG+nG,EAAep1B,EAAYg0B,KAGhC7tG,EAAAA,EAAAA,KAAC4vG,GAAAA,IAAqB,CAAC/3B,WAAYo3B,EAAc/uG,UAC/CF,EAAAA,EAAAA,KAAC2rG,GAAmB,CAClBxyB,IAAKr8E,EAAMq8E,IACXyyB,UAAW9uG,EAAM8uG,UACjBO,kBAAmBrvG,EAAMqvG,qBAEL,EC1JrB,SAAS0D,KACd,MAAM,EAAE3oG,IAAMC,EAAAA,EAAAA,MACRmwF,EAAe1f,KACfiC,EAAatB,KACbV,GAAaC,EAAAA,GAAAA,OACb/3E,EAAQ83E,EAAWI,WAGnB63B,EAAgB,CACpB3G,aAH2B5hB,IAGbwoB,IAGV5pD,EAA0B,CAC9B,CACEhpD,GAAI,eACJG,MAAO4J,EAAE,gBACTohD,QAAQtoD,EAAAA,EAAAA,KAACwoG,GAAY,CAACqB,cAAe7kG,QAAQjF,EAAMo4E,cACnD1nC,SAAW+V,IACT,MAAM,SAAEzS,GAAayS,EACrB,GAAuB,iBAAnBzS,GAAUtwC,MAEV,YAAaswC,GACb,cAAeA,GACf,4BAA6BA,KAG1BA,GAAU68B,SACW,OAAtB78B,GAAU68B,WACP78B,GAAUw8B,WAAqC,OAAxBx8B,GAAUw8B,aACjCx8B,GAAUiuC,yBACb,CACA,MAAMn0C,EAAS,CACbmiE,QAAS,CACP9oG,EACE,wKAKN,MAAM,IAAImnD,GAAa,GAAI,GAAI,IAAK,GAAIxgB,EAC1C,CAEJ,GAGJ,CACE1wC,GAAI,kBACJG,MAAO4J,EAAE,WACTohD,QAAQtoD,EAAAA,EAAAA,KAACiiG,GAAe,IACxBh/E,OAASujC,IACP,MAAM,cAAE+6B,EAAa,SAAExtC,EAAQ,UAAEw+B,GAAc/rB,EAC/C,OAAuC,IAAnC38C,OAAO4f,KAAK+8B,GAAYhjD,QAIzB+uE,IAAcmH,GAActe,cAAgBmX,IAAcmH,GAAcP,MACzEplC,IACAwtC,GAEO8F,GAAoB9F,EAElB,GAGf,CACEpkF,GAAI,SACJG,MAAO4J,EAAE,UACTohD,QAAQtoD,EAAAA,EAAAA,KAACuqG,GAAU,CAACl7D,cAAY,IAChCpsB,OAASujC,IACP,MAAM,cAAE+6B,EAAa,UAAEhP,GAAc/rB,EACrC,OAAuC,IAAnC38C,OAAO4f,KAAK+8B,GAAYhjD,WAGxB+uE,GAAc,CAACmH,GAActe,aAAcse,GAAcP,KAAK5wE,SAASgqE,MAGnEgP,GAAeioB,cAAc,GAGzC,CAAErsG,GAAI,SAAUG,MAAO4J,EAAE,UAAWgwC,SAASl3C,EAAAA,EAAAA,KAAC4jG,GAAc,MAkH9D,OACE5jG,EAAAA,EAAAA,KAACgqD,GAAU,CACT7a,YAAU,EACVE,cAAY,EACZ8W,MAAOA,EACP3Y,SAAU8pD,EACV54D,SArHiBhwB,UACnB,MAAMukC,EAAQ4kC,EAAWkD,UAEnBK,EAAQvD,EACXwD,WACAyD,WACA3gF,QAAQ01D,GAAMA,EAAE2mB,UAAYf,MACzB,cACJuO,EAAa,qBACbD,EAAoB,cACpBxG,EAAa,UACbhP,EAAS,SACTx+B,EAAQ,iBACRk0C,EAAgB,WAChBC,EAAU,iBACVC,EAAgB,kBAChBC,EAAiB,iBACjBC,EAAgB,OAChBz8C,EAAM,OACN42D,GACEyN,EACEjc,EAAepoD,EAEjBooD,IACEjgD,GAAY,iBAAkBA,IAChCigD,EAAa5jB,aAAer8B,EAASq8B,cAAgB,MAEnDmR,IACFyS,EAAavW,SAAW,CACtB8D,mBAKN,MAAM2uB,EAAWjpB,GAAuB1U,EAAWx+B,GAAU32C,MAAQ,GAAI4qF,GACnEmnB,EAA2B,KAAfjnB,EAAoBgoB,EAAWhoB,EACjD,IAAIioB,EAA6B,CAC/BhzG,GAAI,GAAGi+E,EAAM53E,OAAS,gBACtBC,KAAM,OACNnG,MAAO6xG,EACPh5F,MAAOqjE,GACPljE,OAAQkjE,GACR61B,MAAOC,GAAAA,IAAUC,OACjBrvF,KAAM,CACJ6zB,SAAU,CACR+rC,aAAc,GACdE,cAAe,GACfD,cAAe,GACftE,WAAYyM,EACZjH,0BAAgD,QAArBkH,EAC3BzG,WAAY,CACV1tE,KAAMo0E,GAERjtB,eAAgB,CACdogB,qBAAsB,CACpBp+E,GAAI3C,OAAOu5C,GAAU52C,IAAM,GAC3BC,KAAM8yG,EACNt0F,YAAaqrE,GACX1U,EACAx+B,GAAUn4B,aAAe,GACzBmsE,GAEFxH,iBAAkBhO,EAClBhnE,QAAS08E,KAIf3G,YAAa0S,EACbjR,YAAayf,IAMjB,GAHyB,QAArBra,IACFgoB,EAAe,IAAKA,EAAcjwF,KAAM,IAAKiwF,EAAajwF,QAASytF,OAEhE5tG,EAAMo4E,WAAY,CACrB,MAAMi4B,EAAWv2B,EAAWJ,GAAe02B,EAAahzG,GAAIi7E,GAAWE,MACvErlC,EAAM+nC,OAAOj3E,KAAKqsG,EACpB,CAEA,GAAIrwG,EAAMo4E,WAAY,CACpB,MAAMztC,EACJ29C,IAAqBjQ,GAAWE,KAC5BF,GAAWE,KACX+P,IAAqBjQ,GAAWntC,QAC9BmtC,GAAWntC,QACXmtC,GAAW9vE,OAEbwyE,EAAUjB,EAAW95E,EAAMo4E,WAAWqC,QAAS21B,EAAahzG,GAAIutC,GACtE3qC,EAAMo4E,WAAWr7B,SAAS,CAAEizB,UAAU,IACtC98B,EAAM+nC,OAAOj3E,KAAK+2E,EACpB,CAEIvI,IAAcmH,GAAcxe,0BACvBi1C,EAAajwF,KAAK6zB,SAASonB,eAAeogB,qBAAqBhwE,QAEpEwoC,IAAaizC,GAAcjzC,WACtBo8D,EAAajwF,KAAK6zB,SAAS2tC,WAEjB,KAAfwG,UACKioB,EAAajwF,KAAK6zB,SAAS0nC,WAEpCxoC,EAAMmoC,OAAOr3E,KAAKosG,GAClBt4B,EAAWoD,UAAUhoC,GAAO,GAC5B4kC,EAAWq0B,YAAYiE,EAAahzG,KAAK2/C,SAAS,CAAEizB,UAAU,IAC9D8H,EAAW/6B,SAAS,IAAK/8C,EAAOgwE,UAAU,IAC1CunB,IACAzf,EAAWwD,WAAWnnC,eAEhB/J,QAAQqd,SAAS,EAUrB55B,aAAckiF,EACd3mE,aAAck2B,GACdhiE,MAAO6J,EAAE,aAGf,CC3NO,SAASmpG,IAAe,KAAEx+E,IAC/B,MAAM,IAAQ1qB,EAAAA,EAAAA,MACR0wE,GAAaC,EAAAA,GAAAA,OACbwf,EAAe1f,KACf04B,EvFqCD,WACL,MAAMP,EAAuBxoB,KAC7B,OAAOzrF,EAAAA,EAAAA,cACL4S,UACE,MAAMy6F,EAAe4G,EAAqBl+E,GACpC+tD,EAAW/tD,EAAK43C,UAChBwW,EAASpuD,EAAK2oD,QACd4F,EAAYH,EAAO13E,SAAS,eAE5BouF,QA+GLjoF,eAA6BmjB,GAClC,MAAMilE,EAAqBjlE,GAAM43C,WAAW11B,UAAUonB,gBAAgBogB,qBACtE,IAAKub,EAAoB,OAEzB,MAAM,iBAAEvW,EAAgB,GAAEpjF,GAAO25F,EAEjC,OAAIvW,IAAqB7G,GAActe,mBACxB/L,GACXoC,EAAM,2BAA2Bt0D,EAAGqhB,sBAE7B+hE,IAAqB7G,GAAcP,UAC/B9pB,GAAgCoC,EAAM,kBAAkBt0D,EAAGqhB,2BADnE,CAGT,CA5H2B+xF,CAAc1+E,GAC7B2+E,GAAiB7Z,GAAStP,GAAoBsP,GAC9C8Z,GAA4C,IAA3B9Z,GAAQ6S,eAEzBrkB,EACJwR,GAAQ9Q,2BAA6BzF,QAgI7C1xE,eAAiCuxE,GAC/B,OAAOqI,GAAuB72B,EAAM,gCAAgCwuB,iBACtE,CAlI+DywB,CAAkBzwB,GAAU,GAC/EkU,EACJwC,GAAQvS,uBAAyBhE,QAiIzC1xE,eAA4BuxE,GAC1B,OAAOqI,GAAkB72B,EAAM,gCAAgCwuB,YACjE,CAnI2D0wB,CAAa1wB,GAAU,GACtEmU,EACJuC,GAAQ/R,gCAAkCxE,QAkIlD1xE,eAAoCuxE,GAClC,OAAOqI,GAA0B72B,EAAM,gCAAgCwuB,qBACzE,CAnIkB2wB,CAAqB3wB,GAC3B,GAEAr0C,EAASg0C,GAAU0B,YACnB4D,EAAWtF,GAAU7rC,SACrB0pC,EAAW,CACftuB,YAAag2B,EACbN,gBAAiBuP,EACjBlqF,OAAQiqF,GAGV,IAAI9O,EAEJ,MAAMwrB,EAAM3rB,GAAU/pB,gBAAgBogB,qBACtC,GAAIs1B,GAAK1zG,IAAM0zG,GAAKtwB,mBAAqB7G,GAAcP,IAAK,CAC1D,MAAM8L,QAqHdv2E,eAAyCqvE,GACvC,OAAOuK,GAAuB72B,EAAM,kBAAkBssB,iBACxD,CAvH0C+yB,CAA0BD,EAAI1zG,GAAGqhB,YAEnE6mE,EAgIR,SACEF,EAAyC,GACzCH,EAA2C,GAC3CC,EAA6C,IAG7C,MAAM8rB,EAA+D,CAAC,EAqBtE,OApBA9rB,EAAoB7rD,SAAS43E,IAC3BD,EAAwBC,EAAmB5X,iBAAmB4X,CAAkB,IAIlF7rB,EAAgB/rD,SAASosD,IACvB,MAAMp5E,EAAMo5E,EAAe4T,gBACvB2X,EAAwB3kG,IAAMjP,KAAOqoF,EAAeroF,KACtD4zG,EAAwB3kG,GAAOo5E,EACjC,IAIFR,EAAkB5rD,SAASksD,IACzB,MAAMl5E,EAAMk5E,EAAiB8T,gBACzB2X,EAAwB3kG,IAAMjP,KAAOmoF,EAAiBnoF,KACxD4zG,EAAwB3kG,GAAOk5E,EACjC,IAGKz7E,OAAOC,OAAOinG,EACvB,CA5J+BE,CACrB9rB,EACAv5C,GAAQujB,YACR81B,EAEJ,CAEA,IAAIisB,EAAyB,IAAMhsB,GAAUxD,YAAc,CAAC,GACxDuS,EAAerU,GAAU7rC,UAAU2tC,WAEvC,GAAIiV,GAAQhV,yBAA2BgV,EAAO6S,eAAgB,CAC5D,MAAM2H,QA4DdziG,eAA6Bi3E,GAC3B,GAAKA,EAEL,OAAIA,EAASpF,mBAAqB7G,GAAcP,UACjC9pB,GAAmBoC,EAAM,kBAAkBk0B,EAASxoF,GAAGqhB,2BAElEmnE,EAASpF,mBAAqB7G,GAActe,mBACjC/L,GACXoC,EAAM,2BAA2Bk0B,EAASxoF,GAAGqhB,gCAFjD,CAKF,CAvEiC4yF,CACvBxxB,GAAU7rC,UAAUonB,gBAAgBogB,sBAEtC,GAAI41B,GAAYpO,KAAM,CACpB,MAAM,UAAEsO,EAAS,WAAEC,GAyC7B,SAAwCC,EAAuC/O,GAC7E,MAAM6O,EAAwC,IAAKE,GAC7CD,EAA6D,CAAC,EAUpE,OARA9O,EAAOO,KAAK3pE,SAASo4E,IACnB,MAAM,SAAElO,GAAakO,EACjBlO,KAAYiO,IACdD,EAAWhO,GAAYiO,EAAUjO,UAC1B+N,EAAU/N,GACnB,IAGK,CAAE+N,YAAWC,aACtB,CAtD4CG,CAChCP,EACAC,GAEFD,EAAyBG,EACzBpd,EAAeqd,CACjB,CACF,CAEA,MAAMI,EAAoB,CACxBviD,YAAak2B,IAAyBF,GAAmB,IACzD3D,UAAW51C,GAAQ41C,YAAc0D,GAAU1D,YAAa,GACxDI,sBACEh2C,GAAQg2C,wBAA0BsD,GAAUtD,uBAAyB,MACvEoB,WAAYp3C,GAAQo3C,YAAcrG,GAAWvsE,KAAKa,UAAUigG,IAC5DpvB,MAAOl2C,GAAQk2C,QAAUoD,GAAUpD,OAAS,GAC5C+C,gBAAiBj5C,GAAQi5C,kBAAoBuP,GAAsB,IACnE7jB,UAAW3kC,GAAQ2kC,YAAcqP,GAAU7rC,UAAUonB,gBAAgBoV,WAAa,MAClF0R,gBAAiBr2C,GAAQq2C,kBAAoBiD,GAAUjD,iBAAmB,GAC1ES,SAAU92C,GAAQ82C,UAAYsD,GAAsBd,GAAUxC,UAAY,IAC1EP,SAAUv2C,GAAQu2C,WAAa+C,GAAU/C,UAAY,OACrDj4E,OAAQ0hC,GAAQ1hC,SAAWiqF,GAAc,IACzCnqD,MAAO4B,GAAQ5B,QAAUk7C,GAAUl7C,OAAS,IAC5Cs4C,WAAY12C,GAAQ02C,aAAe4C,GAAU5C,YAAc,IAC3DE,UAAW52C,GAAQ42C,WAAawD,GAAsBd,GAAU1C,WAAa,IAC7Ej3E,QAASqgC,GAAQrgC,UAAY25E,GAAU35E,SAAW,GAClDs3E,UAAWj3C,GAAQi3C,YAAcqC,GAAUrC,WAAa,GACxDtB,cAAeoV,EACflZ,YAGF,MAAO,CACL0rB,kBACIqH,EAAiB,CAAC,EAAI,CAAEpO,gBAAiB,CAAEx2D,OAAQ8lE,OACnDjB,EAAiB,CAAC,EAAI,CAAEjO,OAAQ,CAAEA,OAAQ5iB,GAAUmD,aAAekR,IACxE,GAEH,CAAC8b,GAEL,CuF/H2B4B,IAClB7B,EAAe8B,IAAoBl2G,EAAAA,EAAAA,UAA4B,MAEhE0S,EAAerD,KAyBrB,IAvBAhP,EAAAA,EAAAA,YAAU,MACR2S,iBACE,GAAKmjB,EACL,IACE,MAAMn3B,QAAc41G,EAAiBz+E,GACrC+/E,EAAiBl3G,EACnB,CAAE,MAAOsS,GACP,MAAM,cAAEmX,EAAa,YAAEC,GAAgBi7C,GAAgBryD,GACvDoB,EAAazD,SAAS,CACpBtH,QAAS,SACThG,MAAO6J,EAAE,sCACThH,UACEoF,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,CACGikB,GAAepd,KAAK+H,GAAQA,EAAIzB,UAChC+W,GAAard,KAAK+H,GAAQA,EAAIzB,cAIvC,CACF,CACKwkG,EAAa,GACjB,CAAChgF,EAAMy+E,EAAkBliG,EAAclH,KAErC4oG,GAAiB,iBAAkBA,GAAkB,EACxD,OAAO,KAGT,MAAM3pD,EAA0B,CAC9B,CACEhpD,GAAI,eACJG,MAAO4J,EAAE,gBACTohD,QAAQtoD,EAAAA,EAAAA,KAACwoG,GAAY,IACrB/3D,SAAW+V,IACT,MAAM,SAAEzS,GAAayS,EACrB,GAAuB,iBAAnBzS,GAAUtwC,MAEV,YAAaswC,GACb,cAAeA,GACf,4BAA6BA,KAG1BA,GAAU68B,SACW,OAAtB78B,GAAU68B,WACP78B,GAAUw8B,WAAqC,OAAxBx8B,GAAUw8B,aACjCx8B,GAAUiuC,yBACb,CACA,MAAMn0C,EAAS,CACbmiE,QAAS,CACP9oG,EACE,wKAKN,MAAM,IAAImnD,GAAa,GAAI,GAAI,IAAK,GAAIxgB,EAC1C,CAEJ,GAGJ,CACE1wC,GAAI,kBACJG,MAAO4J,EAAE,WACTohD,QAAQtoD,EAAAA,EAAAA,KAACiiG,GAAe,IACxBh/E,OAASujC,IACP,MAAM,cAAE+6B,EAAa,SAAExtC,EAAQ,UAAEw+B,GAAc/rB,EAC/C,OAAK+6B,IAKFhP,IAAcmH,GAActe,cAAgBmX,IAAcmH,GAAcP,MACzEplC,IAIE,oBAAqB+7D,GAFhBzoB,GAAoB9F,GAKlB,GAGf,CACEpkF,GAAI,SACJG,MAAO4J,EAAE,UACTohD,QAAQtoD,EAAAA,EAAAA,KAACuqG,GAAU,CAACl7D,cAAY,IAChCpsB,OAASujC,IACP,MAAM,cAAE+6B,EAAa,UAAEhP,GAAc/rB,EACrC,OAAuC,IAAnC38C,OAAO4f,KAAK+8B,GAAYhjD,WAGxB+uE,GAAc,CAACmH,GAActe,aAAcse,GAAcP,KAAK5wE,SAASgqE,MAGnEgP,GAAeioB,cAAc,GAGzC,CAAErsG,GAAI,SAAUG,MAAO4J,EAAE,UAAWgwC,SAASl3C,EAAAA,EAAAA,KAAC4jG,GAAc,MAuF9D,OACE5jG,EAAAA,EAAAA,KAACgqD,GAAU,CACT7a,YAAU,EACVE,cAAY,EACZ8W,MAAOA,EACP3Y,SAAU8pD,EACV54D,SA1FiBhwB,UACnB,MAAMkxE,EAAW/tD,EAAK43C,UAChBqoC,EAAwBhC,GAAe1N,iBAAiBx2D,QAAQ6xC,UAEhE,cACJuK,EAAa,qBACbD,EAAoB,UACpBxV,EAAS,SACTx+B,EAAQ,iBACRk0C,EAAgB,WAChBC,EAAU,iBACVC,EAAgB,kBAChBC,EAAiB,cACjB7G,EAAa,OACb31C,EAAM,OACN42D,GACEyN,EAEEjc,EAAepoD,EAEjBooD,IACEjgD,GAAY,iBAAkBA,IAChCigD,EAAa5jB,aAAer8B,EAASq8B,cAAgB,MAEnDmR,IACFyS,EAAavW,SAAW,CACtB8D,kBAGAuwB,IACF9d,EAAavW,SAAW,IACnBuW,EAAavW,YACbq0B,KAKT,MAAM5B,EAAWjpB,GAAuB1U,EAAWx+B,GAAU32C,MAAQ,GAAI4qF,GACnEnH,GxFxKwBpF,EwFwKWmE,EAAS7rC,SAAS0nC,WxFxKT2L,EwFwKqBc,ExFvKrEzZ,GAAagN,IAAgC,iBAAV2L,GAAgC,KAAVA,EACpDA,EAEJ3Y,GAAagN,IAAeA,IAAe2L,EAGzC3L,EAFE2L,GALJ,IAA2B3L,EAAoB2L,EwFyKlD,MAAM2qB,EAA4B,IAC7BnyB,EACH7rC,SAAU,IACL6rC,EAAS7rC,SACZktC,0BAAgD,QAArBkH,EAC3B1M,WAAYoF,EACZa,WAAY,CACV1tE,KAAMo0E,GAERjtB,eAAgB,IACXykB,EAAS7rC,SAASonB,eACrBogB,qBAAsB,CACpBp+E,GAAI3C,OAAOu5C,GAAU52C,KAAO,GAC5BC,KAAM8yG,EACNt0F,YAAaqrE,GACX1U,EACAx+B,GAAUn4B,aAAe,GACzBmsE,GAEFxH,iBAAkBhO,EAClBhnE,QAAS08E,KAIf3G,YAAa0S,EACbjR,YAAayf,GAGXjwB,IAAcmH,GAAcxe,0BACvB62C,EAAWh+D,SAASonB,gBAAgBogB,sBAAsBhwE,QAE9Dy7E,GAAcjzC,KACjBg+D,EAAWh+D,SAAS2tC,WAAa,CAAC,GAGpC7vD,EAAKmgF,SAAS7qB,GAAa+oB,EAAUhoB,IACrCr2D,EAAKkyC,QAAQguC,GACblgF,EAAKirB,SAAS,CAAEizB,UAAU,IAC1B8H,EAAW/6B,SAAS,IAAK+6B,EAAWI,WAAYlI,UAAU,IAC1DunB,IACAzf,EAAWwD,WAAWnnC,eAEhB/J,QAAQqd,SAAS,EAUrB55B,aAAckiF,EACd3mE,aAAck2B,GACdhiE,MAAO6J,EAAE,cAGf,CC9NA,MAAM+qG,IAAkBvvG,EAAAA,EAAAA,IAAOwvG,GAAAA,KAAkBtvG,WAAA,CAAAC,YAAA,qBAAzBH,CAAyB,yCAK1C,SAASyvG,KACd,MAAM,EAAEjrG,IAAMC,EAAAA,EAAAA,MACRirG,ECRD,WACL,MAAMv6B,GAAaC,EAAAA,GAAAA,QACb,YAAEI,GAAgBL,EAAWI,WAUnC,OARa5zE,EAAAA,EAAAA,UAA+B,KAC1C,MAAMguG,EAAan6B,GAAeA,EAAY,GAE9C,GAAIm6B,EACF,OAAOx6B,EAAWq0B,YAAYmG,EAChC,GACC,CAACx6B,EAAYK,GAGlB,CDLuBo6B,IACf,YAAEtpB,GAAgBhR,KAExB,IAAKgR,EAAa,OAAO,KAEzB,MAAMupB,EAAc,CAClBhhG,KAAKvR,EAAAA,EAAAA,KAAC6vG,GAAa,IACnBzY,KAAMgb,IAAgBpyG,EAAAA,EAAAA,KAACqwG,GAAc,CAACx+E,KAAMugF,IAC5CtlE,KAAMslE,IAAgBpyG,EAAAA,EAAAA,KAAC62F,GAAmB,CAAChlE,KAAMugF,KAGnD,OACEpyG,EAAAA,EAAAA,KAACiyG,GAAe,CACd,aAAY/qG,EAAE,oBACd,UAAQ,4BACRsrG,WAAS,EACTC,MAAI,EAAAvyG,SAEHqyG,EAAYvpB,IAGnB,C,+DErBO,SAAS0pB,KACd,MAAM,EAAExrG,IAAMC,EAAAA,EAAAA,MACRiO,GAAWC,EAAAA,GAAAA,MACXk6C,EAAcyT,KACd50D,EAAerD,KACfiwD,EAAerW,KACf8hD,EAAkBL,KAExB,OAAO13F,UACL,MAAMikG,EA0DH,SAA2BhtB,GAChC,MAAsB,iBAAlBA,EAASliF,KACJguD,EAAM,kBAAkBk0B,EAASxoF,GAAGqhB,qBAChB,0BAAlBmnE,EAASliF,KACXguD,EAAM,2BAA2Bk0B,EAASxoF,GAAGqhB,0BAEpD,CAEJ,CAlE2Bo0F,CAAkBjtB,GAEzC,IAAKgtB,EACH,OAAOxoE,QAAQ0oE,OAAO,IAAIvuF,MAAM,4CAGlC,IAGE,IAwBiCgjE,QA1BNj4B,GAA2BsjD,IA4B5C9sB,0BACXyB,EAAW7F,yBACX6F,EAAWzF,qCACXyF,EAAWvF,qBACXuF,EAAW1C,+BACX0C,EAAWtF,yBACXsF,EAAWpF,+BACXoF,EAAWlF,wBACXkF,EAAWlD,sBACXkD,EAAWjF,qBACXiF,EAAW/E,0BACX+E,EAAW7E,yBACX6E,EAAW3E,oBACX2E,EAAW1E,uBACX0E,EAAW3F,yBACX2F,EAAWxE,0BACZwE,EAAWwrB,8BACVxrB,EAAWkiB,gBACVliB,EAAWyrB,2BAA6E,IAAhDzrB,EAAWyrB,0BAA0BvvG,QAC7E8jF,EAAW0rB,2BAA6E,IAAhD1rB,EAAW0rB,0BAA0BxvG,OA1CtE,CACL,MAAMyvG,EACc,0BAAlBttB,EAASliF,KACLm3D,GAASs4C,gCACTt4C,GAASu4C,qBAEfn4C,EAAai4C,EAAU,CACrB5uD,OAAQ,CAAElnD,GAAIwoF,EAASxoF,KAE3B,KAZ0C,CACxC,MAAMi2G,QAAkB7jD,EAAYojD,EAAgB,CAAC,GACrDv9F,EAASqxF,EAAgB2M,GAC3B,CAUF,CAAE,MAAOpmG,GACPoB,EAAazD,SAAS,CACpBtH,QAAS,SACThG,MAAO6J,EAAE,6BACThH,SAAU8M,aAAiBsX,OAAStX,EAAMK,QAC1C9B,QAAS,KAEb,CAIG,IAAgC+7E,CAJnC,CAEJ,CCfO,MAAM+rB,IAAgBnqB,EAAAA,GAAAA,MAAS,KACpC,MAAM,EAAEhiF,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACfv2C,EAAerD,MACb5N,GAAI4gF,IAAe1gB,EAAAA,GAAAA,KACrBwa,GAAaC,EAAAA,GAAAA,QACb,iBAAEkJ,GAAqBnJ,EAAWI,YAEjCrqC,EAAc0lE,IAAmB53G,EAAAA,EAAAA,WAAkB,IACnD63G,EAAyBC,IAA8B93G,EAAAA,EAAAA,WAAkB,IAE1E,aAAEmtF,GAAiB7Q,KACnBy7B,EAAa31B,GAAkBC,GAAc,IAE7C21B,EAAa77B,EAChBoM,cACAt8D,MAAMuvB,GAAYA,EAAQ+gC,WAA4BlI,WAEnD4jC,GAAe73G,EAAAA,EAAAA,cAAY,KAC3B43G,EACFF,GAA2B,GAG7Bx4C,EAAaJ,GAAS06B,2BAA4B,CAChDjxC,OAAQ,CAAElnD,GAAI4gF,IACd,GACD,CAAC/iB,EAAc+iB,EAAY21B,IAE9B,OACEpuG,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACmuB,GAAAA,EAAW,CAAC6rB,MAAO,CAAE3vC,QAAS,aAAcnK,UAC3CF,EAAAA,EAAAA,KAAC+a,GAAAA,EAAK,CAACC,aAAa,KAAI9a,UACtBoF,EAAAA,EAAAA,MAAC6E,EAAAA,EAAI,CAAAjK,SAAA,EACHF,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAC,UAAQ,eAActK,SAAEgH,EAAE,0BACpClH,EAAAA,EAAAA,KAACgI,EAAAA,EAAO,CACN6Z,YAAa,CACXxX,QAAS,eAGbrK,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAC,UAAQ,cAAatK,SAAE8gF,GAAkB5jF,eAIzD4C,EAAAA,EAAAA,KAACmuB,GAAAA,EAAW,CACV6rB,MAAO,CAAE3vC,QAAS,cAClBmsB,WAAY,CAAEnsB,QAASw+E,EAAe,SAAW,WAAY3oF,UAE7DF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACL,UAAQ,oCACRlC,QAAQ,QACRH,MAAMlD,EAAAA,EAAAA,KAAC4zG,GAAAA,GAAS,IAChB,aAAY1sG,EAAE,SACdP,QAASgtG,OAGb3zG,EAAAA,EAAAA,KAAC++B,GAAAA,EAAK,CACJ1hC,MAAO6J,EAAE,4BACT,UAAQ,mCACRujC,iBAAiB,UACjB5kC,OAAQ0tG,EACRlwG,QAAQ,QACRkJ,QAASA,IAAMinG,GAA2B,GAC1ClwG,QAAS,EACPtD,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAEL,UAAQ,gBACRlC,QAAQ,UACR+lB,UAAWwkB,EACXjnC,QAASA,MACP+H,iBACE4kG,GAAgB,GAChB,UACQG,IACNrlG,EAAazD,SAAS,CACpBtH,QAAS,UACThG,MAAO6J,EAAE,0CACTqE,QAAS,KAEb,CAAE,MAAOyB,GACP,MAAM,cAAEmX,EAAa,YAAEC,GAAgBi7C,GAAgBryD,GACvDoB,EAAazD,SAAS,CACpBtH,QAAS,SACThG,MAAO6J,EAAE,wCACThH,UACEoF,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,CACGikB,GAAepd,KAAK+H,GAAQA,EAAIzB,UAChC+W,GAAard,KAAK+H,GAAQA,EAAIzB,cAIvC,CACAimG,GAAgB,GAChBE,GAA2B,EAC7B,CACKK,EAAwB,EAC7B3zG,SAEDgH,EAAE,kBAjCC,kBAmCNlH,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAEL,UAAQ,sBACRlC,QAAQ,SACRsD,QAASA,KACPq0D,EAAaJ,GAAS06B,2BAA4B,CAChDjxC,OAAQ,CAAElnD,GAAI4gF,IACd,EACF79E,SAEDgH,EAAE,wBATC,wBAWNhH,SAEDgH,EAAE,2EAEJ,IAIM4sG,IAA4B5qB,EAAAA,GAAAA,MAAS,KAChD,MAAM,EAAEhiF,IAAMC,EAAAA,EAAAA,MACR2xD,EAASvC,KACTnoD,EAAerD,MACb5N,GAAI4gF,IAAe1gB,EAAAA,GAAAA,KACrBwa,GAAaC,EAAAA,GAAAA,QACb,iBAAEkJ,EAAgB,KAAEiW,EAAI,SAAElnB,GAAa8H,EAAWI,YAEjD87B,EAAaC,IAAkBt4G,EAAAA,EAAAA,WAAkB,IACjDkyC,EAAc0lE,IAAmB53G,EAAAA,EAAAA,WAAkB,IAEpD,aAAEmtF,EAAY,iBAAED,GAAqB5Q,MACrC,YAAE4D,GAAgBjC,KAClB85B,EAAa31B,GAAkBC,GAAc,IAC7C4Y,EAAS+b,KAETt3B,EAAQvD,EACXwD,WACAyD,WACA3gF,QAAQ01D,GAAMA,EAAE4oB,aAAe5oB,EAAE2mB,UAAYf,KAE1Cw6B,GAAuBn4G,EAAAA,EAAAA,cAAY4S,gBACjCioF,EAAO3V,EAAiB,GAC7B,CAAC2V,EAAQ3V,IAEZ,OACE17E,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,CACG2oF,IAAgB7oF,EAAAA,EAAAA,KAACqzG,GAAa,IAC9Bpc,GAAMG,OACL9xF,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACmuB,GAAAA,EAAW,CAAAjuB,UACVF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACL,UAAQ,mCACRrC,MAAMlD,EAAAA,EAAAA,KAAC4qC,GAAAA,GAAe,IACtBttC,MAAO4J,EAAE,QACTnG,YAAagvE,EACb3mD,UAAWwkB,EACXjnC,QAASA,MACP+H,iBACE4kG,GAAgB,GAChB,UACQG,IACNrlG,EAAazD,SAAS,CACpBtH,QAAS,UACThG,MAAO6J,EAAE,0CACTqE,QAAS,KAEb,CAAE,MAAOyB,GACP,MAAM,cAAEmX,EAAa,YAAEC,GAAgBi7C,GAAgBryD,GACvDoB,EAAazD,SAAS,CACpBtH,QAAS,SACThG,MAAO6J,EAAE,wCACThH,UACEoF,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,CACGikB,GAAepd,KAAK+H,GAAQA,EAAIzB,UAChC+W,GAAard,KAAK+H,GAAQA,EAAIzB,cAIvC,CACAimG,GAAgB,EAClB,CACKO,EAAwB,EAC7B3zG,SAEDgH,EAAE,aAGPlH,EAAAA,EAAAA,KAACmuB,GAAAA,EAAW,CAAAjuB,UACVF,EAAAA,EAAAA,KAAC2pF,GAAa,UAIpB3pF,EAAAA,EAAAA,KAACmuB,GAAAA,EAAW,CAAC,UAAQ,oCAAmCjuB,UACtDF,EAAAA,EAAAA,KAAC4F,EAAAA,EAAQ,CACPG,aAAeF,GAAoBmuG,EAAenuG,GAClDC,SAAUA,IAAMkuG,GAAgBD,GAChCluG,OAAQkuG,EACRztG,OAASC,IACPvG,EAAAA,EAAAA,KAACwG,EAAAA,EAAU,CACTC,IAAKF,EACLG,UAAU,eACVC,QAASA,IAAMqtG,GAAgBD,GAC/B1wG,QAAQ,QAAOnD,UAEfF,EAAAA,EAAAA,KAAC6G,EAAAA,GAAa,MAEhB3G,UAEFoF,EAAAA,EAAAA,MAACwB,EAAAA,EAAY,CAAA5G,SAAA,EACXF,EAAAA,EAAAA,KAACuH,EAAAA,EAAY,CACXrE,MAAMlD,EAAAA,EAAAA,KAACoZ,GAAAA,EAAmB,IAC1B,UAAQ,yBACRtR,GAAI+wD,GAAcC,EAAQ,sBAC1Bn9B,OAAO,SAAQz7B,SAEdgH,EAAE,mBAEJ+vF,GAAM3jF,QACLtT,EAAAA,EAAAA,KAACuH,EAAAA,EAAY,CACX2sG,aACEnkC,GAA6B,IAAjBqL,EAAM53E,OACd,CACEvB,QACIiF,EADK6oE,EACH,qCACA,qDAERpuE,EAEN8D,eAAiC,IAAjB21E,EAAM53E,QAAgBusE,EACtC,UAAQ,qCACRppE,QAASA,KAAWstG,GAAuB,EAC3C/wG,MAAMlD,EAAAA,EAAAA,KAACm0G,GAAAA,GAAU,IAAIj0G,SAEpBgH,EAAE,qBAGN+vF,GAAMG,OACL9xF,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACgI,EAAAA,EAAO,KACRhI,EAAAA,EAAAA,KAACuH,EAAAA,EAAY,CACX9B,eAAiC,IAAjB21E,EAAM53E,OACtB0wG,aACmB,IAAjB94B,EAAM53E,OACF,CAAEvB,QAASiF,EAAE,oDACbvF,EAEN,UAAQ,yCACRgF,QAASA,IAAMi1E,EAAYR,GAC3B9zE,UAAQ,EACRpE,MAAMlD,EAAAA,EAAAA,KAAC4pE,GAAAA,GAAe,IAAI1pE,SAEzBgH,EAAE,iCAOflH,EAAAA,EAAAA,KAACmuB,GAAAA,EAAW,CAACtsB,MAAO,CAAE0T,UAAW,UAAWrV,UAC1CoF,EAAAA,EAAAA,MAAA,OAAK,UAAQ,0CAAyCpF,SAAA,CACnDgH,EAAE,eAAe,KAAClH,EAAAA,EAAAA,KAACo0G,GAAAA,EAAK,CAACC,QAAM,EAAAn0G,SAAEk7E,EAAM53E,QAAU,UAGtDxD,EAAAA,EAAAA,KAACmuB,GAAAA,EAAW,CAAC6rB,MAAO,CAAE3vC,QAAS,cAAenK,UAC5CF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACL,UAAQ,8CACRlC,QAAQ,QACR,aAA2B6D,EAAf2hF,EAAiB,WAAgB,UAC7CliF,QAASiiF,EACT1lF,MACElD,EAAAA,EAAAA,KAACoF,EAAAA,EAAI,CAAC7J,KAAK,KAAI2E,SACZ2oF,GACC7oF,EAAAA,EAAAA,KAACs0G,GAAAA,GAAe,CACd,UAAQ,uCACR,aAAYptG,EAAE,eAGhBlH,EAAAA,EAAAA,KAACu0G,GAAAA,GAAa,CACZ,UAAQ,qCACR,aAAYrtG,EAAE,oBAOzB,IC9TA,SAASstG,GAAoB13G,GAKlC,MAAM,SAAEy0E,EAAQ,eAAEsD,EAAc,cAAErD,GAAkB10E,EACpD,OACEkD,EAAAA,EAAAA,KAACq3E,GAAkB,CACjBt1D,gBAAgB,SAChBwvD,SAAUA,EACVsD,eAAgBA,EAChBrD,cAAeA,GAGrB,CAEO,SAASijC,GAAsB33G,GACpC,MAAM,WAAEu1G,GAAev1G,GACfojB,KAAMqxD,GAAalb,GAAqB5E,EAAM,cAAe4gD,IAC/D,eAAEx9B,EAAc,cAAErD,GAAkBE,GAAmB2gC,GAE7D,OAAO9gC,GACLjsE,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACy2F,GAAa,CAAClqF,QAASzP,EAAMyP,QAASlP,MAAOk0E,EAASnC,YACvDpvE,EAAAA,EAAAA,KAACw0G,GAAmB,CAClBjjC,SAAUA,EACVsD,eAAgBA,QAAkClzE,EAClD6vE,cAAeA,OAGjB,IACN,CCrCO,MAAMkjC,GAAsCA,EAAGx9D,cACpD,MAAMh3B,EAAOg3B,EAAQuyB,UACrB,OAAOzpE,EAAAA,EAAAA,KAAC20G,GAAAA,IAAW,CAACz9D,QAASA,KAAah3B,GAAQ,EC+B9C00F,IAAiBlyG,EAAAA,EAAAA,IAAOkpE,IAAOhpE,WAAA,CAAAC,YAAA,qBAAdH,CAAc,gEAM/B+oG,IAAe/oG,EAAAA,EAAAA,IAAOgpG,GAAAA,KAAe9oG,WAAA,CAAAC,YAAA,qBAAtBH,CAAsB,mEAMrCorG,GAA6CA,CAACh/B,EAAiBrrE,KACnE,GACO,UADCA,EAEJ,OAAOsqG,GAAAA,IAEP,OAAQj/B,GACN,KAAKk/B,GAAAA,IAAU5kB,MACb,OAAO6kB,EAAAA,GAAAA,MAAAA,CAAcC,GAAAA,KACvB,KAAKF,GAAAA,IAAUn8E,KACb,OAAOs8E,EAAAA,GAAAA,MAAAA,CAAgB3kC,IACzB,KAAKwkC,GAAAA,IAAUxxB,KACb,OAAOk4B,GACT,QACE,OAER,EAKF,SAASG,GAAar4B,GACpB,OAAQA,GACN,IAAK,cAKL,QACE,OAAOs4B,GAAAA,IAAUzqG,QAJnB,IAAK,SACL,IAAK,WACH,OAAOyqG,GAAAA,IAAUC,OAIvB,CACA,SAASC,GAAcx4B,GACrB,OAAQA,GACN,IAAK,cAML,QACE,OAAOnE,GAAAA,IAAWhuE,QALpB,IAAK,SACH,OAAOguE,GAAAA,IAAWptC,QACpB,IAAK,WACH,OAAOotC,GAAAA,IAAW/vE,OAIxB,CAEO,MAAM2sG,GAAqBn4G,IAChC,MAAM,KAAEo4G,GAASp4G,GACVo7E,EAAa4Y,IAAkBp1F,EAAAA,EAAAA,UAAmB,KAClDy5G,EAAYC,IAAiB15G,EAAAA,EAAAA,UAA4B,CAC9D+H,KAAM,GACN23E,MAAO,GACPi6B,MAAO,GACP7rE,SAAU,KAELA,EAAUC,IAAe/tC,EAAAA,EAAAA,UAAiB,IAC1C0tB,EAAW46C,IAAgBtoE,EAAAA,EAAAA,WAAkB,IAC7C45G,EAAYC,IAAiB75G,EAAAA,EAAAA,WAAkB,GAChD85G,GAAgBx/F,EAAAA,EAAAA,UAChB6hE,EAAa29B,EAAcp/F,QAc3BqzD,GAAkBplE,EAAAA,EAAAA,UAAQ,IAAM,IAAIswC,OAAO,IAAIC,IAAI,oBAAkC,KAW3F74C,EAAAA,EAAAA,YAAU,KACR,MAAMoa,EAXR,SAAkBs/F,GAChB,MAAMzuF,EAAW0uF,GAAAA,OAUM,kBAVc7jF,OACrC,OAAO7K,EAAYA,EAAyBgU,wBAAwB7kB,MAAQ,IAC9E,CAQgBw/F,GACRr/F,EAPR,SAAmBm/F,GACjB,MAAMzuF,EAAW0uF,GAAAA,OAMQ,kBANY7jF,OACrC,OAAO7K,EAAYA,EAAyBgU,wBAAwB1kB,OAAS,GAC/E,CAIiBs/F,GACXj6G,OAAOg5C,QACT80B,EAAQosC,YAAY,CAClBz6B,MAAO85B,EAAK95B,MACZi6B,MAAOH,EAAKG,MACZl/F,MAAOA,EACPG,OAAQA,GAEZ,GAEC,KAEHva,EAAAA,EAAAA,YAAU,KAMJJ,OAAOg5C,SACT80B,EAAQqsC,UAAY,SAA2BhuF,GAC7C,OAAQA,EAAM5H,KAAKzc,MACjB,IAAK,OACH,OA3CV,SAAwB+lC,GACtB,MAAMusE,EAA4BpoG,KAAK4Q,MAAiB,IAAXirB,GAC7CC,EAAYssE,GACZvqG,YAAW,IAC0Bw4D,EAAN,MAAtB+xC,IACN,IACL,CAqCiBC,CAAeluF,EAAM5H,KAAKspB,UACnC,IAAK,MACH,OAXkBtpB,EAWM4H,EAAM5H,KAVpCk1F,GAAc,KAAM,IAAMl1F,WAE1BupD,EAAQwsC,YASJ,QACE,OAAO,EAbf,IAA0B/1F,CAexB,EACF,GACC,CAACupD,KAEJ1tE,EAAAA,EAAAA,YAAU,KACR,MAQMm6G,EAAgB,IAAI5H,GAAAA,IAC1B4H,EAAc1H,yBAAyBV,IAEvCoI,EAAcj6G,iBAAiBk6G,GAAAA,IAAiBrlB,GAEhDolB,EAAcj7B,UAbO,CACnBG,MAAO,GACPJ,MAAO,GACPoO,MAAO,CACLjsF,GAAI,KACJsG,KAAM,WAQqB,GAE/B+xG,EAAcp/F,QAAU8/F,CAAa,GACpC,KAEHn6G,EAAAA,EAAAA,YAAU,KACR,MA8BMk3C,EAAe,CACnBmoC,MA/ByB+5B,EAAW/5B,MAAMr0E,KAAK8sD,IACxC,CACL12D,GAAI02D,EAAE12D,GACNkjB,EAAGwzC,EAAExzC,EACLpB,EAAG40C,EAAE50C,EACLxb,KAAMowD,EAAE0e,UACRj1E,MAAOu2D,EAAEub,SACTj5D,MA7Hc,GA8HdG,OA9Hc,GA+Hd+4F,MAAOC,GAAAA,IAAU8G,KACjBl2F,KAAM,CACJipD,SAAUtV,EAAE0e,UACZzI,WAAYjW,EAAE8e,gBAoBlBqI,MAhByBm6B,EAAWE,MAAMtuG,KAAKklC,IACxC,CACL9uC,GAAI,QAAQ8uC,EAAEpS,OAAOu1C,YAAYnjC,EAAEtQ,OAAOyzC,WAC1C3rE,KAAM,OACNo2B,OAAQoS,EAAEpS,OAAO18B,GACjBw+B,OAAQsQ,EAAEtQ,OAAOx+B,GACjBk5G,UAAWxB,GAAa5oE,EAAEqqE,YAC1Bp2F,KAAM,CACJ64D,kBAAmBi8B,GAAc/oE,EAAEqqE,YACnC99B,UAAWw8B,GAAc/oE,EAAEqqE,kBAS5Bz+B,IAGLA,EAAWoD,UAAUhoC,GAAO,IAC5B3yC,EAAAA,GAAAA,MAAO,IAAMu3E,EAAWwD,WAAW0xB,IAAI,KAAvCzsG,GAA6C,GAC5C,CAAC60G,EAAYt9B,IAChB,MAAM,EAAE3wE,IAAMC,EAAAA,EAAAA,MAEd,OAAK0wE,GAIH73E,EAAAA,EAAAA,KAAC4vG,GAAAA,IAAqB,CAAC/3B,WAAYA,EAAW33E,UAC5CoF,EAAAA,EAAAA,MAACmmG,GAAY,CACXtuG,GAAG,gBACHo5G,kBAAgB,EAChBrJ,YAAah1B,EAAY10E,OAAS,EAClCgzG,QACEt+B,EAAY10E,OAAS,IACnBxD,EAAAA,EAAAA,KAACiyG,GAAAA,IAAe,CACd,UAAQ,mBACR,aAAY/qG,EAAE,yBACdurG,MAAI,EACJD,WAAS,EAAAtyG,UAETF,EAAAA,EAAAA,KAACy0G,GAAqB,CACpBloG,QAASA,IAAMukF,EAAe,IAC9BuhB,WAAYn6B,EAAY,OAKhCo0B,YACGljF,IACCppB,EAAAA,EAAAA,KAACusG,GAAAA,IAAkB,CACjBC,gBAAgBC,EAAAA,GAAAA,KAA6B,IACxCC,GAAAA,IACHC,gBAAgBrsG,EAAAA,GAAAA,MAAO,KACrBu3E,EAAWwD,WAAWuxB,QAAQ,EAAI,EAAE,IAEtCC,iBAAiBvsG,EAAAA,GAAAA,MAAO,KACtBu3E,EAAWwD,WAAWuxB,QAAQ,IAAK,IAErCE,qBAAqBxsG,EAAAA,GAAAA,MAAO,KAC1Bu3E,EAAWwD,WAAW0xB,IAAI,GAAG,IAE/BC,mBAAmB1sG,EAAAA,GAAAA,MAAO,KACxBu3E,EAAWwD,WAAW6mB,QACtBrqB,EAAWwD,WAAWnnC,QAAQ,IAEhC93B,QAAQ,EACR6wF,eAlKd,WACEsI,GAAeD,EACjB,MAoKOp1G,SAAA,EAEDF,EAAAA,EAAAA,KAACmtG,GAAAA,IAAoB,CAACptG,MAAO,CAAEm4E,iBAC9B9uD,IAAappB,EAAAA,EAAAA,KAAC40G,GAAc,CAACluG,UAAU,sBAAsB8iC,SAAUA,IACvE8rE,IAAct1G,EAAAA,EAAAA,KAAC2qE,GAAM,SAlDnB,IAoDiB,E,gBCnRrB,SAAS8rC,GAAuB35G,GAKrC,MAGM,aAAE45G,EAAY,UAAEC,EAAS,MAAEt5G,GAAUP,EAE3C,OACEkD,EAAAA,EAAAA,KAACu3B,GAAgB,CACfr0B,KAAM0zG,GAAAA,GACNv5G,MAAOA,GAPU,yBAQjBue,aACEtW,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,CACGw2G,GAXmB,iEAYpB12G,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,SACC22G,MAKX,CCjBO,SAASE,KACd,MAAM,EAAE3vG,IAAMC,EAAAA,EAAAA,MACR2xD,EAASvC,MAET,KAAEr2C,EAAI,MAAElT,GAAUipD,GAAuBxE,EAAM,yBAAqB9vD,EAAW,CACnFm1G,gBAAiB,IAGbC,EAA4E,MAA1D/pG,GAA2CshD,WAEnE,OACEhpD,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,iBACT0U,YAAa1U,EACX,4FAEF+5C,eAAgB/5C,EAAE,iBAClB85C,UAAW95C,EACT,4FAEFg6C,aAAc2X,GAAcC,EAAQ,cAErCi+C,GACC/2G,EAAAA,EAAAA,KAACy2G,GAAsB,CAACp5G,MAAO6J,EAAE,wDAC/B8F,GACFhN,EAAAA,EAAAA,KAAC22B,GAAe,IAEhBzW,IAAQlgB,EAAAA,EAAAA,KAACi1G,GAAiB,CAACC,KAAMh1F,MAIzC,CCtCO,SAAS82F,GAAiBl6G,GAM/B,MAAM,OAAE2b,EAAM,gBAAE7a,EAAe,YAAEge,EAAW,MAAEve,GAAUP,EAOxD,OACEkD,EAAAA,EAAAA,KAACu3B,GAAgB,CACfl6B,MAAOA,GAJU,mBAKjBue,YAAaA,GANf,2EAOE1Y,KAAMqkC,GAAAA,GACN9uB,OACE7a,GACEoC,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAACoB,QAAS/I,EAAiByF,QAAQ,OAAMnD,SAC7CuY,GAbW,2BAeZ9W,GAIZ,C,4BC9BO,IAAKs1G,GAAO,SAAPA,GAAO,OAAPA,EAAO,wBAAPA,EAAO,kBAAPA,CAAO,MCEZ,MCyBDC,GAAyBA,EAAG72F,IAAGpB,IAAGk4F,yBAAwBr6G,UACjD6E,IAAN0e,QAAyB1e,IAANsd,GAExBjf,EAAAA,EAAAA,KAACk3B,GAAAA,GAAqB,CAAC7W,EAAGA,EAAI,EAAGpB,EAAGA,EAAI,KAAOniB,KAAWA,EAAMw7D,SAC9D,KAGO8+C,GAAmBC,IACvB,IACFC,GAAAA,GACHC,WAAY,IACPD,GAAAA,GAAUC,WACbC,aAAeC,GACbC,KAAKC,eAAe,KAAM,CAAEC,KAAM,YAAanlG,OAAO,IAAIb,KAAK6lG,IACjEI,cAAgBJ,GACdC,KAAKC,eAAe,KAAM,CAAEG,MAAO,SAAUrlG,OAAO,IAAIb,KAAK6lG,OAC5DJ,GAAmBE,YAExBQ,YAAa,IACRT,GAAAA,GAAUS,eACVV,GAAmBU,aAExBpxG,QAAS,IACJ2wG,GAAAA,GAAU3wG,WACV0wG,GAAmB1wG,SAExBqxG,cAAe,CACbC,YAAaf,MAkBNp4F,GAAmBA,EAAGq2B,SAAQj1B,OAAMm3F,wBAC/C,MAAMa,EAAmC,IAElCC,EAAWC,IAAgB18G,EAAAA,EAAAA,UAAoB,CACpD28G,OAAQ,GACRj8F,OAAQ,KAWV,OALArgB,EAAAA,EAAAA,YAAU,KACRq8G,EAzBsBE,EAACH,EAAsBI,EAA8B,MAAE,IAC5EJ,EACHE,OAAQF,EAAUE,OAAOtxG,KAAKsxG,IAAsB,IAC/CA,EACHp1F,UACKo1F,EAAOG,MAAM,GAAGr7G,KAAQk7G,EAAOG,MAAM,GAAGC,UACzCF,EAAkBhwG,SAClBsB,OAAO4kD,UAAUsF,eAAeC,KAAKqkD,EAAOG,MAAM,GAAI,WAAWh6F,YAC/D3U,OAAO4kD,UAAUsF,eAAeC,KAAKqkD,EAAOG,MAAM,GAAI,MAAMh6F,mBAiBrD85F,CD5DgBz0G,KAC/B,MAAMqc,EAAkB,CACtBm4F,OAAQ,GACRj8F,OAAQ,IASV,OALEvY,EAAOJ,KADL,UAAWI,EACCozG,GAAQyB,QAERzB,GAAQ0B,WAGhB90G,EAAOJ,MACb,KAAKwzG,GAAQyB,QACXx4F,EAAKm4F,OApC0Bn4F,KACnC,MAAM,MAAE04F,GAAU14F,EACZ4Y,EAA0B,GAiBhC,OAhBA8/E,EAAMx/E,SAASiC,IAEbA,GAAIvC,OAAOM,SAAQ,CAAC/c,EAAMw8F,KACnB//E,EAAM+/E,KACT//E,EAAM+/E,GAAO,CACXL,MAAO,GACPv1F,QAAQ,EACR7lB,MAAM07G,EAAAA,GAAAA,OAGVhgF,EAAM+/E,GAAKL,MAAMz0G,KAAK,CACpBg1G,aAAc19E,EAAGtpB,QACdsK,GACH,GACF,IAEGyc,CAAK,EAiBMkgF,CAAqBn1G,GACnC,MACF,KAAKozG,GAAQ0B,WACXz4F,EAAKm4F,OAAS,CACZ,CACEG,MAAO30G,EAAOi1B,OAASj1B,EAAOo1G,MAAM78F,QAAU,GAC9C6G,QAAQ,EACR7lB,MAAM07G,EAAAA,GAAAA,OAkBd,OAZIj1G,EAAOo1G,MAAM78F,SACf8D,EAAK9D,OAASvY,EAAOo1G,KAAK78F,OAAOrV,KAAKsV,IACpC,MAAM2oB,EAAI9kB,EAAKm4F,OAAO7zG,MAAK,EAAGg0G,WACrBA,EAAMh0G,MAAK,EAAGrH,GAAI+7G,KAAcA,IAAY78F,EAAKlf,OAE1D,MAAO,IACFkf,EACHuB,UAAWonB,GAAKA,EAAE5nC,KAAO4nC,EAAE5nC,KAAO,GACnC,KAIE8iB,CAAI,ECqBsBi5F,CAAiBj5F,GAAOg4F,GAAwB,GAE9E,CAACh4F,KAGFlgB,EAAAA,EAAAA,KAACo5G,GAAAA,GAAY,CACXjkE,OAAQA,EACRmiE,UAAW,IACNF,GAAgBC,IAErBgC,UAAW,CAAClB,EAfUmB,IACxBlB,EAAakB,EAAa,IAexB,ECpFOC,GACVpkE,GACAr4C,IAQC,IAAKA,EACH,OAAOq4C,EAET,IAAIqkE,EAAiBppG,KAAKa,UAAUkkC,GAOpC,OANAtrC,OAAOwmD,QAAQvzD,GAAOs8B,SAASgE,IAC7B,MAAMq8E,EAAS,IAAI/0D,OAAO,OAAOtnB,EAAI,KAAM,KAE3Co8E,EAAiBA,EAAe7+G,QAAQ8+G,EAAQ,GAAGr8E,EAAI,KAAK,IAGvDhtB,KAAKC,MAAMmpG,EAAe,ECjCxBE,GAAqB7lD,GACd,IAAI6jD,KAAKiC,aAAa,QAAS,CAC/C93G,MAAO,WACP+3G,SAAU,QAGKnnG,OAAOohD,GCMpBgmD,GAAmEA,KACvE,MAAM,EAAE3yG,IAAMC,EAAAA,EAAAA,MACd,OACE7B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAA,KAAAE,UACEF,EAAAA,EAAAA,KAAA,UAAAE,SAASgH,EAAE,6BAEblH,EAAAA,EAAAA,KAAA,KAAAE,UACEF,EAAAA,EAAAA,KAAC85G,EAAAA,GAAK,CAAA55G,SAAC,8bAQTF,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,KAAAE,SAAIgH,EAAE,iDACNlH,EAAAA,EAAAA,KAACi3E,GAAAA,EAAS,CAAA/2E,UACRF,EAAAA,EAAAA,KAACk3E,GAAAA,EAAa,CAAAh3E,SACXgH,EACC,8OAINlH,EAAAA,EAAAA,KAAA,UAEAA,EAAAA,EAAAA,KAAA,KAAAE,SAAIgH,EAAE,qDACNlH,EAAAA,EAAAA,KAACi3E,GAAAA,EAAS,CAAA/2E,UACRF,EAAAA,EAAAA,KAACk3E,GAAAA,EAAa,CAAAh3E,SACXgH,EACC,kIAINlH,EAAAA,EAAAA,KAAA,UAEAA,EAAAA,EAAAA,KAAA,KAAAE,SAAIgH,EAAE,qDACNlH,EAAAA,EAAAA,KAACi3E,GAAAA,EAAS,CAAA/2E,UACRF,EAAAA,EAAAA,KAACk3E,GAAAA,EAAa,CAAAh3E,SAAEgH,EAAE,6DAEpBlH,EAAAA,EAAAA,KAAA,WACC,EAID+5G,GAAsEA,KAC1E,MAAM,EAAE7yG,IAAMC,EAAAA,EAAAA,MACd,OACE7B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAA,KAAAE,UACEF,EAAAA,EAAAA,KAAA,UAAAE,SAASgH,EAAE,uCAEblH,EAAAA,EAAAA,KAAA,KAAAE,UACEF,EAAAA,EAAAA,KAAC85G,EAAAA,GAAK,CAAA55G,SAAC,0JAKTF,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,KAAAE,SAAIgH,EAAE,mEACNlH,EAAAA,EAAAA,KAACi3E,GAAAA,EAAS,CAAA/2E,UACRF,EAAAA,EAAAA,KAACk3E,GAAAA,EAAa,CAAAh3E,SACXgH,EACC,uGAINlH,EAAAA,EAAAA,KAAA,WACC,EAIDg6G,GAAwEA,KAC5E,MAAM,EAAE9yG,IAAMC,EAAAA,EAAAA,MACd,OACE7B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAA,KAAAE,UACEF,EAAAA,EAAAA,KAAA,UAAAE,SAASgH,EAAE,mCAEblH,EAAAA,EAAAA,KAAA,KAAAE,UACEF,EAAAA,EAAAA,KAAC85G,EAAAA,GAAK,CAAA55G,SAAC,2HAKTF,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,KAAAE,SAAIgH,EAAE,kDACNlH,EAAAA,EAAAA,KAACi3E,GAAAA,EAAS,CAAA/2E,UACRF,EAAAA,EAAAA,KAACk3E,GAAAA,EAAa,CAAAh3E,SACXgH,EAAE,0FAGPlH,EAAAA,EAAAA,KAAA,WACC,EAIMi6G,GAA8DA,KACzE,MAAOp0G,EAAQ2e,IAAa9oB,EAAAA,EAAAA,WAAS,IAC/B,EAAEwL,IAAMC,EAAAA,EAAAA,MAEd,OACE7B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLlC,QAASuB,EAAAA,GAAc4P,KACvB7N,QAASA,IAAM6d,GAAU,GACzBthB,MAAMlD,EAAAA,EAAAA,KAACkuE,GAAAA,GAAc,IACrB,UAAS,4BAA4BhuE,SAEpCgH,EAAE,yBAEL5B,EAAAA,EAAAA,MAACy5B,GAAAA,EAAK,CACJ1hC,MAAO6J,EAAE,sBACT,UAAS,2BACTrB,OAAQA,EACR0G,QAASA,IAAMiY,GAAU,GACzBnhB,QAAS27B,GAAAA,EAAaC,OACtB37B,QAAS,EACPtD,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAELlC,QAASuB,EAAAA,GAAcC,QACvB8B,QAASA,IAAM6d,GAAU,GACzB,UAAS,mCAAmCtkB,SAE3CgH,EAAE,UALC,WAONhH,SAAA,EAEFF,EAAAA,EAAAA,KAAA,KAAAE,UACEF,EAAAA,EAAAA,KAAC85G,EAAAA,GAAK,CAAA55G,SAAC,gbAQTF,EAAAA,EAAAA,KAAA,UAEAA,EAAAA,EAAAA,KAAC65G,GAAsB,KACvB75G,EAAAA,EAAAA,KAAA,UAEAA,EAAAA,EAAAA,KAAC+5G,GAAyB,KAC1B/5G,EAAAA,EAAAA,KAAA,UAEAA,EAAAA,EAAAA,KAACg6G,GAA2B,SAE7B,E,gBCnJP,MAAMhrF,IAAatsB,EAAAA,EAAAA,IAAOw3G,GAAAA,GAAat3G,WAAA,CAAAC,YAAA,oBAApBH,CAAoB,kBAIjCy3G,GAAcz/G,IAA4BA,IAAUA,EAAQ,EAAI0/G,IAAM1/G,EAS/D2/G,GAA4CA,EACvDC,aAAa,EACbC,qBAAqBA,KAAA,CAAS,GAC9BC,iBAAiB,EACjBhqE,YAAW,MAEX,MAAM,EAAEtpC,IAAMC,EAAAA,EAAAA,MACd,OACEnH,EAAAA,EAAAA,KAACka,GAAAA,EAAI,CAACw5C,SAAO,EAACj5C,WAAS,EAAAva,UACrBoF,EAAAA,EAAAA,MAACw9B,GAAAA,EAAQ,CAAA5iC,SAAA,EACPoF,EAAAA,EAAAA,MAAA,KAAApF,SAAA,CACGgH,EAAE,8BACHlH,EAAAA,EAAAA,KAAA,QACE6B,MAAO,CAEL4wC,SAAU,QACVljC,QAAS,SACTrP,SAEDgH,EAAE,8DAGP5B,EAAAA,EAAAA,MAAC0pB,GAAU,CAAA9uB,SAAA,EACTF,EAAAA,EAAAA,KAACqqG,GAAAA,EAAc,CAAAnqG,UACbF,EAAAA,EAAAA,KAACy6G,GAAAA,GAAc,OAEjBz6G,EAAAA,EAAAA,KAAC08C,GAAAA,GAAS,CACRv/C,GAAG,cAEHsG,KAAK,SACL,aAAW,cACX/I,MAAOkiD,MAAM09D,GAAc,GAAKA,EAAW97F,WAC3Clc,SAAWgO,GAAMiqG,EAAmB,cAAeJ,IAAY7pG,IAC/DvP,WAAYyvC,GALR,mBAQRxwC,EAAAA,EAAAA,KAAA,KAAG6B,MAAO,CAAEga,WAAY,QAAS3b,SAAEgH,EAAE,6BACrC5B,EAAAA,EAAAA,MAAC0pB,GAAU,CAAA9uB,SAAA,EACTF,EAAAA,EAAAA,KAACqqG,GAAAA,EAAc,CAAAnqG,UACbF,EAAAA,EAAAA,KAACy6G,GAAAA,GAAc,OAEjBz6G,EAAAA,EAAAA,KAAC08C,GAAAA,GAAS,CACRv/C,GAAG,kBAEHsG,KAAK,SACL,aAAW,kBACX/I,MAAOkiD,MAAM49D,GAAkB,GAAKA,EAAeh8F,WACnDlc,SAAWgO,GAAMiqG,EAAmB,kBAAmBJ,IAAY7pG,IACnEvP,WAAYyvC,GALR,0BASL,E,4BCtEJ,SAASkqE,GAAoB59G,GAClC,MAAM,IAAQqK,EAAAA,EAAAA,OACR,cAAE4qD,GAAkBJ,MACpB,MAAE3kD,GAAUlQ,EAQZ69G,EAA6C,CACjD,+BAAgC,CAC9Bt9G,MAAO6J,EAAE,iDACT0U,YAAa1U,EACX,qGAGJ,eAAgB,CACd7J,MAAO6J,EAAE,0CACT0U,YAAa1U,EACX,2FAGJ,mBAAoB,CAClB7J,MAAO6J,EAAE,8CACT0U,YAAa1U,EACX,+FAGJ,cAAe,CACb7J,MAAO6J,EAAE,yCACT0U,YAAa1U,EACX,0FAGJ0zG,aAAc,CACZv9G,MAAO6J,EAAE,oDACT0U,YAAa1U,EAAE,yEAEjB,yBAA0B,CACxB7J,MAAO6J,EAAE,0DACT0U,YAAa1U,EAAE,0EAEjB,YAAa,CACX7J,MAAO6J,EAAE,aACT0U,YAAa1U,EAAE,cAEjB6mE,QAAS,CACP1wE,MAAO6J,EAAE,qCACT0U,YAAa1U,EAAE,uDAInB,SAAS2zG,EAAWC,GAClB,MAAQ9tG,MAAO+tG,GAAeD,EAC9B,OAAIC,GAAcJ,EAAWI,IAEzB/6G,EAAAA,EAAAA,KAACu3B,GAAgB,CACfl6B,MAAOs9G,EAAWI,IAAa19G,MAC/Bue,YAAa++F,EAAWI,IAAan/F,YACrC1Y,KAAM83G,GAAAA,GACNviG,OAAQkiG,EAAWI,IAAatiG,UAI/BzY,EAAAA,EAAAA,KAAC22B,GAAe,GACzB,CACA,SAASskF,IACP,OACEj7G,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,UACEF,EAAAA,EAAAA,KAACu3B,GAAgB,CACfl6B,MAAO6J,EAAE,+DACT0U,YAEM1U,EADJ6qD,GAAegO,aAET,oFAEA,wEAER78D,KAAMg4G,GAAAA,GACNziG,OACEs5C,GAAegO,cACb//D,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAACoB,QAASA,IAAM,KAAKzG,SAAEgH,EAAE,yBAC9BvF,EAEN61B,SAAUtwB,EACR,4KAKV,CAEA,OAAQ6qD,GAAegO,cAAgBhO,GAAeigB,oBAAwBhlE,GAC5EhN,EAAAA,EAAAA,KAAC66G,EAAU,CAAC7tG,MAAOA,KAEnBhN,EAAAA,EAAAA,KAACi7G,EAAa,GAElB,C,wCC3GO,MAAME,GAAmBtnD,GACZ,IAAI6jD,KAAKiC,aAAa,QAAS,CAC/CyB,yBAA0B,IAGX3oG,OAAOohD,GCWbwnD,GAAgDA,EAAG11B,eAC9D,MAAM,IAAQx+E,EAAAA,EAAAA,MACd,OACEnH,EAAAA,EAAAA,KAAC49B,GAAAA,GAAE,CAAClkB,QAAS,EAAExZ,UACbF,EAAAA,EAAAA,KAAC2hE,GAAAA,EAAoB,CAAAzhE,UACnBoF,EAAAA,EAAAA,MAAC4c,GAAAA,EAAe,CAACC,eAAgB,CAAE9X,QAAS,QAASnK,SAAA,EACnDoF,EAAAA,EAAAA,MAAC+b,GAAAA,EAAoB,CAAAnhB,SAAA,EACnBF,EAAAA,EAAAA,KAACuhB,GAAAA,EAAmB,CAAArhB,SAAEgH,EAAE,cACxBlH,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,SACxBgH,EAAE,GAAGy+E,EAASlyE,yBAGnBnO,EAAAA,EAAAA,MAAC+b,GAAAA,EAAoB,CAAAnhB,SAAA,EACnBF,EAAAA,EAAAA,KAACuhB,GAAAA,EAAmB,CAAArhB,SAAEgH,EAAE,iBACxBlH,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,SAAEylF,EAAS21B,iBAExCh2G,EAAAA,EAAAA,MAAC+b,GAAAA,EAAoB,CAAAnhB,SAAA,EACnBF,EAAAA,EAAAA,KAACuhB,GAAAA,EAAmB,CAAArhB,SAAEgH,EAAE,kBACxBlH,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,SAAEylF,EAAS41B,kBAExCj2G,EAAAA,EAAAA,MAAC+b,GAAAA,EAAoB,CAAAnhB,SAAA,EACnBF,EAAAA,EAAAA,KAACuhB,GAAAA,EAAmB,CAAArhB,SAAEgH,EAAE,sBACxBlH,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,SAAEylF,EAAS61B,sBAExCl2G,EAAAA,EAAAA,MAAC+b,GAAAA,EAAoB,CAAAnhB,SAAA,EACnBF,EAAAA,EAAAA,KAACuhB,GAAAA,EAAmB,CAAArhB,SAAEgH,EAAE,0BACxBlH,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,SAAEylF,EAAS81B,0BAExCn2G,EAAAA,EAAAA,MAAC+b,GAAAA,EAAoB,CAAAnhB,SAAA,EACnBF,EAAAA,EAAAA,KAACuhB,GAAAA,EAAmB,CAAArhB,SAAEgH,EAAE,4BACxBlH,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,SACxBylF,EAAS+1B,4BAGdp2G,EAAAA,EAAAA,MAAC+b,GAAAA,EAAoB,CAAAnhB,SAAA,EACnBF,EAAAA,EAAAA,KAACuhB,GAAAA,EAAmB,CAAArhB,SAAEgH,EAAE,4BACxBlH,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,SACxB4jF,SAAS6B,EAASg2B,sBAAsBn9F,YAAYxQ,QAAQ,SAGjE1I,EAAAA,EAAAA,MAAC+b,GAAAA,EAAoB,CAAAnhB,SAAA,EACnBF,EAAAA,EAAAA,KAACuhB,GAAAA,EAAmB,CAAArhB,SAAEgH,EAAE,oCACxBlH,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,SACxBw5G,GAAkB51B,SAAS6B,EAASi2B,yBAAyBp9F,mBAGlElZ,EAAAA,EAAAA,MAAC+b,GAAAA,EAAoB,CAAAnhB,SAAA,EACnBF,EAAAA,EAAAA,KAACuhB,GAAAA,EAAmB,CAAArhB,SAAEgH,EAAE,8BACxBlH,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,SACxBw5G,GAAkB51B,SAAS6B,EAASk2B,mBAAmBr9F,mBAG5DlZ,EAAAA,EAAAA,MAAC+b,GAAAA,EAAoB,CAAAnhB,SAAA,EACnBF,EAAAA,EAAAA,KAACuhB,GAAAA,EAAmB,CAAArhB,SAAEgH,EAAE,oBACxBlH,EAAAA,EAAAA,KAACyhB,GAAAA,EAA0B,CAAAvhB,SACxBylF,GAAUm2B,cACPpC,GAAkB51B,SAAS6B,EAASm2B,cAAct9F,aAClD,cAKT,ECrDIu9F,GAAgCA,EAAGp2B,WAAUn1C,YAAW,EAAMwrE,kBACzE,MAAOp1G,EAAYipB,IAAiBn0B,EAAAA,EAAAA,UACsB,SAAxDC,OAAOuU,aAAaC,QAAQw1E,EAASxoF,GAAGqhB,cAA0B,IAM9D,EAAEtX,IAAMC,EAAAA,EAAAA,MAsBd,OACE7B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEoF,EAAAA,EAAAA,MAACi3B,GAAAA,GAAE,CAAAr8B,SAAA,EACDF,EAAAA,EAAAA,KAAC49B,GAAAA,GAAE,CACD0K,OAAQ,CACN5K,SAAUomD,SAAS6B,EAASxoF,GAAGqhB,YAC/B5X,WAAYA,EACZrE,SAAUA,KAAM4jC,OAjCLzrC,GAiCkBkM,EAjCFzJ,EAiCc2mF,SAAS6B,EAASxoF,GAAGqhB,YAhCtE7iB,OAAOuU,aAAac,QAAQ7T,EAAGqhB,WAAY9jB,EAAQ,OAAS,cAC5Dm1B,EAAcn1B,GAFIyrC,IAACzrC,EAAgByC,CAkC7B,MAEF6C,EAAAA,EAAAA,KAAC49B,GAAAA,GAAE,CAAA19B,SAAEylF,EAASvoF,OACb4+G,IAAeh8G,EAAAA,EAAAA,KAAC49B,GAAAA,GAAE,CAAA19B,SA/BD+7G,EAAC7vG,EAAa1R,KACpC,IAAI4C,EACJ,OAAQ8O,GACN,IAAK,UACH9O,EAAQ69G,GAAgBzgH,GAAS,WACjC,MACF,IAAK,iCACH4C,EAAQ69G,GAAgBzgH,GAAS,IACjC,MACF,IAAK,2BACL,IAAK,qBACL,IAAK,gBACH4C,EAAQo8G,GAAkBh/G,GAC1B,MACF,QACE4C,IAAU5C,GAAOsT,QAAQ,GAE7B,OAAO1Q,CAAK,EAca2+G,CAAgBD,EAAY5vG,KAAMu5E,EAASq2B,EAAY5vG,SAC5EpM,EAAAA,EAAAA,KAAC49B,GAAAA,GAAE,CAAA19B,UACDoF,EAAAA,EAAAA,MAAC0pB,GAAAA,EAAU,CAAA9uB,SAAA,EACTF,EAAAA,EAAAA,KAACivB,GAAAA,EAAc,CAAC0sB,QAAM,EAAAz7C,UACpBF,EAAAA,EAAAA,KAAC08C,GAAAA,GAAS,CACRnB,UACE5/C,OAAOuU,aAAaC,QAAQ,aAAe,eAAiBw1E,EAASxoF,GAAGqhB,WAE1ErhB,GAAI,eAAiBwoF,EAASxoF,GAAGqhB,WACjC,UAAS,cACT3c,MAAO,CAAE4T,SAAU,SACnBhS,KAAK,SACL,aAAW,oBACX/I,MAAOirF,EAASu2B,uBAAyB,GACzCC,OAAQA,IAAMxgH,OAAOuU,aAAac,QAAQ,UAAW,IACrDjQ,WAAYyvC,OAGhBxwC,EAAAA,EAAAA,KAACqqG,GAAAA,EAAc,CAAAnqG,SAAEgH,EAAE,UACnBlH,EAAAA,EAAAA,KAACqqG,GAAAA,EAAc,CAAAnqG,SAAEgH,EAAE,KAAKy+E,EAASy2B,4CAGrCp8G,EAAAA,EAAAA,KAAC49B,GAAAA,GAAE,CACD,UAAS,UACT/7B,MAAO,CACLvF,MAAOqpF,EAASrnD,QAAU+9E,GAAAA,EAAsB3hH,MAAQ4hH,GAAAA,EAAuB5hH,OAC/EwF,SAEDw5G,GAAkB51B,SAAS6B,EAASm2B,cAAct9F,aAAe,MAEpExe,EAAAA,EAAAA,KAAC49B,GAAAA,GAAE,CAAA19B,UACDF,EAAAA,EAAAA,KAACmC,EAAAA,EAAM,CACL7E,MAAO4J,EAAE,QACTxF,SAAUwF,EAAE,QACZ3F,YAAaokF,EAASrnD,QACtBv9B,WAAYyvC,UAIlBxwC,EAAAA,EAAAA,KAACu8B,GAAAA,GAAE,CAAC31B,WAAYA,EAAW1G,UACzBF,EAAAA,EAAAA,KAACq7G,GAAmB,CAAC11B,SAAUA,QAEhC,EC/EM42B,GAAyCA,EACpDr8F,OAAO,GACPswB,YAAW,EACXwrE,cACAQ,oBAEA,MAAM,EAAEt1G,IAAMC,EAAAA,EAAAA,MAEd,OACE7B,EAAAA,EAAAA,MAACsvB,GAAAA,EAAK,CAAC,UAAS,QAAS,aAAW,YAAYvxB,QAASo5G,GAAAA,EAAaj9E,QAAQt/B,SAAA,EAC5EF,EAAAA,EAAAA,KAACs8B,GAAAA,EAAK,CAAAp8B,UACJoF,EAAAA,EAAAA,MAACi3B,GAAAA,GAAE,CAAAr8B,SAAA,EACDF,EAAAA,EAAAA,KAACw8B,GAAAA,GAAE,KACHx8B,EAAAA,EAAAA,KAACw8B,GAAAA,GAAE,CAAAt8B,SAAEgH,EAAE,UACN80G,IAAeh8G,EAAAA,EAAAA,KAACw8B,GAAAA,GAAE,IAAKggF,EAAat8G,SAAG87G,EAAYthH,SACpDsF,EAAAA,EAAAA,KAACw8B,GAAAA,GAAE,CAAAt8B,SAAEgH,EAAE,kBACPlH,EAAAA,EAAAA,KAACw8B,GAAAA,GAAE,CAAAt8B,SAAEgH,EAAE,mBAGXlH,EAAAA,EAAAA,KAAC28B,GAAAA,EAAK,CAAAz8B,SACHggB,EAAKnZ,KAAK4+E,IACT3lF,EAAAA,EAAAA,KAAC+7G,GAAG,CAEFp2B,SAAUA,EACVn1C,SAAUA,EACVwrE,YAAaA,GAHRr2B,EAASxoF,UAOd,EC/CNu/G,GAAah6G,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,mBAAVH,CAAU,uCAKhBi6G,GAAyCA,EACpDC,eAAe,EACfC,qBAAqB,EACrBzzF,aAAY,MAEZ,MAAM,EAAEliB,IAAMC,EAAAA,EAAAA,MACd,OACEnH,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SACG,CAACgH,EAAE,iBAAkBA,EAAE,yBAAyBH,KAAI,CAAC1J,EAAO2J,KAC3D1B,EAAAA,EAAAA,MAAC4U,GAAAA,EAAI,CACH,UAAS7c,EAAMH,cAAcvC,QAAQ,IAAK,KAAKA,QAAQ,IAAK,KAC5D+4D,SAAO,EACPj5C,WAAS,EAAAva,SAAA,EAGTF,EAAAA,EAAAA,KAACwhC,GAAAA,EAAS,CAAAthC,SAAE7C,KACZ2C,EAAAA,EAAAA,KAAC8iC,GAAAA,EAAQ,CAAA5iC,UACPF,EAAAA,EAAAA,KAAC+a,GAAAA,EAAK,CACJC,aAAa,KACbzf,KAAgB,IAAVyL,EAAc,MAAQ,KAC5BnF,MAAO,CAAEvF,MAAO,2CAA4C4D,SAE3DkpB,GACCppB,EAAAA,EAAAA,KAAC08G,GAAU,CAAAx8G,UACTF,EAAAA,EAAAA,KAACspB,GAAAA,EAAO,CAAC,UAAS,UAAW/tB,KAAK,SAGpCm+G,GAA4B,IAAV1yG,EAAc41G,EAAeC,SAdhDx/G,MAoBR,ECyBA,SAASy/G,GAAqBhgH,GACnC,MAAM,IAAQqK,EAAAA,EAAAA,OACPo+C,GAAgBD,MAEjB,OAAEnQ,GAAWr4C,GAGjBojB,KAAMmG,EAAO,UACb+C,EAAS,MACTpc,IACE8kD,EAAAA,GAAAA,IAA8BL,EAAM,qCAAsCrN,GAC5E24D,GAAqC34D,OAAKziD,KAGtCo3B,GAAQj9B,EAAAA,EAAAA,cAAY,IACjB,IACN,KAEIu0B,EAAaC,IAAkB50B,EAAAA,EAAAA,WAAuB,KAC3D,MAAM20B,EAA4B,CAAC,EAC7B2sF,EAAa,CACjB,CAAE5wG,IAAK,aAAc6wG,YAAa,YAClC,CAAE7wG,IAAK,SAAU6wG,YAAa,QAC9B,CAAE7wG,IAAK,cAAe6wG,YAAa,aACnC,CAAE7wG,IAAK,eAAgB6wG,YAAa,eACpC,CAAE7wG,IAAK,mBAAoB6wG,YAAa,UAE1C,IAAK,MAAMC,KAAaF,EAAY,CAClC,MAAMtiH,EAAQ6qD,EAAauF,IAAIoyD,EAAUD,aACrCviH,IACF21B,EAAY6sF,EAAU9wG,KAAO1R,EAAM8M,MAAM,KAE7C,CACA,OAAO6oB,CAAW,IAGdD,GAAiB/rB,EAAAA,EAAAA,UAAQ,KAC7B,MAAM+rB,EAAmC,GAsEzC,OArEI/J,IACEA,EAAQ82F,YAAc92F,EAAQ82F,WAAW35G,OAAS,GACpD4sB,EAAersB,KAAK,CAClBqI,IAAK,aACLk4C,MAAO,aACP7gD,KAAMysB,GAAkBuB,YACxBn0B,MAAO4J,EAAE,WACTkf,YAAalf,EAAE,qBACfmf,QAASA,EAAQ82F,WAAWp2G,KAAKggB,IAAM,CACrCzpB,MAAOypB,EAAOrsB,MAAM8jB,WACpB9jB,MAAOqsB,EAAO3a,IAAIoS,iBAIpB6H,EAAQ+2F,QAAU/2F,EAAQ+2F,OAAO55G,OAAS,GAC5C4sB,EAAersB,KAAK,CAClBqI,IAAK,SACLk4C,MAAO,SACP7gD,KAAMysB,GAAkBuB,YACxBn0B,MAAO4J,EAAE,gBACTkf,YAAalf,EAAE,0BACfmf,QAASA,EAAQ+2F,OAAOr2G,KAAKggB,IAAM,CACjCzpB,MAAOypB,EAAOrsB,MAAM8jB,WACpB9jB,MAAOqsB,EAAO3a,IAAIoS,iBAIpB6H,EAAQg3F,aAAeh3F,EAAQg3F,YAAY75G,OAAS,GACtD4sB,EAAersB,KAAK,CAClBqI,IAAK,cACLk4C,MAAO,cACP7gD,KAAMysB,GAAkBuB,YACxBn0B,MAAO4J,EAAE,YACTkf,YAAalf,EAAE,sBACfmf,QAASA,EAAQg3F,YAAYt2G,KAAKggB,IAAM,CACtCzpB,MAAOypB,EAAOrsB,MAAM8jB,WACpB9jB,MAAOqsB,EAAO3a,IAAIoS,iBAIpB6H,EAAQi3F,cAAgBj3F,EAAQi3F,aAAa95G,OAAS,GACxD4sB,EAAersB,KAAK,CAClBqI,IAAK,eACLk4C,MAAO,eACP7gD,KAAMysB,GAAkBuB,YACxBn0B,MAAO4J,EAAE,aACTkf,YAAalf,EAAE,uBACfmf,QAASA,EAAQi3F,aAAav2G,KAAKggB,IAAM,CACvCzpB,MAAOypB,EAAOrsB,MAAM8jB,WACpB9jB,MAAOqsB,EAAO3a,IAAIoS,iBAIpB6H,EAAQk3F,kBAAoBl3F,EAAQk3F,iBAAiB/5G,OAAS,GAChE4sB,EAAersB,KAAK,CAClBqI,IAAK,mBACLk4C,MAAO,mBACP7gD,KAAMysB,GAAkB9B,UACxB9wB,MAAO4J,EAAE,SACTmf,QAASA,EAAQk3F,iBAAiBx2G,KAAKggB,IAAM,CAC3CzpB,MAAOypB,EAAOrsB,MAAM8jB,WACpB9jB,MAAOqsB,EAAO3a,IAAIoS,WAClByP,SAAyB,eAAflH,EAAO3a,QAEnB4gB,YAAY,EACZviB,UAAU,KAIT2lB,CAAc,GACpB,CAAC/J,EAASnf,KAEN9H,EAAM0zB,IAAWp3B,EAAAA,EAAAA,WAAiB,KACvC,IAAI0D,EAAOmmD,EAAauF,IAAI,QAC5B,OAAI1rD,GACEA,GAAMkkD,WAAW,OAAMlkD,EAAOA,EAAKomD,UAAU,IAC1CpmD,GAEF,YAAY,KAEd2zB,EAAeC,IAAoBt3B,EAAAA,EAAAA,WAAyB,KACjE,MAAM0D,EAAOmmD,EAAauF,IAAI,QAC9B,OAAI1rD,GACEA,GAAMkkD,WAAW,KAAa,MAG7B,MAAM,IAETrwB,GAAc5uB,EAAAA,EAAAA,UAA+B,IAC7CgiB,EACKA,EAAQm3F,aAAaz2G,KAAKggB,IAAM,CACrCzpB,MAAOypB,EAAOrsB,MAAM8jB,WACpB9jB,MAAOqsB,EAAO3a,IAAIoS,WAClB/a,KAAM,SACNmwB,iBAAkB,WAGf,IACN,CAACvN,IAEE6M,GAAa7uB,EAAAA,EAAAA,UACjB,IAAM4uB,EAAYzuB,MAAMuiB,GAAWA,EAAOrsB,QAAU0E,KACpD,CAACA,EAAM6zB,IAGT,OAAI7J,GACKppB,EAAAA,EAAAA,KAACiqD,GAAY,IACXj9C,GACFhN,EAAAA,EAAAA,KAAC06G,GAAmB,CAAC1tG,MAAOA,EAAMK,UAGtC6lB,GAKH5tB,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACk1B,GAAW,CACV6D,MAAOA,EACPhU,UAAW,EACXqL,eAAgBA,EAChBC,YAAaA,EACbC,eAAgBA,EAChB2C,YAAaA,EACb7zB,KAAMA,EACN0zB,QAASA,EACTC,cAAeA,EACfC,iBAAkBA,EAClBsD,mBAAiB,KAEnBt2B,EAAAA,EAAAA,KAACy9G,GAA4B,CAC3BtoE,OAAQA,EACR9kB,YAAaA,EACbC,eAAgBA,EAChB4C,WAAYA,EACZH,cAAeA,EACfC,iBAAkBA,QAxBfhzB,EAAAA,EAAAA,KAACiqD,GAAY,GA4BxB,CAEO,SAASwzD,GAA6B3gH,GAQ3C,MAAM,IAAQqK,EAAAA,EAAAA,OACR,OACJguC,EAAM,YACN9kB,EAAW,eACXC,EAAc,WACd4C,EACAH,cAAe2qF,EACf1qF,iBAAkB2qF,GAChB7gH,GAEGyoD,EAAcI,GAAmBL,MAEjCnwB,EAAME,IAAW35B,EAAAA,EAAAA,WAAiB,IACvC6pD,EAAauF,IAAI,QAAUg5B,SAASv+B,EAAauF,IAAI,SAAqB,KAErE11B,EAASE,IAAc55B,EAAAA,EAAAA,WAAiB,IAC7C6pD,EAAauF,IAAI,YAAcg5B,SAASv+B,EAAauF,IAAI,aAAyB,MAGpF/uD,EAAAA,EAAAA,YAAU,KACR,MAAMsoD,EAAS,IAAIqB,gBACfxyB,IACgB,SAAdwqF,EACFr5D,EAAO+G,IAAI,OAAQl4B,EAAWx4B,OAE9B2pD,EAAO+G,IAAI,OAAQ,IAAMl4B,EAAWx4B,QAGxC2pD,EAAO+G,IAAI,OAAQj2B,EAAK3W,YACxB6lC,EAAO+G,IAAI,WAAYh2B,EAAQ5W,YAC3B6R,IACEA,EAAY+sF,QACd/4D,EAAO+G,IAAI,OAAQ/6B,EAAY+sF,OAAO31G,KAAK,MAEzC4oB,EAAY8sF,YACd94D,EAAO+G,IAAI,WAAY/6B,EAAY8sF,WAAW11G,KAAK,MAEjD4oB,EAAYgtF,aACdh5D,EAAO+G,IAAI,YAAa/6B,EAAYgtF,YAAY51G,KAAK,MAEnD4oB,EAAYitF,cACdj5D,EAAO+G,IAAI,cAAe/6B,EAAYitF,aAAa71G,KAAK,MAEtD4oB,EAAYktF,kBACdl5D,EAAO+G,IAAI,QAAS/6B,EAAYktF,iBAAiB91G,KAAK,OAG1Dk+C,EAAgBtB,EAAO,GACtB,CAACh0B,EAAa8E,EAAMC,EAASuwB,EAAiBzyB,EAAYwqF,IAE7D,MAAME,GAAcv5G,EAAAA,EAAAA,UAAQ,KAC1B,MAAMw5G,EAAYxtF,EAAYktF,iBAC9B,IAAIO,EACAC,EASJ,OARIF,IACEA,EAAUr6G,QAAU,IACtBs6G,EAAaD,EAAU,IAErBA,EAAUr6G,QAAU,IACtBu6G,EAAWF,EAAU,KAGlB,CACLnzE,OAAQ,GACR0yE,OAAQ/sF,EAAY+sF,QAAU,GAC9BD,WAAY9sF,EAAY8sF,YAAc,GACtCE,YAAahtF,EAAYgtF,aAAe,GACxCC,aAAcjtF,EAAYitF,cAAgB,GAC1CC,iBACEltF,EAAYktF,kBAAoBltF,EAAYktF,iBAAiB/5G,OACzD6sB,EAAYktF,iBAAiB,GAC7B,gBACNp7B,SAAU,GACVq7B,aAActqF,EAAWx4B,MACzBsjH,WAAYN,EACZI,aACAC,WACA/zE,MAAO5U,EAAQ5W,WACf2yC,SAAUh8B,EAAO,GAAKC,GAAS5W,WAC/By/F,yCAAyC,EACzCC,uBAAmBv8G,EACnBw8G,WAAY,CACV,UACA,aACA,cACA,kBACA,sBACA,yBACA,4BAEFC,SAAU,WACVC,eAAe,EAChB,GACA,CAAChuF,EAAa8E,EAAMC,EAASlC,EAAWx4B,MAAOgjH,KAE3Cx9F,EAAM6jD,IAAWroE,EAAAA,EAAAA,aACjBsR,EAAO08B,IAAYhuC,EAAAA,EAAAA,aACnB0tB,EAAW46C,IAAgBtoE,EAAAA,EAAAA,WAAkB,IACpDK,EAAAA,EAAAA,YAAU,KACR,MAAMsvB,EAAkB,IAAIC,gBAsB5B,OArBA04C,GAAa,GACb+4C,GACEtrD,EAAM,mCAAmCr8B,EAAQ5W,uBAC9C2W,EAAO,GACRC,GACA5W,sBAAsB0U,GAAYx4B,SAAS6pD,mBAAmBm5D,KAChEE,EACAvyF,EAAgBI,QAEfC,MAAMmiC,IACDxiC,EAAgBI,OAAOE,UAC3Bo4C,EAAQlW,GACRmW,GAAa,GACbt6B,OAAS/nC,GAAU,IAEpBqN,OAAOF,IACFuc,EAAgBI,OAAOE,UAC3B+d,EAAS56B,GACTk1D,GAAa,GACbD,OAAQpiE,GAAU,IAEf,IAAM0pB,EAAgBD,OAAO,GACnC,CAAC+J,EAAMC,EAASlC,GAAYx4B,MAAOgjH,EAAWE,IA0FjD,OARA7hH,EAAAA,EAAAA,YAAU,KACR,MAAMuiH,EAAap+F,GAAM+4F,KAAK38F,OAAS,EACjCiiG,EAAY5wG,KAAKkyB,IAAI,EAAGlyB,KAAKssB,KAAKqkF,EAAalpF,KACjDD,EAAOopF,GAAappF,EAAO,IAC7BE,EAAQ,EACV,GACC,CAACnV,GAAM+4F,KAAK38F,MAAO6Y,EAAMC,IAExBhM,GAEAppB,EAAAA,EAAAA,KAAC6W,GAAU,CAACW,WAAS,EAACC,cAAY,EAAAvX,UAChCF,EAAAA,EAAAA,KAACoY,GAAAA,GAAW,CAAAlY,UACVF,EAAAA,EAAAA,KAACka,GAAAA,EAAI,CAACrY,MAAO,CAAEyU,OAAQ,QAAU6D,QAAM,EAACC,WAAS,EAAAla,UAC/CF,EAAAA,EAAAA,KAACiqD,GAAY,UAKZj9C,GACFhN,EAAAA,EAAAA,KAAC06G,GAAmB,CAAC1tG,MAAOA,EAAMK,WAIzC/H,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAC6W,GAAU,CAACW,WAAS,EAACC,cAAY,EAAAvX,UAChCF,EAAAA,EAAAA,KAACoY,GAAAA,GAAW,CAAAlY,UACVoF,EAAAA,EAAAA,MAAC4U,GAAAA,EAAI,CAACC,QAAM,EAACC,WAAS,EAAAla,SAAA,EACpBF,EAAAA,EAAAA,KAAC8iC,GAAAA,EAAQ,CAAA5iC,UACPoF,EAAAA,EAAAA,MAACyqC,GAAAA,EAAI,CAAClnC,WAAS,EAAA3I,SAAA,EACbF,EAAAA,EAAAA,KAAComE,GAAAA,EAAQ,CAACh0D,KAAM,EAAElS,UAAGkpB,IA9EjC9jB,EAAAA,EAAAA,MAAC4U,GAAAA,EAAI,CAACw5C,SAAO,EAAAxzD,SAAA,EACXF,EAAAA,EAAAA,KAAC2a,GAAAA,EAAU,CAAAza,UACTF,EAAAA,EAAAA,KAACwhC,GAAAA,EAAS,CAAAthC,SAAEgH,EAAE,0BAEdgZ,GAAsC,IAA9BA,GAAM+4F,MAAM78F,OAAO5Y,QAK3BxD,EAAAA,EAAAA,KAAC8e,GAAK,CACJq2B,OAAQokE,GAAcpkE,EAAdokE,CAAsB,CAC5Bt6F,EAAGiU,EAAWx4B,MACd+G,QAAS,cACTuvC,MAAO9d,EAAWx4B,MAClB4C,MAAO41B,EAAW51B,QAEpB4iB,KAAM,CAAE4Y,MAAO5Y,GAAM+4F,MAAM78F,QAC3Bi7F,kBAAmB,CAAEU,YAAa,CAAEyG,wBA3BZA,EAAGn/F,WAEjB,GAAG6T,EAAW51B,aAAa+hB,EAAMjiB,MAAQ,OAvBpCqhH,EAACryG,EAAa1R,KACnC,IAAI8xC,EACJ,OAAQpgC,GACN,IAAK,UACHogC,EAAM9xC,EAAMsT,QAAQ,GAAK,WACzB,MACF,IAAK,iCACHw+B,EAAM9xC,EAAMsT,QAAQ,GAAK,IACzB,MACF,IAAK,2BACL,IAAK,qBACL,IAAK,gBACHw+B,EAAMktE,GAAkBh/G,GACxB,MACF,QACE8xC,EAAM9xC,EAAMsT,QAAQ,GAExB,OAAOw+B,CAAG,EAQRiyE,CAAevrF,EAAWx4B,MAAO2kB,EAAMJ,IAAM,UAW3Cjf,EAAAA,EAAAA,KAACg3G,GAAgB,CACfp5G,gBAAiBA,IAAM0yB,GAAe,KAAM,CAAGitF,iBAAkB,CAAC,6BAyE5Dv9G,EAAAA,EAAAA,KAAComE,GAAAA,EAAQ,CAACh0D,KAAM,EAAElS,UAAGkpB,IAvDjC9jB,EAAAA,EAAAA,MAAC0T,GAAAA,EAAK,CAAA9Y,SAAA,EACJF,EAAAA,EAAAA,KAACmZ,GAAAA,EAAS,CAAAjZ,UACRF,EAAAA,EAAAA,KAAC28G,GAAY,CACXC,cACG18F,GAAMw+F,2BAA6B,IAAMx+F,GAAMy+F,4BAA8B,GAEhF9B,mBAAoB38F,GAAMy+F,4BAA8B,EACxDv1F,UAAWA,OAGfppB,EAAAA,EAAAA,KAACmZ,GAAAA,EAAS,CAAAjZ,UACRF,EAAAA,EAAAA,KAACq6G,GAAe,CACdC,WAAYp6F,GAAM0+F,KAAKC,0BAA4B,EACnDtE,mBAAoBA,IAAM,KAC1BC,eAAgBt6F,GAAM0+F,KAAKE,wBAA0B,EACrDtuE,UAAU,OAGdxwC,EAAAA,EAAAA,KAACmZ,GAAAA,EAAS,CAAAjZ,UACRF,EAAAA,EAAAA,KAACi6G,GAAiB,iBAuCdj6G,EAAAA,EAAAA,KAACu8G,GAAY,CACXr8F,KAAMA,GAAM+4F,KAAK78F,QAAU,GAC3B4/F,YAAa,CAAE5vG,IAAK8mB,EAAWx4B,MAAOA,MAAOw4B,EAAW51B,OACxDkzC,UAAU,EACVgsE,cAAe,CACbp9G,KAAM,CACJwoC,OAAQ,CACN5gC,MAAO,EACP6gC,UAAW61E,GAEbj2E,OAAQA,CAACjiB,EAAQi3E,EAAQ50D,IAAc81E,EAAa91E,GACpDnL,YAAa,cAOzB18B,EAAAA,EAAAA,KAACy2B,GAAAA,EAAU,CACT1R,UAAW7E,GAAM+4F,KAAK38F,MACtB6Y,KAAMA,EACNC,QAASA,EACTI,eAAgBA,GAChBK,gBAAiBA,CAAC4tB,EAAIruB,IAAoBE,EAAWF,GACrDQ,UAAWA,CAAC6tB,EAAItuB,IAAiBE,EAAQF,GACzC9xB,QAASqzB,GAAAA,EAAkBrY,WAInC,CAOA,MAAMmX,GAAiB,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,IAAIzuB,KAAKrM,IAAK,CACzD2C,MAAO3C,EAAM8jB,WACb9jB,YCvhBK,IAAKqkH,GAAO,SAAPA,GAAO,OAAPA,EAAO,wBAAPA,EAAO,sBAAPA,EAAO,4BAAPA,EAAO,sBAAPA,EAAO,wBAAPA,EAAO,kBAAPA,EAAO,+BAAPA,EAAO,kBAAPA,EAAO,cAAPA,EAAO,cAAPA,EAAO,4BAAPA,EAAO,2BAAPA,EAAO,mBAAPA,EAAO,yBAAPA,EAAO,4DAAPA,EAAO,kBAAPA,CAAO,MAmBZ,MAAMC,GAAc,CACzB,CACE5yG,IAAK2yG,GAAQE,WACb7hH,KAAM,aACNwe,YACE,uLAEJ,CACExP,IAAK2yG,GAAQG,UACb9hH,KAAM,YACNwe,YACE,gIAEJ,CACExP,IAAK2yG,GAAQI,aACb/hH,KAAM,eACNwe,YACE,mHAEJ,CACExP,IAAK2yG,GAAQK,UACbhiH,KAAM,YACNwe,YACE,gLAEJ,CACExP,IAAK2yG,GAAQlnC,WACbz6E,KAAM,aACNwe,YAAa,8DAEf,CACExP,IAAK2yG,GAAQM,QACbjiH,KAAM,UACNwe,YAAa,+EAEf,CACExP,IAAK2yG,GAAQO,cACbliH,KAAM,iBACNwe,YAAa,kEAEf,CACExP,IAAK2yG,GAAQQ,QACbniH,KAAM,UACNwe,YACE,qIAEJ,CACExP,IAAK2yG,GAAQ7kD,MACb98D,KAAM,QACNwe,YACE,+HAEJ,CACExP,IAAK2yG,GAAQS,MACbpiH,KAAM,QACNwe,YACE,mGAEJ,CACExP,IAAK2yG,GAAQ3uC,aACbhzE,KAAM,eACNwe,YACE,iHAEJ,CACExP,IAAK2yG,GAAQU,YACbriH,KAAM,eACNwe,YACE,iHAEJ,CACExP,IAAK2yG,GAAQW,QACbtiH,KAAM,WACNwe,YACE,wFAEJ,CACExP,IAAK2yG,GAAQY,WACbviH,KAAM,cACNwe,YACE,4KAEJ,CACExP,IAAK2yG,GAAQa,4BACbxiH,KAAM,gCACNwe,YACE,yJAEJ,CACExP,IAAK2yG,GAAQc,QACbziH,KAAM,UACNwe,YACE,0FCzFC,SAASkkG,KACd,MAAM,cAAE/tD,GAAkBJ,MACpB,KAAEzxC,EAAI,MAAElT,IAAU8kD,EAAAA,GAAAA,IACtBL,EAAM,2CACNpC,KAEK0wD,EAAeC,IAAoBtkH,EAAAA,EAAAA,UAAiB,IAY3D,SAASukH,IACP,OAAIjzG,GAAS+yG,EACJA,GAAgB//G,EAAAA,EAAAA,KAAC06G,GAAmB,CAAC1tG,MAAO+yG,KAAoB//G,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,IAEhEwb,GAAOlgB,EAAAA,EAAAA,KAAC88G,GAAoB,IAAK58F,EAAKggG,QAAQC,eAAkBngH,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,GAE3E,EAhBA3I,EAAAA,EAAAA,YAAU,KAMNikH,EALGhzG,EAKcA,GAAO7G,MAAM6G,OAAOozG,SAAW,UAJ/B,GAKnB,GACC,CAACpzG,IAUJ,MAAMqzG,GACJrgH,EAAAA,EAAAA,KAACsgH,GAAoB,CAACnsG,UAAW,EAAEjU,WAC9BggB,GACDA,EAAKggG,OAAOC,YAAYp5B,KAAKhgF,KAAI,CAACw5G,EAAQ1H,KACxC,MAAMpgC,EAAMumC,GAAKx6G,MAAM0C,GAAMA,EAAEkF,MAAQm0G,IACvC,GAAI9nC,EACF,OACEz4E,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CAENoB,SAAUo9G,EAAAA,EAAgBniG,OAC1Bpc,QAASw2E,EAAI78D,YAAY1b,UAEzBF,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAC,UAASokE,EAAIr7E,KAAK8C,SACtBu4E,EAAIr7E,MADwBy7G,IAJ1B,WAAWA,IAStB,MAIR,OACE74G,EAAAA,EAAAA,KAAC4jD,GAAAA,EAAI,CAAA1jD,UACHoF,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6iB,GAAMggG,QAAQ9iH,MAAQ,GAC7Bwe,YAAasE,GAAMggG,QAAQtkG,aAAe,GAC1C8kC,SAAUxgC,EAAOmgG,OAAa1+G,IAE/BowD,IAAkBA,GAAegO,cAChC//D,EAAAA,EAAAA,KAAC06G,GAAmB,KAEpB16G,EAAAA,EAAAA,KAACigH,EAAe,QAK1B,CAEA,MAAMK,IAAuB59G,EAAAA,EAAAA,IAAOwR,GAAAA,GAAWtR,WAAA,CAAAC,YAAA,qBAAlBH,CAAkB,uBCvFxC,SAAS+9G,KACd,MAAM,YAAEvvG,GAAgBrB,KAExB,IAAI6wG,EAAkB,qCAClBC,EAAc,mCACdC,EAAa,sCACbC,EAAe,oCACfC,EAAgB,qCAChBC,EAAY,oCACZC,EAAY,oCACZC,EAAW,mCACXC,EAAa,qCACbC,EAAc,oCACdC,EAAc,sCACdC,EAAc,sCACdC,EAAY,qCAoBhB,MAjBO,SADCpwG,IAEJwvG,EAAkB,qCAClBC,EAAc,mCACdC,EAAa,sCACbC,EAAe,oCACfC,EAAgB,qCAChBC,EAAY,oCACZC,EAAY,oCACZC,EAAW,mCACXC,EAAa,qCACbC,EAAc,oCACdC,EAAc,sCACdC,EAAc,sCACdC,EAAY,sCAIT,CACLZ,kBACAC,cACAC,aACAC,eACAC,gBACAC,YACAI,cACAC,cACAC,cACAJ,WACAD,YACAE,aACAI,YACAC,YAAa,CACXR,EACAI,EACAC,EACAC,EACAL,EACAC,EACAC,EACAI,GAGN,CCzCO,SAASE,GAAuB1kH,GACrC,MAgCM,KAAEojB,EAAI,UAAEkJ,IAAc0oC,EAAAA,GAAAA,IAC1BL,EAAM,2CAjCmBgwD,MACzB,MAAMC,EAAQ,IAAI9vG,KAClB,IAAIG,EAAO,GACX,OAAQjV,EAAM6kH,OAAO9D,YAAY,IAC/B,IAAK,OAkBL,QACE9rG,EACE2vG,EAAME,WAAa,EACf,GAAGF,EAAM7sD,cAAgB,MAAM6sD,EAAME,WAAa,OAClD,GAAGF,EAAM7sD,cAAgB,KAAK6sD,EAAME,WAAa,OACvD,MAjBF,IAAK,YACH7vG,EACE2vG,EAAME,WAAa,EACf,GAAGF,EAAM7sD,cAAgB,MAAM6sD,EAAME,WAAa,OAClD,GAAGF,EAAM7sD,cAAgB,KAAK6sD,EAAME,WAAa,OACvD,MACF,IAAK,cACH7vG,EACE2vG,EAAME,WAAa,EACf,GAAGF,EAAM7sD,cAAgB,MAAM6sD,EAAME,WAAa,OAClD,GAAGF,EAAM7sD,cAAgB,KAAK6sD,EAAME,WAAa,OAS3D,OAAO7vG,CAAI,EAIsC0vG,kCAChDr9D,GAAgB8K,MAAM9K,GAAK14B,MAAMwgB,GAAMA,EAAE2I,WAGtCgtE,EAAiB9vG,IACrB,MAAM+vG,EAAU/vG,EACVgwG,EAAYD,GAASt6G,MAAM,MAAQ,GAEzC,OADgBu6G,EAAU,GAAK,IAAMA,EAAU,EACjC,EAGVC,OACKrgH,IAATue,EACIA,EAAKgyC,QAAQnrD,KAAI,EAAGgL,OAAMkwG,uBACjB,CACL3kH,MAAOukH,EAAc9vG,GACrBrX,MAAOunH,MAGX,GAEApkB,OACKl8F,IAATue,EACIA,EAAKgyC,QAAQnrD,KAAI,EAAGgL,OAAMmwG,uBACjB,CACL5kH,MAAOukH,EAAc9vG,GACrBrX,MAAOwnH,MAGX,IAEA,UAAEnB,EAAS,SAAEE,GAAaR,KAEhC,OAAIr3F,GAEAppB,EAAAA,EAAAA,KAACqpB,GAAAA,EAAQ,CAAAnpB,UACPF,EAAAA,EAAAA,KAACspB,GAAAA,EAAO,OAKZtpB,EAAAA,EAAAA,KAACod,GAAkB,CACjBK,OAAQ,CACN,CAAEngB,MAAO,0BAA2BhB,MAAOykH,EAAWj3G,OAAQk4G,GAC9D,CAAE1kH,MAAO,wBAAyBhB,MAAO2kH,EAAUn3G,OAAQ+zF,IAE7DxgF,OAAO,QACPC,OAAO,eACPja,QAAQ,YACRkZ,WAAS,EACTiB,kBAAgB,EAChBW,QAAS,CAAEjV,MAAO,IAClBwT,iBAAiB,GAGvB,CC7EO,SAASylG,KACd,MAAM,EAAEj7G,IAAMC,EAAAA,EAAAA,MACRipB,EC/BD,WACL,MAAM,EAAElpB,IAAMC,EAAAA,EAAAA,MAqBd,OApBuB9C,EAAAA,EAAAA,UACrB,IAAM,CACJ,CACE+H,IAAK,YACL9O,MAAO4J,EAAE,UACTzD,KAAMysB,GAAkBS,aACxB2zB,MAAO,YACPj+B,QAAS,CACP,CAAE/oB,MAAO4J,EAAE,aAAcxM,MAAO,QAChC,CAAE4C,MAAO4J,EAAE,kBAAmBxM,MAAO,aACrC,CAAE4C,MAAO4J,EAAE,oBAAqBxM,MAAO,gBAEzC0rB,YAAalf,EAAE,iBACfuD,UAAU,EACVuiB,YAAY,EACZY,aAAc,UAGlB,CAAC1mB,GAGL,CDQyBk7G,IAChBvE,EAAWwE,IAAgB3mH,EAAAA,EAAAA,UAAuB,CAAEmiH,UAAW,CAAC,UACjEyE,EAAarsD,GAAiBxE,EAAM,sBACpC,KAAEvxC,GAAS+1C,GAAoCxE,EAAM,iCAE3D,OACEnsD,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,sBACT+5C,eAAgB/5C,EAAE,sBAClB85C,UAAW95C,EACT,uMAEF0U,YAAa1U,EACX,0MAGJlH,EAAAA,EAAAA,KAACk1B,GAAW,CACV6D,MAAO62B,GACP7qC,UAAW7E,GAAM5D,MACjB8T,eAAgBA,EAChBE,eAAgB+xF,EAChBhyF,YAAawtF,EACb1pF,iBAAe,EACfC,iBAAe,EACfF,kBAAgB,EAChBoC,mBAAiB,KAEnBt2B,EAAAA,EAAAA,KAAC+X,GAAa,CAAA7X,UACZF,EAAAA,EAAAA,KAACwZ,GAAiB,CAChBnc,MAAO6J,EAAE,2BACTiP,MAAM,MACNG,OAAO,KACPgF,gBACEtb,EAAAA,EAAAA,KAACmK,EAAAA,EAAI,CAACG,WAAY,CAAED,QAAS,kBAAoBxI,MAAO,CAAEyW,IAAK,GAAIpY,UACjEF,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAAtK,UACPoF,EAAAA,EAAAA,MAACwV,GAAAA,EAAI,CAAC7S,UAAU,QAAO/H,SAAA,CAAC,2BACG,SACJyB,IAApB2gH,EAAWpiG,MACVoiG,EAAWpiG,KAAKqiG,iCACdD,EAAWpiG,KAAKqiG,iCAAiC9pF,MAAM,EAAG,IAC1DvxB,EAAE,eAIbhH,UAEDF,EAAAA,EAAAA,KAAC8iC,GAAAA,EAAQ,CAAA5iC,UACPF,EAAAA,EAAAA,KAACwhH,GAAsB,CAACG,OAAQ9D,YAM5C,C,gBE1EO,SAAS2E,GAAsB1lH,GACpC,OACEkD,EAAAA,EAAAA,KAACwZ,GAAiB,CAACrD,MAAM,MAAMsE,WAAS,EAAAva,UACtCF,EAAAA,EAAAA,KAAC8iC,GAAAA,EAAQ,CAAA5iC,UACPF,EAAAA,EAAAA,KAAA,OACE,UAAQ,qBACR6B,MAAO,CACL0N,QAAS,OACTnF,SAAU,OACVG,eAAgB,eAChB7E,YAAa,EACbkC,aAAc,EACd0Q,IAAK,IACLpY,SAEDpD,EAAM2lH,OAAO17G,KAAI,CAACsV,EAAMrV,KACvB,MAAM7J,EAAKkf,EAAKhf,MAAMH,cAAcvC,QAAQ,KAAM,KAC5C+vB,EACJrO,EAAKqO,OACLrO,EAAKomG,QAAQ1kG,QAAe,CAACC,EAAa0kG,IAAS1kG,GAAO0kG,EAAKpmG,OAAS,IAAI,IAC5E,EACF,OACEhX,EAAAA,EAAAA,MAAA,OACE,UAASnI,EACTA,GAAIA,EAEJ0E,MAAO,CAAE0N,QAAS,OAAQ+I,IAAK,GAAIxP,WAAY,UAAW5I,SAAA,EAE1DF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CAACC,GAAIuU,EAAKvU,GAAIjG,MAAO,CAAEvF,MAAO,oCAAqC4D,UACtEoF,EAAAA,EAAAA,MAACyV,GAAAA,EAAK,CACJC,aAAa,KACbzf,KAAK,KACLsG,MAAO,CAAE6T,WAAY,SAAUuH,eAAgB,QAAS/c,SAAA,CAEvDwqB,EAAM,IAAErO,EAAKhf,WAOjBqtB,GAAS,WAAYrO,GAAQA,EAAKomG,QACjCn9G,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAA,OACE7C,GAAI,GAAGA,UACP0E,MAAO,CAAE2Y,UAAW,GAAI2N,WAAY,EAAGC,cAAe,GAAIloB,UAE1DF,EAAAA,EAAAA,KAAC2iH,GAAAA,EAAQ,CACPxkG,QAAS,CAAEC,IAAK,EAAGE,KAAM,EAAGpV,MAAO,EAAGmV,OAAQ,GAC9ClI,MAAO,GACPG,OAAQ,GACR4J,KAAM7D,EAAKomG,OAAO17G,KAAKuV,IAAK,CAAQ+D,EAAG,IAAKpB,EAAG3C,EAAMA,UACrDyC,WAAY1C,EAAKomG,OAAO17G,KAAKuV,GAAUA,EAAMhgB,QAC7CkjB,aAAc,EACdojG,cAAc,OAGlB5iH,EAAAA,EAAAA,KAACic,GAAe,CAAC9e,GAAI,GAAGA,WAAaif,OAAQC,EAAKomG,aAIpDziH,EAAAA,EAAAA,KAAA,QAAM7C,GAAI,GAAGA,UAAY0E,MAAO,CAAE4wC,SAAU,WAAYv3B,WAAY,GAAIhb,SACrEwqB,MArCA1jB,EAwCD,SAOpB,CChFO,SAAS67G,GAAc/lH,GAC5B,MAAM,IAAQqK,EAAAA,EAAAA,OACR,KAAE+Y,GAASpjB,GACX,gBAAE4jH,EAAe,YAAEC,GAAgBF,KACnC77D,EAAaT,KACnB,OACEnkD,EAAAA,EAAAA,KAACwiH,GAAqB,CACpBC,OAAQ,CACN,CACEplH,MAAO6J,EAAE,SACTY,GAAI88C,EAAWgW,GAASkoD,OACxBL,OAAQviG,GAAMg6C,OAAOxvC,MACjB,CACE,CACEptB,MAAO4J,EAAE,SACToV,MAAO4D,EAAKg6C,MAAMxvC,MAAQxK,EAAKg6C,MAAM8S,OACrC1wE,MAAOokH,GAET,CACEpjH,MAAO4J,EAAE,UACToV,MAAO4D,EAAKg6C,MAAM8S,OAClB1wE,MAAOqkH,SAGXh/G,GAEN,CACEtE,MAAO6J,EAAE,YACTY,GAAI88C,EAAWgW,GAASmoD,UACxBN,OAAQviG,GAAMo6C,UAAU5vC,MACpB,CACE,CACEptB,MAAO4J,EAAE,SACToV,MAAO4D,EAAKo6C,SAAS5vC,MAAQxK,EAAKo6C,SAAS0S,OAC3C1wE,MAAOokH,EACPlsG,KAAMowC,EAAWgW,GAASmoD,UAAY,sBAExC,CACEzlH,MAAO4J,EAAE,UACToV,MAAO4D,EAAKo6C,SAAS0S,OACrB1wE,MAAOqkH,EACPnsG,KAAMowC,EAAWgW,GAASmoD,UAAY,+CAG1CphH,GAEN,CACEtE,MAAO6J,EAAE,eACTY,GAAI88C,EAAWgW,GAASooD,aACxBP,OAAQviG,GAAMi6C,aAAazvC,MACvB,CACE,CACEptB,MAAO4J,EAAE,UACToV,MAAO4D,EAAKi6C,YAAYzvC,MAAQxK,EAAKi6C,YAAY8oD,iBACjD3mH,MAAOokH,GAET,CACEpjH,MAAO4J,EAAE,mBACToV,MAAO4D,EAAKi6C,YAAY8oD,iBACxB3mH,MAAOqkH,SAGXh/G,KAKd,CClDO,SAASuhH,GAAUpmH,GAKxB,MAAM8nD,EAAaT,MAEb,EAAEj9C,IAAMC,EAAAA,EAAAA,OACR,OAAEw6G,EAAM,QAAEzxB,GAAYpzF,GAEtB,KAAEojB,EAAI,UAAEkJ,IAAc0oC,EAAAA,GAAAA,IAC1BL,EAAM,oCAAoCy+B,GAAW,gBAAgByxB,GAAU,WAC9Ev9D,GAAgB8K,MAAM9K,GAAK14B,MAAMwgB,GAAMA,EAAE2I,WAGtCsuE,EAAWC,IACf,MAAMrxG,EAAO,IAAIH,KAAgB,IAAXwxG,EAAM,IAC5B,IAAI9lH,EAQJ,OALIA,EADG,QADCqkH,EAEI,GAAG5vG,EAAKG,uBAGR,GAAGH,EAAK6vG,WAAa,KAAK7vG,EAAKsxG,YAEpC,CAAE/lH,QAAO5C,MAAO0oH,EAAM,GAAI,EAG7Bp2C,EAAS9sD,GAAMw6C,MAAMsS,OAAOjmE,IAAIo8G,IAAY,GAC5Cx1C,EAAaztD,GAAMw6C,MAAMiT,WAAW5mE,IAAIo8G,IAAY,GACpDv2C,EAAW1sD,GAAMw6C,MAAMkS,UAAU7lE,IAAIo8G,IAAY,GACjDn2G,EAAQkT,GAAMw6C,MAAM1tD,OAAOjG,IAAIo8G,IAAY,IAE3C,gBAAEzC,EAAe,YAAEC,EAAW,WAAEC,EAAU,cAAEE,GAAkBL,KAEpE,OAAIr3F,GAEAppB,EAAAA,EAAAA,KAACqpB,GAAAA,EAAQ,CAAAnpB,UACPF,EAAAA,EAAAA,KAACspB,GAAAA,EAAO,OAKZtpB,EAAAA,EAAAA,KAACod,GAAkB,CACjBE,OAAQpW,EAAE,aACV7D,QAAQ,mBACRoa,OAAQ,CACN,CACEngB,MAAO4J,EAAE,WACT5K,MAAOokH,EACP52G,OAAQ6jE,EACRn5D,KAAMowC,EAAWgW,GAAS0oD,MAAQ,sBAEpC,CACEhmH,MAAO4J,EAAE,SACT5K,MAAOskH,EACP92G,OAAQkD,EACRwH,KAAMowC,EAAWgW,GAAS0oD,MAAQ,iBAEpC,CACEhmH,MAAO4J,EAAE,UACT5K,MAAOqkH,EACP72G,OAAQkjE,EACRx4D,KAAMowC,EAAWgW,GAAS0oD,MAAQ,kBAEpC,CACEhmH,MAAO4J,EAAE,YACT5K,MAAOwkH,EACPh3G,OAAQ8iE,EACRp4D,KAAMowC,EAAWgW,GAAS0oD,MAAQ,qBAGtChtG,OAAQxZ,EAAMwZ,QAGpB,CC1FO,SAASitG,KACd,MAAM,EAAEr8G,IAAMC,EAAAA,EAAAA,OACPw6G,EAAQ6B,IAAa9nH,EAAAA,EAAAA,UAAoC,UACzDw0F,EAASuzB,IAAc/nH,EAAAA,EAAAA,UAAkC,OAC1DkpD,EAAaT,KACnB,OACEnkD,EAAAA,EAAAA,KAACwZ,GAAiB,CAChBnc,MAAO6J,EAAE,gBACTwT,SAAUxT,EAAE,iBACZY,GAAI88C,EAAWgW,GAAS0oD,MACxBntG,MAAM,MACNG,OAAO,KACPgF,gBACEhW,EAAAA,EAAAA,MAAC6E,EAAAA,EAAI,CAACG,WAAY,CAAED,QAAS,kBAAoBxI,MAAO,CAAEyW,IAAK,GAAIpY,SAAA,EACjEF,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAAtK,UACPF,EAAAA,EAAAA,KAAC4sB,GAAgB,CACfxG,YAAalf,EAAE,iBACfxM,MAAOinH,EACP77G,SAAU09G,EACVn9F,QAAS,CACP,CAAE/oB,MAAO4J,EAAE,cAAexM,MAAO,SACjC,CAAE4C,MAAO4J,EAAE,kBAAmBxM,MAAO,aACrC,CAAE4C,MAAO4J,EAAE,aAAcxM,MAAO,SAGlCsyB,YAAU,OAGdhtB,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAAtK,UACPF,EAAAA,EAAAA,KAAC4sB,GAAgB,CACfxG,YAAalf,EAAE,oBACfxM,MAAOw1F,EACPpqF,SAAU29G,EACVp9F,QAAS,CACP,CAAE/oB,MAAO4J,EAAE,iBAAkBxM,MAAO,OACpC,CAAE4C,MAAO4J,EAAE,kBAAmBxM,MAAO,YACrC,CAAE4C,MAAO4J,EAAE,cAAexM,MAAO,cACjC,CAAE4C,MAAO4J,EAAE,gBAAiBxM,MAAO,iBAErCsyB,YAAU,SAIjB9sB,UAEDF,EAAAA,EAAAA,KAAC8iC,GAAAA,EAAQ,CAAA5iC,UACPF,EAAAA,EAAAA,KAACkjH,GAAS,CAACvB,OAAQA,EAASzxB,QAASA,OAI7C,CC1CO,SAASwzB,KACd,MAAM,EAAEx8G,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACfC,EAAaT,MAEb,KAAEjkC,GAAS0jD,GAA6CnS,EAAM,iBAC9DkyD,EAAqB3+G,QAAQkb,GAAQA,EAAK5c,SAAW4c,EAAK5c,QAAc,MAExEwpC,EAAO6zB,GAAsB,CACjCvc,IAAKqN,EAAM,gBACXjH,oBAAoB,EACpB1lB,YAAa,WACbC,qBAAsB,SAGxB,IAAIltB,EAAUspF,KAGd,OAFAtpF,EAAUqL,GAAoBrL,IAG5B7X,EAAAA,EAAAA,KAACwZ,GAAiB,CAChBnc,MAAO6J,EAAE,eACTmU,SAAUnU,EAAE,gCACZiP,MAAM,KACNG,OAAO,KACPoE,SAAUxT,EAAE,wBACZY,GAAI88C,EAAWgW,GAASooD,aAAa9iH,UAErCF,EAAAA,EAAAA,KAACkkC,GAAS,CACR2G,oBAAoB,EACpB3I,aAAcrqB,EACd0e,oBAAoB,EACpB0O,gBAAiB/9B,EAAE,6BACnBogC,eAAgBxP,GAAAA,GAChByN,sBAAsBvlC,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrC8rF,kBAAmB,QACnB1+E,gBAAiBh+B,EAAE,sCACnBi+B,sBAEMj+B,EADJy8G,EACM,oDAEA,yFAGRr+E,qBAAsBq+E,EAAqBz8G,EAAE,yBAAsBvF,EACnE0jC,sBACEs+E,EAAqB,IAAM3oD,EAAaJ,GAASipD,sBAAmBliH,KAElEmrC,EACJtN,SAAO,EACPza,eAA8BpjB,IAAnBmrC,EAAK/nB,UAA0BpX,KAAKkyB,IAAIiN,EAAK/nB,UAAW,QAAKpjB,EACxE+iB,UAAWooB,EAAKpoB,UAAYooB,EAAKpoB,UAAU+T,MAAM,EAAG,GAAK,GACzD2O,sBAAoB,KAI5B,CCjEO,SAAS08E,GAAcrgH,GAC5B,OAAQA,GACN,IAAK,iBACH,OAAOguD,EAAM,oBACf,IAAK,mBACH,OAAOA,EAAM,sBACf,IAAK,iBACH,OAAOA,EAAM,oBACf,IAAK,aACH,OAAOA,EAAM,gBACf,IAAK,eACH,OAAOA,EAAM,kBACf,QACE,OAAOA,EAAM,SAEnB,CAaO,SAASsyD,GAAar5E,GAC3B,MAAO,CAAC,MAAO,UAAW,UAAW,WAAWniC,SAASmiC,GAAU,UACrE,CAGO,SAASs5E,GAAiB7qC,GAC/B,OAAQA,EAAI11E,MACV,IAAK,iBACH,OAAOguD,EAAM,oBAAoB0nB,EAAIh8E,GAAGqhB,uBAC1C,IAAK,eACH,OAAOizC,EAAM,kBAAkB0nB,EAAIh8E,GAAGqhB,uBACxC,IAAK,MACH,OAAOizC,EAAM,SAAS0nB,EAAIh8E,GAAGqhB,uBAC/B,IAAK,mBACH,OAAO26D,EAAI8qC,iBAAmBxyD,EAAM,sBAAsB0nB,EAAI8qC,2BAA6B,GAC7F,IAAK,iBACH,OAAO9qC,EAAIvI,QAAUnf,EAAM,aAAa0nB,EAAIvI,kBAAoB,GAClE,QACE,MAAO,GAEb,CAKO,SAASszC,KACd,MAAMt/D,EAAaT,KA2CnB,OA1CuB9/C,EAAAA,EAAAA,UAAqC,IAClD80E,IACN,MAAM4E,EAAa5E,EAAIhe,gBAAgBogB,sBAAsBp+E,GACvDgnH,EAAahrC,EAAIhe,gBAAgBipD,UAAUjnH,GAC3Cw4F,EAAcxc,EAAIhe,gBAAgBoV,UAAY4I,EAAIhe,eAAeoV,UAAUpzE,GAAK,KACtF,IAAIknH,EAAc,GAClB,GAAItmC,GAAcomC,EAChB,OAAQhrC,EAAI11E,MACV,IAAK,mBACH4gH,EAAc1uB,EACV/wC,EAAWgW,GAAS0pD,+BAAgC,CAClDjgE,OAAQ,CAAElnD,GAAIw4F,EAAaC,UAAW7X,EAAYwmC,YAAaJ,KAEjE,GACJ,MACF,IAAK,MACHE,EAAcz/D,EAAWgW,GAAS4pD,2BAA4B,CAC5DngE,OAAQ,CAAElnD,GAAI4gF,EAAYwmC,YAAaJ,KAEzC,MACF,IAAK,iBACHE,EAAcz/D,EAAWgW,GAAS6pD,uBAAwB,CACxDpgE,OAAQ,CAAElnD,GAAI4gF,EAAYwmC,YAAaJ,KAEzC,MACF,IAAK,aACHE,EAAcz/D,EAAWgW,GAAS8pD,6BAA8B,CAC9DrgE,OAAQ,CAAElnD,GAAI4gF,EAAYwmC,YAAaJ,KAEzC,MACF,IAAK,eACHE,EAAcz/D,EAAWgW,GAAS+pD,mCAAoC,CACpEtgE,OAAQ,CAAElnD,GAAI4gF,EAAYwmC,YAAaJ,KAO/C,OAAOE,CAAW,GAEnB,CAACz/D,GAEN,CAUO,SAASggE,KACd,MAAMhgE,EAAaT,KACb0gE,EAAiBX,KA6CvB,OA5C6B7/G,EAAAA,EAAAA,UAAyC,IAC5D80E,IACN,MAAM2rC,EAAY3rC,EAAIhe,gBAAgByU,WAChC6vC,EAActmC,EAAIhe,gBAAgB4pD,aAClCC,EAAa7rC,EAAIhe,gBAAgB8pD,sBACjCb,EAAWjrC,EAAIhe,gBAAgBipD,SAErC,IAAKU,IAAcV,EACjB,MAAO,CAAC,EAGV,IAAI5vG,EACA9Z,EAEJ,OAAQy+E,EAAI+rC,aACV,IAAK,UACHxqH,EAAQ,UACR8Z,EAAOirG,EACH76D,EAAWgW,GAASu4B,mBAAoB,CAAE9uC,OAAQ,CAAElnD,GAAIsiH,EAAYtiH,MACpE6nH,EACEpgE,EAAWgW,GAAS06B,2BAA4B,CAAEjxC,OAAQ,CAAElnD,GAAI6nH,EAAW7nH,MAC3E,GACN,MACF,IAAK,YACHzC,EAAQ0pH,GAAUhnH,MAAQ,GAC1BoX,EAAOqwG,EAAe1rC,GACtB,MAOF,QACE3kE,EAAOswG,GAAW3nH,GACdynD,EAAWgW,GAASiB,YAAa,CAAExX,OAAQ,CAAElnD,GAAI2nH,EAAU3nH,MAC3D,GACJzC,EAAQoqH,EAAYA,EAAUlpD,SAAW,GAI7C,MAAO,CAAEpnD,OAAM9Z,QAAO,GAEvB,CAACkqD,EAAYigE,GAElB,CC5IO,SAASM,GAAe9+F,GAC7B,MAAM,IAAQlf,EAAAA,EAAAA,MACRy9C,EAAaT,KACb0gE,EAAiBX,MAEjB,KAAEhkG,GAAS0jD,GAA6CnS,EAAM,uBAC9D2zD,GAAyB/gH,EAAAA,EAAAA,UAC7B,IACE6b,GACAA,EAAK5c,SACL4c,EAAK5c,QAAa,KAClB4c,EAAK5c,QAAa,IAAEu2B,QACpB5gB,MAAMC,QAAQgH,EAAK5c,QAAa,IAAEu2B,OAAOgsC,SACrC3lD,EAAK5c,QAAa,IAAEu2B,OAAOgsC,QAC3B,IACN,CAAC3lD,IAGGumF,EAAkBL,KAClBif,EAAuBT,KAkW7B,OAhWqBvgH,EAAAA,EAAAA,UACnB,IAAM,CACJ,CACEyc,OAAQ5Z,EAAE,MACV4b,KAAOq2D,GAAoBA,EAAIh8E,GAC/BiC,KAAM,KACN0hC,KAAM,SACNuC,KAAM,SACN9f,UAAW,SACX5T,SAAU,GAEZ,CACEmR,OAAQ5Z,EAAE,QACV4b,KAAOq2D,IAEHn5E,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAM0qE,EAAI/7E,KACV0K,GAAI2+F,EAAgBttB,GACpBtjE,aAAcwQ,GAASxQ,eAI7BzW,KAAM,OACN0hC,KAAM,OACNuC,KAAM,QAER,CACEviB,OAAQ5Z,EAAE,UACV4b,KAAOq2D,IAAoBn5E,EAAAA,EAAAA,KAACosE,GAAU,CAAC1hC,OAAQyuC,EAAIzuC,SACnDtrC,KAAM,UAER,CACE0hB,OAAQ5Z,EAAE,QACV4b,KAAOq2D,IACL,MAAMmsC,EAAsC,CAC1ClsC,eAAgBlyE,CAAC,wBACjBmyE,iBAAkBnyE,CAAC,iBACnBiyE,IAAsB,UAAjBA,EAAIgJ,SAAuBj7E,CAAC,iBAAmBA,CAAC,eACrDo/F,eAAgBp/F,CAAC,UACjBoyE,WAAYpyE,CAAC,iBACbk0D,aAAcl0D,CAAC,gBAEjB,OAAOlH,EAAAA,EAAAA,KAACmV,GAAQ,CAAC1G,KAAM62G,EAASnsC,EAAI11E,OAAS,EAE/CrE,KAAM,OACN0hC,KAAM,WACNuC,KAAM,WACN9f,UAAW,UAEb,CACEzC,OAAQ5Z,EAAE,YACV4b,KAAOq2D,GACLA,EAAIosC,UAAWvlH,EAAAA,EAAAA,KAACqT,GAAe,CAACC,MAAO6lE,EAAIosC,QAAS/xG,OAAQ2lE,EAAIwtB,WAClE3jF,MAAOP,GAAkBQ,OACzBM,UAAW,UAEb,CACEzC,OAAQ5Z,EAAE,WACV4b,KAAOq2D,GAAoBA,EAAIosC,UAAWvlH,EAAAA,EAAAA,KAACqS,GAAY,CAAC3X,MAAOy+E,EAAIosC,UACnEnmH,KAAM,UACNikC,KAAM,YACN0B,qBAAsB,OACtB/hB,MAAOP,GAAkBQ,OACzBM,UAAW,UAEb,CACEzC,OAAQ5Z,EAAE,YACV4b,KAAOq2D,GAAqBA,EAAIwtB,UAAW3mG,EAAAA,EAAAA,KAACqS,GAAY,CAAC3X,MAAOy+E,EAAIwtB,WAAe,KACnFvnG,KAAM,WACN0hC,KAAM,SACNuC,KAAM,YACN0B,qBAAsB,OACtBD,aAAa,EACb9hB,MAAOP,GAAkBQ,OACzBM,UAAW,UAEb,CACEzC,OAAQ5Z,EAAE,UACV4b,KAAOq2D,GACLisC,GAAwBr+G,KAAI,EAAEwnE,EAAQjxE,KAAYixE,IAAW4K,EAAIt/C,OAASv8B,EAAQ,OACpF5C,MAAQy+E,GAAqBA,EAAIt/C,OAASs/C,EAAIt/C,YAASl4B,EACvDwhB,MAAOb,GAAkBc,SACzB0d,KAAM,SACNuC,KAAM,SACN0B,qBAAsB,OACtB/hB,MAAOP,GAAkBQ,OACzBM,UAAW,UAEb,CACEzC,OAAQ5Z,EAAE,eACV4b,KAAOq2D,IACL,MAAQz+E,MAAO8qH,EAAiBhxG,KAAMixG,GAAmBJ,EAAqBlsC,IAAQ,CAAC,EACvF,OAAIssC,GACKzlH,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CAACC,GAAI,GAAG29G,IAAiBvlH,SAAEslH,IAEhCA,CACT,EAEFriG,MAAOb,GAAkBc,SACzB0d,KAAM,SACNuC,KAAM,SACN0B,qBAAsB,OACtB/hB,MAAOP,GAAkBQ,OACzBM,UAAW,UAEb,CACEzC,OAAQ5Z,EAAE,YACV4b,KAAOq2D,IAEHn5E,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CAACC,GAAIqxE,EAAIhe,gBAAgBipD,SAAWS,EAAe1rC,IAAQ,GAAK,GAAGj5E,SACrEi5E,EAAIhe,gBAAgBipD,UAAUhnH,OAIrC1C,MAAQy+E,GAAoBA,EAAIhe,gBAAgBipD,UAAUhnH,KAC1D+lB,MAAOb,GAAkBc,SACzB0d,KAAM,SACNuC,KAAM,SACN0B,qBAAsB,OACtB/hB,MAAOP,GAAkBQ,OACzBM,UAAW,UAEb,CACEzC,OAAQ5Z,EAAE,gBACV4b,KAAOq2D,IACLn5E,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAASu4B,mBAAoB,CAC1C9uC,OAAQ,CAAElnD,GAAIg8E,EAAIhe,gBAAgB4pD,cAAc5nH,MAC/C+C,SAEFi5E,EAAIhe,gBAAgB4pD,cAAc3nH,OAGvC1C,MAAQy+E,GAAoBA,EAAIhe,gBAAgB4pD,cAAc3nH,KAC9D+lB,MAAOb,GAAkBc,SACzB0d,KAAM,SACNuC,KAAM,SACN0B,qBAAsB,OACtB/hB,MAAOP,GAAkBQ,OACzBM,UAAW,UAEb,CACEzC,OAAQ5Z,EAAE,yBACV4b,KAAOq2D,IACLn5E,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS06B,2BAA4B,CAClDjxC,OAAQ,CAAElnD,GAAIg8E,EAAIhe,gBAAgB8pD,uBAAuB9nH,MACxD+C,SAEFi5E,EAAIhe,gBAAgB8pD,uBAAuB7nH,OAGhD1C,MAAQy+E,GAAoBA,EAAIhe,gBAAgB8pD,uBAAuB7nH,KACvE+lB,MAAOb,GAAkBc,SACzB0d,KAAM,SACNuC,KAAM,SACN0B,qBAAsB,OACtB/hB,MAAOP,GAAkBQ,OACzBM,UAAW,UAEb,CACEzC,OAAQ5Z,EAAE,uBACV4b,KAAOq2D,IACLn5E,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS8qD,WAAY,CAClCrhE,OAAQ,CACN89B,SAAU,WACVhlF,GAAIg8E,EAAIhe,eAAewqD,qBAAqBxoH,MAE7C+C,SAEFi5E,EAAIhe,eAAewqD,qBAAqBvoH,OAG7C1C,MAAQy+E,GAAoBA,EAAIhe,gBAAgBwqD,qBAAqBvoH,KACrE+lB,MAAOb,GAAkBc,SACzB0d,KAAM,SACNuC,KAAM,SACN0B,qBAAsB,OACtB/hB,MAAOP,GAAkBQ,OACzBM,UAAW,UAEb,CACEzC,OAAQ5Z,EAAE,aACV4b,KAAOq2D,IACLn5E,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS82B,iBAAkB,CACxCrtC,OAAQ,CACNmsB,eAAgBC,GAAkB0I,EAAIhe,gBAAgBoV,WAAWzB,MAAQ,IACzE3xE,GAAIg8E,EAAIhe,gBAAgBoV,WAAWpzE,MAEpC+C,SAEFi5E,EAAIhe,gBAAgBoV,WAAWnzE,OAGpC+jB,SAAUja,EAAE,+BACZxM,MAAQy+E,GAAoBA,EAAIhe,gBAAgBoV,WAAWnzE,KAC3D+lB,MAAOb,GAAkBc,SACzB0d,KAAM,SACNuC,KAAM,SACN0B,qBAAsB,OACtB/hB,MAAOP,GAAkBQ,OACzBM,UAAW,UAEb,CACEzC,OAAQ5Z,EAAE,WACVia,SAAUja,EAAE,8DACZ4b,KAAOq2D,IACLn5E,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAASg3B,eAAgB,CACtCvtC,OAAQ,CAAElnD,GAAIg8E,EAAIhe,gBAAgByV,SAASzzE,MAC1C+C,SAEFi5E,EAAIhe,gBAAgByV,SAASxzE,OAGlC1C,MAAQy+E,GAAoBA,EAAIhe,gBAAgByV,SAASxzE,KACzD+lB,MAAOb,GAAkBc,SACzB0d,KAAM,SACNuC,KAAM,SACN0B,qBAAsB,OACtB/hB,MAAOP,GAAkBQ,OACzBM,UAAW,UAEb,CACEzC,OAAQ5Z,EAAE,yBACVia,SAAUja,EAAE,kDACZ4b,KAAOq2D,IACLn5E,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS85B,4BAA6B,CACnDrwC,OAAQ,CAAElnD,GAAIg8E,EAAIhe,eAAeymB,uBAAuBzkF,MACvD+C,SAEFi5E,EAAIhe,eAAeymB,uBAAuBxkF,OAG/C1C,MAAQy+E,GACNA,EAAIhe,gBAAgBymB,sBAChBzI,EAAIhe,gBAAgBymB,sBAAsBxkF,UAC1CuE,EACNwhB,MAAOb,GAAkBc,SACzB0d,KAAM,SACNuC,KAAM,SACN0B,qBAAsB,OACtB/hB,MAAOP,GAAkBQ,OACzBM,UAAW,UAEb,CACEzC,OAAQ5Z,EAAE,eACVia,SAAUja,EAAE,wEACZ4b,KAAOq2D,IACLn5E,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CACTC,UAAW,EACXyxG,cAAe1+G,EAAE,iBAAkB,CACjCoV,OAAQ68D,EAAIhe,eAAehM,aAAa3rD,QAAU,GAAK,IACtDtD,SAEFi5E,EAAIhe,eAAehM,aAAapoD,KAAK61F,IACpC58F,EAAAA,EAAAA,KAAC2uE,GAAe,CAACC,WAAYguB,GAAWA,EAAKz/F,QAInDzC,MAAQy+E,GACNA,EAAIhe,gBAAgBhM,aAAa3rD,OAC7B21E,EAAIhe,gBAAgBhM,aAAa3rD,YACjC7B,EACNwhB,MAAOb,GAAkBc,SACzB0d,KAAM,SACNuC,KAAM,SACN0B,qBAAsB,OACtB/hB,MAAOP,GAAkBQ,OACzBM,UAAW,UAEb,CACEzC,OAAQ5Z,EAAE,UACVia,SAAUja,EAAE,gCACZ4b,KAAOq2D,IACLn5E,EAAAA,EAAAA,KAACqoB,GAAAA,EAAS,CACRC,SAAU,EACVs9F,cAAe1+G,EAAE,iBAAkB,CACjCoV,OAAQ68D,EAAIhe,gBAAgBjxD,QAAQgoD,QAAQ1uD,QAAU,GAAK,IAE7DiF,OAAQ,OAAO0wE,EAAIh8E,iBAAiB+C,SAEnCi5E,EAAIhe,gBAAgBjxD,QAAQgoD,QAAQnrD,KAAKklC,IACxCjsC,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAAYC,YAAU,EAACzf,OAAQ,SAASwjC,EAAE9uC,UAAU+C,SACtD+rC,EAAE7uC,MADM6uC,EAAE9uC,QAMnBzC,MAAQy+E,GACNA,EAAIhe,gBAAgBjxD,QAAQgoD,QAAQ1uD,OAChC21E,EAAIhe,gBAAgBjxD,QAAQgoD,QAAQ1uD,YACpC7B,EACNwhB,MAAOb,GAAkBc,SACzB0d,KAAM,SACNuC,KAAM,SACN0B,qBAAsB,OACtB/hB,MAAOP,GAAkBQ,OACzBM,UAAW,UAEb,CACEzC,OAAQ5Z,EAAE,eACV4b,KAAOq2D,GAAoBA,EAAI0sC,gBAC/BnrH,MAAQy+E,GAAqBA,EAAI0sC,gBAAkB1sC,EAAI0sC,qBAAkBlkH,EACzEwhB,MAAOb,GAAkBc,SACzB0d,KAAM,SACNuC,KAAM,SACN0B,qBAAsB,OACtB/hB,MAAOP,GAAkBQ,OACzBM,UAAW,UAEb,CACEzC,OAAQ5Z,EAAE,aACVia,SAAUja,EACR,sJAEF4b,KAAOq2D,IACLn5E,EAAAA,EAAAA,KAAA,QAAAE,SAAO,GAAGi5E,EAAI2sC,kBAAoB,MAAM3sC,EAAI8I,iBAAmB,GAAGzjE,eAEpE9jB,MAAQy+E,GAAoBA,EAAI8I,gBAChC9+D,MAAOb,GAAkBc,SACzB0d,KAAM,SACNuC,KAAM,SACN0B,qBAAsB,OACtB/hB,MAAOP,GAAkBQ,OACzBM,UAAW,UAEb,CACEzC,OAAQ5Z,EAAE,oBACV4b,KAAOijG,IAAqB/lH,EAAAA,EAAAA,KAAA,QAAAE,SAAOgH,CAAC,SACpCxM,MAAQy+E,GAAiC,iBAAbA,EAAI11E,MAA2B01E,EAAI6sC,cAC/D7iG,MAAOb,GAAkBc,SACzB0d,KAAM,SACNuC,KAAM,SACN0B,qBAAsB,OACtB/hB,MAAOP,GAAkBQ,OACzBM,UAAW,YAGf,CACEkjF,EACA7hD,EACAwgE,EACA/+F,GAASxQ,aACT3O,EACAm+G,EACAR,GAIN,CAEA,MAAMp0C,GAA+C,CACnD,GAAI,YACJO,MAAO,kBACPC,YAAa,yBCrYR,SAASg1C,KACd,MAAMrhE,EAAaT,KACbrX,EAAO6zB,GAAgB,CAC3Bvc,IAAKqN,EAAM,iBACXjH,oBAAoB,EACpB1lB,YAAa,WACbC,qBAAsB,UAElB,EAAE79B,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACrB,IAAI9sC,EAAUstG,KACdttG,EAAUqL,GAAoBrL,GAE9B,MAAQqI,KAAMgmG,GAAuBtiD,GACnCnS,EAAM,oBAEAvxC,KAAMimG,GAAyBviD,GACrCnS,EAAM,4BAEF20D,EAAuBphH,QAC3BkhH,GAAsBA,EAAmB5iH,SAAW4iH,EAAmB5iH,QAAc,MAEjF+iH,EAAyBrhH,QAC7BmhH,GAAwBA,EAAqB7iH,SAAW6iH,EAAqB7iH,QAAc,MAG7F,OACEtD,EAAAA,EAAAA,KAACwZ,GAAiB,CAChBnc,MAAO6J,EAAE,QACTmU,SAAUnU,EAAE,0BACZiP,MAAM,KACNG,OAAO,KACPoE,SAAUxT,EAAE,iBACZY,GAAI88C,EAAWgW,GAAS0oD,MAAMpjH,UAE9BF,EAAAA,EAAAA,KAACkkC,GAAS,CACR2G,oBAAoB,EACpB3I,aAAcrqB,EACd0e,oBAAoB,EACpB0O,gBAAiB/9B,EAAE,sBACnBogC,eAAgBxP,GAAAA,GAChByN,sBAAsBvlC,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrC8rF,kBAAmB,QACnB1+E,gBAAiBh+B,EAAE,+BACnBi+B,sBAEMj+B,EADJk/G,GAAwBC,EAClB,6CAEA,yFAGR/gF,qBACE8gF,GAAwBC,EAAyBn/G,EAAE,mBAAgBvF,EAErE0jC,sBACE+gF,EAAuB,IAAMprD,EAAaJ,GAAS0rD,wBAAqB3kH,KAEtEmrC,EACJtN,SAAO,EACPza,eAA8BpjB,IAAnBmrC,EAAK/nB,UAA0BpX,KAAKkyB,IAAIiN,EAAK/nB,UAAW,QAAKpjB,EACxE+iB,UAAWooB,EAAKpoB,UAAYooB,EAAKpoB,UAAU+T,MAAM,EAAG,GAAK,GACzD2O,sBAAoB,KAI5B,CC7DO,SAASm/E,KACd,MAAMz5E,EAAO6zB,GAAoB,CAC/Bvc,IAAKqN,EAAM,aACXjH,oBAAoB,EACpB1lB,YAAa,WACbC,qBAAsB,UAElB,IAAQ59B,EAAAA,EAAAA,MACR6zD,EAAerW,KACfC,EAAaT,MAEb,KAAEjkC,GAAS0jD,GAA6CnS,EAAM,cAC9D+0D,EAAmBxhH,QAAQkb,GAAQA,EAAK5c,SAAW4c,EAAK5c,QAAc,MAE5E,IAAIuU,EAAUutF,KAGd,OAFAvtF,EAAUqL,GAAoBrL,IAG5B7X,EAAAA,EAAAA,KAACwZ,GAAiB,CAChBnc,MAAO6J,EAAE,YACTmU,SAAUnU,EAAE,6BACZiP,MAAM,KACNG,OAAO,KACPoE,SAAUxT,EAAE,qBACZY,GAAI88C,EAAWgW,GAASmoD,UAAU7iH,UAElCF,EAAAA,EAAAA,KAACkkC,GAAS,CACR2G,oBAAoB,EACpB3I,aAAcrqB,EACd0e,oBAAoB,EACpB0O,gBAAiB/9B,EAAE,0BACnBogC,eAAgBxP,GAAAA,GAChByN,sBAAsBvlC,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrC8rF,kBAAmB,QACnB1+E,gBAAiBh+B,EAAE,mCACnBi+B,sBAEMj+B,EADJs/G,EACM,iDAEA,yFAGRlhF,qBAAsBkhF,EAAmBt/G,EAAE,uBAAoBvF,EAC/D0jC,sBACEmhF,EAAmB,IAAMxrD,EAAaJ,GAAS6rD,oBAAiB9kH,KAE9DmrC,EACJtN,SAAO,EACPza,eAA8BpjB,IAAnBmrC,EAAK/nB,UAA0BpX,KAAKkyB,IAAIiN,EAAK/nB,UAAW,QAAKpjB,EACxE+iB,UAAWooB,EAAKpoB,UAAYooB,EAAKpoB,UAAU+T,MAAM,EAAG,GAAK,GACzD2O,sBAAoB,KAI5B,CCtDO,SAASs/E,KACd,MAAM,EAAEx/G,IAAMC,EAAAA,EAAAA,OACR,oBAAEw/G,EAAmB,iBAAEC,GCbxB,WACL,MAAM,EAAE1/G,IAAMC,EAAAA,EAAAA,MACR0Q,GAAUxT,EAAAA,EAAAA,UACd,IAAM,CACJ,CACEyc,OAAQ5Z,EAAE,uBACV4b,KAAOzG,GAAmBA,EAAKjf,QAGnC,CAAC8J,IAEGs0F,GAAwBn3F,EAAAA,EAAAA,UAC5B,IAAM,CACJ,CAAElH,GAAI,SAAUC,KAAM8J,EAAE,oBACxB,CAAE/J,GAAI,sBAAuBC,KAAM8J,EAAE,wBACrC,CAAE/J,GAAI,cAAeC,KAAM8J,EAAE,gBAC7B,CAAE/J,GAAI,kBAAmBC,KAAM8J,EAAE,oBACjC,CAAE/J,GAAI,qBAAsBC,KAAM8J,EAAE,yBAEtC,CAACA,KAEKy3B,gBAAiBgoF,EAAqB7nF,aAAc8nF,GAC1D9oF,GAAyB,CACvB3gC,GAAI,gBACJE,MAAO6J,EAAE,eACT0U,YAAa1U,EACX,mNAEF4xB,MAAO0iE,EACPziE,MAAQyiE,GAAcA,EAAUr+F,GAChC0a,UACAuiB,mBAAmB,IAGvB,MAAO,CACLusF,sBACAC,mBAEJ,CDzBoDC,GAUlD,OACEvhH,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,yBAA0B,CAAE4/G,QAZnBx8E,QAalB1uB,YAAa1U,EAAE,2EACfw5C,UAXF1gD,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAACrC,MAAMlD,EAAAA,EAAAA,KAAC8vF,GAAAA,GAAO,IAAKzsF,QAAQ,OAAOsD,QAASggH,EAAoBzmH,SACpEgH,EAAE,oBAYLlH,EAAAA,EAAAA,KAAC+mH,GAAmB,CAACH,iBAAkBA,MAG7C,CAEA,SAASG,GAAoBjqH,GAC3B,MAAM,iBAAE8pH,GAAqB9pH,GACvB,KAAEojB,EAAI,UAAEkJ,IAAc0oC,EAAAA,GAAAA,IAA0BL,EAAM,eAAgBrN,GAC1E8K,MAAM9K,GAAK14B,MAAMwgB,GAAMA,EAAE2I,WAE3B,OAAK30B,GAAQkJ,GAETppB,EAAAA,EAAAA,KAACoY,GAAAA,GAAW,CAACw3B,UAAQ,EAAA1vC,UACnBF,EAAAA,EAAAA,KAACqpB,GAAAA,EAAQ,CAAAnpB,UACPF,EAAAA,EAAAA,KAACspB,GAAAA,EAAO,SAOdtpB,EAAAA,EAAAA,KAAC+X,GAAa,CAAA7X,SACX0mH,EAAiB7/G,KAAKgtC,IACrB,OAAQA,EAAS52C,IACf,IAAK,SACH,OAAO6C,EAAAA,EAAAA,KAAC6iH,GAAa,CAAmB3iG,KAAMA,GAAnB6zB,EAAS52C,IACtC,IAAK,sBACH,OAAO6C,EAAAA,EAAAA,KAACujH,GAAkB,GAAMxvE,EAAS52C,IAC3C,IAAK,cACH,OAAO6C,EAAAA,EAAAA,KAACimH,GAAiB,GAAMlyE,EAAS52C,IAC1C,IAAK,kBACH,OAAO6C,EAAAA,EAAAA,KAACumH,GAAqB,GAAMxyE,EAAS52C,IAC9C,IAAK,qBACH,OAAO6C,EAAAA,EAAAA,KAAC0jH,GAAwB,GAAM3vE,EAAS52C,IACjD,QACE,OAAO6C,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,IACX,KAIR,CEvEO,SAASsiH,KACd,MAAM,EAAE9/G,IAAMC,EAAAA,EAAAA,MAqCd,OApCqB9C,EAAAA,EAAAA,UACnB,IAAM,CACJ,CACEyc,OAAQ5Z,EAAE,YACV4b,KAAOm1C,IAAqBj4D,EAAAA,EAAAA,KAACmV,GAAQ,CAAC1G,KAAMwpD,EAAKmX,WACjDhwE,KAAM,WACN0hC,KAAM,OACNuC,KAAM,OACN0B,qBAAsB,MACtBD,aAAa,GAEf,CACEhkB,OAAQ5Z,EAAE,mBACV4b,KAAOm1C,IAAqBj4D,EAAAA,EAAAA,KAAC8R,GAAQ,CAACpX,MAAOu9D,EAAKgvD,mBAClD7nH,KAAM,oBAER,CACE0hB,OAAQ5Z,EAAE,kBACV4b,KAAOm1C,IAAqBj4D,EAAAA,EAAAA,KAAC8R,GAAQ,CAACpX,MAAOu9D,EAAKivD,kBAClD9nH,KAAM,mBAER,CACE0hB,OAAQ5Z,EAAE,cACVzD,KAAM,QACN/I,MAAQu9D,GAASA,EAAKkvD,kBACtB/nH,KAAM,qBAER,CACE0hB,OAAQ5Z,EAAE,WACVzD,KAAM,QACN/I,MAAQu9D,GAASA,EAAKmvD,gBACtBhoH,KAAM,qBAGV,CAAC8H,GAGL,CClCO,SAASmgH,GAAqBn+E,GACnC,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR0kC,EAAsBm7E,KACtB3zC,EAAyBlE,GAAc,CAAEt5D,cAAc,EAAM0mD,aAAa,IAC1EvzB,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAACgvE,IAAyB,CAACA,IACzDzT,EAAaH,KAkBnB,OAjB2BxH,IACzB2H,EAAW,CACTviE,MAAO6J,EAAE,wBAAyB,CAAEoV,MAAO27C,EAAKz0D,SAChDzF,YAAamJ,EAAE,kEAAmE,CAChFoV,MAAO27C,EAAKz0D,SAEdwoC,iBAAkB9kC,EAAE,mBAAoB,CAAEoV,MAAO27C,EAAKz0D,SACtDs1B,MAAOm/B,EAAK74D,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAEmjC,SAAUljC,EAAEkjC,YACxDr2C,MAAO62B,GACPtoD,UAAU,EACVukC,sBACA7C,gBACAE,aACAD,SAAUA,CAACgvB,EAAkBxsC,IAC3BgkC,GAAcgC,EAAM,iBAAiBwG,EAAK96D,GAAGqhB,cAAeiN,IAC9D,CAGN,CCvBO,SAAS67F,KACd,MAAM,EAAEpgH,IAAMC,EAAAA,EAAAA,MACRipB,ECTD,WACL,MAAM,EAAElpB,IAAMC,EAAAA,EAAAA,MAad,OAZuB9C,EAAAA,EAAAA,UACrB,IAAM,CACJ,CACE+H,IAAK,sBACL9O,MAAO4J,EAAE,YACTzD,KAAMysB,GAAkBsC,UACxB8xB,MAAO,sBACPv1B,WAAY,cAGhB,CAAC7nB,GAGL,CDNyBqgH,GACjBrlF,EAAe8kF,KACfl6E,EAAO6zB,GAAuB,CAClCvc,IAAKqN,EAAM,iBACXqP,YAAa,CACX0mD,aAAc,QAEhBp3F,iBACA8R,iBAEIvM,EEhBD,SAAsCuT,GAC3C,MAAM,IAAQ/hC,EAAAA,EAAAA,MACRsgH,EAAoBJ,GAAqBn+E,GAE/C,OAAO7kC,EAAAA,EAAAA,UACL,IAAM,CACJ,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,oBACTP,QAAS8gH,EACTngH,UAAU,KAGd,CAACmgH,EAAmBvgH,GAExB,CFDyBwgH,CAA6B56E,EAAK00B,yBACnDr/B,EGjBD,SAAkC+G,GACvC,MAAM,IAAQ/hC,EAAAA,EAAAA,MACRsgH,EAAoBJ,GAAqBn+E,GAE/C,OAAO7kC,EAAAA,EAAAA,UAAmC,IACjC,CACL,CAAEZ,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,mBACTP,QAAUsxD,GAAqBwvD,EAAkB,CAACxvD,IAClD3wD,UAAU,KAGb,CAACmgH,EAAmBvgH,GACzB,CHAqBygH,CAAyB76E,EAAK00B,yBAEjD,OACEl8D,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,gBACT+5C,eAAgB/5C,EAAE,gBAClB85C,UAAW95C,EACT,obAEF0U,YAAa1U,EACX,qNAGJlH,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,yBACHizB,eAAgBA,EAChB8R,aAAcA,EACdvM,eAAgBA,EAChBwM,WAAYA,EACZ8C,gBAAiB/9B,EAAE,8BACnBg+B,gBAAiBh+B,EAAE,yBACnBi+B,sBAAuBj+B,EAAE,iDACrB4lC,MAIZ,CIjDO,SAAS86E,GAA0B7zE,GACxC,IAAKA,EACH,OAAO,KAET,OAAQA,GACN,IAAK,MACL,IAAK,eACH,OAAO6mB,GAAS4qC,UAClB,IAAK,eACH,OAAO5qC,GAASu4B,mBAClB,IAAK,wBACH,OAAOv4B,GAAS06B,2BAClB,IAAK,UACH,OAAO16B,GAASg3B,eAClB,IAAK,YACH,OAAOh3B,GAAS82B,iBAClB,IAAK,mBACH,OAAO92B,GAASw6B,sBAClB,IAAK,OACH,OAAOx6B,GAASitD,YAClB,IAAK,iBACH,OAAOjtD,GAAS0c,qBAClB,IAAK,WACH,OAAO1c,GAAS0X,gBAClB,IAAK,wBACH,OAAO1X,GAAS85B,4BAClB,IAAK,oBACH,OAAO95B,GAASU,wBAClB,IAAK,iBACH,OAAOV,GAASy6B,uBAClB,IAAK,eACH,OAAOz6B,GAAS62B,oBAClB,IAAK,OACH,OAAO72B,GAASktD,YAClB,IAAK,OACH,OAAOltD,GAASiB,YAClB,IAAK,OACH,OAAOjB,GAAS0B,YAClB,IAAK,aACH,OAAO1B,GAASoU,kBAClB,IAAK,kBACH,OAAOpU,GAASmtD,sBAUlB,QACE,OAAO,KAEb,CCxDO,MAAMC,GAA+C,CAC1D,GAAI,YACJh3C,MAAO,kBACPC,YAAa,yBCUf,SAASg3C,GAAgBC,EAA0BC,GACjD,MAAMp0E,EAAWq0E,GAAkBF,EAAUC,GAC7C,GAAIp0E,EAAU,CACZ,GAAI,SAAUA,GAAqC,iBAAlBA,EAAS32C,KACxC,OAAO22C,EAAS32C,KAElB,GAAI,aAAc22C,GAAyC,iBAAtBA,EAASq7B,SAC5C,OAAOr7B,EAASq7B,SAElB,GAAI,aAAcr7B,GAAyC,iBAAtBA,EAAS6nB,SAC5C,OAAO7nB,EAAS6nB,QAEpB,CAEA,MAAO,EACT,CAEA,SAASwsD,GAAkBF,EAA0BC,GACnD,MAAM,eAAEhtD,GAAmB+sD,EAE3B,GAAIC,GAAeA,KAAehtD,EAAgB,CAChD,MAAMktD,EAAgBltD,EAAegtD,GAErC,GAAIE,GAAiBA,EAAc7kH,OAAS,EAC1C,OAAO6kH,EAAc,EAEzB,CAEA,OAAO,IACT,CAEA,MAiBaC,GAAgEA,EAC3EJ,eAIA,MAAMtjE,EAAaT,KACbokE,EAvBkBC,KACxB,OAAQA,GACN,IAAK,YACH,MAAO,aACT,IAAK,eACH,MAAO,gBACT,IAAK,SACH,MAAO,UACT,IAAK,SACH,MAAO,UACT,IAAK,SACH,MAAO,UACT,QACE,OAAOA,EACX,EASsBC,CAAiBP,EAASM,WAC1CE,EAAsBd,GAA0Bl6E,OAAOw6E,EAASS,UAChEC,EAAsBhB,GAA0Bl6E,OAAOw6E,EAASW,UAChEC,EAAqBb,GAAgBC,EAAUA,EAASS,SACxDI,EAAqBd,GAAgBC,EAAUA,EAASW,SACxDG,EAAoBZ,GAAkBF,EAAUA,EAASW,SACzDI,EAAoBb,GAAkBF,EAAUA,EAASS,SACzDO,EAAed,GAAkBF,EAAU,QAC3CiB,EAEN,SAA2BjB,GACzB,MAAM,UAAEM,EAAS,QAAEG,EAAO,QAAEE,GAAYX,EAClCkB,EAAsBlB,EAASmB,SAASjsH,MAAQ,KACtD,OAAQorH,GACN,IAAK,SACL,IAAK,SACL,IAAK,SACH,GAAIE,GAAuBO,EAAmB,CAE5C,OAAQN,GACN,IAAK,MACH,OACErjH,EAAAA,EAAAA,MAAA,QAAApF,SAAA,CACG,GAAGqoH,KAAiBI,MACrB3oH,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAW8jE,EAAqB,CAClCrkE,OAAQ,CAAElnD,GAAI8rH,EAAkB9rH,GAAIglF,SAAU,cAEhD,UAAQ,yBAAwBjiF,SAE/B4oH,OAIT,IAAK,eACH,OACExjH,EAAAA,EAAAA,MAAA,QAAApF,SAAA,CACG,GAAGqoH,KAAiBI,MACrB3oH,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAW8jE,EAAqB,CAClCrkE,OAAQ,CAAElnD,GAAI8rH,EAAkB9rH,GAAIglF,SAAU,cAEhD,UAAQ,yBAAwBjiF,SAE/B4oH,OAIT,IAAK,YACH,OACExjH,EAAAA,EAAAA,MAAA,QAAApF,SAAA,CACG,IACA,GAAGqoH,KAAiBI,MACrB3oH,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAW8jE,EAAqB,CAClCrkE,OAAQ,CACNlnD,GAAI8rH,EAAkB9rH,GACtBqzE,eAAgBw3C,GAAkBiB,EAAkBn6C,SAGxD,UAAQ,yBAAwB5uE,SAE/B4oH,OAKX,OACExjH,EAAAA,EAAAA,MAAA,QAAApF,SAAA,CACG,GAAGqoH,KAAiBI,MACrB3oH,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAW8jE,EAAqB,CAAErkE,OAAQ,CAAElnD,GAAI8rH,EAAkB9rH,MACtE,UAAQ,yBAAwB+C,SAE/B4oH,MAIT,CACA,MAAO,GAAGP,KAAiBI,KAAWG,IACpCM,GAAuBA,IAAwBN,EAC3C,IAAIM,IACJ,KAGR,IAAK,eACH,OAAIR,GAAuBF,GAAuBO,GAE9C3jH,EAAAA,EAAAA,MAAA,QAAApF,SAAA,CACG,GAAGqoH,KAAiBI,KACpBD,IACC1oH,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAW8jE,EAAqB,CAClCrkE,OAAQ,CAAElnD,GAAI8rH,EAAkB9rH,MAElC,UAAQ,yBAAwB+C,SAE/B4oH,IAGJI,GAAgB,IAAIA,EAAaI,eAChCZ,IAAuB1oH,EAAAA,EAAAA,KAAA,QAAAE,SAAO4oH,IAC/B,SAASD,KACTD,GAAuBI,IACtBhpH,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgkE,EAAqB,CAClCvkE,OAAQ,CACNlnD,GAAI6rH,EAAkB7rH,MAG1B,UAAQ,yBAAwB+C,SAE/B6oH,KAGHH,IAAuB5oH,EAAAA,EAAAA,KAAA,QAAAE,SAAO6oH,QAKpCzjH,EAAAA,EAAAA,MAAA,QAAApF,SAAA,CACG,GAAGqoH,KAAiBI,KAAWG,IAC/BI,GAAgB,GAAGA,EAAaI,aAAa,IAAE,QAAQT,KAAWE,OAIzE,IAAK,YACH,OAAIH,GAAuBF,GAAuBO,GAE9C3jH,EAAAA,EAAAA,MAAA,QAAApF,SAAA,CACG,GAAGqoH,KAAiBI,KACpBD,IACC1oH,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAW8jE,EAAqB,CAClCrkE,OAAQ,CAAElnD,GAAI8rH,EAAkB9rH,MAElC,UAAQ,yBAAwB+C,SAE/B4oH,IAGJI,GAAgB,IAAIA,EAAaI,eAChCZ,IAAuB1oH,EAAAA,EAAAA,KAAA,QAAAE,SAAO4oH,IAC/B,OAAOD,KACPD,GAAuBI,IACtBhpH,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgkE,EAAqB,CAClCvkE,OAAQ,CACNlnD,GAAI6rH,EAAkB7rH,MAG1B,UAAQ,yBAAwB+C,SAE/B6oH,KAGHH,IAAuB5oH,EAAAA,EAAAA,KAAA,QAAAE,SAAO6oH,QAKpCzjH,EAAAA,EAAAA,MAAA,QAAApF,SAAA,CACG,GAAGqoH,KAAiBI,KAAWG,IAC/BI,GAAgB,GAAGA,EAAaI,aAAa,IAAE,MAAMT,KAAWE,OAIvE,QAEE,MAAO,8BAGb,CApKkBQ,CAAkBrB,GAsKpC,OAAOloH,EAAAA,EAAAA,KAAA,QAAAE,SAAOipH,GAAiB,ECtOpBK,GAA8EA,EACzFntG,OACAgK,cAEA,MAAM,EAAEnf,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KAEbslE,EAAUptG,EAAK8+C,gBAAgBuuD,OAAOvsH,GACtCwsH,EAAgBttG,EAAK8+C,gBAAgBuuD,OAAO9tD,SAE5CguD,EAAUhlE,EAAWgW,GAASiB,YAAa,CAAExX,OAAQ,CAAElnD,GAAIssH,KAEjE,OAAIA,GAEAzpH,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAMk7G,GAAiB,GACvB7hH,GAAI8hH,EACJ/zG,aAAcwQ,GAASxQ,aACvB,UAAQ,iBAGHwG,EAAK8+C,gBAAgBuuD,OACvB1pH,EAAAA,EAAAA,KAAA,QAAAE,SAAOgH,EAAE,GAAGyiH,kBAEZ3pH,EAAAA,EAAAA,KAAA,QAAAE,SAAOgH,EAAE,WAClB,E,eCrBK,SAAS2iH,IAAqB,SAAE3B,IACrC,MAAM,IAAQ/gH,EAAAA,EAAAA,OACP2F,EAAG8rB,GAAaD,KACjBpsB,EAAUA,IAAMqsB,OAAUj3B,GAEhC,OACE2D,EAAAA,EAAAA,MAACy5B,GAAAA,EAAK,CACJ1hC,MAAO6J,EAAE,iBACT,UAAQ,8BACR,aAAYA,EAAE,iBACdrB,QAAM,EACNs5B,kBAAgB,EAChB5yB,QAASA,EACTlJ,QAAS27B,GAAAA,EAAaC,OACtB37B,QAAS,EACPtD,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAAclC,QAAQ,UAAUsD,QAAS4F,EAAQrM,SACrDgH,EAAE,UADO,WAGZhH,SAAA,EAEFoF,EAAAA,EAAAA,MAACoc,GAAW,CAAAxhB,SAAA,EACVF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,QAAQhH,SAAEwR,GAAiBw2G,EAAS1oE,cACzDx/C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,gBAAgBhH,UACnCF,EAAAA,EAAAA,KAACwpH,GAA6B,CAACntG,KAAM6rG,MAEjB,YAArBA,EAASS,SAAyBT,EAAS/sD,gBAAgB2uD,UAC1D9pH,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,oBAAoBhH,SACtCgoH,EAAS/sD,eAAe2uD,QAAQ,GAAGhlD,WAGlB,YAArBojD,EAASS,SAAyBT,EAAS/sD,gBAAgB2uD,UAC1D9pH,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,gBAAgBhH,SAClCgoH,EAAS/sD,eAAe2uD,QAAQ,GAAG1sH,QAGxC4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,UAAUhH,UAC7BF,EAAAA,EAAAA,KAACsoH,GAAmB,CAACJ,SAAUA,SAGlCA,EAASmB,UACRrpH,EAAAA,EAAAA,KAAC0hB,GAAW,CAACK,gBAAgB,SAAQ7hB,UACnCF,EAAAA,EAAAA,KAACo2E,GAAoB,CACnB94E,MAAO4J,EAAE,WACTxM,MAAO0V,KAAKa,UAAUi3G,EAASmB,SAC/BhzC,qBAAqB,QAMjC,CCtDO,SAAS0zC,KACd,MAAM,EAAE7iH,IAAMC,EAAAA,EAAAA,MAERipB,EC4CiBipE,GAAyB,CAC9CC,YAAa,kBACbE,mBAAoB,CAClBr8F,GAAI,CACFk9F,QAAS,oBAGbZ,kBAAmB,C7G/ChB,WACL,MAAM,EAAEvyF,IAAMC,EAAAA,EAAAA,MACd,OAAO9C,EAAAA,EAAAA,UACL,KAAM,CACJ+H,IAAK,UACL9O,MAAO4J,EAAE,WACTzD,KAAMysB,GAAkBqC,WACxB+xB,MAAO,SACPv1B,WAAY,cAEd,CAAC7nB,GAEL,C6GrB+B8iH,G7GuBxB,WACL,MAAM,EAAE9iH,IAAMC,EAAAA,EAAAA,MACd,OAAO9C,EAAAA,EAAAA,UACL,KAAM,CACJ+H,IAAK,eACL9O,MAAO4J,EAAE,2BACTzD,KAAMysB,GAAkBqC,WACxB+xB,MAAO,6BACPv1B,WAAY,cAEd,CAAC7nB,GAEL,C6GlCmC+iH,IACP5lH,EAAAA,EAAAA,UACxB,KAAM,CACJZ,KAAMysB,GAAkBS,aACxBvkB,IAAK,OACLk4C,MAAO,cACPhnD,MAAO,OACP+oB,QAAS,CACP,CAAE/oB,MAAO,eAAgB5C,MAAO,IAChC,CAAE4C,MAAO,OAAQ5C,MAAO,OACxB,CAAE4C,MAAO,YAAa5C,MAAO,YAC7B,CAAE4C,MAAO,qBAAsB5C,MAAO,oBAAqBgjB,MAAO,kBAClE,CACEpgB,MAAO,YACP5C,MAAO,iEAET,CAAE4C,MAAO,cAAe5C,MAAO,aAAcgjB,MAAO,UACpD,CAAEpgB,MAAO,WAAY5C,MAAO,WAC5B,CAAE4C,MAAO,cAAe5C,MAAO,YAAagjB,MAAO,kBACnD,CAAEpgB,MAAO,QAAS5C,MAAO,OAAQgjB,MAAO,kBACxC,CAAEpgB,MAAO,gBAAiB5C,MAAO,eAAgBgjB,MAAO,UACxD,CAAEpgB,MAAO,QAAS5C,MAAO,OAAQgjB,MAAO,UACxC,CAAEpgB,MAAO,QAAS5C,MAAO,OAAQgjB,MAAO,UACxC,CAAEpgB,MAAO,mBAAoB5C,MAAO,kBAAmBgjB,MAAO,UAC9D,CACEpgB,MAAO,yBACP5C,MAAO,wBACPgjB,MAAO,kBAET,CAAEpgB,MAAO,YAAa5C,MAAO,WAAYgjB,MAAO,kBAChD,CAAEpgB,MAAO,kBAAmB5C,MAAO,iBAAkBgjB,MAAO,kBAC5D,CACEpgB,MAAO,0BACP5C,MAAO,sBACPgjB,MAAO,kBAET,CACEpgB,MAAO,yBACP5C,MAAO,wBACPgjB,MAAO,kBAET,CAAEpgB,MAAO,WAAY5C,MAAO,UAAWgjB,MAAO,mBAEhD0I,YAAa,iBACb3b,UAAU,KAEZ,KAUA8uF,cAAe,CAAC,UAAW,eAAgB,QDnDvCr3D,EERD,SAAkC7b,GAIvC,MAAM,IAAQlf,EAAAA,EAAAA,MAiCd,OA/BqB9C,EAAAA,EAAAA,UACnB,IAAM,CACJ,CACEyc,OAAQ5Z,EAAE,QACV4b,KAAOonG,GACLA,EAAgB1qE,YAAax/C,EAAAA,EAAAA,KAACqS,GAAY,CAAC3X,MAAOwvH,EAAgB1qE,YACpEpgD,KAAM,YACNikC,KAAM,YACN0B,qBAAsB,OACtB/hB,MAAOP,GAAkBQ,QAE3B,CACEnC,OAAQ5Z,EAAE,gBACV4b,KAAOonG,IACLlqH,EAAAA,EAAAA,KAACwpH,GAA6B,CAACntG,KAAM6tG,EAAiB7jG,QAASA,IAEjEjnB,KAAM,kBACNikC,KAAM,aAER,CACEviB,OAAQ5Z,EAAE,SACV4b,KAAOonG,IACLlqH,EAAAA,EAAAA,KAACsoH,GAAmB,CAACJ,SAAUgC,IAEjC9qH,UAAMuC,EACN0hC,KAAM,YACN/hB,WAAW,KAGf,CAAC+E,EAASnf,GAGd,CF9BuBijH,GAEfr9E,EAAO6zB,GAA2B,CACtCvc,IAAKqN,EAAM,oBACXrhC,iBACA8R,iBAEIC,EGdD,WACL,MAAM,EAAEj7B,IAAMC,EAAAA,EAAAA,MACRijH,EJyDD,WACL,MAAOt9G,EAAG8rB,GAAaD,MAChB77B,EAAOsuC,IAAY1vC,EAAAA,EAAAA,YAY1B,OAXAK,EAAAA,EAAAA,YAAU,KACR,GAAIe,EAAO,CACT,MAAMuuC,EAAiBA,KACrBD,OAASzpC,GACT7E,EAAMyP,WAAW,EAEnBqsB,GAAU54B,EAAAA,EAAAA,KAAC6pH,GAAoB,IAAK/sH,EAAOyP,QAAS8+B,IACtD,MACEzS,OAAUj3B,EACZ,GACC,CAAC7E,EAAO87B,IACJwS,CACT,CIxEmCi/E,GAEjC,OAAOhmH,EAAAA,EAAAA,UAAQ,IACkC,CAC7C,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/B0C,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVvH,KAAMonH,GAAAA,GACNhtH,MAAO4J,EAAE,sBACTP,QAAUuhH,GAA6BkC,EAAyB,CAAElC,gBAIrE,CAAChhH,EAAGkjH,GACT,CHJqBG,GACbzxD,EAASvC,KAEf,OACEjxD,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,mBACT+5C,eAAgB/5C,EAAE,mBAClB85C,UAAW95C,EACT,qLACA,CAAE4/G,QAnBcx8E,QAqBlB4W,aAAc2X,GAAcC,EAAQ,kBACpCl9C,YAAa1U,EACX,qLACA,CAAE4/G,QAxBcx8E,WA2BpBtqC,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,sBACHizB,eAAgBA,EAChB8R,aAAcA,EACdC,WAAYA,EACZ8C,gBAAiB/9B,EAAE,iCACnBg+B,gBAAiBh+B,EAAE,2CACnBi+B,sBAAuBj+B,EACrB,uEAEE4lC,EACJ1K,gBAAiBl7B,EAAE,uBAI3B,C,gBIpDO,MAAMsjH,GAAyBA,IACpCt/E,GAAuBm0B,ICIlB,SAASorD,KACd,MAAM,EAAEvjH,IAAMC,EAAAA,EAAAA,MACRujH,EAAqBF,KACrBj7D,EAAcyT,KAuBpB,OAtBuBlnE,EAAAA,EAAAA,cACrB,CAAC09D,EAAkBgiC,EAA2BtyD,KAC5CwhF,EAAmB,CACjBrtH,MAAO6J,EAAE,eAAgB,CAAEoV,MAAOk/E,EAAUh4F,SAC5Cu1B,MAAQs2C,GAAkBA,EAAKlyE,GAC/B27B,MAAO0gC,EACPxwB,cAAe,CAAC,CAAEloB,OAAQ,OAAQgC,KAAOusD,GAAkBA,EAAKzT,WAChE3yB,SAAUv6B,MAAO2gE,EAAe5jD,KAC9B,IAAK,MAAMsoB,KAAYynD,QACfjsC,EACJkC,EAAM,UAAU4d,EAAKlyE,GAAGqhB,oBACxB,CAAErhB,GAAI42C,EAASonB,eAAewvD,aAAaC,YAAYztH,IACvDsuB,EAEJ,EAEFzsB,eAAgBkI,EAAE,kBAAmB,CAAEoV,MAAOk/E,EAAUh4F,SACxD0lC,cACA,GAEJ,CAACwhF,EAAoBxjH,EAAGqoD,GAG5B,CChCO,SAASs7D,GAKd/tH,GACA,MAAM,KAAEuyE,GAASvyE,GACX,EAAEoK,IAAMC,EAAAA,EAAAA,MACd,OAAIkoE,EAAKtP,cACA//D,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAAnU,SAAEgH,EAAE,0BAEfmoE,EAAK2C,mBACAhyE,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAAnU,SAAEgH,EAAE,qBAEZlH,EAAAA,EAAAA,KAAC8a,GAAAA,EAAI,CAAA5a,SAAEgH,EAAE,gBAClB,CCVO,SAAS4jH,GAAgBzkG,GAC9B,MAAM,IAAQlf,EAAAA,EAAAA,MACRy9C,EAAaT,KACbtuC,EAAewQ,GAASxQ,eAAgB,EAExC28D,EAAgBhD,GAAiBnpD,GAmDvC,OAlDqBhiB,EAAAA,EAAAA,UACnB,IAAM,CACJ,CACEyc,OAAQ5Z,EAAE,YACV4b,KAAOusD,IACLrvE,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAM4gE,EAAKzT,SACX9zD,GACE+N,OACIlU,EACAijD,EAAWgW,GAASiB,YAAa,CAAExX,OAAQ,CAAElnD,GAAIkyE,EAAKlyE,GAAGqhB,gBAInEsiB,KAAM,OACNuC,KAAM,OACNjkC,KAAM,WACNqW,SAAU,KAEZ,CACEqL,OAAQ5Z,EAAE,aACV4b,KAAOusD,IAASrvE,EAAAA,EAAAA,KAAC6qH,GAAQ,CAACx7C,KAAMA,IAChCvuC,KAAM,WACNuC,KAAM,YAER,CACEviB,OAAQ5Z,EAAE,cACVzD,KAAM,OACN/I,MAAQ20E,GAASA,EAAK07C,WACtB3rH,KAAM,cAER,CACE0hB,OAAQ5Z,EAAE,aACVzD,KAAM,OACN/I,MAAQ20E,GAASA,EAAK27C,UACtB5rH,KAAM,aAER,CACE0hB,OAAQ5Z,EAAE,SACVzD,KAAM,OACN/I,MAAQ20E,GAASA,EAAK47C,MACtB7rH,KAAM,SAER,IACKozE,EACHpzE,UAAMuC,KAGV,CAAC6wE,EAAe5tB,EAAY19C,EAAG2O,GAGnC,CC/DO,SAASq1G,KAUd,OATuB7xB,GAAyB,CAC9CC,YAAa,QACbC,cAAe,CAAC,WAAY,aAAc,YAAa,QAAS,MAChEC,mBAAoB,CAClBr8F,GAAI,CACFk9F,QAAS,WAKjB,CCFA,SAAS8wB,GAAYruH,GAMnB,MAAM,IAAQqK,EAAAA,EAAAA,MACRipB,EAAiB86F,KACjBhpF,EAAe4oF,GAAgB,CAAEj1G,cAAc,IAC/Ci3B,EAAO6zB,GAAoB,CAC/Bvc,IAAKtnD,EAAMsuH,WAAa35D,EAAM,UAC9BrhC,iBACA8R,eACAsoB,oBAAoB,IAItB,OClBK,SAAkCgP,GACvC,SAAS6xD,EAAUC,EAAgBj8C,GACjC,MAAM,KAAE3mD,GAAS4iG,EACb5iG,EAAK6iG,QACPl8C,EAAKm8C,YAAYznH,KAAK2kB,GAEtB2mD,EAAKo8C,YAAY1nH,KAAK2kB,EAE1B,CAEA,GAAI8wC,GAAOh2D,OAAS,EAClB,IAAK,MAAM6rE,KAAQ7V,EACjB6V,EAAKm8C,WAAa,GAClBn8C,EAAKo8C,WAAa,GAClBp8C,EAAKlU,gBAAgBuwD,eAAetyF,SAASkyF,GAAWD,EAAUC,EAAQj8C,KAC1EA,EAAKlU,gBAAgBwwD,iBAAiBvyF,SAASkyF,GAAWD,EAAUC,EAAQj8C,IAGlF,CDFEu8C,CAAyB9+E,EAAKpoB,YAG5B1kB,EAAAA,EAAAA,KAACitC,GAAiB,CAChB5vC,MAAOP,EAAMO,MACbyI,SAAUhJ,EAAMgJ,SAChBsqB,eAAgBA,EAChB8R,aAAcA,EACd4K,KAAMA,EACN/uC,YAAajB,EAAMiB,aAAemJ,EAAE,gBAG1C,CAEO,SAAS2kH,KACd,MAAO/+G,EAAG8rB,GAAaD,KAmBvB,OAlBwB78B,EAAAA,EAAAA,cACtB,CACEuB,EACAyI,EACA/H,EACAqtH,KAEAxyF,GACE54B,EAAAA,EAAAA,KAACmrH,GAAW,CACVC,UAAWA,EACX/tH,MAAOA,EACPyI,SAAUA,EACV/H,YAAaA,IAEhB,GAEH,CAAC66B,GAGL,CEnDO,SAASkzF,GAAuB5iF,GACrC,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR0kC,EAAsBkgF,GAAwB,CAAEl2G,cAAc,EAAM0mD,aAAa,IACjF8W,EAAyBlE,GAAc,CAAEt5D,cAAc,EAAM0mD,aAAa,IAC1EvzB,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAACgvE,IAAyB,CAACA,IACzDzT,EAAaH,KAkBnB,OAjB6BnG,IAC3BsG,EAAW,CACTviE,MAAO6J,EAAE,mCAAoC,CAAEoV,MAAOg9C,EAAc91D,SACpEzF,YAAamJ,EAAE,sEAAuE,CACpFoV,MAAOg9C,EAAc91D,SAEvBwoC,iBAAkB9kC,EAAE,sBAAuB,CAAEoV,MAAOg9C,EAAc91D,SAClEs1B,MAAOwgC,EAAcl6D,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QAC7D27B,MAAO62B,GACPtoD,UAAU,EACVukC,sBACA7C,gBACAE,aACAD,SAAUA,CAACmnC,EAA4B3kD,IACrCgkC,GAAcgC,EAAM,kBAAkB2e,EAAajzE,GAAGqhB,cAAeiN,IACvE,CAGN,CCKO,SAASugG,KACd,MAAM,EAAE9kH,IAAMC,EAAAA,EAAAA,MAER6zD,EAAerW,KACfC,EAAaT,KACnBoZ,GAAqB,iBACrB,MAAMzE,EAASvC,KAETnmC,EAAiB67F,KAEjB/pF,EAAe6pF,KAEfj/E,EAAO6zB,GAAyB,CACpCvc,IAAKqN,EAAM,kBACXrhC,iBACA8R,iBAGIgqF,EAAsBJ,GAAuBh/E,EAAK00B,yBAElD2qD,ECpDD,WACL,MAAM,EAAEjlH,IAAMC,EAAAA,EAAAA,MACRilH,EAAcP,KACdQ,EAAsB5B,KAY5B,OAXoC3uH,EAAAA,EAAAA,cACjCw9D,IACC8yD,EACEllH,EAAE,6BAA8B,CAAEoV,MAAOg9C,EAAc91D,UACtDg2D,IACC6yD,EAAoB7yD,EAAOF,EAAc,GAE5C,GAEH,CAAC+yD,EAAqBD,EAAallH,GAGvC,CDoCsColH,GAC9BC,EErDD,SAA2ChgH,GAChD,MAAM,IAAQpF,EAAAA,EAAAA,MACRilH,EAAcP,KACdW,ECFD,SAAyCtjF,GAC9C,MAAM,IAAQ/hC,EAAAA,EAAAA,MACRujH,EAAqBF,KACrBj7D,EAAcyT,KA2BpB,OA1BkClnE,EAAAA,EAAAA,cAChC,CAAC09D,EAAkBF,KACjBoxD,EAAmB,CACjBrtH,MAAO6J,EAAE,oCAAqC,CAC5CoV,MAAOg9C,EAAc91D,SAEvBu1B,MAAQs2C,GAAkBA,EAAKlyE,GAC/B27B,MAAO0gC,EACPxwB,cAAe,CAAC,CAAEloB,OAAQ5Z,EAAE,QAAS4b,KAAOusD,GAAkBA,EAAKzT,WACnE3yB,SAAUv6B,MAAO2gE,EAAe5jD,KAC9B,IAAK,MAAM2kD,KAAgB9W,QACnB/J,EACJkC,EAAM,UAAU4d,EAAKlyE,GAAGqhB,oBACxB,CAAErhB,GAAIizE,EAAajV,eAAewvD,aAAaC,YAAYztH,GAAI6mF,cAAc,GAC7Ev4D,EAEJ,EAEFzsB,eAAgBkI,EAAE,uCAAwC,CACxDoV,MAAOg9C,EAAc91D,SAEvB0lC,cACA,GAEJ,CAACwhF,EAAoBxjH,EAAGgiC,EAAYqmB,GAGxC,CD7BuCk9D,CAAgClgH,GAarE,OAZuCzQ,EAAAA,EAAAA,cACpCw9D,IACC8yD,EACEllH,EAAE,kCAAmC,CAAEoV,MAAOg9C,EAAc91D,UAC3Dg2D,IACCgzD,EAA6BhzD,EAAOF,EAAc,GAEpDpyD,EAAE,kBACH,GAEH,CAACslH,EAA8BJ,EAAallH,GAGhD,CFoCyCwlH,GAEjC/2F,GAAiBtxB,EAAAA,EAAAA,UACrB,IAAM,CACJ,CACEZ,KAAMrJ,EAAeyN,KACrBrH,UAAWnG,EAAoBoG,KAC/BgK,UAAU,EACVpH,QAASuB,EAAAA,GAAcC,QACvB3B,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,uBACTa,KAAM68C,EAAWgW,GAAS+xD,qBAE5B,CAAElpH,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,8BACTP,QAASA,IAAMwlH,EAA4Br/E,EAAKhsC,gBAElD,CACE2C,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAM0mE,GAAAA,GACNtsE,MAAO4J,EAAE,mCACTP,QAASA,IAAM4lH,EAA+Bz/E,EAAKhsC,gBAErD,CAAE2C,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,wBACTP,QAASulH,EACT5kH,UAAU,KAGd,CACEJ,EACA09C,EACAsnE,EACAC,EACAr/E,EAAKhsC,cACLyrH,IAIEpqF,GAAa99B,EAAAA,EAAAA,UAAqC,IACT,CAC3C,CACEZ,KAAMrJ,EAAeyN,KACrBrH,UAAWnG,EAAoBsG,OAC/B8J,UAAU,EACVvH,KAAM84D,GAAAA,GACN1+D,MAAO4J,EAAE,qBACTa,KAAOqoE,GACExrB,EAAWgW,GAASgyD,iBAAkB,CAAEvoE,OAAQ,CAAElnD,GAAIizE,EAAajzE,OAG9E,CAAEsG,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,8BACTP,QAAUypE,GAAiB+7C,EAA4B,CAAC/7C,KAE1D,CACE3sE,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAM0mE,GAAAA,GACNtsE,MAAO4J,EAAE,mCACTP,QAAUypE,GAAiBm8C,EAA+B,CAACn8C,KAE7D,CAAE3sE,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,uBACTP,QAAUypE,GAAiB87C,EAAoB,CAAC97C,IAChD9oE,UAAU,KAIb,CACDJ,EACA09C,EACAunE,EACAI,EACAL,IAGF,OACE5mH,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,iBACT+5C,eAAgB/5C,EAAE,iBAClB85C,UAAW95C,EACT,oJACA,CAAE4/G,QAxHcx8E,QA0HlB4W,aAAc2X,GAAcC,EAAQ,iBACpCl9C,YAAa1U,EACX,oJACA,CAAE4/G,QA7Hcx8E,QA+HlBqW,eAAe3gD,EAAAA,EAAAA,KAACyjE,GAAkB,CAAChgE,KAAM,oBAE3CzD,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,0BACHizB,eAAgBA,EAChBuF,eAAgBA,EAChBuM,aAAcA,EACdC,WAAYA,EACZ8C,gBAAiB/9B,EAAE,+BACnBg+B,gBAAiBh+B,EAAE,wBACnBi+B,sBAAuBj+B,EAAE,2CACzBq+B,sBAAsBvlC,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrCwN,qBAAsBp+B,EAAE,uBACxBm+B,sBAAuBA,IAAM21B,EAAaJ,GAAS+xD,uBAC/C7/E,EACJ1K,gBAAiBl7B,EAAE,oBAI3B,CAEO,SAAS+kH,KAgBd,OAbuB5yB,GAAyB,CAC9CC,YAAa,gBACbC,cAAe,CAAC,OAAQ,cAAe,aAAc,eACrDC,mBAAoB,CAClBp8F,KAAM,CACJi9F,QAAS,iBAEXl9F,GAAI,CACFk9F,QAAS,kBAGbZ,kBAAmB,CAbUyB,KACCC,OAelC,CAEO,SAAS4wB,GAAwB1lG,GAItC,MAAM,IAAQlf,EAAAA,EAAAA,MACR6zD,EAAerW,KACfC,EAAaT,KACb40C,EAAW9pB,KACXoD,GAAYv2E,EAAAA,EAAAA,cACfs0E,GACCpV,EAAaJ,GAAS62B,oBAAqB,CAAEptC,OAAQ,CAAElnD,GAAIizE,EAAajzE,OAC1E,CAAC69D,IAEGz4B,EAAoB+sC,KACpBjtC,EAAa8sC,GAAc,IAC5B9oD,EACH1f,QAAS0rE,IAELG,EAAgBhD,GAAiBnpD,GACjCosD,EAAiB3C,GAAkBzpD,GAwDzC,OAvDqBhiB,EAAAA,EAAAA,UACnB,IAAM,CACJ00F,EACA12D,EACAE,EACA,CACEzhB,OAAQ5Z,EAAE,WACVzD,KAAM,QACN/I,MAAQ01E,GAAiBA,EAAajV,gBAAgB0xD,sBAAsBrzD,OAE9E,CACE14C,OAAQ5Z,EAAE,SACVzD,KAAM,QACN/I,MAAQ01E,GAAiBA,EAAajV,gBAAgB0xD,sBAAsBtzD,OAE9E,CACEz4C,OAAQ5Z,EAAE,UACVzD,KAAM,QACN/I,MAAQ01E,GAAiBA,EAAajV,gBAAgB0xD,sBAAsBC,QAE9E,CACEhsG,OAAQ5Z,EAAE,eACVzD,KAAM,QACN/I,MAAQ01E,GAAiBA,EAAajV,gBAAgB0xD,sBAAsB1yD,aAE9E,CACEr5C,OAAQ5Z,EAAE,YACVzD,KAAM,QACN/I,MAAQ01E,GAAiBA,EAAajV,gBAAgB0xD,sBAAsBvyD,UAE9E,CACEx5C,OAAQ5Z,EAAE,iBACVzD,KAAM,QACN/I,MAAQ01E,GAAiBA,EAAajV,gBAAgB0xD,sBAAsBE,eAE9E,CACEjsG,OAAQ5Z,EAAE,SACVzD,KAAM,QACN/I,MAAQ01E,GAAiBA,EAAajV,gBAAgB0xD,sBAAsB3yD,OAE9E,CACE/8D,GAAI,wBACJ2jB,OAAQ5Z,EAAE,uBACVzD,KAAM,OACN/I,MAAQ01E,GAAiBA,EAAajV,gBAAgBy/B,qBAAqBx9F,KAC3E0K,GAAKsoE,GACHxrB,EAAWgW,GAAS85B,4BAA6B,CAC/CrwC,OAAQ,CAAElnD,GAAIizE,EAAajV,gBAAgBy/B,qBAAqBz9F,OAGtEq1E,EACAC,IAEF,CAACsmB,EAAU12D,EAAYE,EAAmBr7B,EAAGsrE,EAAeC,EAAgB7tB,GAGhF,CI7QO,SAASooE,GAGdlwH,GACA,MAAM,IAAQqK,EAAAA,EAAAA,MACR8lH,EAAsBlB,GAAwB,CAAEl2G,cAAc,IAC9Dq3G,EAAsBjB,KAC5B,OACEjsH,EAAAA,EAAAA,KAACw4F,GAA+B,CAC9Bp7F,KAAMN,EAAMM,KACZD,GAAG,eACHG,MAAO4J,EAAE,gBACTkf,YAAalf,EAAE,uBACfurB,iBAAkBvrB,EAAE,4BACpBylB,eAAgBzlB,EAAE,+BAClB8lB,WAAYlwB,EAAMkwB,WAClBjsB,WAAYjE,EAAMiE,WAClB22C,WAAY56C,EAAM46C,WAClB0M,IAAKqN,EAAM,kBACXvvB,aAAc+qF,EACd78F,eAAgB88F,GAGtB,CCnBO,SAASC,IAAkB,aAAEC,EAAY,WAAEpgG,IAChD,MAAM,EAAE9lB,IAAMC,EAAAA,EAAAA,OACR,QAAEupC,IAAYE,EAAAA,GAAAA,OACd,MACJI,EACAC,YAAY,MAAEjkC,KACZqgH,EAAAA,GAAAA,IAAc,CAChBjwH,KAAM,GAAGgwH,EAAajwH,KACtBuzC,UACAY,MAAO,CAAET,SAAU7jB,KAGftyB,EAAQs2C,EAAMt2C,MACd4H,EAAW0uC,EAAM1uC,UAEhBuD,EAAQ2e,GAAa6oB,EAAAA,UAAe,IACpChnB,EAASuE,GAAcyiB,EAAAA,SAC5B,CACE,OACA,KACA,QACA,SACA,OACA,QACA,QACA,SACA,OACA,MACA,aACA,QACAtmC,KAAKylC,IAAG,CAAQ9xC,MAAO8xC,OAG3B,OACExsC,EAAAA,EAAAA,KAACy3C,GAAa,CACZG,QAAS,GAAGw1E,EAAajwH,KACzB+zC,kBAAmBlkC,EAAQA,EAAMK,QAAU,GAC3C/P,MAAO8vH,EAAa9vH,MACpB6zC,UAAWi8E,EAAavkD,UACxB77C,WAAYA,EAAW9sB,UAEvBF,EAAAA,EAAAA,KAAC4nB,GAAAA,EAAM,CACLg5E,mBAAoBwsB,EAAa9vH,MACjCkd,UAAW,IACXnX,QAASy0F,GAAAA,GAAcw1B,UACvB/qH,SAAUA,CAACulB,EAAOlhB,IAAe4d,EAAU5d,GAC3CmiB,QAASA,IAAMzmB,EAAS,IACxBwD,SAAUA,CAACgiB,EAAOf,KAChBzkB,EAASykB,GACTvC,GAAU,EAAM,EAElB3e,OAAQA,EACR,UAAQ,uBACR1I,GAAG,uBACHw9C,WAAYjgD,EACZs9F,aAAW,EACXu1B,eAAiBxmG,IACf6D,GAAYW,GAAgB,IAAIA,EAAa,CAAE7wB,MAAOqsB,MACtDzkB,EAASykB,EAAO,EAElBymG,mBAAoBtmH,EAAE,oBACtBumH,WAAYvmH,EAAE,UACdwmH,yBAA0BxmH,EAAE,aAC5BqzC,gBAAiBrzC,EAAE,0BACnBoI,gBAAiBpI,EAAE,gBAAgBhH,SAElCmmB,EAAQtf,KAAKggB,IACZ/mB,EAAAA,EAAAA,KAACupB,GAAAA,EAAY,CACX,UAAS,iBAAiBxC,EAAOrsB,QAEjCA,MAAOqsB,EAAOrsB,OADTqsB,EAAOrsB,YAOxB,CCnFO,SAASizH,IAAyB,MACvC38E,EAAK,eACL48E,EAAc,KACd9+C,EAAI,kBACJ++C,EAAiB,wBACjBC,EAAuB,2BACvBC,EAA0B,mBAC1BC,EAAkB,kBAClBC,IAWA,MAAM,EAAE/mH,IAAMC,EAAAA,EAAAA,OACP+mH,EAAiBC,IAAsBzyH,EAAAA,EAAAA,UAASs1C,EAAMo9E,SACvD,UAAE11E,EAAS,SAAE3yB,EAAQ,YAAEgoB,IAAgB6C,EAAAA,GAAAA,MACvCy9E,EAAoB31E,IAepB41E,EAJ0BnxH,KAC9B,MAAM,KAAE+iB,GAASm2C,GAAuB5E,EAAM,gBAAiBt0D,GAC/D,OAAO+iB,CAAI,EAEYquG,CACvBT,EAAwB3vH,QAAQqwH,GAAOA,EAAGC,mBAAqBz9E,EAAM7zC,KAAI,IAAIuxH,mBAyBzEC,GAAmB7yH,EAAAA,EAAAA,cACtBk1C,IACC,IAAI5qB,EAAc,uCAMlB,OALA0nG,EAAwB10F,SAASo1F,IAC3BA,EAAGC,mBAAqBz9E,EAAM7zC,IAAMmxH,IACtCloG,EAAclf,EAAE,uBAAuBonH,EAAiBx/C,SAASw/C,EAAiBlxH,QACpF,IAEKgpB,CAAW,GAEpB,CAAC0nG,EAAyBQ,EAAkBpnH,IAsB9C,OAnBAnL,EAAAA,EAAAA,YAAU,KAEJ+xH,EAAwBnmG,MAAM6mG,GAAOA,EAAGC,mBAAqBz9E,EAAM7zC,MACrE4oB,EAASirB,EAAM7zC,GAAIwxH,EAAiB39E,GAAQ,CAAE49E,aAAa,GAC7D,GACC,CAAC7oG,EAAU+nG,EAAyBa,EAAkB39E,KAevDhxC,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,UACEF,EAAAA,EAAAA,KAACqmE,GAAkB,CACjBU,aA3EUh+C,KACdhD,EAASirB,EAAM7zC,GAAI,GAAI,CAAEyxH,aAAa,IACtC7gF,EAAYiD,EAAM7zC,IACd2wH,EAAwBnmG,MAAM6mG,GAAOA,EAAGC,mBAAqBz9E,EAAM7zC,MACrE6wH,KAAsBrmE,GAAmB,IAAIA,EAAM3W,EAAM7zC,MAE3D4wH,IACED,EAAwB3vH,QAAQqwH,GAAOA,EAAGC,mBAAqBz9E,EAAM7zC,KACtE,EAqEGsG,KAAK,OACLnG,MAAO0zC,EAAM1zC,MACbF,KAAM,GAAG4zC,EAAM7zC,KACfi0C,eAAgBJ,EAAM1zC,MACtB6zC,UAAWH,EAAM63B,UACjBnxB,WAtDoB1G,KACxB,IAAI0G,EAAa,GAQjB,OAPAo2E,EAAwB10F,SAASo1F,IAC3BA,EAAGC,mBAAqBz9E,EAAM7zC,KAChCu6C,EAAaxwC,EACX,0GAEJ,IAEKwwC,CAAU,EA6CDm3E,CAAiB79E,GAC7BhkB,WAAY4gG,EAAerlH,SAASyoC,EAAM7zC,IAC1C+qB,WAlEoB8oB,KACxB,IAAIjwC,GAAa,EAMjB,OALA+sH,EAAwB10F,SAASo1F,IAC3BA,EAAGC,mBAAqBz9E,EAAM7zC,KAChC4D,GAAa,EACf,IAEKA,CAAU,EA2DD+tH,CAAiB99E,GAC7BjwC,WAA8C,gBAAlCstH,IAAoBr9E,EAAM7zC,IACtCyqE,sBACoC,gBAAlCymD,IAAoBr9E,EAAM7zC,MAA0BkxH,IAAoBr9E,EAAM7zC,IAEhFwqE,0BAA0B,EAC1BzkE,KACW,aAAT4rE,EACE99B,EAAMo9E,QAA4C,gBAAlCC,IAAoBr9E,EAAM7zC,KACxCmI,EAAAA,EAAAA,MAAA,OAAKzD,MAAO,CAAE0N,QAAS,QAASrP,SAAA,EAC9BF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLrC,MAAMlD,EAAAA,EAAAA,KAACg7G,GAAAA,GAAO,IACd33G,QAAQ,UACRsD,QAASknH,EACT9sH,YAAU,KAEZf,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CAACC,QAASiF,EAAE,WAAWhH,UAC7BF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAACrC,MAAMlD,EAAAA,EAAAA,KAAC+uH,GAAAA,GAAQ,IAAK1rH,QAAQ,UAAUsD,QAzC3CqoH,KACjBjpG,EAASirB,EAAM7zC,GAAI,GAAI,CAAEyxH,aAAa,IACtCT,GAAoBD,EAAgB,SA0CxBl9E,EAAMo9E,QACRH,GACsB,gBAAtBA,GACkC,gBAAlCI,IAAoBr9E,EAAM7zC,KAC1BmI,EAAAA,EAAAA,MAAA,OAAKzD,MAAO,CAAE0N,QAAS,QAASrP,SAAA,EAC9BF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAACrC,MAAMlD,EAAAA,EAAAA,KAACg7G,GAAAA,GAAO,IAAK33G,QAAQ,UAAUsD,QAASknH,KACtD7tH,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CAACC,QAASiF,EAAE,UAAUhH,UAC5BF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAACrC,MAAMlD,EAAAA,EAAAA,KAAC+uH,GAAAA,GAAQ,IAAK1rH,QAAQ,UAAUsD,QA/C5CsoH,KAChBlpG,EAASirB,EAAM7zC,GAAI8wH,EAAmB,CAAEW,aAAa,IACrDT,GAAoBD,GACpBH,IACED,EAAwB3vH,QAAQqwH,GAAOA,EAAGC,mBAAqBz9E,EAAM7zC,KACtE,UA8CS6C,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAACrC,MAAMlD,EAAAA,EAAAA,KAACg7G,GAAAA,GAAO,IAAK33G,QAAQ,UAAUsD,QAASknH,SAEtDlsH,GAzCDqvC,EAAM7zC,KA8CnB,CCjJO,SAAS+xH,KACd,MAAM,EAAEhoH,IAAMC,EAAAA,EAAAA,OACR,SAAE4e,EAAQ,YAAEgoB,IAAgB6C,EAAAA,GAAAA,OAC3Bu+E,EAAiBC,IAAsB1zH,EAAAA,EAAAA,UAA0B,CAAC,IAClE2zH,EAAaC,IAAkB5zH,EAAAA,EAAAA,eAA4BiG,IAC3D4tH,EAAYC,IAAiB9zH,EAAAA,EAAAA,WAAS,GA4B7C,OAhBAK,EAAAA,EAAAA,YAAU,KAEJozH,EAAgBM,aAClB1pG,EAAS,UAAWopG,EAAgBM,YACpC1hF,EAAY,YAEVohF,EAAgBO,eAClB3pG,EAAS,WAAYopG,EAAgBO,cACrC3hF,EAAY,aAEVohF,EAAgBQ,cAClB5pG,EAAS,eAAgBopG,EAAgBQ,aACzC5hF,EAAY,gBACd,GACC,CAACohF,EAAiBppG,EAAUgoB,KAG7B/tC,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,UACEF,EAAAA,EAAAA,KAACqmE,GAAkB,CACjBU,aA9BUh+C,KACdqmG,EAAmB,CAAC,GACpBE,OAAe3tH,GACfokB,EAAS,UAAW,IACpBA,EAAS,WAAY,IACrBA,EAAS,eAAgB,GAAG,EA2BxB3oB,KAAK,sBACLw6C,QAAQ,sBACRt6C,MAAO4J,EAAE,6BACTwwC,WAAYxwC,EACV,qFAEF0zC,UAAWy0E,EAAc,QAAU,UACnC/oD,cAAe53D,UACb,IACE,MAAMkhH,QAAiB75E,EAAKtnC,OACtBohH,EAAWz/G,KAAKC,MAAMu/G,GAC5BR,EAAmBS,EACrB,CAAE,MAAO7iH,GACPsiH,EAAetiH,EACjB,GAEFm6D,cAAe,CACbzwB,OAAQ,CAAE,YAAa,CAAC,UACxBo5E,eA3CmBC,KACzBP,GAAc,EAAK,GA4Cf3nD,sBACE7nE,EAAAA,EAAAA,KAACg4C,GAAAA,EAAc,CAAA93C,UACbF,EAAAA,EAAAA,KAACk4C,GAAAA,EAAc,CAAC70C,QAASksH,EAAa,QAAU,UAAUrvH,SACvDqvH,EAAaroH,EAAE,4DAA8D,UAxBhF,wBA+BZ,CC1EO,SAAS8oH,KAgBd,OAbuB32B,GAAyB,CAC9CC,YAAa,mBACbC,cAAe,CAAC,OAAQ,KAAM,aAAc,eAC5CC,mBAAoB,CAClBp8F,KAAM,CACJi9F,QAAS,oBAEXl9F,GAAI,CACFk9F,QAAS,qBAGbZ,kBAAmB,CAbUyB,KACCC,OAelC,CCLO,SAAS80B,KACd,MAAM,EAAE/oH,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KACb5hB,EAAoB+sC,KACpBkD,EAAgBhD,KAChBiD,EAAiB3C,KAsCvB,OApCqBzrE,EAAAA,EAAAA,UACnB,IAAM,CACJ,CACEyc,OAAQ5Z,EAAE,QACV4b,KAAOq2E,IACL7zF,EAAAA,EAAAA,MAACsD,GAAAA,EAAK,CAACC,WAAS,EAAA3I,SAAA,EACdF,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAM0qF,EAAe/7F,KACrB0K,GAAI88C,EAAWgW,GAASmtD,sBAAuB,CAAE1jE,OAAQ,CAAElnD,GAAIg8F,EAAeh8F,QAE/Eg8F,EAAe38B,UAAWx8D,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAAnU,SAAEgH,EAAE,kBAGzC45B,KAAM,OACNuC,KAAM,OACNjkC,KAAM,OACNqW,SAAU,KAEZ8sB,EACA,CACEzhB,OAAQ5Z,EAAE,QACV4b,KAAOq2E,GACLA,EAAe38B,SAAUx8D,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAAnU,SAAEgH,EAAE,qBAA8B,KACnEic,MAAOb,GAAkBW,OACzB6d,KAAM,SACNuC,KAAM,SACNjkC,KAAM,UACN2lC,qBAAsB,OACtBD,aAAa,EACb9hB,MAAOP,GAAkBQ,QAE3BuvD,EACAC,IAEF,CAAClwC,EAAmBqiB,EAAY19C,EAAGsrE,EAAeC,GAGtD,CC9CO,SAASy9C,GAGdpzH,GACA,MAAM,IAAQqK,EAAAA,EAAAA,MACRipB,EAAiB4/F,KACjB9tF,EAAe+tF,KACrB,OACEjwH,EAAAA,EAAAA,KAACw4F,GAA+B,CAC9Bp7F,KAAMN,EAAMM,KACZD,GAAG,kBACHG,MAAO4J,EAAE,mBACTkf,YAAalf,EAAE,0BACfurB,iBAAkBvrB,EAAE,+BACpBylB,eAAgBzlB,EAAE,kCAClB8lB,WAAYlwB,EAAMkwB,WAClBjsB,WAAYjE,EAAMiE,WAClB22C,WAAY56C,EAAM46C,WAClB0M,IAAKqN,EAAM,qBACXvvB,aAAcA,EACd9R,eAAgBA,GAGtB,CCxBO,SAAS+/F,GAGdrzH,GAOA,MAAM,IAAQqK,EAAAA,EAAAA,MACRu0F,EAAoB5C,GAAsB,CAAEjjF,cAAc,IAC1D8lF,EAAoBP,KAC1B,OACEp7F,EAAAA,EAAAA,KAACw4F,GAA+B,CAC9Bp7F,KAAMN,EAAMM,KACZD,GAAG,aACHG,MAAO4J,EAAE,cACTkf,YAAalf,EAAE,qBACfurB,iBAAkBvrB,EAAE,0BACpBylB,eAAgBzlB,EAAE,6BAClB8lB,WAAYlwB,EAAMkwB,WAClBjsB,WAAYjE,EAAMiE,WAClB22C,WAAY56C,EAAM46C,WAClB0M,IAAKqN,EAAM,gBACXqP,YAAa,CAAEsvD,sBAAuB,YACtCluF,aAAcw5D,EACdtrE,eAAgBurE,EAChB3iE,iBAAkB,IAGxB,CCrCO,SAASq3F,GAAsBvzH,GACpC,MAAM,IAAQqK,EAAAA,EAAAA,OACR,UACJuxC,EACA/H,WAAW,QAAE2/E,KACX1/E,EAAAA,GAAAA,MAMJ,OACE5wC,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAAClC,QAAQ,YAAYsD,QANd8iE,KACd,MAAMpiB,EAAW3O,IACZ57C,EAAMyzH,WAAWlpE,EAAS,EAIetmD,YAAauvH,EAAQpwH,SAChEgH,EAAE,SAGT,CCGO,SAASspH,IAAkB,SAChChjF,EAAQ,aACRiB,EAAY,WACZ8hF,EAAU,cACV3hF,IAOA,MAAM,EAAE1nC,IAAMC,EAAAA,EAAAA,MAERspH,EAAoBA,KACxB,MAYMt3B,EATuBu3B,KAC3B,MAAM,KAAExwG,GAASm2C,GAAuB5E,EAAM,gBAAiBi/D,IACvDxwG,KAAMi5E,GAAmB9iC,GAC/B5E,EAAM,qBACNvxC,GAAMi7C,gBAAgBi+B,iBAAiBj8F,IAEzC,OAAOg8F,CAAc,EAGAw3B,EAZSxuD,EAAAA,GAAAA,IAAwC,CACtE/kE,KAAM,uBAaR,OAAK+7F,GAIHn5F,EAAAA,EAAAA,KAAC+lE,GAAe,CAAC1oE,MAAO6J,EAAE,YAAYhH,SACnCi5F,GAAgB7wC,QAAQsoE,SAAS7pH,KAAKw4D,GACjC,YAAaA,GAEbv/D,EAAAA,EAAAA,KAACm8D,GAAoB,CACnBvuC,aAAc2xC,GAAOl1D,QACrBjN,KAAMmiE,EAAMpiE,GAEZG,MAAOiiE,EAAMjiE,MACb8oB,YAAam5C,EAAMjiE,MACnB6zC,UAAWouB,EAAMsJ,UACjBxiD,QACEk5C,EAAMsG,QACFtG,EAAMsG,SAAS9+D,KAAK++D,IAAM,CAAQxoE,MAAOwoE,EAAQprE,MAAOorE,MACxD,GAEN94C,WAAYmsE,EAAe7wC,OAAOzX,SAAStoC,SAASg3D,EAAMpiE,KATrDoiE,EAAMpiE,IAaZoiE,EAAMsxD,UAYPtxD,EAAMsxD,WAEN7wH,EAAAA,EAAAA,KAACg7C,GAAgB,CACf59C,KAAMmiE,EAAMpiE,GAEZG,MAAOiiE,EAAMjiE,MACb6zC,UAAWouB,EAAMsJ,UACjB77C,WAAYmsE,EAAe7wC,OAAOzX,SAAStoC,SAASg3D,EAAMpiE,KAHrDoiE,EAAMpiE,SAJjB,GAVI6C,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAMmiE,EAAMpiE,GAEZG,MAAOiiE,EAAMjiE,MACbmG,KAAM,OACN0tC,UAAWouB,EAAMsJ,UACjB77C,WAAYmsE,EAAe7wC,OAAOzX,SAAStoC,SAASg3D,EAAMpiE,KAJrDoiE,EAAMpiE,QA3Bd,IA+CW,EAGtB,OACEmI,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CAACpjD,MAAO6J,EAAE,+BACrB5B,EAAAA,EAAAA,MAAC29D,GAAW,CACV5jE,WAAY6H,EAAE,UACdw3B,SAAU+P,EACVjB,SAAUA,EACV5f,aAAcghB,EACdiB,mBAAmB7vC,EAAAA,EAAAA,KAACqwH,GAAqB,CAACE,WAAYA,IAAerwH,SAAA,EAErEF,EAAAA,EAAAA,KAAC+lE,GAAe,CAAC1oE,MAAO6J,EAAE,8BAA8BhH,UACtDF,EAAAA,EAAAA,KAACmwH,GAAgC,CAAC/yH,KAAK,oBAAoB4vB,YAAU,OAEvEhtB,EAAAA,EAAAA,KAACywH,EAAiB,SAI1B,CCnGA,SAASK,GACPh0H,GAEA,MAAM,IAAQqK,EAAAA,EAAAA,MACRoF,EAAUA,KACdzP,EAAMyP,WAAW,EAuEnB,OACEvM,EAAAA,EAAAA,KAAC++B,GAAAA,EAAK,CACJ,aAAY73B,EAAE,sBACdrB,QAAM,EACN0G,QAASA,EACTlJ,QAAS27B,GAAAA,EAAa+xF,MAAM7wH,UAE5BF,EAAAA,EAAAA,KAACwwH,GAAiB,CAChBhjF,SAAUjhC,EACVkiC,aA9D8DvuB,GAC3D,IAAIiqB,SAAc,CAACqd,EAASqrD,KACjC,MAAM,kBAAE6b,KAAsB3tG,GAASb,EACvCpjB,EAAMk0H,0BAA0B,CAC9B,CACEvC,iBAAkB3xH,EAAMk0C,MAAM7zC,GAC9ByzH,SAAU,IACL7vG,GAEL2tG,kBAAmBA,KAGvBniH,IACA,IACEi7C,GACF,CAAE,MAAOx6C,GACP6lG,EAAO7lG,EACT,KA8CEujH,WA1CcrwG,GACX,IAAIiqB,SAAc,CAACqd,EAASqrD,KACjC,MAAM,kBAAE6b,KAAsB3tG,GAASb,EACjCrgB,EAAoB,CACxBwD,QAAS,UACThG,MAAO6J,EAAE,gBACTqE,QAAS,KAGL0lH,EAAU,CACdL,SAAU7vG,GAGZwuC,GAAYkC,EAAM,gBAAgB/jB,OAAOghF,WAA4BuC,GAClEvlG,MAAK,KACJ5uB,EAAMsR,aAAazD,SAAS9K,EAAM,IAEnCmP,OAAOhC,IACNlQ,EAAMsR,aAAazD,SAAS,CAC1BtH,QAAS,SACThG,MAAO6J,EAAE,kEACThH,SAAU8M,aAAiBsX,OAAStX,EAAMK,SAC1C,IAEN,IACEm6C,GACF,CAAE,MAAOx6C,GACP6lG,EAAO7lG,EACT,KAeE4hC,cA/EN,WACE,MAAMsiF,EAAep0H,EAAMgxH,yBAAyBtpH,MACjD2sH,GAAWA,EAAO1C,mBAAqB3xH,EAAMk0C,MAAM7zC,KAEtD,GAAI+zH,EAAc,CAChB,MAAM,SAAEN,EAAQ,kBAAElC,GAAsBwC,EACxC,MAAO,CACLxC,uBACGkC,EAEP,CAGF,CAkEqBQ,MAIvB,CC1FO,SAASC,GACdv0H,GAIA,MAAM,IAAQqK,EAAAA,EAAAA,MACRooD,EAAcyT,KACd50D,EAAetR,EAAMsR,aAyD3B,OACEpO,EAAAA,EAAAA,KAAC++B,GAAAA,EAAK,CACJ,aAAY73B,EAAE,4BACd7D,QAAQ,QACRD,SAAS,UACT/F,MAAO6J,CAAC,2BACRi4B,kBAAgB,EAChBt5B,QAAM,EACN0G,QAASA,IAAMzP,EAAMu7B,YAAYn4B,UAEjCF,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,OACdw3B,SAnE0DhwB,UAG9D,MAAM7O,EAAoB,CACxBwD,QAAS,UACThG,MAAO6J,EAAE,gBACTqE,QAAS,KAGL+lH,EAAiBznH,OAAO0nH,YAC5B1nH,OAAOwmD,QAAQmhE,GAAazqH,KAAI,EAAEqF,EAAK1R,KAAW,CAAC0R,EAAK1R,GAAS,OAG7Du2H,EAAU,CACd3oE,OAAQxrD,EAAMq8F,eAAe7wC,OAAOmpE,OAAO1zG,QACzC,CAAC2zG,EAAgB1gF,EAAO6nE,KACtB6Y,EAAe1gF,EAAM7zC,IACnBL,EAAM60H,qBAAqB9Y,IAC3B/7G,EAAMq8F,eAAe7wC,OAAOmpE,OAAO5Y,GAAKxuG,SACxC,GACKqnH,IAET,CAAC,GAEHd,SAAUU,GAEZx0H,EAAM8xE,iBACIrf,EAAYkC,EAAM,gBAAgB/jB,OAAO5wC,EAAM8xE,WAAWzxE,YAAa8zH,GAC1EvlG,MAAK,KACJtd,EAAazD,SAAS9K,EAAM,IAE7BmP,OAAOhC,IACNoB,EAAazD,SAAS,CACpBtH,QAAS,SACThG,MAAO6J,EAAE,kEACThH,SAAU8M,aAAiBsX,OAAStX,EAAMK,SAC1C,UAEAkiD,EACJkC,EAAM,qBAAqB/jB,OAAO5wC,EAAMq8F,eAAeh8F,YACvD8zH,GAECvlG,MAAK,KACJtd,EAAazD,SAAS9K,EAAM,IAE7BmP,OAAOhC,IACNoB,EAAazD,SAAS,CACpBtH,QAAS,SACThG,MAAO6J,EAAE,kEACThH,SAAU8M,aAAiBsX,OAAStX,EAAMK,SAC1C,GACF,EAiBJ5P,WAAYyJ,EAAE,UACdsmC,SAhBWA,IAAM1wC,EAAMu7B,YAiBvBgX,cAAY,EAAAnvC,SAEXpD,EAAMq8F,eAAe7wC,OAAOsoE,SAAS7pH,KAAKiqC,IACzC,MAAMhkB,EAAalwB,EAAMq8F,eAAe7wC,QAAQzX,SAAStoC,SAASyoC,EAAM7zC,IACxE,MAAmB,WAAf6zC,EAAMvtC,KACJutC,EAAM60B,SAEN7lE,EAAAA,EAAAA,KAACs6C,GAAc,CAEbl9C,KAAM4zC,EAAM7zC,GACZG,MAAO0zC,EAAM1zC,MACb6zC,UAAWH,EAAM63B,UACjB77C,WAAYA,EACZ3G,QAAS2qB,EAAM60B,QAAQ9+D,KAAK++D,IAAM,CAChCprE,MAAOorE,EACP15D,IAAK05D,EACLxoE,MAAOwoE,OARJ90B,EAAM7zC,IAcb6zC,EAAM6/E,WAEN7wH,EAAAA,EAAAA,KAACg7C,GAAgB,CAEf59C,KAAM4zC,EAAM7zC,GACZG,MAAO0zC,EAAM1zC,MACb6zC,UAAWH,EAAM63B,UACjB77C,WAAYA,GAJPgkB,EAAM7zC,KAUf6C,EAAAA,EAAAA,KAACo8C,GAAiB,CAEhBh/C,KAAM4zC,EAAM7zC,GACZG,MAAO0zC,EAAM1zC,MACb6zC,UAAWH,EAAM63B,UACjBplE,KAAK,OACLupB,WAAYA,GALPgkB,EAAM7zC,IAUV,IAAI,OAKrB,CCrJO,SAASy0H,KACd,MAAM,WAAEz5F,EAAU,UAAEE,GAAcK,MAC3B57B,EAAOsuC,IAAY1vC,EAAAA,EAAAA,YACpBm2H,EAAU9mH,KAchB,OAZAhP,EAAAA,EAAAA,YAAU,KACJe,EACFq7B,GACEn4B,EAAAA,EAAAA,KAACqxH,GAA4B,IAClBv0H,EAAOu7B,UAAWA,EAAWjqB,aAAcyjH,KAIxDx5F,GACF,GACC,CAACv7B,EAAOq7B,EAAYE,EAAWw5F,IAE3BzmF,CACT,CC0CO,SAAS0mF,KACd,MAAM,EAAE5qH,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACfvvC,GAAWC,EAAAA,GAAAA,OACX,cAAE08C,GAAkBJ,KACpBpC,EAAcyT,KACdpe,EAAaT,MACZ4tE,EAA0BC,IAA+Bt2H,EAAAA,EAAAA,UAAiB,IAC1Ei2H,EAAsBM,IAA2Bv2H,EAAAA,EAAAA,UAAoB,IACtEw2H,EAAmCN,MAClCO,EAAwBnB,IAA6Bt1H,EAAAA,EAAAA,UAE1D,KACKoyH,EAAyBC,IAA8BryH,EAAAA,EAAAA,UAE5D,KACFK,EAAAA,EAAAA,YAAU,KACRgyH,GAA4BpmE,GAQJ,IANDA,EAAKxpD,QACvBi0H,IACED,EAAuBxqG,MACrBywE,GAAaA,EAASq2B,mBAAqB2D,EAAU3D,wBAGjB0D,IAG3C,GACD,CAACA,IACJ,MAAOE,EAAqBC,IAA0B52H,EAAAA,EAAAA,WAAS,IACxD62H,EAA4BC,IAAiC92H,EAAAA,EAAAA,WAAS,IAErEw2D,QAASs2B,EAAa,UAAEp/D,GAAc8zD,GAC5CzrB,EAAM,sBAGR,GAAIroC,IAAco/D,EAChB,OAAOxoF,EAAAA,EAAAA,KAACkqD,GAAW,IAGrB,MAAMuoE,EAAqDjqC,GAAezqE,QACxE,CAACk7E,EAAoBE,KACnBF,EAAmBE,EAAeh8F,IAAMg8F,EACjCF,IAET,CAAC,GAGGy5B,IACFD,GAC0D,aAA5DA,IAAwBV,IAA2BjjD,KAmDrD,OACExpE,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,qBACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,eAAgBY,GAAI88C,EAAWgW,GAAS+3D,cACnD,CAAEr1H,MAAO4J,EAAE,0BAGflH,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,qBACdw3B,SA5DkDhwB,UACtD,MAAMkkH,EAAuBH,IAAwB7jD,GAAYwqB,kBAAkB9wC,OAC7EuqE,EAAgD,CAAC,GAGhCD,GAAsBnB,QAAU,IACxCr4F,SAAS4X,IACtB,GACEA,EAAM7zC,IACc,iBAAb6zC,EAAM7zC,IACb6zC,EAAM7zC,MAAMyxE,IAPqB59B,IACnC88E,EAAwBnmG,MAAM6mG,GAAOA,EAAGC,mBAAqBz9E,IAO1D8hF,CAA4B9hF,EAAM7zC,IACnC,CACA,MAAMA,EAAK6zC,EAAM7zC,QACMwE,IAAnBitE,EAAWzxE,IAAwC,KAAnByxE,EAAWzxE,KAC7C01H,EAAa11H,GAAMyxE,EAAWzxE,UACvByxE,EAAWzxE,GAEtB,KAGGyxE,EAAWwB,eACdxB,EAAWS,KAAOtd,GAAe50D,IAGnC0M,OAAO4f,KAAKmlD,GAAYx1C,SAAShtB,IAC3BA,EAAIk3C,WAAW,gBACVsrB,EAAWxiE,EACpB,IAEF,MAAM2mH,QAAsBxjE,EAAYkC,EAAM,gBAAiB,IAC1Dmd,EACHtmB,OAAQ,IAAKuqE,KAETG,EAA+BlF,EAAwB/mH,KAAKksH,IAAqB,IAClFA,EACHC,kBAAmBH,EAAc51H,aAE7BgtC,QAAQC,IACZ4oF,EAA6BjsH,KAAI2H,gBACzB6gD,EACJkC,EAAM,6BACNwhE,EACD,KAGLj4D,EAAaJ,GAASoU,kBAAmB,CAAE3qB,OAAQ,CAAElnD,GAAI41H,EAAc51H,KAAO,EAe1EqwC,SAAUA,IAAMp4B,GAAU,GAC1By6B,kBACE6iF,GACE1yH,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACL,aAAY2B,EAAE,QACd7D,QAAQ,YACRsD,QAAU2J,IACRA,EAAEwF,iBACFo8G,EAAiC,CAC/B/4B,oBAC4Bx3F,IAA1B8wH,EACIA,IAAwBV,GACvB,CAAC,EACRJ,qBAAsBA,GACtB,EAEJ5wH,YAAasxH,IAAwBE,EAA2BryH,SAE/DgH,EAAE,eAEHvF,EACLzB,UAEDF,EAAAA,EAAAA,KAACmzH,GAAgB,CACfC,YAAY,EACZ/5D,gBAAiBo5D,GAAyB,CAAC,EAC3CzB,0BAA2BA,EAC3BlD,wBAAyBA,EACzBC,2BAA4BA,EAC5BiE,4BAA6BA,EAC7BM,uBAAwBA,EACxBE,8BAA+BA,EAC/BP,wBAAyBA,QAKnC,CAEO,SAASoB,KACd,MAAM,EAAEnsH,IAAMC,EAAAA,EAAAA,MACRiO,GAAWC,EAAAA,GAAAA,MACXgvC,GAASgZ,EAAAA,GAAAA,KACTlgE,EAAK3C,OAAO6pD,EAAOlnD,KACnB,cAAE40D,GAAkBJ,KACpB/M,EAAaT,KACbikB,EAAQtF,KACRmF,EAAgBH,KAChBvY,EAAcyT,MACbmvD,EAAwBnB,IAA6Bt1H,EAAAA,EAAAA,UAE1D,KACKoyH,EAAyBC,IAA8BryH,EAAAA,EAAAA,UAE5D,KACK43H,EAAiBtF,IAAsBtyH,EAAAA,EAAAA,UAAmB,KAC3D,MAAE4mE,IAAUC,EAAAA,GAAAA,OAElBxmE,EAAAA,EAAAA,YAAU,KACRgyH,GAA4BpmE,IAE1B,MAMM4rE,EAAgB,IAND5rE,EAAKxpD,QACvBi0H,IACED,EAAuBxqG,MACrBywE,GAAaA,EAASq2B,mBAAqB2D,EAAU3D,wBAGjB0D,GAQ3C,OANAoB,EAAcn6F,SAASo1F,IACjB7mE,EAAKhgC,MAAMyqG,GAAcA,EAAU3D,mBAAqBD,EAAGC,oBAC7DT,GAAoBrmE,GAAS,IAAIA,EAAM6mE,EAAGC,mBAC5C,IAGK8E,CAAa,GACpB,GACD,CAACpB,IACJ,MAAMD,EAAmCN,MAClCS,EAAqBC,IAA0B52H,EAAAA,EAAAA,WAAS,IACxD62H,EAA4BC,IAAiC92H,EAAAA,EAAAA,WAAS,IACtEi2H,EAAsBM,IAA2Bv2H,EAAAA,EAAAA,UAAoB,KACrE83H,EAAkBC,IAAuB/3H,EAAAA,EAAAA,UAAmB,KAE3DwkB,KAAM0uD,EAAYxlD,UAAWsqG,GAAwBz9D,GAC3DxE,EAAM,gBAAgBt0D,EAAGqhB,gBAGnB0B,KAAMyzG,EAAcvqG,UAAWwqG,GAA0B39D,GAE/DxE,EAAM,gBAAgBt0D,EAAGqhB,8BAE3BziB,EAAAA,EAAAA,YAAU,KACR,GAAI43H,EAAc,CAChB,MAAME,EAAsBF,EAAazhE,QAAQnrD,KAC9C+sH,IAAkC,CACjCrF,iBAAkBqF,EAAYrF,iBAC9BC,kBAAmBoF,EAAYpF,kBAC/BwE,kBAAmBY,EAAYZ,kBAC/BtC,SAAUkD,EAAYlD,aAG1B7C,EAA2B8F,EAC7B,IACC,CAACF,IAEJ,MAAMI,EAAyBJ,GAAczhE,QAC1C/zD,QAAQqwH,GAAO8E,EAAgB/qH,SAASimH,EAAGC,oBAC3C1nH,KAAKynH,GAAOA,EAAGrxH,IAAIqhB,YAAc,MAE5B0zC,QAASs2B,EAAep/D,UAAW4qG,GACzC92C,GAAkCzrB,EAAM,sBAEpCghE,EAAqDjqC,GAAezqE,QACxE,CAACk7E,EAAoBE,KACnBF,EAAmBE,EAAeh8F,IAAMg8F,EACjCF,IAET,CAAC,GAGGy5B,EACFD,QAAwC9wH,IAAfitE,EACuC,aAA9D6jD,IAAwB7jD,EAAWwqB,kBAAkBtqB,KACrD,KAEAmlD,GAA0B5vH,EAAAA,EAAAA,UAAQ,KACtC,MAAM6vH,EAA6B,CAAC,EAUpC,OATItlD,GAAYtmB,QACdz+C,OAAOwmD,QAAQue,EAAWtmB,QAAQlvB,SAAQ,EAAEhtB,EAAK1R,MAE7Cw5H,EAAkB,OAAO9nH,KADN,iBAAV1R,GAAgC,QAAVA,CAIjC,IAGGw5H,CAAiB,GACvB,CAACtlD,IAEEkhC,GAA+BzrG,EAAAA,EAAAA,UACnC,KAAM,CACJjH,KAAMwxE,GAAYxxE,MAAQ,GAC1Bwe,YAAagzD,GAAYhzD,aAAe,GACxCw9E,gBAAiBxqB,GAAYwqB,iBAAmB,EAChDhpB,aAAcxB,GAAYwB,cAAgB,QACtCxB,GAAYtmB,QAAU,CAAC,KACvB2rE,GAAkB,CAAC,KAEzB,CAACrlD,EAAYqlD,IAGf,OACGP,IAAwB9kD,GACxBolD,IAA4BxrC,GAC5BorC,IAA0BD,GAEpB3zH,EAAAA,EAAAA,KAACkqD,GAAW,IA8EhB0kB,GAaHtpE,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MACEuxE,GAAYxxE,KACR8J,EAAE,0BAA2B,CAAEitH,eAAgBvlD,GAAYxxE,OAC3D8J,EAAE,eAERk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,eAAgBY,GAAI88C,EAAWgW,GAAS+3D,cACnD,CACEr1H,MAAOsxE,GAAYxxE,KACf8J,EAAE,0BAA2B,CAAEitH,eAAgBvlD,GAAYxxE,OAC3D8J,EAAE,oBAIZlH,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,mBACdw3B,SA1GkDhwB,UACtD,MAAMkkH,EAAuBH,IAAwB2B,GAAkBh7B,kBAAkB9wC,OAEpF8rE,EAAiBhkD,eACpBgkD,EAAiB/kD,KAAOtd,GAAe50D,IAEzC,MAAM01H,EAAgD,CAAC,GAIhCD,GAAsBnB,QAAU,IACxCr4F,SAAS4X,IACtB,GACEA,EAAM7zC,IACc,iBAAb6zC,EAAM7zC,IACb6zC,EAAM7zC,MAAMi3H,IARqBpjF,IACnC88E,EAAwBnmG,MAAM6mG,GAAOA,EAAGC,mBAAqBz9E,IAQ1D8hF,CAA4B9hF,EAAM7zC,IACnC,CACA,MAAMA,EAAK6zC,EAAM7zC,QACYwE,IAAzByyH,EAAiBj3H,IAA8C,KAAzBi3H,EAAiBj3H,KACzD01H,EAAa11H,GAAMi3H,EAAiBj3H,UAC7Bi3H,EAAiBj3H,GAE5B,KAGF0M,OAAO4f,KAAK2qG,GAAkBh7F,SAAShtB,IACjCA,EAAIk3C,WAAW,gBACV8wE,EAAiBhoH,EAC1B,IAIFvC,OAAO4f,KAAKopG,GAAcz5F,SAAShtB,IAC7BonH,GAAkBjrH,SAAS6D,KAC7BymH,EAAazmH,GAA+B,cAC9C,IAGF,MAAMioH,EAAqB,IAAKD,EAAkB9rE,OAAQuqE,GACpDG,EAA+BlF,EAAwB/mH,KAAKksH,IAAqB,IAClFA,EACHC,kBAAmBtkD,GAAYzxE,OAG7B42H,GAA0BA,EAAuBvwH,OAAS,QACtD2mC,QAAQC,IACZ2pF,EAAuBhtH,KAAI2H,gBACnBu5D,EAAcxW,EAAM,6BAA6Bt0D,EAAGqhB,cAAc,KAE1EkN,MAAKhd,gBACC05D,EAAM3W,EAAM,gBAAgBt0D,EAAGqhB,cAAe61G,SAC9ClqF,QAAQC,IACZ4oF,EAA6BjsH,KAAI2H,gBACzB6gD,EACJkC,EAAM,6BACNwhE,EACD,IAEJ,WAGG7qD,EAAM3W,EAAM,gBAAgBt0D,EAAGqhB,cAAe61G,SAC9ClqF,QAAQC,IACZ4oF,EAA6BjsH,KAAI2H,gBACzB6gD,EACJkC,EAAM,6BACNwhE,EACD,MAIN3wD,EAA2CE,UAC5CptD,GAAU,EAAE,EAkCRo4B,SAAUA,IAAMp4B,GAAU,GAC1BwY,aAAckiF,EACdjgE,kBACE6iF,GACE1yH,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACL,aAAY2B,EAAE,QACd7D,QAAQ,YACRsD,QAAU2J,IACRA,EAAEwF,iBACFo8G,EAAiC,CAC/BtjD,WAAYA,EACZuqB,oBAC4Bx3F,IAA1B8wH,EACIA,IAAwB7jD,GAAYwqB,iBACnC,CAAC,EACRu4B,qBAAsBA,GACtB,EAEJ5wH,YAAasxH,IAAwBE,EAA2BryH,SAE/DgH,EAAE,eAEHvF,EACLzB,UAEDF,EAAAA,EAAAA,KAACmzH,GAAgB,CACfC,YAAU,EACV/5D,gBAAiBo5D,GAAyB,CAAC,EAC3CV,yBAA0BnjD,GAAYwqB,gBACtC43B,0BAA2BA,EAC3BlD,wBAAyBA,EACzBC,2BAA4BA,EAC5BC,mBAAoBA,EACpBsE,uBAAwBA,EACxBE,8BAA+BA,EAC/BP,wBAAyBA,EACzBniB,cAAeA,EACf2jB,oBAAqBA,UAnEzBzzH,EAAAA,EAAAA,KAACmhD,GAAU,CAAAjhD,UACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTL,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,eAAgBY,GAAI88C,EAAWgW,GAAS+3D,cACnD,CAAEr1H,MAAO4J,EAAE,wBAoEvB,CAEA,SAASisH,IAAiB,WACxBC,GAAa,EAAK,yBAClBrB,EAAwB,gBACxB14D,EAAe,0BACf23D,EAAyB,wBACzBlD,EAAuB,2BACvBC,EAA0B,mBAC1BC,EAAkB,4BAClBgE,EAA2B,uBAC3BM,EAAsB,8BACtBE,EAA6B,wBAC7BP,EAAuB,oBACvBwB,EAAmB,cACnB3jB,IAgBA,MAAM,EAAE5oG,IAAMC,EAAAA,EAAAA,MAERmtH,GAA0BnyD,EAAAA,GAAAA,IAAsC,CACpE/kE,KAAM,qBAGRrB,EAAAA,EAAAA,YAAU,KACJi2H,GACFA,EAA4BsC,EAC9B,GACC,CAACA,EAAyBtC,IAE7B,MAAMuC,EAAmBxC,GAA4BuC,EAE/CE,IACFn7D,GAAiE,WAA9CA,IAAkBk7D,IAAmBzlD,KAEtD2lD,GAAwBtyD,EAAAA,GAAAA,IAG3B,CACD/kE,KAAM,CAAC,OAAQ,qBAejB,OAZArB,EAAAA,EAAAA,YAAU,KACR,MACM24H,EAAmB,GACzB7qH,OAAOC,OAAO2qH,GAAuBr7F,SAAS1+B,IACxCA,SAAmD,KAAVA,GAC3Cg6H,EAAO3wH,KAAKrJ,EACd,IAGF43H,EAAuBoC,EAAOlxH,QAAUoqH,EAAqC,GAC5E,CAAC6G,EAAuBnC,KAGzBhtH,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,OACLE,MAAO4J,EAAE,QACTkf,YAAalf,EAAE,cACf8lB,YAAU,KAEZhtB,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,cACLE,MAAO4J,EAAE,eACTkf,YAAalf,EAAE,wBAEjBlH,EAAAA,EAAAA,KAACgtH,GAA0B,CAAahgG,WAAYwnG,EAAoBp3H,KAAK,kBAC7E4C,EAAAA,EAAAA,KAACkwH,GAA4B,CAC3B9yH,KAAK,kBACL4vB,YAAU,EACVjsB,WACEqyH,EACIlsH,EACE,4HAEFvF,IAGPqvH,GACDuD,GACAl7D,GACAA,EAAgBk7D,IACdv0H,EAAAA,EAAAA,KAACywH,GAAiB,CAChBt3B,eAAgB9/B,EAAgBk7D,GAChCvD,0BAA2BA,EAC3BoC,WAAYA,EACZtjB,cAAeA,EACfge,wBAAyBA,GAAoD,GAC7EC,2BAA4BA,EAC5BC,mBAAoBA,EACpBwE,8BAA+BA,EAC/BP,wBAAyBA,EACzBwB,oBAAqBA,IAErB,OAGV,CACA,SAAShD,IAAkB,eACzBt3B,EAAc,0BACd63B,EAAyB,WACzBoC,GAAa,EAAK,wBAClBtF,EAAuB,2BACvBC,EAA0B,mBAC1BC,EAAkB,8BAClBwE,EAA6B,wBAC7BP,EAAuB,oBACvBwB,EAAmB,cACnB3jB,IAaA,MAAM,EAAE5oG,IAAMC,EAAAA,EAAAA,MACRwtH,EH5fD,WACL,MAAM,WAAEx8F,EAAU,UAAEE,GAAcK,MAC3B57B,EAAOsuC,IAAY1vC,EAAAA,EAAAA,YACpBm2H,EAAU9mH,KAShB,OAPAhP,EAAAA,EAAAA,YAAU,KACJe,EACFq7B,GAAWn4B,EAAAA,EAAAA,KAAC8wH,GAAsB,IAAKh0H,EAAOyP,QAAS8rB,EAAWjqB,aAAcyjH,KAEhFx5F,GACF,GACC,CAACv7B,EAAOq7B,EAAYE,EAAWw5F,IAC3BzmF,CACT,CG+eqCwpF,GAC7BhH,EAAiBz0B,GAAgB7wC,QAAQzX,UAAY,GACrDgkF,EAA0B17B,GAAgB7wC,QAAQmpE,QAAQtzH,QAAQ6yC,GACtE48E,EAAerlH,SAASyoC,EAAM7zC,MAE1B23H,EAAgB37B,GAAgB7wC,QAAQmpE,QAAQ1qH,KAAKiqC,GAAUA,EAAM7zC,KAErEs3H,GAAwBtyD,EAAAA,GAAAA,IAAS,CACrC/kE,KAAMwwH,IAiBR,GAbAqE,GADyB9vD,EAAAA,GAAAA,IAAS,CAAE/kE,KAAM03H,MAG1C/4H,EAAAA,EAAAA,YAAU,KACR,MAAM24H,EAAmB,GACzB7qH,OAAOC,OAAO2qH,GAAuBr7F,SAAS1+B,IACxCA,SAAmD,KAAVA,GAC3Cg6H,EAAO3wH,KAAKrJ,EACd,IAGF83H,EAA8BkC,EAAOlxH,QAAUqxH,GAAyBrxH,OAAsB,GAC7F,CAACixH,EAAuBjC,EAA+BqC,KAErD17B,IAAmBA,GAAgB7wC,QAAQmpE,OAC9C,OAAO,KAGT,MAAMsD,EACJ57B,GAAgB7wC,QAAQmpE,QAAQtzH,QAC7B6yC,GAAyB,WAAfA,EAAMvtC,OAAsButC,GAAO60B,SAASriE,UACpD,GAEDwxH,EACJ77B,GAAgB7wC,QAAQmpE,QAAQtzH,QAAQ6yC,IAAWA,GAAO60B,SAASriE,QAAU,GAAK,KAAM,GAEpFyxH,EACJ97B,GAAgB7wC,QAAQmpE,QAAQtzH,QAAQ6yC,GAAyB,YAAfA,EAAMvtC,QAAuB,GAIjF,OAFkBsxH,EAAavxH,OAAS,GAAKwxH,EAAaxxH,OAAS,GAAKyxH,EAAczxH,OAAS,GAG7F8B,EAAAA,EAAAA,MAACygE,GAAe,CAAC1oE,MAAO6J,EAAE,gBAAgBhH,SAAA,CACT,QAA9Bi5F,GAAgB+7B,YAAuBl1H,EAAAA,EAAAA,KAACkvH,GAAc,IACtD6F,EAAavxH,OAAS,GACrBuxH,EAAahuH,KAAKiqC,GACZA,GAAO6/E,WAEP7wH,EAAAA,EAAAA,KAAC2tH,GAAwB,CACvBG,wBAAyBA,EACzBC,2BAA4BA,EAC5BC,mBAAoBA,EACpBl/C,KAAMqqB,EAAerqB,KAErB99B,MAAOA,EACP48E,eAAgBA,EAChBC,kBAAmBA,KACjB8G,EAA2B,CACzB3jF,QACAggF,4BACAlD,2BACA,EAEJG,kBAAmBne,GAAiBA,EAAc9+D,GAAO7zC,KAVpD6zC,EAAM7zC,IAakB,QAAxBg8F,EAAerqB,MAA+B,kBAAb99B,EAAM7zC,IAE9C6C,EAAAA,EAAAA,KAACmtH,GAAiB,CAEhBC,aAAcp8E,EACdhkB,WAAY4gG,EAAerlH,SAASyoC,EAAM7zC,KAFrC6zC,EAAM7zC,KAOb6C,EAAAA,EAAAA,KAACm1H,GAAmB,CAClB1B,oBAAqBA,EACrB3F,wBAAyBA,EACzBC,2BAA4BA,EAC5BC,mBAAoBA,EAEpBh9E,MAAOA,EACPmoD,eAAgBA,EAChB80B,kBAAmBne,GAAiBA,EAAc9+D,GAAO7zC,IACzD4D,WACe,aAAbiwC,EAAM7zC,IAA6C,UAAxBg8F,EAAerqB,MAAoBskD,EAEhEpmG,WAAY4gG,EAAerlH,SAASyoC,EAAM7zC,IAC1C0wH,kBAAmBA,IACjB8G,EAA2B,CACzB3jF,QACAggF,4BACAlD,6BAZC98E,EAAM7zC,MAmBpB63H,EAAaxxH,OAAS,GACrBwxH,EAAajuH,KAAKiqC,IAChBhxC,EAAAA,EAAAA,KAACs6C,GAAc,CAEb1sB,aAAcojB,GAAO3mC,QACrBjN,KAAM4zC,GAAO7zC,GACbG,MAAO0zC,EAAM1zC,MACb+oB,QAAS2qB,GAAO60B,SAAS9+D,KAAK++D,IAAM,CAAQprE,MAAOorE,EAAQxoE,MAAOwoE,OAAc,GAChF94C,WAAY4gG,EAAerlH,SAASyoC,EAAM7zC,IAC1Cg0C,UAAWH,EAAM63B,WANZ73B,EAAM7zC,MAShB83H,EAAczxH,OAAS,GACtByxH,EAAcluH,KAAKiqC,IACjBhxC,EAAAA,EAAAA,KAACuwC,GAAgB,CAEfnzC,KAAM4zC,EAAM7zC,GACZG,MAAO0zC,EAAM1zC,MACb0vB,WAAY4gG,EAAerlH,SAASyoC,EAAM7zC,IAC1Cg0C,UAAWH,EAAM63B,WAJZ73B,EAAM7zC,SAQjB,IACN,CACA,SAASg4H,IAAoB,eAC3Bh8B,EAAc,MACdnoD,EAAK,kBACL68E,EAAiB,WACjB9sH,GAAa,EAAK,WAClBisB,GAAa,EAAK,wBAClB8gG,EAAuB,2BACvBC,EAA0B,mBAC1BC,EAAkB,oBAClByF,EAAmB,kBACnBxF,IAaA,MAAM,EAAE/mH,IAAMC,EAAAA,EAAAA,OACR,SAAE4e,EAAQ,YAAEgoB,EAAW,UAAE2K,IAAc9H,EAAAA,GAAAA,OACtCwkF,EAAUC,IAAe35H,EAAAA,EAAAA,WAAS,GAEnC45H,EAAY,MACZC,EAAgBvkF,EAAMo9E,OACtBoH,EAHuB,gBAGGvH,GACzBC,EAAiBC,IAAsBzyH,EAAAA,EAAAA,UAAS65H,GAAiBC,IACjEC,EAA8BC,IAAmCh6H,EAAAA,EAAAA,WAAS,GAE3Ei6H,GAA0BxzD,EAAAA,GAAAA,IAAS,CACvC/kE,KAAM,OAAO4zC,EAAM7zC,KACnBywB,aAAcqgG,IAAsBqH,IAQhChH,EAL0BnxH,KAC9B,MAAM,KAAE+iB,GAASm2C,GAAuB5E,EAAM,gBAAiBt0D,GAC/D,OAAO+iB,CAAI,EAGYquG,CACvBT,EAAwB3vH,QAAQqwH,GAAOA,EAAGC,mBAAqBz9E,EAAM7zC,KAAI,IAAIuxH,mBAGzEC,GAAmB7yH,EAAAA,EAAAA,cACtBk1C,IACC,IAAI5qB,EAAc,GAMlB,OALA0nG,EAAwB10F,SAASo1F,IAC3BA,EAAGC,mBAAqBz9E,EAAM7zC,IAAMmxH,IACtCloG,EAAclf,EAAE,uBAAuBonH,EAAiBx/C,SAASw/C,EAAiBlxH,QACpF,IAEKgpB,CAAW,GAEpB,CAAC0nG,EAAyBQ,EAAkBpnH,IAGxC0uH,GAAkB95H,EAAAA,EAAAA,cAAY,KAC9B48C,EAAU1H,EAAM7zC,MAAQm4H,GAC1BvvG,EAASirB,EAAM7zC,GAAI,GAAI,CAAEyxH,aAAa,IAExC7gF,EAAYiD,EAAM7zC,IAClB4wH,IACED,EAAwB3vH,QAAQqwH,GAAOA,EAAGC,mBAAqBz9E,EAAM7zC,MAEvE6wH,KAAsBrmE,GAAmB,IAAIA,EAAM3W,EAAM7zC,KAAI,GAC5D,CACDu7C,EACA3yB,EACAgoB,EACAiD,EAAM7zC,GACN2wH,EACAC,EACAC,KAGFjyH,EAAAA,EAAAA,YAAU,KACJ45H,GAEE7H,EAAwBnmG,MAAM6mG,GAAOA,EAAGC,mBAAqBz9E,EAAM7zC,OACrE6wH,KAAsBrmE,GAAmB,IAAIA,EAAM3W,EAAM7zC,MACzD4wH,IACED,EAAwB3vH,QAAQqwH,GAAOA,EAAGC,mBAAqBz9E,EAAM7zC,OAGzE4oB,EAASirB,EAAM7zC,GAAIm4H,EAAW,CAAE1G,aAAa,IAC7C7gF,EAAYiD,EAAM7zC,KACRw4H,GAA2Bj9E,EAAU1H,EAAM7zC,MAAQm4H,GAC7DvvG,EAASirB,EAAM7zC,GAAI,GAAI,CAAEyxH,aAAa,GACxC,GACC,CACDl2E,EACAi9E,EACA3kF,EACAjrB,EACAioG,EACAF,EACAC,EACAhgF,KAGFhyC,EAAAA,EAAAA,YAAU,KACJ45H,IACFC,IACAP,GAAY,GACZlH,GAAmB,GACrB,GACC,CAACwH,EAAyBC,KAE7B75H,EAAAA,EAAAA,YAAU,KACJ+xH,EAAwBnmG,MAAM6mG,GAAOA,EAAGC,mBAAqBz9E,EAAM7zC,MACrE4oB,EAASirB,EAAM7zC,GAAIwxH,EAAiB39E,GAAQ,CAAE49E,aAAa,GAC7D,GACC,CAAC7oG,EAAU+nG,EAAyBa,EAAkB39E,IAEzD,MAuBMg+E,EAAaA,KACjBjpG,EAASirB,EAAM7zC,GAAI,GAAI,CAAEyxH,aAAa,IACtCT,GAAmB,EAAM,EAGrB0H,EAAqBA,KACzB9vG,EAASirB,EAAM7zC,GAAI8wH,EAAmB,CAAEW,aAAa,IACrDb,IACED,EAAwB3vH,QAAQqwH,GAAOA,EAAGC,mBAAqBz9E,EAAM7zC,MAEvEgxH,GAAmB,EAAK,GAG1BpyH,EAAAA,EAAAA,YAAU,KAENi1C,GAAO7zC,IACP+wH,GACAqH,GACAC,IACCG,GAED5vG,EAASirB,EAAM7zC,GAAI+J,EAAE,aAAc,CAAE0nH,aAAa,IAClD6E,GACEA,GAAqB9rE,GACnBA,EAAKp/C,SAASyoC,EAAM7zC,IAAMwqD,EAAO,IAAIA,EAAM3W,EAAM7zC,MAErDu4H,GAAgC,KAEhCA,GAAgC,GAChCjC,GACEA,GAAqB9rE,GAAmBA,EAAKxpD,QAAQhB,GAAOA,IAAO6zC,EAAM7zC,OAC7E,GACC,CACDs2H,EACAvF,EACAqH,EACAC,EACAG,EACA3kF,EAAM7zC,GACN4oB,EACA7e,IAGF,MAAM4uH,GAA0BH,GAA2BH,EAErDO,EACJr9E,EAAU1H,EAAM7zC,MAAQm4H,GAActkF,EAAMo9E,SAAWqH,EACnD,WACA,OAEN,OACEz1H,EAAAA,EAAAA,KAACo8C,GAAiB,CAEhBh/C,KAAM4zC,EAAM7zC,GACZG,MAAO0zC,EAAM1zC,MACb8oB,aAAc4qB,GAAO3mC,SAAWnD,EAAE,gBAAgBsX,WAClD/a,KAAMsyH,EACN/oG,YA/EE2oG,GAGG3oG,EA6ELjsB,WAAYA,KAAgB40H,GAA2BF,EACvDvtG,WA3EsB8oB,IACjB88E,EAAwBnmG,MAAM6mG,GAAOA,EAAGC,mBAAqBz9E,EAAM7zC,KA0E5D2xH,CAAiB99E,GAC7BG,UAAWH,EAAM63B,UACjBnxB,WAzEsB1G,KACxB,IAAI0G,EAAa,GAQjB,OAPAo2E,EAAwB10F,SAASo1F,IAC3BA,EAAGC,mBAAqBz9E,EAAM7zC,KAChCu6C,EAAaxwC,EACX,0GAEJ,IAEKwwC,CAAU,EAgEHm3E,CAAiB79E,GAC7Bv4B,OAC2B,aAAzB0gF,GAAgBrqB,MACdxpE,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CACNg0H,aAAc,CAAC,MAAO,UACtB/zH,QAASiF,EAAE,4DAA4DhH,UAEvEF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLxE,WAAYA,KAAgB40H,GAA2BF,EACvD,UAAQ,0BACRpyH,QAAQ,UACRH,MACElD,EAAAA,EAAAA,KAACoF,EAAAA,EAAI,CAAAlF,UACHF,EAAAA,EAAAA,KAACg7G,GAAAA,GAAO,MAGZr0G,QAASknH,MAGZC,EAAwBnmG,MAAM6mG,GAAOA,EAAGC,mBAAqBz9E,EAAM7zC,OAClE6C,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACL,UAAQ,gCACRlC,QAAQ,UACRsD,QAASivH,EAAgB11H,SAExBgH,EAAE,WAGN4uH,GACC91H,EAAAA,EAAAA,KAACi2H,GAAmB,CAClBjH,WAAYA,EACZoG,SAAUA,EACVc,YAAaL,EACbR,YAAaA,IAEb,QAEJS,GACF91H,EAAAA,EAAAA,KAACi2H,GAAmB,CAClBjH,WAAYA,EACZoG,SAAUA,EACVc,YAAaL,EACbR,YAAaA,IAEb,KAENt9E,mBACE/G,GAAOmlF,iBACLn2H,EAAAA,EAAAA,KAACuwC,GAAgB,CAACnzC,KAAM,OAAO4zC,EAAM7zC,KAAMG,MAAO4J,EAAE,uBA1DnD8pC,EAAM7zC,GA+DjB,CAEA,MAAM84H,GAAsBA,EAC1BjH,aACAkH,cACAd,WACAC,kBAOA,MAAM,EAAEnuH,IAAMC,EAAAA,EAAAA,MACd,OACEnH,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CAACC,QAAoBiF,EAAXkuH,EAAa,SAAc,WAAWl1H,UACtDF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLpI,GAAG,4BACH,aACa+J,EAAXkuH,EAAa,yCAA8C,gCAE7D/xH,QAASuB,EAAAA,GAAc8rC,QACvBxtC,MAAMlD,EAAAA,EAAAA,KAAC+uH,GAAAA,GAAQ,IACfpoH,QAASA,KACHyuH,EACFc,IAEAlH,IAEFqG,GAAaD,EAAS,KAGlB,ECxgCP,SAASgB,GAAqBt5H,GAKnC,MAAM,OAAEwrD,EAAM,MAAEtX,EAAK,aAAE2iF,GAAiB72H,GAClC,EAAEoK,IAAMC,EAAAA,EAAAA,OACR,GAAEhK,EAAE,MAAEG,EAAK,KAAEmG,EAAI,eAAE0yH,EAAc,UAAEttD,EAAY,IAAO73B,EAC5D,OAAI7zC,GAAMw2H,GAAgBA,EAAax2H,IAEnCmI,EAAAA,EAAAA,MAAC+nC,EAAAA,SAAc,CAAAntC,SAAA,EACbF,EAAAA,EAAAA,KAACkhB,GAAU,CAACC,SAAU0nD,EAAWvrE,MAAOA,EAAQ,KAAK4C,UACnDF,EAAAA,EAAAA,KAACqoB,GAAAA,EAAS,CAACC,SAAU,EAAG7f,OAAQ,cAActL,UAAW+C,UACvDF,EAAAA,EAAAA,KAAC2uE,GAAe,CAACC,WAAY+kD,EAAax2H,IAAKg+D,gBAAgBuzD,wBAGlEiF,EAAax2H,IAAOw2H,EAAax2H,GAAIyzH,WACpC5wH,EAAAA,EAAAA,KAACo2E,GAAoB,CACnB94E,MAAO4J,EAAE,YACTxM,MAAO0V,KAAKa,UAAU0iH,EAAax2H,GAAIyzH,SAAU,KAAM,OATxCzzH,GAgBZ,YAATsG,GAEAzD,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,UACEF,EAAAA,EAAAA,KAACkhB,GAAU,CAAU5jB,MAAOA,EAAO6jB,SAAU0nD,EAAU3oE,SACpDooD,EAAOnrD,GAAM+J,EAAE,OAASA,EAAE,OADZ/J,KAOJ,gBAAfmrD,EAAOnrD,IAEP6C,EAAAA,EAAAA,KAACkhB,GAAU,CAAU5jB,MAAOA,EAAO6jB,SAAU0nD,EAAU3oE,SACpDgH,EAAE,cADY/J,GAMjBg5H,GAAiC,QAAf7tE,EAAOnrD,IAEzBmI,EAAAA,EAAAA,MAAC4b,GAAU,CAACC,SAAU0nD,EAAoBvrE,MAAOA,EAAM4C,SAAA,CACpDgH,EAAE,oBAAqB,MADY/J,IAOxC6C,EAAAA,EAAAA,KAACkhB,GAAU,CAAU5jB,MAAOA,EAAO6jB,SAAU0nD,EAAU3oE,SACpDooD,EAAOnrD,IADOA,EAIrB,CCzCA,MAAMk5H,GAAkB3zH,EAAAA,GAAOgG,EAAC9F,WAAA,CAAAC,YAAA,qBAARH,CAAQ,sBAIzB,SAASssE,KACd,MAAM3qB,GAASgZ,EAAAA,GAAAA,MACPn9C,KAAM0uD,EAAU,UAAExlD,GAAcitC,GAAuB5E,EAAM,eAAgBpN,EAAOlnD,IAE5F,OAAIisB,IAAcwlD,GACT5uE,EAAAA,EAAAA,KAACkqD,GAAW,IAGd0kB,GAAa5uE,EAAAA,EAAAA,KAACs2H,GAAsB,CAAC1nD,WAAYA,IAAiB,IAC3E,CAEO,SAAS0nD,GAAuBx5H,GACrC,MAAM,IAAQqK,EAAAA,EAAAA,OACR,WAAEynE,GAAe9xE,EACjBk+D,EAAerW,KACfC,EAAaT,MAEb,eAAEgX,EAAgB7S,OAAQiuE,GAAqB3nD,GAGnD1uD,KAAMi5E,EAAc,MACpBnsF,EAAK,QACLuoD,GACEc,GACF5E,EAAM,oBACN0J,EAAei+B,gBAAgBj8F,GAAGqhB,aAIlC0zC,QAASyhE,EACT3mH,MAAOwpH,EACPptG,UAAWqtG,EACXlhE,QAASmhE,GACPx5C,GACFzrB,EAAM,gBAAgBmd,EAAWzxE,GAAGqhB,6BAGhCm4G,GAAkBtyH,EAAAA,EAAAA,UAAQ,IACvBsvH,GAAc51G,QAAO,CAAChX,EAA4C+sH,KACvE/sH,EAAI+sH,EAAYrF,kBAAoBqF,EAC7B/sH,IACN,CAAC,IACH,CAAC4sH,IAEJ,OAAI3mH,GAEAhN,EAAAA,EAAAA,KAACi9D,GAAQ,CACPjwD,MAAOA,GAASwpH,EAChBt5D,cAAelwD,EAAQuoD,EAAUmhE,IAGnCD,GAA6Bz2H,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,KAE5D7kD,EAAAA,EAAAA,MAACoc,GAAW,CAAAxhB,SAAA,EACVF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,QAAQhH,SAAE0uE,EAAWxxE,QAC1C4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,eAAehH,SAAE0uE,EAAWhzD,eACjD5b,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,gBAAgBhH,SAClC0uE,EAAWzT,eAAeiV,eACzBpwE,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAMmgE,EAAWzT,gBAAgBiV,cAAchzE,KAC/C0K,GAAI88C,EAAWgW,GAAS62B,oBAAqB,CAC3CptC,OAAQ,CAAElnD,GAAIyxE,EAAWzT,gBAAgBiV,cAAcjzE,WAK/D6C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,mBAAmBhH,SACrCi5F,GAAgB38B,SACfx8D,EAAAA,EAAAA,KAACmV,GAAQ,CAAC1G,KAAMmgE,EAAWzT,gBAAgBi+B,iBAAiBh8F,QAE5D4C,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAMmgE,EAAWzT,gBAAgBi+B,iBAAiBh8F,KAClD0K,GAAI88C,EAAWgW,GAASmtD,sBAAuB,CAC7C1jE,OAAQ,CAAElnD,GAAIyxE,EAAWzT,gBAAgBi+B,iBAAiBj8F,UAKjEw5H,GACCJ,IACCp9B,GAAgB7wC,OAAOmpE,QAAU,IAAI1qH,KAAI,CAACiqC,EAAOtjC,KAChD1N,EAAAA,EAAAA,KAACo2H,GAAoB,CAEnB9tE,OAAQiuE,EACRvlF,MAAOA,EACP2iF,aAAcgD,GAHT,GAAG3lF,EAAM7zC,OAAOuQ,QAM3B1N,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,WAAWhH,UAC9BF,EAAAA,EAAAA,KAACqS,GAAY,CACX3X,MAAOk0E,EAAWvT,QAClB/oD,OAAQs8D,EAAWzT,gBAAgByU,YAAYhU,SAC/Cj1D,QAASA,IACPq0D,EAAaJ,GAASiB,YAAa,CACjCxX,OAAQ,CAAElnD,GAAIyxE,EAAWzT,gBAAgByU,YAAYzyE,WAK7D6C,EAAAA,EAAAA,KAACmsE,GAAsB,CACrBzxE,MAAOk0E,EAAWmB,SAClBz9D,OAAQs8D,EAAWzT,gBAAgB8U,aAAarU,SAChDj1D,QAASA,IACPq0D,EAAaJ,GAASiB,YAAa,CACjCxX,OAAQ,CAAElnD,GAAIyxE,EAAWzT,gBAAgB8U,aAAa9yE,QAI3Do5H,GAAoB5C,GAAgB9pH,OAAO4f,KAAKkqG,GAAcnwH,OAAS,IACtExD,EAAAA,EAAAA,KAACq2H,GAAe,CAAAn2H,SACbgH,EACC,gHAMZ,CCvIO,SAAS0vH,GAAwCC,GACtD,MAAM,IAAQ1vH,EAAAA,EAAAA,MACR6zD,EAAerW,KACrB,OAAOtgD,EAAAA,EAAAA,UAA0B,IACxB,CACL,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMygE,GAAAA,GACNrmE,MAAO4J,EAAE,wBACTP,QAASA,IAAMq0D,EAAaJ,GAAS8I,eAAgB,CAAEpf,MAAO,CAAE7gD,KAAMozH,MAExE,CAAEpzH,KAAMrJ,EAAesJ,aAExB,CAACs3D,EAAc67D,EAAW3vH,GAC/B,CCrBO,MAAM4vH,GAAqBA,CAChC/iF,EACA7sC,EACA6vH,IAEAhjF,GAAUonB,gBAAgB6iC,mBAAmB5G,MAAQ2/B,EACjD,GACA7vH,EAAE,0DAED,SAAS8vH,GAAqBjjF,EAAwB7sC,GAC3D,OAAI6sC,EAASonB,gBAAgB6iC,mBAAmB3yC,OACvC,GAEFnkD,EAAE,0DACX,CAEO,SAAS+vH,GAAsBz7B,EAA2Bt0F,GAC/D,OAAIs0F,EAAUh3F,MAAMuvC,GAA2BijF,GAAqBjjF,EAAU7sC,KACrEA,EAAE,yEAEJ,EACT,CAEO,MAAMgwH,GAAqBA,CAACnjF,EAAwB7sC,IACzD6sC,GAAUonB,gBAAgB6iC,mBAAmBm5B,KACzC,GACAjwH,EAAE,0DCpBD,SAASkwH,GAAqBluF,GACnC,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR0kC,EAAsBitD,GAAsB,CAAEjjF,cAAc,EAAM0mD,aAAa,IAC/E8W,EAAyBlE,GAAc,CAAEt5D,cAAc,EAAM0mD,aAAa,IAC1EvzB,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAACgvE,IAAyB,CAACA,IACzDzT,EAAaH,KAkBnB,OAjB2BtQ,IACzByQ,EAAW,CACTviE,MAAO6J,EAAE,iCAAkC,CAAEoV,MAAO6yC,EAAY3rD,SAChEzF,YAAamJ,EAAE,oEAAqE,CAClFoV,MAAO6yC,EAAY3rD,SAErBwoC,iBAAkB9kC,EAAE,oBAAqB,CAAEoV,MAAO6yC,EAAY3rD,SAC9Ds1B,MAAOq2B,EAAY/vD,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QAC3D27B,MAAO62B,GACPtoD,UAAU,EACVukC,sBACA7C,gBACAE,aACAD,SAAUA,CAAC2lC,EAAwBnjD,IACjCgkC,GAAcgC,EAAM,gBAAgBmd,EAAWzxE,GAAGqhB,cAAeiN,IACnE,CAGN,CCdO,SAAS4rG,GAAqBhxG,GAInC,MAAM,IAAQlf,EAAAA,EAAAA,MACR6zD,EAAerW,KACf2yE,EAAoBF,GAAqB/wG,GAASkxG,WAClDC,ECpBD,SAA2BtuF,GAChC,MAAM,IAAQ/hC,EAAAA,EAAAA,MACRooD,EAAcyT,KACd50D,EAAerD,KAyBrB,OAvBwB6jE,IACtB,MAAM/uE,EAAoB,CACxBwD,QAAS,UACThG,MAAO6J,EAAE,GAAG0nE,EAAWxxE,gBACvBmO,QAAS,KAEXgkD,EAAYkC,EAAM,gBAAgBmd,EAAWzxE,GAAGqhB,mBAAoB,CAClEphB,KAAM,GAAGwxE,EAAWxxE,WAAU,IAAIwU,MAC/B6lH,eACA98H,QAAQ,0BAA2B,UAErC+wB,MAAK,KACJtd,EAAazD,SAAS9K,EAAM,IAE7BmP,OAAOhC,IACNoB,EAAavD,aAAahL,EAAO,CAC/BwD,QAAS,SACThG,MAAO6J,EAAE,6BACThH,SAAU8M,aAAiBsX,OAAStX,EAAMK,SAC1C,IAEH6e,QAAQgd,EAAW,CAG1B,CDTyBwuF,CAAkBrxG,GAASsxG,oBAqClD,OApCmBtzH,EAAAA,EAAAA,UACjB,IAAM,CACJ,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAM84D,GAAAA,GACN34D,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVnN,MAAO4J,EAAE,mBACTnG,WAAa6tE,GAAekoD,GAAmBloD,EAAY1nE,GAC3DP,QAAUioE,GACR5T,EAAaJ,GAASy4D,eAAgB,CAAEhvE,OAAQ,CAAElnD,GAAIyxE,EAAWzxE,OAErE,CACEsG,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAM22C,GAAAA,GACNv8C,MAAO4J,EAAE,mBACTP,QAAUioE,GAA2B4oD,EAAe5oD,GACpD7tE,WAAa6tE,GAAesoD,GAAmBtoD,EAAY1nE,GAC3DI,UAAU,EACVmD,UAAU,GAEZ,CAAEhH,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,qBACTnG,WAAa6tE,GAAeooD,GAAqBpoD,EAAY1nE,GAC7DP,QAAUioE,GAAe0oD,EAAkB,CAAC1oD,IAC5CtnE,UAAU,KAGd,CAAC0zD,EAAcw8D,EAAgBF,EAAmBpwH,GAGtD,CE9CO,SAAS0wH,KACd,MAAM,EAAE1wH,IAAMC,EAAAA,EAAAA,MACRsyD,EAAiBm9D,GAAsB,cACvCvyE,GAASgZ,EAAAA,GAAAA,MACPn9C,KAAM0uD,GAAevY,GAAuB5E,EAAM,eAAgBpN,EAAOlnD,IAC3EynD,EAAaT,KACb6W,EAAerW,KACfrhD,EAAU+zH,GAAqB,CACnCE,UAAWA,IAAMv8D,EAAaJ,GAAS+3D,eAEzC,OACErtH,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAOuxE,GAAYxxE,KACnBgjD,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,eAAgBY,GAAI88C,EAAWgW,GAAS+3D,cACnD,CAAEr1H,MAAOsxE,GAAYxxE,OAEvBujD,eACE3gD,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAAS,IAAIm2D,KAAmBn2D,GAChCF,SAAU6F,GAAAA,GAAiBC,MAC3B3I,aAAcquE,OAIpB5uE,EAAAA,EAAAA,KAAC09D,GAAc,CACbe,QAAS,CACPnhE,MAAO4J,EAAE,uBACTiuB,KAAMylC,GAAS+3D,YACfj0D,oBAAqB,eAEvBvU,KAAM,CACJ,CAAE7sD,MAAO4J,EAAE,WAAYiuB,KAAMylC,GAASoU,kBAAmBnQ,OAAQ,sBACjE,CACEvhE,MAAO4J,EAAE,iBACTiuB,KAAMylC,GAASi9D,uBACfh5D,OAAQ,iBAEV,CAAEvhE,MAAO4J,EAAE,eAAgBiuB,KAAMylC,GAASk9D,qBAAsBj5D,OAAQ,eACxE,CAAEvhE,MAAO4J,EAAE,eAAgBiuB,KAAMylC,GAASm9D,qBAAsBl5D,OAAQ,gBAE1Exa,OAAQ,CAAElnD,GAAIknD,EAAOlnD,IAAM,OAInC,CCrDO,SAAS66H,GAAgBl7H,GAC9B,MAAM,IAAQqK,EAAAA,EAAAA,MACR6zD,EAAerW,KACfziB,EAAe42D,KAErBv7B,GAAqB,eACrB,MAAMntC,EAAiBgrE,KAEjBtuD,EAAO6zB,GAAuB,CAClCvc,IAAKtnD,EAAMsnD,IACXh0B,iBACA8R,iBAEIvM,ECVD,SAAqCmX,GAC1C,MAAM,IAAQ3lC,EAAAA,EAAAA,MACR6zD,EAAerW,KACf2yE,EAAoBF,GAAqBtqF,EAAK00B,yBAwBpD,OAvBuBn9D,EAAAA,EAAAA,UACrB,IAAM,CACJ,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVvH,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,qBACTP,QAASA,IAAMq0D,EAAaJ,GAASk3D,mBAEvC,CAAEruH,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,sBACTP,QAAS2wH,EACThwH,UAAU,KAGd,CAAC0zD,EAAcs8D,EAAmBpwH,GAGtC,CDlByB+wH,CAA4BnrF,GAC7C3K,EAAak1F,GAAqB,CACtCE,UAAWA,KAAWzqF,EAAKyoB,SAAS,EACpCoiE,mBAAoBA,KAAW7qF,EAAKyoB,SACtC,IAEA,OACEv1D,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,wBACHizB,eAAgBA,EAChBuF,eAAgBA,EAChBuM,aAAcA,EACdC,WAAYA,EACZ8C,gBAAiB/9B,EAAE,6BACnBg+B,gBAAiBh+B,EAAE,sBACnBi+B,sBAAuBj+B,EAAE,yCACzBq+B,sBAAsBvlC,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrCwN,qBAAsBp+B,EAAE,qBACxBm+B,sBAAuBA,IAAM21B,EAAaJ,GAASk3D,qBAC/ChlF,EACJ1K,gBAAiBl7B,EAAE,eAGzB,CEvCO,SAASyrH,KACd,MAAM,EAAEzrH,IAAMC,EAAAA,EAAAA,MAEdo2D,GAAqB,eACrB,MAAMzE,EAASvC,KAEf,OACEjxD,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,eACT+5C,eAAgB/5C,EAAE,eAClB85C,UAAW95C,EACT,+eACA,CAAE4/G,QAXcx8E,QAalB4W,aAAc2X,GAAcC,EAAQ,eACpCl9C,YAAa1U,EACX,sMACA,CAAE4/G,QAhBcx8E,QAkBlBqW,eAAe3gD,EAAAA,EAAAA,KAACyjE,GAAkB,CAAChgE,KAAM,kBAE3CzD,EAAAA,EAAAA,KAACg4H,GAAe,CAAC5zE,IAAKqN,EAAM,oBAGlC,CCvBO,SAASymE,GACdhvF,GAEA,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR0kC,EAAsBk7D,GAAmB,CAAElxF,cAAc,EAAM0mD,aAAa,IAC5E8W,EAAyBlE,GAAc,CAAEt5D,cAAc,EAAM0mD,aAAa,IAC1EvzB,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAACgvE,IAAyB,CAACA,IACzDzT,EAAaH,KAgCnB,OA3ByBlF,IAJO92D,MAK9Bm8D,EAAW,CACTviE,MACuB,IAArBk9D,EAAU/2D,QAPgBC,EAQC82D,EAAU,GAAG92D,KANxCyD,EADK,iBAATzD,EACM,kCACA,6CAMEyD,EAAE,gCACRnJ,YAAamJ,EAAE,kEAAmE,CAChFoV,MAAOi+C,EAAU/2D,SAEnBwoC,iBAAkB9kC,EAAE,kBAAmB,CAAEoV,MAAOi+C,EAAU/2D,SAC1Ds1B,MAAOyhC,EAAUn7D,MAAK,CAAC6sC,EAAqBC,IAC1CV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QAE3B27B,MAAO62B,GACPtoD,UAAU,EACVukC,sBACA7C,gBACAE,aACAD,SAAUA,CAAC08C,EAA6Cl6D,IAChC,iBAAlBk6D,EAASliF,KACJgsD,GAAcgC,EAAM,kBAAkBk0B,EAASxoF,GAAGqhB,cAAeiN,GAEjEgkC,GAAcgC,EAAM,2BAA2Bk0B,EAASxoF,GAAGqhB,cAAeiN,IAGrF,CAGN,C,eCrBO,SAAS0sG,IAAmB,mBACjCC,EAAkB,iBAClBC,EAAmBA,IAAM,OAEzB,MAAM,EAAEnxH,IAAMC,EAAAA,EAAAA,MACRmxH,EAAkBJ,GAAmBE,GACrCG,EAAiB7lB,KACjB8lB,EC7BD,SAAyBtvF,GAC9B,MAAM,IAAQ/hC,EAAAA,EAAAA,MACRooD,EAAcyT,KACd50D,EAAerD,KA4CrB,OA1CsB46E,IACpB,MAAM9lF,EAAoB,CACxBwD,QAAS,UACThG,MAAO6J,EAAE,GAAGy+E,EAASvoF,gBACrBmO,QAAS,KAEW,iBAAlBo6E,EAASliF,KACX8rD,EAAYkC,EAAM,kBAAkBk0B,EAASxoF,GAAGqhB,mBAAoB,CAClEphB,KAAM,GAAGuoF,EAASvoF,WAAU,IAAIwU,MAC7B6lH,eACA98H,QAAQ,0BAA2B,UAErC+wB,MAAK,KACJtd,EAAazD,SAAS9K,EAAM,IAE7BmP,OAAOhC,IACNoB,EAAavD,aAAahL,EAAO,CAC/BwD,QAAS,SACThG,MAAO6J,EAAE,2BACThH,SAAU8M,aAAiBsX,OAAStX,EAAMK,SAC1C,IAEH6e,QAAQgd,GACgB,0BAAlBy8C,EAASliF,MAClB8rD,EAAYkC,EAAM,2BAA2Bk0B,EAASxoF,GAAGqhB,mBAAoB,CAC3EphB,KAAM,GAAGuoF,EAASvoF,WAAU,IAAIwU,MAC7B6lH,eACA98H,QAAQ,0BAA2B,UAErC+wB,MAAK,KACJtd,EAAazD,SAAS9K,EAAM,IAE7BmP,OAAOhC,IACNoB,EAAavD,aAAahL,EAAO,CAC/BwD,QAAS,SACThG,MAAO6J,EAAE,2BACThH,SAAU8M,aAAiBsX,OAAStX,EAAMK,SAC1C,IAEH6e,QAAQgd,EACb,CAGJ,CDnBuBuvF,CAAgBJ,GAC/BzzE,EAAaT,KAEnB,OAAO9/C,EAAAA,EAAAA,UAAiC,IACO,CAC3C,CACEZ,KAAMrJ,EAAeyN,KACrBnH,SAAWilF,GAAgC,0BAAnBA,GAAUliF,KAClCjD,UAAWnG,EAAoBsG,OAC/B8J,UAAU,EACVvH,KAAMw1H,GAAAA,GACNp7H,MAAO4J,EAAE,4BACT7D,QAASuB,EAAAA,GAAcC,QACvB4D,OAAQ,kCACRV,KAAO49E,GACL/gC,EAAWgW,GAAS+9D,mBAAoB,CAAEt0E,OAAQ,CAAElnD,GAAIwoF,EAASxoF,OAErE,CACEsG,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMixG,GAAAA,GACN72G,MAAO4J,EAAE,mBACTP,QAAUg/E,IAA4B4yC,EAAe5yC,EAAS,EAC9D5kF,WAAa4kF,GACXmhB,GAAiBnhB,GACbz+E,EAAE,6CACDy+E,GAAUxqB,eAAe6iC,kBAAkB1qF,WAE1C3R,EADAuF,EAAE,sDAEVuB,OAAQ,oCACRnB,UAAU,EACVmD,UAAU,GAEZ,CACEhH,KAAMrJ,EAAeyN,KACrBrH,UAAWnG,EAAoBsG,OAC/B8J,UAAU,EACV/J,SAAWilF,IAAcA,GAAUxqB,gBAAgB6iC,mBAAmB5G,KACtEl0F,KAAM84D,GAAAA,GACN1+D,MAAO4J,EAAE,iBACTuB,OAAQ,kCACRV,KAAO49E,GACL/gC,EACoB,iBAAlB+gC,EAASliF,KACLm3D,GAASg+D,gBACTh+D,GAASi+D,wBACb,CAAEx0E,OAAQ,CAAElnD,GAAIwoF,GAAUxoF,GAAGqhB,eAGnC,CACE/a,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAM22C,GAAAA,GACNv8C,MAAO4J,EAAE,iBACTP,QAAUg/E,GAAuB6yC,EAAa7yC,GAC9C5kF,WAAa4kF,GACVA,GAAUxqB,eAAe6iC,kBAAkBm5B,UAExCx1H,EADAuF,EAAE,oDAERuB,OAAQ,kCACRnB,UAAU,GAEZ,CAAE7D,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMo9D,GAAAA,GACNv/D,WAAa4kF,GACVA,GAAUxqB,gBAAgB6iC,mBAAmB3yC,YAE1C1pD,EADAuF,EAAE,sDAER5J,MAAO4J,EAAE,mBACTP,QAAUg/E,IACHA,GACL2yC,EAAgB,CAAC3yC,GAAU,EAE7Bl9E,OAAQ,oCACRnB,UAAU,KAIb,CAACkxH,EAAcF,EAAiB1zE,EAAY2zE,EAAgBrxH,GACjE,CE9FO,SAAS4xH,GAAch8H,GAO5B,MAAM,IAAQqK,EAAAA,EAAAA,MACR6zD,EAAerW,KACfC,EAAaT,KACb/zB,EC5BD,UAA4B,IACjCg0B,EAAG,UACH20E,EAAS,YACTpjC,EAAW,cACXqjC,EAAa,uBACbC,GAOE,CAAC,GACH,MAAMC,EAAW90E,EAAMA,EAAI58C,MAAM,KAAO,GAClC8xF,EAAc4/B,EAASA,EAAS11H,OAAS,IAAM,wBAC/C2kG,EAAyBjN,KACzBkN,EAA0BjN,KAC1Bg+B,EzJmND,WACL,MAAM,EAAEjyH,IAAMC,EAAAA,EAAAA,MACd,OAAO9C,EAAAA,EAAAA,UACL,KAAM,CACJ+H,IAAK,iBACL9O,MAAO4J,EAAE,QACTzD,KAAMysB,GAAkBuB,YACxB6yB,MAAO,OACPj+B,QAAS,CACP,CAAE/oB,MAAO4J,EAAE,gBAAiBxM,MAAO,gBACnC,CAAE4C,MAAO4J,EAAE,yBAA0BxM,MAAO,0BAE9C0rB,YAAalf,EAAE,mBAEjB,CAACA,GAEL,CyJnO4BkyH,GAwBpBt4D,EAvBiBu4D,EACrBN,EACApjC,EACAqjC,EACAC,KAEA,MAAMK,EAAiD,CACrD71H,KAAM,sCAcR,OAZIs1H,IACFO,EAAoBC,YAAcR,GAEhCpjC,IACF2jC,EAAoBE,cAAgB7jC,GAElCqjC,IACFM,EAAoBG,gBAAkBT,GAEpCC,IACFK,EAAoBI,0BAA4BT,GAE3CK,CAAmB,EAERD,CAAeN,EAAWpjC,EAAaqjC,EAAeC,GAiB1E,OAhBuB5/B,GAAyB,CAC9CC,YAAaA,EACbC,cAAe,CAAC,OAAQ,cAAe,SAAU,aAAc,cAAe,kBAC9EC,mBAAoB,CAClBp8F,KAAM,CACJi9F,QAASf,EACTx4B,YAAaA,GAEf3jE,GAAI,CACFk9F,QAASf,EACTx4B,YAAaA,IAGjB24B,kBAAmB,CAAC0O,EAAwBC,EAAyB+wB,GACrEz/B,cAAe,CAAC,SAGpB,CD/ByBigC,CAAmB,CACxCv1E,IAAKtnD,EAAMsnD,IACX20E,UAAWj8H,EAAMi8H,UACjBpjC,YAAa74F,EAAM64F,YACnBqjC,cAAel8H,EAAMk8H,cACrBC,uBAAwBn8H,EAAMm8H,yBAE1B/2F,EAAe6kE,KAyBfj6D,EAAO6zB,GAA8C,CACzDvc,IAAKtnD,EAAMsnD,IAAMtnD,EAAMsnD,IAAMqN,EAAM,0BACnCqP,YA1BqBu4D,EACrBN,EACApjC,EACAqjC,EACAC,KAEA,MAAMK,EAAiD,CACrD71H,KAAM,sCAeR,OAZIs1H,IACFO,EAAoBC,YAAcR,GAEhCpjC,IACF2jC,EAAoBE,cAAgB7jC,GAElCqjC,IACFM,EAAoBG,gBAAkBT,GAEpCC,IACFK,EAAoBI,0BAA4BT,GAE3CK,CAAmB,EAIbD,CACXv8H,EAAMi8H,UACNj8H,EAAM64F,YACN74F,EAAMk8H,cACNl8H,EAAMm8H,wBAER7oG,iBACA8R,kBAGMhiB,KAAMgmG,GAAuBtiD,GACnCnS,EAAM,oBAGAvxC,KAAMimG,GAAyBviD,GACrCnS,EAAM,4BAGF20D,EAAuBphH,QAC3BkhH,GAAsBA,EAAmB5iH,SAAW4iH,EAAmB5iH,QAAc,MAGjF+iH,EAAyBrhH,QAC7BmhH,GAAwBA,EAAqB7iH,SAAW6iH,EAAqB7iH,QAAc,MAG7Fi6D,GAAqB,aACrB,MAAM+6D,EAAkBJ,GAAmBprF,EAAK00B,yBAE1C7rC,GAAiBtxB,EAAAA,EAAAA,UACrB,IAAM,CACJ,CACEZ,KAAMrJ,EAAewL,SACrBvC,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVnN,MAAO4J,EAAE,mBACTnG,WACEqlH,GAAwBC,OACpB1kH,EACAuF,EACE,0IAER1G,UAAWnG,EAAoBoG,KAC/ByC,KAAM40B,GAAAA,GACNx0B,QAAS,CACP,CACEG,KAAMrJ,EAAeyN,KACrBrH,UAAWnG,EAAoBoG,KAC/BnD,MAAO4J,EAAE,uBACTnG,WAAYqlH,OACRzkH,EACA,6IACJoG,KAAM68C,EAAWgW,GAAS0rD,oBAE5B,CACE7iH,KAAMrJ,EAAeyN,KACrBrH,UAAWnG,EAAoBoG,KAC/BnD,MAAO4J,EAAE,gCACTnG,WAAYslH,OACR1kH,EACA,sJACJoG,KAAM68C,EAAWgW,GAASg/D,8BAIhC,CACEn2H,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAMo9D,GAAAA,GACNhjE,MAAO,mBACPqJ,QAAS2xH,EACThxH,UAAU,KAGd,CAAC8+G,EAAsBC,EAAwBiS,EAAiB1zE,EAAY19C,IAGxEi7B,EAAag2F,GAAmB,CACpCC,mBAAoBtrF,EAAK00B,wBACzB62D,iBAAkBvrF,EAAKyoB,UAGzB,OACEv1D,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,0BACHizB,eAAgBA,EAChBuF,eAAgBA,EAChBuM,aAAcA,EACdC,WAAYA,EACZ8C,gBAAiB/9B,EAAE,2BACnBg+B,gBAEMh+B,EADJk/G,GAAwBC,EAClB,mBACA,mDAERlhF,sBAEMj+B,EADJk/G,GAAwBC,EAClB,sDAEA,yFAGR9gF,sBAAsBvlC,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrCwN,qBACE8gF,GAAwBC,EAAyBn/G,EAAE,wBAAqBvF,EAE1E0jC,sBACE+gF,EAAuB,IAAMprD,EAAaJ,GAAS0rD,wBAAqB3kH,KAEtEmrC,EACJ1K,gBAAiBl7B,EAAE,aAGzB,CElLO,SAAS2wH,KACd,MAAM,GAAE16H,EAAK,KAAOkgE,EAAAA,GAAAA,KACpB,OAAOr9D,EAAAA,EAAAA,KAAC84H,GAAa,CAAC10E,IAAKqN,EAAM,kBAAmBunE,cAAe77H,GACrE,C,gBCJO,SAAS08H,KACd,MAAM,EAAE3yH,IAAMC,EAAAA,EAAAA,MAOd,OAAOrL,EAAAA,EAAAA,cACL,CAACkyD,EAAqB3nC,KACpB,MAAMyzG,EAAsD,CAC1DC,cAAsC7yH,EAAvBmf,GAAS2zG,YAAgB,aAAkB,cAC1DprD,WAAmC1nE,EAAvBmf,GAAS2zG,YAAgB,aAAkB,cACvDppD,QAAgC1pE,EAAvBmf,GAAS2zG,YAAgB,UAAe,WACjDC,WAAmC/yH,EAAvBmf,GAAS2zG,YAAgB,sBAA2B,uBAChEE,SAAiChzH,EAAvBmf,GAAS2zG,YAAgB,WAAgB,YACnDG,gBAAwCjzH,EAAvBmf,GAAS2zG,YAAgB,mBAAwB,oBAClEI,eAAuClzH,EAAvBmf,GAAS2zG,YAAgB,kBAAuB,mBAChEK,oBACInzH,EADiBmf,GAAS2zG,YACxB,uBACA,wBACNM,YAAoCpzH,EAAvBmf,GAAS2zG,YAAgB,eAAoB,gBAC1DO,UAAkCrzH,EAAvBmf,GAAS2zG,YAAgB,aAAkB,cACtD9qD,KAA6BhoE,EAAvBmf,GAAS2zG,YAAgB,OAAY,QAC3C5pD,aAAqClpE,EAAvBmf,GAAS2zG,YAAgB,eAAoB,gBAC3DQ,qBACItzH,EADkBmf,GAAS2zG,YACzB,wBACA,yBACNS,YAAoCvzH,EAAvBmf,GAAS2zG,YAAgB,eAAoB,gBAC1DU,oBACIxzH,EADiBmf,GAAS2zG,YACxB,wBACA,yBACNW,qBACIzzH,EADkBmf,GAAS2zG,YACzB,wBACA,yBACNY,cAAsC1zH,EAAvBmf,GAAS2zG,YAAgB,iBAAsB,kBAC9DzpD,UAAkCrpE,EAAvBmf,GAAS2zG,YAAgB,YAAiB,aACrD9E,UAAkChuH,EAAvBmf,GAAS2zG,YAAgB,YAAiB,aACrDa,iBAAyC3zH,EAAvBmf,GAAS2zG,YAAgB,SAAc,UACzDc,mBACI5zH,EADgBmf,GAAS2zG,YACvB,wBACA,yBACNe,oBACI7zH,EADiBmf,GAAS2zG,YACxB,uBACA,wBACNgB,kBAA0C9zH,EAAvBmf,GAAS2zG,YAAgB,aAAkB,cAC9DiB,OAA+B/zH,EAAvBmf,GAAS2zG,YAAgB,SAAc,UAC/CkB,KAA6Bh0H,EAAvBmf,GAAS2zG,YAAgB,SAAc,WAEzCmB,EAAYntE,GAAaxmD,MAAM,KAAK5D,OAASoqD,EAEnD,OAAO8rE,EAAyBqB,IAAcA,CAAS,GAEzD,CAACj0H,GAEL,CCNA,MAAMk0H,IAAc14H,EAAAA,EAAAA,IAAO0xG,GAAAA,GAAMxxG,WAAA,CAAAC,YAAA,qBAAbH,CAAa,kDAG3B24H,IAAgB34H,EAAAA,EAAAA,IAAOsF,EAAAA,GAAQpF,WAAA,CAAAC,YAAA,qBAAfH,CAAe,iFAI9B,SAAS44H,GAA0Bx+H,GAOxC,MAAM,WAAE0pD,GAAeV,MACjB,EAAE5+C,IAAMC,EAAAA,EAAAA,OACR,aAAEo0H,EAAY,UAAE//B,EAAS,MAAEhiC,EAAK,MAAED,EAAK,SAAEiiE,EAAQ,SAAEC,EAAQ,SAAEC,GACjEl1E,EACIm1E,EAAiB9B,KAEvB,OACEv0H,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAC+a,GAAAA,EAAK,CAACC,aAAa,KAAI9a,SAAEgH,EAAE,YAC3Bq0H,GACCj2H,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAA,OACE6B,MAAO,CACLsmB,UAAW,mCACXjoB,UAEFF,EAAAA,EAAAA,KAAC0hB,GAAW,CAACC,gBAAc,EAAAzhB,UACzBF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,iBAAiBhH,SACnCy7H,EAAeJ,EAAc,CAAEvB,aAAa,WAInDh6H,EAAAA,EAAAA,KAACq7H,GAAa,CAAC30H,UAAU,qBAEzB,KACH5J,EAAM8+H,cACLt2H,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAA,OACE6B,MAAO,CACLsmB,UAAW,mCACXjoB,UAEFF,EAAAA,EAAAA,KAAC0hB,GAAW,CAACC,gBAAc,EAAAzhB,UACzBF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,QAAQhH,SAAEpD,EAAM8+H,aAAahgE,gBAGtD57D,EAAAA,EAAAA,KAACq7H,GAAa,CAAC30H,UAAU,qBAEzB,KACH5J,EAAM++H,cACLv2H,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAA,OACE6B,MAAO,CACLsmB,UAAW,mCACXjoB,UAEFF,EAAAA,EAAAA,KAAC0hB,GAAW,CAACC,gBAAc,EAAAzhB,UACzBF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,QAAQhH,SAAEpD,EAAM++H,aAAaz+H,YAGtD4C,EAAAA,EAAAA,KAACq7H,GAAa,CAAC30H,UAAU,qBAEzB,KACH80F,GAAaA,EAAUh4F,QACtB8B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAC87H,GAAoB,CAACh7H,cAAe06F,EAAWugC,UAAU,eAC1D/7H,EAAAA,EAAAA,KAACq7H,GAAa,OAEd,KACH7hE,GAASA,EAAMh2D,QACd8B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAC87H,GAAoB,CAACh7H,cAAe04D,EAAOuiE,UAAU,WACtD/7H,EAAAA,EAAAA,KAACq7H,GAAa,OAEd,KACH9hE,GAASA,EAAM/1D,QACd8B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAC87H,GAAoB,CAACh7H,cAAey4D,EAAOwiE,UAAU,WACtD/7H,EAAAA,EAAAA,KAACq7H,GAAa,OAEd,KACHG,GAAYA,EAASh4H,QACpBxD,EAAAA,EAAAA,KAAC87H,GAAoB,CAACh7H,cAAe06H,EAAUO,UAAU,cAAej/H,IACtE,KACH2+H,GAAYA,EAASj4H,QACpBxD,EAAAA,EAAAA,KAAC87H,GAAoB,CAACh7H,cAAe26H,EAAUM,UAAU,cAAej/H,IACtE,KACH4+H,GAAYA,EAASl4H,QACpBxD,EAAAA,EAAAA,KAAC87H,GAAoB,CAACh7H,cAAe46H,EAAUK,UAAU,cAAej/H,IACtE,OAGV,CAEA,SAASg/H,GAEPh/H,GACA,MAAM,MAAEQ,EAAK,cAAEwD,EAAa,UAAEi7H,EAAS,cAAEC,EAAa,cAAEC,EAAa,cAAEC,GAAkBp/H,GAClF8J,EAAYipB,IAAiBn0B,EAAAA,EAAAA,WAAS,IAIvC,EAAEwL,IAAMC,EAAAA,EAAAA,MACR4lC,GAAwB1oC,EAAAA,EAAAA,UAAQ,KACpC,GAAI/G,EACF,OAAOA,EAET,OAAQy+H,GACN,IAAK,QACH,OAAO70H,EAAE,SACX,IAAK,QACH,OAAOA,EAAE,SACX,IAAK,YACH,OAAOA,EAAE,aACX,IAAK,WACH,OAAO80H,GAAiB90H,EAAE,SAC5B,IAAK,WACH,OAAO+0H,GAAiB/0H,EAAE,SAC5B,IAAK,WACH,OAAOg1H,GAAiBh1H,EAAE,SAC5B,QACE,MAAO,GACX,GACC,CAAC+0H,EAAeD,EAAeE,EAAeH,EAAWz+H,EAAO4J,IAE7Dg7B,GAAkC79B,EAAAA,EAAAA,UAAQ,KAC9C,OAAQ03H,GACN,IAAK,QACH,MAAO,CACL,CACEj7G,OAAQ5Z,EAAE,YACV4b,KAAOusD,IAAYrvE,EAAAA,EAAAA,KAACmV,GAAQ,CAAC1G,KAAM4gE,EAAKzT,WACxC96B,KAAM,OACNuC,KAAM,OACNjkC,KAAM,WACNqW,SAAU,MAGhB,IAAK,WACL,IAAK,WACL,IAAK,WACH,MAAO,CACL,CACEqL,OAAQ5Z,EAAE,QACV4b,KAAOzG,IAAYrc,EAAAA,EAAAA,KAACmV,GAAQ,CAAC1G,KAAM4N,EAAKjf,OACxC0jC,KAAM,OACNuC,KAAM,OACNjkC,KAAM,QAER,CACE0hB,OAAQ5Z,EAAE,eACV4b,KAAO4F,GACJA,EACE9M,cACD5b,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KACGia,EACE9M,cAIXklB,KAAM,cACNuC,KAAM,gBAGZ,QACE,MAAO,CACL,CACEviB,OAAQ5Z,EAAE,QACV4b,KAAOzG,IAAYrc,EAAAA,EAAAA,KAACmV,GAAQ,CAAC1G,KAAM4N,EAAKjf,OACxC0jC,KAAM,OACNuC,KAAM,OACNjkC,KAAM,SAGd,GACC,CAAC28H,EAAW70H,IAET4lC,EAAOye,GAAmB,CAC9BxyB,MAAQ1c,GACDA,EAAkC8/G,UAC7B9/G,EAAkC8/G,UAEpC9/G,EAAiDlf,GAE3D27B,MAAOh4B,EACPohC,iBAGF,OAAwB,IAApB4K,GAAM/nB,UACD,MAIP/kB,EAAAA,EAAAA,KAACo8H,GAAAA,EAAiB,CAChB,UAAS,sBAAsBL,IAC/BM,eACE/2H,EAAAA,EAAAA,MAAA,OAAApF,SAAA,EACEF,EAAAA,EAAAA,KAAA,QAAAE,SAAO6sC,KACP/sC,EAAAA,EAAAA,KAACo7H,GAAW,CAAC/mB,QAAM,EAAAn0G,SAAEY,EAAc0C,YAGvCjB,SAvGaA,CAACijB,EAA0B5e,KAC1CipB,EAAcjpB,EAAW,EAuGvBA,WAAYA,EAAW1G,UAEvBF,EAAAA,EAAAA,KAACkkC,GAAS,IACJ4I,EACJ5K,aAAcA,EACd+C,gBAAgB,QAChBC,gBAAgB,QAChB9C,gBAAiBl7B,EAAE,QACnBovB,mBAAiB,EACjB8Q,sBAAoB,EACpB5H,SAAO,EACPsH,YAAU,KAIlB,CCrQO,SAASw1F,GACdC,EAWAR,GAEA,MAAM,SAAEh2G,IAAa6qB,EAAAA,GAAAA,OACf,WAAE4V,EAAU,SAAEE,GAAaZ,KAE3BhZ,EAAO6zB,GAAc,IACtB47D,EACHvjG,iBAAoBwtB,EAAqCu1E,IACvDr1E,EAASq1E,IACT,KAOJ,OAJAhgI,EAAAA,EAAAA,YAAU,KACRgqB,EAASg2G,EAAWjvF,EAAKhsC,cAAc,GACtC,CAACilB,EAAUg2G,EAAWjvF,EAAKhsC,gBAEvBgsC,CACT,CCfA,MAAM0vF,IAAc95H,EAAAA,EAAAA,IAAOqY,GAAAA,GAAMnY,WAAA,CAAAC,YAAA,qBAAbH,CAAa,yBAI1B,SAAS+5H,GAAkC3/H,GAChD,MAAM,IAAQqK,EAAAA,EAAAA,OACR,KACJ2lC,EAAI,aACJ5K,EAAY,eACZ9R,EAAc,yBACdssG,EAAwB,4BACxBC,EAA2B,MAC3Bt/H,GACEP,GACE,WAAE0pD,GAAeV,MACjB,aAAEy1E,GAAiB/0E,EAEnBo2E,GAAgCv4H,EAAAA,EAAAA,UAAQ,KAC5C,GAAImiD,GAAck2E,EAChB,OAAQl2E,EAAqCk2E,EAE/B,GACf,CAACA,EAA0Bl2E,IAExBq2E,GAAwCx4H,EAAAA,EAAAA,UAAQ,KACpD,GAAIu4H,GAA+Bp5H,QAAUk5H,EAG3C,OAD+B,cAA7BA,EAA2CnB,EAAemB,GAE1D,IAAK,QACH,OAAOx1H,EAAE,kBACX,IAAK,QACH,OAAOA,EAAE,kBACX,IAAK,oBACH,OAAOA,EAAE,wBACX,IAAK,cACH,OAAOA,EAAE,qBACX,IAAK,iBACH,OAAOA,EAAE,iCACX,IAAK,eACH,OAAOA,EAAE,sBACX,IAAK,sBACH,OAAOA,EAAE,+BACX,IAAK,qBACH,OAAOA,EAAE,6BACX,IAAK,0BACH,OAAOA,EAAE,kCACX,IAAK,gBACH,OAAOA,EAAE,wBACX,QACE,OAGU,GACf,CAACw1H,EAA0BnB,EAAcqB,GAA+Bp5H,OAAQ0D,IAEnF,OACE5B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAC88H,GAAqB,CACpBF,8BAA+BA,EAC/BC,sCAAuCA,EACvCF,4BAA6BA,EAC7Bt/H,MAAOA,EACPk+H,aAAcA,QAA0C55H,KAE1D3B,EAAAA,EAAAA,KAAC4pB,GAAmB,CAClBkjB,KAAMA,EACN5K,aAAcA,EACd9R,eAAgBA,EAChB2c,sBAAuB7lC,EAAE,kBACzB+9B,gBAAiB/9B,EAAE,2BAI3B,CAKA,SAAS41H,GAEPhgI,GACA,MAAM,8BACJ8/H,EAA6B,sCAC7BC,EAAqC,4BACrCF,EAA2B,MAC3Bt/H,EAAK,aACLk+H,GACEz+H,GACE,EAAEoK,IAAMC,EAAAA,EAAAA,MACd,OACE7B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACw8H,GAAW,CAACxhH,aAAa,KAAI9a,SAAE7C,GAAS6J,EAAE,2BACzB,WAAjBq0H,GACCj2H,EAAAA,EAAAA,MAACsD,GAAAA,EAAK,CAACC,WAAS,EAAA3I,SAAA,EACdF,EAAAA,EAAAA,KAACgS,GAAAA,EAAS,CAACnQ,MAAO,CAAE+hC,WAAY,OAAQluB,WAAY,UAAWxV,SAC5D28H,GAAyC31H,EAAE,cAE7C01H,GAAiCA,EAA8Bp5H,OAAS,IACvExD,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACR08H,GAA+B71H,KAAI,CAACsV,EAAM3O,KAEvC1N,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAAnU,UACJF,EAAAA,EAAAA,KAACmV,GAAQ,CAAC1G,KAAM4N,EAAKjf,KAAOif,EAAKjf,KAAOif,EAAKu/C,YADnCluD,UAQpB,KACHivH,IACC38H,EAAAA,EAAAA,KAAA,MAAI6B,MAAO,CAAEsmB,UAAW,OAAQC,aAAc,QAASloB,SAAEy8H,MAIjE,CCpIO,SAASI,GAAmBjgI,GAMjC,MAAMszB,ECbD,WACL,MAAM,EAAElpB,IAAMC,EAAAA,EAAAA,MACd,OAAO9C,EAAAA,EAAAA,UACL,IAAM,CACJ,CACE+H,IAAK,OACL9O,MAAO4J,EAAE,QACTzD,KAAMysB,GAAkBsC,UACxB8xB,MAAO,iBACPv1B,WAAY,cAGhB,CAAC7nB,GAEL,CDDyB81H,IACjB,EAAE91H,IAAMC,EAAAA,EAAAA,OACR,WAAEq/C,GAAeV,MACjB,aAAEy1E,GAAiB/0E,GACnB,yBAAEk2E,EAAwB,MAAEr/H,GAAUP,EAEtCkxD,GAAc3pD,EAAAA,EAAAA,UAAQ,IACnBvH,EAAMkxD,YAAclxD,EAAMkxD,YAAeutE,GAAyB/zH,MAAM,KAAK5D,OAAS,IAC5F,CAAC9G,EAAMkxD,YAAautE,IAEjBoB,GAA8Bt4H,EAAAA,EAAAA,UAAQ,KAC1C,GAAIvH,EAAM6/H,4BACR,OAAO7/H,EAAM6/H,4BAEf,OAAQpB,GACN,IAAK,iBACH,OAAOr0H,EAAE,8DACX,IAAK,oBACH,OAAOA,EAAE,kEACX,IAAK,gBACH,OAAOA,EAAE,8DACX,IAAK,kBACH,OAAOA,EAAE,gEACX,IAAK,2BACH,OAAOA,EAAE,yEACX,IAAK,cACH,OAAOA,EAAE,2DACX,IAAK,2BACH,OAAOA,EAAE,yEACX,IAAK,0BACH,OAAOA,EAAE,yEACX,QACE,OAAOA,EAAE,4DACb,GACC,CAACpK,EAAM6/H,4BAA6BpB,EAAcr0H,IAE/Cg7B,GAA4C79B,EAAAA,EAAAA,UAAQ,IACjD,CACL,CACEyc,OAAQ5Z,EAAE,QACV4b,KAAO4F,IAAS1oB,EAAAA,EAAAA,KAACmV,GAAQ,CAAC1G,KAAMia,EAAKtrB,OACrC0jC,KAAM,OACNuC,KAAM,OACNjkC,KAAM,QAER,CACE0hB,OAAQ5Z,EAAE,eACV4b,KAAO4F,GAASA,EAAK9M,cAAe5b,EAAAA,EAAAA,KAACmV,GAAQ,CAAC1G,KAAMia,EAAK9M,cACzDklB,KAAM,cACNuC,KAAM,iBAGT,CAACn8B,IAcE4lC,EAAOwvF,GACX,CACEl4E,IAAKqN,EAAM,qBACXrhC,iBACA8R,eACA4+B,aAjBgBz8D,EAAAA,EAAAA,UAAqB,KACvC,MAAMggD,EAAsB,CAAE44E,oBAAqBjvE,GAQnD,MAPoB,iBAAhBA,IACF3J,EAAkB,UAAI,CACpB,sBACA,qBACA,oCAGGA,CAAM,GACZ,CAAC2J,KASF,YAEF,OACEhuD,EAAAA,EAAAA,KAACy8H,GAAe,CACd3vF,KAAMA,EACN5K,aAAcA,EACd9R,eAAgBA,EAChBssG,yBAA0BA,EAC1BC,4BAA6BA,EAC7Bt/H,MAAOA,GAGb,CE3FA,MAAMm/H,IAAc95H,EAAAA,EAAAA,IAAOqY,GAAAA,GAAMnY,WAAA,CAAAC,YAAA,oBAAbH,CAAa,yBAI1B,SAASw6H,GAAmBpgI,GACjC,MAAMszB,EAAiB86F,MACjB,EAAEhkH,IAAMC,EAAAA,EAAAA,OACR,6BAAEg2H,GAAiCrgI,EAEnColC,GAAwC79B,EAAAA,EAAAA,UAAQ,IAC7C,CACL,CACEyc,OAAQ5Z,EAAE,YACV4b,KAAOusD,IAAkBrvE,EAAAA,EAAAA,KAACmV,GAAQ,CAAC1G,KAAM4gE,EAAKzT,WAC9C96B,KAAM,OACNuC,KAAM,OACNjkC,KAAM,WACNqW,SAAU,KAEZ,CACEqL,OAAQ5Z,EAAE,cACVzD,KAAM,OACN/I,MAAQ20E,GAAkBA,EAAK07C,WAC/B3rH,KAAM,cAER,CACE0hB,OAAQ5Z,EAAE,aACVzD,KAAM,OACN/I,MAAQ20E,GAAkBA,EAAK27C,UAC/B5rH,KAAM,eAGT,CAAC8H,IAEE4lC,EAAOwvF,GACX,CACEl4E,IAAKqN,EAAM,UACXqP,YAAa,CACXf,aAAc,SAEhB3vC,iBACA8R,gBAEF,SAGF,OACE58B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACw8H,GAAW,CAACxhH,aAAa,KAAI9a,SAAEgH,EAAE,qBAClClH,EAAAA,EAAAA,KAAA,MAAI6B,MAAO,CAAEsmB,UAAW,OAAQC,aAAc,QAASloB,SACpDi9H,GACCj2H,EAAE,8DAENlH,EAAAA,EAAAA,KAAC4pB,GAAmB,CAClBkjB,KAAMA,EACN5K,aAAcA,EACd9R,eAAgBA,MAIxB,CCrCO,SAASgtG,KACd,MAAM,EAAEl2H,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KACbE,GAASgZ,EAAAA,GAAAA,MAEPn9C,KAAM0uD,EAAU,UAAExlD,GAAc6sC,GACtCxE,EAAM,gBAAgBpN,EAAOlnD,IAAM,OAE/ButH,EAAqBF,KACrBxvD,EAAerW,KAErB,GAAIv7B,IAAcwlD,EAAY,OAAO5uE,EAAAA,EAAAA,KAACkqD,GAAW,IAEjD,MAAM/D,EAA0B,CAC9B,CACEhpD,GAAI,QACJG,MAAO4J,EAAE,kBACTohD,QACEtoD,EAAAA,EAAAA,KAACk9H,GAAkB,CACjBC,6BAA8Bj2H,EAC5B,yEACA,CACEitH,eAAgBvlD,GAAYxxE,SAKpCqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,MAAE0sD,GAAUnS,EAClB,IAAKmS,GAAOh2D,OACV,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,WACJG,MAAO4J,EAAE,yBACTohD,QACEtoD,EAAAA,EAAAA,KAAC+8H,GAAkB,CACjB/uE,YAAY,aACZ0uE,yBAAyB,QACzBC,4BAA6Bz1H,EAAE,+CAAgD,CAC7EitH,eAAgBvlD,GAAYxxE,SAIlCqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,SAAE2uH,GAAap0E,EACrB,IAAKo0E,GAAUj4H,OACb,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,SACJG,MAAO4J,EAAE,UACTohD,QAAQtoD,EAAAA,EAAAA,KAACs7H,GAAyB,MAwCtC,OACEh2H,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,aACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,eAAgBY,GAAI88C,EAAWgW,GAAS+3D,cACnD,CACEr1H,MAAOsxE,GAAYxxE,KACnB0K,GAAI88C,EAAWgW,GAASoU,kBAAmB,CAAE3qB,OAAQ,CAAElnD,GAAIyxE,GAAYzxE,OAEzE,CACEG,MAAO4J,EAAE,eACTY,GAAI88C,EAAWgW,GAASm9D,qBAAsB,CAAE1zE,OAAQ,CAAElnD,GAAIyxE,GAAYzxE,OAE5E,CAAEG,MAAO4J,EAAE,kBAGflH,EAAAA,EAAAA,KAACgqD,GAAU,CACT7gB,aAAck2B,GACdlZ,MAAOA,EACPznB,SAxDYxe,IAChB,MAAM,MAAEs5C,EAAK,SAAEiiE,GAAav7G,EACtB4Y,EAAwB,GAC9B,IAAK,MAAMu2C,KAAQ7V,EACjB,IAAK,MAAM9wC,KAAQ+yG,EACjB3iG,EAAM/0B,KAAK,CAAEsrE,OAAM3mD,SAGvB,OAAO,IAAIyhB,SAAeqd,IACxBkjE,EAAmB,CACjBrtH,MAAO6J,EAAE,aACT6xB,MAAOA,EAAGs2C,OAAM3mD,UAAW,GAAG2mD,EAAKlyE,MAAMurB,EAAKvrB,KAC9C27B,QACAkQ,cAAe,CACb,CAAEloB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAGusD,UAAWA,EAAKzT,UAC9C,CAAE96C,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAG4F,UAAWA,EAAKtrB,OAEhD6rC,SAAUA,EAAGomC,OAAM3mD,UACjB6mC,GAAYkC,EAAM,0BAA2B,CAC3C4d,KAAMA,EAAKlyE,GACXkgI,gBAAiB30G,EAAKvrB,GACtB4/D,aAAc,iBACdugE,UAAW1uD,EAAWzxE,KAE1B+rC,WAAYA,KACVse,GAAS,EAEXj7C,QAASA,KACPyuD,EAAaJ,GAASm9D,qBAAsB,CAC1C1zE,OAAQ,CAAElnD,GAAIyxE,EAAWzxE,GAAGqhB,aAC5B,GAEJ,GACF,EAwBE8wB,aAAW,EACX9B,SAAUA,KACRwtB,EAAaJ,GAASm9D,qBAAsB,CAAE1zE,OAAQ,CAAElnD,GAAIyxE,GAAYzxE,KAAO,MAKzF,CCxJO,SAASogI,KAgBd,OAbuBlkC,GAAyB,CAC9CC,YAAa,QACbC,cAAe,CAAC,OAAQ,cAAe,KAAM,eAAgB,aAAc,eAC3EC,mBAAoB,CAClBp8F,KAAM,CACJi9F,QAAS,SAEXl9F,GAAI,CACFk9F,QAAS,UAGbZ,kBAAmB,CAbUyB,KACCC,OAelC,CCZA,MAAMqhC,IAAc95H,EAAAA,EAAAA,IAAOqY,GAAAA,GAAMnY,WAAA,CAAAC,YAAA,oBAAbH,CAAa,yBAI1B,SAAS86H,GAAmB1gI,GACjC,MAAMszB,EAAiBmtG,MACjB,6BAAEE,GAAiC3gI,GACnC,EAAEoK,IAAMC,EAAAA,EAAAA,MAER+6B,GAAqC79B,EAAAA,EAAAA,UAAQ,IAC1C,CACL,CACEyc,OAAQ5Z,EAAE,QACV4b,KAAOosD,IAAelvE,EAAAA,EAAAA,KAACmV,GAAQ,CAAC1G,KAAMygE,EAAK9xE,OAC3C0jC,KAAM,OACNuC,KAAM,OACNjkC,KAAM,OACNqW,SAAU,OAGb,CAACvO,IAEE4lC,EAAOwvF,GACX,CACEl4E,IAAKqN,EAAM,UACXrhC,iBACA8R,gBAEF,SAGF,OACE58B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACw8H,GAAW,CAACxhH,aAAa,KAAI9a,SAAEgH,EAAE,qBAClClH,EAAAA,EAAAA,KAAA,MAAI6B,MAAO,CAAEsmB,UAAW,OAAQC,aAAc,QAASloB,SACpDu9H,GACCv2H,EAAE,8DAENlH,EAAAA,EAAAA,KAAC4pB,GAAmB,CAClBkjB,KAAMA,EACN5K,aAAcA,EACd9R,eAAgBA,MAIxB,CCtBO,SAASstG,KACd,MAAM,EAAEx2H,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KACbE,GAASgZ,EAAAA,GAAAA,KACTrC,EAAerW,MACbzkC,KAAM0uD,EAAU,UAAExlD,GAAc6sC,GACtCxE,EAAM,gBAAgBpN,EAAOlnD,IAAM,OAE/ButH,EAAqBF,KAE3B,GAAIphG,IAAcwlD,EAAY,OAAO5uE,EAAAA,EAAAA,KAACkqD,GAAW,IAEjD,MAAM/D,EAA0B,CAC9B,CACEhpD,GAAI,QACJG,MAAO4J,EAAE,kBACTohD,QACEtoD,EAAAA,EAAAA,KAACw9H,GAAkB,CACjBC,6BAA8Bv2H,EAC5B,yEACA,CACEitH,eAAgBvlD,GAAYxxE,SAKpCqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,MAAEysD,GAAUlS,EAClB,IAAKkS,GAAO/1D,OACV,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,QACJG,MAAO4J,EAAE,yBACTohD,QACEtoD,EAAAA,EAAAA,KAAC+8H,GAAkB,CACjB/uE,YAAY,aACZ0uE,yBAAyB,QACzBC,4BAA6Bz1H,EAAE,+CAAgD,CAC7EitH,eAAgBvlD,GAAYxxE,SAIlCqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,SAAE2uH,GAAap0E,EACrB,IAAKo0E,GAAUj4H,OACb,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,SACJG,MAAO4J,EAAE,UACTohD,QAAQtoD,EAAAA,EAAAA,KAACs7H,GAAyB,MAwCtC,OACEh2H,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,aACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,eAAgBY,GAAI88C,EAAWgW,GAAS+3D,cACnD,CACEr1H,MAAOsxE,GAAYxxE,KACnB0K,GAAI88C,EAAWgW,GAASoU,kBAAmB,CAAE3qB,OAAQ,CAAElnD,GAAIyxE,GAAYzxE,OAEzE,CACEG,MAAO4J,EAAE,eACTY,GAAI88C,EAAWgW,GAASk9D,qBAAsB,CAAEzzE,OAAQ,CAAElnD,GAAIyxE,GAAYzxE,OAE5E,CAAEG,MAAO4J,EAAE,kBAGflH,EAAAA,EAAAA,KAACgqD,GAAU,CACT7gB,aAAck2B,GACdlZ,MAAOA,EACPznB,SAxDWhwB,UACf,MAAM,MAAE6qD,EAAK,SAAEkiE,GAAav7G,EACtB4Y,EAAwB,GAC9B,IAAK,MAAMo2C,KAAQ3V,EACjB,IAAK,MAAM7wC,KAAQ+yG,EACjB3iG,EAAM/0B,KAAK,CAAEmrE,OAAMxmD,SAGvB,OAAO,IAAIyhB,SAAeqd,IACxBkjE,EAAmB,CACjBrtH,MAAO6J,EAAE,aACT6xB,MAAOA,EAAGm2C,OAAMxmD,UAAW,GAAGwmD,EAAK/xE,MAAMurB,EAAKvrB,KAC9C27B,QACAkQ,cAAe,CACb,CAAEloB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAGosD,UAAWA,EAAK9xE,MAC9C,CAAE0jB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAG4F,UAAWA,EAAKtrB,OAEhD6rC,SAAUA,EAAGimC,OAAMxmD,UACjB6mC,GAAYkC,EAAM,0BAA2B,CAC3Cyd,KAAMA,EAAK/xE,GACXkgI,gBAAiB30G,EAAKvrB,GACtB4/D,aAAc,iBACdugE,UAAW1uD,EAAWzxE,KAE1B+rC,WAAYA,KACVse,GAAS,EAEXj7C,QAASA,KACPyuD,EAAaJ,GAASk9D,qBAAsB,CAC1CzzE,OAAQ,CAAElnD,GAAIyxE,EAAWzxE,GAAGqhB,aAC5B,GAEJ,GACF,EAwBE8wB,aAAW,EACX9B,SAAUA,KACRwtB,EAAaJ,GAASk9D,qBAAsB,CAAEzzE,OAAQ,CAAElnD,GAAIyxE,GAAYzxE,KAAO,MAKzF,CC3JO,IAAIwgI,GAAarzF,cAMjB,SAASszF,GAAOntE,KAAkC3mD,GACvD,OAAO6zH,GAAantE,GAAOC,KAAY3mD,EACzC,CCHO,MAAM+zH,GAAmB7wH,IAC9B,MAAMmX,EAAsC,GACtCC,EAAkC,GAExC,GAAIsqC,GAAe1hD,IAAUA,EAAM6nC,MAA8B,iBAAf7nC,EAAM6nC,KAAmB,CACzE,MAAM30B,EAAOlT,EAAM6nC,KACnB,IAAK,MAAMzoC,KAAO8T,EAAM,CACtB,MAAMxlB,EAASwlB,EAAiC9T,GAChD,GAAY,WAARA,EACE6M,MAAMC,QAAQxe,GAChBypB,EAAcpgB,KAAK,CAAEsJ,QAAS3S,EAAM,KAEpCypB,EAAcpgB,KAAK,CAAEsJ,QAAS3S,SAI7B,GAAY,qBAAR0R,GAA8B6M,MAAMC,QAAQxe,GACnDA,EAAM0+B,SAAS/rB,IACU,iBAAZA,GACT8W,EAAcpgB,KAAK,CAAEsJ,WACvB,SAEG,GAAI4L,MAAMC,QAAQxe,GAAQ,CAC/B,MAAM2S,EAAU3S,EAAM+M,KAAK,KAC3B2c,EAAYrgB,KAAK,CAAE3G,KAAMgP,EAAKiB,WAChC,KAAO,CACL,MAAMA,EAAUqgC,OAAOhzC,GACvB0pB,EAAYrgB,KAAK,CAAE3G,KAAMgP,EAAKiB,WAChC,CACF,CACF,MAAWL,aAAiBsX,OAC1BH,EAAcpgB,KAAK,CAAEsJ,QAASL,EAAMK,UAGtC,MAAO,CAAE8W,gBAAeC,cAAa,ECtC1B05G,GAAyBA,IACpCrxF,GAAuBoxF,ICYZE,GAAgCA,CAC3C/wH,EACAgxH,KAIA,MAAM75G,EAAsC,GACtCC,EAAkC,GAExC,GAAIsqC,GAAe1hD,IAAUA,EAAM6nC,MAA8B,iBAAf7nC,EAAM6nC,KAAmB,CACzE,MAAM30B,EAAOlT,EAAM6nC,KAEnB,GAAI,WAAY30B,GAAkC,iBAAnBA,EAAa,OAE1C,OADAiE,EAAcpgB,KAAK,CAAEsJ,QAAS6S,EAAKo/C,SAC5B,CAAEn7C,gBAAeC,eAG1B,GAAI,qBAAsBlE,GAAQjH,MAAMC,QAAQgH,EAAuB,kBAMrE,OALAA,EAAK+9G,iBAAiB7kG,SAAS/rB,IACN,iBAAZA,GACT8W,EAAcpgB,KAAK,CAAEsJ,WACvB,IAEK,CAAE8W,gBAAeC,eAI1B,GAAoB,iBAATlE,EAET,OADAiE,EAAcpgB,KAAK,CAAEsJ,QAAS6S,IACvB,CAAEiE,gBAAeC,eAE1B,GAAI,WAAYlE,GAAQjH,MAAMC,QAAQgH,EAAa,QAEjD,IAAK,MAAM5P,KAAK4P,EAAK2tB,OACnB,GAAIv9B,EAAEupB,QAAUvpB,EAAEupB,OAAOqkG,UACvB,GAAIF,EAAY,CACd,MAAM5gI,EAAO4gI,EAAW1tH,EAAEupB,OAAOqkG,YAAc5tH,EAAEupB,OAAOqkG,UACxD95G,EAAYrgB,KAAK,CAAE3G,OAAMiQ,QAASiD,EAAEgvD,QAAUhvD,EAAEjT,OAClD,MAAO+mB,EAAYrgB,KAAK,CAAE3G,KAAMkT,EAAEupB,OAAOqkG,UAAW7wH,QAASiD,EAAEgvD,QAAUhvD,EAAEjT,aAE3E8mB,EAAcpgB,KAAK,CAAEsJ,QAASiD,EAAEgvD,QAAUhvD,EAAEjT,aAKhD,IAAK,MAAO+O,EAAK1R,KAAUmP,OAAOwmD,QAAQnwC,GACxC,GAAIjH,MAAMC,QAAQxe,IAAUA,EAAM8I,OAAS,EAAG,CAC5C,MAAM26H,EAAiBzjI,EAAMqM,KAAKgD,GAAMA,IAAatC,KAAK,MAC1D2c,EAAYrgB,KAAK,CAAE3G,KAAMgP,EAAKiB,QAAS8wH,GACzC,MACE/5G,EAAYrgB,KAAK,CAAE3G,KAAMgP,EAAKiB,QAAS3S,GAI/C,MAAWsS,aAAiBsX,OAC1BH,EAAcpgB,KAAK,CAAEsJ,QAASL,EAAMK,UAWtC,OARI+W,EAAY5gB,OAAS,GACvB4gB,EAAYgV,SAASpsB,IACf,CAAC,YAAYzE,SAASyE,EAAM5P,QAC9B4P,EAAM5P,KAAO,OACf,IAIG,CAAE+mB,gBAAeC,cAAa,EC/E1Bg6G,GAAyBA,IACpC3xF,GAAuBsxF,ICgDlB,SAASM,GAA6BvhI,GAC3C,MAAM,IAAQqK,EAAAA,EAAAA,MACRy9C,EAAaT,KACbw3E,EAAiB9B,KACjBx1E,GAASgZ,EAAAA,GAAAA,KACTz5C,GAAevf,EAAAA,EAAAA,UACnB,IAAMvH,EAAMwhI,wBAAwBngI,QAAQ0kB,GAAWA,EAAOgB,WAAalB,GAAemB,QAC1F,CAAChnB,EAAMwhI,yBAEHv6G,GAAc1f,EAAAA,EAAAA,UAClB,IAAMvH,EAAMwhI,wBAAwBngI,QAAQ0kB,GAAWA,EAAOgB,WAAalB,GAAemB,QAC1F,CAAChnB,EAAMwhI,yBAGHp8F,GAAe79B,EAAAA,EAAAA,UACnB,IAAM,CACJ,CACEyc,OAAQhkB,EAAMyhI,qBAAqBnhI,KAAKE,MACxCmG,KAAM,OACNrE,KAAMtC,EAAMyhI,qBAAqBnhI,KAAKgC,KACtC1E,MAAOoC,EAAMyhI,qBAAqBnhI,KAAKohI,SACvC12H,GAAIhL,EAAMyhI,qBAAqBnhI,KAAK0K,OAElC8b,GAA8B,GAClC,CACE9C,OAAQ5Z,EAAE,QACVzD,KAAM,cACN/I,MAAQ2hB,GAAYA,EAAK8+C,eAAekiE,gBAAgBjgI,KACxDgC,KAAM,4BAEJ2kB,GAA4B,KAElC,CACEjnB,EAAMyhI,qBAAqBnhI,KAAKE,MAChCR,EAAMyhI,qBAAqBnhI,KAAKgC,KAChCtC,EAAMyhI,qBAAqBnhI,KAAKohI,SAChC1hI,EAAMyhI,qBAAqBnhI,KAAK0K,GAChC8b,EACA1c,EACA6c,IA6CEqM,GAAiB/rB,EAAAA,EAAAA,UACrB,IAAM,IAEA,CAAC,OAAQ,QAAQkE,SAASzL,EAAM2hI,iBAAmB3hI,EAAM4hI,+BACxD,CACC,CACEtyH,IAAK,OACL9O,MAAOR,EAAM4hI,+BAA+BphI,MAC5CmG,KAAMysB,GAAkBqC,WACxB+xB,MAAOxnD,EAAM4hI,+BAA+Bp6E,MAC5Cv1B,WAAY,aAGhB,GACJ,CACE3iB,IAAK,wBACL9O,MAAO4J,EAAE,aACTzD,KAAMysB,GAAkBqC,WACxB+xB,MAAO,kCACPv1B,WAAY,eAEVjyB,EAAM6hI,uBAAyB7hI,EAAM6hI,uBAAyB,KAEpE,CAAC7hI,EAAM2hI,eAAgB3hI,EAAM4hI,+BAAgC5hI,EAAM6hI,uBAAwBz3H,IAEvF45D,GAAcz8D,EAAAA,EAAAA,UAAqB,KACvC,IAAIggD,EAAS,CAAC,EACd,OAAQvnD,EAAM2hI,gBACZ,IAAK,OACL,IAAK,OACHp6E,EAAS,CAAEi5E,UAAWxgI,EAAMK,GAAI8/H,oBAAqBngI,EAAM8hI,oBAC3D,MACF,IAAK,aACHv6E,EAAS,CAAEw6E,QAAS/hI,EAAMK,IAC1B,MACF,IAAK,aACHknD,EAAS,CAAEknE,QAASzuH,EAAMK,IAC1B,MACF,QACEknD,EAAS,CAAC,EAEd,OAAOA,CAAM,GACZ,CAACvnD,EAAM8hI,mBAAoB9hI,EAAMK,GAAIL,EAAM2hI,iBACxC3xF,ECvID,SAAuDzmB,GAY5D,IAAI,IAAE+9B,GAAQ/9B,EACd,MAAM,eAAE+J,EAAc,aAAE8R,EAAY,mBAAEsoB,GAAuBnkC,EAE7D,IAAIye,EAAkCze,EAAQye,YAC1CC,EAAmD1e,EAAQ0e,qBAG/D,GAAI7C,GAAgBA,EAAa1+B,OAAQ,CACvC,MAAMo9D,EAAoB1+B,EAAa19B,MAAMqe,GAAWA,EAAOiiB,eAAgB5C,EAAa,GAC5F4C,EAAc87B,GAAmBxhE,KACjC2lC,EAAuB67B,GAAmB77B,oBAC5C,CAEA,MAAM+H,EAAOyd,GAAQ,CACnB3b,cAAe,CAAExvC,KAAM0lC,EAAa/R,cAAegS,GACnDylB,uBAEIqW,GAAe7qD,EAAAA,EAAAA,QAA0C,CAAE+O,eAAWpjB,KAEtE,KAAEwzB,EAAI,QAAEC,EAAO,KAAEh2B,EAAI,cAAE2zB,EAAa,YAAE1C,GAAgByc,EAE5D,IAAImxB,EAAc53C,GAASy6C,YAAc,IAjDnBA,EAiDsCz6C,EAAQy6C,YAhD7Dj3D,OAAOwmD,QAAQyQ,GACnB/5D,KAAI,EAAEqF,EAAK1R,EAAQ,MACdue,MAAMC,QAAQxe,GACIA,EAAMqM,KACvBg6D,GAAW,GAAGxc,mBAAmBn4C,MAAQm4C,mBAAmBwc,OAE/Bt5D,KAAK,KAG9B,GAAG88C,mBAAmBn4C,MAAQm4C,mBAAmB7pD,OAG3D+M,KAAK,OAoC6E,GAjDvF,IAAwBq5D,EAmDtB,GAAIzwC,EACF,IAAK,MAAMjkB,KAAOikB,EAAa,CAC7B,MAAMm8B,EAAgBp8B,GAAgB5rB,MAAMrG,GAAWA,EAAOiO,MAAQA,IACtE,GAAIogD,EAAe,CACjB,MAAM1iD,EAASumB,EAAYjkB,GACvBtC,GAAUA,EAAOtG,OAAS,IACby6D,GAAfA,EAA8B,IAAuB,IACjDn0D,EAAOtG,OAAS,EAClBy6D,GAAen0D,EAAO/C,KAAKrM,GAAU,OAAO8xD,EAAclI,SAAS5pD,MAAS+M,KAAK,KAEjFw2D,GAAe,GAAGzR,EAAclI,SAASx6C,EAAOrC,KAAK,OAG3D,CACF,CAGErI,IAAS6+D,EAAY11D,SAAS,cACjB01D,GAAfA,EAA8B,IAAuB,IAEnDA,GADoB,SAAlBlrC,EACa,aAAa3zB,IAEb,YAAYA,KAIhB6+D,GAAfA,EAA8B,IAAuB,IACrDA,GAAe,QAAQ53C,GAASy4G,UAAY3pG,IAE7B8oC,GAAfA,EAA8B,IAAuB,IACrDA,GAAe,aAAa53C,GAAS04G,aAAe3pG,IAEpDgvB,GAAO6Z,EACP,MAAMqD,EAAU3R,KACV9B,GAAWiE,EAAAA,GAAAA,IAA4B1N,EAAKkd,EAAS,IACtDzR,MAEC,KAAE3vC,EAAI,OAAEiyC,GAAWtE,EACnB0H,GAAUz5D,EAAAA,EAAAA,cAAY4S,gBACpByjD,IAASjmC,SAAQ,QAAS,GAC/B,CAACimC,KAEJL,EAAAA,GAAAA,IAA4B5xC,GAAMsL,KAAM81C,EAASzR,IAGjD,IAAI7iD,EAA2B6gD,EAAS7gD,MACpCA,aAAiBqhD,IACM,MAArBrhD,EAAMshD,YAAsBxhB,EAAK3X,KAAO,IAC1C2X,EAAKzX,QAAQ,GACbroB,OAAQrL,GAIZ,MAAMnB,EAAYq4B,GAAY3Y,GAAMgyC,SAAW,GAAItC,GAAYvpC,EAAQ2S,uBAEnDr3B,IAAhBue,GAAM5D,QACRukD,EAAazqD,QAAQ2O,UAAY7E,GAAM5D,OAGzC,MAAMilD,GAAwBzlE,EAAAA,EAAAA,cAC3Bg9B,IACCt4B,EAAUmkB,YAAYmU,GACjBy8B,GAAS,GAEhB,CAACA,EAAS/0D,IAGNghE,GAA0B1lE,EAAAA,EAAAA,cAC7Bg9B,IACCt4B,EAAUk5B,cAAcZ,GACnBy8B,GAAS,GAEhB,CAACA,EAAS/0D,KAGLs4B,EAAOqB,IAAYz+B,EAAAA,EAAAA,eAA0BiG,IAEpD5F,EAAAA,EAAAA,YAAU,KACRo+B,EAASja,GAAMgyC,QAAQ,GACtB,CAAChyC,GAAMgyC,UAEV,MAAMh2B,GAAapgC,EAAAA,EAAAA,cAChBugB,IACC,IAAKA,EAAM,OACX,MAAMrV,EAAQ8xB,GAAOptB,WAAWgC,GAAMkiD,GAAWliD,KAAOkiD,GAAWvzC,KACnE,QAAc1a,IAAVqF,IAAkC,IAAXA,EAAc,CACvC,MAAMm1B,EAAW,IAAKrD,GAAS,IAC/BqD,EAASn1B,GAASqV,EAClB8d,EAASgC,EACX,IAEF,CAACrD,IAGH,OAAOz0B,EAAAA,EAAAA,UAAQ,KACN,CACLkxD,UACAxwC,UAAW87C,EAAazqD,QAAQ2O,UAChCL,UAAWoU,EACXoD,aACAlvB,WACG8/B,KACAtsC,EACH+gE,wBACAC,6BAED,CACD1oC,EACAoD,EACAlvB,EACAuoD,EACAgM,EACA/gE,EACAghE,EACA10B,GAEJ,CDhBekyF,CAAc,CACzB56E,IAAKtnD,EAAMsnD,IACXliB,eACA9R,iBACA0wC,YAAaA,IAETm+D,EA3FN,SAAwB/1F,GACtB,MAAM,EAAEhiC,IAAMC,EAAAA,EAAAA,MACR0kC,EAAsB3J,EACtB8G,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAACwnC,EAAoB,KAAK,CAACA,IACzDqzF,EAAgBpB,KAChBqB,EAAgB1/D,KAChB2/D,EAAgBhB,KAChBx+D,EACc,QAAlB9iE,EAAMm2F,QACFksC,EACkB,QAAlBriI,EAAMm2F,QACJisC,EACAE,EAER,OAAOtjI,EAAAA,EAAAA,cACJg9B,IACC,IAAI/6B,EAC2B,SAA7BjB,EAAM8hI,mBACF13H,EAAE,8DAA+D,CAC/DoV,MAAOwc,EAAMt1B,SAEf0D,EAAE,8DAA+D,CAC/DoV,MAAOwc,EAAMt1B,SAEjB1G,EAAMuiI,yBAAwBthI,EAAcjB,EAAMuiI,uBAAuBvmG,EAAMt1B,SACnFo8D,EAAW,CACTviE,MAAOP,EAAMwiI,gBAAkBp4H,EAAE,eACjCnJ,cACAiuC,iBAAkBlvC,EAAMwiI,gBAAkBp4H,EAAE,eAC5C4xB,MAAOA,EACPC,MAAO2mC,GACPp4D,UAAU,EACVukC,sBACA7C,gBACAE,aACAD,SAAUA,CAAC5sB,EAASoP,IAClBgkC,GAAc3yD,EAAMsnD,IAAM,GAAG/nC,EAAKlf,GAAGqhB,cAAeiN,IACtD,GAEJ,CAACud,EAAe42B,EAAY/zB,EAAqB3C,EAAYhiC,GAEjE,CAkDoBq4H,CAAezyF,EAAK00B,yBAElCr/B,GAAa99B,EAAAA,EAAAA,UACjB,IAAM,CACJ,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/B0C,QAASuB,EAAAA,GAAcC,QACvB3B,KAAM0mE,GAAAA,GACNn/D,UAAU,EACVnN,MAAO4J,EAAE,eACTP,QAAU0V,GAAY4iH,EAAY,CAAC5iH,OAGvC,CAACnV,EAAG+3H,IAEAtpG,GAAiBtxB,EAAAA,EAAAA,UACrB,IAAM,CACJ,CACEZ,KAAMrJ,EAAeyN,KACrBrH,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVvH,KAAM40B,GAAAA,GACNx6B,MAAOR,EAAM0iI,mBAAqBt4H,EAAE,aACpCa,KAAM68C,EAAW9nD,EAAM2iI,eAAiB,GAAI,CAAEp7E,OAAQ,CAAElnD,GAAIknD,EAAOlnD,OAErE,CACEsG,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,gBACTP,QAAUmyB,GAAemmG,EAAYnmG,GACrCxxB,UAAU,KAGd,CAACJ,EAAG09C,EAAY9nD,EAAM2iI,cAAe3iI,EAAM0iI,kBAAmBn7E,EAAOlnD,GAAI8hI,IAErE/5F,GAAkB7gC,EAAAA,EAAAA,UAAQ,KAC9B,IAAIhH,EACJ,OAAQP,EAAM2hI,gBACZ,IAAK,OACHphI,EAAQP,EAAM8hI,mBACV13H,EAAE,kEAAmE,CACnEq0H,aAAcI,EAAe7+H,EAAM8hI,sBAErC13H,EAAE,2DACN,MACF,IAAK,OACH7J,EAAQP,EAAM8hI,mBACV13H,EAAE,kEAAmE,CACnEq0H,aAAcI,EAAe7+H,EAAM8hI,sBAErC13H,EAAE,2DACN,MACF,IAAK,aACH7J,EAAQ6J,EAAE,uDACV,MACF,IAAK,aACH7J,EAAQ6J,EAAE,uDACV,MACF,QACE7J,EAAQ6J,EAAE,2DAEd,OAAO7J,CAAK,GACX,CAACs+H,EAAgB7+H,EAAM2hI,eAAgB3hI,EAAM8hI,mBAAoB13H,IACpE,OACElH,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GACEL,EAAM8hI,mBACF,GAAG9hI,EAAMm2F,WAAWn2F,EAAM8hI,kCAC1B,GAAG9hI,EAAMm2F,WAAWn2F,EAAM2hI,uBAEhCv8F,aAAcA,EACdvM,eAAgBA,EAChBvF,eAAgBA,EAChB+R,WAAYA,EACZ8C,gBAAiB/9B,EAAE,8BACnBg+B,gBAAiBA,EACjBC,sBAAuBj+B,EAAE,4CACzBq+B,sBAAsBvlC,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrCwN,qBAAsBxoC,EAAM0iI,mBAAqBt4H,EAAE,aACnDs+B,kBAAmB7P,EAAe8C,MAAM,EAAG,MACvCqU,GAGV,CExQO,SAAS4yF,GAAW5iI,GASzB,MAAM,KACJ2G,EAAI,QACJwvF,KAEGlyE,GACDjkB,GACE,EAAEoK,IAAMC,EAAAA,EAAAA,MACRw4H,EACQ,QAAZ1sC,EACIxhC,EAAM,0BACM,QAAZwhC,EACE2qC,EAAM,0BACN7sE,EAAM,iCACd,OACE/wD,EAAAA,EAAAA,KAACq+H,GAAM,IACDt9G,EACJkyE,QAASA,EACTsrC,qBAAsB,CACpBnhI,KAAM,CACJohI,SAAWoB,GAA+BA,GAAYzkE,gBAAgB+T,MAAM9xE,KAC5EgC,KAAM,aACN9B,MAAO4J,EAAE,eAGbw3H,+BAAgC,CAAEphI,MAAO4J,EAAE,aAAco9C,MAAO,yBAChEF,IAAKu7E,EACLf,mBAAoBn7H,EACpBg7H,eAAgB,QAGtB,CC1CO,SAAS3G,KACd,MAAMzzE,GAASgZ,EAAAA,GAAAA,KACf,OACEr9D,EAAAA,EAAAA,KAAC0/H,GAAU,CACTzsC,QAAQ,MACR91F,GAAIknD,EAAOlnD,IAAM,GACjBsG,KAAM,aACNg8H,cAAe7kE,GAAS8iE,oBAG9B,CCPO,SAASmC,GAAW/iI,GASzB,MAAM,KAAE2G,EAAI,QAAEwvF,KAAYlyE,GAASjkB,GAC7B,EAAEoK,IAAMC,EAAAA,EAAAA,MACR24H,EACQ,QAAZ7sC,EACIxhC,EAAM,0BACM,QAAZwhC,EACE2qC,EAAM,0BACN7sE,EAAM,iCACd,OACE/wD,EAAAA,EAAAA,KAACq+H,GAAM,IACDt9G,EACJkyE,QAASA,EACTsrC,qBAAsB,CACpBnhI,KAAM,CACJohI,SAAWzqD,GAA+BA,GAAY5Y,gBAAgBkU,MAAMzT,SAC5Ex8D,KAAM,iBACN9B,MAAO4J,EAAE,cAGbo3H,uBAAwB,CACtB,CACEx9G,OAAQ5Z,EAAE,cACVzD,KAAM,OACN/I,MAAQ2hB,GAAyBA,GAAM8+C,gBAAgBkU,MAAM07C,WAC7D3rH,KAAM,oBAER,CACE0hB,OAAQ5Z,EAAE,aACVzD,KAAM,OACN/I,MAAQ2hB,GAAyBA,GAAM8+C,gBAAgBkU,MAAM27C,UAC7D5rH,KAAM,oBAGVs/H,+BAAgC,CAAEphI,MAAO4J,EAAE,YAAao9C,MAAO,6BAC/DF,IAAK07E,EACLlB,mBAAoBn7H,EACpBg7H,eAAgB,QAGtB,CCnDO,SAAS1G,KACd,MAAM1zE,GAASgZ,EAAAA,GAAAA,KACf,OACEr9D,EAAAA,EAAAA,KAAC6/H,GAAU,CACT5sC,QAAQ,MACR91F,GAAIknD,EAAOlnD,IAAM,GACjBsG,KAAM,aACNg8H,cAAe7kE,GAASwiE,oBAG9B,CCMO,SAAS2C,KACd,MAAM,EAAE74H,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KACb6W,EAAerW,KAEf4K,EAAcyT,KAYpB,OACE19D,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,0BACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,oBAAqBY,GAAI88C,EAAWgW,GAASolE,kBACxD,CAAE1iI,MAAO4J,EAAE,+BAGflH,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,0BACdw3B,SArBsDhwB,UAC1D,MAAMuxH,QAA8B1wE,EAAYkC,EAAM,qBAAsB,IACvE0nC,EACHrqB,KAAM,UAER9T,EAAaJ,GAASmtD,sBAAuB,CAC3C1jE,OAAQ,CAAElnD,GAAI8iI,EAAsB9iI,GAAGqhB,aACvC,EAeEgvB,SAAUA,IAAMwtB,EAAaJ,GAASolE,iBACtCpyG,aAAcsyG,KAAuBhgI,UAErCF,EAAAA,EAAAA,KAACmgI,GAAoB,QAI7B,CAEO,SAASC,KACd,MAAM,EAAEl5H,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KACb6W,EAAerW,KAEfN,GAASgZ,EAAAA,GAAAA,KACTlgE,EAAK3C,OAAO6pD,EAAOlnD,KACjB+iB,KAAMi5E,GAAmBljC,GAC/BxE,EAAM,qBAAqBt0D,EAAGqhB,eAG1B6kD,EAAeP,KAOfu9D,IAAsBlnC,EAE5B,OACE7zF,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MACE87F,GAAgB/7F,KACZ8J,EAAE,8BAA+B,CAAEo5H,mBAAoBnnC,GAAgB/7F,OACvE8J,EAAE,oBAERk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,oBAAqBY,GAAI88C,EAAWgW,GAASolE,kBACxD,CACE1iI,MAAO67F,GAAgB/7F,KACnB8J,EAAE,8BAA+B,CAAEo5H,mBAAoBnnC,GAAgB/7F,OACvE8J,EAAE,wBAIXm5H,IACCrgI,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,wBACdw3B,SA3BoDhwB,gBACpD20D,EAAa5R,EAAM,qBAAqBt0D,EAAGqhB,cAAe+hH,GAChEvlE,EAAaJ,GAASmtD,sBAAuB,CAAE1jE,OAAQ,CAAElnD,GAAIA,EAAGqhB,aAAe,EA0BzEgvB,SAAUA,IAAMwtB,EAAaJ,GAASmtD,sBAAuB,CAAE1jE,OAAQ,CAAElnD,QACzEywB,aAAcsyG,GAAqB/mC,GAAgBj5F,UAEnDF,EAAAA,EAAAA,KAACmgI,GAAoB,QAK/B,CAEA,SAASA,KACP,MAAM,EAAEj5H,IAAMC,EAAAA,EAAAA,MACd,OACE7B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,OACLE,MAAO4J,EAAE,QACTkf,YAAalf,EAAE,cACf8lB,YAAU,KAEZhtB,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,cACLE,MAAO4J,EAAE,eACTkf,YAAalf,EAAE,wBAEjB5B,EAAAA,EAAAA,MAACygE,GAAe,CAAC12B,cAAY,EAAAnvC,SAAA,EAC3BF,EAAAA,EAAAA,KAACm4C,GAAkB,CACjB/6C,KAAK,SACLE,MAAO4J,EAAE,uBACTkqC,eAAgBlqC,EAAE,uBAClBiqC,UAAWjqC,EACT,sKAEFuL,OAAO,YAETzS,EAAAA,EAAAA,KAACm4C,GAAkB,CACjB/6C,KAAK,YACLE,MAAO4J,EAAE,0BACTkqC,eAAgBlqC,EAAE,0BAClBiqC,UAAWjqC,EACT,mMAEFuL,OAAO,gBAKjB,CAEA,SAASytH,GAAqB/mC,GAC5B,OAAKA,GACI,CAAE/7F,KAAM,GAAIwe,YAAa,GAAI0sC,OAAQ,CAAC,EAAGk4E,UAAW,CAAC,EAGhE,CCrJO,SAASC,KACd,MAAM,GAAEtjI,EAAK,KAAOkgE,EAAAA,GAAAA,KAEpB,OAAOr9D,EAAAA,EAAAA,KAACg4H,GAAe,CAAC5zE,IAAKqN,EAAM,qBAAqBt0D,kBAC1D,CCIO,SAAS4qH,KACd,MAAM1jE,GAASgZ,EAAAA,GAAAA,MACPn9C,KAAMi5E,GAAmB9iC,GAC/B5E,EAAM,qBACNpN,EAAOlnD,IAET,OAAOg8F,GAAiBn5F,EAAAA,EAAAA,KAAC0gI,GAAyB,CAACvnC,eAAgBA,IAAqB,IAC1F,CAEO,SAASunC,GAA0B5jI,GACxC,MAAM,IAAQqK,EAAAA,EAAAA,MACRi+C,GAAU/vC,EAAAA,GAAAA,MACVuvC,EAAaT,KAcnB,OACE7+C,EAAAA,EAAAA,MAACoc,GAAW,CAAAxhB,SAAA,EACVF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,QAAQhH,UAfCi5F,EAe0Br8F,EAAMq8F,eAd5DA,EAAe38B,SAEfl3D,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,CACGi5F,EAAe/7F,MAChB4C,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAACxS,MAAO,CAAEC,WAAY,QAAS5B,SAAEgH,EAAE,mBAItClH,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SAAGi5F,EAAe/7F,WAOzB4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,eAAehH,SAAEpD,EAAMq8F,eAAev9E,eAC3D5b,EAAAA,EAAAA,KAACo2E,GAAoB,CACnBj1D,SAAUja,EACR,sKAEF5J,MAAO4J,EAAE,uBACTxM,MAAOiiF,GAAWvsE,KAAKa,UAAUnU,EAAMq8F,eAAe7wC,YAExDtoD,EAAAA,EAAAA,KAACo2E,GAAoB,CACnBj1D,SAAUja,EACR,mMAEF5J,MAAO4J,EAAE,0BACTxM,MAAOiiF,GAAWvsE,KAAKa,UAAUnU,EAAMq8F,eAAeqnC,eAExDxgI,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,WAAWhH,UAC9BF,EAAAA,EAAAA,KAACqS,GAAY,CACX3X,MAAOoC,EAAMq8F,eAAe99B,QAC5B/oD,OAAQxV,EAAMq8F,eAAeh+B,gBAAgByU,YAAYhU,SACzDj1D,QAASA,IACPy+C,EACER,EAAWgW,GAASiB,YAAa,CAC/BxX,OAAQ,CACNlnD,IAAKL,EAAMq8F,eAAeh+B,gBAAgByU,YAAYzyE,IAAM,GAAGqhB,oBAO3Exe,EAAAA,EAAAA,KAACmsE,GAAsB,CACrBzxE,MAAOoC,EAAMq8F,eAAeppB,SAC5Bz9D,OAAQxV,EAAMq8F,eAAeh+B,gBAAgB8U,aAAarU,SAC1Dj1D,QAASA,IACPy+C,EACER,EAAWgW,GAASiB,YAAa,CAC/BxX,OAAQ,CACNlnD,IAAKL,EAAMq8F,eAAeh+B,gBAAgB8U,aAAa9yE,IAAM,GAAGqhB,oBArD9E,IAAkC26E,CA6DpC,CC7EO,SAASwnC,GAAyBz3F,GACvC,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR0kC,EAAsBokF,KACtB58C,GAAyBhvE,EAAAA,EAAAA,UAC7B,KAAM,CACJyc,OAAQ5Z,EAAE,QACV4b,KAAOq2E,IAAmCn5F,EAAAA,EAAAA,KAACmV,GAAQ,CAAC1G,KAAM0qF,EAAe/7F,OACzEgC,KAAM,OACNqW,SAAU,OAEZ,CAACvO,IAGG8hC,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAACgvE,IAAyB,CAACA,IACzDutD,EAA8CznC,GAClDA,EAAeh+B,gBAAgB6iC,mBAAmB3yC,OAC9C,GACAnkD,EAAE,0EACF25H,EAAqC1nC,GACzCA,EAAe38B,QACXt1D,EAAE,mEACF,GAEA04D,EAAaH,KA4DnB,OA3D+BpG,IAC7B,MAAMynE,EAAsDznE,EAAgBl7D,QACzEg7F,GAAmBA,EAAe38B,UAK/BukE,EAH0C1nE,EAAgBl7D,QAC7Dg7F,IAAoBA,EAAe38B,UAGdr+D,OAAOyiI,GAE/BhhE,EAAW,CACTviE,MAAO6J,EAAE,sCAAuC,CAAEoV,MAAO+8C,EAAgB71D,SACzEzF,YAAamJ,EAAE,yEAA0E,CACvFoV,MACE+8C,EAAgB71D,OAChBs9H,EAAkCt9H,OAClCu9H,EAAiDv9H,SAErDwoC,iBAAkB9kC,EAAE,0BAA2B,CAAEoV,MAAO+8C,EAAgB71D,SACxEs1B,MAAOugC,EAAgBj6D,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QAC/DwkB,aACEk/G,EAAkCt9H,QAClCu9H,EAAiDv9H,OAC7C,IACMs9H,EAAkCt9H,OAClC,CACE0D,EACE,2FACA,CACEoV,MAAOwkH,EAAkCt9H,UAI/C,MACAu9H,EAAiDv9H,OACjD,CACE0D,EACE,gGACA,CACEoV,MAAOykH,EAAiDv9H,UAI9D,SAEN7B,EACNmqC,oBAAsBqtD,GACpB0nC,EAAkC1nC,GAC9B0nC,EAAkC1nC,GAClCynC,EAA2CznC,GACjDpgE,MAAO62B,GACPtoD,UAAU,EACVukC,sBACA7C,gBACAE,aACAD,SAAUA,CAACkwD,EAAgC1tE,IACzCgkC,GAAcgC,EAAM,qBAAqB0nC,EAAeh8F,GAAGqhB,cAAeiN,IAC5E,CAGN,CCpCO,SAASu1G,GACdC,GAEA,MAAMjmE,EAAerW,KACfu8E,EAAwBP,GAAyBM,IACjD,EAAE/5H,IAAMC,EAAAA,EAAAA,MAEd,OAAO9C,EAAAA,EAAAA,UAAQ,KACb,MAIMw8H,EAAqC1nC,GACzCA,EAAe38B,QACXt1D,EAAE,kEACF,GACAi6H,EAAmChoC,GACvCA,EAAe38B,QACXt1D,EAAE,iEACF,GAoCN,MA9B+C,CAC7C,CACEzD,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/B8J,UAAU,EACVvH,KAAM84D,GAAAA,GACN34D,QAASuB,EAAAA,GAAcC,QACvBvH,MAAO4J,EAAE,wBACTnG,WAAao4F,GACXgoC,EAAgChoC,GAC5BgoC,EAAgChoC,GAfQA,IAChDA,EAAeh+B,gBAAgB6iC,mBAAmB5G,KAC9C,GACAlwF,EAAE,yEAaEk6H,CAAyCjoC,GAC/CxyF,QAAUwyF,GACRn+B,EAAaJ,GAASwlE,mBAAoB,CAAE/7E,OAAQ,CAAElnD,GAAIg8F,EAAeh8F,OAE7E,CAAEsG,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,0BACTnG,WAAao4F,GACX0nC,EAAkC1nC,GAC9B0nC,EAAkC1nC,GAxCQA,IAClDA,EAAeh+B,gBAAgB6iC,mBAAmB3yC,OAC9C,GACAnkD,EAAE,0EAsCE05H,CAA2CznC,GACjDxyF,QAAUwyF,GAAmC+nC,EAAsB,CAAC/nC,IACpE7xF,UAAU,GAIA,GACb,CAAC45H,EAAuBlmE,EAAc9zD,GAC3C,CC7FO,SAASm6H,KACd,MAAM,EAAEn6H,IAAMC,EAAAA,EAAAA,MACRsyD,EAAiBm9D,GAAsB,mBACvCvyE,GAASgZ,EAAAA,GAAAA,MACT,MACJrwD,EACAkT,KAAMi5E,EAAc,QACpB5jC,GACEc,GAA2B5E,EAAM,oBAAqBpN,EAAOlnD,IAC3D69D,EAAerW,KACfrhD,EAAU09H,IAA4B,IAAMhmE,EAAaJ,GAASolE,mBAClEp7E,EAAaT,KAEnB,OAAIn3C,GAAchN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,IACpD4jC,GAGH7zF,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO87F,GAAgB/7F,KACvBgjD,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,oBAAqBY,GAAI88C,EAAWgW,GAASolE,kBACxD,CAAE1iI,MAAO67F,GAAgB/7F,OAE3BujD,eACE3gD,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAAS,IAAIm2D,KAAmBn2D,GAChCF,SAAU6F,GAAAA,GAAiBC,MAC3B3I,aAAc44F,OAIpBn5F,EAAAA,EAAAA,KAAC09D,GAAc,CACbe,QAAS,CACPnhE,MAAO4J,EAAE,4BACTiuB,KAAMylC,GAASolE,gBACfthE,oBAAqB,oBAEvBvU,KAAM,CACJ,CAAE7sD,MAAO4J,EAAE,WAAYiuB,KAAMylC,GAASmtD,uBACtC,CAAEzqH,MAAO4J,EAAE,eAAgBiuB,KAAMylC,GAAS6lE,4BAE5Cp8E,OAAQ,CAAElnD,GAAIg8F,EAAeh8F,UA5BP6C,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,GAgC3D,CC/CO,SAAS61E,KACd,MAAM,EAAE94H,IAAMC,EAAAA,EAAAA,MACR2xD,EAASvC,KACfgH,GAAqB,oBACrB,MAAMntC,EAAiB4/F,KACjB9tF,EAAe+tF,KACfj1D,EAAerW,KAEf7X,EAAO6zB,GAA2B,CACtCvc,IAAKqN,EAAM,qBACXrhC,iBACA8R,iBAGIvM,EFhBD,SACLsrG,GAEA,MAAM,IAAQ95H,EAAAA,EAAAA,MACRy9C,EAAaT,KACb+8E,EAAwBP,GAAyBM,IACjD,KAAE/gH,GAAS0jD,GAA6CnS,EAAM,sBAC9D6vE,EAA0Bt8H,QAAQkb,GAAQA,EAAK5c,SAAW4c,EAAK5c,QAAc,MAEnF,OAAOe,EAAAA,EAAAA,UACL,IAAM,CACJ,CACEZ,KAAMrJ,EAAeyN,KACrBrH,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVvH,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,0BACTnG,WAAYugI,OACR3/H,EACAuF,EACE,2IAENa,KAAM,GAAG68C,EAAWgW,GAASmlE,yBAE/B,CAAEt8H,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,2BACTP,QAASu6H,EACT55H,UAAU,KAGd,CAACJ,EAAGo6H,EAAyB18E,EAAYs8E,GAE7C,CErByBK,CAAgCz0F,EAAK00B,yBACtDr/B,EAAa6+F,GAA4Bl0F,EAAK00B,0BAE9C,KAAEthD,GAAS0jD,GAA6CnS,EAAM,sBAC9D6vE,EAA0Bt8H,QAAQkb,GAAQA,EAAK5c,SAAW4c,EAAK5c,QAAc,MAEnF,OACEgC,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,oBACT0U,YAAa1U,EACX,kGAEF+5C,eAAgB/5C,EAAE,oBAClB85C,UAAW95C,EACT,kGAEFg6C,aAAc2X,GAAcC,EAAQ,mBACpCnY,eAAe3gD,EAAAA,EAAAA,KAACyjE,GAAkB,CAAChgE,KAAM,uBAE3CzD,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,uBACHizB,eAAgBA,EAChBuF,eAAgBA,EAChBuM,aAAcA,EACdC,WAAYA,EACZ8C,gBAAiB/9B,EAAE,kCACnBg+B,gBAEMh+B,EADJo6H,EACM,iDACA,2DAERn8F,sBAEMj+B,EADJo6H,EACM,6DAEA,yFAGRh6F,eAAgBg6F,OAA0B3/H,EAAYo2B,GAAAA,GACtDwN,sBAAsBvlC,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrCwN,qBAAsBg8F,EAA0Bp6H,EAAE,+BAA4BvF,EAC9E0jC,sBACEi8F,EAA0B,IAAMtmE,EAAaJ,GAASmlE,2BAAwBp+H,KAE5EmrC,MAIZ,CCzEO,SAAS00F,GACdt4F,GAEA,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR0kC,EAAsBoxD,GAAgC,CAC1DpnF,cAAc,EACd0mD,aAAa,IAET8W,EAAyBlE,GAAc,CAAEt5D,cAAc,EAAM0mD,aAAa,IAC1EvzB,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAACgvE,IAAyB,CAACA,IACzDzT,EAAaH,KAwBnB,OAvBqC9F,IACnCiG,EAAW,CACTviE,MAAO6J,EAAE,4CAA6C,CACpDoV,MAAOq9C,EAAsBn2D,SAE/BzF,YAAamJ,EACX,+EACA,CAAEoV,MAAOq9C,EAAsBn2D,SAEjCwoC,iBAAkB9kC,EAAE,gCAAiC,CAAEoV,MAAOq9C,EAAsBn2D,SACpFs1B,MAAO6gC,EAAsBv6D,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QACrE27B,MAAO62B,GACPtoD,UAAU,EACVukC,sBACA7C,gBACAE,aACAD,SAAUA,CAACoqD,EAA4C5nE,IACrDgkC,GACEgC,EAAM,2BAA2B4hC,EAAqBl2F,GAAGqhB,cACzDiN,IAEJ,CAGN,CClBO,SAASg2G,IAA0B,SAAEC,EAAQ,OAAEjyH,IACpD,MAAM,EAAEvI,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACfg9E,EAA8BH,GAA+BE,GAC7DtzH,EAAerD,KACfwkD,EAAcyT,KACpB,OAAO3+D,EAAAA,EAAAA,UACL,IAAM,CACJ,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAM84D,GAAAA,GACN34D,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVnN,MAAO4J,EAAE,8BACTnG,WAAasyF,GAAyByjC,GAAmBzjC,EAAsBnsF,GAC/EP,QAAU0sF,GACRr4B,EAAaJ,GAASgnE,yBAA0B,CAC9Cv9E,OAAQ,CAAElnD,GAAIk2F,EAAqBl2F,OAGzC,CACEsG,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAM22C,GAAAA,GACNpvC,UAAU,EACVnN,MAAO4J,EAAE,8BACTnG,WAAasyF,GAAyB6jC,GAAmB7jC,EAAsBnsF,GAC/EP,QAAUg8F,IACR,MAAM9iG,EAAoB,CACxBwD,QAAS,UACThG,MAAO6J,EAAE,GAAGy7F,EAAGvlG,gBACfmO,QAAS,KAEXgkD,EAAYkC,EAAM,2BAA2BkxC,GAAIxlG,GAAGqhB,YAAc,WAAY,CAC5EphB,KAAM,GAAGulG,EAAGvlG,WAAU,IAAIwU,MAAO6lH,mBAEhC/rG,MAAKhd,UACJN,EAAazD,SAAS9K,SAChB4P,EAAOi/E,EAA4B,IAE1C1/E,OAAOhC,IACNoB,EAAavD,aAAahL,EAAO,CAC/BwD,QAAS,SACThG,MAAO6J,EAAE,wCACThH,SAAU8M,aAAiBsX,OAAStX,EAAMK,SAC1C,GACF,GAGR,CAAE5J,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,gCACTxG,SAAW2yF,GAAyBA,EAAqB72B,QACzDz7D,WAAasyF,GAAyB2jC,GAAqB3jC,EAAsBnsF,GACjFP,QAAU0sF,GAAyBsuC,EAA4B,CAACtuC,IAChE/rF,UAAU,KAGd,CAAC0zD,EAAc2mE,EAA6BvzH,EAAcmhD,EAAa9/C,EAAQvI,GAEnF,CCzEO,SAAS26H,KACd,MAAMx9E,GAASgZ,EAAAA,GAAAA,MACT,IAAQl2D,EAAAA,EAAAA,MAERy9C,EAAaT,KACb6W,EAAerW,MAEbzkC,KAAMmzE,GAAyBh9B,GACrC5E,EAAM,2BACNpN,EAAOlnD,IAEHyjC,EAAc6gG,GAA0B,CAC5CC,SAAUA,IAAM1mE,EAAaJ,GAASgtC,uBACtCn4F,OAASi/E,GACP1zB,EAAaJ,GAAS85B,4BAA6B,CAAErwC,OAAQ,CAAElnD,GAAIuxF,EAAIvxF,QAErEs8D,EAAiBm9D,GAAsB,yBAE7C,OACEtxH,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,GAAGmsF,GAAsBj2F,QAClCgjD,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,0BAA2BY,GAAI88C,EAAWgW,GAASgtC,wBAC9D,CAAEtqG,MAAO+1F,GAAsBj2F,MAAQ,KAEzCujD,eACE3gD,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAAS,IAAIm2D,KAAmB74B,GAChCx9B,SAAU6F,GAAAA,GAAiBC,MAC3B3I,aAAc8yF,OAIpBrzF,EAAAA,EAAAA,KAAC09D,GAAc,CACbe,QAAS,CACPnhE,MAAO4J,EAAE,kCACTiuB,KAAMylC,GAASgtC,sBACflpC,oBAAqB,0BAEvBvU,KAEEkpC,GAAsB72B,SAAkD,OAAvC62B,GAAsBjjB,aACnD,CACE,CAAE9yE,MAAO4J,EAAE,WAAYiuB,KAAMylC,GAAS85B,6BACtC,CAAEp3F,MAAO4J,EAAE,aAAciuB,KAAMylC,GAASknE,gCAE1C,CACE,CAAExkI,MAAO4J,EAAE,WAAYiuB,KAAMylC,GAAS85B,6BACtC,CAAEp3F,MAAO4J,EAAE,aAAciuB,KAAMylC,GAASknE,+BACxC,CAAExkI,MAAO4J,EAAE,eAAgBiuB,KAAMylC,GAASmnE,gCAC1C,CAAEzkI,MAAO4J,EAAE,eAAgBiuB,KAAMylC,GAASonE,iCAGlD39E,OAAQ,CAAElnD,GAAIk2F,GAAsBl2F,IAAM,QAIlD,CC9DO,SAAS8kI,IAA0B,IACxC79E,EAAG,cACH89E,IAKA,MAAM,EAAEh7H,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACfv0B,EAAiB+sE,GAAgC,CAAE/4C,IAAKA,IACxDliB,EAAe+6D,KACfklC,EAAkBD,EACpBhgG,EAAa/jC,QAAQ0kB,GAA6B,iBAAlBA,EAAO/B,SACvCohB,EACE4K,EAAO6zB,GAAiC,CAC5Cvc,IAAKA,GAAYqN,EAAM,2BACvBrhC,iBACA8R,kBAEI,KAAEhiB,GAAS0jD,GACfxf,GAAYqN,EAAM,4BAEdtvB,EAAas/F,GAA0B,CAC3CC,SAAU50F,EAAK00B,wBACf/xD,OAAQq9B,EAAKyoB,UAET6sE,EAAgCp9H,QAAQkb,GAAQA,EAAK5c,SAAW4c,EAAK5c,QAAc,MACnFqyB,ECtBD,SAAuCmX,GAC5C,MAAM,IAAQ3lC,EAAAA,EAAAA,MACR6zD,EAAerW,KACfg9E,EAA8BH,GAA+B10F,EAAK00B,0BAElE,KAAEthD,GAAS0jD,GAA6CnS,EAAM,4BAC9D2wE,EAAgCp9H,QAAQkb,GAAQA,EAAK5c,SAAW4c,EAAK5c,QAAc,MAEzF,OAAOe,EAAAA,EAAAA,UACL,IAAM,CACJ,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVvH,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,gCACTnG,WAAYqhI,OACRzgI,EACAuF,EACE,wJAENP,QAASA,IAAMq0D,EAAaJ,GAASynE,6BAEvC,CAAE5+H,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,iCACTnG,WAAa44D,GAA0Bs9D,GAAsBt9D,EAAuBzyD,GACpFP,QAASg7H,EACTr6H,UAAU,KAGd,CAACJ,EAAGk7H,EAA+BT,EAA6B3mE,GAEpE,CDfyBsnE,CAA8Bx1F,GAErD,OACE9sC,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,mCACHizB,eAAgBA,EAChBuF,eAAgBA,EAChBuM,aAAcigG,EACdhgG,WAAYA,EACZ8C,gBAAiB/9B,EAAE,wCACnBg+B,gBAEMh+B,EADJk7H,EACM,gCACA,kEAERj9F,sBAEMj+B,EADJk7H,EACM,mDAEA,yFAGR78F,sBAAsBvlC,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrCwN,qBACE88F,EAAgCl7H,EAAE,qCAAkCvF,EAEtE0jC,sBACE+8F,EACI,IAAMpnE,EAAaJ,GAASynE,iCAC5B1gI,KAEFmrC,EACJ1K,gBAAiBl7B,EAAE,0BAGzB,CErEO,SAAS0gG,KACd,MAAM,EAAE1gG,IAAMC,EAAAA,EAAAA,MACR2xD,EAASvC,KAEf,OACEjxD,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,0BACT0U,YAAa1U,EACX,+EAEF+5C,eAAgB/5C,EAAE,0BAClB85C,UAAW,CACT95C,EAAE,+EACFA,EACE,2SAGJg6C,aAAc2X,GAAcC,EAAQ,yBACpCnY,eAAe3gD,EAAAA,EAAAA,KAACyjE,GAAkB,CAAChgE,KAAM,6BAE3CzD,EAAAA,EAAAA,KAACiiI,GAAyB,CAACC,eAAe,MAGhD,CCdO,SAASxtC,KACd,MAAMrwC,GAASgZ,EAAAA,GAAAA,MACPn9C,KAAM0hE,GAA0BvrB,GACtC5E,EAAM,2BACNpN,EAAOlnD,IAET,OAAOykF,GACL5hF,EAAAA,EAAAA,KAACuiI,GAA+B,CAACC,cAAe5gD,IAC9C,IACN,CAEO,SAAS2gD,GAAgCzlI,GAC9C,MAAM,IAAQqK,EAAAA,EAAAA,MACRy9C,EAAaT,KACb6W,EAAerW,KAEf69E,EAAgB1lI,EAAM0lI,cAE5B,OACEl9H,EAAAA,EAAAA,MAACoc,GAAW,CAAC,UAAQ,oCAAmCxhB,SAAA,EACtDF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC,UAAQ,6BAA6B5jB,MAAO4J,EAAE,QAAQhH,SAC/DsiI,EAAcplI,QAEjB4C,EAAAA,EAAAA,KAACkhB,GAAU,CACT,UAAQ,8BACR5jB,MAAO4J,EAAE,SACTia,UACE7b,EAAAA,EAAAA,MAAA,QAAApF,SAAA,CACGgH,EACC,4FAEFlH,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,SACCkH,EAAE,aACH5B,EAAAA,EAAAA,MAAA,MAAApF,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,UACEF,EAAAA,EAAAA,KAAA,QAAAE,UACEF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,uCAGPF,EAAAA,EAAAA,KAAA,MAAAE,UACEF,EAAAA,EAAAA,KAAA,QAAAE,UACEF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,0CAKZA,SAEAsiI,EAAc/qG,SAEjBz3B,EAAAA,EAAAA,KAACkhB,GAAU,CAAC,UAAQ,oCAAoC5jB,MAAO4J,EAAE,eAAehH,SAC7EsiI,EAAc5mH,eAEjB5b,EAAAA,EAAAA,KAACkhB,GAAU,CACT,UAAQ,gCACR5jB,MAAO4J,EAAE,WAAWhH,SACpB,GAAGsiI,EAAchmE,aACnBx8D,EAAAA,EAAAA,KAACkhB,GAAU,CAAC,UAAQ,4BAA4B5jB,MAAO4J,EAAE,gBAAgBhH,SACtEsiI,EAAcrnE,gBAAgBiV,cAC7BpwE,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAM+zH,EAAcrnE,gBAAgBiV,cAAchzE,KAClD0K,GAAI88C,EAAWgW,GAAS62B,oBAAqB,CAC3CptC,OAAQ,CAAElnD,GAAIqlI,EAAcrnE,gBAAgBiV,cAAcjzE,QAI9D+J,EAAE,yBAGNlH,EAAAA,EAAAA,KAACkhB,GAAU,CAAC,UAAQ,6BAA6B5jB,MAAO4J,EAAE,QAAQhH,SACxC,KAAvBsiI,EAAcC,KAAcv7H,EAAE,WAAas7H,EAAcC,QAE5DziI,EAAAA,EAAAA,KAACkhB,GAAU,CAAC,UAAQ,iCAAiC5jB,MAAO4J,EAAE,uBAAuBhH,SAClFsiI,GAAernE,gBAAgByT,YAAYxxE,MAC1C4C,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAChR,QAAQ,UAAU/G,MAAM,OAAM4D,SAClCsiI,GAAernE,gBAAgByT,YAAYxxE,YAE5CuE,KAEN3B,EAAAA,EAAAA,KAACkhB,GAAU,CAAC,UAAQ,gCAAgC5jB,MAAO4J,EAAE,WAAWhH,UACtEF,EAAAA,EAAAA,KAACqS,GAAY,CACX3X,MAAO8nI,EAAcnnE,QACrB/oD,OAAQkwH,GAAernE,gBAAgByU,YAAYhU,SACnDj1D,QAASA,IACPq0D,EAAaJ,GAASiB,YAAa,CACjCxX,OAAQ,CAAElnD,GAAIqlI,GAAernE,gBAAgByU,YAAYzyE,WAKjE6C,EAAAA,EAAAA,KAACmsE,GAAsB,CACrB,UAAQ,iCACRzxE,MAAO8nI,EAAczyD,SACrBz9D,OAAQkwH,GAAernE,gBAAgB8U,aAAarU,SACpDj1D,QAASA,IACPq0D,EAAaJ,GAASiB,YAAa,CACjCxX,OAAQ,CAAElnD,GAAIqlI,GAAernE,gBAAgB8U,aAAa9yE,UAMtE,CClGA,MAAMulI,GAAa,CACjBC,OAAQ,wCACRC,QAAS,qDACTC,MAAO,wCAGF,SAASR,KACd,MAAM,EAAEn7H,IAAMC,EAAAA,EAAAA,MACRiO,GAAWC,EAAAA,GAAAA,MACX2lD,EAAerW,MACdY,GAAgBD,KACjBiK,EAAcyT,KASdpe,EAAaT,KAEbv2B,EAA8C,CAClD6J,MAAO8tB,EAAauF,IAAI,UAAY,IAGtC,OACExlD,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,gCACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,0BAA2BY,GAAI88C,EAAWgW,GAASgtC,wBAC9D,CAAEtqG,MAAO4J,EAAE,qCAGflH,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,gCACdw3B,SAzBwDhwB,UAG5D,MAAMo0H,QAAwBvzE,EAAYkC,EAAM,2BAA4BsxE,GAC5E/nE,EAAaJ,GAAS85B,4BAA6B,CAAErwC,OAAQ,CAAElnD,GAAI2lI,EAAgB3lI,KAAO,EAsBtFM,WAAYyJ,EAAE,UACdsmC,SApBWA,IAAMp4B,GAAU,GAqB3BwY,aAAcA,EAAa1tB,UAE3BF,EAAAA,EAAAA,KAACgjI,GAA0B,CAACC,KAAK,eAIzC,CAEO,SAASrB,KACd,MAAM,EAAE16H,IAAMC,EAAAA,EAAAA,MACRiO,GAAWC,EAAAA,GAAAA,MACX2lD,EAAerW,KACfN,GAASgZ,EAAAA,GAAAA,MACPn9C,KAAMsiH,IAAkB1wE,EAAAA,GAAAA,IAC9BL,EAAM,2BAA2BpN,EAAOlnD,IAAM,MAC9CkyD,GACAQ,IAaIjL,EAAaT,KAEnB,OAAKq+E,GAcHl9H,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MACEmlI,GAAeplI,KACX8J,EAAE,oCAAqC,CACrCg8H,yBAA0BV,GAAeplI,OAE3C8J,EAAE,yBAERk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,0BAA2BY,GAAI88C,EAAWgW,GAASgtC,wBAC9D,CACEtqG,MAAOklI,GAAeplI,KAClB8J,EAAE,oCAAqC,CACrCg8H,yBAA0BV,GAAeplI,OAE3C8J,EAAE,8BAIZlH,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,8BACdw3B,SAjDwDhwB,UAG5D,MAAMy0H,QAA2B3zE,GAC/BiC,EAAM,2BAA2BpN,EAAOlnD,IAAM,MAC9C4lI,GAEF/nE,EAAaJ,GAAS85B,4BAA6B,CAAErwC,OAAQ,CAAElnD,GAAIgmI,EAAmBhmI,KAAO,EA2CzFM,WAAYyJ,EAAE,UACdsmC,SAzCWA,IAAMp4B,GAAU,GA0C3BwY,aAAc40G,EAActiI,UAE5BF,EAAAA,EAAAA,KAACgjI,GAA0B,CAACC,KAAK,OAAOG,aAAcZ,UAvCxDxiI,EAAAA,EAAAA,KAACmhD,GAAU,CAAAjhD,UACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTL,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,0BAA2BY,GAAI88C,EAAWgW,GAASgtC,wBAC9D,CAAEtqG,MAAO4J,EAAE,mCAuCvB,CAEA,SAAS87H,GAA2BlmI,GAIlC,MAAM,IAAQqK,EAAAA,EAAAA,MACRk8H,GAA0BvmI,EAAMsmI,cAAchzD,aAEpD,OACE9qE,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,OACLE,MAAO4J,EAAE,QACTkf,YAAalf,EAAE,gBACf8lB,YAAU,EACVjsB,WAAYjE,GAAOsmI,cAAc5mE,UAAW,EAC5CthB,UAAW,OAEbl7C,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,QACLE,MAAO4J,EAAE,SACTiqC,WACE7rC,EAAAA,EAAAA,MAAA,QAAApF,SAAA,CACGgH,EACC,4FAEFlH,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,SACCkH,EAAE,aACH5B,EAAAA,EAAAA,MAAA,MAAApF,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,UACEF,EAAAA,EAAAA,KAAA,QAAAE,UACEF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,uCAGPF,EAAAA,EAAAA,KAAA,MAAAE,UACEF,EAAAA,EAAAA,KAAA,QAAAE,UACEF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,0CAMba,WAAYjE,GAAOsmI,cAAc5mE,UAAW,EAC5Cp2C,YAAalf,EAAE,kBACf8lB,YAAU,EACVkuB,UAAW,OAEbl7C,EAAAA,EAAAA,KAACs6C,GAAc,CACbl9C,KAAK,OACLE,MAAO4J,EAAE,QACTqzC,gBAAiBrzC,EAAE,aACnBmf,QAAS,CACP,CACE/oB,MAAO4J,EAAE,GAAGw7H,GAAWC,UACvBjoI,MAAO,UAET,CACE4C,MAAO4J,EAAE,GAAGw7H,GAAWE,WACvBloI,MAAO,WAET,CACE4C,MAAO4J,EAAE,GAAGw7H,GAAWG,SACvBnoI,MAAO,aAIbsF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,cACLE,MAAO4J,EAAE,eACTkf,YAAalf,EAAE,uBACfnG,WAAYjE,GAAOsmI,cAAc5mE,UAAW,IAE9B,SAAf1/D,EAAMmmI,MAAmBI,GACxBrjI,EAAAA,EAAAA,KAACgtH,GAA0B,CACzB5vH,KAAK,eACL2D,WAAYmG,EACV,8FAEFwwC,WAAYxwC,EACV,uFAGFvF,EACY,SAAf7E,EAAMmmI,MAAoBI,OAOvB1hI,GANF3B,EAAAA,EAAAA,KAACgtH,GAA0B,CACzB5vH,KAAK,eACLs6C,WAAYxwC,EACV,kFAIU,WAAfpK,EAAMmmI,MACLjjI,EAAAA,EAAAA,KAACgtH,GAA0B,CACzB5vH,KAAK,eACLs6C,WAAYxwC,EACV,gFAEF8lB,YAAY,SAEZrrB,GAEJ3B,EAAAA,EAAAA,KAACy7F,GAAwB,CACvBr+F,KAAK,aACLE,MAAO4J,EAAE,uBACTiqC,UAAWjqC,EAAE,mEACbkf,YAAalf,EAAE,8BACfnG,WAAYjE,GAAOsmI,cAAc5mE,QAAUt1D,EAAE,iBAAcvF,EAC3Dm/D,YAAa,CACXwiE,2BAA4B,gBAKtC,CCzPO,SAASxB,KACd,MAAM,GAAE3kI,EAAK,KAAOkgE,EAAAA,GAAAA,KACpB,OAAOr9D,EAAAA,EAAAA,KAAC84H,GAAa,CAAC10E,IAAKqN,EAAM,0BAA2BwnE,uBAAwB97H,GACtF,CC2BO,SAASomI,KACd,MAAM,EAAEr8H,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KACbE,GAASgZ,EAAAA,GAAAA,KACTrC,EAAerW,MACbzkC,KAAMs6G,EAAoB,UAAEpxG,GAAc6sC,GAChDxE,EAAM,2BAA2BpN,EAAOlnD,IAAM,OAE1CutH,EAAqBF,KAE3B,GAAIphG,IAAcoxG,EAAsB,OAAOx6H,EAAAA,EAAAA,KAACkqD,GAAW,IAE3D,MAAM/D,EAA0B,CAC9B,CACEhpD,GAAI,QACJG,MAAO4J,EAAE,kBACTohD,QACEtoD,EAAAA,EAAAA,KAACw9H,GAAkB,CACjBC,6BAA8Bv2H,EAC5B,mFACA,CACEg8H,yBAA0B1I,GAAsBp9H,SAKxDqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,MAAEysD,GAAUlS,EAClB,IAAKkS,GAAO/1D,OACV,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,QACJG,MAAO4J,EAAE,yBACTohD,QACEtoD,EAAAA,EAAAA,KAAC+8H,GAAkB,CACjB/uE,YAAY,uBACZ0uE,yBAAyB,QACzBC,4BAA6Bz1H,EAAE,yDAA0D,CACvFg8H,yBAA0B1I,GAAsBp9H,SAItDqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,SAAE2uH,GAAap0E,EACrB,IAAKo0E,GAAUj4H,OACb,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,SACJG,MAAO4J,EAAE,UACTohD,QAAQtoD,EAAAA,EAAAA,KAACs7H,GAAyB,MAwCtC,OACEh2H,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,aACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,0BAA2BY,GAAI88C,EAAWgW,GAASgtC,wBAC9D,CACEtqG,MAAOk9H,GAAsBp9H,KAC7B0K,GAAI88C,EAAWgW,GAAS85B,4BAA6B,CACnDrwC,OAAQ,CAAElnD,GAAIq9H,GAAsBr9H,OAGxC,CACEG,MAAO4J,EAAE,eACTY,GAAI88C,EAAWgW,GAASmnE,+BAAgC,CACtD19E,OAAQ,CAAElnD,GAAIq9H,GAAsBr9H,OAGxC,CAAEG,MAAO4J,EAAE,kBAGflH,EAAAA,EAAAA,KAACgqD,GAAU,CACT7gB,aAAck2B,GACdlZ,MAAOA,EACPznB,SA5DWhwB,UACf,MAAM,MAAE6qD,EAAK,SAAEkiE,GAAav7G,EACtB4Y,EAAwB,GAC9B,IAAK,MAAMo2C,KAAQ3V,EACjB,IAAK,MAAM7wC,KAAQ+yG,EACjB3iG,EAAM/0B,KAAK,CAAEmrE,OAAMxmD,SAGvB,OAAO,IAAIyhB,SAAeqd,IACxBkjE,EAAmB,CACjBrtH,MAAO6J,EAAE,aACT6xB,MAAOA,EAAGm2C,OAAMxmD,UAAW,GAAGwmD,EAAK/xE,MAAMurB,EAAKvrB,KAC9C27B,QACAkQ,cAAe,CACb,CAAEloB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAGosD,UAAWA,EAAK9xE,MAC9C,CAAE0jB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAG4F,UAAWA,EAAKtrB,OAEhD6rC,SAAUA,EAAGimC,OAAMxmD,UACjB6mC,GAAYkC,EAAM,0BAA2B,CAC3Cyd,KAAMA,EAAK/xE,GACXkgI,gBAAiB30G,EAAKvrB,GACtB4/D,aAAc,2BACdugE,UAAW9C,EAAqBr9H,KAEpC+rC,WAAYA,KACVse,GAAS,EAEXj7C,QAASA,KACPyuD,EAAaJ,GAASmnE,+BAAgC,CACpD19E,OAAQ,CAAElnD,GAAIq9H,EAAqBr9H,GAAGqhB,aACtC,GAEJ,GACF,EA4BE8wB,aAAW,EACX9B,SAAUA,KACRwtB,EAAaJ,GAASmnE,+BAAgC,CACpD19E,OAAQ,CAAElnD,GAAIq9H,GAAsBr9H,KACpC,MAKZ,CCjIO,SAASqmI,KACd,MAAM,EAAEt8H,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KACbE,GAASgZ,EAAAA,GAAAA,MAEPn9C,KAAMs6G,EAAoB,UAAEpxG,GAAc6sC,GAChDxE,EAAM,2BAA2BpN,EAAOlnD,IAAM,OAE1CutH,EAAqBF,KACrBxvD,EAAerW,KAErB,GAAIv7B,IAAcoxG,EAAsB,OAAOx6H,EAAAA,EAAAA,KAACkqD,GAAW,IAE3D,MAAM/D,EAA0B,CAC9B,CACEhpD,GAAI,QACJG,MAAO4J,EAAE,kBACTohD,QACEtoD,EAAAA,EAAAA,KAACk9H,GAAkB,CACjBC,6BAA8Bj2H,EAC5B,mFACA,CACEg8H,yBAA0B1I,GAAsBp9H,SAKxDqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,MAAE0sD,GAAUnS,EAClB,IAAKmS,GAAOh2D,OACV,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,WACJG,MAAO4J,EAAE,yBACTohD,QACEtoD,EAAAA,EAAAA,KAAC+8H,GAAkB,CACjB/uE,YAAY,uBACZ0uE,yBAAyB,QACzBC,4BAA6Bz1H,EAAE,yDAA0D,CACvFg8H,yBAA0B1I,GAAsBp9H,SAItDqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,SAAE2uH,GAAap0E,EACrB,IAAKo0E,GAAUj4H,OACb,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,SACJG,MAAO4J,EAAE,UACTohD,QAAQtoD,EAAAA,EAAAA,KAACs7H,GAAyB,MAwCtC,OACEh2H,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,aACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,0BAA2BY,GAAI88C,EAAWgW,GAASgtC,wBAC9D,CACEtqG,MAAOk9H,GAAsBp9H,KAC7B0K,GAAI88C,EAAWgW,GAAS85B,4BAA6B,CACnDrwC,OAAQ,CAAElnD,GAAIq9H,GAAsBr9H,OAGxC,CACEG,MAAO4J,EAAE,eACTY,GAAI88C,EAAWgW,GAASonE,+BAAgC,CACtD39E,OAAQ,CAAElnD,GAAIq9H,GAAsBr9H,OAGxC,CAAEG,MAAO4J,EAAE,kBAGflH,EAAAA,EAAAA,KAACgqD,GAAU,CACT7gB,aAAck2B,GACdlZ,MAAOA,EACPznB,SA5DYxe,IAChB,MAAM,MAAEs5C,EAAK,SAAEiiE,GAAav7G,EACtB4Y,EAAwB,GAC9B,IAAK,MAAMu2C,KAAQ7V,EACjB,IAAK,MAAM9wC,KAAQ+yG,EACjB3iG,EAAM/0B,KAAK,CAAEsrE,OAAM3mD,SAGvB,OAAO,IAAIyhB,SAAeqd,IACxBkjE,EAAmB,CACjBrtH,MAAO6J,EAAE,aACT6xB,MAAOA,EAAGs2C,OAAM3mD,UAAW,GAAG2mD,EAAKlyE,MAAMurB,EAAKvrB,KAC9C27B,QACAkQ,cAAe,CACb,CAAEloB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAGusD,UAAWA,EAAKzT,UAC9C,CAAE96C,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAG4F,UAAWA,EAAKtrB,OAEhD6rC,SAAUA,EAAGomC,OAAM3mD,UACjB6mC,GAAYkC,EAAM,0BAA2B,CAC3C4d,KAAMA,EAAKlyE,GACXkgI,gBAAiB30G,EAAKvrB,GACtB4/D,aAAc,2BACdugE,UAAW9C,EAAqBr9H,KAEpC+rC,WAAYA,KACVse,GAAS,EAEXj7C,QAASA,KACPyuD,EAAaJ,GAASonE,+BAAgC,CACpD39E,OAAQ,CAAElnD,GAAIq9H,EAAqBr9H,GAAGqhB,aACtC,GAEJ,GACF,EA4BE8wB,aAAW,EACX9B,SAAUA,KACRwtB,EAAaJ,GAASonE,+BAAgC,CACpD39E,OAAQ,CAAElnD,GAAIq9H,GAAsBr9H,KACpC,MAKZ,CC3JO,SAAS4kI,KACd,MAAM19E,GAASgZ,EAAAA,GAAAA,KACTrC,EAAerW,MACbzkC,KAAMmzE,GAAyBh9B,GACrC5E,EAAM,2BACNpN,EAAOlnD,IAgBT,OAdApB,EAAAA,EAAAA,YAAU,MACJs3F,GAAsB72B,SAAkD,OAAvC62B,GAAsBjjB,eAEzDpV,EAAaJ,GAAS85B,4BAA6B,CACjDrwC,OAAQ,CAAElnD,GAAIk2F,GAAsBl2F,KAExC,GACC,CACD69D,EACAq4B,GAAsB72B,QACtB62B,GAAsBjjB,aACtBijB,GAAsBl2F,MAItB6C,EAAAA,EAAAA,KAAC0/H,GAAU,CACTzsC,QAAQ,MACR91F,GAAIknD,EAAOlnD,IAAM,GACjBsG,KAAM,uBACNg8H,cAAe7kE,GAAS2oE,8BAG9B,CC7BO,SAASvB,KACd,MAAM39E,GAASgZ,EAAAA,GAAAA,KACTrC,EAAerW,MACbzkC,KAAMmzE,GAAyBh9B,GACrC5E,EAAM,2BACNpN,EAAOlnD,IAeT,OAbApB,EAAAA,EAAAA,YAAU,MACJs3F,GAAsB72B,SAAkD,OAAvC62B,GAAsBjjB,eAEzDpV,EAAaJ,GAAS85B,4BAA6B,CACjDrwC,OAAQ,CAAElnD,GAAIk2F,GAAsBl2F,KAExC,GACC,CACD69D,EACAq4B,GAAsB72B,QACtB62B,GAAsBjjB,aACtBijB,GAAsBl2F,MAGtB6C,EAAAA,EAAAA,KAAC6/H,GAAU,CACT5sC,QAAQ,MACR91F,GAAIknD,EAAOlnD,IAAM,GACjBsG,KAAM,uBACNg8H,cAAe7kE,GAAS4oE,8BAG9B,CCjCO,SAASC,GAAWhrB,GACzB,MAAQv4F,KAAM+3C,EAAI,QAAE1C,EAAO,MAAEvoD,GAAUqpD,GAAoB5E,EAAM,SAAUgnD,EAAQj6F,YACnF,MAAO,CAAEy5C,OAAM1C,UAASvoD,QAC1B,CC+BO,SAAS02H,GAAgBr9G,GAC9B,MAAM20C,EAAerW,KAKftiB,EAAa8sC,GAAc,IAC5B9oD,EACH1f,SANgB7K,EAAAA,EAAAA,cACfm8D,GAAkB+C,EAAaJ,GAASitD,YAAa,CAAExjE,OAAQ,CAAElnD,GAAI86D,EAAK96D,OAC3E,CAAC69D,MAMGz4B,EAAoB+sC,GAAqB,CAC7CC,qBAAiB5tE,EACjB46D,aAAa,IAET4qC,EAAkB92B,GAAuBzV,GAAS82B,iBAAkB,CACxEniB,qBAAiB5tE,IAEbqlG,EA3CR,WACE,MAAM,EAAE9/F,IAAMC,EAAAA,EAAAA,MAsBd,OArBsC9C,EAAAA,EAAAA,UACpC,KAAM,CACJyc,OAAQ5Z,EAAE,YACV4b,KAAOzG,IACL,MAAMsnH,EAAqBtnH,EAAK8+C,eAAe8rC,YAAYlgG,KAAKoyE,IAAG,IAC9DA,EACHyqD,YAAa,SAGf,OAAIvnH,EAAK8+C,gBAAgB8rC,aAAe5qF,EAAK8+C,eAAe8rC,YAAYzjG,OAAS,GACxExD,EAAAA,EAAAA,KAACumG,GAAS,CAAC7rC,KAAMipE,IAEjBz8H,EAAE,wBACX,EAEFic,MAAOb,GAAkBc,SACzB0d,KAAM,SACNuC,KAAM,YAER,CAACn8B,GAGL,CAmByBggG,GAKvB,OAJqB7iG,EAAAA,EAAAA,UACnB,IAAM,CAACg+B,EAAYE,EAAmB4kE,EAAiBH,IACvD,CAAC3kE,EAAYE,EAAmB4kE,EAAiBH,GAGrD,CCnDO,SAAS68B,GAAe36F,GAC7B,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR0kC,EAAsB63F,GAAgB,CAAE7tH,cAAc,EAAM0mD,aAAa,IACzE8W,EAAyBlE,GAAc,CAAEt5D,cAAc,EAAM0mD,aAAa,IAC1EvzB,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAACgvE,IAAyB,CAACA,IACzDzT,EAAaH,KAkBnB,OAjBqBvF,IACnB0F,EAAW,CACTviE,MAAO6J,EAAE,2BAA4B,CAAEoV,MAAO49C,EAAM12D,SACpDzF,YAAamJ,EAAE,8DAA+D,CAC5EoV,MAAO49C,EAAM12D,SAEfwoC,iBAAkB9kC,EAAE,eAAgB,CAAEoV,MAAO49C,EAAM12D,SACnDs1B,MAAOohC,EAAM96D,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QACrD27B,MAAO62B,GACPtoD,UAAU,EACVukC,sBACA7C,gBACAE,aACAD,SAAUA,CAACgvB,EAAexsC,IACxBgkC,GAAcgC,EAAM,UAAUwG,EAAK96D,GAAGqhB,cAAeiN,IACvD,CAGN,CChBO,SAASq4G,GACdpC,EACAn/H,GAEA,MAAM,EAAE2E,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KAEfo/E,EAAcF,GAAenC,GAE7Br9E,GAASgZ,EAAAA,GAAAA,KAET2mE,GAAuEloI,EAAAA,EAAAA,cAC3E4S,MAAOupD,EAAM35B,KACX,MAAM2lG,QAAoBz0E,GAAsBiC,EAAM,UAAUwG,EAAK96D,GAAGqhB,cAAe,CACrF8f,YAEF/7B,EAAS0hI,EAAY,GAEvB,CAAC1hI,IAGGe,GAAUe,EAAAA,EAAAA,UACd,IAAM,CACJ,CACEZ,KAAMrJ,EAAe+H,OACrBC,UAAY4xE,GACE9sE,EAAZ8sE,EAAc,wBAA6B,wBAC7CxzE,UAAWnG,EAAoBsG,OAC/B4B,SAAUA,CAAC01D,EAAM35B,IAAY0lG,EAAiB/rE,EAAM35B,GACpD98B,WAAay2D,KAAmBA,EAAK35B,QACrChhC,MAAO4J,EAAE,gBACTxF,SAAUwF,EAAE,iBACZtF,iBAAiB,EACjB6I,UAAU,EACV1J,WAAak3D,GAAS6+D,GAAmB7+D,EAAM/wD,GAC/CzF,QAASyF,EACP,gLAGJ,CACEzD,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/B8J,UAAU,EACVvH,KAAM84D,GAAAA,GACN34D,QAASuB,EAAAA,GAAcC,QACvBvH,MAAO4J,EAAE,aACTP,QAAUsxD,IACJ5T,EAAOlnD,IAAMknD,EAAOmsB,eACtBxV,EAAaJ,GAASspE,kBAAmB,CACvC7/E,OAAQ,CAAElnD,GAAIknD,EAAOlnD,GAAIqzE,eAAgBnsB,EAAOmsB,eAAgBioC,QAASxgD,EAAK96D,MAEvEknD,EAAOlnD,GAChB69D,EAAaJ,GAASupE,SAAU,CAAE9/E,OAAQ,CAAElnD,GAAIknD,EAAOlnD,MAEvD69D,EAAaJ,GAASupE,SAAU,CAAE9/E,OAAQ,CAAElnD,GAAI86D,EAAK96D,KACvD,EAEF4D,WAAak3D,GAAS6+D,GAAmB7+D,EAAM/wD,IAEjD,CACEzD,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,eACTnG,WAAak3D,GAAkB++D,GAAqB/+D,EAAM/wD,GAC1DP,QAAUsxD,IACR8rE,EAAY,CAAC9rE,GAAM,EAErB3wD,UAAU,KAGd,CAACJ,EAAG88H,EAAkBhpE,EAAc3W,EAAOlnD,GAAIknD,EAAOmsB,eAAgBuzD,IAGxE,MAC4B,oBAA1B1/E,EAAOmsB,gBACmB,0BAA1BnsB,EAAOmsB,eAEA,GAGFltE,CACT,CChFO,SAAS8gI,KACd,MAAM3qE,EAAiBm9D,GAAsB,SACvC,IAAQzvH,EAAAA,EAAAA,MACR6zD,EAAerW,KACfN,GAASgZ,EAAAA,GAAAA,MACT,KAAEpF,EAAI,QAAE1C,EAAO,MAAEvoD,GAAUy2H,GAAWp/E,EAAOlnD,IAE7CynD,EAAaT,KAEbvjB,EAAckjG,IAAiBO,IACnCrpE,EAAaJ,GAASkoD,MAAO,CAC3Bz+D,OAAQ,CAAElnD,GAAIknD,EAAOlnD,KACrB,GACDo4D,GAEH,OAAIvoD,GAAchN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,IACpD0C,GAGH3yD,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO46D,GAAM76D,KACbgjD,YAAa,CAAC,CAAE9iD,MAAO4J,EAAE,SAAUY,GAAI88C,EAAWgW,GAASkoD,QAAU,CAAExlH,MAAO26D,GAAM76D,OACpFujD,eACE3gD,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAAS,IAAIm2D,KAAmB74B,GAChCx9B,SAAU6F,GAAAA,GAAiBC,MAC3B3I,aAAc03D,OAIpBj4D,EAAAA,EAAAA,KAAC09D,GAAc,CACbe,QAAS,CACPnhE,MAAO4J,EAAE,iBACTiuB,KAAMylC,GAASkoD,MACfpkD,oBAAqB,SAEvBvU,KAAM,CACJ,CAAE7sD,MAAO4J,EAAE,WAAYiuB,KAAMylC,GAASitD,aACtC,CAAEvqH,MAAO4J,EAAE,SAAUiuB,KAAMylC,GAAS0pE,WACpC,CAAEhnI,MAAO4J,EAAE,UAAWiuB,KAAMylC,GAAS2pE,YACrC,CAAEjnI,MAAO4J,EAAE,QAASiuB,KAAMylC,GAAS4pE,WAErCngF,OAAQ,CAAElnD,GAAI86D,EAAK96D,UA3BP6C,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,GA+BjD,CC7DO,SAASs6E,KAWd,OAPuBprC,GAAyB,CAC9CC,YAAa,QACbC,cAAe,CAAC,OAAQ,cAAe,aAAc,eACrDC,mBAAoB,CAAEp8F,KAAM,CAAEi9F,QAAS,SAAWl9F,GAAI,CAAEk9F,QAAS,UACjEZ,kBAAmB,CAPUyB,KACCC,MAO9BzB,cAAe,CAAC,0BAGpB,CCDO,SAASopB,KACd,MAAM,EAAE57G,IAAMC,EAAAA,EAAAA,MAER6zD,EAAerW,KACfv0B,EAAiBq0G,KACjBviG,EAAewhG,KACf52F,EAAO6zB,GAAoB,CAAEvc,IAAKqN,EAAM,UAAWrhC,iBAAgB8R,iBACnE42B,EAASvC,KAET5gC,ECPD,SAAgCmX,GACrC,MAAM,IAAQ3lC,EAAAA,EAAAA,MACR6zD,EAAerW,KACfo/E,EAAcF,GAAe/2F,EAAK00B,0BAElC,KAAEthD,GAAS0jD,GAA6CnS,EAAM,WAC9DizE,EAAgB1/H,QAAQkb,GAAQA,EAAK5c,SAAW4c,EAAK5c,QAAc,MAEzE,OAAOe,EAAAA,EAAAA,UACL,IAAM,CACJ,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVvH,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,eACTnG,WAAY2jI,OACR/iI,EACAuF,EACE,gIAENP,QAASA,IAAMq0D,EAAaJ,GAAS+pE,aAEvC,CACElhI,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcyD,UACvBoC,UAAU,EACVnN,MAAO4J,EAAE,mBACTnG,WAAYA,IACV+rC,GAAMzc,aAAwD,IAAzCxmB,OAAO4f,KAAKqjB,EAAKzc,aAAa7sB,OAC/C,GACA,mEACNmD,QAASA,IACPq0D,EAAaJ,GAASgqE,qBAAsB,CAC1CtgF,MAAO,IAAKxX,EAAKzc,gBAGvB,CAAE5sB,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,gBACTP,QAASo9H,EACTz8H,UAAU,EACVvG,WAAam5D,GAAqB+8D,GAAsB/8D,EAAOhzD,MAGnE,CAAC8zD,EAAc+oE,EAAaW,EAAe53F,EAAKzc,YAAanpB,GAEjE,CD7CyB29H,CAAuB/3F,GAExC3K,EAAa2hG,GAAgBh3F,EAAK00B,wBAAyB10B,EAAK5Q,aAEhE,KAAEhc,GAAS0jD,GAA6CnS,EAAM,WAC9DizE,EAAgB1/H,QAAQkb,GAAQA,EAAK5c,SAAW4c,EAAK5c,QAAc,MAEzE,OACEgC,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,SACT0U,YAAa1U,EACX,+GACA,CAAE4/G,QApBcx8E,QAsBlB2W,eAAgB/5C,EAAE,SAClB85C,UAAW,CACT95C,EACE,4NACA,CAAE4/G,QA1BYx8E,QA4BhBpjC,EACE,wQAGJg6C,aAAc2X,GAAcC,EAAQ,SACpCnY,eAAe3gD,EAAAA,EAAAA,KAACyjE,GAAkB,CAAChgE,KAAM,YAE3CzD,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,kBACHizB,eAAgBA,EAChBuF,eAAgBA,EAChBuM,aAAcA,EACdC,WAAYA,EACZ8C,gBAAiB/9B,EAAE,uBACnBg+B,gBAEMh+B,EADJw9H,EACM,qCACA,gDAERv/F,sBAEMj+B,EADJw9H,EACM,kDAEA,yFAGRn/F,sBAAsBvlC,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrCwN,qBAAsBo/F,EAAgBx9H,EAAE,oBAAiBvF,EACzD0jC,sBAAuBq/F,EAAgB,IAAM1pE,EAAaJ,GAAS+pE,iBAAchjI,KAC7EmrC,EACJ1K,gBAAiBl7B,EAAE,YAI3B,CEtEO,SAAS49H,GAAc57F,GAC5B,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR0kC,EAAsBs5E,GAAe,CAAEtvG,cAAc,EAAM0mD,aAAa,IACxEwoE,EAAyB51D,GAAc,CAAEt5D,cAAc,EAAM0mD,aAAa,IAC1EvzB,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAAC0gI,IAAyB,CAACA,IACzDnlE,EAAaH,KACblQ,EAAcyT,KACdgiE,EAAmC7rD,IAClCA,EAAIhe,gBAAgB6iC,mBAAmB1qF,OAASywG,GAAa5qC,EAAIzuC,QAC7DxjC,EAAE,6DACJ,GAEH+9H,EAA8B9rD,GAC7B4qC,GAAa5qC,EAAIzuC,QACf,GAD+BxjC,EAAE,wDAyD1C,OArD2BwzD,IACzB,MAAMwqE,EAA6CxqE,EAAKv8D,OAAO8mI,GAEzDE,EAD4BzqE,EAAKv8D,QAAQg7E,GAAQ4qC,GAAa5qC,EAAIzuC,UACJvsC,OAClE6mI,GAGFplE,EAAW,CACTviE,MAAO6J,EAAE,cAAe,CAAEoV,MAAOo+C,EAAKl3D,SACtCzF,YAAamJ,EAAE,6DAA8D,CAC3EoV,MACEo+C,EAAKl3D,OACL2hI,EAAkC3hI,OAClC0hI,EAA6B1hI,SAEjCwoC,iBAAkB9kC,EAAE,cAAe,CAAEoV,MAAOo+C,EAAKl3D,SACjDs1B,MAAO4hC,EAAKt7D,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QACpDwkB,aACEsjH,EAA6B1hI,QAAU2hI,EAAkC3hI,OACrE,IACM0hI,EAA6B1hI,OAC7B,CACE0D,EACE,kFACA,CACEoV,MAAO4oH,EAA6B1hI,UAI1C,MACA2hI,EAAkC3hI,OAClC,CACE0D,EACE,sFACA,CACEoV,MAAO6oH,EAAkC3hI,UAI/C,SAEN7B,EACNmqC,oBAAsBzvB,GACpB4oH,EAA2B5oH,GACvB4oH,EAA2B5oH,GAC3B2oH,EAAgC3oH,GACtC0c,MAAO62B,GACP/jB,sBACA7C,gBACAE,aACAD,SAAWkwC,GAAoB5pB,EAAY,GAAGu0D,GAAc3qC,EAAI11E,QAAQ01E,EAAIh8E,aAAc,CAAC,IAC3F,CAGN,CCxEO,SAASioI,GAAcl8F,GAC5B,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR0kC,EAAsBs5E,GAAe,CAAEtvG,cAAc,EAAM0mD,aAAa,IACxE8W,EAAyBlE,GAAc,CAAEt5D,cAAc,EAAM0mD,aAAa,IAC1EvzB,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAACgvE,IAAyB,CAACA,IACzDzT,EAAaH,KACb4lE,EAAmClsD,GAClCA,EAAIhe,eAAe6iC,kBAAkB3yC,QAAW04D,GAAa5qC,EAAIzuC,QAE/D,GADExjC,EAAE,4DAGPo+H,EAA8BnsD,GAC9B4qC,GAAa5qC,EAAIzuC,QAAgBxjC,EAAE,mDAChC,GAuDT,OApD2BwzD,IACzB,MAAM6qE,EAA2C7qE,EAAKv8D,OAAOmnI,GAEvDE,EAD+B9qE,EAAKv8D,QAAQg7E,IAAS4qC,GAAa5qC,EAAIzuC,UACPvsC,OACnEknI,GAGFzlE,EAAW,CACTviE,MAAO6J,EAAE,0BAA2B,CAAEoV,MAAOo+C,EAAKl3D,SAClDzF,YAAamJ,EAAE,6DAA8D,CAC3EoV,MACEo+C,EAAKl3D,OAASgiI,EAAgChiI,OAAS+hI,EAA2B/hI,SAEtFwoC,iBAAkB9kC,EAAE,cAAe,CAAEoV,MAAOo+C,EAAKl3D,SACjDs1B,MAAO4hC,EAAKt7D,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QACpDwkB,aACE2jH,EAA2B/hI,QAAUgiI,EAAgChiI,OACjE,IACM+hI,EAA2B/hI,OAC3B,CACE0D,EACE,6EACA,CACEoV,MAAOipH,EAA2B/hI,UAIxC,MACAgiI,EAAgChiI,OAChC,CACE0D,EACE,oFACA,CACEoV,MAAOkpH,EAAgChiI,UAI7C,SAEN7B,EACNmqC,oBAAsBzvB,GACpBipH,EAA2BjpH,GACvBipH,EAA2BjpH,GAC3BgpH,EAAgChpH,GACtC0c,MAAO62B,GACPtoD,UAAU,EACVukC,sBACA7C,gBACAE,aACAD,SAAUA,CAACkwC,EAAK1tD,IAAWgkC,GAAc,GAAGq0D,GAAc3qC,EAAI11E,QAAQ01E,EAAIh8E,MAAOsuB,IACjF,CAGN,CC7DO,SAASg6G,GAAeC,GAC7B,MAAMt3H,EAAerD,MACf,EAAE7D,IAAMC,EAAAA,EAAAA,MACRiO,GAAWC,EAAAA,GAAAA,MACXk6C,EAAcyT,KACdyjC,EAAkBL,KAClBprC,EAAerW,KAErB,OAAOj2C,UACL,IAAKs1G,GACH,OAAO75E,QAAQ0oE,OAAO,IAAIvuF,MAAM,4CAElC,IACE,IAAIqhH,EACJ,OAAQxsD,EAAI11E,MACV,IAAK,iBAML,IAAK,eAML,IAAK,MAIL,IAAK,mBAGL,IAAK,iBACHkiI,QAAuBt2E,GAA8B20D,GAAiB7qC,IAM1E,GACGwsD,EAA+B5yB,2BAC/B4yB,EAA+B5yB,2BAA2BvvG,OAK3D,YAHAw3D,EAAaJ,GAASgrE,kCAAmC,CACvDvhF,OAAQ,CAAElnD,GAAIg8E,EAAIh8E,GAAIglF,SAAU,cAG7B,CACL,IAAI0jD,EACJ,OAAQ1sD,EAAI11E,MACV,IAAK,iBAIL,IAAK,eAUL,IAAK,mBAGL,IAAK,iBACHoiI,QAAoBt2E,EAAYy0D,GAAiB7qC,GAAM,CAAC,GACxD,MAXF,IAAK,MACH0sD,QAAoBt2E,EAAYy0D,GAAiB7qC,GAAM,IAClDusD,IAWTtwH,EAASqxF,EAAgBo/B,GAC3B,CACF,CAAE,MAAO74H,GACPoB,EAAazD,SAAS,CACpBtH,QAAS,SACThG,MAAO6J,EAAE,0BACThH,SAAU8M,aAAiBsX,OAAStX,EAAMK,QAC1C9B,QAAS,KAEb,EAEJ,CC9FO,SAASu6H,KACd,MAAM,EAAE5+H,IAAMC,EAAAA,EAAAA,MACR0+H,EAAcJ,KACdM,EAAmBN,GAAe,CAAEvrE,MAAO,QAC3C8rE,EAAsBP,GAAe,CAAEvrE,MAAO,WACpD,OAAO71D,EAAAA,EAAAA,UACL,IAAM,CACJ,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/B0C,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVvH,KAAMixG,GAAAA,GACN72G,MAAO4J,EAAE,gBACTxG,SAAWy4E,KACM,eAAbA,EAAI11E,MAAyB01E,EAAIhe,gBAAgB6iC,mBAAmB1qF,QACtD,WAAf6lE,EAAIzuC,QAAoC,QAAbyuC,EAAI11E,KAClCkD,QAAUwyE,IAAyB0sD,EAAY1sD,EACjD,GACA,CACE11E,KAAMrJ,EAAewL,SACrBpF,UAAWnG,EAAoBsG,OAC/B8J,UAAU,EACVvH,KAAMixG,GAAAA,GACN72G,MAAO4J,EAAE,kCACTxG,SAAWy4E,KACM,eAAbA,EAAI11E,MAAyB01E,EAAIhe,gBAAgB6iC,mBAAmB1qF,OACrD,WAAf6lE,EAAIzuC,QAAoC,QAAbyuC,EAAI11E,MACnCH,QAAS,CACP,CACEG,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BrD,MAAO4J,EAAE,yBACTP,QAAUwyE,IAAyB4sD,EAAiB5sD,EACtD,GACA,CACE11E,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BrD,MAAO4J,EAAE,4BACTP,QAAUwyE,IAAyB6sD,EAAoB7sD,EACzD,OAIN,CAACjyE,EAAG6+H,EAAkBC,EAAqBH,GAE/C,CCzCO,MAAMI,GAAkBA,CAAC9sD,EAAiBjyE,IAC1C68G,GAAa5qC,EAAIzuC,QACZyuC,EAAIhe,eAAe6iC,kBAAkB1qF,MAEnC,GADHpM,EAAE,6DAF2BA,EAAE,wDCXnC,SAASg/H,GAAeplE,EAA2B,CAAC,GAgBzD,OAfuBu4B,GAAyB,CAC9CC,YAAa,eACbC,cAAe,CAAC,OAAQ,cAAe,UACvCC,mBAAoB,CAClBp8F,KAAM,CACJi9F,QAAS,eACTv5B,YAAaA,GAEf3jE,GAAI,CACFk9F,QAAS,eACTv5B,YAAaA,KAMrB,CCPO,SAASqlE,GAASrpI,GAIvB,MAAM,IAAQqK,EAAAA,EAAAA,MACRipB,EAAiB81G,GAAeppI,EAAMgkE,aAAe,CAAC,GACtD5+B,EAAeplC,EAAM+a,QACrBi1B,EAAO6zB,GAAuB,CAClCvc,IAAKqN,EAAM,iBACXrhC,iBACA8R,eACA4+B,YAAahkE,GAAOgkE,aAAe,CAAC,IAEhC3+B,ECdD,SAA0B+G,GAC/B,MAAM,IAAQ/hC,EAAAA,EAAAA,MACRi/H,EAAahB,GAAcl8F,GAC3Bm9F,EAAavB,GAAc57F,GAC3Bo9F,EAAkBR,KACxB,OAAOzhI,EAAAA,EAAAA,UAAmC,IASG,CACzC,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/B0C,QAASuB,EAAAA,GAAcyD,UACvBoC,UAAU,EACVvH,KAAM0mE,GAAAA,GACNtsE,MAAO4J,EAAE,cACTxG,SAAWy4E,GAAoBn0E,QAAQihI,GAAgB9sD,EAAKjyE,IAC5DP,QAAUwyE,GAAoBktD,EAAW,CAACltD,QAEzCmtD,EACH,CACE7iI,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAM0mE,GAAAA,GACNtsE,MAAO4J,EAAE,cACTnG,WAAao4E,GAAoB8sD,GAAgB9sD,EAAKjyE,GACtDxG,SAAWy4E,GAAoBn0E,SAASihI,GAAgB9sD,EAAKjyE,IAC7DP,QAAUwyE,GAAoBktD,EAAW,CAACltD,KAE5C,CAAE11E,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,cACTnG,WAAao4E,GAnCQA,IAClBA,EAAIhe,eAAe6iC,kBAAkB3yC,OAEjC04D,GAAa5qC,EAAIzuC,QACjBxjC,EAAE,yDACJ,GAHEA,EAAE,4DAiCwBq/H,CAAgBptD,GACjDxyE,QAAUwyE,GAAoBitD,EAAW,CAACjtD,IAC1C7xE,UAAU,KAIb,CAAC8+H,EAAYC,EAAYC,EAAiBp/H,GAC/C,CDlCqBs/H,CAAiB15F,EAAK00B,yBACnC7rC,EEnBD,SAA8BuT,GACnC,MAAM,IAAQ/hC,EAAAA,EAAAA,MACRi/H,EAAahB,GAAcl8F,GAC3Bm9F,EAAavB,GAAc57F,GAEjC,OAAO7kC,EAAAA,EAAAA,UACL,IAAM,CACJ,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAMirE,GAAAA,GACN7wE,MAAO4J,EAAE,eACTP,QAAS0/H,GAEX,CAAE5iI,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,eACTP,QAASy/H,EACT9+H,UAAU,KAGd,CAAC8+H,EAAYC,EAAYn/H,GAE7B,CFPyBu/H,CAAqB35F,EAAK00B,yBAIjD,OAFAjE,GAAqB,SAGnBv9D,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,iBACHizB,eAAgBA,EAChB8R,aAAcA,EACdC,WAAYA,EACZxM,eAAgBA,EAChBsP,gBAAiB/9B,EAAE,sBACnBg+B,gBAAiBh+B,EAAE,eACnBi+B,sBAAuBj+B,EAAE,2CACzBogC,eAAgBvP,GAAAA,MACZ+U,GAGV,CGqSO,SAAS45F,GACdC,EACAC,EACAC,EACAC,EACAj2D,EACA/rC,GAEA,MAAM,EAAE59B,IAAMC,EAAAA,EAAAA,MACRk+G,EAAuBT,KAgC7B,OA9BevgH,EAAAA,EAAAA,UACb,KAAM,CACJyc,OAAQ5Z,EAAE,eACV4b,KAAOq2D,IACL,MAAQz+E,MAAO8qH,EAAiBhxG,KAAMixG,GAAmBJ,EAAqBlsC,IAAQ,CAAC,EACvF,OAAIssC,GACKzlH,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CAACC,GAAI,GAAG29G,IAAiBvlH,SAAEslH,IAEhCA,CACT,EAEFriG,MAAOwjH,GAAerkH,GAAkBc,SACxC0d,KAAM8lG,GAAcpkH,GAAiBS,OACrCogB,KAAMwjG,GAActkH,GAAiBU,OACrC8hB,qBAAsBD,GAAe,OACrC9hB,MAAO8jH,GAAerkH,GAAkBQ,OACxCM,UAAWstD,GAAmBnuD,GAAsBO,UAEtD,CACE2jH,EACA/1D,EACA/rC,EACA+hG,EACAC,EACA5/H,EACAy/H,EACAthB,GAKN,CAiDO,SAAS0hB,GACdJ,EACAC,EACAC,EACAC,EACAj2D,EACA/rC,GAEA,MAAM,EAAE59B,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KAyBnB,OAvBe9/C,EAAAA,EAAAA,UACb,KAAM,CACJyc,OAAQ5Z,EAAE,gBACV4b,KAAOq2D,IACLn5E,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAASu4B,mBAAoB,CAC1C9uC,OAAQ,CAAElnD,GAAIg8E,EAAIhe,gBAAgB4pD,cAAc5nH,MAC/C+C,SAEFi5E,EAAIhe,gBAAgB4pD,cAAc3nH,OAGvC1C,MAAQy+E,KAAsBA,EAAIhe,gBAAgB4pD,aAClD5hG,MAAOwjH,GAAerkH,GAAkBc,SACxC0d,KAAM8lG,GAAcpkH,GAAiBS,OACrCogB,KAAMwjG,GAActkH,GAAiBU,OACrC8hB,qBAAsBD,GAAe,OACrC9hB,MAAO8jH,GAAerkH,GAAkBQ,OACxCM,UAAWstD,GAAmBnuD,GAAsBO,UAEtD,CAAC2jH,EAAY/1D,EAAiB/rC,EAAa8f,EAAYiiF,EAAYC,EAAa5/H,EAAGy/H,GAIvF,CAEO,SAASK,GACdL,EACAC,EACAC,EACAC,EACAj2D,EACA/rC,GAEA,MAAM,EAAE59B,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KA4BnB,OA1Be9/C,EAAAA,EAAAA,UACb,KAAM,CACJyc,OAAQ5Z,EAAE,uBACV4b,KAAOq2D,IACLn5E,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS8qD,WAAY,CAClCrhE,OAAQ,CACN89B,SAAU,WACVhlF,GAAIg8E,EAAIhe,eAAewqD,qBAAqBxoH,MAE7C+C,SAEFi5E,EAAIhe,eAAewqD,qBAAqBvoH,OAG7C1C,MAAQy+E,KAAsBA,EAAIhe,gBAAgBwqD,oBAClDxiG,MAAOwjH,GAAerkH,GAAkBc,SACxC0d,KAAM8lG,GAAcpkH,GAAiBS,OACrCogB,KAAMwjG,GAActkH,GAAiBU,OACrC8hB,qBAAsBD,GAAe,OACrC9hB,MAAO8jH,GAAerkH,GAAkBQ,OACxCM,UAAWstD,GAAmBnuD,GAAsBO,UAEtD,CAAC2jH,EAAY/1D,EAAiB/rC,EAAa8f,EAAYiiF,EAAYC,EAAa5/H,EAAGy/H,GAIvF,CAEO,SAASM,GACdN,EACAC,EACAC,EACAC,EACAj2D,EACA/rC,GAEA,MAAM,EAAE59B,IAAMC,EAAAA,EAAAA,MAmBd,OAjBe9C,EAAAA,EAAAA,UACb,KAAM,CACJyc,OAAQ5Z,EAAE,aACV4b,KAAOq2D,IACLn5E,EAAAA,EAAAA,KAAA,QAAAE,SAAO,GAAGi5E,EAAI2sC,kBAAoB,MAAM3sC,EAAI8I,iBAAmB,GAAGzjE,eAEpE9jB,MAAQy+E,GAAoBA,EAAI8I,gBAChC9+D,MAAOwjH,GAAerkH,GAAkBc,SACxC0d,KAAM8lG,GAAcpkH,GAAiBS,OACrCogB,KAAMwjG,GAActkH,GAAiBU,OACrC8hB,qBAAsBD,GAAe,OACrC9hB,MAAO8jH,GAAerkH,GAAkBQ,OACxCM,UAAWstD,GAAmBnuD,GAAsBO,UAEtD,CAAC2jH,EAAY/1D,EAAiB/rC,EAAa+hG,EAAYC,EAAa5/H,EAAGy/H,GAI3E,CAEO,SAASO,GACdP,EACAC,EACAC,EACAC,EACAj2D,EACA/rC,GAEA,MAAM,EAAE59B,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KA6BnB,OA3Be9/C,EAAAA,EAAAA,UACb,KAAM,CACJyc,OAAQ5Z,EAAE,yBACV4b,KAAOq2D,IACLn5E,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS85B,4BAA6B,CACnDrwC,OAAQ,CAAElnD,GAAIg8E,EAAIhe,eAAeymB,uBAAuBzkF,MACvD+C,SAEFi5E,EAAIhe,eAAeymB,uBAAuBxkF,OAG/C1C,MAAQy+E,GACO,iBAAbA,EAAI11E,OACHsgH,GAAa5qC,EAAIzuC,SACH,aAAfyuC,EAAIzuC,UACFyuC,EAAIhe,gBAAgBymB,sBACxBz+D,MAAOwjH,GAAerkH,GAAkBc,SACxC0d,KAAM8lG,GAAcpkH,GAAiBS,OACrCogB,KAAMwjG,GAActkH,GAAiBU,OACrC8hB,qBAAsBD,GAAe,OACrC9hB,MAAO8jH,GAAerkH,GAAkBQ,OACxCM,UAAWstD,GAAmBnuD,GAAsBO,UAEtD,CAAC2jH,EAAY/1D,EAAiB/rC,EAAa8f,EAAYiiF,EAAYC,EAAa5/H,EAAGy/H,GAIvF,CC5iBO,SAASQ,GAAoB9gH,GAClC,MAAM20C,EAAerW,MACf,EAAEz9C,IAAMC,EAAAA,EAAAA,MAERigI,GAAY/iI,EAAAA,EAAAA,UAChB,KAAM,CACJyc,OAAQ5Z,EAAE,MACV4b,KAAOq2D,GAAoBA,EAAIh8E,GAC/BiC,KAAM,KACN0hC,KAAM,SACNuC,KAAM,SACN9f,UAAW,SACX5T,SAAU,KAEZ,CAACzI,IAGGm/F,GAAWhiG,EAAAA,EAAAA,UACf,KAAM,CACJ+0E,eAAgB,UAChBC,iBAAkB,YAClBF,IAAK,WACLmtB,eAAgB,UAChBhtB,WAAY,aACZle,aAAc,cAEhB,IAcI/4B,EAAa8sC,GAAc,IAC5B9oD,EACH1f,SAbgB7K,EAAAA,EAAAA,cACfq9E,GACCne,EAAaJ,GAAS8qD,WAAY,CAChCrhE,OAAQ,CACNlnD,GAAIg8E,EAAIh8E,GACRglF,SAAUkkB,EAASltB,EAAI11E,UAG7B,CAAC4iG,EAAUrrC,IAMXl2B,aAAa,IAGTm3C,GAAe53E,EAAAA,EAAAA,UACnB,KAAM,CACJyc,OAAQ5Z,EAAE,UACV4b,KAAOq2D,IACEn5E,EAAAA,EAAAA,KAACosE,GAAU,CAAC1hC,OAAQyuC,EAAIzuC,SAEjCtrC,KAAM,YAER,CAAC8H,IAGGmgI,GAAkBhjI,EAAAA,EAAAA,UACtB,KAAM,CACJyc,OAAQ5Z,EAAE,WACV4b,KAAOq2D,IACEn5E,EAAAA,EAAAA,KAACqS,GAAY,CAAC3X,MAAOy+E,EAAIosC,UAElCnmH,KAAM,aAER,CAAC8H,IAGGogI,GAAmBjjI,EAAAA,EAAAA,UACvB,KAAM,CACJyc,OAAQ5Z,EAAE,YACV4b,KAAOq2D,IACEn5E,EAAAA,EAAAA,KAACqS,GAAY,CAAC3X,MAAOy+E,EAAIwtB,WAElCvnG,KAAM,WACN2lC,qBAAsB,OACtBD,aAAa,KAEf,CAAC59B,IAGGqgI,EAAmBb,KACnBv/B,EAAkB92B,GAAuBzV,GAAS82B,kBAClD81C,EAAiBP,KACjBQ,EAAoBV,KACpBW,EAAuBV,KACvBW,EAAoBj3D,GAAqB9V,GAASg3B,gBAClD6V,EAAqBy/B,KAgC3B,OA9BqB7iI,EAAAA,EAAAA,UAAoC,IAChC,CACrB+iI,EACA/kG,EACA45C,EACAorD,EACAC,EACAC,EACAE,EACAC,EACAvgC,EACAwgC,EACAlgC,EACA+/B,IAGD,CACDJ,EACA/kG,EACA45C,EACAorD,EACAC,EACAC,EACAE,EACAC,EACAvgC,EACAwgC,EACAlgC,EACA+/B,GAGJ,CCtIO,SAAShD,KACdjnE,GAAqB,eACrB,MAAMqqE,EAAcT,MACd,GAAEhqI,EAAK,KAAOkgE,EAAAA,GAAAA,KACdyD,EAAc,CAAE+mE,WAAY1qI,EAAI2qI,iBAAkB,QACxD,OAAO9nI,EAAAA,EAAAA,KAACmmI,GAAQ,CAACrlE,YAAaA,EAAajpD,QAAS+vH,GACtD,CCDO,SAASG,GAAqB7+F,GACnC,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR0kC,EAAsBs1D,GAAsB,CAAEtrF,cAAc,EAAM0mD,aAAa,IAC/E8W,EAAyBlE,GAAc,CAAEt5D,cAAc,EAAM0mD,aAAa,IAC1EvzB,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAACgvE,IAAyB,CAACA,IACzDzT,EAAaH,KAEbuoE,EAAyBz3D,GACtBA,GAAWpV,gBAAgB6iC,mBAAmB3yC,YACjD1pD,EACAuF,EAAE,mEAiCR,OA9B2BizD,IACzB,MAAM8tE,EAAyB9tE,EAAYh8D,OAAO6pI,GAClDpoE,EAAW,CACTviE,MAAO6J,EAAE,iCAAkC,CAAEoV,MAAO69C,EAAY32D,SAChEzF,YAAamJ,EAAE,oEAAqE,CAClFoV,MAAO69C,EAAY32D,OAASykI,EAAuBzkI,SAErDwoC,iBAAkB9kC,EAAE,qBAAsB,CAAEoV,MAAO69C,EAAY32D,SAC/Ds1B,MAAOqhC,EAAY/6D,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QAC3D27B,MAAO62B,GACPtoD,UAAU,EACVukC,sBACA7C,gBACAE,aACAD,SAAUA,CAACsnC,EAAsB9kD,IAC/BgkC,GAAcgC,EAAM,gBAAgB8e,EAAUpzE,GAAGqhB,cAAeiN,GAClE7J,aACEqmH,EAAuBzkI,OAAS,EAC5B,CACE0D,EACE,0FACA,CACEoV,MAAO2rH,EAAuBzkI,eAIpC7B,EACNmqC,oBAAqBk8F,GACrB,CAGN,CC3BO,SAASE,IAAoB,qBAClCC,EAAoB,kBACpBC,EAAoBA,IAAM,KAAI,OAC9B9oE,IAEA,MAAM,EAAEp4D,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACf0jF,EAAoBN,GAAqBI,GACzCG,EC5BD,SAA0Bp/F,GAC/B,MAAM,IAAQ/hC,EAAAA,EAAAA,MACRooD,EAAcyT,KACd50D,EAAerD,KAyBrB,OAvBuBwlE,IACrB,MAAM1wE,EAAoB,CACxBwD,QAAS,UACThG,MAAO6J,EAAE,GAAGqpE,EAAUnzE,gBACtBmO,QAAS,KAEXgkD,EAAYkC,EAAM,gBAAgB8e,EAAUpzE,GAAGqhB,mBAAoB,CACjEphB,KAAM,GAAGmzE,EAAUnzE,WAAU,IAAIwU,MAC9B6lH,eACA98H,QAAQ,0BAA2B,UAErC+wB,MAAK,KACJtd,EAAazD,SAAS9K,EAAM,IAE7BmP,OAAOhC,IACNoB,EAAavD,aAAahL,EAAO,CAC/BwD,QAAS,SACThG,MAAO6J,EAAE,4BACThH,SAAU8M,aAAiBsX,OAAStX,EAAMK,SAC1C,IAEH6e,QAAQgd,EAAW,CAG1B,CDDwBq/F,CAAiBH,IAEhCI,EAAaC,IAAkB/sI,EAAAA,EAAAA,eAA6BiG,IAE5D+mI,EAAkBC,IAAuBjtI,EAAAA,EAAAA,eAA8BiG,GAExE0iD,GAASgZ,EAAAA,GAAAA,KAETjvD,EAAerD,KAEf69H,GAAa9sI,EAAAA,EAAAA,cAAY4S,UAC7B,UACQ6gD,GACJkC,EAAM,sBAAsB+2E,GAAahqH,YAAc,kBACvD7c,GAEFgnI,GAAoB,EACtB,CAAE,MAAO37H,GACP,GAA0B,8CAAtBA,GAAOwR,WACT,OAGFpQ,EAAazD,SAAS,CACpBtH,QAAS,SACThG,MAAO6J,EAAE,qCACThH,SAAU8M,aAAiBsX,OAAStX,EAAMK,QAC1C9B,QAAS,KAEb,IACC,CAAC6C,EAAclH,EAAGshI,IAEfK,GAAY/sI,EAAAA,EAAAA,cAChB4S,UACE,IACE,MAAMm/C,QAAiB0B,GACrBkC,EAAM,sBAAsB8e,EAAU12C,QAAQ18B,GAAGqhB,YAAc,aAC/D,CAAC,GAEHiqH,EAAe56E,EAASwrB,kBACxBsvD,GAAoB,EACtB,CAAE,MAAO37H,GACPoB,EAAazD,SAAS,CACpBtH,QAAS,SACThG,MAAO6J,EAAE,qCACThH,SAAU8M,aAAiBsX,OAAStX,EAAMK,QAC1C9B,QAAS,KAEb,IAEF,CAAC6C,EAAclH,IAGjB,OAAO7C,EAAAA,EAAAA,UAA4C,KACjD,MAoBMykI,EAAuBv4D,GAC3BA,GAAW12C,QAAQshC,gBAAgB6iC,mBAAmB1qF,MAClD,GACApM,EAAE,iEAEF6hI,EAAmC,CACvC,GAAI,YACJ/3D,MAAO,kBACPC,YAAa,yBAGf,MAAO,CACL,CACExtE,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAM84D,GAAAA,GACN34D,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVnN,MAAO4J,EAAE,kBACTnG,WAAawvE,GAlCYA,IAC3BA,GAAWpV,gBAAgB6iC,mBAAmB5G,KAC1C,GACAlwF,EAAE,iEA+BkC8hI,CAAoBz4D,GAC1D5pE,QAAU4pE,GACRvV,EAAaJ,GAASquE,cAAe,CACnC5kF,OAAQ,CAAEmsB,eAAgBu4D,EAAMx4D,EAAUzB,MAAO3xE,GAAIozE,EAAUpzE,OAGrE,CACEsG,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAM22C,GAAAA,GACNv8C,MAAO4J,EAAE,kBACTnG,WAAawvE,GAxCYA,IACtBA,GAAWpV,gBAAgB6iC,mBAAmBm5B,KAExC5mD,GAAW+wB,sBACbp6F,EAAE,6CAEF,GAJAA,EAAE,iEAsC6BgiI,CAAoB34D,GAC1D5pE,QAAU4pE,GAAyB+3D,EAAc/3D,IAEnD,CACE9sE,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMi6D,GAAAA,GACN1yD,UAAU,EACVnN,MAAO4J,EAAE,kBACTnG,WAAawvE,GAAmCu4D,EAAoBv4D,GACpE5pE,QAAU4pE,GAAmCs4D,EAAUt4D,GACvD7vE,SAAW6vE,KAEmB,0BAA1BlsB,EAAOmsB,iBACI,IAAXlR,KAC8B,IAA7B6pE,GAAc54D,KAA4C,IAArBm4D,KAG5C,CACEjlI,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMi6D,GAAAA,GACN1yD,UAAU,EACVnN,MAAO4J,EAAE,eACTnG,WAAawvE,GAAmCu4D,EAAoBv4D,GACpE5pE,QAASA,IAAMiiI,IACfloI,SAAW6vE,KAEmB,0BAA1BlsB,EAAOmsB,iBACI,IAAXlR,IAC6B,IAA7B6pE,GAAc54D,SACE5uE,IAAhB6mI,IACqB,IAArBE,IAGN,CAAEjlI,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,oBACTnG,WAAawvE,GA3FcA,IAC7BA,GAAWpV,gBAAgB6iC,mBAAmB3yC,OAC1C,GACAnkD,EAAE,kEAwFkC8gI,CAAsBz3D,GAC5D5pE,QAAU4pE,GAAyB83D,EAAkB,CAAC93D,IACtDjpE,UAAU,GAEb,GACA,CACD+gI,EACAC,EACAttE,EACA9zD,EACAm9C,EAAOmsB,eACPlR,EACAspE,EACAC,EACAH,EACAF,GAEJ,CAEA,SAASW,GAAc54D,GACrB,MAAM64D,EACJ74D,GAAW12C,QAAQshC,gBAAgBoqC,aACnCh1B,GAAW12C,QAAQshC,gBAAgB4/B,eACnCp5F,EAEF,IAAI0nI,EACJ,GAAID,EAAwB,CAC1B,MAAM1+F,EAAS0+F,EAAuB1+F,OACtC2+F,EACa,YAAX3+F,GAAmC,YAAXA,GAAmC,YAAXA,CACpD,CAEA,OAAO2+F,CACT,CE1LO,SAASC,KACd,MAAM,EAAEpiI,IAAMC,EAAAA,EAAAA,MACRsyD,EAAiBm9D,GAAsB,aACvCvyE,GAASgZ,EAAAA,GAAAA,KAETksE,EACsB,0BAA1BllF,EAAOmsB,eAA6C,0BAA4B,cAE5En5C,GAAWsmC,EAAAA,GAAAA,MAEXisD,EADoBzlE,IACVqlF,CAAkB5uE,GAAS82B,iBAAkB,CAC3DrtC,OAAQ,CAAEmsB,eAAgBnsB,EAAOmsB,eAAgBrzE,GAAIknD,EAAOlnD,MAExDmiE,EAASjoC,EAASgsB,WAAaumE,EAE/B6f,EAAmBxzE,GAA4BxE,EAAM,IAAI83E,KAAWllF,EAAOlnD,IAAM,OACjFusI,EAAgBD,GAAkBvpH,KAMlCypH,EAAyB1zE,GAJL,gBAAxByzE,GAAe56D,OAAqC,IAAXxP,EACrC7N,EAAM,gBAAgBpN,EAAOlnD,IAAM,wBACnC,IAGAysI,EAAsBD,EAAuBzpH,MAAMgyC,QAAQ,GAE3Dqe,GAAYlsE,EAAAA,EAAAA,UAAyC,IACrDqlI,EACK,IAAKA,EAAe7vG,OAAQ+vG,QAEnC,GAED,CAACF,EAAeE,IAEbr0E,EAAUo0E,EAAuBp0E,QAmBvC8C,GACE,CAAE3nB,QAAS,CAAC,mBAAoBgqB,KAAM,CAAC,oBAlBV5+D,EAAAA,EAAAA,cAC5BuR,IACC,GACO,SADCA,GAAS4tD,WAEb,OAAQ5tD,GAAS5J,MACf,IAAK,MACL,IAAK,eACL,IAAK,iBACL,IAAK,mBACE8xD,IAIb,GAEF,CAACA,KAOH,MAAMyF,EAAerW,KAEf/jB,EAAcsnG,GAAoB,CACtCC,qBAAsBA,IAAMntE,EAAaJ,GAASooD,aAClD1jD,WAEI1a,EAAaT,KACb0lF,EAAuC,UAApBt5D,GAAWzB,KAC9Bg7D,EAA6C,gBAApBv5D,GAAWzB,KAE1C,OAAI66D,EAAuB38H,OAClBhN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAO28H,EAAuB38H,QAG7Cy8H,EAAiBz8H,OACZhN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOy8H,EAAiBz8H,SAIxCy8H,EAAiBvpH,OAChBypH,EAAuBzpH,MACG,0BAA1BmkC,EAAOmsB,iBACI,IAAXlR,GAEKt/D,EAAAA,EAAAA,KAACkqD,GAAW,KAInB5kD,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAOkzE,GAAWnzE,KAClBgjD,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,eAAgBY,GAAI88C,EAAWgW,GAASooD,cACnD,CAAE1lH,MAAOizE,GAAWnzE,OAEtBujD,eACE3gD,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAAS,IAAIm2D,KAAmB74B,GAChCx9B,SAAU6F,GAAAA,GAAiBC,MAC3B3I,aAAcgwE,OAIpBvwE,EAAAA,EAAAA,KAAC09D,GAAc,CACbe,QAAS,CACPnhE,MAAO4J,EAAE,uBACTiuB,KAAMylC,GAASooD,YACftkD,oBAAqB,eAEvBvU,KAAM,CACJ,CAAE7sD,MAAO4J,EAAE,WAAYiuB,KAAMylC,GAAS82B,kBACtC,CAAEp0F,MAAO4J,EAAE,eAAgBiuB,KAAMylC,GAASmvE,qBAC1C,CAAEzsI,MAAO4J,EAAE,eAAgBiuB,KAAMylC,GAASovE,sBACzCH,GAAoB,CAAEvsI,MAAO4J,EAAE,UAAWiuB,KAAMylC,GAASqvE,iBAC1D,CAAE3sI,MAAO4J,EAAE,SAAUiuB,KAAMylC,GAASsvE,iBACnCL,IACEC,GAA0B,CAAExsI,MAAO4J,EAAE,WAAYiuB,KAAMylC,GAASuvE,kBACnE,CAAE7sI,MAAO4J,EAAE,QAASiuB,KAAMylC,GAASwvE,eACnC,CAAE9sI,MAAO4J,EAAE,iBAAkBiuB,KAAMylC,GAASyvE,wBAE9ChmF,OAAQA,EACR+a,gBAAiB,CAAEmR,iBAI3B,CAEO,SAAS+5D,GAAgBntI,EAAaqzE,GAC3C,MAAM9yB,EACe,0BAAnB8yB,EAA6C,0BAA4B,eACnEtwD,KAAMi5D,GAAQljB,GAAkB94D,EAAKs0D,EAAM,IAAI/T,KAAQvgD,KAAQ,IACvE,OAAOg8E,CACT,CCzHO,SAASwrD,KACd,MAAOj7G,EAAW6gH,IAAgB7uI,EAAAA,EAAAA,UAAS,KACrC,EAAEwL,IAAMC,EAAAA,EAAAA,MACRiO,GAAWC,EAAAA,GAAAA,MACX2lD,EAAerW,KACfC,EAAaT,KACbE,EAASmmF,GAAc,UAEvBj7E,EAAcyT,KACd7M,EAAaC,MAEnBr6D,EAAAA,EAAAA,YAAU,KAUH,iBATL2S,iBACE,GAAI21C,GAAQomF,SAAU,CACpB,MAAM/sH,QAAcy4C,EAAW1E,EAAM,WAAWpN,GAAQomF,aACpD/sH,GAAOtgB,MACTmtI,EAAa7sH,EAAMtgB,KAEvB,CACF,CAGQstI,EACP,EAFI,EAED,GACH,CAACv0E,EAAY9R,GAAQomF,WAExB,MAmBME,EAAoBL,GAAgBjmF,EAAOlnD,GAAIknD,EAAOmsB,gBAE5D,IAAIpwB,EAAoC,GAyDxC,OAtDEA,EADEiE,EAAOumF,eACK,CACZ,CAAEttI,MAAO4J,EAAE,eAAgBY,GAAI88C,EAAWgW,GAASooD,cACnD,CACE1lH,MAAO4J,EAAE,GAAGyjI,GAAmBvtI,QAC/B0K,GAAI88C,EAAWgW,GAAS82B,iBAAkB,CACxCrtC,OAAQ,CAAElnD,GAAIknD,EAAOlnD,GAAIqzE,eAAgBnsB,EAAOmsB,mBAGpDnsB,GAAQomF,SACJ,CACEntI,MAAO4J,EAAE,UACT/J,GAAI,QACJ2K,GAAI88C,EAAWgW,GAASqvE,gBAAiB,CACvC5lF,OAAQ,CACNlnD,GAAIknD,EAAOomF,SACXj6D,eAAgBnsB,EAAOmsB,mBAI7B,CACElzE,MAAO4J,EAAE,SACT/J,GAAI,QACJ2K,GAAI88C,EAAWgW,GAASsvE,eAAgB,CACtC7lF,OAAQ,CACNlnD,GAAIknD,EAAOlnD,GACXqzE,eAAgBnsB,EAAOmsB,eACvBioC,QAASp0D,EAAOo0D,YAI1Bp0D,GAAQomF,SACJ,CACEntI,MAAO4J,EAAE,GAAGwiB,KACZ5hB,GAAI88C,EAAWgW,GAASiwE,sBAAuB,CAC7CxmF,OAAQ,CACNlnD,GAAIknD,EAAOomF,SACXj6D,eAAgBnsB,EAAOmsB,eACvBi6D,SAAUpmF,EAAOomF,aAIvB,CAAC,EACL,CAAEntI,MAAO4J,EAAE,iBAGC,CACZ,CACE5J,MAAO4J,EAAE,SACTY,GAAI88C,EAAWgW,GAASkoD,QAE1B,CAAExlH,MAAO4J,EAAE,kBAKb5B,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CAACL,YAAaA,EAAa/iD,MAAO6J,EAAE,kBAC/ClH,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,eACdw3B,SAnF8ChwB,UAClD,MAAM4uG,EAAej5D,EAAOlnD,IAAM2tI,EAAUv6D,WAAWpzE,GAEjD4tI,EAAoB,IAAKD,EAAWv6D,UAAW/1E,OAAO8iH,IACtD0tB,EAAU3mF,GAAQomF,eACdl7E,EAAYkC,EAAM,WAAWpN,EAAOomF,kBAAmBM,SACvDx7E,EAAYkC,EAAM,UAAWs5E,GAEnC1mF,EAAOumF,eACT5vE,EAAaJ,GAASqwE,qBAAsB,CAC1C5mF,OAAQ,CAAEmsB,eAAgBnsB,EAAOmsB,eAAgBrzE,GAAImgH,EAAc7E,QAASuyB,EAAQ7tI,MAGtF69D,EAAaJ,GAASitD,YAAa,CAAExjE,OAAQ,CAAElnD,GAAI6tI,EAAQ7tI,KAC7D,EAsEIM,WAAYyJ,EAAE,UACdsmC,SApEWA,IAAMp4B,GAAU,GAqE3BwY,aAAc,CACZxwB,KAAM,GACNwe,YAAa,GACbk4E,UAAW,SACX5zF,UAEFF,EAAAA,EAAAA,KAACkrI,GAAU,CAACC,WAAW,EAAOP,eAAgBvmF,EAAOumF,qBAI7D,CAEA,SAASJ,GAAcvH,GAOrB,MAAM5+E,GAASgZ,EAAAA,GAAAA,KAOf,IAAIlgE,EAAKknD,EAAOlnD,GACZs7G,EAAUp0D,EAAOo0D,QAEjBmyB,GAAiB,EAWrB,OATKnyB,GAAoB,SAATwqB,IACdxqB,EAAUt7G,EACVA,OAAKwE,GAGHxE,IACFytI,GAAiB,GAGZ,CACLztI,KACAs7G,UACAjoC,eAAgBnsB,EAAOmsB,eACvBi6D,SAAUpmF,EAAOomF,SACjBG,iBAEJ,CAEO,SAASzG,KACd,MAAM,EAAEj9H,IAAMC,EAAAA,EAAAA,MACRiO,GAAWC,EAAAA,GAAAA,MACX2lD,EAAerW,KACfC,EAAaT,KACbE,EAASmmF,GAAc,SAErBvyE,KAAMmzE,GAAiB3H,GAAWp/E,EAAOo0D,SAAW,KAErDxgD,EAAMozE,IAAW3vI,EAAAA,EAAAA,UAA8B0vI,GAkBtD,IAhBArvI,EAAAA,EAAAA,YAAU,IAAMsvI,EAAQD,IAAe,CAACA,KAgBnCnzE,EACH,OACEj4D,EAAAA,EAAAA,KAACmhD,GAAU,CAAAjhD,UACTF,EAAAA,EAAAA,KAACygD,GAAU,MAKjB,MAAM7yB,EAAoC,CACxCxwB,KAAM66D,EAAK76D,KACXwe,YAAaq8C,EAAKr8C,YAClBk4E,UAAW77B,EAAK67B,UAChBvjB,UAAW,CAAEnzE,KAAM66D,EAAKkD,gBAAgBoV,WAAWnzE,OAGrD,IAAIgjD,EAAoC,GAiCxC,OA9BEA,EADEiE,EAAOumF,eACK,CACZ,CAAEttI,MAAO4J,EAAE,eAAgBY,GAAI88C,EAAWgW,GAASooD,cACnD,CACE1lH,MAAO4J,EAAE,GAAGkkI,GAAcjwE,gBAAgBoV,WAAWnzE,QACrD0K,GAAI88C,EAAWgW,GAAS82B,iBAAkB,CACxCrtC,OAAQ,CAAElnD,GAAIknD,EAAOlnD,GAAIqzE,eAAgBnsB,EAAOmsB,mBAGpD,CACElzE,MAAO4J,EAAE,SACTY,GAAI88C,EAAWgW,GAASsvE,eAAgB,CACtC7lF,OAAQ,CACNlnD,GAAIknD,EAAOlnD,GACXqzE,eAAgBnsB,EAAOmsB,eACvBioC,QAASp0D,EAAOo0D,YAItB,CAAEn7G,MAAO4J,EAAE,oBAAqB,CAAEokI,SAAUrzE,GAAM76D,SAGtC,CACZ,CACEE,MAAO4J,EAAE,SACTY,GAAI88C,EAAWgW,GAASkoD,QAE1B,CAAExlH,MAAO4J,EAAE,oBAAqB,CAAEokI,SAAUrzE,GAAM76D,UAKpDkI,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTL,YAAaA,EACb/iD,MAAO6J,EAAE,oBAAqB,CAAEokI,SAAUrzE,GAAM76D,UAElD4C,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,aACdw3B,SAtE8ChwB,gBAC5C8gD,GAAsBiC,EAAM,UAAUpN,EAAOo0D,SAAW,MAAOqyB,GAEjEzmF,EAAOumF,eACT5vE,EAAaJ,GAASqwE,qBAAsB,CAC1C5mF,OAAQ,CAAEmsB,eAAgBnsB,EAAOmsB,eAAgBrzE,GAAIknD,EAAOlnD,GAAIs7G,QAASp0D,EAAOo0D,WAGlFz9C,EAAaJ,GAASitD,YAAa,CAAExjE,OAAQ,CAAElnD,GAAIknD,EAAOo0D,UAC5D,EA8DIh7G,WAAYyJ,EAAE,UACdsmC,SA5DWA,IAAMp4B,GAAU,GA6D3BwY,aAAcA,EAAa1tB,UAE3BF,EAAAA,EAAAA,KAACkrI,GAAU,CAACC,WAAW,EAAMP,eAAgBvmF,EAAOumF,qBAI5D,CAEA,SAASM,GAAWpuI,GAClB,MAAM,IAAQqK,EAAAA,EAAAA,MAEd,OACE7B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,OACLE,MAAO4J,EAAE,QACTkf,YAAalf,EAAE,gBACf8lB,YAAU,EACVkuB,UAAW,OAEbl7C,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,cACLE,MAAO4J,EAAE,eACTkf,YAAalf,EAAE,0BAEfpK,EAAM8tI,gBAAkB9tI,EAAMquI,YAC9BnrI,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,iBACLE,MAAO4J,EAAE,aACTnG,YAAY,EACZowC,UAAWjqC,EAAE,+CAGfpK,EAAM8tI,iBAAmB9tI,EAAMquI,YAC/BnrI,EAAAA,EAAAA,KAAC+hG,GAAuB,CACtB3kG,KAAK,eACL4vB,YAAU,EACVmkB,UAAWjqC,EAAE,0DAGjBlH,EAAAA,EAAAA,KAAC+lE,GAAe,CAAC12B,cAAY,EAAAnvC,UAC3BF,EAAAA,EAAAA,KAACm4C,GAAkB,CAAa1lC,OAAO,OAAOrV,KAAK,YAAYE,MAAO4J,EAAE,mBAIhF,CCpTA,SAASqkI,KACP,MAAMlnF,GAASgZ,EAAAA,GAAAA,KAEf,IAAIlgE,EAAKknD,EAAOlnD,GACZs7G,EAAUp0D,EAAOo0D,QAQrB,OANKA,IAEHA,EAAUt7G,EACVA,OAAKwE,GAGA,CAAExE,KAAIs7G,UAASjoC,eAAgBnsB,EAAOmsB,eAC/C,CAEO,SAASy6D,KACd,MAAM5mF,EAASknF,MACT,KAAEtzE,GAASwrE,GAAWp/E,EAAOo0D,SAEnC,OAAKxgD,GAIEj4D,EAAAA,EAAAA,KAACwrI,GAAyB,CAACvzE,KAAMA,IAH/B,IAIX,CAQO,SAASuzE,GAA0B1uI,GACxC,MAAM,IAAQqK,EAAAA,EAAAA,MACR6zD,EAAerW,KACfC,EAAaT,KACbE,EAASknF,KAETtzE,EAAOn7D,EAAMm7D,KAEb0rE,EAAqB1rE,EAAKkD,eAAe8rC,YAAYlgG,KAAKoyE,IAAG,IAC9DA,EACHyqD,YAAa,SAGf,OACEt+H,EAAAA,EAAAA,MAACoc,GAAW,CAAAxhB,SAAA,EACVF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,QAAQhH,SAAE+3D,EAAK76D,OACnCumI,EAAmBngI,OAAS,IAC3BxD,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,YAAYhH,UAC/BF,EAAAA,EAAAA,KAACumG,GAAS,CAAC7rC,KAAMipE,OAGrB3jI,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,eAAehH,SAAE+3D,EAAKr8C,eAC3C5b,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,aAAcia,SAAUja,EAAE,4CAA4ChH,UACzFF,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAMwpD,EAAKkD,gBAAgBoV,WAAWnzE,KACtC0K,GAAI88C,EAAWgW,GAAS82B,iBAAkB,CACxCrtC,OAAQ,CACNlnD,GAAI86D,EAAKkD,gBAAgBoV,WAAWpzE,GACpCqzE,gBAlCe1B,EAkCqB7W,EAAKkD,gBAAgBoV,WAAWzB,KAjCnE,UAATA,EAAyB,kBAChB,gBAATA,EAA+B,wBAC5B,qBAoCyB,0BAA1BzqB,EAAOmsB,gBACmB,oBAA1BnsB,EAAOmsB,kBACPxwE,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,WAAWhH,UAC9BF,EAAAA,EAAAA,KAACmV,GAAQ,CAAC1G,KAAMwpD,EAAK35B,QAAU,KAAO,WAG1Ct+B,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,WAAWhH,UAC9BF,EAAAA,EAAAA,KAACqS,GAAY,CACX3X,MAAOu9D,EAAKoD,QACZ/oD,OAAQ2lD,EAAKkD,gBAAgByU,YAAYhU,SACzCj1D,QAASA,IACPq0D,EAAaJ,GAASiB,YAAa,CACjCxX,OAAQ,CAAElnD,GAAI86D,EAAKkD,gBAAgByU,YAAYzyE,WAKvD6C,EAAAA,EAAAA,KAACmsE,GAAsB,CACrBzxE,MAAOu9D,EAAK8X,SACZz9D,OAAQ2lD,EAAKkD,gBAAgB8U,aAAarU,SAC1Cj1D,QAASA,IACPq0D,EAAaJ,GAASiB,YAAa,CACjCxX,OAAQ,CAAElnD,GAAI86D,EAAKkD,gBAAgB8U,aAAa9yE,SAItD6C,EAAAA,EAAAA,KAACo2E,GAAoB,CACnB94E,MAAO4J,EAAE,aACTmvE,qBAAmB,EACnB37E,MAAOu9D,EAAK67B,WAAa,WApEjC,IAA6BhlB,CAwE7B,CC9GO,SAAS28D,GAAsBrnF,GAgBpC,OAbuBi1C,GAAyB,CAC9CC,YAAal1C,GAAY,SACzBo1C,mBAAoB,CAClBp8F,KAAM,CACJi9F,QAASj2C,GAAY,UAEvBjnD,GAAI,CACFk9F,QAASj2C,GAAY,WAGzBm1C,cAAe,CAAC,OAAQ,KAAM,cAAe,aAAc,eAC3DE,kBAAmB,CAbUyB,KACCC,OAelC,CChBO,SAASuwC,GAAsBrlH,GAKpC,MAAM20C,EAAerW,KACfN,GAASgZ,EAAAA,GAAAA,KAETgV,GAAYv2E,EAAAA,EAAAA,cACf4hB,IACCs9C,EAAaJ,GAASiwE,sBAAuB,CAC3CxmF,OAAQ,CACNlnD,IAAmC,IAA/BkpB,GAASslH,kBAA6BjuH,EAAMy9C,eAAeoV,UAAUpzE,GAAKknD,EAAOlnD,GACrFstI,SAAU/sH,EAAMvgB,GAChBqzE,gBACiC,IAA/BnqD,GAASslH,kBACLC,GAAoBluH,EAAMy9C,eAAeoV,UAAUzB,MACnDzqB,EAAOmsB,iBAEf,GAEJ,CAACxV,EAAc3W,EAAOlnD,GAAIknD,EAAOmsB,eAAgBnqD,GAASslH,oBAEtDtpG,EAAa8sC,GAAc,IAC5B9oD,EACH1f,QAAS0rE,IAKX,OAFqBhuE,EAAAA,EAAAA,UAAwC,IAAM,CAACg+B,IAAa,CAACA,GAGpF,CAEA,SAASupG,GAAoB98D,GAC3B,IAAI0B,EAAiB,GAcrB,MAZa,KAAT1B,IACF0B,EAAiB,aAGN,UAAT1B,IACF0B,EAAiB,mBAGN,gBAAT1B,IACF0B,EAAiB,yBAGZA,CACT,CCzCO,SAASq7D,GAA4B/uI,GAK1C,MAAMszB,EAAiBq7G,GAAsB,eAAe3uI,EAAM64F,aAAe,aAC3EzzD,EAAewpG,GAAsB,CAAE71H,cAAc,IAErDi3B,EAAO6zB,GAA2B,CACtCvc,IAAKqN,EAAM,gBAAgB30D,EAAM64F,aAAe,aAChD70B,YAAa,CAAEgrE,WAAYhvI,EAAMivI,QAAU,IAC3C37G,iBACA8R,iBAGF,OACEliC,EAAAA,EAAAA,KAACitC,GAAiB,CAChB5vC,OAAO6J,EAAAA,GAAAA,GAAE,iBACTkpB,eAAgBA,EAChB8R,aAAcA,EACdp8B,SAAUhJ,EAAMkvI,MAChB/mG,iBAAiB/9B,EAAAA,GAAAA,GAAE,qCACnBg+B,iBAAiBh+B,EAAAA,GAAAA,GAAE,sCACnB4lC,KAAMA,GAGZ,CAEO,SAASm/F,KACd,MAAOn/H,EAAG8rB,GAAaD,MAChB77B,EAAOsuC,IAAY1vC,EAAAA,EAAAA,YAQ1B,OAPAK,EAAAA,EAAAA,YAAU,KAEN68B,EADE97B,GACQkD,EAAAA,EAAAA,KAAC6rI,GAA2B,IAAK/uI,SAEjC6E,EACZ,GACC,CAAC7E,EAAO87B,IACJwS,CACT,CC7CO,SAAS8gG,GACdhjG,EACA6iG,GAEA,MAAM,EAAE7kI,IAAMC,EAAAA,EAAAA,MACRglI,EAAsBh9D,GAAc,CAAEt5D,cAAc,EAAM0mD,aAAa,IACvEvzB,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAAC8nI,IAAsB,CAACA,IACtDvsE,EAAa4qD,KAoBnB,OAnB+B/sG,IAC7BmiD,EAAW,CACTviE,MAAO6J,EAAE,qBAAsB,CAAEoV,MAAOmB,EAAOja,SAC/Cs1B,MAAOrb,EAAOre,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QACtD27B,MAAO62B,GACP5mB,gBACAE,aACAD,SAAUv6B,MAAOgP,EAAuB+N,WAChC8jC,GACJkC,EAAM,UAAUs6E,GAAU,aAC1B,CACE5uI,GAAIugB,EAAMvgB,IAEZsuB,EACD,EAEHzsB,eAAgBkI,EAAE,0BAA2B,CAAEoV,MAAOmB,EAAOja,UAC7D,CAGN,C,eCpBA,SAAS4oI,GAAmBtvI,GAK1B,MAAM,IAAQqK,EAAAA,EAAAA,OACPklI,EAAYC,IAAiB5wI,EAAAA,EAAAA,UAAS,IACvC6zD,EAAcyT,KACdiF,EAAgBH,MAEfykE,EAAeC,IAAoB9wI,EAAAA,EAAAA,UAA2B,KAC9DsR,EAAO08B,IAAYhuC,EAAAA,EAAAA,UAAS,IA6CnC,OACEsE,EAAAA,EAAAA,KAAC++B,GAAAA,EAAK,CACJ0L,iBAAiB,SACjBptC,MAAO6J,EAAE,gBACT7D,QAAS27B,GAAAA,EAAaiB,MACtBrkB,YAAa1U,EAAE,qDACfrB,QAAM,EACN0G,QAASzP,EAAMyP,QACf,UAAQ,uBACRjJ,QAAS,EACPtD,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACL,UAAQ,mCACRkD,OAAO,mCAEPpF,QAAQ,SACRsD,QAASA,KA1DI+H,WACnB,MAAM+9H,EAA2C,GAC3CC,EAAiC,GAEvChjG,EAAS,IAET,IAAK,MAAMhsB,KAAS5gB,EAAM2gB,OACxB,IAAI8uH,EAAchkI,SAASmV,GAI3B,IACqB,WAAf2uH,QACIpkE,EAAcxW,EAAM,WAAW/zC,EAAMvgB,GAAGqhB,qBAExC+wC,EAAYkC,EAAM,gBAAgB/zC,EAAM6yD,UAAU/xD,qBAAsB,CAC5ErhB,GAAIugB,EAAMvgB,GACV6mF,cAAc,IAGlByoD,EAAuB1oI,KAAK2Z,EAC9B,CAAE,MAAOivH,GACPD,EAAa3oI,KAAK2Z,EACpB,CAGF,IAAIkvH,EAAW,GACfJ,EAAiBC,GACbC,EAAalpI,OAAS,GACxBopI,EAAW1lI,EAAE,qCACbwlI,EAAatzG,SAAQ,CAACyzG,EAAa7lI,KACnB,IAAVA,IACF4lI,GAAY,MAEdA,GAAYC,EAAYzvI,IAAI,IAE9BssC,EAASkjG,KAET9vI,EAAM4kI,WACN5kI,EAAMyP,UACR,EAkB0BugI,EAAe,EACnC/rI,WAA2B,KAAfsrI,EACZ,aAAYnlI,CAAC,iBAAiBhH,SAE7BgH,EAAE,WANC,WAQNlH,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLkD,OAAO,mCAEPpF,QAAQ,OACRsD,QAAS7J,EAAMyP,QAAQrM,SAEtBgH,EAAE,WAJC,WAMNhH,UAEFoF,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACi4C,GAAAA,EAAU,CAACvxC,UAAU,gBAAgB,UAAQ,6BAA4BxG,SACvEpD,EAAM2gB,OAAO1W,KAAK2W,IACjB1d,EAAAA,EAAAA,KAACk4C,GAAAA,EAAc,CAAC70C,QAAQ,QAAOnD,SAC5Bwd,EAAMtgB,MAD4BsgB,EAAMtgB,WAK/C4C,EAAAA,EAAAA,KAAC+sI,GAAAA,EAAK,CACJ,UAAQ,oCACRxrI,UAA0B,WAAf8qI,EACXjvI,KAAK,qBACLkF,SAAUA,KACRgqI,EAAc,SAAS,EAEzBhvI,MAAO4J,EAAE,+BACT/J,GAAG,wBAEL6C,EAAAA,EAAAA,KAAC+sI,GAAAA,EAAK,CACJ,UAAQ,qCACRxrI,UAA0B,YAAf8qI,EACXjvI,KAAK,sBACLkF,SAAUA,KACRgqI,EAAc,UAAU,EAE1BhvI,MAAO4J,EAAE,kCACT/J,GAAG,wBAEJ6P,IAAShN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAO,IAAIsX,MAAMtX,SAI7C,CAEO,SAASggI,GAAgBtL,GAC9B,MAAO50H,EAAG8rB,GAAaD,KACjBpsB,EAAUA,IAAMqsB,OAAUj3B,GAIhC,OAHsB8b,IACpBmb,GAAU54B,EAAAA,EAAAA,KAACosI,GAAkB,CAAC3uH,OAAQA,EAAQlR,QAASA,EAASm1H,SAAUA,IAAa,CAG3F,CC5CO,SAASuL,GACd5oF,EAMAh+B,GAEA,MAAM20C,EAAerW,MACf,EAAEz9C,IAAMC,EAAAA,EAAAA,MAER+lI,EAAetpE,GACnBnS,EAAM,gBAAgBpN,EAAOlnD,IAAM,uBACnC+iB,KACIitH,EAAqBnoI,QACzBkoI,GAAgBA,EAAa5pI,SAAW4pI,EAAa5pI,QAAc,MAG/DqD,GAAU7K,EAAAA,EAAAA,cACbgF,IACC,MAAMkpC,EAAQlpC,EAAciG,KAAKsV,GAASA,EAAKjf,OAAMqK,KAAK,MACpD68C,EAA8C,CAAC,EAEjDta,EAAMxmC,OAAS,KACbwmC,IACFsa,EAAMta,MAAQA,IAGhBsa,EAAM8oF,QAAU,OAChBl9H,aAAac,QAAQ,gCAAiCg5B,IAGxDgxB,EAAaJ,GAASyyE,oBAAqB,CACzChpF,OAAQ,CAAEmsB,eAAgBnsB,EAAOmsB,eAAgBrzE,GAAIknD,EAAOlnD,IAC5DmnD,SACA,GAEJ,CAAC0W,EAAc3W,EAAOmsB,eAAgBnsB,EAAOlnD,KAGzC4D,GAAajF,EAAAA,EAAAA,cAAY,IACtBqxI,OACHxrI,EACAuF,EACE,+IAEL,CAACimI,EAAoBjmI,IAElB+uB,GAAgB5xB,EAAAA,EAAAA,UAAwB,KACrC,CACLZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcyD,UACvBoC,cAAgC9I,IAAtB0kB,GAAS5b,UAAyB4b,GAAS5b,SACrDnN,MAAO4J,EAAE,eACTP,QAASA,KACPA,EAAQ09C,EAAOvjD,eAAiB,GAAG,EAErCC,WAAYA,IAAMA,OAEnB,CAACmG,EAAGmf,GAAS5b,SAAU9D,EAAS5F,EAAYsjD,EAAOvjD,gBAEhDwsI,GAAYjpI,EAAAA,EAAAA,UAAwB,KACjC,CACLZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/B8J,SAAU4b,GAAS5b,SACnBvH,KAAM4sF,GAAAA,GACNxyF,MAAO4J,EAAE,eACTP,QAAU0V,IACR1V,EAAQ,CAAC0V,GAAM,EAEjBtb,WAAYA,IAAMA,OAEnB,CAACmG,EAAGP,EAAS5F,EAAYslB,GAAS5b,WAErC,MAA0B,YAAtB45C,EAAOkpF,WACFt3G,EAGiB,QAAtBouB,EAAOkpF,WACFD,EAGF,CAAC,CACV,CCzKO,SAASE,GAAoB1wI,GAClC,MAAM,IAAQqK,EAAAA,EAAAA,MACR+6B,EAAewpG,GAAsB,CAAEC,mBAAmB,IAC1D8B,EAAqC,SAAf3wI,EAAMq4B,KAC5BkvB,GAASgZ,EAAAA,GAAAA,MACT,KAAEpF,GAASwrE,GAAWgK,EAAappF,EAAOlnD,IAAM,GAAKknD,EAAOo0D,SAAW,IACvE9iB,EAAcjoD,OAAOuqB,GAAMsY,YAAc,GACzCw7D,EAAS0B,EAAappF,EAAOlnD,IAAM,GAAKknD,EAAOo0D,SAAW,GAE1DroF,EAAiBq7G,GAAsB,SAASM,GAAU,iBAC1Dj/F,EAAO6zB,GAA2B,CACtCvc,IAAKqN,EAAM,UAAUs6E,GAAU,iBAC/B37G,iBACA8R,iBAGIvM,EClBD,SACLmX,EACA6oD,EACAo2C,EACAtoI,GAEA,MAAM,EAAEyD,IAAMC,EAAAA,EAAAA,MAERumI,ECdD,SACLxkG,EACA6iG,GAEA,MAAM,EAAE7kI,IAAMC,EAAAA,EAAAA,MACR0kC,EAAsB6/F,GAAsB,CAChD71H,cAAc,EACd0mD,aAAa,IAET8W,EAAyBlE,GAAc,CAAEt5D,cAAc,EAAM0mD,aAAa,IAC1EvzB,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAACgvE,IAAyB,CAACA,IACzDzT,EAAaH,KA8BnB,OA5B4BhiD,IAC1BmiD,EAAW,CACTviE,MAAO6J,EAAE,gCAAiC,CAAEoV,MAAOmB,EAAOja,SAC1DzF,YAAamJ,EACX,wFACA,CACEoV,MAAOmB,EAAOja,SAGlBwoC,iBAAkB9kC,EAAE,sBAAuB,CAAEoV,MAAOmB,EAAOja,SAC3Ds1B,MAAOrb,EAAOre,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QACtD27B,MAAO62B,GACPtoD,UAAU,EACVukC,sBACA7C,gBACAE,aACAD,SAAUv6B,MAAOgP,EAAuB+N,WAChC8jC,GACJkC,EAAM,UAAUs6E,GAAU,aAC1B,CACE/nD,cAAc,EACd7mF,GAAIugB,EAAMvgB,IAEZsuB,EACD,GAEH,CAGN,CD5B6BkiH,CAAsB7gG,EAAK00B,wBAAyBuqE,GAEzE6B,EAAehqE,GAA6CnS,EAAM,YAAYvxC,KAC9E2tH,EAAiB7oI,QACrB4oI,GAAgBA,EAAatqI,SAAWsqI,EAAatqI,QAAc,MAG/DwqI,EAAmC7B,KACnC8B,EAAkB7B,GAAyBp/F,EAAK00B,wBAAyBuqE,GAGzEiC,EAAmBf,GAAoC,KAD9C5vE,EAAAA,GAAAA,KAGbv8D,cAAegsC,EAAKhsC,eAAiB,GACrCysI,WAAY,YAGd,OAAOlpI,EAAAA,EAAAA,UAAuC,KAC5C,MAAM+4B,EAAqC,GAyC3C,OAvCAA,EAAIr5B,KAAK,CACPN,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVvH,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,mBACTP,QAASA,IACPmnI,EAAiC,CAC/B9B,MAAO+B,EACPp4C,YAAaA,GAAe,GAC5Bo2C,OAAQA,GAAU,KAEtBhrI,WAAYA,IACV8sI,OACIlsI,EACAuF,EACE,wIAIVk2B,EAAIr5B,KAAK,CAAEN,KAAMrJ,EAAesJ,YAEnB,kBAATD,GACF25B,EAAIr5B,KAAKiqI,GAGX5wG,EAAIr5B,KAAK,CAAEN,KAAMrJ,EAAesJ,YAEhC05B,EAAIr5B,KAAK,CACPN,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/B1D,MAAO4J,EAAE,uBACTnG,WACgC,IAA9B+rC,EAAKhsC,cAAc0C,OAAe0D,EAAE,+CAA4CvF,EAClFgF,QAAS+mI,EACTjjI,UAAU,IAGL2yB,CAAG,GACT,CACDl2B,EACA4lC,EAAKhsC,cAAc0C,OACnBkqI,EACAI,EACAC,EACAF,EACA9B,EACAp2C,EACAq4C,EACAvqI,GAEJ,CD9DyBwqI,CACrBnhG,EACA6oD,EACAo2C,EACA0B,EAAa,iBAAmB,iBAE5BtrG,EGxBD,SAA+BwzD,GACpC,MAAM,IAAQxuF,EAAAA,EAAAA,MACR6zD,EAAerW,MAEbzkC,KAAMqwD,GAAcla,GAAsB5E,EAAM,gBAAiBkkC,GACnED,EAAgBnlB,GAAW9sE,KAEjC,OAAOY,EAAAA,EAAAA,UACL,IAAM,CACJ,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/B8J,UAAU,EACVvH,KAAM84D,GAAAA,GACN1+D,MAAO4J,EAAE,cACTP,QAAU+W,GACRs9C,EAAaJ,GAASszE,mBAAoB,CACxC7pF,OAAQ,CAAEmsB,eAAgBklB,EAAev4F,GAAIw4F,EAAa80C,SAAU/sH,EAAMvgB,MAE9E4D,WAAa2c,GAAUo5G,GAAmBp5G,EAAOxW,MAGrD,CAACA,EAAG8zD,EAAc26B,EAAaD,GAEnC,CHAqBy4C,CAAsBx4C,GAEnCm4C,EAAmC7B,KACnC8B,EAAkB7B,GAAyBp/F,EAAK00B,wBAAyBuqE,GAEzE6B,EAAehqE,GAA6CnS,EAAM,YAAYvxC,KAC9E2tH,EAAiB7oI,QACrB4oI,GAAgBA,EAAatqI,SAAWsqI,EAAatqI,QAAc,MAKrE,OAFAi6D,GAAqB,gBAGnBv9D,EAAAA,EAAAA,KAACmhD,GAAU,CAAAjhD,UACTF,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,6BACHizB,eAAgBA,EAChBuF,eAAgBA,EAChBuM,aAAcA,EACdC,WAAYA,EACZ8C,gBAAiB/9B,EAAE,mCACnBg+B,gBAEMh+B,EADJ2mI,EACM,0DACA,6CAER1oG,sBAEMj+B,EADJ2mI,EACM,gDAEA,yFAGRvmG,eAAgBumG,OAAiBlsI,EAAYo2B,GAAAA,GAC7CwN,sBAAsBvlC,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrCwN,qBAAsBuoG,EAAiB3mI,EAAE,yBAAsBvF,EAC/D0jC,sBACEwoG,EACI,IACEC,EAAiC,CAC/B9B,MAAO+B,EACPp4C,YAAaA,EACbo2C,OAAQA,SAEZpqI,KAEFmrC,KAIZ,CInFO,SAASshG,GAAmBtxI,GACjC,MAAM,IAAQqK,EAAAA,EAAAA,MACRk9C,GAASgZ,EAAAA,GAAAA,MAEPn9C,KAAMmuH,GAAUp4E,GACtBxE,EAAM,UAAyB,SAAf30D,EAAMq4B,KAAkBkvB,EAAOlnD,IAAM,GAAKknD,EAAOo0D,SAAW,qBAG9E,OACEz4G,EAAAA,EAAAA,KAAC0hB,GAAW,CAAAxhB,UACVF,EAAAA,EAAAA,KAACo2E,GAAoB,CAAC94E,MAAO4J,EAAE,SAAUxM,MAAO0V,KAAKa,UAAUo9H,IAAU,QAG/E,CClBO,SAASC,KASd,OARuBj1C,GAAyB,CAC9CC,YAAa,YACbC,cAAe,CAAC,WAAY,YAAa,MACzCC,mBAAoB,CAClBpqB,SAAU,CAAEirB,QAAS,aACrBl9F,GAAI,CAAEk9F,QAAS,eAIrB,CCHO,SAASk0C,GACdrlG,EACAslG,GAEA,MAAM,EAAEtnI,IAAMC,EAAAA,EAAAA,MACRglI,EAAsBh9D,GAAc,CAAEt5D,cAAc,EAAM0mD,aAAa,IACvEvzB,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAAC8nI,IAAsB,CAACA,IACtDvsE,EAAa4qD,KAoBnB,OAnB+Bl3C,IAC7B1T,EAAW,CACTviE,MAAO6J,EAAE,wCAAyC,CAAEoV,MAAOg3D,EAAU9vE,SACrEs1B,MAAOw6C,EAAUl0E,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QACzD27B,MAAO62B,GACP5mB,gBACAE,aACAD,SAAUv6B,MAAO6iE,EAAoB9lD,WAC7B8jC,GACJkC,EAAM,oBAAoB+8E,eAC1B,CACErxI,GAAIo0E,EAASp0E,IAEfsuB,EACD,EAEHzsB,eAAgBkI,EAAE,uBAAwB,CAAEoV,MAAOg3D,EAAU9vE,UAC7D,CAGN,CCvBA,SAASirI,GAAuB3xI,GAC9B,MAAM,IAAQqK,EAAAA,EAAAA,MACR+6B,EAAegwC,KACf9hD,EAAiBk+G,MACjB,gBAAEE,EAAe,YAAEE,GAAgB5xI,EAEnCgwC,EAAO6zB,GAAqB,CAChCvc,IAAKqN,EAAM,cACXqP,YAAa,CAAE6tE,eAAgB,CAAC,UAAW,OAAQC,wBAAyBJ,GAC5Ep+G,iBACA8R,iBAGF,OACEliC,EAAAA,EAAAA,KAACitC,GAAiB,CAChB5vC,MAAO6J,EAAE,oBACT4lC,KAAMA,EACN5K,aAAcA,EACd9R,eAAgBA,EAChBtqB,SAAU4oI,GAGhB,CAEO,SAASG,KACd,MAAM,WAAE12G,EAAU,UAAEE,GAAcK,MAC3B57B,EAAOsuC,IAAY1vC,EAAAA,EAAAA,YAU1B,OARAK,EAAAA,EAAAA,YAAU,KACJe,EACFq7B,GAAWn4B,EAAAA,EAAAA,KAACyuI,GAAsB,IAAK3xI,KAEvCu7B,GACF,GACC,CAACv7B,EAAOq7B,EAAYE,IAEhB+S,CACT,CCrCO,SAAS0jG,GAAchyI,GAM5B,MAAMszB,EAAiBk+G,MACjB,EAAEpnI,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,MAEf,kBAAEoqF,EAAiB,cAAEC,EAAa,aAAE9sG,EAAY,gBAAEssG,GAAoB1xI,EAEtEgwC,EAAO6zB,GAAqB,CAChCvc,IAAKoqF,EACD/8E,EAAM,oBAAoB+8E,eAC1B/8E,EAAM,cACVrhC,iBACA8R,iBAGIC,EAAa6sG,EAAcliG,EAAK00B,yBAChC7rC,EAAiBo5G,EAAkBjiG,IAEnC,KAAE5sB,GAAS0jD,GACf4qE,EAAkB/8E,EAAM,oBAAoB+8E,eAA+B/8E,EAAM,eAE7Ew9E,EAAoBjqI,QAAQkb,GAAQA,EAAK5c,SAAW4c,EAAK5c,QAAc,MAE7Ei6D,GAAqB,aAErB,MAAM2xE,EAAoBX,GACxBzhG,EAAK00B,wBACLgtE,GAAmB,IAEfW,EAA6BN,KAEnC,OACE7uI,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,sBACHizB,eAAgBA,EAChBuF,eAAgBA,EAChBuM,aAAcA,EACdC,WAAYA,EACZ8C,gBAAiB/9B,EAAE,2BACnBg+B,gBAEMh+B,EADJ+nI,EACM,yCACA,qDAER9pG,sBAGQj+B,EAFN+nI,EACIT,EACI,0DACA,uDAEF,yFAGRjpG,sBAAsBvlC,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrCwN,qBACE2pG,EAEM/nI,EADFsnI,EACI,qBACA,wBACJ7sI,EAEN0jC,sBACE4pG,EACIT,EACE,IACEW,EAA2B,CACzBT,YAAaQ,EACbV,gBAAiBA,IAErB,IAAMxzE,EAAaJ,GAASw0E,kBAC9BztI,KAEFmrC,GAGV,CCnEO,SAASuiG,GAA0BviG,GACxC,MAAM,cAAEilB,GAAkBJ,MACpB,KAAEzxC,GAAS+1C,GAAiBxE,EAAM,qBAClC8iB,EAAQr0D,GAAMs0D,OAEd86D,EAAoBC,GAA+BziG,GACnD0iG,EA2ED,WACL,MAAMx0E,EAAerW,MACf,cAAEoN,GAAkBJ,MACpB,KAAEzxC,GAAS+1C,GAAiBxE,EAAM,qBAClC8iB,EAAQr0D,GAAMs0D,QACd,EAAEttE,IAAMC,EAAAA,EAAAA,MAERsoI,GACH19E,GAAegO,cAAgBhO,GAAeigB,oBAAsB9xD,GAAMs0D,OAC7E,OAAOnwE,EAAAA,EAAAA,UACL,KAAM,CACJZ,KAAMrJ,EAAemL,OACrB7E,SAAUA,KAAgB,IAAV6zE,EAChB/zE,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVvH,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,mBACTP,QAASA,IAAMq0D,EAAaJ,GAASw0E,aACrCruI,WAAY0uI,OACR9tI,EACAuF,EACE,yIAGR,CAACA,EAAGuoI,EAAwBz0E,EAAcuZ,GAE9C,CAtG4Bm7D,GACpBp6D,EAoDD,SAAwCxoC,GAC7C,MAAMyoC,EAAkBnC,GAAmBtmC,EAAK00B,0BAC1C,EAAEt6D,IAAMC,EAAAA,EAAAA,OACR,KAAE+Y,GAAS+1C,GAAiBxE,EAAM,qBAClC8iB,EAAQr0D,GAAMs0D,QACd,cAAEziB,GAAkBJ,KAE1B,OAAOttD,EAAAA,EAAAA,UACL,KAAM,CACJZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAM0mE,GAAAA,GACNtsE,MAAO4J,EAAE,mBACTP,QAAU4qE,GAAyBgE,EAAgBhE,GACnDxwE,WAAauyE,GACXoC,GAAsBpC,EAAWpsE,EAAG6qD,EAAewiB,IAAS,GAC9DjtE,UAAU,KAEZ,CAACJ,EAAGquE,EAAiBhB,EAAOxiB,GAEhC,CAxE+B49E,CAA+B7iG,GAE5D,OAAOzoC,EAAAA,EAAAA,UACL,IACEkwE,IAAUxiB,GAAegO,cAAgBhO,GAAeigB,mBACpD,CAACw9D,EAAmBl6D,EAAsBg6D,GAC1C,CAACA,IACP,CACEE,EACAl6D,EACAg6D,EACA/6D,EACAxiB,GAAegO,aACfhO,GAAeigB,mBAGrB,CAEO,SAASu9D,GACdziG,EACAriC,EACA/J,GAEA,MAAM,EAAEwG,IAAMC,EAAAA,EAAAA,MACRyoI,EChDD,SAA2B1mG,GAChC,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR0kC,EAAsBqmC,GAAoB,CAAEr8D,cAAc,EAAM0mD,aAAa,IAC7E8W,EAAyBlE,GAAc,CAAEt5D,cAAc,EAAM0mD,aAAa,IAC1EvzB,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAACgvE,IAAyB,CAACA,IACzDzT,EAAaH,KACbyU,EAAqC3C,GACd,cAAvBA,EAASgB,UACJrrE,EAAE,yDACJ,GAEHmtE,EAAoC9C,GACpCA,EAASmB,qBACJxrE,EACL,0GAEG,GA2CT,OAxCmCosE,IACjC,MAAMu8D,EAA0Cv8D,EAC7Cn1E,OAAO+1E,GACP/1E,OAAOk2E,GAEVzU,EAAW,CACTviE,MAAO6J,EAAE,uCAAwC,CAAEoV,MAAOg3D,EAAU9vE,SACpEzF,YAAamJ,EACX,gFACA,CACEoV,MAAOg3D,EAAU9vE,OAASqsI,EAA4BrsI,SAG1DwoC,iBAAkB9kC,EAAE,mBAAoB,CAAEoV,MAAOg3D,EAAU9vE,SAC3Ds1B,MAAOw6C,EAAUl0E,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAEmjC,SAAUljC,EAAEkjC,YAC7DxtD,aAAciuH,EAA4BrsI,OACtC,IACMqsI,EAA4BrsI,OAC5B,CACE0D,EACE,0HACA,CACEoV,MAAOuzH,EAA4BrsI,UAIzC,SAEN7B,EACJmqC,oBAAsBylC,GACpB2C,EAAkC3C,IAAa8C,EAAiC9C,GAClFx4C,MAAO62B,GACPtoD,UAAU,EACVukC,sBACA7C,gBACAE,aACAD,SAAUv6B,SACR6gD,GAAYkC,EAAM,cAAc8f,EAASp0E,GAAGqhB,2BAA4B,CAAC,IAC3E,CAGN,CDZyBsxH,CAAkBhjG,EAAK00B,0BACxC,cAAEzP,GAAkBJ,KAE1B,OAAOttD,EAAAA,EAAAA,UACL,KAAM,CACJZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BqC,QAASuB,EAAAA,GAAcC,QACvB3B,KAAMoxE,GAAAA,GACNh3E,MAAO4J,EAAE,oBACTuD,SAAUA,IAAY,EACtB/J,SAAUA,IAAY,EACtBiG,QAAU2sE,GAAcs8D,EAAet8D,GACvCvyE,WAAauyE,GACXA,EAAU3rD,MACP4pD,GACC2C,GAAkC3C,EAAUrqE,IAC5CitE,GAAqCpiB,EAAe7qD,IACpDktE,GAAyC7C,EAAUrqE,IACnDmtE,GAAiC9C,EAAUrqE,KAE3C,oEACA,MAER,CAACA,EAAG0oI,EAAgBnlI,EAAU/J,EAAUqxD,GAE5C,CElEO,SAASg+E,GAA4BjjG,GAC1C,MAAMwiG,EAAoBC,GAA+BziG,GAAM,GACzDkjG,EAQR,SAA6CljG,GAC3C,MAAMuX,GAASgZ,EAAAA,GAAAA,MACT,GAAElgE,GAAOknD,EACT4rF,EAAwB1B,GAAyBzhG,EAAK00B,wBAAyBrkE,GAAM,IACrFgyI,EAA6BN,MAE7B,KAAE3uH,GAAS0jD,GACfnS,EAAM,oBAAoBt0D,GAAM,iBAE5B+yI,EAAuBlrI,QAAQkb,GAAQA,EAAK5c,SAAW4c,EAAK5c,QAAc,MAEhF,OAAOe,EAAAA,EAAAA,UACL,KAAM,CACJZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcC,QACvB3B,KAAM40B,GAAAA,GACNx6B,OAAO4J,EAAAA,GAAAA,GAAE,sBACTuD,UAAU,EACV1J,WAAYA,IACVmvI,EAAuB,IAAKhpI,EAAAA,GAAAA,GAAE,wDAChCP,QAASA,IACPwoI,EAA2B,CACzBT,YAAauB,EACbzB,gBAAiBrxI,GAAM,QAG7B,CAAC8yI,EAAuB9yI,EAAIgyI,EAA4Be,GAE5D,CArC0BC,CAAoCrjG,GACtDsjG,EAsCR,SAAgDtjG,GAC9C,MAAMujG,ECjDD,SAAuCnnG,GAC5C,MAAM,IAAQ/hC,EAAAA,EAAAA,MACRmpI,EAAmB7wE,KACnB5zB,EAAsBqmC,GAAoB,CAAEr8D,cAAc,EAAM0mD,aAAa,IAC7E8W,EAAyBlE,GAAc,CAAEt5D,cAAc,EAAM0mD,aAAa,IAC1EvzB,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAACgvE,IAAyB,CAACA,IACzDhvB,GAASgZ,EAAAA,GAAAA,KAwBf,OAtB8BiW,IAC5Bg9D,EAAiB,CACfjzI,MAAO6J,EAAE,6CACTnJ,YAAamJ,EAAE,wEAAyE,CACtFoV,MAAOg3D,EAAU9vE,SAEnBwoC,iBAAkB9kC,EAAE,yBAA0B,CAAEoV,MAAOg3D,EAAU9vE,SACjEs1B,MAAOw6C,EAAUl0E,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QACzD27B,MAAO62B,GACPtoD,UAAU,EACVukC,sBACA7C,gBACAE,aACAD,SAAUA,CAACsoC,EAAoB9lD,IAC7B8jC,GACEkC,EAAM,oBAAoB/jB,OAAO2W,EAAOlnD,iBACxC,CAAEA,GAAIo0E,EAASp0E,GAAI6mF,cAAc,GACjCv4D,IAEJ,CAIN,CDkB+B8kH,CAA8BzjG,EAAK00B,yBAC1Dnd,GAASgZ,EAAAA,GAAAA,MACT,GAAElgE,GAAOknD,GAEPnkC,KAAMy9E,GAAkBtnC,GAA0B5E,EAAM,oBAAqBt0D,GAErF,OAAOkH,EAAAA,EAAAA,UACL,KAAM,CACJZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BqC,QAASuB,EAAAA,GAAcC,QACvBvH,OAAO4J,EAAAA,GAAAA,GAAE,yBACTuD,UAAU,EACV9D,QAAS0pI,EACTtvI,WAAauyE,GAOnB,SACEk9D,EACAC,GAEA,GAAIA,EAA0B,CAC5B,MAAMC,EAA4BF,EAC/BryI,QAAQke,GACO,aAAdA,EAAK5Y,KACkB,YAAnB4Y,EAAKk2D,WAA8C,WAAnBl2D,EAAKk2D,WACpCl2D,EAAK8+C,gBAAgB6iC,mBAAmB3yC,SAE9CtkD,KAAKsV,GAASA,EAAKjf,MAAQif,EAAK+yD,WAChC3nE,KAAK,MAER,GAAIipI,EACF,OAAOxpI,EAAAA,GAAAA,GACL,6DAA6DwpI,IAGnE,CAEA,MAAO,EACT,CA5BQC,CAA0Br9D,EAAmC,iBAAxBqqB,GAAevgG,SAExD,CAACizI,EAAsB1yC,GAAevgG,MAE1C,CA1D6BwzI,CAAuC9jG,GAElE,OAAOzoC,EAAAA,EAAAA,UAAiC,IAC/B,CAAC2rI,EAAiBI,EAAoBd,IAC5C,CAACU,EAAiBI,EAAoBd,GAC3C,CEpBO,SAASuB,GAAwB3nG,GACtC,MAAMsqC,EAAiDC,GAA2BvqC,GAC5EwqC,EAA8CC,GAA2BzqC,GAAY,GAE3F,OAAO7kC,EAAAA,EAAAA,UACL,IAAM,CAACmvE,EAAyBE,IAChC,CAACF,EAAyBE,GAE9B,CCJO,SAASo9D,KACd,MAAM91E,EAAerW,KACfN,GAASgZ,EAAAA,GAAAA,MACT,GAAElgE,GAAOknD,EAUTniB,EAAegwC,QAAoBvwE,GARrB7F,EAAAA,EAAAA,cACjBy1E,GACCvW,EAAaJ,GAASm2E,6BAA8B,CAClD1sF,OAAQ,CAAElnD,GAAIA,EAAIi6E,YAAa7F,EAASp0E,OAE5C,CAAC69D,EAAc79D,KAKjB,OACE6C,EAAAA,EAAAA,KAAC8uI,GAAa,CACZC,kBAAmBgB,GACnBf,cAAe6B,GACf3uG,aAAcA,EACdssG,gBAAiBrxI,GAGvB,CCfO,SAAS6zI,KACd,MAAM,EAAE9pI,IAAMC,EAAAA,EAAAA,MACRk9C,GAASgZ,EAAAA,GAAAA,MACT,MACJrwD,EACAkT,KAAMqxD,EAAQ,QACdhc,GACEc,GAAqB5E,EAAM,aAAcpN,EAAO+yB,cAE5Cl3D,KAAMy9E,GAAkBtnC,GAAqB5E,EAAM,mBAAoBpN,EAAOlnD,IAEhFyjC,EAAciwG,GAAwBt7E,GACtC3Q,EAAaT,KAEnB,OAAIn3C,GAAchN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,IACpDgc,GAGHjsE,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAOk0E,GAAUnC,SACjBhvB,YAAa,CACX,CACE9iD,MAAO4J,EAAE,mBACTY,GAAI88C,EAAWgW,GAASukC,iBAE1B,CACE7hG,MAAOqgG,GAAevgG,MAExB,CACEE,MAAO4J,EAAE,aACTY,GAAI88C,EAAWgW,GAASk2E,uBAAwB,CAAEzsF,OAAQA,KAE5D,CACE/mD,MAAO4J,EAAEqqE,GAAUnC,YAGvBzuB,eACE3gD,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAASs9B,EACTx9B,SAAU6F,GAAAA,GAAiBC,MAC3B3I,aAAcgxE,OAIpBvxE,EAAAA,EAAAA,KAAC09D,GAAc,CACbe,QAAS,CACPnhE,MAAO4J,EAAE,qBACTiuB,KAAMylC,GAASk2E,uBACfpyE,oBAAqB,aAEvBvU,KAAM,CAAC,CAAE7sD,MAAO4J,EAAE,WAAYiuB,KAAMylC,GAASm2E,+BAC7C1sF,OAAQ,CAAElnD,GAAIknD,EAAOlnD,GAAIi6E,YAAa7F,EAASp0E,UArC/B6C,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,GAyCrD,CCtEO,SAAS8mF,KACd,MAAM5sF,GAASgZ,EAAAA,GAAAA,KACf,OACEr9D,EAAAA,EAAAA,KAAC0/H,GAAU,CACTzsC,QAAQ,MACR91F,GAAIknD,EAAOlnD,IAAM,GACjBsG,KAAM,gBACNg8H,cAAe7kE,GAASs2E,uBAG9B,CCVO,SAASC,KACd,MAAM9sF,GAASgZ,EAAAA,GAAAA,KACf,OACEr9D,EAAAA,EAAAA,KAAC6/H,GAAU,CACT5sC,QAAQ,MACR91F,GAAIknD,EAAOlnD,IAAM,GACjBsG,KAAM,gBACNg8H,cAAe7kE,GAASw2E,uBAG9B,CCgBO,SAAS7xC,KACd,MAAM,EAAEr4F,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KACb6W,EAAerW,KACf4K,EAAcyT,KAapB,OACE19D,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,yBACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,mBAAoBY,GAAI88C,EAAWgW,GAASukC,iBACvD,CAAE7hG,MAAO4J,EAAE,8BAGflH,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,yBACdw3B,SAtBwDhwB,UAC5D,MAAMivF,QAAsBpuC,EAAYkC,EAAM,oBAAqBvxC,GACnE86C,EAAaJ,GAAS0c,qBAAsB,CAC1CjzB,OAAQ,CACNlnD,GAAIwgG,EAAcxgG,KAEpB,EAiBEM,WAAYyJ,EAAE,UACdsmC,SAhBWA,KACfwtB,EAAaJ,GAASukC,eAAe,EAgBjCvxE,aAAc,CACZxwB,KAAM,GACNi0I,wBAAyB,EACzBC,2BAA4B,EAC5BC,oBAAqB,EACrBC,UAAW,GACXtxI,UAEFF,EAAAA,EAAAA,KAACyxI,GAAmB,QAI5B,CAEO,SAASxyC,KACd,MAAM,EAAE/3F,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KACb6W,EAAerW,KACfN,GAASgZ,EAAAA,GAAAA,KACTgG,EAAeP,MAEnB5iD,KAAMy9E,EAAa,UACnBv0E,EAAS,MACTpc,GACEqpD,GAA0B5E,EAAM,oBAAqBpN,GAAQlnD,IAAIqhB,YAKrE,OAAIxR,GACKhN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,IAEtBoc,IAAcu0E,GACT39F,EAAAA,EAAAA,KAACkqD,GAAW,KAcnB5kD,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MACEsgG,GAAevgG,KACX8J,EAAE,6BAA8B,CAAEwqI,kBAAmB/zC,GAAevgG,OACpE8J,EAAE,kBAERk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,mBAAoBY,GAAI88C,EAAWgW,GAASukC,iBACvD,CACE7hG,MAAOqgG,GAAevgG,KAClB8J,EAAE,6BAA8B,CAAEwqI,kBAAmB/zC,GAAevgG,OACpE8J,EAAE,uBAIZlH,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,uBACdw3B,SA9BwDhwB,UAC5D,MAAMijI,QAA4BtuE,EAChC5R,EAAM,oBAAoBpN,GAAQlnD,MAClC+iB,GAEF86C,EAAaJ,GAAS0c,qBAAsB,CAC1CjzB,OAAQ,CACNlnD,GAAIw0I,EAAoBx0I,KAE1B,EAsBEM,WAAYyJ,EAAE,UACdsmC,SAzCWA,KACfwtB,EAAaJ,GAASukC,eAAe,EAyCjCvxE,aAAc,CACZxwB,KAAMugG,EAAcvgG,KACpBi0I,wBAAyB1zC,EAAc0zC,yBAA2B,EAClEC,2BAA4B3zC,EAAc2zC,4BAA8B,EACxEC,oBAAqB5zC,EAAc4zC,qBAAuB,EAC1DC,UAAW7zC,EAAc6zC,WAAa,GACtCtxI,UAEFF,EAAAA,EAAAA,KAACyxI,GAAmB,QAI5B,CAEO,SAASA,KACd,MAAM,EAAEvqI,IAAMC,EAAAA,EAAAA,MACd,OACE7B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,OACLE,MAAO4J,EAAE,QACTkf,YAAalf,EAAE,gBACf8lB,YAAU,EACVkuB,UAAW,OAEbl7C,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,0BACLqG,KAAK,SACL0tC,UAAWjqC,EACT,iHAEF24B,IAAK,EACLviC,MAAO4J,EAAE,8BAEXlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,6BACL+zC,UAAWjqC,EACT,yHAEFzD,KAAK,SACLo8B,IAAK,EACLviC,MAAO4J,EAAE,iCAEXlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,sBACL+zC,UAAWjqC,EACT,mGAEFzD,KAAK,SACLo8B,IAAK,EACLviC,MAAO4J,EAAE,0BAEXlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBjL,UAAWjqC,EACT,8HAEF9J,KAAK,YACLyiC,IAAK,EACLp8B,KAAK,SACLnG,MAAO4J,EAAE,iBAIjB,CC/JO,SAASgqI,KACd,MAAM,EAAEhqI,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KACbE,GAASgZ,EAAAA,GAAAA,KACTrC,EAAerW,MACbzkC,KAAMy9E,EAAa,UAAEv0E,GAAc6sC,GACzCxE,EAAM,oBAAoBpN,EAAOlnD,IAAM,OAEnCy0I,EAAyBpnB,KAE/B,GAAIphG,IAAcu0E,EAAe,OAAO39F,EAAAA,EAAAA,KAACkqD,GAAW,IAEpD,MAAM/D,EAA0B,CAC9B,CACEhpD,GAAI,QACJG,MAAO4J,EAAE,kBACTohD,QACEtoD,EAAAA,EAAAA,KAACw9H,GAAkB,CACjBC,6BAA8Bv2H,EAC5B,4EACA,CACE2qI,kBAAmBl0C,GAAevgG,SAK1CqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,MAAEysD,GAAUlS,EAClB,IAAKkS,GAAO/1D,OACV,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,QACJG,MAAO4J,EAAE,yBACTohD,QACEtoD,EAAAA,EAAAA,KAAC+8H,GAAkB,CACjB/uE,YAAY,gBACZ0uE,yBAAyB,QACzBC,4BAA6Bz1H,EAAE,kDAAmD,CAChF2qI,kBAAmBl0C,GAAevgG,SAIxCqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,SAAE2uH,GAAap0E,EACrB,IAAKo0E,GAAUj4H,OACb,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,SACJG,MAAO4J,EAAE,UACTohD,QAAQtoD,EAAAA,EAAAA,KAACs7H,GAAyB,MAwCtC,OACEh2H,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,aACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,mBAAoBY,GAAI88C,EAAWgW,GAASukC,iBACvD,CACE7hG,MAAOqgG,GAAevgG,KACtB0K,GAAI88C,EAAWgW,GAAS0c,qBAAsB,CAC5CjzB,OAAQ,CACNlnD,GAAIwgG,GAAexgG,OAIzB,CACEG,MAAO4J,EAAE,eACTY,GAAI88C,EAAWgW,GAASq2E,wBAAyB,CAAE5sF,OAAQ,CAAElnD,GAAIwgG,GAAexgG,OAElF,CAAEG,MAAO4J,EAAE,kBAGflH,EAAAA,EAAAA,KAACgqD,GAAU,CACT7D,MAAOA,EACPznB,SA3DWhwB,UACf,MAAM,MAAE6qD,EAAK,SAAEkiE,GAAav7G,EACtB4Y,EAAwB,GAC9B,IAAK,MAAMo2C,KAAQ3V,EACjB,IAAK,MAAM7wC,KAAQ+yG,EACjB3iG,EAAM/0B,KAAK,CAAEmrE,OAAMxmD,SAGvB,OAAO,IAAIyhB,SAAeqd,IACxBoqF,EAAuB,CACrBv0I,MAAO6J,EAAE,aACT6xB,MAAOA,EAAGm2C,OAAMxmD,UAAW,GAAGwmD,EAAK/xE,MAAMurB,EAAKvrB,KAC9C27B,QACAkQ,cAAe,CACb,CAAEloB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAGosD,UAAWA,EAAK9xE,MAC9C,CAAE0jB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAG4F,UAAWA,EAAKtrB,OAEhD6rC,SAAUA,EAAGimC,OAAMxmD,UACjB6mC,GAAYkC,EAAM,0BAA2B,CAC3Cyd,KAAMA,EAAK/xE,GACXkgI,gBAAiB30G,EAAKvrB,GACtB4/D,aAAc,gBACdugE,UAAW3/B,EAAcxgG,KAE7B+rC,WAAYA,KACVse,GAAS,EAEXj7C,QAASA,KACPyuD,EAAaJ,GAASq2E,wBAAyB,CAC7C5sF,OAAQ,CAAElnD,GAAIwgG,EAAcxgG,GAAGqhB,aAC/B,GAEJ,GACF,EA2BE8wB,aAAW,EACX9B,SAAUA,KACRwtB,EAAaJ,GAASq2E,wBAAyB,CAAE5sF,OAAQ,CAAElnD,GAAIwgG,GAAexgG,KAAO,MAK/F,CC9HO,SAASi0I,KACd,MAAM,EAAElqI,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KACbE,GAASgZ,EAAAA,GAAAA,MAEPn9C,KAAMy9E,EAAa,UAAEv0E,GAAc6sC,GACzCxE,EAAM,oBAAoBpN,EAAOlnD,IAAM,OAEnCutH,EAAqBF,KACrBxvD,EAAerW,KAErB,GAAIv7B,IAAcu0E,EAAe,OAAO39F,EAAAA,EAAAA,KAACkqD,GAAW,IAEpD,MAAM/D,EAA0B,CAC9B,CACEhpD,GAAI,QACJG,MAAO4J,EAAE,kBACTohD,QACEtoD,EAAAA,EAAAA,KAACk9H,GAAkB,CACjBC,6BAA8Bj2H,EAC5B,4EACA,CACE2qI,kBAAmBl0C,GAAevgG,SAK1CqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,MAAE0sD,GAAUnS,EAClB,IAAKmS,GAAOh2D,OACV,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,QACJG,MAAO4J,EAAE,yBACTohD,QACEtoD,EAAAA,EAAAA,KAAC+8H,GAAkB,CACjB/uE,YAAY,gBACZ0uE,yBAAyB,QACzBC,4BAA6Bz1H,EAAE,kDAAmD,CAChF2qI,kBAAmBl0C,GAAevgG,SAIxCqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,SAAE2uH,GAAap0E,EACrB,IAAKo0E,GAAUj4H,OACb,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,SACJG,MAAO4J,EAAE,UACTohD,QAAQtoD,EAAAA,EAAAA,KAACs7H,GAAyB,MAwCtC,OACEh2H,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,aACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,mBAAoBY,GAAI88C,EAAWgW,GAASukC,iBACvD,CACE7hG,MAAOqgG,GAAevgG,KACtB0K,GAAI88C,EAAWgW,GAAS0c,qBAAsB,CAC5CjzB,OAAQ,CACNlnD,GAAIwgG,GAAexgG,OAIzB,CACEG,MAAO4J,EAAE,eACTY,GAAI88C,EAAWgW,GAASu2E,wBAAyB,CAC/C9sF,OAAQ,CACNlnD,GAAIwgG,GAAexgG,OAIzB,CAAEG,MAAO4J,EAAE,kBAGflH,EAAAA,EAAAA,KAACgqD,GAAU,CACT7D,MAAOA,EACPznB,SA/DYxe,IAChB,MAAM,MAAEs5C,EAAK,SAAEiiE,GAAav7G,EACtB4Y,EAAwB,GAC9B,IAAK,MAAMu2C,KAAQ7V,EACjB,IAAK,MAAM9wC,KAAQ+yG,EACjB3iG,EAAM/0B,KAAK,CAAEsrE,OAAM3mD,SAGvB,OAAO,IAAIyhB,SAAeqd,IACxBkjE,EAAmB,CACjBrtH,MAAO6J,EAAE,aACT6xB,MAAOA,EAAGs2C,OAAM3mD,UAAW,GAAG2mD,EAAKlyE,MAAMurB,EAAKvrB,KAC9C27B,QACAkQ,cAAe,CACb,CAAEloB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAGusD,UAAWA,EAAKzT,UAC9C,CAAE96C,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAG4F,UAAWA,EAAKtrB,OAEhD6rC,SAAUA,EAAGomC,OAAM3mD,UACjB6mC,GAAYkC,EAAM,0BAA2B,CAC3C4d,KAAMA,EAAKlyE,GACXkgI,gBAAiB30G,EAAKvrB,GACtB4/D,aAAc,gBACdugE,UAAW3/B,EAAcxgG,KAE7B+rC,WAAYA,KACVse,GAAS,EAEXj7C,QAASA,KACPyuD,EAAaJ,GAASu2E,wBAAyB,CAC7C9sF,OAAQ,CAAElnD,GAAIwgG,EAAcxgG,GAAGqhB,aAC/B,GAEJ,GACF,EA+BE8wB,aAAW,EACX9B,SAAUA,KACRwtB,EAAaJ,GAASu2E,wBAAyB,CAAE9sF,OAAQ,CAAElnD,GAAIwgG,GAAexgG,KAAO,MAK/F,CClJO,SAASm6E,KACd,MAAMjzB,GAASgZ,EAAAA,GAAAA,MAEbn9C,KAAMy9E,EAAa,UACnBv0E,EAAS,MACTpc,EAAK,QACLuoD,GACEc,GAA0B5E,EAAM,oBAAqBpN,EAAOlnD,IAEhE,OAAI6P,GAAchN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,IACrDnsC,IAAcu0E,GAAsB39F,EAAAA,EAAAA,KAACkqD,GAAW,IAE7CyzC,GAAgB39F,EAAAA,EAAAA,KAAC8xI,GAAwB,CAACn0C,cAAeA,IAAoB,IACtF,CAEO,SAASm0C,GAAyBh1I,GACvC,MAAM,IAAQqK,EAAAA,EAAAA,OACR,cAAEw2F,GAAkB7gG,EACpB8nD,EAAaT,KAEnB,OACE7+C,EAAAA,EAAAA,MAACoc,GAAW,CAAAxhB,SAAA,EACVF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,QAAQhH,SAAEy9F,EAAcvgG,QAC7C4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,QAAQhH,SAC1By9F,EAAcC,mBAAqB12F,EAAE,mBAAqBA,EAAE,qBAE/DlH,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,2BACTia,SAAUja,EACR,iHAEFka,QAASu8E,EAAcC,mBAAmB19F,SAEzCy9F,EAAc0zC,2BAEjB/rI,EAAAA,EAAAA,MAAC4b,GAAU,CACT5jB,MAAO4J,EAAE,8BACTia,SAAUja,EACR,yHAEFka,QAASu8E,EAAcC,mBAAmB19F,SAAA,CAEzCy9F,EAAc2zC,2BAA2B,QAE5CtxI,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,uBACTia,SAAUja,EACR,mGACAhH,SAEDy9F,EAAc4zC,uBAEjBvxI,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,aACTia,SAAUja,EACR,8HACAhH,SAEDy9F,EAAc6zC,aAEjBxxI,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,iBAAkBka,QAASu8E,EAAcC,mBAAmB19F,SAC9Ey9F,EAAcE,SACb,GAAGlwF,KAAK4Q,MAAM,IAAMo/E,EAAc5qB,gCAElC/yE,EAAAA,EAAAA,KAACiyE,GAAW,CAAA/xE,SAAEgH,EAAE,oBAGpBlH,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,cACTka,SAAUu8E,EAAcC,qBAAuBD,EAAcxiC,eAAeyT,WAAW1uE,UAEvFF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,UACTF,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAC/X,MAAM,OAAM4D,UACjBF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAASoU,kBAAmB,CACzC3qB,OAAQ,CACNlnD,GAAIwgG,GAAexiC,gBAAgByT,YAAYzxE,MAEhD+C,SAEFy9F,GAAexiC,gBAAgByT,YAAYxxE,cAKpD4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,WAAWhH,UAC9BF,EAAAA,EAAAA,KAACqS,GAAY,CAAC3X,MAAOijG,EAActiC,aAErCr7D,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,iBAAiBhH,UACpCF,EAAAA,EAAAA,KAACqS,GAAY,CAAC3X,MAAOijG,EAAc5tB,cAErC/vE,EAAAA,EAAAA,KAACo2E,GAAoB,CACnB90D,WAAS,EACTF,SAAUu8E,EAAco0C,kBAAkBvuI,OAC1C2d,SAAUja,EAAE,qDACZ5J,MAAO4J,EAAE,qBACTmvE,qBAAmB,EACnB37E,MAAOijG,EAAco0C,sBAI7B,CCnHO,SAASC,KACd,MAAMpK,ECgBD,SAAqCvhH,GAI1C,MAAM20C,EAAerW,MACf,EAAEz9C,IAAMC,EAAAA,EAAAA,MAERigI,GAAY/iI,EAAAA,EAAAA,UAChB,KAAM,CACJyc,OAAQ5Z,EAAE,MACV4b,KAAOq2D,GAAoBA,EAAIh8E,GAC/BiC,KAAM,KACN0hC,KAAM,SACNuC,KAAM,SACN9f,UAAW,SACX5T,SAAU,KAEZ,CAACzI,IAGGm/F,GAAWhiG,EAAAA,EAAAA,UACf,KAAM,CACJ+0E,eAAgB,UAChBC,iBAAkB,YAClBF,IAAK,WACLmtB,eAAgB,UAChBhtB,WAAY,aACZle,aAAc,cAEhB,IAcI/4B,EAAa8sC,GAAc,IAC5B9oD,EACH1f,SAbgB7K,EAAAA,EAAAA,cACfq9E,GACCne,EAAaJ,GAAS8qD,WAAY,CAChCrhE,OAAQ,CACNlnD,GAAIg8E,EAAIh8E,GACRglF,SAAUkkB,EAASltB,EAAI11E,UAG7B,CAAC4iG,EAAUrrC,IAMXl2B,aAAa,IAGTm3C,GAAe53E,EAAAA,EAAAA,UACnB,KAAM,CACJyc,OAAQ5Z,EAAE,UACV4b,KAAOq2D,IACEn5E,EAAAA,EAAAA,KAACosE,GAAU,CAAC1hC,OAAQyuC,EAAIzuC,SAEjCtrC,KAAM,YAER,CAAC8H,IAGGmgI,GAAkBhjI,EAAAA,EAAAA,UACtB,KAAM,CACJyc,OAAQ5Z,EAAE,WACV4b,KAAOq2D,IACEn5E,EAAAA,EAAAA,KAACqS,GAAY,CAAC3X,MAAOy+E,EAAIosC,UAElCnmH,KAAM,aAER,CAAC8H,IAGGogI,GAAmBjjI,EAAAA,EAAAA,UACvB,KAAM,CACJyc,OAAQ5Z,EAAE,YACV4b,KAAOq2D,IACEn5E,EAAAA,EAAAA,KAACqS,GAAY,CAAC3X,MAAOy+E,EAAIwtB,WAElCvnG,KAAM,WACN2lC,qBAAsB,OACtBD,aAAa,KAEf,CAAC59B,IAGGk6F,EtChDD,SACLwlC,EACAC,EACAh2D,GAEA,MAAM,EAAE3pE,IAAMC,EAAAA,EAAAA,MAwBd,OAtBe9C,EAAAA,EAAAA,UACb,KAAM,CACJyc,OAAQ5Z,EAAE,QACV4b,KAAOq2D,IACL,MAAMmsC,EAAsC,CAC1ClsC,eAAgBlyE,CAAC,wBACjBmyE,iBAAkBnyE,CAAC,iBACnBiyE,IAAsB,UAAjBA,EAAIgJ,SAAuBj7E,CAAC,iBAAmBA,CAAC,eACrDo/F,eAAgBp/F,CAAC,UACjBoyE,WAAYpyE,CAAC,iBACbk0D,aAAcl0D,CAAC,gBAEjB,OAAOlH,EAAAA,EAAAA,KAACmV,GAAQ,CAAC1G,KAAM62G,EAASnsC,EAAI11E,OAAS,EAE/CrE,KAAM,OACN0hC,KAAoBte,GAAiBnH,SACrCgoB,KAAoB9gB,GAAiBlH,SACrCkI,UAA8Bb,GAAsBO,UAEtD,CAAC2jH,EAAY/1D,EAAiBg2D,EAAY3/H,GAI9C,CsCkBqB+qI,GACb1K,EAAmBb,KACnBv/B,EAAkB92B,GAAuBzV,GAAS82B,kBAClD81C,EAAiBP,KACjBQ,EAAoBV,KACpBW,EAAuBV,KACvBW,EAAoBj3D,GAAqB9V,GAASg3B,gBAClD6V,EAAqBy/B,KACrBgL,EtCwFD,SACLvL,EACAC,EACAC,EACAC,EACAj2D,EACA/rC,GAEA,MAAM,EAAE59B,IAAMC,EAAAA,EAAAA,MACR09G,EAAiBX,KAgCvB,OA/Be7/G,EAAAA,EAAAA,UACb,KAAM,CACJyc,OAAQ5Z,EAAE,YACV4b,KAAOq2D,IACL,MAAMkrC,EAAcQ,EAAe1rC,GACnC,OACEn5E,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CAACC,GAAIqxE,EAAIhe,gBAAgBipD,UAAYC,EAAcA,EAAc,GAAGnkH,SACtEi5E,EAAIhe,gBAAgBipD,UAAUhnH,MAC1B,EAGX1C,MAAQy+E,GAAoBA,EAAIhe,gBAAgBipD,UAAUhnH,KAC1D+lB,MAAsBb,GAAkBc,SACxC0d,KAAoBte,GAAiBS,OACrCogB,KAAoB9gB,GAAiBU,OACrC8hB,qBAAqC,OACrC/hB,MAAsBP,GAAkBQ,OACxCM,UAA8Bb,GAAsBO,UAEtD,CACE2jH,EACA/1D,EACA/rC,EACA+hG,EACAC,EACA5/H,EACAy/H,EACA9hB,GAKN,CsClIyBstB,GAoCvB,OAlCqB9tI,EAAAA,EAAAA,UAAoC,IAChC,CACrB+iI,EACA/kG,EACA45C,EACAmlB,EACAimC,EACAC,EACAC,EACA2K,EACAzK,EACAC,EACAvgC,EACAwgC,EACAlgC,EACA+/B,IAGD,CACDJ,EACA/kG,EACA45C,EACAmlB,EACAimC,EACAC,EACAC,EACA2K,EACAzK,EACAC,EACAvgC,EACAwgC,EACAlgC,EACA+/B,GAGJ,CDjJsB4K,IACd,GAAEj1I,EAAK,KAAOkgE,EAAAA,GAAAA,KACdyD,EAAc,CAAEuxE,eAAgBl1I,EAAI2qI,iBAAkB,QAC5D,OAAO9nI,EAAAA,EAAAA,KAACmmI,GAAQ,CAACrlE,YAAaA,EAAajpD,QAAS+vH,GACtD,CE+BO,SAAStoC,KACd,MAAM,EAAEp4F,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KACb6W,EAAerW,KACf4K,EAAcyT,MACd,KAAE9iD,EAAI,MAAElT,EAAK,UAAEoc,GAAcw6C,GACjCnS,EAAM,qBAkBR,OAAIroC,GACKppB,EAAAA,EAAAA,KAACkqD,GAAW,IAEjBl9C,GACKhN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,KAGxB1H,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,0BACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,mBAAoBY,GAAI88C,EAAWgW,GAASukC,iBACvD,CAAE7hG,MAAO4J,EAAE,+BAGflH,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,0BACdw3B,SA7BsDhwB,UAC1D,MAAM,SAAE4jI,EAAQ,kBAAEP,KAAsBhxH,GAASb,EAC3CqyH,EAAmBD,EAAWP,EAAoB,GAClDS,QAAuBjjF,EAAYkC,EAAM,oBAAqB,IAC/D1wC,EACHgxH,kBAAmBQ,EACnB30C,oBAAoB,IAEtB5iC,EAAaJ,GAAS0c,qBAAsB,CAC1CjzB,OAAQ,CAAElnD,GAAIq1I,EAAer1I,KAC7B,EAoBEM,WAAYyJ,EAAE,UACdsmC,SAlCWA,KACfwtB,EAAaJ,GAASukC,eAAe,EAkCjCvxE,aAAc,CACZxwB,KAAM,GACNk1I,UAAU,EACV1jE,WAAY,KACZmjE,kBAAmBp1D,GACjBvsE,KAAKa,UAAUiP,GAAM5c,SAASmvI,MAAMV,kBAAkB1nI,UAExDknI,oBAAqB,EACrBC,UAAW,GACXtxI,UAEFF,EAAAA,EAAAA,KAAC0yI,GAAoB,QAI7B,CAEO,SAASxzC,KACd,MAAM,EAAEh4F,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KACb6W,EAAerW,KACfN,GAASgZ,EAAAA,GAAAA,KACTgG,EAAeP,MAEnB5iD,KAAMsyH,EAAc,UACpBppH,EACApc,MAAO2lI,GACLt8E,GAA2B5E,EAAM,oBAAqBpN,GAAQlnD,IAAIqhB,aAEhE,KACJ0B,EACAlT,MAAO4lI,EACPxpH,UAAWypH,GACTjvE,GAA6CnS,EAAM,qBAIjDzkD,EAAQ2lI,GAAWC,EACzB,OAAI5lI,GACKhN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,IAEtBoc,IAAcopH,GAAkBK,GAC3B7yI,EAAAA,EAAAA,KAACkqD,GAAW,KAmBnB5kD,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MACEm1I,GAAgBp1I,KACZ8J,EAAE,8BAA+B,CAAE4rI,mBAAoBN,GAAgBp1I,OACvE8J,EAAE,mBAERk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,mBAAoBY,GAAI88C,EAAWgW,GAASukC,iBACvD,CACE7hG,MAAOk1I,GAAgBp1I,KACnB8J,EAAE,8BAA+B,CAAE4rI,mBAAoBN,GAAgBp1I,OACvE8J,EAAE,wBAIZlH,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,wBACdw3B,SAnCsDhwB,UAC1D,MAAM,SAAE4jI,EAAQ,kBAAEP,KAAsBhxH,GAASb,EAE3CqyH,EAAmBD,EAAWP,EAAoB,GAClDgB,QAA6B1vE,EACjC5R,EAAM,oBAAoBpN,GAAQlnD,MAClC,IACK4jB,EACHgxH,kBAAmBQ,EACnB30C,oBAAoB,IAGxB5iC,EAAaJ,GAAS0c,qBAAsB,CAC1CjzB,OAAQ,CAAElnD,GAAI41I,EAAqB51I,KACnC,EAsBEM,WAAYyJ,EAAE,UACdsmC,SA/CWA,KACfwtB,EAAaJ,GAASukC,eAAe,EA+CjCvxE,aAAc,CACZxwB,KAAMo1I,EAAep1I,KACrBwxE,WAAY4jE,EAAe5jE,YAAc,KACzC2iE,oBAAqBiB,EAAejB,qBAAuB,EAC3DC,UAAWgB,EAAehB,WAAa,EACvCO,kBAAmBS,GAAgBT,kBAAkBvuI,OACjDgvI,GAAgBT,kBAChBp1D,GAAWvsE,KAAKa,UAAUiP,GAAM5c,SAASmvI,KAAKV,kBAAkB1nI,UACpEioI,SAAUttI,QAAQwtI,EAAeT,oBACjC7xI,UAEFF,EAAAA,EAAAA,KAAC0yI,GAAoB,QAI7B,CAEO,SAASA,KACd,MAAM,EAAExrI,IAAMC,EAAAA,EAAAA,MAER6rI,GAAc7wE,EAAAA,GAAAA,IAAS,CAAE/kE,KAAM,aAErC,OACEkI,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,OACLE,MAAO4J,EAAE,QACTkf,YAAalf,EAAE,gBACf8lB,YAAU,EACVkuB,UAAW,OAEbl7C,EAAAA,EAAAA,KAACy7F,GAAwB,CACvBr+F,KAAK,aACLE,MAAO4J,EAAE,cACTiqC,UAAWjqC,EACT,wLAEF45D,YAAa,CACXsvD,sBAAuB,iBAG3BpwH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,sBACLs6C,WAAYxwC,EACV,mGAEFzD,KAAK,SACLo8B,IAAK,EACLviC,MAAO4J,EAAE,0BAEXlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,YACLs6C,WAAYxwC,EACV,8HAEFzD,KAAK,SACLo8B,IAAK,EACLviC,MAAO4J,EAAE,gBAEXlH,EAAAA,EAAAA,KAACuwC,GAAgB,CAAwBjzC,MAAO4J,EAAE,sBAAuB9J,KAAK,aAC7E41I,IACChzI,EAAAA,EAAAA,KAACkiE,GAAc,CAACj/C,OAAS+vH,IAAiBA,EAAa5wE,MAAM,WAAUliE,UACrEF,EAAAA,EAAAA,KAAC+lE,GAAe,CAAC12B,cAAY,EAAAnvC,UAC3BF,EAAAA,EAAAA,KAACm4C,GAAkB,CACjB1lC,OAAO,OACPilC,WAAYxwC,EACV,yEAEF5J,MAAO4J,EAAE,qBACT9J,KAAK,4BAOnB,CC9NO,SAAS61I,KACd,MAAM,EAAE/rI,IAAMC,EAAAA,EAAAA,MACRsyD,EAAiBm9D,GAAsB,kBACvC57D,EAAerW,KACfN,GAASgZ,EAAAA,GAAAA,MACT,MACJrwD,EACAkT,KAAMy9E,EAAa,QACnBpoC,GACEc,GAA0B5E,EAAM,mBAAoBpN,EAAOlnD,IAEzDyjC,EAAcm+D,IAA2B,IAAM/jC,EAAaJ,GAASukC,kBACrEv6C,EAAaT,KAEnB,OAAIn3C,GAAchN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,IACpDooC,GAGHr4F,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAOsgG,GAAevgG,KACtBgjD,YAAa,CACX,CACE9iD,MAAO4J,EAAE,mBACTY,GAAI88C,EAAWgW,GAASukC,iBAE1B,CACE7hG,MAAOqgG,GAAevgG,OAG1BujD,eACE3gD,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAAS,IAAIm2D,KAAmB74B,GAChCx9B,SAAU6F,GAAAA,GAAiBC,MAC3B3I,aAAco9F,OAIpB39F,EAAAA,EAAAA,KAAC09D,GAAc,CACbe,QAAS,CACPnhE,MAAO4J,EAAE,2BACTiuB,KAAMylC,GAASukC,eACfzgC,oBAAqB,mBAEvBvU,KAAM,CACJ,CAAE7sD,MAAO4J,EAAE,WAAYiuB,KAAMylC,GAAS0c,yBACjCqmB,GAAeC,mBAOhB,GANA,CACE,CACEtgG,MAAO4J,EAAE,aACTiuB,KAAMylC,GAASk2E,yBAIvB,CAAExzI,MAAO4J,EAAE,eAAgBiuB,KAAMylC,GAASq2E,yBAC1C,CAAE3zI,MAAO4J,EAAE,eAAgBiuB,KAAMylC,GAASu2E,yBAC1C,CAAE7zI,MAAO4J,EAAE,QAASiuB,KAAMylC,GAASo3E,oBAErC3tF,OAAQ,CAAElnD,GAAIwgG,EAAcxgG,UA3CP6C,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,GA+C1D,CC3DO,SAASilF,KACd,MAAM,EAAEloI,IAAMC,EAAAA,EAAAA,MACRiO,GAAWC,EAAAA,GAAAA,MACX2lD,EAAerW,KACf4K,EAAcyT,KAQdpe,EAAaT,KAEnB,OACE7+C,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,mBACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,aAAcY,GAAI88C,EAAWgW,GAAS6a,YACjD,CAAEn4E,MAAO4J,EAAE,wBAGflH,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,mBACdw3B,SAnB4ChwB,UAChD,MAAMwkI,QAAoB3jF,EAAYkC,EAAM,cAAe8f,GAC3DvW,EAAaJ,GAAS0X,gBAAiB,CAAEjuB,OAAQ,CAAElnD,GAAI+1I,EAAY/1I,KAAO,EAkBtEM,WAAYyJ,EAAE,UACdsmC,SAhBWA,IAAMp4B,GAAU,GAiB3BwY,aAAc,CACZ2kD,UAAW,YACXI,WAAY,YACZr0C,SAAS,EACT60G,0BAA0B,EAC1BhgE,mBAAmB,GACnBjzE,UAEFF,EAAAA,EAAAA,KAACozI,GAAc,CAACnQ,KAAK,eAI7B,CAEO,SAASxuD,KACd,MAAMpwB,GAASgZ,EAAAA,GAAAA,KACTlgE,EAAK3C,OAAO6pD,EAAOlnD,KACnB,EAAE+J,IAAMC,EAAAA,EAAAA,MACRiO,GAAWC,EAAAA,GAAAA,MACX2lD,EAAerW,MACbzkC,KAAMqxD,GAAatb,GAAiBxE,EAAM,cAAct0D,GAAIqhB,gBAE9D,MAAE8jD,IAAUC,EAAAA,GAAAA,MAWZ3d,EAAaT,KAEnB,GAAIotB,EACF,OACEjsE,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MACEk0E,GAAUnC,SACNloE,EAAE,wBAAyB,CAAEmsI,aAAc9hE,GAAUnC,WACrDloE,EAAE,aAERk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,aAAcY,GAAI88C,EAAWgW,GAAS6a,YACjD,CACEn4E,MAAOi0E,GAAUnC,SACbloE,EAAE,wBAAyB,CAAEmsI,aAAc9hE,GAAUnC,WACrDloE,EAAE,kBAIZlH,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,iBACdw3B,SA/B0ChwB,UAChD4kI,EAAc57D,cACZ47D,EAAc57D,eAAiBl9E,OAAO84I,GAAe57D,qBACjDloB,GAAuBiC,EAAM,cAAct0D,EAAGqhB,cAAe80H,GAClEhxE,EAA2CE,UAC5CxH,EAAaJ,GAAS0X,gBAAiB,CAAEjuB,OAAQ,CAAElnD,OAAO,EA2BpDM,WAAYyJ,EAAE,UACdsmC,SAzBSA,IAAMp4B,GAAU,GA0BzBwY,aAAc2jD,EAASrxE,UAEvBF,EAAAA,EAAAA,KAACozI,GAAc,CAACnQ,KAAK,aAK/B,CAEA,SAASmQ,GAAet2I,GACtB,MAAM,KAAEmmI,GAASnmI,GACX,EAAEoK,IAAMC,EAAAA,EAAAA,MACRosI,GAAwBpxE,EAAAA,GAAAA,IAAS,CAAE/kE,KAAM,6BAC/C,OACEkI,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,WACLE,MAAO4J,EAAE,aACTkf,YAAalf,EAAE,qBACf8lB,YAAU,EACVkuB,UAAW,IACXn6C,WAAqB,SAATkiI,KAEdjjI,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,aACLE,MAAO4J,EAAE,kBACTkf,YAAalf,EAAE,aACfnG,YAAY,EACZowC,UAAWjqC,EAAE,kFAEflH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,gBACLqG,KAAK,SACLnG,MAAO4J,EAAE,iBACTkf,YAAalf,EAAE,yBACf8lB,WAAYumH,EACZ1zG,IAAK,EACLlsB,IAAK,MACLw9B,UAAWjqC,EACT,yFAGJlH,EAAAA,EAAAA,KAACs6C,GAAc,CACbl9C,KAAK,YACLE,MAAO4J,EAAE,iBACTqzC,gBAAiBrzC,EAAE,wBACnBmf,QAAS,CACP,CACE/oB,MAAO4J,EAAE,aACTxM,MAAO,aAET,CACE4C,MAAO4J,EAAE,OACTxM,MAAO,QAGXsyB,YAAU,EACVjsB,WAAqB,SAATkiI,KAEd39H,EAAAA,EAAAA,MAACygE,GAAe,CAAC1oE,MAAO6J,EAAE,WAAYmoC,cAAY,EAAAnvC,SAAA,EAChDF,EAAAA,EAAAA,KAACuwC,GAAgB,CACfnzC,KAAK,UACLE,MAAO4J,EAAE,mBACTiqC,UAAWjqC,EACT,qGAGJlH,EAAAA,EAAAA,KAACuwC,GAAgB,CACfnzC,KAAK,oBACLE,MAAO4J,EAAE,qBACTiqC,UAAWjqC,EACT,sMAGJlH,EAAAA,EAAAA,KAACuwC,GAAgB,CACfnzC,KAAK,2BACLE,MAAO4J,EAAE,4BACTiqC,UAAWjqC,EACT,gJAMZ,CCpLO,SAASuuE,KACd,MAAM,EAAEvuE,IAAMC,EAAAA,EAAAA,MACR+6B,EAAegwC,KAErB,OACE5sE,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,aACT+5C,eAAgB/5C,EAAE,aAClB85C,UAAW95C,EACT,qFAEF0U,YAAa1U,EACX,qFAEFy5C,eAAe3gD,EAAAA,EAAAA,KAACyjE,GAAkB,CAAChgE,KAAM,gBAE3CzD,EAAAA,EAAAA,KAAC8uI,GAAa,CACZC,kBAAmBM,GACnBL,cAAez7D,GACfrxC,aAAcA,MAItB,CAYO,SAASsxG,KACd,MAAMC,EhQ2KD,WACL,MAAM,EAAEvsI,IAAMC,EAAAA,EAAAA,MACd,OAAO9C,EAAAA,EAAAA,UACL,KAAM,CACJ+H,IAAK,UACL9O,MAAO4J,EAAE,iBACTzD,KAAMysB,GAAkBqC,WACxB+xB,MAAO,qBACPv1B,WAAY,cAEd,CAAC7nB,GAEL,CgQvL+BwsI,GAM7B,OAJuBrvI,EAAAA,EAAAA,UACrB,IAAM,CAACovI,IACP,CAACA,GAGL,CCrCO,SAASE,KACd,MAAM,EAAEzsI,IAAMC,EAAAA,EAAAA,MACRsyD,EAAiBm9D,GAAsB,YACvCvyE,GAASgZ,EAAAA,GAAAA,MACT,MAAErwD,EAAOkT,KAAMqxD,EAAQ,QAAEhc,GAAYc,GAAqB5E,EAAM,aAAcpN,EAAOlnD,KACrF,KAAE+iB,GAAS+1C,GAAiBxE,EAAM,qBAClC8iB,GAASr0D,GAAMs0D,OAEfo/D,EAAc,IADAz+D,MAEdvwB,EAAaT,KAEnB,OAAIn3C,GAAchN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,IACpDgc,GAGHjsE,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAOk0E,GAAUnC,SACjBhvB,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,aAAcY,GAAI88C,EAAWgW,GAAS6a,YACjD,CAAEn4E,MAAOi0E,GAAUnC,WAErBzuB,eACE3gD,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAAS,IAAIm2D,KAAmBm6E,GAChCxwI,SAAU6F,GAAAA,GAAiBC,MAC3B3I,aAAcgxE,OAIpBvxE,EAAAA,EAAAA,KAAC09D,GAAc,CACbe,QAAS,CACPnhE,MAAO4J,EAAE,qBACTiuB,KAAMylC,GAAS6a,UACf/W,oBAAqB,aAEvBvU,KAAM,CACJ,CAAE7sD,MAAO4J,EAAE,WAAYiuB,KAAMylC,GAAS0X,gBAAiBzT,OAAQ,0BAC9D0V,GAAS,CACRj3E,MAAO4J,EAAE,sBACTiuB,KAAMylC,GAASi5E,0BACfh1E,OAAQ,qCAET0V,GAAS,CACRj3E,MAAO4J,EAAE,SACTiuB,KAAMylC,GAASk5E,cACfj1E,OAAQ,wBAGZxa,OAAQ,CAAElnD,GAAIo0E,EAASp0E,UArCP6C,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,GAyCrD,CC9CO,SAAS4pF,GAAgBC,GAC9B,MAAM3vF,GAASgZ,EAAAA,GAAAA,KACTlgE,EAAK3C,OAAO6pD,EAAOlnD,KACjB+iB,KAAMqxD,GAAalb,GAAqB5E,EAAM,aAAct0D,IAE9D,EAAE+J,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KAuDnB,OAtDqB9/C,EAAAA,EAAAA,UACnB,IAAM,CACJ,CACEyc,OAAQ5Z,EAAE,iBACV4b,KAAOmxH,IACLj0I,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAMwlI,EAAKC,QACXpsI,GAAI88C,EAAWgW,GAAS0X,gBAAiB,CAAEjuB,OAAQ,CAAElnD,GAAI82I,EAAK1iE,cAGlEzwC,KAAM,OACNuC,KAAM,OACNjkC,KAAM,KACNqW,SAAU,KAEZ,CACEqL,OAAQ5Z,EAAE,WACVzD,KAAM,OACN/I,MAAQu5I,GAAUD,GAAUG,oBAAsB5iE,GAAUnC,SAAW6kE,EAAKC,QAC5E90I,KAAM,WAER,CACE0hB,OAAQ5Z,EAAE,QACVzD,KAAM,OACN/I,MAAQu5I,GACND,GAAUG,oBACN5iE,GAAUmG,eAAel5D,WACzBy1H,EAAKG,MAAM51H,WACjBpf,KAAM,QAER,CACE0hB,OAAQ5Z,EAAE,aACVzD,KAAM,OACN/I,MAAQu5I,GAwBT,SAAyBA,GAC9B,MAAQ/zH,KAAMqxD,GAAatb,GAAiBxE,EAAM,cAAcwiF,EAAK1iE,SAAS/yD,eAC9E,OAAO+yD,GAAUgB,SACnB,CA3ByB8hE,CAAgBJ,GACjC70I,UAAMuC,GAER,CACEmf,OAAQ5Z,EAAE,YACVzD,KAAM,OACN/I,MAAQu5I,GAAUD,GAAUG,oBAAsB5iE,GAAUvZ,SAAWi8E,EAAKj8E,SAC5E54D,KAAM,YAER,CACE0hB,OAAQ5Z,EAAE,aACVzD,KAAM,OACN/I,MAAQu5I,GACND,GAAUG,oBAgBb,SAAsB5iE,GAC3B,MAAQrxD,KAAMo0H,GAAuBr+E,GAA0BxE,EAAM,wBAC/D8iF,EAAYD,GAAoBpiF,QAAQ1tD,MAC3C0yC,GAAYA,EAAQg9F,UAAY3iE,GAAUnC,WAE7C,OAAOmlE,GAAWA,SACpB,CArBcC,CAAajjE,IAAW/yD,WACxBy1H,EAAKM,UAAU/1H,WACrBpf,KAAM,eAGV,CAAC40I,GAAUG,oBAAqBvvF,EAAY2sB,EAAUrqE,GAG1D,CCzEA,SAASutI,GAAkB33I,GACzB,MAAM,IAAQqK,EAAAA,EAAAA,OACR,WAAEutE,EAAU,OAAEggE,GAAW53I,EAEzBszB,EAAiBojH,KACjB37H,EAAUk8H,KACV7xG,GAAe79B,EAAAA,EAAAA,UACnB,IACEwT,EAAQ1Z,QAAQke,GACd,CAAC,gBAAiB,UAAW,OAAQ,YAAa,YAAY9T,SAAS8T,EAAKyE,WAEhF,CAACjJ,KAGKq6C,QAASyiF,GAAcz3D,GAAwBzrB,EAAM,yBACrDS,QAASohB,GAAc4J,GAA4BzrB,EAAM,aAAc,CAC7Ek9E,eAAgB,CAAC,UAAW,aAGtBzuH,KAAMqxD,GAAalb,GAAqB5E,EAAM,cAAeijB,GAE/DkgE,EAAoBrjE,GAAUsjE,OAAO9tI,KAAKktI,GAASvmG,OAAOumG,MAAU,GAE1E,IAAIa,EAA8B,GAE9BH,GAAapjE,IAAaA,EAAS/U,SAAW8W,IAWhDwhE,EAV0BH,EAAUx2I,QACjC42I,IACEH,EAAkBrsI,SAASmlC,OAAOqnG,EAASxjE,aAC3CA,EAASsjE,OAAOtsI,SAASwsI,EAAS53I,OACjCo0E,EAASp0E,KAAO43I,EAASxjE,YAC1BwjE,EAASC,aACV1hE,GACAA,EAAU3rD,MAAM4pD,GAAaA,EAASp0E,KAAO43I,EAASxjE,aAGpBxqE,KAAKguI,GAAarnG,OAAOqnG,EAASxjE,aAG1E,MAAMzQ,EAA2B,CAC/Bk0E,YAAa,QACbn1C,SAAU,UACVo1C,cAAe,CAACvnG,OAAO6jC,GAAUp0E,IAAM,MAGrCy3I,EAAkBpxI,OAAS,IAAGs9D,EAAyB,YAAI8zE,GAE3DE,EAAkBtxI,OAAS,IAC7Bs9D,EAA2B,cAAI,IAAIA,EAAYm0E,iBAAkBH,IAEnE,MAAMhoG,EAAO6zB,GAAiB,CAC5Bvc,IAAKqN,EAAM,uBACXrhC,iBACA8R,eACAsoB,oBAAoB,EACpBsW,YAAaA,IAGf,OACE9gE,EAAAA,EAAAA,KAACitC,GAAiB,CAChB5vC,MAAO6J,EAAE,yBACTpB,SAAU4uI,EACVtkH,eAAgBA,EAChB8R,aAAcA,EACd4K,KAAMA,EACN/uC,YAAamJ,EAAE,oBAGrB,CCpEO,SAAS4sI,KACd,MAAMzvF,GAASgZ,EAAAA,GAAAA,MACPn9C,KAAMqxD,GAAalb,GAAqB5E,EAAM,aAAcpN,EAAOlnD,IAE3E,OAAOo0E,GAAWvxE,EAAAA,EAAAA,KAACk1I,GAAgB,CAAC3jE,SAAUA,IAAe,IAC/D,CAEO,SAAS2jE,GAAiBp4I,GAC/B,MAAM,SAAEy0E,GAAaz0E,EACrB,OAAOkD,EAAAA,EAAAA,KAACm1I,GAAiB,CAAC/wF,IAAKqN,EAAM,cAAc8f,EAASp0E,GAAGqhB,qBACjE,CAEO,SAAS22H,GAAkBr4I,GAChC,MAAM,IAAQqK,EAAAA,EAAAA,OACR,IAAEi9C,GAAQtnD,EACVszB,EAAiBojH,KACjB37H,EAAUk8H,KACV7xG,GAAe79B,EAAAA,EAAAA,UACnB,IACEwT,EAAQ1Z,QAAQke,GACd,CAAC,gBAAiB,UAAW,OAAQ,YAAa,aAAa9T,SAAS8T,EAAKyE,WAEjF,CAACjJ,IAEGi1B,EAAO6zB,GAAW,CACtBvc,IAAKA,EACLh0B,iBACA8R,eACAsoB,oBAAoB,KAEhB,GAAErtD,IAAOkgE,EAAAA,GAAAA,KAET+3E,ECxCD,SACLlsG,EACAwrC,GAEA,MAAM,EAAExtE,IAAMC,EAAAA,EAAAA,MACRy4D,EAAa4qD,MAEXtqG,KAAMqxD,GAAalb,GAAqB5E,EAAM,aAAcijB,GAsBpE,OApB2B54E,EAAAA,EAAAA,cACxB+4I,IACCj1E,EAAW,CACTviE,MAAO6J,EAAE,8BAA+B,CAAEoV,MAAOu4H,EAAMrxI,SACvDu1B,MAAQk7G,GAAeA,EAAK92I,GAC5B27B,MAAO+7G,EACP7rG,cAAe,CAAC,CAAEloB,OAAQ,OAAQgC,KAAOmxH,GAAeA,EAAKC,UAC7DjrG,SAAUA,KACR,MAAMosG,EAAUR,EAAM9tI,KAAKktI,GAASA,EAAK92I,KAIzC,OAHYqyD,GAAaiC,EAAM,cAAcijB,KAAe,CAC1DmgE,MAAOtjE,GAAUsjE,MAAQ,IAAItjE,EAASsjE,SAAUQ,GAAWA,GAEnD,EAEZr2I,eAAgBkI,EAAE,iCAAkC,CAAEoV,MAAOu4H,EAAMrxI,SACnE0lC,cACA,GAEJ,CAAC02B,EAAY14D,EAAGgiC,EAAYwrC,EAAYnD,GAG5C,CDUkC+jE,CAC9BxoG,EAAK00B,wBACLrkE,GAAM,IAEFo4I,EDkCD,WACL,MAAM,WAAEp9G,EAAU,UAAEE,GAAcK,MAC3B57B,EAAOsuC,IAAY1vC,EAAAA,EAAAA,YAS1B,OAPAK,EAAAA,EAAAA,YAAU,KACJe,EACFq7B,GAAWn4B,EAAAA,EAAAA,KAACy0I,GAAiB,IAAK33I,KAElCu7B,GACF,GACC,CAACv7B,EAAOq7B,EAAYE,IAChB+S,CACT,CC9CgCoqG,GAExBC,EE1CD,SAA6BvsG,EAAqCwrC,GACvE,MAAMrwB,GAASgZ,EAAAA,GAAAA,KACTlgE,EAAK3C,OAAO6pD,EAAOlnD,KACnB,EAAE+J,IAAMC,EAAAA,EAAAA,MACRksE,E/T0jBD,SAILhtD,GAQA,MAAM,QAAE1f,EAAO,YAAE41D,EAAW,aAAE1mD,GAAiBwQ,GAAW,CAAC,GACrD,EAAEnf,IAAMC,EAAAA,EAAAA,MAkBd,OAjBe9C,EAAAA,EAAAA,UACb,KAAM,CACJyc,OAAQuF,GAASvF,QAAU5Z,EAAE,iBAC7B4b,KAAOzG,IACLrc,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAM4N,EAAK63H,QACXvsI,SAAS,KACThB,SAAUkP,GAAgBlP,EAAU,IAAMA,IAAU0V,QAAQ1a,IAGhEvC,KAAMm9D,OAAc56D,EAAY0kB,GAASjnB,MAAQ,OACjD0hC,KAAM,OACNuC,KAAM,OACNyB,aAAa,KAEf,CAACjvB,EAAc0mD,EAAal2C,GAASjnB,KAAMuH,EAAS0f,GAASvF,OAAQ5Z,GAGzE,C+T1lBiCwuI,CAAiB,CAAE7/H,cAAc,EAAM0mD,aAAa,IAC7EvzB,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAACgvE,IAAyB,CAACA,IACzDzT,EAAaH,KAEb5nD,EAAUk8H,KACVloG,GAAsBxnC,EAAAA,EAAAA,UAC1B,IACEwT,EAAQ1Z,QAAQke,GACd,CAAC,YAAa,UAAW,OAAQ,YAAa,YAAY9T,SAAS8T,EAAKyE,WAE5E,CAACjJ,KAGKqI,KAAMqxD,GAAalb,GAAqB5E,EAAM,aAAcijB,GA8BpE,OA5ByBihE,IACvB/1E,EAAW,CACTviE,MAAO6J,EAAE,qBAAsB,CAAEoV,MAAOq5H,EAAcnyI,SACtDzF,YAC2B,IAAzB43I,EAAcnyI,OACV0D,EAAE,yDACFA,EAAE,oEAAqE,CACrEoV,MAAOq5H,EAAcnyI,SAE7BwoC,iBAAkB9kC,EAAE,qBAAsB,CAAEoV,MAAOq5H,EAAcnyI,SACjEs1B,MAAO68G,EAAcv2I,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QAC7D27B,MAAO62B,GACPtoD,UAAU,EACVukC,sBACA7C,gBACAE,aACAD,SAAUA,KACR,MAAM2sG,EAAmBD,EAAc5uI,KAAKktI,GAASA,EAAK92I,KACpD04I,EAAiBtkE,GAAUsjE,MAC7BtjE,GAAUsjE,MAAM12I,QAAQ23I,IAAoBF,EAAiBrtI,SAASutI,KACtE,GAIJ,OAHYtmF,GAAaiC,EAAM,cAAct0D,EAAGqhB,cAAe,CAC7Dq2H,MAAOgB,GAEC,GAEZ,CAGN,CFN2BE,CAAoBjpG,EAAK00B,wBAAyBrkE,GAAM,IAE3Ew4B,GAAiBtxB,EAAAA,EAAAA,UACrB,IAAM,CACJ,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVvH,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,mBACTP,QAASA,IACP4uI,EAAsB,CAAEb,OAAQU,EAAyB1gE,WAAYv3E,GAAM,MAE/E,CAAEsG,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BqC,QAASuB,EAAAA,GAAcC,QACvB3B,KAAM0mE,GAAAA,GACNtsE,MAAO4J,EAAE,sBACTP,QAAUkuI,GAAkBY,EAAiBZ,GAC7CvtI,UAAU,KAGd,CAACiuI,EAAuBH,EAAyBK,EAAkBt4I,EAAI+J,IAGzE,OACElH,EAAAA,EAAAA,KAACkkC,GAAS,CACR9T,eAAgBA,EAChBuF,eAAgBA,EAChBuM,aAAcA,EACd+C,gBAAiB/9B,EAAE,uBACnBg+B,gBAAiBh+B,EAAE,kBACnBi+B,sBAAuBj+B,EAAE,iDACzBq+B,sBAAsBvlC,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrCwN,qBAAsBp+B,EAAE,mBACxBm+B,sBAAuBA,IACrBkwG,EAAsB,CAAEb,OAAQU,EAAyB1gE,WAAYv3E,GAAM,QAEzE2vC,GAGV,CGvFO,SAAS+mG,KACd,MAAM,EAAE3sI,IAAMC,EAAAA,EAAAA,OACR,GAAEhK,IAAOkgE,EAAAA,GAAAA,MACPn9C,KAAMqxD,GAAalb,GAAqB5E,EAAM,aAAct0D,GAC9DizB,EPwBD,WACL,MAAM4lH,EhQuKD,WACL,MAAM,EAAE9uI,IAAMC,EAAAA,EAAAA,MACd,OAAO9C,EAAAA,EAAAA,UACL,KAAM,CACJ+H,IAAK,WACL9O,MAAO4J,EAAE,aACTzD,KAAMysB,GAAkBqC,WACxB+xB,MAAO,sBACPv1B,WAAY,cAEd,CAAC7nB,GAEL,CgQnLgC+uI,GAM9B,OAJuB5xI,EAAAA,EAAAA,UACrB,IAAM,CAAC2xI,IACP,CAACA,GAGL,COhCyBE,GACjBr+H,EAAUk8H,GAAgB,CAAEI,qBAAqB,IACjDjyG,GAAe79B,EAAAA,EAAAA,UACnB,IACEwT,EAAQ1Z,QAAQke,GAAS,CAAC,UAAW,OAAQ,WAAY,aAAa9T,SAAS8T,EAAKyE,WACtF,CAACjJ,IAEGw7H,EAAe9hE,GAAUnC,SACzBtiC,EAAO6zB,GAAiB,CAC5Bvc,IAAKqN,EAAM,cACXrhC,iBACA8R,eACA4+B,YAAa,CACX++B,SAAU,WACVzwB,SAAUikE,GAEZ7oF,oBAAoB,IAGtB,OACExqD,EAAAA,EAAAA,KAACkkC,GAAS,CACRhC,aAAcA,EACd+C,gBAAiB/9B,EAAE,oCACnBg+B,gBAAiBh+B,EAAE,+BACnBi+B,sBAAuBj+B,EAAE,2DACpBqqE,GAAUmG,cACX5qC,EACA,CACE/nB,UAAW,EACXgU,MAAOA,IAAM,GACb3D,QAAS,EACT1Q,UAAW,GACXyQ,KAAM,EACNE,QAASA,OACTC,WAAYA,SAIxB,CCvBO,SAAS0tF,KACd,MAAM,EAAE97G,IAAMC,EAAAA,EAAAA,OACR,KAAE+Y,GAAS0jD,GAA6CnS,EAAM,iBAC9DkyD,EAAqB3+G,QAAQkb,GAAQA,EAAK5c,SAAW4c,EAAK5c,QAAc,MACxE8sB,EAAiBoxE,KACjBt/D,EAAei/D,KACfr0D,EAAO6zB,GAAsB,CACjCvc,IAAKqN,EAAM,gBACXrhC,iBACA8R,kBAEI,QAAEqzB,EAAO,UAAE7wC,GAAcooB,EACzBnX,ECxBD,SAAsCmX,GAC3C,MAAM,IAAQ3lC,EAAAA,EAAAA,MACR6zD,EAAerW,KACf0jF,EAAoBN,GAAqBj7F,EAAK00B,0BAC9C,KAAEthD,GAAS0jD,GAA6CnS,EAAM,iBAC9DkyD,EAAqB3+G,QAAQkb,GAAQA,EAAK5c,SAAW4c,EAAK5c,QAAc,MAE9E,OAAOe,EAAAA,EAAAA,UAAkC,IACG,CACxC,CACEZ,KAAMrJ,EAAewL,SACrBvC,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVvH,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,oBACTnG,WAAYA,IACV4iH,OACIhiH,EACAuF,EACE,4IAER1G,UAAWnG,EAAoBoG,KAC/B6C,QAAS,CACP,CACEG,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/BnD,MAAO4J,EAAE,oBACTP,QAASA,IAAMq0D,EAAaJ,GAASipD,kBAEvC,CACEpgH,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/BnD,MAAO4J,EAAE,0BACTP,QAASA,IAAMq0D,EAAaJ,GAASgqE,uBAEvC,CACEnhI,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/BnD,MAAO4J,EAAE,gCACTP,QAASA,IAAMq0D,EAAaJ,GAASu7E,+BAI3C,CAAE1yI,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,sBACTP,QAAS0hI,EACT/gI,UAAU,KAKb,CAACq8G,EAAoB0kB,EAAmBrtE,EAAc9zD,GAC3D,CDhCyBkvI,CAA6BtpG,GAC9C3K,EAAa+lG,GAAoB,CACrCC,qBAAsBr7F,EAAK00B,wBAC3B4mE,kBAAmBt7F,EAAKyoB,QACxB+J,QAAQ,IAEV/B,GAAqB,eACrB,MAAMzE,EAASvC,KA6Cf,OALA8B,GACE,CAAE3nB,QAAS,CAAC,mBAAoBgqB,KAAM,CAAC,kBAAmBP,YAAa,CAAC,oBAvC3Cr+D,EAAAA,EAAAA,cAC5BuR,IACC,GAAKA,GAASiwG,aACd,OAAQjwG,GAAS4tD,YACf,IAAK,cAEI,YADC5tD,GAASq9B,QAER6qB,IAGT,MACF,IAAK,OACH,GACO,qBADCloD,GAAS5J,KACf,CACE,OAAQ4J,GAASq9B,QACf,IAAK,WACL,IAAK,QACL,IAAK,SACL,IAAK,UACL,IAAK,UACL,IAAK,aAAc,CACjB,MAAM2rG,GAAe3xH,GAAa,IAAIlgB,MACnC8xI,GAAQA,EAAIn5I,KAAOkQ,EAAQiwG,eAE9B,IAAK+4B,EAAa,OACjBA,EAAmC3rG,OAASr9B,EAAQq9B,OACrD,KACF,EAEG6qB,GACA,EAGb,GAEF,CAACA,EAAS7wC,MASVpf,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,eACT+5C,eAAgB/5C,EAAE,eAClB85C,UAAW95C,EACT,qHAEFg6C,aAAc2X,GAAcC,EAAQ,eACpCl9C,YAAa1U,EACX,qHAEFy5C,eAAe3gD,EAAAA,EAAAA,KAACyjE,GAAkB,CAAChgE,KAAM,iBAE3CzD,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,wBACHizB,eAAgBA,EAChBuF,eAAgBA,EAChBuM,aAAcA,EACdC,WAAYA,EACZ8C,gBAAiB/9B,EAAE,6BACnBg+B,gBAEMh+B,EADJy8G,EACM,4CACA,sDAERx+E,sBAEMj+B,EADJy8G,EACM,wDAEA,yFAGRr8E,eAAgBq8E,OAAqBhiH,EAAYo2B,GAAAA,GACjDyN,kBAAmBm+E,EAAqBhuF,EAAe8C,MAAM,EAAG,QAAK92B,KACjEmrC,EACJ1K,gBAAiBl7B,EAAE,iBAI3B,C,uCEhHO,SAASqvI,KACd,MAAMz9E,EAASvC,MACT,IAAQpvD,EAAAA,EAAAA,MAEd,OACE7B,EAAAA,EAAAA,MAAC6G,GAAAA,EAAK,CACJshC,cAAY,EACZr6B,UAAQ,EACR/P,QAAQ,OACRhG,MAAO6J,CAAC,0CACRsvI,aACElxI,EAAAA,EAAAA,MAACmxI,GAAAA,EAAe,CACd1uI,KAAM8wD,GAAcC,EAAQ,0BAC5B7wD,UAAU,IACV0zB,OAAO,SACP87C,IAAI,sBAAqBv3E,SAAA,CAExBgH,CAAC,gDAAgD,KAAClH,EAAAA,EAAAA,KAACoZ,GAAAA,EAAmB,OAE1ElZ,SAAA,EAEDoF,EAAAA,EAAAA,MAAA,QAAApF,SAAA,CACGgH,CAAC;mEAC0D,KAC5DlH,EAAAA,EAAAA,KAAA,KACE+H,KAAMb,CAAC,iGAAiGhH,SACxGgH,CAAC,yDAELlH,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAsF,EAAAA,EAAAA,MAACsvB,GAAAA,EAAK,CAAC,aAAY1tB,CAAC,yCAA0C7D,QAAQ,UAASnD,SAAA,EAC7EF,EAAAA,EAAAA,KAACs8B,GAAAA,EAAK,CAAAp8B,UACJoF,EAAAA,EAAAA,MAACi3B,GAAAA,GAAE,CAAAr8B,SAAA,EACDF,EAAAA,EAAAA,KAACw8B,GAAAA,GAAE,CAAAt8B,SAAEgH,CAAC,eACNlH,EAAAA,EAAAA,KAACw8B,GAAAA,GAAE,CAAAt8B,SAAEgH,CAAC,sBAGV5B,EAAAA,EAAAA,MAACq3B,GAAAA,EAAK,CAAAz8B,SAAA,EACJoF,EAAAA,EAAAA,MAACi3B,GAAAA,GAAE,CAAC9zB,OAAO,aAAYvI,SAAA,EACrBoF,EAAAA,EAAAA,MAACs4B,GAAAA,GAAE,CAACgL,UAAW1hC,CAAC,OAAOhH,SAAA,EACrBF,EAAAA,EAAAA,KAAA,QAAAE,SAAOgH,CAAC,YACRlH,EAAAA,EAAAA,KAAA,KAAG6B,MAAO,CAAEvF,MAAO,QAAS4D,SAAEgH,CAAC,YAC/BlH,EAAAA,EAAAA,KAAA,KAAG6B,MAAO,CAAEvF,MAAO,OAAQ4D,SAAEgH,CAAC,iBAEhClH,EAAAA,EAAAA,KAAC49B,GAAAA,GAAE,CAACgL,UAAW1hC,CAAC,cAAchH,SAC3BgH,CAAC;mDAIN5B,EAAAA,EAAAA,MAACi3B,GAAAA,GAAE,CAAAr8B,SAAA,EACDoF,EAAAA,EAAAA,MAACs4B,GAAAA,GAAE,CAACgL,UAAW1hC,CAAC,OAAOhH,SAAA,EACrBF,EAAAA,EAAAA,KAAA,QAAAE,SAAOgH,EAAE,aACTlH,EAAAA,EAAAA,KAAA,KAAG6B,MAAO,CAAEvF,MAAO,QAAS4D,SAAEgH,CAAC,gBAEjC5B,EAAAA,EAAAA,MAACs4B,GAAAA,GAAE,CAACgL,UAAW1hC,CAAC,cAAchH,SAAA,CAC3BgH,CAAC;yBACU,KACZlH,EAAAA,EAAAA,KAAA,SACCkH,CAAC;;qEATE,WAcR5B,EAAAA,EAAAA,MAACi3B,GAAAA,GAAE,CAAAr8B,SAAA,EACDoF,EAAAA,EAAAA,MAACs4B,GAAAA,GAAE,CAACgL,UAAW1hC,CAAC,OAAOhH,SAAA,EACrBF,EAAAA,EAAAA,KAAA,QAAAE,SAAOgH,EAAE,aACTlH,EAAAA,EAAAA,KAAA,KAAG6B,MAAO,CAAEvF,MAAO,QAAS4D,SAAEgH,CAAC,mBAEjClH,EAAAA,EAAAA,KAAC49B,GAAAA,GAAE,CAACgL,UAAW1hC,CAAC,cAAchH,SAC3BgH,CAAC,uDANE,WASR5B,EAAAA,EAAAA,MAACi3B,GAAAA,GAAE,CAAAr8B,SAAA,EACDoF,EAAAA,EAAAA,MAACs4B,GAAAA,GAAE,CAACgL,UAAW1hC,CAAC,OAAOhH,SAAA,EACrBF,EAAAA,EAAAA,KAAA,QAAAE,SAAOgH,EAAE,cACTlH,EAAAA,EAAAA,KAAA,KAAG6B,MAAO,CAAEvF,MAAO,QAAS4D,SAAEgH,CAAC,mBAEjClH,EAAAA,EAAAA,KAAC49B,GAAAA,GAAE,CAACgL,UAAW1hC,CAAC,cAAchH,SAC3BgH,CAAC;;;qFANE,kBAcZlH,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAACyqE,GAAAA,EAAK,CAAAvqE,UACJF,EAAAA,EAAAA,KAAC8iC,GAAAA,EAAQ,CAAA5iC,UACPoF,EAAAA,EAAAA,MAACmqC,GAAAA,EAAI,CAACE,aAAa,MAAKzvC,SAAA,EACtBF,EAAAA,EAAAA,KAAA,OACE6B,MAAO,CACLga,WAAY,GACZnW,YAAa,IACbxF,UAEFF,EAAAA,EAAAA,KAAA,KAAAE,SAAIgH,CAAC,sCAEPlH,EAAAA,EAAAA,KAAC02I,GAA0B,KAC3B12I,EAAAA,EAAAA,KAAC22I,GAA0B,KAC3B32I,EAAAA,EAAAA,KAAC42I,GAA2B,aAMxC,CAEA,SAASF,KACP,MAAM,EAAExvI,IAAMC,EAAAA,EAAAA,OACPovE,EAAQC,GAAanpC,EAAAA,UAAe,GAWrCwpG,EAA0B,qJAKhC,OACEvxI,EAAAA,EAAAA,MAACwxI,GAAAA,EAAwB,CACvBh2H,QACE9gB,EAAAA,EAAAA,KAAC+2I,GAAAA,EAAoB,CACnB//G,UAAW,CACTvoB,KAAMvH,CAAC,4CACP/J,GAAI,wBAEN65I,iBAAkB9vI,CAAC;;;4DAKtBhH,SAAA,EAEDF,EAAAA,EAAAA,KAAC23C,GAAAA,EAAS,CAACr6C,MAAO4J,CAAC,QAAS0wC,QAAQ,6BAA4B13C,UAC9DF,EAAAA,EAAAA,KAACkP,GAAAA,GAAa,CAACgZ,YAAU,EAAC/Y,SAAUjI,CAAC,OAAQkI,SAAUlI,CAAC,SAAShH,SAtBtC,gCA0B7BF,EAAAA,EAAAA,KAAC23C,GAAAA,EAAS,CAACr6C,MAAO4J,CAAC,mBAAoB0wC,QAAQ,mCAAkC13C,UAC/EF,EAAAA,EAAAA,KAACi3E,GAAAA,EAAS,CACR3zE,SACEtD,EAAAA,EAAAA,KAAC42E,GAAAA,EAAe,CAAA12E,UACdF,EAAAA,EAAAA,KAAC62E,GAAAA,EAAmB,CAClB15E,GAAG,mCACH25E,OAAO,mCACP,aAAY5vE,CAAC,oBACbP,QAAU2J,IA3CE2mI,EAACnvH,EAAgBrZ,KACzCyoI,GAAczoI,EAAK,EAInBwoI,CAAkBnvH,EAsCqB+uH,QArCvCrgE,GAAU,IAsCEO,UAAWR,EAAS,KAAO,IAC3B9gE,SAAS,QACTpS,QAAQ,QACR2zE,gBAAiBA,IAAMR,GAAU,GAAOt2E,SAEvCq2E,EAASrvE,CAAC,oCAAsCA,CAAC,wBAGvDhH,UAEDF,EAAAA,EAAAA,KAACk3E,GAAAA,EAAa,CAAC/5E,GAAG,mCAAkC+C,SACjD22I,UAMb,CACA,SAASF,KACP,MAAM,EAAEzvI,IAAMC,EAAAA,EAAAA,OACPovE,EAAQC,GAAanpC,EAAAA,UAAe,GAWrC8pG,EAAkC,sBAcxC,OACE7xI,EAAAA,EAAAA,MAACwxI,GAAAA,EAAwB,CACvBh2H,QACE9gB,EAAAA,EAAAA,KAAC+2I,GAAAA,EAAoB,CACnB//G,UAAW,CACTvoB,KAAMvH,CAAC,8BACP/J,GAAI,yBAEN65I,iBAAkB9vI,CAAC;;;4DAKtBhH,SAAA,EAEDoF,EAAAA,EAAAA,MAACqyC,GAAAA,EAAS,CAAAz3C,SAAA,EACRF,EAAAA,EAAAA,KAAA,KAAAE,SAAIgH,CAAC,yCACLlH,EAAAA,EAAAA,KAACi3E,GAAAA,EAAS,CAAA/2E,UACRF,EAAAA,EAAAA,KAACk3E,GAAAA,EAAa,CAAC/5E,GAAG,kCAAiC+C,SA/B7B,kNAoC1BF,EAAAA,EAAAA,KAAC23C,GAAAA,EAAS,CAACr6C,MAAO4J,CAAC,QAAS0wC,QAAQ,8BAA6B13C,UAC/DF,EAAAA,EAAAA,KAACkP,GAAAA,GAAa,CAACgZ,YAAU,EAAC/Y,SAAUjI,CAAC,OAAQkI,SAAUlI,CAAC,SAAShH,SAvCpC,cA2C/BF,EAAAA,EAAAA,KAAC23C,GAAAA,EAAS,CAACr6C,MAAO4J,CAAC,mBAAoB0wC,QAAQ,oCAAmC13C,UAChFF,EAAAA,EAAAA,KAACi3E,GAAAA,EAAS,CACR3zE,SACEtD,EAAAA,EAAAA,KAAC42E,GAAAA,EAAe,CAAA12E,UACdF,EAAAA,EAAAA,KAAC62E,GAAAA,EAAmB,CAClB15E,GAAG,oCACH25E,OAAO,oCACP,aAAY5vE,CAAC,oBACbP,QAAU2J,IA5DE2mI,EAACnvH,EAAgBrZ,KACzCyoI,GAAczoI,EAAK,EAInBwoI,CAAkBnvH,EAuDqBqvH,QAtDvC3gE,GAAU,IAuDEO,UAAWR,EAAS,KAAO,IAC3B9gE,SAAS,QACTpS,QAAQ,QACR2zE,gBAAiBA,IAAMR,GAAU,GAAOt2E,SAEvCq2E,EAASrvE,CAAC,oCAAsCA,CAAC,wBAGvDhH,UAEDF,EAAAA,EAAAA,KAACk3E,GAAAA,EAAa,CAAC/5E,GAAG,oCAAmC+C,SAClDi3I,UAMb,CAEA,SAASD,GAAczoI,GAChBE,UAAUC,UAAUC,UAAUJ,EACrC,CAEA,SAASmoI,KACP,MAAM,EAAE1vI,IAAMC,EAAAA,EAAAA,OACPovE,EAAQC,GAAanpC,EAAAA,UAAe,GAWrC+pG,EAA6B,qGAKnC,OACE9xI,EAAAA,EAAAA,MAACwxI,GAAAA,EAAwB,CACvBh2H,QACE9gB,EAAAA,EAAAA,KAAC+2I,GAAAA,EAAoB,CACnB//G,UAAW,CACTvoB,KAAMvH,CAAC,0BACP/J,GAAI,qBAEN65I,iBAAiB,gPAMpB92I,SAAA,EAEDF,EAAAA,EAAAA,KAAC23C,GAAAA,EAAS,CAACr6C,MAAO4J,CAAC,QAAS0wC,QAAQ,0BAAyB13C,UAC3DF,EAAAA,EAAAA,KAACkP,GAAAA,GAAa,CAACgZ,YAAU,EAAC/Y,SAAUjI,CAAC,OAAQkI,SAAUlI,CAAC,SAAShH,SAvBzC,mBA2B1BF,EAAAA,EAAAA,KAAC23C,GAAAA,EAAS,CAACr6C,MAAO4J,CAAC,mBAAoB0wC,QAAQ,gCAA+B13C,UAC5EF,EAAAA,EAAAA,KAACi3E,GAAAA,EAAS,CACR3zE,SACEtD,EAAAA,EAAAA,KAAC42E,GAAAA,EAAe,CAAA12E,UACdF,EAAAA,EAAAA,KAAC62E,GAAAA,EAAmB,CAClB15E,GAAG,gCACH25E,OAAO,gCACP,aAAY5vE,CAAC,oBACbP,QAAU2J,IA5CE2mI,EAACnvH,EAAgBrZ,KACzCyoI,GAAczoI,EAAK,EAInBwoI,CAAkBnvH,EAuCqBsvH,QAtCvC5gE,GAAU,IAuCEO,UAAWR,EAAS,KAAO,IAC3B9gE,SAAS,QACTpS,QAAQ,QACR2zE,gBAAiBA,IAAMR,GAAU,GAAOt2E,SAEvCq2E,EAASrvE,CAAC,oCAAsCA,CAAC,wBAGvDhH,UAEDF,EAAAA,EAAAA,KAACk3E,GAAAA,EAAa,CAAC/5E,GAAG,gCAA+B+C,SAC9Ck3I,UAMb,CC5VO,MAAMC,GAA4C,CACvDC,IAAK,wFACLC,SACE,iGACF1/D,WAAY,mFACZ2/D,IAAK,8FACLC,SACE,sGACFC,UACE,+FACFC,WACE,gGACFC,IAAK,uFACLC,OACE,0GACF5mE,YACE,iGACF6mE,UACE,uHCdG,SAASC,GAAUj7I,GACxB,MAAM,IAAQqK,EAAAA,EAAAA,MACR6wI,EAAgBl7I,EAAMk7I,cAoBtBC,GACJ3yI,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAC85G,EAAAA,GAAK,CAAA55G,SAAC,+FAGPF,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAC85G,EAAAA,GAAK,CAAA55G,SAAC,WACPF,EAAAA,EAAAA,KAAA,OAAAE,SA3BgB,2EA4BhBF,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAC85G,EAAAA,GAAK,CAAA55G,SAAC,WACPF,EAAAA,EAAAA,KAAA,OAAAE,SAxBgB,4DAyBhBF,EAAAA,EAAAA,KAAA,UACAsF,EAAAA,EAAAA,MAACw0G,EAAAA,GAAK,CAAA55G,SAAA,CAAC,wBACiB,KACtBF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CAACC,GAAG,uBAAuB6zB,OAAO,SAAS87C,IAAI,sBAAqBv3E,SAAC,qBAI5EF,EAAAA,EAAAA,KAAA,UACAsF,EAAAA,EAAAA,MAACw0G,EAAAA,GAAK,CAAA55G,SAAA,CAAC,wBACiB,KACtBF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAG,2CACH6zB,OAAO,SACP87C,IAAI,sBAAqBv3E,SAC1B,2BAODg4I,GACJl4I,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SACGgH,EAAE,+LAODixI,GACJ7yI,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEoF,EAAAA,EAAAA,MAACw0G,EAAAA,GAAK,CAAA55G,SAAA,CAAC,gIAE6B,KAClCF,EAAAA,EAAAA,KAAA,KAAG+H,KAAMsvI,GAAepmE,YAAat1C,OAAO,SAAS87C,IAAI,sBAAqBv3E,SAAC,0BAE1E,IAAI,kCAGXF,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAC85G,EAAAA,GAAK,CAAA55G,SAAC,+FAGPF,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAC85G,EAAAA,GAAK,CAAA55G,SAAC,WACPF,EAAAA,EAAAA,KAAA,OAAAE,SArE2B,sGAyE/B,MAAyB,KAAlB83I,EACHC,EACkB,UAAlBD,EACEE,EACAC,CACR,CClDA,MAAMpP,GAAmC,CACvC,GAAI,YACJ/3D,MAAO,kBACPC,YAAa,yBAGR,SAAS4yC,GAAgB/mH,GAC9B,MAAM,IAAQqK,EAAAA,EAAAA,OACR,cAAE6wI,GAAkBl7I,EACpBk+D,EAAerW,KACf4K,EAAcyT,KAwCdpe,EAAaT,KACb9mD,EAEA6J,EADc,KAAlB8wI,EACM,mBACgB,UAAlBA,EACI,yBACA,gCAEJpqH,EACc,UAAlBoqH,EACI,CACElpE,KAAMkpE,EACN56I,KAAM,GACNwe,YAAa,GACbi5D,eAAgB,GAChBif,UAAW,SAEK,gBAAlBkkD,EACE,CACElpE,KAAMkpE,EACN56I,KAAM,GACNwe,YAAa,GACbi5D,eAAgB,GAChBujE,iBAAkB,GAClBv1D,UAAW,EACXiP,qBAAsB,EACtB9nD,MAAO,GACPquG,YAAa,IAEf,CACEvpE,KAAMkpE,EACN56I,KAAM,GACNwe,YAAa,GACbi5D,eAAgB,GAChB3qE,OAAQ,GACR4pF,UAAW,QACX5N,iCAAiC,GAG3C,OACE5gF,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAOA,EACP+iD,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,eAAgBY,GAAI88C,EAAWgW,GAASooD,cACnD,CAAE1lH,MAAOD,OAGb2C,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,oBACdw3B,SAxFmDhwB,UACvD,MAAM,eAAEmmE,KAAmBtE,GAAcrwD,EAEzC,IAAIk4H,EAAqC,GACb,gBAAxBt7I,EAAMk7I,gBACRI,QAAyBE,GAAqBp4H,EAAKi6C,aAAe,GAAIjzD,GACtEgZ,EAAKk4H,iBAAmBA,GAG1B,MAAM7O,EACoB,gBAAxBzsI,EAAMk7I,cAAkC,0BAA4B,cAChEO,QAAqBhpF,EAAYkC,EAAM,IAAI83E,KAAYh5D,GAEvDoQ,EAA+B,GAEjC9L,GAAgBrxE,OAAS,GAC3Bm9E,EAAS58E,KAAKy0I,GAAqBD,EAAc1jE,GAAkB,GAAI,KAI/C,gBAAxB/3E,EAAMk7I,eACN93H,GAAMi6C,aAAa32D,QACnB0c,EAAKi6C,YAAY32D,OAAS,GAE1Bm9E,EAAS58E,KAAK00I,GAAuBF,EAAcH,GAAoB,GAAI,KAInD,KAAtBG,EAAazpE,MAAe5uD,EAAKhW,OAAO1G,OAAS,GACnDm9E,EAAS58E,KAAK20I,GAAaH,EAAcr4H,EAAKhW,eAE1CigC,QAAQC,IAAIu2C,GAElB3lB,EAAaJ,GAAS82B,iBAAkB,CACtCrtC,OAAQ,CAAEmsB,eAAgBu4D,GAAMwP,EAAazpE,MAAO3xE,GAAIo7I,EAAap7I,KACrE,EAsDEuyC,sBAAsB,EACtBlC,SAAUA,IAAMwtB,EAAaJ,GAASooD,aACtCp1F,aAAcA,EAAa1tB,UAE3BF,EAAAA,EAAAA,KAAC24I,GAAe,CAACX,cAAeA,QAIxC,CAEO,SAAS/O,KACd,MAAM,EAAE/hI,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACfN,GAASgZ,EAAAA,GAAAA,KACTlgE,EAAK3C,OAAO6pD,EAAOlnD,IAEnBosI,EACsB,0BAA1BllF,EAAOmsB,eAA6C,0BAA4B,cAE5Ei5D,EAAmBxzE,GAAkBxE,EAAM,IAAI83E,KAAWpsI,EAAGqhB,eAC7Do6H,EAAiB3iF,GACrBxE,EAAM,gBAAgBt0D,EAAGqhB,+BAErB+xD,EAAYk5D,EAAiBvpH,KAC7B24H,EAAaD,EAAe14H,KAM5B44H,EAA0B7iF,GAHJ,0BAA1B5R,EAAOmsB,eACH/e,EAAM,gBAAgBt0D,EAAGqhB,gCACzB,IAGAu6H,EAA2BD,EAAwB54H,KAGnD84H,EAAyBH,GAAY3mF,QAgDrCtN,EAAaT,KAEb80F,KACJ1oE,IACAsoE,GAC2B,0BAA1Bx0F,EAAOmsB,iBAA6CuoE,GAIjDG,EAAUzP,EAAiBz8H,OAAS4rI,EAAe5rI,OAAS8rI,EAAwB9rI,MAE1F,IAAKisI,IAAa1oE,GAAa2oE,EAC7B,OACE5zI,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTL,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,eAAgBY,GAAI88C,EAAWgW,GAASooD,cACnD,CAAE1lH,MAAO4J,EAAE,uBAGb+xI,IAAaC,IAAWl5I,EAAAA,EAAAA,KAACkqD,GAAW,IACrCu/E,EAAiBz8H,QAAShN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOy8H,EAAiBz8H,QAC5D4rI,EAAe5rI,QAAShN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAO4rI,EAAe5rI,QACxD8rI,EAAwB9rI,QAAShN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAO8rI,EAAwB9rI,WAKjF,MAAM4gB,EACe,UAAnB2iD,EAAUzB,KACN,IAAKyB,EAAWsE,eAAgBmkE,GACb,gBAAnBzoE,EAAUzB,KACR,IACKyB,EACHsE,eAAgBmkE,EAChB7+E,YAAa4+E,GAA0B7mF,SAEzC,IACKqe,EACHsE,eAAgBmkE,EAChB9uI,OAAQqmE,EAAUpV,gBAAgBjxD,QAAQgoD,SAAW,IAG/D,OACE5sD,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MACEkzE,GAAWnzE,KACP8J,EAAE,yBAA0B,CAAEiyI,cAAe5oE,GAAWnzE,OACxD8J,EAAE,aAERk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,eAAgBY,GAAI88C,EAAWgW,GAASooD,cACnD,CACE1lH,MAAOizE,GAAWnzE,KACd8J,EAAE,yBAA0B,CAAEiyI,cAAe5oE,GAAWnzE,OACxD8J,EAAE,kBAIZlH,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,kBACdw3B,SA5GmDhwB,UACvD,MAAM,OAAExE,EAAM,eAAE2qE,KAAmBukE,GAAoBl5H,EAEvD,IAAIk4H,EAAqC,GACX,0BAA1B/zF,EAAOmsB,iBACT4nE,QAAyBE,GAAqBp4H,EAAKi6C,aAAe,GAAIjzD,GACtEgZ,EAAKk4H,iBAAmBA,GAI1B,MAAMiB,QAAyB7pF,GAC7BiC,EAAM,IAAI83E,KAAWpsI,EAAGqhB,cACxB46H,GAEIz4D,EAAW,GAEjBA,EAAS58E,KACPy0I,GAAqBa,EAAkBxkE,GAAkB,GAAImkE,GAA0B,KAG3D,cAA1B30F,EAAOmsB,gBACTmQ,EAAS58E,KAAK20I,GAAanoE,EAAwBrmE,GAAU,KAKnC,0BAA1Bm6C,EAAOmsB,gBACPtwD,GAAMi6C,aAAa32D,QACnB0c,EAAKi6C,YAAY32D,OAAS,GAE1Bm9E,EAAS58E,KACP00I,GACEv4H,EACAk4H,GAAoB,GACpBW,GAA0B7mF,SAAW,WAKrC/nB,QAAQC,IAAIu2C,GAElB3lB,EAAaJ,GAAS82B,iBAAkB,CACtCrtC,OAAQ,CAAElnD,GAAIk8I,EAAiBl8I,GAAIqzE,eAAgBnsB,EAAOmsB,iBAC1D,EAkEE9gC,sBAAsB,EACtBlC,SAAUA,IACRwtB,EAAaJ,GAAS82B,iBAAkB,CACtCrtC,OAAQ,CAAElnD,KAAIqzE,eAAgBu4D,GAAMx4D,EAAUzB,SAGlDlhD,aAAcA,EAAa1tB,UAE3BF,EAAAA,EAAAA,KAAC24I,GAAe,CAACX,cAAeznE,EAAUzB,WAIlD,CAEO,SAASwqE,KACd,MAAM,EAAEpyI,IAAMC,EAAAA,EAAAA,MAEd,MAAO,CACL+C,OAAQhD,EACN,iJAEF27E,UAAW37E,EACT,wGAEFqyI,cAAeryI,EACb,sGAEF8iC,MAAO9iC,EACL,6HAEFg/E,gCAAiCh/E,EAC/B,8SAEFsyI,kBAAmBtyI,EACjB,yIAGN,CAEA,SAASyxI,GAAgB77I,GACvB,MAAM,IAAQqK,EAAAA,EAAAA,OACR,cAAE6wI,GAAkBl7I,EACpB28I,EAA4BH,KAClC,OACEh0I,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,OACLE,MAAO4J,EAAE,QACTkf,YAAalf,EAAE,cACf8lB,YAAU,KAEZhtB,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB9+C,MAAO4J,EAAE,eACT9J,KAAK,cACLgpB,YAAalf,EAAE,wBAEjBlH,EAAAA,EAAAA,KAACgtH,GAA0B,CAAkB5vH,KAAK,eAAe4vB,YAAU,IACxD,UAAlBgrH,IACCh4I,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,cACLE,MAAO4J,EAAE,qBACTiqC,WACE7rC,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEoF,EAAAA,EAAAA,MAACw0G,EAAAA,GAAK,CAAA55G,SAAA,CAAC,mEAELF,EAAAA,EAAAA,KAAA,SAAM,YACI,IACVA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,QAAAE,UACEF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,8BAELF,EAAAA,EAAAA,KAAA,YAEDkH,EACC,uKAINkf,YAAalf,EAAE,2BACf8lB,YAAU,KAGdhtB,EAAAA,EAAAA,KAACy/F,GAA2B,CAC1BriG,KAAK,iBACL+zC,UAAWjqC,EAAE,8DAEI,gBAAlB8wI,IACC1yI,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAC05I,GAA8B,KAC/B15I,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,uBACLD,GAAG,uBACHsG,KAAK,SACLnG,MAAO4J,EAAE,2BACTiqC,UAAWsoG,EAA0BF,cACrC9oG,SAAWp0B,GACT7hB,OAAOsT,WAAWuO,IAAS,OACvB1a,EACAuF,EAAE,4EAGVlH,EAAAA,EAAAA,KAACm8D,GAAoB,CACnB/+D,KAAK,YACLD,GAAG,YACHG,MAAO4J,EAAE,aACTkf,YAAa,GACb+qB,UAAWsoG,EAA0B52D,UACrCx8D,QAAS,CACP,CAAE3rB,MAAO,EAAG4C,MAAO4J,EAAE,eACrB,CAAExM,MAAO,EAAG4C,MAAO4J,EAAE,gBACrB,CAAExM,MAAO,EAAG4C,MAAO4J,EAAE,qBACrB,CAAExM,MAAO,EAAG4C,MAAO4J,EAAE,cACrB,CAAExM,MAAO,EAAG4C,MAAO4J,EAAE,yBACrB,CAAExM,MAAO,EAAG4C,MAAO4J,EAAE,wBAGzBlH,EAAAA,EAAAA,KAAC+lE,GAAe,CAAC12B,cAAY,EAAAnvC,UAC3BF,EAAAA,EAAAA,KAACu2I,GAAwB,OAE3Bv2I,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,QACLD,GAAG,QACHG,MAAO4J,EAAE,SACTiqC,UAAWsoG,EAA0BzvG,WAIxB,KAAlBguG,IACCh4I,EAAAA,EAAAA,KAAC4/F,GAAmB,CAClBxuD,eAAgBlqC,EAAE,UAClBiqC,UAAWsoG,EAA0BvvI,OACrC9M,KAAK,YAGT4C,EAAAA,EAAAA,KAAC+lE,GAAe,CAAC12B,cAAY,EAAAnvC,UAC3BF,EAAAA,EAAAA,KAACm4C,GAAkB,CACjB/6C,KAAwB,gBAAlB46I,EAAkC,cAAgB,YACxD16I,MAAyC4J,EAAhB,gBAAlB8wI,EAAoC,mBAAwB,aACnEvlI,OAAO,OACPua,WAA8B,gBAAlBgrH,EACZ7mG,WAAWnxC,EAAAA,EAAAA,KAAC+3I,GAAS,CAACC,cAAeA,IACrCvnG,SAAWp0B,IACT,GAAsB,gBAAlB27H,EAIJ,OADY9+F,GAAc78B,GAClB80G,YACN,EAEOjqH,EAAE,oCACX,MAIa,KAAlB8wI,IACCh4I,EAAAA,EAAAA,KAACy3C,GAAa,CAACn6C,MAAO4J,EAAE,WAAWhH,UACjCF,EAAAA,EAAAA,KAACuwC,GAAgB,CACfjzC,MAAO4J,EAAE,mCACTkqC,eAAgBlqC,EAAE,mCAClBiqC,UAAWsoG,EAA0BvzD,gCACrC9oF,KAAK,wCAMjB,CAEAsR,eAAegqI,GAAanoE,EAAsBrmE,GAChD,MAAM,MAAEwzE,EAAK,QAAEC,GAAYH,GACzBjN,EAAUpV,gBAAgBjxD,QAAQgoD,SAAY,GAC9ChoD,GAAW,IAGPs6E,EAAyB7G,EAAQ52E,KAAKzJ,GAC1CiyD,GAAYkC,EAAM,gBAAgB8e,EAAUpzE,GAAGqhB,qBAAsB,CACnErhB,GAAIG,EAAMH,GACV6mF,cAAc,MAGZS,EAAsB/G,EAAM32E,KAAKzJ,GACrCiyD,GAAYkC,EAAM,gBAAgB8e,EAAUpzE,GAAGqhB,qBAAsB,CACnEphB,KAAME,EAAMF,KACZgzE,aAAcG,EAAUH,iBAK5B,aADsBjmC,QAAQC,IAAI,IAAIo6C,KAA2BC,GAEnE,CAEA/1E,eAAe8pI,GACbjoE,EACAopE,EACAX,GAEA,MAAM,MAAEt7D,EAAK,QAAEC,GAAYH,GACzBw7D,EACAW,GAGF,GAAqB,IAAjBj8D,EAAMl6E,QAAmC,IAAnBm6E,EAAQn6E,OAChC,OAGF,MAAMghF,EAAyB7G,EAAQ52E,KAAK42F,GAC1CpuC,GAAYkC,EAAM,gBAAgB8e,EAAUpzE,GAAGqhB,8BAA+B,CAC5ErhB,GAAIwgG,EAAcxgG,GAClB6mF,cAAc,MAGZS,EAAsB/G,EAAM32E,KAAK42F,GACrCpuC,GAAYkC,EAAM,gBAAgB8e,EAAUpzE,GAAGqhB,8BAA+B,CAC5ErhB,GAAIwgG,EAAcxgG,OAKtB,aADsBgtC,QAAQC,IAAI,IAAIo6C,KAA2BC,GAEnE,CAEA/1E,eAAe+pI,GACbloE,EACAqpE,EACAC,GAEA,IAAK,MAAMx9H,KAAQw9H,QACXtqF,GAAYkC,EAAM,gBAAgB8e,EAAUpzE,GAAGqhB,gCAAiC,CACpFrhB,GAAIkf,EAAKlf,GACT6mF,cAAc,IAIlB,IAAK,MAAM3nE,KAAQu9H,QACXrqF,GAAYkC,EAAM,gBAAgB8e,EAAUpzE,GAAGqhB,gCAAiC,CACpFrhB,GAAIkf,EAAKlf,IAGf,CAIAuR,eAAe4pI,GACbn+E,EACAjzD,GAEA,MAAMy5E,EAAsB,GACtBm5D,EAAoC3/E,EAAYpzD,KAAKuvI,IAClD,CAAEn5I,GAAIm5I,EAAIn5I,GAAIinD,IAAK,GAAI3gD,KAAM,GAAIrG,KAAM,OAuBhD,OArBA+8D,EAAY/gC,SAASm3C,IACnB,MAAMwpE,EAAU1qF,GACdoC,EAAM,oBAAoB8e,EAAUpzE,GAAGqhB,cAEtCkN,MAAM7nB,IACL,GAAIA,EAAOquD,QAAQ1uD,OAAS,EAAG,CAC7B,MAAM8yI,EAAMwD,EAAgBt1I,MAAM8xI,GAAQA,EAAIn5I,KAAOozE,EAAUpzE,KAC3Dm5I,IACFA,EAAIlyF,IAAMvgD,EAAOquD,QAAQ,GAAG9N,KAAO,GACnCkyF,EAAI7yI,KAAOI,EAAOquD,QAAQ,GAAGzuD,MAAQ,GAEzC,KAEDuL,OAAM,KACL,MAAM,IAAIsV,MAAMpd,EAAE,gDAAiD,CAAE/J,GAAIozE,EAAUpzE,KAAM,IAG7FwjF,EAAS58E,KAAKg2I,EAAQ,UAGlB5vG,QAAQC,IAAIu2C,GACXm5D,CACT,CAEA,SAASJ,KACP,MAAM1nH,EAAUwvE,KACV3pF,EAAUspF,MACV,EAAEj6F,IAAMC,EAAAA,EAAAA,MACR+C,EAASovI,KAEf,OACEt5I,EAAAA,EAAAA,KAACs7F,GAA8B,CAC7Bl+F,KAAM,cACND,GAAI,cACJG,MAAO4J,EAAE,qBACTkf,YAAalf,EAAE,sBACfurB,iBAAkBvrB,EAAE,0BACpBylB,eAAgBzlB,EAAE,6BAClB8lB,YAAY,EACZmkB,UAAWjnC,EAAOsvI,kBAClBp1F,IAAKqN,EAAM,gBACXvvB,aAAcrqB,EACduY,eAAgB4B,EAChB8uC,YAAa,CAAEgO,KAAM,IACrBroD,oBAAqBA,CAACuzH,EAAwBC,IAC5CD,EAAY78I,KAAO88I,EAAY98I,IAIvC,CCrkBA,MAAMmvC,IAA0B5pC,EAAAA,EAAAA,IAAOw3I,GAAAA,IAA0Bt3I,WAAA,CAAAC,YAAA,qBAAjCH,CAAiC,oFAM3Dy3I,IAA6Bz3I,EAAAA,EAAAA,IAAOw3I,GAAAA,IAA0Bt3I,WAAA,CAAAC,YAAA,qBAAjCH,CAAiC,oFAQpE,SAAS03I,GAA2Bt9I,GAOlC,MAAM,qBACJu2F,EAAoB,qBACpBgnD,EAAoB,mBACpBC,EAAkB,wBAClBC,EAAuB,SACvBp5H,GACErkB,GACE,EAAEoK,IAAMC,EAAAA,EAAAA,MAERqzI,EAAW3hF,GADFtC,KACwB,eACjCj5D,EACF4J,EADUmzI,EACR,gCACA,yBACAz1F,EAAaT,KAEnB,OAAIkvC,GAEArzF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAOA,EAAO6jB,SAAUA,EAASjhB,UAC3CF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS85B,4BAA6B,CACnDrwC,OAAQ,CAAElnD,GAAIk2F,EAAqBl2F,MAClC+C,SAEFmzF,EAAqBj2F,SAK1Bm9I,GAA2BD,IAAuBjnD,GAElD/tF,EAAAA,EAAAA,MAAC4b,GAAU,CAAC5jB,MAAOA,EAAO6jB,SAAUA,EAASjhB,SAAA,CAC1CgH,CAAC,oBACFlH,EAAAA,EAAAA,KAAA,QAAAE,UACEF,EAAAA,EAAAA,KAAC6Y,GAAAA,EAAO,CACNnS,UAAU,gCACVoS,eAAe9Y,EAAAA,EAAAA,KAAA,OAAAE,SAAMgH,CAAC,kCACtB6R,aACE/Y,EAAAA,EAAAA,KAAA,OAAAE,UACEoF,EAAAA,EAAAA,MAACw0G,EAAAA,GAAK,CAAA55G,SAAA,CAAC,8BACuBo6I,EAAmB,oHACiC,KAChFt6I,EAAAA,EAAAA,KAAA,KAAG+H,KAAMyyI,EAAU7+G,OAAO,SAAS87C,IAAI,sBAAqBv3E,SAAC,4BAMnEkD,SAAS,QAAOlD,UAEhBF,EAAAA,EAAAA,KAACm6I,GAA0B,WAMhCI,GAA4BD,GAAuBjnD,EAajD,MAXH/tF,EAAAA,EAAAA,MAAC4b,GAAU,CAAC5jB,MAAO4J,CAAC,wBAAyBia,SAAUA,EAASjhB,SAAA,CAC7DgH,CAAC,oBACFlH,EAAAA,EAAAA,KAAA,QAAAE,UACEF,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CAACC,QAASiF,CAAC,+CAA+ChH,UAChEF,EAAAA,EAAAA,KAACssC,GAAuB,UAQpC,CC7DO,SAAS8kD,GAAuBt0F,GAIrC,MAAM,IAAQqK,EAAAA,EAAAA,MACR6zD,EAAerW,KACfN,GAASgZ,EAAAA,GAAAA,KACTo9E,EAAQ39I,GAAO49I,kBAAoB59I,EAAM49I,kBAAoBr2F,EAAOuxC,UAEpEhxC,EAAaT,MAEjBjkC,KAAMu1E,EAAe,MACrBzoF,EAAK,QACLuoD,GACEc,GAA4B5E,EAAM,sBAAuBgpF,IACvD,KAAEv6H,GAAS0jD,GAA6CnS,EAAM,uBAkBpE4G,GACE,CAAE3nB,QAAS,CAAC,mBAAoBgqB,KAAM,CAAC,oBAlBV5+D,EAAAA,EAAAA,cAC5BuR,IACC,GACO,SADCA,GAAS4tD,WAEb,OAAQ5tD,GAAS5J,MACf,IAAK,MACL,IAAK,eACL,IAAK,iBACL,IAAK,mBACE8xD,IAIb,GAEF,CAACA,KAOH,MAAMuvC,EAA+C,CAAC,EACtD,GAAI5kF,GAAM5c,SAASmhE,KAAK5qC,QAAQgsC,SAASriE,OAAQ,CAC/C,MAAM,QAAEF,GAAY4c,EACpB5c,GAASmhE,KAAK5qC,QAAQgsC,SAASzsC,SAAQ,EAAEhtB,EAAKogC,KAAUs4D,EAAc,GAAG14F,KAASogC,GACpF,CAEA,MAAMglD,EAAkBL,GAAmBsE,GAAiB5S,WAC5D,GAAI71E,EAAO,OAAOhN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,IACzD,IAAKkgC,EAAiB,OAAOz1F,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,IAC1D,MAAM,eAAEgR,EAAc,UAAEw/E,EAAS,eAAEC,EAAc,iBAAEC,EAAgB,OAAEhhH,GAAW47D,EAChF,IAAIqlD,EAAc,MACdH,GAAaC,GAAkBC,KACjCC,GACEx1I,EAAAA,EAAAA,MAAC4vD,GAAAA,EAAQ,CAACjtD,UAAW4sF,GAAAA,EAAiBC,GAAG50F,SAAA,CACtCy6I,IACCr1I,EAAAA,EAAAA,MAAC6vD,GAAAA,EAAY,CAACltD,UAAW8sF,GAAAA,EAAqBC,GAAG90F,SAAA,CAC9CgH,CAAC,aACFlH,EAAAA,EAAAA,KAAC6gB,GAAe,CACdC,OAAO,GACP7e,QAASiF,EACP,ohBAKP0zI,IACCt1I,EAAAA,EAAAA,MAAC6vD,GAAAA,EAAY,CAACltD,UAAW8sF,GAAAA,EAAqBC,GAAG90F,SAAA,CAC9CgH,CAAC,uBACFlH,EAAAA,EAAAA,KAAC6gB,GAAe,CACdC,OAAO,GACP7e,QACE,sPAKP44I,IACCv1I,EAAAA,EAAAA,MAAC6vD,GAAAA,EAAY,CAACltD,UAAW8sF,GAAAA,EAAqBC,GAAG90F,SAAA,CAC9CgH,CAAC,oBACFlH,EAAAA,EAAAA,KAAC6gB,GAAe,CACdC,OAAO,GACP7e,QAASiF,EACP,yNASd,MAgCM6zI,EACJ5/E,EAAeoqC,aAAepqC,EAAe4/B,SAE/C,OACEz1F,EAAAA,EAAAA,MAACoc,GAAW,CAACU,cAAetlB,EAAMslB,cAAcliB,SAAA,EAC9CF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,CAAC,OAAOhH,SACxBpD,EAAM49I,mBACL16I,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAASw6B,sBAAuB,CAC7C/wC,OAAQ,CACNuxC,UAAWH,EAAgBt4F,GAC3BA,GAAIs4F,GAAiBllB,UACrBC,eACsD,KAApDilB,GAAiBt6B,gBAAgBoV,UAAUzB,KACvC,YACA2mB,GAAiBt6B,gBAAgBoV,UAAUzB,QAElD5uE,SAEFu1F,EAAgBr4F,OAGnBq4F,EAAgBr4F,OAGnB29I,GACC/6I,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,CAAC,kBAAkBhH,UACpCF,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CACNoB,SAAS,MACTnB,QAAS84I,GAAU/6I,EAAAA,EAAAA,KAACg7I,GAAc,CAAC7hE,IAAK4hE,SAAcp5I,EAAUzB,UAGhEF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS4qC,UAAW,CACjCnhD,OAAQ,CAAElnD,GAAI49I,EAAQ59I,GAAIglF,SAAU,eACnCjiF,UAEHF,EAAAA,EAAAA,KAACysE,GAAW,CAAC/hC,OAAQqwG,EAAQrwG,YAP1BqwG,EAAQ59I,MAWf,MACJ6C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,CAAC,cAAchH,SAAEu1F,EAAgB75E,eACpD5b,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,CAAC,SAAShH,SAAE4kG,EAAcjrE,MAC7C75B,EAAAA,EAAAA,KAACkhB,GAAU,CAACE,SAAU+5C,EAAeiV,aAAc9yE,MAAO4J,CAAC,eAAehH,UACxEF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS62B,oBAAqB,CAC3CptC,OAAQ,CAAElnD,GAAIg+D,EAAeiV,aAAajzE,MACzC+C,SAEFi7D,EAAeiV,aAAahzE,SAGhC+9D,EAAeymB,uBACd5hF,EAAAA,EAAAA,KAACo6I,GAA0B,CACzBC,sBAAsB,EACtBC,mBAAoB7kD,EAAgB4P,wBAAqB1jG,EACzD0xF,qBAAsBl4B,EAAeymB,wBAErC,MACJ5hF,EAAAA,EAAAA,KAACkhB,GAAU,CAACE,SAAU+5C,EAAew2B,eAAgBr0F,MAAO4J,CAAC,UAAUhH,UACrEF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAASg3B,eAAgB,CACtCvtC,OAAQ,CAAElnD,GAAIg+D,EAAew2B,gBAAgBx0F,MAC5C+C,SAEFi7D,GAAgBw2B,gBAAgBv0F,UAGrC4C,EAAAA,EAAAA,KAACkhB,GAAU,CACTE,SAAUq0E,EAAgB57D,OAC1Bv8B,MAAO4J,CAAC,iBACRia,SAAUja,EACR,sHACAhH,SAE+B,KAAhCu1F,EAAgB5D,YAAqB3qF,CAAC,mBAAqBuuF,EAAgB5D,eAE9E7xF,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,CAAC,YACRia,SAAUja,EAAEA,CAAC;yDACoChH,SAEhDsxF,KAEHxxF,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,CAAC,wBACRia,SAAUja,EACR,gIACAhH,SAEDu1F,EAAgBnT,cAEnBtiF,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,CAAC,gBACRia,SAAUja,EACR,2QACAhH,SAED,GAAGu1F,EAAgB3D,wBAAwB5qF,CAAC,eAE/ClH,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,CAAC,cACRia,SAAUja,EACR,uKACAhH,SAEDu1F,EAAgBwlD,eAEnBj7I,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,CAAC,mBACRia,SAAUja,EAAE,uJAC+DhH,SAE1Eu1F,EAAgBylD,eAEnBl7I,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,CAAC,gBACRia,SAAUja,EACR,4IACAhH,SAEDu1F,EAAgB0lD,iBAEnBn7I,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,CAAC,aAAcka,SAAU+5C,EAAeyT,WAAW1uE,UACpEF,EAAAA,EAAAA,KAAC2uE,GAAe,CAACC,WAAYzT,EAAeyT,eAE7CksE,IAAe96I,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,CAAC,kBAAkBhH,SAAE46I,KACxD96I,EAAAA,EAAAA,KAACo2E,GAAoB,CACnB94E,MAAO4J,CAAC,mBACRia,SAlKyB0Y,KAC7B,IAAIuhH,EAAa,GACjB,GAAIvhH,GAAqB,QAAXA,EAAkB,CAC9B,MAAMp2B,EAAiB4zI,GAAex9G,IAASryB,MAAM,UAAY,GACjE4zI,EAAa33I,EAAKA,EAAKD,OAAS,EAClC,CAEA,OACE8B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEoF,EAAAA,EAAAA,MAACw0G,EAAAA,GAAK,CAAA55G,SAAA,CAAC,oHAEsB,KAC3BF,EAAAA,EAAAA,KAAA,KACE+H,KACE,mFAEF4zB,OAAO,SACP87C,IAAI,sBAAqBv3E,SAC1B,sBAEI,IAAI,+BACoB,KAC7BF,EAAAA,EAAAA,KAAA,KAAG+H,KAAMsvI,GAAex9G,GAAS8B,OAAO,SAAS87C,IAAI,sBAAqBv3E,SACvEk7I,IACE,IAAI,kCAGXp7I,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,WACC,EAqISq7I,CAAsB5lD,EAAgB57D,QAChDw8C,qBAAmB,EACnB,UAAQ,oCACR37E,MAAO+6F,EAAgB4iD,aAAe,SAExCr4I,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,CAAC,UAAUhH,UAC5BF,EAAAA,EAAAA,KAACqS,GAAY,CACX3X,MAAO+6F,EAAgBp6B,QACvB/oD,OAAQ6oD,GAAgByU,YAAYhU,SACpCj1D,QAASA,IACPq0D,EAAaJ,GAASiB,YAAa,CAAExX,OAAQ,CAAElnD,GAAIg+D,GAAgByU,YAAYzyE,WAIrF6C,EAAAA,EAAAA,KAACmsE,GAAsB,CACrBzxE,MAAO+6F,EAAgB1lB,SACvBz9D,OAAQ6oD,GAAgB8U,aAAarU,SACrCj1D,QAASA,IACPq0D,EAAaJ,GAASiB,YAAa,CAAExX,OAAQ,CAAElnD,GAAIg+D,GAAgB8U,aAAa9yE,UAK1F,CAEO,SAAS69I,GAAel+I,GAC7B,MAAMq8E,EAAMr8E,EAAMq8E,KACZ,EAAEjyE,IAAMC,EAAAA,EAAAA,MAEd,OACE7B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAA,OAAAE,SAAMgH,CAAC,sBACP5B,EAAAA,EAAAA,MAAA,OAAApF,SAAA,CACGgH,CAAC,UAAU,IAAEiyE,EAAIh8E,OAEpBmI,EAAAA,EAAAA,MAAA,OAAApF,SAAA,CACGgH,CAAC,UAAU,IAAEiyE,EAAIzuC,OAAOwF,iBAE1BipC,EAAIwtB,WACHrhG,EAAAA,EAAAA,MAAA,OAAApF,SAAA,CACGgH,CAAC,YAAY,IAAEwK,GAAiBynE,EAAIwtB,eAK/C,CCpSO,SAASjV,KACd,MAAM,UAAEnhB,IAAc+qE,EAAAA,GAAAA,MAEtB,OAAK/qE,GAIEvwE,EAAAA,EAAAA,KAACu7I,GAAqB,CAAChrE,UAAWA,IAHhC,IAIX,CAIO,SAASgrE,GAAsBz+I,GACpC,MAAM,IAAQqK,EAAAA,EAAAA,MACRq0I,ECxDD,WACL,MAAM,EAAEt0I,IAAMC,EAAAA,EAAAA,MACd,OAAO9C,EAAAA,EAAAA,UACL,KAAM,CACJ,GAAI6C,EAAE,aACN8pE,MAAO9pE,EAAE,mBACT+pE,YAAa/pE,EAAE,4BAEjB,CAACA,GAEL,CD8CyBu0I,GACjBlrE,EAAYzzE,EAAMyzE,UAClBvV,EAAerW,KAEfkwB,EAzBR,SAA2B8gB,GACzB,MAAM,KAAEz1E,GAAS+1C,GACfxE,EAAM,gBAAgBkkC,sBAExB,OAAOz1E,GAAMgyC,SAAW,EAC1B,CAoByBwpF,EADRr+E,EAAAA,GAAAA,KACiClgE,IAAM,KAChDq0F,EAAkBL,GAAmB5gB,EAAUsS,WAC/Cj+B,EAAaT,MAEXjkC,KAAMk4H,EAAkBprI,MAAO2uI,GAA0B1lF,GAC5C,gBAAnBsa,EAAUzB,KACNrd,EAAM,gBAAgB8e,EAAUpzE,GAAGqhB,gCACnC,IAGAorH,EAAsBr5D,EAAU12C,OAEhC+hH,EAA4BtC,KAE5BlQ,EACJQ,GAAqBzuE,gBAAgBoqC,aACrCqkC,GAAqBzuE,gBAAgB4/B,eACrCp5F,EAEF,OAAIg6I,GACK37I,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAO2uI,KAIxBr2I,EAAAA,EAAAA,MAACoc,GAAW,CAAAxhB,SAAA,EACVF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,QAAQhH,SAAEqwE,EAAUnzE,QACzC4C,EAAAA,EAAAA,KAAC67I,GAAmB,CAClB1iE,IAAKiwD,EACLhoH,QAA4B,gBAAnBmvD,EAAUzB,QAErB9uE,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,eAAehH,SAAEqwE,EAAU30D,eAChD5b,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,QAAQhH,SAAEs7I,EAAejrE,EAAUzB,SACxD9uE,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,gBAAgBhH,UACnCF,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAM8hE,EAAUpV,gBAAgBiV,cAAchzE,KAC9C0K,GAAI88C,EAAWgW,GAAS62B,oBAAqB,CAC3CptC,OAAQ,CAAElnD,GAAIozE,EAAUpV,gBAAgBiV,cAAcjzE,WAI5D6C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,qBAAsBka,QAA4B,UAAnBmvD,EAAUzB,KAAiB5uE,UAC7EF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,UACTF,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAAnU,SAAEqwE,EAAU0qE,mBAGtBj7I,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,eACTia,SAAUja,EACR,8GACAhH,SAEDqwE,EAAUurE,eAEb97I,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,8BACTka,QAA4B,gBAAnBmvD,EAAUzB,MAAmE,IAAzCyB,EAAUwrE,2BAAiC77I,SAEvFqwE,EAAUwrE,8BAEb/7I,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,gBACTia,SAAUja,EACR,+GAEFka,QAA4B,gBAAnBmvD,EAAUzB,KAAuB5uE,SAEzCqwE,EAAUyrE,gBAEbh8I,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,2BACTia,SAAUja,EAAE,gFACZka,QAA4B,gBAAnBmvD,EAAUzB,KAAuB5uE,SAEzCqwE,EAAU0rE,2BAEbj8I,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,0CACTia,SAAUja,EAAE,yEACZka,QAA4B,gBAAnBmvD,EAAUzB,KAAuB5uE,SAEzCqwE,EAAUgxB,mCAEbvhG,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,SACTia,SAAUy6H,EAA0B5xG,MACpC5oB,QAA4B,gBAAnBmvD,EAAUzB,KAAuB5uE,SAExCqwE,EAAmCvmC,SAEvChqC,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,aACTia,SAAUy6H,EAA0B/4D,UACpCzhE,QAA4B,gBAAnBmvD,EAAUzB,KAAuB5uE,SAEzCsxF,KAEHxxF,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,wBACTia,SAAUy6H,EAA0BrC,cACpCn4H,QAA4B,gBAAnBmvD,EAAUzB,KAAuB5uE,SAExCqwE,EAAmCuhB,wBAEvC9xF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,CAAC,kBAAmBka,QAAmC,IAA1ByzD,EAAerxE,OAAatD,UAC1EF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACR20E,EAAe9tE,KAAKmuF,IACnBl1F,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAC/X,MAAM,OAAM4D,UACjBF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS0c,qBAAsB,CAC5CjzB,OAAQ,CACNlnD,GAAI+3F,EAAG/3F,MAER+C,SAEFg1F,EAAG93F,QARiB83F,EAAG/3F,WAclC6C,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,CAAC,oBACRia,SAAUy6H,EAA0BpC,kBACpCp4H,aACmC,IAA1Bu6H,KACLvD,GAAyD,IAArCA,GAAkBlmF,QAAQ1uD,QACjDtD,SAEAy7I,EACCz0I,CAAC,qDAEDlH,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACRk4I,GAAkBlmF,QAAQnrD,KAAKwpE,IAC9BvwE,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAC/X,MAAM,OAAM4D,UACjBF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS82B,iBAAkB,CACxCrtC,OAAQ,CACNmsB,eAAgBw3C,GAAkBz3C,EAAUzB,MAC5C3xE,GAAIozE,EAAUpzE,MAEf+C,SAEFqwE,EAAUnzE,QATUmzE,EAAUpzE,WAgB3C6C,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,CAAC,SACRka,QAA4D,IAAnDmvD,EAAUpV,eAAejxD,OAAOgoD,QAAQ1uD,OACjD2d,SAAUy6H,EAA0B1xI,OAAOhK,UAE3CF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACRqwE,EAAUpV,eAAejxD,OAAOgoD,QAAQnrD,KAAKzJ,IAC5C0C,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAC/X,MAAM,OAAM4D,SAChB5C,EAAMF,MADgBE,EAAMH,WAMrC6C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,WAAWhH,UAC9BF,EAAAA,EAAAA,KAACqS,GAAY,CACX3X,MAAO61E,EAAUlV,QACjB/oD,OAAQi+D,EAAUpV,gBAAgByU,YAAYhU,SAC9Cj1D,QAASA,IACPq0D,EAAaJ,GAASiB,YAAa,CACjCxX,OAAQ,CAAElnD,GAAIozE,EAAUpV,gBAAgByU,YAAYzyE,WAK5D6C,EAAAA,EAAAA,KAACmsE,GAAsB,CACrBzxE,MAAO61E,EAAUR,SACjBz9D,OAAQi+D,EAAUpV,gBAAgB8U,aAAarU,SAC/Cj1D,QAASA,IACPq0D,EAAaJ,GAASiB,YAAa,CACjCxX,OAAQ,CAAElnD,GAAIozE,EAAUpV,gBAAgB8U,aAAa9yE,SAI3D6C,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,mBACTka,SAAUmvD,EAAU2V,gCACpB/kE,SAAUy6H,EAA0B11D,gCAAgChmF,UAEpEF,EAAAA,EAAAA,KAACk1D,GAAAA,EAAQ,CAACjtD,UAAW4sF,GAAAA,EAAiBC,GAAG50F,SACtCqwE,EAAU2V,kCACTlmF,EAAAA,EAAAA,KAACm1D,GAAAA,EAAY,CAACltD,UAAW8sF,GAAAA,EAAqBC,GAAG90F,SAC9CgH,CAAC,yCAKVlH,EAAAA,EAAAA,KAACo2E,GAAoB,CACnBj1D,UAAUnhB,EAAAA,EAAAA,KAAC+3I,GAAS,CAACC,cAAeznE,EAAUzB,OAC9CxxE,MAA0B,gBAAnBizE,EAAUzB,KAAyB5nE,EAAE,oBAAsBA,EAAE,aACpEmvE,qBAAmB,EACnB37E,MACqB,gBAAnB61E,EAAUzB,KACNyB,EAAU8nE,aAAe,MACzB9nE,EAAUujB,WAAa,UAKrC,CAEA,SAAS+nD,GAAoB/+I,GAc3B,MAAM,IAAQqK,EAAAA,EAAAA,MACRy9C,EAAaT,KACb42F,EAAUj+I,EAAMq8E,IACtB,OAAK4hE,GAKH/6I,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,CAAC,kBAAmBka,QAAStkB,EAAMskB,QAAQlhB,UAC5DF,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CACNoB,SAAS,MACTnB,QAAS84I,GAAU/6I,EAAAA,EAAAA,KAACg7I,GAAc,CAAC7hE,IAAK4hE,SAAcp5I,EAAUzB,UAGhEF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS4qC,UAAW,CACjCnhD,OAAQ,CAAElnD,GAAI49I,EAAQ59I,GAAIglF,SAAU,eACnCjiF,UAEHF,EAAAA,EAAAA,KAACysE,GAAW,CAAC/hC,OAAQqwG,EAAQrwG,YAP1BqwG,EAAQ59I,MARV,IAoBX,CE7RO,SAAS++I,IAA0B,0BACxCC,EAAyB,oBACzBC,IAEA,MAAM,EAAEl1I,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACf03F,ECrBD,SACLnzG,GAEA,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR0kC,EAAsBg5D,GAA0B,CAAEhvF,cAAc,EAAM0mD,aAAa,IACnF8W,EAAyBlE,GAAc,CAAEt5D,cAAc,EAAM0mD,aAAa,IAC1EvzB,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAACgvE,IAAyB,CAACA,IACzDzT,EAAaH,KAEb68E,EAAgC7mD,GAC7BA,GAAiBt6B,gBAAgB6iC,mBAAmB3yC,YACvD1pD,EACAuF,EAAE,0EAiCR,OA9B2Bq1I,IACzB,MAAMC,EAA8BD,EAAiBp+I,OAAOm+I,GAC5D18E,EAAW,CACTviE,MAAO6J,EAAE,sCAAuC,CAAEoV,MAAOigI,EAAiB/4I,SAC1EzF,YAAamJ,EAAE,0EAA2E,CACxFoV,MAAOigI,EAAiB/4I,OAASg5I,EAA4Bh5I,SAE/DwoC,iBAAkB9kC,EAAE,2BAA4B,CAAEoV,MAAOigI,EAAiB/4I,SAC1Es1B,MAAOyjH,EAAiBn9I,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QAChE27B,MAAO62B,GACPtoD,UAAU,EACVukC,sBACA7C,gBACAE,aACAD,SAAUA,CAACwsD,EAAkChqE,IAC3CgkC,GAAcgC,EAAM,sBAAsBgkC,EAAgBt4F,GAAGqhB,cAAeiN,GAC9E7J,aACE46H,EAA4Bh5I,OAAS,EACjC,CACE0D,EACE,gGACA,CACEoV,MAAOkgI,EAA4Bh5I,eAIzC7B,EACNmqC,oBAAqBwwG,GACrB,CAGN,CDzBiCG,CAA0BN,GACnD93F,GAASgZ,EAAAA,GAAAA,MAET,cAAEtL,GAAkBJ,KACpBvjD,EAAerD,KAEfwkD,EAAcyT,KACd05E,GAAe5gJ,EAAAA,EAAAA,cACnB4S,UACE,UACQ6gD,EAAYkC,EAAM,sBAAsBkrF,EAAOx/I,GAAGqhB,qBAAsB,CAAC,EACjF,CAAE,MAAOxR,GACPoB,EAAazD,SAAS,CACpBtH,QAAS,SACThG,MAAO6J,EAAE,qCACThH,SAAU8M,aAAiBsX,OAAStX,EAAMK,QAC1C9B,QAAS,KAEb,IAEF,CAAC6C,EAAcmhD,EAAaroD,IAGxB01I,EE3CD,SAAiC1zG,GACtC,MAAM,IAAQ/hC,EAAAA,EAAAA,MACRy4D,EAAaH,KACbs9C,EAAc/5C,KACdn3B,EAAsBg5D,GAA0B,CAAEhvF,cAAc,IAChEw9D,EAAyBlE,GAAc,CAAEt5D,cAAc,EAAM0mD,aAAa,IAC1EvzB,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAACgvE,IAAyB,CAACA,IAyB/D,OAvB+BkpE,IAC7B38E,EAAW,CACTviE,MAAO6J,EAAE,2BACTnJ,YAAamJ,EAAE,0DACf8kC,iBAAkB9kC,EAAE,iBACpB4xB,MAAOyjH,EAAiBn9I,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QAChE27B,MAAO62B,GACPtoD,UAAU,EACVukC,sBACA7C,gBACAE,aACAD,SAAUA,CAACwsD,EAAiBhqE,KAC1B,IAAI0tD,EAMJ,OALIsc,EAAgBt6B,gBAAgBoqC,YAClCpsB,EAAMsc,EAAgBt6B,eAAeoqC,YAC5B9P,EAAgBt6B,gBAAgB4/B,WACzC5hB,EAAMsc,EAAgBt6B,eAAe4/B,UAEhCgiB,EAAYtrD,EAAM,sBAAsB/jB,OAAOyrC,GAAKh8E,cAAesuB,EAAO,GAEnF,CAIN,CFWgCoxH,CAAwBT,GAEtD,OAAO/3I,EAAAA,EAAAA,UAAwC,KAC7C,MAkBMy4I,EAAqCrnD,GAClCA,EAAgBt6B,eAAe6iC,kBAAkB1qF,OAASy+C,GAAegO,aAC5E,GACA74D,EAAE,yEAoFR,MAlFoD,CAClD,CACEzD,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAM84D,GAAAA,GACN34D,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVnN,MAAO4J,EAAE,yBACTnG,WAAa00F,GAjBkBA,IACjCA,GAAiBt6B,gBAAgB6iC,mBAAmB5G,MAAQrlC,GAAegO,aACvE,GACA74D,EAAE,wEAeF61I,CAA0BtnD,GAC5B9uF,QAAU8uF,GACRz6B,EAAaJ,GAASoiF,oBAAqB,CACzC34F,OAAQ,CACNlnD,GAAIs4F,EAAgBllB,UACpBC,eAAgBnsB,EAAOmsB,eACvBolB,UAAWH,EAAgBt4F,OAKnC,CAAEsG,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMixG,GAAAA,GACN72G,MAAO4J,EAAE,2BACTuD,UAAU,EACV/J,SAAW+0F,IACT,MAAMwnD,EAAaxnD,GAAiBt6B,eAAe6iC,kBAAkB1qF,MACrE,IAAI6lE,EACA+jE,EAUJ,OATIznD,EAAgBt6B,gBAAgBoqC,YAClCpsB,EAAMsc,EAAgBt6B,eAAeoqC,YAC5B9P,EAAgBt6B,gBAAgB4/B,WACzC5hB,EAAMsc,EAAgBt6B,eAAe4/B,UAEnC5hB,IACF+jE,EAAqB,CAAC,MAAO,UAAW,UAAW,WAAW30I,SAAS4wE,GAAKzuC,WAGtEuyG,IAAcC,EAAiC,EAEzDn8I,WAAa00F,GACXqnD,EAAkCrnD,GACpC9uF,QAAU8uF,GAAoBinD,EAAajnD,IAE7C,CACEhyF,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAM0mE,GAAAA,GACNtsE,MAAO4J,EAAE,2BACTuD,UAAU,EACV/J,SAAW+0F,IACT,MAAMwnD,EAAaxnD,GAAiBt6B,eAAe6iC,kBAAkB1qF,MACrE,IAAI6lE,EACA+jE,EAUJ,OATIznD,EAAgBt6B,gBAAgBoqC,YAClCpsB,EAAMsc,EAAgBt6B,eAAeoqC,YAC5B9P,EAAgBt6B,gBAAgB4/B,WACzC5hB,EAAMsc,EAAgBt6B,eAAe4/B,UAEnC5hB,IACF+jE,EAAqB,CAAC,MAAO,UAAW,UAAW,WAAW30I,SAAS4wE,GAAKzuC,UAGtEuyG,IAAeC,CAAiC,EAE1Dn8I,WAAa00F,GACXqnD,EAAkCrnD,GACpC9uF,QAAU8uF,GAAoBmnD,EAAsB,CAACnnD,KAEvD,CACEhyF,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,2BACTnG,WAAa00F,GAnGoBA,IACH,YAA5BA,GAAiB/qD,OACZxjC,EAAE,8EAIRuuF,GAAiBt6B,gBAAgB6iC,mBAAmB3yC,QACpD0G,GAAeigB,kBAKX,GAHE9qE,EAAE,yEA2FPi2I,CAA4B1nD,GAC9B9uF,QAAU8uF,GAAoB4mD,EAAuB,CAAC5mD,IACtDnuF,UAAU,GAGI,GACjB,CACD+0I,EACArhF,EACA0hF,EACAE,EACA7qF,EACA7qD,EACAm9C,EAAOmsB,gBAEX,CGzJO,SAAS4sE,KACd,MAAM,EAAEl2I,IAAMC,EAAAA,EAAAA,MACRk9C,GAASgZ,EAAAA,GAAAA,MAEbn9C,KAAMu1E,EAAe,MACrBzoF,EAAK,QACLuoD,GACEc,GAA4B5E,EAAM,sBAAuBpN,EAAOuxC,WAC9D56B,EAAerW,KACfC,EAAaT,KACbvjB,EAAcs7G,GAA0B,CAC5CC,0BAA2BA,IACzBnhF,EAAaJ,GAASuvE,iBAAkB,CACtC9lF,OAAQ,CAAElnD,GAAIknD,EAAOlnD,GAAIqzE,eAAgBnsB,EAAOmsB,kBAEpD4rE,oBAAqB7mF,IAEvB,OAAIvoD,GAAchN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,IACpDkgC,GAEHnwF,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAOo4F,GAAiBr4F,KACxBgjD,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,eAAgBY,GAAI88C,EAAWgW,GAASooD,cACnD,CACE1lH,MAAO,GAAGm4F,GAAiBt6B,eAAeoV,UAAUnzE,OACpD0K,GAAI88C,EAAWgW,GAAS82B,iBAAkB,CACxCrtC,OAAQ,CACNlnD,GAAIs4F,GAAiBt6B,eAAeoV,UAAUpzE,GAC9CqzE,eAAgB,gBAItB,CACElzE,MAAO4J,EAAE,qBACTY,GAAI88C,EAAWgW,GAASuvE,iBAAkB,CACxC9lF,OAAQ,CAAElnD,GAAIknD,EAAOlnD,GAAIqzE,eAAgBnsB,EAAOmsB,mBAGpD,CACElzE,MAAOm4F,GAAiBr4F,OAG5BujD,eACE3gD,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAASs9B,EACTx9B,SAAU6F,GAAAA,GAAiBC,MAC3B3I,aAAck1F,OAIpBz1F,EAAAA,EAAAA,KAAC09D,GAAc,CACbe,QAAS,CACPnhE,MAAO4J,EAAE,6BACTiuB,KAAMylC,GAASuvE,iBACfzrE,oBAAqB,qBAEvBvU,KAAM,CACJ,CAAE7sD,MAAO4J,EAAE,WAAYiuB,KAAMylC,GAASw6B,uBACtC,CAAE93F,MAAO4J,EAAE,aAAciuB,KAAMylC,GAASyiF,0BACxC,CAAE//I,MAAO4J,EAAE,iBAAkBiuB,KAAMylC,GAAS0iF,+BAE9Cj5F,OAAQA,QA7CerkD,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,GAiD5D,CP9DAgwF,GAA2B7uF,YAAc,6B,gBQdlC,IAkEKiyF,GAAQ,SAARA,GAAQ,OAARA,EAAQ,cAARA,EAAQ,wBAARA,CAAQ,MC3Eb,MAAMC,GAAiB,YACjBC,GAAuB,CAClCC,KAAMC,GAAAA,GAAUC,OAChBC,SAAU,EACVC,KAAMC,GAAAA,GAAMC,GACZC,UAAW,KACXC,SAAU,KACVC,QAAS,KACTC,WAAY,KACZC,UAAW,KACXC,SAAU,KACVC,MAAO,CAAExsI,KAAM,GAAIq9F,KAAM,IACzB9yF,MAAO,KACPkiI,SAAU,KACVC,OAAQ,KACRC,QAAS,SAGEC,GAAgB1lI,MAAM6U,KAAK,CAAEtqB,OAAQ,KAAM,CAACsJ,EAAGY,IAAMA,EAAI,IAAG3G,KAAK63I,IAAI,CAChFlkJ,MAAOkkJ,EACPthJ,MAAO,GAAGshJ,QAECC,GAAe5lI,MAAM6U,KAAK7U,MAAM,MAAM,CAACnM,EAAGY,IAAMA,EAAI,IAAG3G,KAAK+3I,IAAG,CAC1EpkJ,MAAOokJ,EACPxhJ,MAAO,GAAGwhJ,QAECC,GAAkB9lI,MAAM6U,KAAK7U,MAAM,KAAK,CAACnM,EAAGY,IAAMA,IAAG3G,KAAKi4I,IAAM,CAC3EtkJ,MAAOskJ,EACP1hJ,MAAO,GAAG0hJ,QAGCC,GAAgBhmI,MAAM6U,KAAK7U,MAAM,KAAK,CAACnM,EAAGY,IAAMA,EAAI,IAAG3G,KAAK+3I,IAAG,CAC1EpkJ,MAAOokJ,EACPxhJ,MAAO,GAAGwhJ,QAGCI,GAAejmI,MAAM6U,KAAK7U,MAAM,KAAK,CAACnM,EAAGY,IAAMA,IAAG3G,KAAKo4I,IAAI,CACtEzkJ,MAAOykJ,EACP7hJ,MAAO,GAAG6hJ,Q,gBCLL,SAASC,GAAwBtiJ,GACtC,MAAM,UAAEuiJ,EAAS,UAAEC,EAAS,gBAAEC,EAAe,gBAAEC,EAAe,aAAEC,EAAY,aAAEC,EAAY,GAAEviJ,GAC1FL,EAWF,OACEkD,EAAAA,EAAAA,KAACy3C,GAAa,IAAK36C,EAAO86C,QAASz6C,EAAG+C,UACpCoF,EAAAA,EAAAA,MAAC0pB,GAAAA,EAAU,CAAA9uB,SAAA,EACTF,EAAAA,EAAAA,KAACivB,GAAAA,EAAc,CAAA/uB,UACbF,EAAAA,EAAAA,KAACsuB,GAAAA,EAAU,CACTvtB,WAAYjE,EAAMiE,WAClBqlB,YAAam5H,EACb7kJ,MAAO2kJ,EACP/8I,SAlBeq9I,CACvBC,EACAllJ,EACAmlJ,KAEKA,IACDpxH,EAAAA,GAAAA,GAAYoxH,IAAYnlJ,KAAUolJ,EAAAA,GAAAA,GAAeD,IACnDJ,EAAa/kJ,EACf,OAaIsF,EAAAA,EAAAA,KAACivB,GAAAA,EAAc,CAAA/uB,UACbF,EAAAA,EAAAA,KAAC+/I,GAAAA,EAAU,CACTh/I,WAAYjE,EAAMiE,WAClBqlB,YAAao5H,EACbpwC,KAAMkwC,EACNU,WAAY,CAAEtlJ,MAAO4kJ,GAAa,IAClCh9I,SAAUo9I,UAMtB,CCrDO,SAASO,GAGdnjJ,GACA,MAAM,QAAE4zC,IAAYE,EAAAA,GAAAA,MAEpB,OACE5wC,EAAAA,EAAAA,KAAC8wC,GAAAA,GAAU,CACT1zC,KAAMN,EAAMM,KACZszC,QAASA,EACTK,kBAAgB,EAChB5jC,OAAQA,EAAG6jC,YAEPhxC,EAAAA,EAAAA,KAACo/I,GAAuB,IAClBtiJ,EACJK,GAAIL,EAAMM,KACV,UAAQ,WACRiiJ,UAAWruG,GAAOt2C,OAAOqX,KACzButI,UAAWtuG,GAAOt2C,OAAO00G,KACzBqwC,aAAe1tI,GAAiBi/B,EAAM1uC,SAAS,IAAK0uC,EAAMt2C,MAAOqX,SACjEwtI,gBAAiBziJ,EAAMyiJ,gBACvBG,aAAcA,CAACl6H,EAAQ4pF,KACrBp+D,EAAM1uC,SAAS,IAAK0uC,EAAMt2C,MAAO00G,QAAO,EAE1CowC,gBAAiB1iJ,EAAM0iJ,gBACvBxyH,WAAYlwB,EAAMkwB,cAM9B,CCtBO,SAASkzH,GAAIC,GAClB,MAAmB,iBAARA,EACFA,EAEFA,EAAM,GAAK,IAAIA,IAAQA,CAChC,CACO,SAASC,GACdtjJ,GAMA,MAAM,IAAQqK,EAAAA,EAAAA,MACRk5I,GCpCCvkJ,EAAAA,EAAAA,cAAaszG,IACX,CACL+vC,KAAMxsI,GAAAA,GAAS2tI,WAAWlxC,EAAM,UAAU+vC,KAC1CH,OAAQrsI,GAAAA,GAAS2tI,WAAWlxC,EAAM,UAAU4vC,UAE7C,KDgCG,UACJtmG,EAAS,MACTwpD,EACAvxD,WAAW,cAAE/B,GAAe,SAC5B7oB,IACE6qB,EAAAA,GAAAA,OACE,WAAE0V,EAAU,WAAEE,GAAeV,KAC7By6F,EAAiC,iBAAjBzjJ,EAAM+I,QAAuB/I,EAAM+I,OACnD64I,GAAUv8E,EAAAA,GAAAA,IAAS,CAAE/kE,KAAM,aAE3B,SACJojJ,EAAW,mBACXC,eAAe,KAAE1uI,EAAI,KAAEq9F,IACrB5oD,EACEk6F,EAAcp6F,GAAgC,UAAlBA,EAAWnpD,GACvCwjJ,EEzCD,WACL,MAAM,EAAEz5I,IAAMC,EAAAA,EAAAA,MA+Bd,MA9BuB,CACrB,CACEzM,MAAOqjJ,GAAAA,GAAMC,GACb1gJ,MAAO4J,EAAE,WAEX,CACExM,MAAOqjJ,GAAAA,GAAM6C,GACbtjJ,MAAO4J,EAAE,WAEX,CACExM,MAAOqjJ,GAAAA,GAAM8C,GACbvjJ,MAAO4J,EAAE,YAEX,CACExM,MAAOqjJ,GAAAA,GAAM+C,GACbxjJ,MAAO4J,EAAE,cAEX,CACExM,MAAOqjJ,GAAAA,GAAMgD,GACbzjJ,MAAO4J,EAAE,aAEX,CACExM,MAAOqjJ,GAAAA,GAAMiD,GACb1jJ,MAAO4J,EAAE,WAEX,CACExM,MAAOqjJ,GAAAA,GAAMkD,GACb3jJ,MAAO4J,EAAE,aAIf,CFQyBg6I,GACjBC,EEtDD,WACL,MAAM,EAAEj6I,IAAMC,EAAAA,EAAAA,MACd,MAAO,CACL,CAAE7J,MAAO4J,EAAE,UAAWxM,MAAOijJ,GAAAA,GAAUC,QACvC,CAAEtgJ,MAAO4J,EAAE,WAAYxM,MAAOijJ,GAAAA,GAAUyD,SACxC,CAAE9jJ,MAAO4J,EAAE,UAAWxM,MAAOijJ,GAAAA,GAAU0D,QACvC,CAAE/jJ,MAAO4J,EAAE,SAAUxM,MAAOijJ,GAAAA,GAAU2D,OACtC,CAAEhkJ,MAAO4J,EAAE,UAAWxM,MAAOijJ,GAAAA,GAAU4D,QACvC,CAAEjkJ,MAAO4J,EAAE,YAAaxM,MAAOijJ,GAAAA,GAAU6D,UAE7C,CF4C2BC,GACnBC,EEYD,WACL,MAAM,EAAEx6I,IAAMC,EAAAA,EAAAA,MACd,MAAO,CACL,CACEzM,MAAO,EACP4C,MAAO4J,EAAE,YAEX,CACExM,MAAO,EACP4C,MAAO4J,EAAE,aAEX,CACExM,MAAO,EACP4C,MAAO4J,EAAE,UAEX,CACExM,MAAO,EACP4C,MAAO4J,EAAE,UAEX,CACExM,MAAO,EACP4C,MAAO4J,EAAE,QAEX,CACExM,MAAO,EACP4C,MAAO4J,EAAE,SAEX,CACExM,MAAO,EACP4C,MAAO4J,EAAE,SAEX,CACExM,MAAO,EACP4C,MAAO4J,EAAE,WAEX,CACExM,MAAO,EACP4C,MAAO4J,EAAE,cAEX,CACExM,MAAO,GACP4C,MAAO4J,EAAE,YAEX,CACExM,MAAO,GACP4C,MAAO4J,EAAE,aAEX,CACExM,MAAO,GACP4C,MAAO4J,EAAE,aAGf,CFhEuBy6I,GA2ErB,OACEr8I,EAAAA,EAAAA,MAACygE,GAAe,CAAC1oE,MAAOP,EAAMO,MAAM6C,SAAA,EAClCoF,EAAAA,EAAAA,MAACygE,GAAe,CAAA7lE,SAAA,EACdF,EAAAA,EAAAA,KAACs6C,GAAc,CACbl9C,KAAM,OACN4vB,YAAU,EACV1vB,MAAO4J,EAAE,aACTiqC,UAAWjqC,EAAE,4CACbmf,QAAS86H,KAEXnhJ,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBjL,UAAWjqC,EAAE,+BACb9J,KAAM,WACNE,MAAO4J,EAAE,YACTzD,KAAK,YAEPzD,EAAAA,EAAAA,KAACs6C,GAAc,CACbl9C,KAAM,OACNE,MAAO4J,EAAE,cACTiqC,UAAWjqC,EAAE,yDACbmf,QAASs6H,KAEX3gJ,EAAAA,EAAAA,KAACgiE,GAAmB,CAClB1kE,MAAO4J,EAAE,YACT9J,KAAM,YACNipB,QAASs6H,EACTv6H,YAAalf,EAAE,mBACfiqC,WACE7rC,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAA,OAAAE,SACGgH,EACC,2FAGJ5B,EAAAA,EAAAA,MAAC+iB,GAAAA,EAAS,CAAAnoB,SAAA,EACRF,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAAC0uB,UAAQ,EAAAz2C,SAAEgH,EAAE,aAClBlH,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAAC0uB,UAAQ,EAAAz2C,SAAEgH,EAAE,gBAClBlH,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAAC0uB,UAAQ,EAAAz2C,SAAEgH,EAAE,kBAIxBsgB,oBAAkB,KAEpBxnB,EAAAA,EAAAA,KAACgiE,GAAmB,CAClB5kE,KAAM,UACNE,MAAO4J,EAAE,UACTmf,QAASq7H,EACTtwG,eAAgBlqC,EAAE,UAClBiqC,WACE7rC,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAA,OAAAE,SACGgH,EACC,iHAGJ5B,EAAAA,EAAAA,MAAC+iB,GAAAA,EAAS,CAAAnoB,SAAA,EACRF,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAAC0uB,UAAQ,EAAAz2C,SAAEgH,EAAE,WAClBlH,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAAC0uB,UAAQ,EAAAz2C,SAAEgH,EAAE,aAClBlH,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAAC0uB,UAAQ,EAAAz2C,SAAEgH,EAAE,mBAIxBkf,YAAalf,EAAE,iBACfsgB,oBAAkB,KAEpBxnB,EAAAA,EAAAA,KAACgiE,GAAmB,CAClB5kE,KAAM,WACNipB,QAASs4H,GACTv4H,YAAalf,EAAE,gBACf5J,MAAO4J,EAAE,yBACTiqC,WACE7rC,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAA,OAAAE,SACGgH,EACC,oHAGJ5B,EAAAA,EAAAA,MAAC+iB,GAAAA,EAAS,CAAAnoB,SAAA,EACRF,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAAC0uB,UAAQ,EAAAz2C,SAAC,QACfF,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAAC0uB,UAAQ,EAAAz2C,SAAC,QACfF,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAAC0uB,UAAQ,EAAAz2C,SAAC,aAIrBkxC,eAAgBlqC,EAAE,0BAClBsgB,oBAAkB,KAEpBxnB,EAAAA,EAAAA,KAACgiE,GAAmB,CAClB5kE,KAAM,WACNgpB,YAAalf,EAAE,gBACfmf,QAAS04H,GACTzhJ,MAAO4J,EAAE,qBACTiqC,WACE7rC,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAA,OAAAE,SACGgH,EACC,+GAGJ5B,EAAAA,EAAAA,MAAC+iB,GAAAA,EAAS,CAAAnoB,SAAA,EACRF,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAAC0uB,UAAQ,EAAAz2C,SAAC,OACfF,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAAC0uB,UAAQ,EAAAz2C,SAAC,QACfF,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAAC0uB,UAAQ,EAAAz2C,SAAC,aAIrBkxC,eAAgBlqC,EAAE,qBAClBsgB,oBAAkB,KAEpBxnB,EAAAA,EAAAA,KAACgiE,GAAmB,CAClB5kE,KAAM,SACNgpB,YAAalf,EAAE,gBACfmf,QAAS64H,GACT5hJ,MAAO4J,EAAE,eACTiqC,WACE7rC,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAA,OAAAE,SACGgH,EACC,oGAGJ5B,EAAAA,EAAAA,MAAC+iB,GAAAA,EAAS,CAAAnoB,SAAA,EACRF,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAAC0uB,UAAQ,EAAAz2C,SAAC,OACfF,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAAC0uB,UAAQ,EAAAz2C,SAAC,OACfF,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAAC0uB,UAAQ,EAAAz2C,SAAC,aAIrBkxC,eAAgBlqC,EAAE,eAClBsgB,oBAAkB,KAEpBxnB,EAAAA,EAAAA,KAACgiE,GAAmB,CAClB5kE,KAAM,aACNgpB,YAAalf,EAAE,eACfmf,QAAS44H,GACT3hJ,MAAO4J,EAAE,gBACTiqC,WACE7rC,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAA,OAAAE,SACGgH,EACC,4HAGJ5B,EAAAA,EAAAA,MAAC+iB,GAAAA,EAAS,CAAAnoB,SAAA,EACRF,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAAC0uB,UAAQ,EAAAz2C,SAAC,OACfF,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAAC0uB,UAAQ,EAAAz2C,SAAC,QACfF,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAAC0uB,UAAQ,EAAAz2C,SAAC,aAIrBkxC,eAAgBlqC,EAAE,gBAClBsgB,oBAAkB,KAEpBxnB,EAAAA,EAAAA,KAACgiE,GAAmB,CAClB5kE,KAAM,YACNgpB,YAAalf,EAAE,eACfmf,QAASw4H,GACTvhJ,MAAO4J,EAAE,kBACTiqC,WACE7rC,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAA,OAAAE,SACGgH,EACC,wKAGJ5B,EAAAA,EAAAA,MAAC+iB,GAAAA,EAAS,CAAAnoB,SAAA,EACRF,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAAC0uB,UAAQ,EAAAz2C,SAAC,OACfF,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAAC0uB,UAAQ,EAAAz2C,SAAC,SACfF,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAAC0uB,UAAQ,EAAAz2C,SAAC,cAIrBkxC,eAAgBlqC,EAAE,kBAClBsgB,oBAAkB,KAEpBxnB,EAAAA,EAAAA,KAACgiE,GAAmB,CAClB57C,YAAalf,EAAE,oBACfmf,QAASw4H,GACTzhJ,KAAM,WACN+zC,WACE7rC,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAA,OAAAE,SACGgH,EACC,sLAGJ5B,EAAAA,EAAAA,MAAC+iB,GAAAA,EAAS,CAAAnoB,SAAA,EACRF,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAAC0uB,UAAQ,EAAAz2C,SAAC,OACfF,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAAC0uB,UAAQ,EAAAz2C,SAAC,SACfF,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAAC0uB,UAAQ,EAAAz2C,SAAC,cAIrBkxC,eAAgBlqC,EAAE,eAClB5J,MAAO4J,EAAE,eACTsgB,oBAAkB,KAEpBxnB,EAAAA,EAAAA,KAACm8D,GAAoB,CACnB30C,oBAAkB,EAClBpqB,KAAK,UACLE,MAAO4J,EAAE,wBACTkf,YAAalf,EAAE,gCACfmf,QAAS,CACP,CAAE3rB,MAAO,QAAS4C,MAAO4J,EAAE,SAAU0U,YAAa1U,EAAE,0BACpD,CAAExM,MAAO,QAAS4C,MAAO4J,EAAE,SAAU0U,YAAa1U,EAAE,gCACpD,CAAExM,MAAO,QAAS4C,MAAO4J,EAAE,SAAU0U,YAAa1U,EAAE,6BAEtD8lB,YAAU,IAEC,UAAZ0xH,IACC1+I,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBhL,eAAgBlqC,EAAE,SAClB5J,MAAO4J,EAAE,SACT9J,KAAM,QACNgpB,YAAY,IACZ+qB,UAAWjqC,EAAE,gDACb24B,IAAK,EACLlsB,IAAK,IACLlQ,KAAK,SACLupB,YAAU,IAID,UAAZ0xH,IACC1+I,EAAAA,EAAAA,KAACigJ,GAAsB,CACrB7iJ,KAAM,QACNoiJ,gBAAgB,cAChBliJ,MAAO4J,EAAE,SACTkqC,eAAgBlqC,EAAE,SAClBiqC,UAAWjqC,EAAE,qDAKnB5B,EAAAA,EAAAA,MAAC+oC,GAAAA,EAAW,CAAC3nC,UAAU,gBAAexG,SAAA,EACpCF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLlC,QAAQ,YACR,UAASk9I,EAAS,qBAAuB,kBACzC55I,QAvTci7I,KACpB,MAAM93I,EAAS4uC,WACR5uC,EAAO40I,eACP50I,EAAO3M,GACd,MAAM,MAAEm0C,EAAQ,GAAE,WAAEuwG,EAAa,GAAE,QAAEnD,EAAO,MAAEH,EAAQ,QAASx9H,GAASjX,EAClEwJ,EAAQX,GAAAA,GAASE,QAAQ,GAAGd,KAAQq5C,IAAIi1F,EAAUjxC,KAClD,KAAEwI,EAAI,MAAEE,EAAK,IAAEgnC,EAAG,KAAEK,EAAI,OAAEH,GAAW1rI,EACrCwuI,EAAa,GAAGlqC,IAAOsoC,GAAIpoC,KAASooC,GAAIpB,MAAQoB,GAAIf,KAAQe,GAAIlB,OAChE+C,EAAc,gBAAgBvB,KAAYsB,IAC1CE,EAAYjE,GAAAA,GAAMkE,WAAWF,GAC7BG,EAAO,IAAInE,GAAAA,GAAM,IAAKiE,EAAU37H,WAAYtF,IAClD,GAAc,OAAVw9H,EAAgB,CAClB,MAAM4D,EAAY5D,GAAOnvC,KACnBgzC,EAAY7D,GAAOxsI,KACzB,GAAIqwI,GAAaD,EAAW,CAC1B,MAAM7lG,EAAU3pC,GAAAA,GAASE,QAAQ,GAAGuvI,KAAah3F,IAAIi1F,EAAU8B,IAAYE,SACrE,KAAEzqC,EAAI,MAAEE,EAAK,IAAEgnC,EAAG,KAAEK,EAAI,OAAEH,GAAW1iG,EAC3C4lG,EAAK77H,QAAQk4H,OAAQ+D,EAAAA,GAAAA,IAAS1qC,EAAME,EAAOgnC,EAAKK,EAAMH,EACxD,KAAO,CACL,GAAIoD,EAAW,CAKb,MAAM9lG,EAAU3pC,GAAAA,GAASE,QAAQ,GAAGuvI,KAAaC,SAC3C,KAAEzqC,EAAI,IAAEknC,EAAG,MAAEhnC,EAAK,KAAEqnC,EAAI,OAAEH,GAAW1iG,EAC3C4lG,EAAK77H,QAAQk4H,OAAQ+D,EAAAA,GAAAA,IAAS1qC,EAAME,EAAOgnC,EAAKK,EAAMH,EACxD,CACA,GAAImD,EAAW,CAKb,MAAM,KAAEvqC,EAAI,IAAEknC,EAAG,MAAEhnC,EAAK,KAAEqnC,EAAI,OAAEH,GAAWrsI,GAAAA,GAASG,MACjDyvI,KAAK,CAAEvuI,KAAM,IACbo3C,IAAIi1F,EAAU8B,IACdE,QAEHH,EAAK77H,QAAQk4H,OAAQ+D,EAAAA,GAAAA,IAAS1qC,EAAME,EAAOgnC,EAAKK,EAAMH,EACxD,CACF,CACF,CAEA,MAKMwD,EAAa,CAAEN,OAAM/kJ,GALZojJ,IAEXG,EACEpvG,EAAM9tC,OAAS,GAAK,EACpBq+I,EAAWr+I,OAAS,GAAK,IAEzBwD,EAAQ05I,EACVpvG,EAAM5lC,WAAWwgC,GAAMA,EAAE/uC,KAAOojJ,IAChCsB,EAAWn2I,WAAWwgC,GAAMA,EAAE/uC,KAAOojJ,IACrCG,GAEE36H,EAAS,QADbw6H,EACsBjvG,EAAM9T,OAAOx2B,EAAO,EAAGw7I,GACvBlxG,EAAMvtC,KAAKy+I,IAE9B9B,GAEC36H,EAAS,aADbw6H,EAC2BsB,EAAWrkH,OAAOx2B,EAAO,EAAGw7I,GAC5BX,EAAW99I,KAAKy+I,IAG7CtgD,EACE,IACKtzD,EACH0C,QACAuwG,cAEF,CAAE34C,mBAAmB,IAEvBpsG,EAAM0nB,WAAU,EAAM,EAgPOtkB,SAGnBgH,EADHq5I,EACKG,EAAc,cAAgB,mBAC9BA,EAAc,YAAc,qBAEpC1gJ,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACL,UAAQ,sBACRlC,QAAQ,YACRiE,UAAQ,EACRX,QAASA,KACP,MAAM,MAAE2qC,EAAQ,GAAE,WAAEuwG,EAAa,IAAOnpG,IAClC+pG,EACJ3lJ,EAAMO,QAAU6J,EAAE,gBAAkBq2I,GAASmF,MAAQnF,GAASoF,WAC1DC,EAAYH,IAAalF,GAASmF,MAAQ,IAAIpxG,GAAS,IAAIuwG,GACjE3/C,EAAM,IAAKtzD,EAAe,CAAC,GAAG6zG,KAAaG,GAAa,CAAE15C,mBAAmB,IAC7EpsG,EAAM0nB,WAAU,EAAM,EACtBtkB,SAEDgH,EAAE,kBAKb,CGpYO,MAAM27I,WAA0BC,GAAAA,EAAap2I,WAAAA,IAAAC,GAAA,gBAAAA,GAAA,KAElDo2I,eAAkBj7H,IAEhBA,EAAMhS,iBAGN1I,KAAK0vC,UAAUkmG,IACb,MACMC,EADM71I,KACW81I,WAAW9sI,QAElC,MAAO,CACLvQ,QAASm9I,EAAUn9I,OACnBs9I,iBAAkBn+I,QAAQi+I,GAAcA,EAAWG,YAAcH,EAAWt8G,aAC7E,GACD,EACH,MCRI,SAAS08G,GAAgBvmJ,GAK9B,MAAM,IAAQqK,EAAAA,EAAAA,OACPm8I,EAASC,IAAc7nJ,EAAAA,EAAAA,aAC9BK,EAAAA,EAAAA,YAAU,KAUJe,EAAM0mJ,OATV90I,iBACE,MAAM,MAAE+0I,EAAK,IAAEC,SAAcn0F,GAC3BkC,EAAM,sBACN,CACE+xF,MAAO1mJ,EAAM0mJ,QAGjBD,EAAW,CAAEE,QAAOC,OACtB,CAEOC,EACP,GACC,CAAC7mJ,EAAM0mJ,QACV,MAAMI,EAAc9mJ,EAAM+mJ,QAAyBP,GAASG,MAAxBH,GAASI,IAE7C,OACEp+I,EAAAA,EAAAA,MAAC6E,EAAAA,EAAI,CAAAjK,SAAA,EACDpD,EAAMgnJ,kBAAmB9jJ,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAAtK,SAAEgH,EAAE,uBACxClH,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAAtK,UACPF,EAAAA,EAAAA,KAAC6iJ,GAAiB,CAAC1uI,UAAW,EAAEjU,SAC7B0jJ,GAAY78I,KAAI,CAACrM,EAAOgT,KAErB1N,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAAnU,SACHyS,GAAAA,GAASE,QAAQnY,EAAO,CAAEqpJ,SAAS,IAAQlyI,eAC1Cc,GAAAA,GAASu4F,8BAFDx9F,WAW1B,CCrDO,SAASs2I,GAAelnJ,GAK7B,MAAM,QAAE+mJ,EAAO,WAAEI,GAAennJ,GAC1B,EAAEoK,IAAMC,EAAAA,EAAAA,MAEd,OACE7B,EAAAA,EAAAA,MAACqvB,GAAAA,EAAW,CAACla,WAAS,EAAAva,SAAA,EACpBF,EAAAA,EAAAA,KAAC80B,GAAAA,EAAe,CACd33B,GAAG,eACH,UAAQ,eACR,aAAY+J,EAAE,8BAA+B,CAAEs5I,SAAU1jJ,EAAMonJ,gBAC/Dh6H,WAAYptB,EAAM+mJ,QAClBp1I,KAAM3R,EAAMonJ,cACZzgJ,KAAK,SACLnB,SAAUA,IAAM2hJ,GAAW,MAE7BjkJ,EAAAA,EAAAA,KAAC80B,GAAAA,EAAe,CACd33B,GAAG,aACH,UAAQ,aACR,aAAY+J,EAAE,iBACdgjB,YAAa25H,EACbp1I,KAAK,MACLhL,KAAK,SACLnB,SAAUA,IAAM2hJ,GAAW,OAInC,CChBO,SAASE,GAAUrnJ,GAQxB,MAAO+mJ,EAASI,IAAcvoJ,EAAAA,EAAAA,WAAS,IAEjC,EAAEwL,IAAMC,EAAAA,EAAAA,MACR2xD,EAASvC,KACT6tF,EAAkC,cAAnBtnJ,EAAM2lJ,SACrBtgH,ECnBD,SACLmP,EACA9sB,GAEA,MAAM,EAAEtd,IAAMC,EAAAA,EAAAA,MACRyrB,GAAUge,EAAAA,GAAAA,MACVyzG,EAASv+F,KAEf,OAAOzhD,EAAAA,EAAAA,UAAyC,KAC9C,IAAKmgB,EAAW,MAAO,GACvB,MAAM8/H,EAAkBD,EAAO/9F,YAAuC,eAAzB+9F,EAAO/9F,WAAWnpD,GACzDonJ,EAAgB3xH,EAAQ8lB,UAAU,SAClC8rG,EAAqB5xH,EAAQ8lB,UAAU,cAkB7C,MAAO,CACL,CACEj1C,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/B8J,UAAU,EACVvH,KAAM84D,GAAAA,GACN1+D,MAAyB4J,EAAlBo9I,EAAoB,iBAAsB,aACjD39I,QAAUulC,IACR1nB,EAAU0nB,EAAE/uC,IACZ,MAAM+kJ,EAAO5wG,EAAM9sC,MAAM6X,GAASA,EAAKlf,KAAO+uC,EAAE/uC,KAChD,IAAIsnJ,EACJ,QAAa9iJ,IAATugJ,IAAuBA,EAAKA,KAAM,OACH,OAA/BA,GAAMA,MAAM77H,SAASk4H,QACvBkG,EAAgBt5C,GACd+2C,GAAMA,MAAM77H,SAASk4H,OAAO9hG,eAAiB,GAC7CylG,GAAMA,MAAM77H,SAASq+H,OAIzB,MAAMC,EAAW,IACZzC,EAAKA,KAAK77H,QACbq4H,QAASwD,EAAKA,KAAK77H,QAAQ/J,MACvB,QACA4lI,EAAKA,KAAK77H,QAAQk4H,MAChB,QACA,QACNphJ,GAAI+kJ,EAAK/kJ,GACTm0C,MAAOizG,GAAiB,GACxB1C,WAAY2C,GAAsB,GAClCjG,MACiC,OAA/B2D,GAAMA,MAAM77H,SAASk4H,MACjB,CAAExsI,KAAM0yI,EAAc,GAAIr1C,KAAMq1C,EAAc,IAC9C,MAER7xH,EAAQsvE,MAAMyiD,EAAS,GAG3B,CAAElhJ,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMo9D,GAAAA,GACNhjE,MAAyB4J,EAAlBo9I,EAAoB,mBAAwB,eACnD75I,UAAU,EACV9D,QAAUu7I,IA5DMA,KAClB,MAAM0C,EAAgBtzG,EAAMnzC,QAAQke,GAASA,EAAKlf,KAAO+kJ,EAAK/kJ,KAE9DmnJ,EACI1xH,EAAQ7M,SAAS,aAAc6+H,GAC/BhyH,EAAQ7M,SAAS,QAAS6+H,GAC9BP,EAAO19F,aAAagB,IAClB28F,EACK38F,EAAKk6F,WAAa,IAAKpE,GAAsBoE,WAAY+C,GACzDj9F,EAAKrW,MAAQ,IAAKmsG,GAAsByE,KAAM0C,GAC5C,IACFj9F,KAEL,EAgDEk9F,CAAW3C,EAAK,EAElB56I,UAAU,GAEb,GACA,CAACJ,EAAGoqC,EAAO1e,EAASyxH,EAAQ7/H,GACjC,CD9DqBsgI,CAAkBhoJ,EAAMw0C,MAAOx0C,EAAM0nB,WAClD3M,GAAUxT,EAAAA,EAAAA,UACd,IAAM,CACJ,CACEyc,OACqB,UAAnBhkB,EAAM2lJ,SACFv7I,EAAE,8BACFA,EAAE,6BACR4b,KAAOzG,IAEHrc,EAAAA,EAAAA,KAACqjJ,GAAe,CACdG,MAAOnnI,EAAK6lI,KAAK1jI,WACjBqlI,aAAqCliJ,IAA5B7E,EAAMioJ,kBAAkCjoJ,EAAMioJ,kBAAoBlB,EAC3EC,iBAAe,KAKvB,CACEhjI,OAA2B,UAAnBhkB,EAAM2lJ,SAAuBv7I,EAAE,SAAWA,EAAE,UACpD4b,KAAOo/H,IAA2BliJ,EAAAA,EAAAA,KAACiP,GAAQ,CAACR,KAAMyzI,EAAKA,KAAK1jI,aAC5DwE,MAAOP,GAAkBQ,OACzBM,UAAWd,GAAkBQ,UAGjC,CAAC/b,EAAGpK,EAAM2lJ,SAAUoB,EAAS/mJ,EAAMioJ,oBAE/Bj4G,EAAO,CACXpoB,UAAW5nB,EAAMw0C,MACjBvY,MAAQ1c,GACCA,GAAMlf,IAAIqhB,WAEnB0jB,aAAcrqB,EACdkN,UAAWjoB,EAAMw0C,OAAO9tC,QAAU,GAE9BoY,EACF1U,EADgBk9I,EAEd,0KAGA,+JAEAY,EAASnsF,GAAcC,EAAQ,aACrC,OACExzD,EAAAA,EAAAA,MAAA,OAAApF,SAAA,CACGpD,EAAMmoJ,aACLjlJ,EAAAA,EAAAA,KAACygD,GAAU,CACTC,UACE1gD,EAAAA,EAAAA,KAACgkJ,GAAc,CACbH,QAASA,EACTI,WAAax8H,GAAMw8H,EAAWx8H,GAC9By8H,cAAepnJ,EAAM0jJ,WAGzBnjJ,MAAsB6J,EAAfk9I,EAAiB,sBAA2B,kBACnDnjG,eAA+B/5C,EAAfk9I,EAAiB,sBAA2B,kBAC5DpjG,UAAW95C,EAAE,8CACbg6C,aAAc8jG,EACdppI,YAAaA,EACb+kC,eACEr7C,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,CACGgH,EAAE,mBACHlH,EAAAA,EAAAA,KAAA,KAEE27B,OAAO,SACP5zB,KAAK,gDACL0vE,IAAI,aAAYv3E,SAEfgH,EAAE,kBALC,mBAUV,MACJlH,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,2BACHglC,WAAYA,EACZ8C,gBAAgC/9B,EAAfk9I,EAAiB,2BAAgC,uBAClEl/G,gBAAgCh+B,EAAfk9I,EAAiB,oBAAyB,gBAC3Dj/G,sBAEMj+B,EADJk9I,EACM,uCACA,mCAER7+G,sBAAsBvlC,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrCwN,qBAAqCp+B,EAAfk9I,EAAiB,mBAAwB,eAC/D/+G,sBAAuBA,IAAOvoC,EAAM0nB,UAAY1nB,EAAM0nB,WAAU,GAAQ,KACxE4d,gBAAgCl7B,EAAfk9I,EAAiB,aAAkB,SACpD9tH,mBAAiB,EACjBnB,KAAM,EACNC,QAAS,EACTC,QAASA,IAAM,EACfC,WAAYA,IAAM,KACdwX,MAIZ,CElHO,SAASo4G,KACd,MAAM,EAAEh+I,IAAMC,EAAAA,EAAAA,OACPtB,EAAQ2e,IAAa9oB,EAAAA,EAAAA,WAA2B,IACjD,SAAEqqB,EAAQ,UAAE2yB,IAAc9H,EAAAA,GAAAA,OAC1B,WAAE4V,GAAeV,MAEjB,SAAE06F,GAAah6F,EACflV,EAAQoH,EAAU,SAClBysG,EAAW7zG,GAAO9tC,OAAS,EAwBjC,OAvBAzH,EAAAA,EAAAA,YAAU,KACR,MAAM,SACJykJ,EACAC,eAAe,KAAE1uI,EAAI,KAAEq9F,IACrB5oD,GAEG4+F,EAAWC,GAAej2C,EAAK5nG,MAAM,KACtC89I,EAAYl2C,EAAK7mG,SAAS,MAC1B+K,EAAQX,GAAAA,GAASE,QAAQ,GAAGd,KAAQq5C,IAAI,CAC5C+zF,KAAMmG,EAAYxhE,SAASshE,EAAW,IAAM,GAAKthE,SAAS,GAAGshE,IAAa,IAC1EpG,OAAQl7D,SAASuhE,EAAa,OAE1B,KAAEztC,EAAI,MAAEE,EAAK,IAAEgnC,EAAG,KAAEK,EAAI,OAAEH,GAAW1rI,EACrCiyI,GAAgBj0G,GAAS,IAAIvqC,KAAI,EAAGm7I,OAAM/kJ,SAMvC,CAAE+kJ,KALO,IAAInE,GAAAA,GAAM,IACrBmE,EAAK77H,QACRq+H,KAAMlE,EACNgF,SAASlD,EAAAA,GAAAA,IAAS1qC,EAAME,EAAOgnC,EAAKK,EAAMH,KAEpB7hJ,SAE1B4oB,EAAS,QAASw/H,EAAa,GAC9B,CAACj0G,EAAOkV,EAAYzgC,KAErBzgB,EAAAA,EAAAA,MAACygE,GAAe,CAAC12B,cAAY,EAAAnvC,SAAA,EACzB2F,GAAUs/I,IACVnlJ,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACL,UAAQ,0BACRrC,MAAMlD,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrBnxB,QAASA,KACP6d,GAAU,EAAK,EAEjBnhB,QAAQ,OAAMnD,SAEbgH,EAAE,eAGLrB,IAAWs/I,KACXnlJ,EAAAA,EAAAA,KAACogJ,GAAQ,CAAC/iJ,MAAO6J,EAAE,gBAAiBrB,OAAQA,EAAQ2e,UAAWA,IAGhE2gI,IACCnlJ,EAAAA,EAAAA,KAACmkJ,GAAS,CACRc,aAAW,EACXzE,SAAUA,EACVlvG,MAAOA,EACPmxG,SAAS,QACTj+H,UAAWA,MAKrB,CC7DO,SAASihI,KACd,MAAM,EAAEv+I,IAAMC,EAAAA,EAAAA,OACPtB,EAAQ2e,IAAa9oB,EAAAA,EAAAA,WAA2B,IACjD,UAAEg9C,EAAS,SAAE3yB,IAAa6qB,EAAAA,GAAAA,MAC1BixG,EAAanpG,EAAU,cACvBgtG,EAAgB7D,GAAYr+I,OAAS,GACrC,YAAEmjD,EAAW,WAAEH,GAAeV,MAC9B,MAAExU,EAAK,SAAEkvG,GAAah6F,EA2B5B,OAzBAzqD,EAAAA,EAAAA,YAAU,KACRgqB,EAAS,QAASurB,GAClB,MACEmvG,eAAe,KAAE1uI,EAAI,KAAEq9F,IACrB5oD,GAEG4+F,EAAWC,GAAej2C,EAAK5nG,MAAM,KACtC89I,EAAYl2C,EAAK7mG,SAAS,MAC1B+K,EAAQX,GAAAA,GAASE,QAAQ,GAAGd,KAAQq5C,IAAI,CAC5C+zF,KAAMmG,EAAYxhE,SAASshE,EAAW,IAAM,GAAKthE,SAAS,GAAGshE,IAAa,IAC1EpG,OAAQl7D,SAASuhE,EAAa,OAE1B,KAAEztC,EAAI,MAAEE,EAAK,IAAEgnC,EAAG,KAAEK,EAAI,OAAEH,GAAW1rI,EACrCqyI,GAAqB9D,GAAc,IAAI96I,KAAI,EAAGm7I,OAAM/kJ,SAMjD,CAAE+kJ,KALO,IAAInE,GAAAA,GAAM,IACrBmE,EAAK77H,QACRq+H,KAAMlE,EACNgF,SAASlD,EAAAA,GAAAA,IAAS1qC,EAAME,EAAOgnC,EAAKK,EAAMH,KAEpB7hJ,SAG1B4oB,EAAS,aAAc4/H,EAAkB,GACxC,CAACh/F,EAAa5gC,EAAU87H,EAAYrB,EAAUlvG,EAAOkV,KAGtDlhD,EAAAA,EAAAA,MAACygE,GAAe,CAAC12B,cAAY,EAAAnvC,SAAA,EACzB2F,GAAU6/I,IACV1lJ,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLrC,MAAMlD,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrBnxB,QAASA,KACP6d,GAAU,EAAK,EAEjBnhB,QAAQ,OAAMnD,SAEbgH,EAAE,mBAGNrB,IAAU7F,EAAAA,EAAAA,KAACogJ,GAAQ,CAACv6I,OAAQA,EAAQxI,MAAO6J,EAAE,qBAAsBsd,UAAWA,KAE7EkhI,IAAmB7/I,IAAW6/I,KAC9B1lJ,EAAAA,EAAAA,KAACmkJ,GAAS,CACR7yG,MAAOuwG,EACPrB,SAAUA,EACVyE,aAAW,EACXxC,SAAS,YACTj+H,UAAWA,MAKrB,CC1DA,SAASohI,GAA0B9oJ,GAIjC,MAAMmrG,EAAoBjN,KACpBkN,EAA2BjN,KAC3BkN,EAAyBjN,KACzBkN,EAA0BjN,KAC1B/qE,GAAiB/rB,EAAAA,EAAAA,UACrB,IAAM,CACJ4jG,EACAC,EACAC,EACAC,IAEF,CAACH,EAAmBC,EAA0BC,EAAwBC,IAElElmE,EAAe6kE,GAAmB,CAAElxF,cAAc,IAClDi3B,EAAO6zB,GAAgC,CAC3Cvc,IAAKqN,EAAM,2BACXrhC,iBACA8R,eACAsoB,oBAAoB,IAEtB,OACExqD,EAAAA,EAAAA,KAACq4F,GAAkB,IACbv7F,EACJszB,eAAgBA,EAChB8R,aAAcA,EACd4K,KAAMA,GAGZ,CCrCO,SAAS+4G,GAGd/oJ,GAMA,MAAM,IAAQqK,EAAAA,EAAAA,MAERyxF,ED4BD,WACL,MAAO9rF,EAAG8rB,GAAaD,MACjB,EAAEzxB,IAAMC,EAAAA,EAAAA,MASd,OAR4BrL,EAAAA,EAAAA,cACzBgK,IACC8yB,GACE54B,EAAAA,EAAAA,KAAC4lJ,GAAyB,CAACvoJ,MAAO6J,EAAE,gCAAiCpB,SAAUA,IAChF,GAEH,CAAC8yB,EAAW1xB,GAGhB,CCxC2B4+I,GACnBxhG,GAAQxoD,EAAAA,EAAAA,cAAY4S,UACxB,MAAMm/C,QAAiBwB,GACrBoC,EAAM,2BAA2BqwC,OAAO,mBAG1C,OAAO33D,QAAQqd,QAAQ,CACrB98B,MAAOmjC,EAASvxC,MAChBxS,OAAQ+jD,EAASqE,SACjB,GACD,IAEH,OACElyD,EAAAA,EAAAA,KAAC8/F,GAAmB,CAClB1iG,KAAMN,EAAMM,KACZD,GAAG,+BACHG,MAAO4J,EAAE,yBACTo9C,MAAOA,EACP27C,cAAgBvlG,GACVA,GAA0B,iBAAVA,EACXA,EAEDA,GAA+B0C,MAAQ,GAEjDgpB,YAAalf,EAAE,gCACf84F,mBAAoB94F,EAAE,qCACtB64F,iBAAkB74F,EAAE,wCACpB8lB,WAAYlwB,EAAMkwB,WAClBgd,MAAO,IACP4uD,iBAAkBA,GAGxB,CCtCO,SAASmtD,KACd,MAAM,EAAE7+I,IAAMC,EAAAA,EAAAA,MACRk9C,GAAuCgZ,EAAAA,GAAAA,KAEvC2oF,GAAoB7jF,EAAAA,GAAAA,IAAS,CAAE/kE,KAAM,sBACrC6oJ,GAAe9jF,EAAAA,GAAAA,IAAS,CAC5B/kE,KAAM,kBAER,OACEkI,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEoF,EAAAA,EAAAA,MAACygE,GAAe,CAAA7lE,SAAA,EACdF,EAAAA,EAAAA,KAACs6C,GAAc,CACbttB,YAAaq3B,EAAO,MAAMf,WAAW,aACrClS,eAAgBlqC,EAAE,iBAClBiqC,UAAWjqC,EAAE,oEACb9J,KAAK,gBACLD,GAAG,gBACH,UAAQ,gBACRG,MAAO4J,EAAE,iBACTmf,QAAS,CACP,CAAE/oB,MAAO4J,EAAE,gBAAiBxM,MAAO,gBACnC,CAAE4C,MAAO4J,EAAE,yBAA0BxM,MAAO,yBAC5C,CAAE4C,MAAO4J,EAAE,oBAAqBxM,MAAO,oBACvC,CAAE4C,MAAO4J,EAAE,gBAAiBxM,MAAO,WACnC,CAAE4C,MAAO4J,EAAE,2BAA4BxM,MAAO,4BAEhD6/C,gBAAiBrzC,EAAE,qBAGpB++I,GACC,CACElhC,cACE/kH,EAAAA,EAAAA,KAACqoG,GAAyB,CAAqBr7E,YAAU,EAAC5vB,KAAK,aAEjE6nH,uBACEjlH,EAAAA,EAAAA,KAAC6lJ,GAAiC,CAAqB74H,YAAU,EAAC5vB,KAAK,aAEzE6mH,kBACE3+G,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAC4hG,GAAuB,CACtB50E,YAAU,EACVmkB,UAAWjqC,EACT,8EAEF9J,KAAK,sBAEN4oJ,GAAqBA,GAAmB7oJ,KACvC6C,EAAAA,EAAAA,KAACklG,GAA6B,CAC5Bl4E,YAAU,EACV2oE,YAAaqwD,GAAmB7oJ,GAChCC,KAAK,gBAKbwzE,SAAS5wE,EAAAA,EAAAA,KAACkmG,GAAqB,CAAqBl5E,YAAU,EAAC5vB,KAAK,aACpE8oJ,yBACElmJ,EAAAA,EAAAA,KAAC2kG,GAA4B,CAAqB33E,YAAU,EAAC5vB,KAAK,cAEpE6oJ,OAENjmJ,EAAAA,EAAAA,KAAC+lE,GAAe,CAAC12B,cAAY,EAAAnvC,UAC3BF,EAAAA,EAAAA,KAACgI,EAAAA,EAAO,QAIhB,CCtEO,SAASm+I,KACd,MAAM,EAAEj/I,IAAMC,EAAAA,EAAAA,OACPi/I,EAAiBC,IAAsB3qJ,EAAAA,EAAAA,UAAS,IACjD4qJ,GAAWnkF,EAAAA,GAAAA,IAAS,CAAE/kE,KAAM,aAC5B22C,GAAWouB,EAAAA,GAAAA,IAAS,CACxB/kE,KAAM,aAEFmpJ,EACJxyG,GAAU32C,OACT22C,EAAS32C,KAAKmL,SAAS,4BACtBwrC,EAAS32C,KAAKmL,SAAS,yBACrB,UAAEi+I,EAAS,MAAEnxC,GCnBd,WACL,MAAM,KAAEn1F,GAAS+1C,GACfxE,EAAM,wBAWR,MAAO,CAAE+0F,WATSniJ,EAAAA,EAAAA,UAChB,KACG6b,GAAMumI,OAAS,IAAI1/I,KAAKkkG,IAAI,CAC3BvwG,MAAOuwG,EACP7+F,IAAK6+F,EACL3tG,MAAO2tG,OAEX,CAAC/qF,GAAMumI,QAEWpxC,MAAOn1F,GAAMm1F,MACnC,CDK+BqxC,GAgB7B,OAdA3qJ,EAAAA,EAAAA,YAAU,KACHs5G,IAIDixC,GAAU9iJ,QAAU6xG,EAAMixC,GAC5BD,EACEn/I,EAAE,YAAYo/I,kBAAyBjxC,EAAMixC,kCAG/CD,EAAmB,IACrB,GACC,CAACC,EAAUp/I,EAAGmuG,KAGfr1G,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,UACEoF,EAAAA,EAAAA,MAACygE,GAAe,CAAA7lE,SAAA,EACdF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAM,OACN4vB,YAAU,EACV1vB,MAAO4J,EAAE,oBAEXlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAAqBh/C,KAAM,cAAeE,MAAO4J,EAAE,kBACrElH,EAAAA,EAAAA,KAACigJ,GAAsB,CACrB3iJ,MAAO4J,EAAE,mBACT9J,KAAK,gBACL4vB,YAAU,KAEZhtB,EAAAA,EAAAA,KAACm8D,GAAoB,CACnB/+D,KAAK,WACLgpB,YAAalf,EAAE,sBACf5J,MAAO4J,EAAE,aACTmf,QAASmgI,EACT9uG,WAAY0uG,EACZp5H,YAAU,IAEXu5H,IACCvmJ,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAM,wBACN4vB,YAAU,EACV1vB,MAAO4J,EAAE,wBACTzD,KAAK,SACLo8B,IAAK,QAMjB,CEhDO,SAAS8mH,GAAmB7pJ,GAIjC,MAAM8pJ,EAAyB9pJ,EAAM+pJ,mBAE/BxiG,GAASgZ,EAAAA,GAAAA,MACT,MAAE6kC,EAAK,UAAExpD,EAAS,SAAE3yB,EAAQ,UAAE4qB,EAAS,cAAE83D,EAAa,SAAEC,EAAQ,QAAEh4D,IACtEE,EAAAA,GAAAA,OACI,cAAEhC,GAAkB+B,EACpBoD,GAAWouB,EAAAA,GAAAA,IAAS,CAAE/kE,KAAM,cAC5B,cACJqpD,EAAa,YACbE,EAAW,SACXD,EACAP,MAAOwiD,GACL7iD,KAkBJ4iD,EAAS,iBACTA,EAAS,YACTA,EAAS,WACT3sG,EAAAA,EAAAA,YAAU,MACJg4C,GAAasQ,GAAQlnD,SAAiCwE,IAA3B7E,EAAMgqJ,kBACjBp4I,WAClB,IAAIq4I,EAEFA,EADE1iG,EAAOuxC,gBACgBvmC,GACvB,GAAGvyD,EAAMgqJ,kBAAoB,KAAKziG,EAAOuxC,oBAGlBvmC,GACvB,GAAGvyD,EAAMgqJ,kBAAoB,KAAKziG,GAAQlnD,OAG9C+kG,EACE,IACKtzD,EACHo4G,cAAeD,EAAiBtjJ,KAChCswC,SAAUgzG,GAEZ,CAAE79C,mBAAmB,GACtB,EAGE+9C,EAAa,GACjB,CAAC5iG,EAAQtQ,EAAUnF,EAAe9xC,EAAMgqJ,iBAAkB5kD,EAAOn8E,IAEpE,MAAMkgI,GAAe9jF,EAAAA,GAAAA,IAA6B,CAChD/kE,KAAM,gBACNszC,UACA9iB,aAAcghB,GAAeo4G,gBA4G/B,OAzGAjrJ,EAAAA,EAAAA,YAAU,KACR,MAAM,QAAE8sG,EAAO,UAAEC,GAAcL,EAAc,iBACvCM,EAAoBrwD,IAE1B3yB,EAAS,gBAAiBkgI,EAAc,CAAEh9C,aAAa,IAEnDH,IAAcD,IAChB3G,OAAMvgG,EAAW,CACfunG,mBAAmB,IAErBziD,EAAc,IAAKsiD,EAAmBxnB,cAAe,OACrD56B,EAAY,IAAKD,EAAUqH,QAASg7C,IACtC,GACC,CACDk9C,EACAx9C,EACA1iF,EACAm8E,EACAyG,EACAliD,EACAE,EACAjO,EACAgO,KAGF3qD,EAAAA,EAAAA,YAAU,KAIR,MAAMmrJ,EACe,iBAAnBnzG,GAAUtwC,MAA8C,0BAAnBswC,GAAUtwC,KAG9CswC,GAAU52C,MACV+pJ,GACEpqJ,EAAMgqJ,kBAAkBv+I,SAAS,kBACjCzL,EAAMgqJ,kBAAkBv+I,SAAS,4BAIRmG,WAC5B,IAAIy4I,EAAW,GAEVA,EADa,iBAAlBpzG,EAAStwC,KACOguD,EAAM,kBAAkB1d,EAAS52C,GAAGqhB,qBAC9B,0BAAlBu1B,EAAStwC,KACKguD,EAAM,2BAA2B1d,EAAS52C,GAAGqhB,qBAC7C,GAAG1hB,EAAMgqJ,kBAAoB,MAAM/yG,EAAS52C,GAAGqhB,qBACjE,IAAI4qF,EAAoB,CAAC,EAEzB,MAAMC,QAA4Bh6C,GAAgC83F,IAE5D,SACJzkE,EAAW,GAAE,UACbF,EAAY,GAAE,UACdjS,KACG2U,GACDmkB,EAAoBnkB,SAExBkkB,EAAoB,IACflkB,EACHL,gBAAiBK,EAASL,iBAAmB,GAC7CjD,sBAAuBsD,EAAStD,uBAAuBzkF,GACvDozE,UAAWA,GAAWpzE,GAAKozE,EAAY,KACvCmS,SAAUsD,GAAsBtD,GAAY,IAC5CF,UAAWwD,GAAsBxD,GAAa,KAEhD,MAAM8mB,GAAwBjiB,GAAoBgiB,GAC5CE,EAAuBF,EAAoBG,eACjD,GAAIF,GAAwBC,GAM1B,GALA9iD,GAAekB,IAAI,IACdA,EACH45B,cAAe8nB,MAGb3iD,EAAS0gG,YAAcrzG,EAAU,CACnC,MAAQ80D,QAASY,GAAoBhB,EAAc,iBAQjD1iF,EAAS,SAPN0jF,GAAmB11D,GAAU52C,KAAOyxC,GAAemF,UAAU52C,GAO7CisG,EANA,IAAK1iD,EAAS0gG,YAAYx7G,QAQjD,OAEA6a,GAAekB,IAAI,IAAWA,EAAM45B,cAAe,QACrD,EAGGmoB,EAAuB,GAC3B,CACDf,EACA/5D,EACA65D,EACA/vD,EACA3E,EACAkyG,EACAlgI,EACA0gC,EACAC,EACAkgG,EACA9pJ,EAAMgqJ,oBAGN9mJ,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SACG0mJ,GACCthJ,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAC+lJ,GAAkB,IAClBhyG,IAAY/zC,EAAAA,EAAAA,KAACmmJ,GAAsB,QAGtCnmJ,EAAAA,EAAAA,KAACmmJ,GAAsB,KAI/B,CClMO,MC6BMkB,GAAqBA,KAChC,MAAMhjG,GAASgZ,EAAAA,GAAAA,KACTiqF,EAqFD,WACL,MAAMhpE,EC5H6BC,MACnC,MAAMlzD,EAAkBwd,KAClBs1C,EAAmBnb,KACnB+hB,EAA0B/hB,KAEhC,OAAOlnE,EAAAA,EAAAA,cACL4S,MACEy1G,EACAh1D,EACAoyB,KAEA,MAAMyD,EAAoB71B,GAAe,GACnC81B,EAAsB1D,GAAe2D,SAAS/1B,aAAe,GAEnE,GAAI61B,EAAmB,CACrB,MAAM,MAAEtH,EAAK,QAAEC,GAAYH,GACzBwH,EAAkBxhF,OAASwhF,EAAqB,GAChDC,GAEIT,EAAyB7G,EAAQ52E,KAAK6nE,GAC1CuP,EACE1sB,EAAM,cAAc0yD,EAAW3lG,0BAC/B,CACErhB,GAAIyxE,EAAWzxE,GACf6mF,cAAc,GAEhB34D,EAAgBI,UAIdg5D,EAAsB/G,EAAM32E,KAAK6nE,GACrCmW,EACEtzB,EAAM,cAAc0yD,EAAW3lG,0BAC/B,CACErhB,GAAIyxE,EAAWzxE,IAEjBkuB,EAAgBI,gBAId0e,QAAQC,IAAI,IAAIo6C,KAA2BC,GACnD,IAEF,CAACtG,EAAkB4G,EAAyB15D,GAC7C,EDgF0BkzD,GACrBC,EE7HgCC,MACtC,MAAMpzD,EAAkBwd,KAClBs1C,EAAmBnb,KACnB0hB,EAA6B1hB,KAEnC,OAAOlnE,EAAAA,EAAAA,cACL4S,MACEy1G,EACAt/B,EACAtD,KAEA,MAAMoD,EAA0BpD,GAAeqD,8BACzCE,EAAyBvD,GAAe2D,SAASL,gBAEvD,GAAIF,EAAyB,CAC3B,MAAM,MAAEjH,EAAK,QAAEC,GAAYH,GACzBsH,GAA0B,GAC1BD,GAAoB,IAGhBL,EAAyB7G,EAAQ52E,KAAK2W,GAC1CygE,EACE1sB,EAAM,cAAc0yD,EAAW3lG,8BAC/B,CACErhB,GAAIugB,EAAMvgB,GACV6mF,cAAc,GAEhB34D,EAAgBI,UAIdg5D,EAAsB/G,EAAM32E,KAAK2W,GACrCgnE,EACEjzB,EAAM,cAAc0yD,EAAW3lG,8BAC/B,CACErhB,GAAIugB,EAAMvgB,IAEZkuB,EAAgBI,gBAId0e,QAAQC,IAAI,IAAIo6C,KAA2BC,GACnD,MAAO,GAAIK,EAAwB,CACjC,MAAMN,EAAyBM,EAAuB/9E,KAAK2W,GACzDygE,EACE1sB,EAAM,cAAc0yD,EAAW3lG,8BAC/B,CACErhB,GAAIugB,EAAMvgB,GACV6mF,cAAc,GAEhB34D,EAAgBI,gBAGd0e,QAAQC,IAAIo6C,EACpB,IAEF,CAACrG,EAAkBuG,EAA4Br5D,GAChD,EFoE6BozD,GACxBC,EDvHwBC,MAC9B,MAAMtzD,EAAkBwd,KAClBs1C,EAAmBnb,KACnBkhB,EAAqBlhB,KAI3B,OAAOlnE,EAAAA,EAAAA,cACL4S,MACEy1G,EACAj6G,EACAq3E,EACAnR,KAEA,MAAM+T,EAAkB5C,GAAe6C,qBACjCC,EAAiB9C,GAAe2D,UAAUh7E,OAEhD,GAAIi6E,EAAiB,CACnB,MAAMG,EAAsBlU,SAtBpC1hE,iBAEE,aAD4B2gD,GAA2CoC,EAAM,oBACxDS,QAAQ,GAAG/0D,IAAM,CACxC,CAmB2DonF,IAE7C,MAAE7G,EAAK,QAAEC,GAAYH,GACzB6G,GAAkB,GAClBn6E,GAAW,IAGPs6E,EAAyB7G,EAAQ52E,KAAKzJ,GAC1C6gF,EACE1sB,EAAM,cAAc0yD,EAAW3lG,qBAC/B,CACErhB,GAAIG,EAAMH,GACV6mF,cAAc,GAEhB34D,EAAgBI,UAIdg5D,EAAsB/G,EAAM32E,KAC/BzJ,GACC4mF,EACEzyB,EAAM,cAAc0yD,EAAW3lG,qBAC/BlhB,EAAMH,GACF,CAAEA,GAAIG,EAAMH,IACZ,CACEC,KAAME,EAAMF,KACZgzE,aAAc9yE,GAAO8yE,cAAgBkU,GAE3Cj5D,EAAgBI,gBAIhB0e,QAAQC,IAAI,IAAIo6C,KAA2BC,GACnD,MAAO,GAAIJ,EAAgB,CACzB,MAAMG,EAAyBH,EAAet9E,KAAKzJ,GACjD6gF,EACE1sB,EAAM,cAAc0yD,EAAW3lG,qBAC/B,CACErhB,GAAIG,EAAMH,GACV6mF,cAAc,GAEhB34D,EAAgBI,gBAGd0e,QAAQC,IAAIo6C,EACpB,IAEF,CAACrG,EAAkB+F,EAAoB74D,GACxC,ECqDqBszD,GACtB,OAAO7iF,EAAAA,EAAAA,cACL4S,MACE01G,EACA6M,KAQIA,EAAQ9hE,mBACJmvB,EAAmB8lC,EAASjnH,GAAI8zH,EAAQ9hE,YAAa8hE,EAAQ1vC,eAEjE0vC,EAAQpsC,uBACJrG,EAAsB4lC,EAASjnH,GAAI8zH,EAAQpsC,gBAAiBosC,EAAQ1vC,eAExE0vC,EAAQ/mH,cACJw0E,EACJ0lC,EAASjnH,GACT8zH,EAAQ/mH,OACR+mH,EAAQ1vC,cACR0vC,EAAQ7gD,aAEZ,GAEF,CAACkO,EAAoBE,EAAuBE,GAEhD,CArH0B6oE,GAClBC,EAAexkF,KACfykF,EAAiB3kF,KACvB,OAAOhnE,EAAAA,EAAAA,cACL4S,UACE,MAAM,SAAEqlC,EAAQ,OAAEnI,EAAM,sBAAE87G,EAAqB,OAAEllD,EAAM,QAAElkE,KAAYvd,GAAS4mI,EACxEC,EAAUA,CAACT,EAAkBl2B,IAC7B5sE,EAAOkgE,aAAelgE,EAAOlnD,GACxBsqJ,EAAeh2F,EAAM,cAAcpN,EAAOkgE,YAAY/lG,cAAe,IACvEyyG,EACH11C,qBAAsBxnC,EAAS52C,KAG5BqqJ,EAAaL,EAAUl2B,IAG1B,sBACJrvC,EAAqB,YACrBzyB,EAAW,SACXuzB,EAAQ,UACRF,EAAS,UACTjS,KACGs3E,GACDj8G,GAAU,CAAEg2C,sBAAuB,KAAMc,SAAU,GAAIF,UAAW,KAChE,KAAE/+E,EAAI,GAAEtG,GAAO42C,EACrB,IAAIqwE,EACJ,MAAM0jC,EAA6C,CAAC,EAC9CC,EAAarlE,GAAYA,GAAUl/E,OAAS,EAC5CwkJ,EAAcp8G,GAAUA,GAAQ42C,WAAa52C,GAAQ42C,WAAWh/E,OAAS,EAC/EkkJ,GAAyB79I,OAAO8zC,OAAOmqG,EAAiB,CAAE9zI,KAAM0zI,IAChEllD,GACE34F,OAAO4f,KAAK+4E,GAAQppE,SAASk3B,IAC3Bw3F,EAAgBx3F,GAAKkyC,EAAOlyC,EAAE,IAElC,MAAM2gE,EAAU,IACXlwG,KACA8mI,EACHt3E,UAAWA,GAAWpzE,GACtBykF,sBAAuBA,EACvBY,UAAWwlE,EAAclhE,GAAcl7C,GAAQ42C,gBAAa7gF,EAC5D+gF,SAAUqlE,EAAajhE,GAAcpE,QAAY/gF,EACjD28B,QAASA,EACTojD,WAAYomE,GAEd,OAAQrkJ,GACN,IAAK,mBACH,MAAO,CACL2gH,eAAgBwjC,EACdn2F,EAAM,sBAAsBt0D,EAAGqhB,wBAC/ByyG,IAGN,IAAK,UACH,MAAO,CACL7M,eAAgBwjC,EAAQn2F,EAAM,aAAat0D,EAAGqhB,wBAAyByyG,IAE3E,IAAK,sBACH,MAAO,CACL7M,eAAgBwjC,EACdn2F,EAAM,yBAAyBt0D,EAAGqhB,wBAClCyyG,IAGN,IAAK,wBAMH,OALA7M,QAAiBwjC,EACfn2F,EAAM,2BAA2Bt0D,EAAGqhB,wBACpCyyG,SAEIq2B,EAAgBljC,EAAU6M,GACzB,CACL7M,YAEJ,QAIE,OAHAA,QAAiBwjC,EAAQn2F,EAAM,kBAAkBt0D,EAAGqhB,wBAAyByyG,SACvEq2B,EAAgBljC,EAAU6M,GAEzB,CACL7M,YAEN,GAEF,CAAC//D,EAAOkgE,YAAakjC,EAAgBD,EAAcnjG,EAAOlnD,GAAImqJ,GAC/D,EGpHGnyD,GAA0C,CAC9C9b,iBAAkBze,GAASw6B,sBAC3Bjc,IAAKve,GAASu4B,mBACdviB,QAAShW,GAASg3B,eAClBs0D,wBAAyBtrF,GAASy6B,uBAClCn6B,kBAAmBN,GAASU,wBAC5BF,aAAcR,GAAS06B,4BAGlB,SAAS2yD,KACd,MAAM,EAAE/gJ,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,MACZ0/F,EAASI,IAAcvoJ,EAAAA,EAAAA,WAAS,IAEjC,WAAE8qD,EAAU,aAAEU,GAAiBpB,MAI/B,cACJkhG,EAAa,SACbjzG,EAAQ,sBACR2zG,EAAqB,KACrBtqJ,EAAI,YACJwe,EAAW,cACX6kI,EAAa,SACbD,EAAQ,WACRqB,EAAU,MACVvwG,GACEkV,EAEEq9C,EAAmB7+F,QACvBkiD,EAAa1iD,MAAMwhD,GAAqB,eAAZA,EAAK7oD,IAAmC,WAAZ6oD,EAAK7oD,MAEzD+qJ,EA0ER,SAAkCzkJ,GAChC,MAAM,IAAQ0D,EAAAA,EAAAA,MAWd,MAV+C,CAC7CgyE,IAAKjyE,EAAE,gBACP69G,aAAc79G,EAAE,gBAChBk0D,aAAcl0D,EAAE,yBAChB+9G,sBAAuB/9G,EAAE,yBACzBkyE,eAAgBlyE,EAAE,kBAClBmyE,iBAAkBnyE,EAAE,oBACpBoyE,WAAYpyE,EAAE,kBACdg/I,wBAAyBh/I,EAAE,mBAEVzD,EACrB,CAvF6B0kJ,CAAyBnB,GAEpD,IAAI5iD,EAAsBx/C,EAAWuwC,GAAa6xD,GAAgB,CAChE3iG,OAAQ,CAAElnD,GAAI42C,GAAU52C,MAGtB42C,GAAY,SAAUA,GAA8B,qBAAlBA,EAAStwC,OAC7C2gG,EAAsBx/C,EAAWgW,GAASw6B,sBAAuB,CAC/D/wC,OAAQ,CACNuxC,UAAW7hD,GAAU52C,GACrBA,GAAI42C,GAAUw8B,UACdC,eAC+C,KAA7Cz8B,GAAUonB,gBAAgBoV,UAAUzB,KAChC,YACA/6B,GAAUonB,gBAAgBoV,UAAUzB,SAIhD,MAAMs5E,EAAU,IAAIC,GAAAA,GAoBpB,OAnBAD,EAAQ/hI,QAAQm/H,QAChBl0G,EAAMlY,SAAQ,EAAG8oH,QAAQx0I,KACvB,MACE2Y,SAAS,QAAEm/H,EAAO,KAAEd,KAAS3jI,IAC3BmhI,EACM,IAANx0I,EAIJ06I,EAAQ5E,MAAM,IAAIzF,GAAAA,GAAM,IAAKh9H,KAH3BqnI,EAAQ5E,MAAM,IAAIzF,GAAAA,GAAM,IAAKh9H,EAAMykI,UAASd,SAGT,IAEvC7C,EAAWr+I,OAAS,GAClBq+I,EAAWzoH,SAAQ,EAAG8oH,WACpB,MACE77H,SAAS,QAAEm/H,EAAO,KAAEd,KAAS3jI,IAC3BmhI,EACJkG,EAAQE,OAAO,IAAIvK,GAAAA,GAAM,IAAKh9H,IAAQ,KAIxC/gB,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,UACEoF,EAAAA,EAAAA,MAACygE,GAAe,CAAC1oE,MAAO6J,EAAE,UAAWmoC,cAAY,EAAAnvC,SAAA,EAC/CoF,EAAAA,EAAAA,MAACoc,GAAW,CAACK,gBAAiB,MAAOJ,gBAAc,EAAAzhB,SAAA,EACjDF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,iBAAiBhH,SAAEgoJ,KACxCloJ,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,YAAYhH,UAC/BF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CAACC,GAAIs8F,EAAoBlkG,SAAE6zC,GAAU32C,UAE5C4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,QAAQhH,SAAE9C,KAC/B4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,eAAehH,SAAE0b,IACrC6kI,IACCzgJ,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,mBAAmBhH,SACrCugJ,EAAc1uI,KAAO,KAAO0uI,EAAcrxC,QAI/CpvG,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,mBAAmBhH,SAAEsgJ,KAC1CxgJ,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,wBAAwBhH,SAAEwnJ,IAC9C7jD,GAAmB7jG,EAAAA,EAAAA,KAACuiG,GAAmB,IAAM,SAEhDviG,EAAAA,EAAAA,KAACkhB,GAAU,CAACI,WAAS,EAAChkB,MAAO4J,EAAE,mBAAmBhH,UAChDF,EAAAA,EAAAA,KAACgkJ,GAAc,CAACH,QAASA,EAASI,WAAYA,EAAYC,cAAe1D,OAE3ExgJ,EAAAA,EAAAA,KAACmkJ,GAAS,CAAC1B,SAAS,QAAQnxG,MAAOA,EAAOkvG,SAAUA,EAAUuE,kBAAmBlB,IAChFhC,EAAWr+I,QACVxD,EAAAA,EAAAA,KAACmkJ,GAAS,CACR1B,SAAS,aACTnxG,MAAOuwG,EACPrB,SAAUA,EACVuE,kBAAmBlB,IAEnB,SAIZ,CCjHO,SAAS3/B,KACd,MAAM,EAAEh9G,IAAMC,EAAAA,EAAAA,MACd,OAAOrL,EAAAA,EAAAA,cACL,CAAConD,EAAekhE,KACd,MAAM7jC,EAAmB6jC,EAASjpD,eAAeogB,qBAAqBgF,iBACtE,IAAIl8B,EACF,CACElnD,GAAIinH,EAASjpD,eAAeogB,sBAAsBp+E,GAAGqhB,WACrD+lG,YAAaH,EAASjnH,GAAGqhB,YAE7B,MAAyB,qBAArB+hE,GAA2C6jC,EAASjpD,eAAeoV,WAAWpzE,IAChFknD,EAAS,CACPlnD,GAAIinH,EAASjpD,eAAeoV,WAAWpzE,GAAGqhB,WAC1Co3E,UAAWwuB,EAASjpD,eAAeogB,qBAAqBp+E,GAAGqhB,WAC3D+lG,YAAaH,EAASjnH,GAAGqhB,WACzBgyD,eAAgB,aAEX,CACLpzE,KAAM8J,EAAE,kBACR6mD,QAAS,CACPlJ,OAAQ+V,GAAS0pD,+BACjBjgE,UAEFjS,OAAQ,CACNyS,OAAQ+V,GAAS2tF,8BACjBlkG,UAEF+yC,KAAM,CACJvyC,OAAQ+V,GAAS4tF,4BACjBnkG,UAEFtQ,SAAU,CACR8Q,OAAQ+V,GAASw6B,sBACjB/wC,UAEFokG,aAAc,CAAE5jG,OAAQ+V,GAASyiF,yBAA0Bh5F,WAC3DnB,IAEqB,QAArBq9B,EACK,CACLnjF,KAAM8J,EAAE,gBACR6mD,QAAS,CAAElJ,OAAQ+V,GAAS4pD,2BAA4BngE,UACxDjS,OAAQ,CAAEyS,OAAQ+V,GAAS8tF,0BAA2BrkG,UACtD+yC,KAAM,CAAEvyC,OAAQ+V,GAAS+tF,wBAAyBtkG,UAClDtQ,SAAU,CAAE8Q,OAAQ+V,GAASu4B,mBAAoB9uC,UACjDokG,aAAc,CAAE5jG,OAAQ+V,GAASguF,qBAAsBvkG,WACvDnB,GAEqB,mBAArBq9B,EACK,CACLnjF,KAAM8J,EAAE,kBACR6mD,QAAS,CAAElJ,OAAQ+V,GAAS6pD,uBAAwBpgE,UACpDjS,OAAQ,CAAEyS,OAAQ+V,GAASiuF,sBAAuBxkG,UAClD+yC,KAAM,CAAEvyC,OAAQ+V,GAASkuF,oBAAqBzkG,UAC9CtQ,SAAU,CAAE8Q,OAAQ+V,GAASg3B,eAAgBvtC,UAC7CokG,aAAc,CAAE5jG,OAAQ+V,GAASmuF,iBAAkB1kG,WACnDnB,GAEqB,eAArBq9B,EACK,CACLnjF,KAAM8J,EAAE,kBACR6mD,QAAS,CAAElJ,OAAQ+V,GAAS8pD,6BAA8BrgE,UAC1DjS,OAAQ,CAAEyS,OAAQ+V,GAASouF,4BAA6B3kG,UACxD+yC,KAAM,CAAEvyC,OAAQ+V,GAASquF,0BAA2B5kG,UACpDtQ,SAAU,CAAE8Q,OAAQ+V,GAASy6B,uBAAwBhxC,UACrDokG,aAAc,CAAE5jG,OAAQ+V,GAASy6B,uBAAwBhxC,WACzDnB,GAEqB,iBAArBq9B,EACK,CACLnjF,KAAM8J,EAAE,gBACR6mD,QAAS,CAAElJ,OAAQ+V,GAAS+pD,mCAAoCtgE,UAChEjS,OAAQ,CAAEyS,OAAQ+V,GAASsuF,kCAAmC7kG,UAC9D+yC,KAAM,CAAEvyC,OAAQ+V,GAASuuF,gCAAiC9kG,UAC1DtQ,SAAU,CAAE8Q,OAAQ+V,GAAS06B,2BAA4BjxC,UACzDokG,aAAc,CAAE5jG,OAAQ+V,GAASwuF,6BAA8B/kG,WAC/DnB,GAEG,EAAE,GAEX,CAACh8C,GAEL,CCpFO,SAASmiJ,KACd,OAAOvtJ,EAAAA,EAAAA,cAAY,CAACw1C,EAA2BuwG,KAC7C,MAAMyH,EAAU,IAAIjB,GAAAA,GAwBpB,OAtBA/2G,EAAMlY,SAAQ,CAAC8S,EAAGx+B,KAChB,MACEw0I,MACE77H,SAAS,QAAEm/H,EAAO,KAAEd,KAAS3jI,KAE7BmrB,EACM,IAANx+B,EACF47I,EAAQ9F,MAAM,IAAIzF,GAAAA,GAAM,IAAKh9H,EAAMykI,UAASd,UAE5C4E,EAAQ9F,MAAM,IAAIzF,GAAAA,GAAM,IAAKh9H,IAC/B,IAEE8gI,EAAWr+I,QACbq+I,GAAYzoH,SAAS8S,IACnB,MACEg2G,MACE77H,SAAS,QAAEm/H,EAAO,KAAEd,KAAS3jI,KAE7BmrB,EACJo9G,EAAQhB,OAAO,IAAIvK,GAAAA,GAAM,IAAKh9H,IAAQ,IAGnCuoI,CAAO,GACb,GACL,CCaO,SAASC,GAAkBzsJ,GAIhC,MAAM,IAAQqK,EAAAA,EAAAA,MACRy9C,EAAaT,KACb6W,EAAerW,KACfvvC,GAAWC,EAAAA,GAAAA,MACXm0I,EAAmBnC,KACnBxiC,EAAiBX,KACjBulC,EAAaJ,KAEbv2I,EAAMH,GAAAA,GAASG,MACf42I,EAA+B/2I,GAAAA,GAASC,WACP,IAArCjF,KAAKssB,KAAKnnB,EAAIC,WAAa,OAGtB42I,EAAav6C,GAAkBjE,GAAoBu+C,EAAmBE,SAgCvEzjG,GAA0B9hD,EAAAA,EAAAA,UAAQ,IAC/B,CACL,CACElH,GAAI,UACJG,MAAO4J,EAAE,WACTohD,QAAQtoD,EAAAA,EAAAA,KAAC2mJ,GAAkB,IAAK7pJ,KAElC,CACEK,GAAI,aACJG,MAAO4J,EAAE,WACTohD,QAAQtoD,EAAAA,EAAAA,KAAC6pJ,GAAmB,IAC5B5mI,OAASujC,IACP,MAAM,SAAEzS,EAAQ,cAAEizG,EAAa,cAAEzlE,GAAkB/6B,EACnD,MACqB,0BAAlBwgG,GAA+D,iBAAlBA,IAC9CjzG,IACAwtC,GAEO8F,GAAoB9F,EAElB,GAGf,CACEpkF,GAAI,SACJG,MAAO4J,EAAE,UACTohD,QAAQtoD,EAAAA,EAAAA,KAACuqG,GAAU,IACnBtnF,OAASujC,GACgC,IAAnC38C,OAAO4f,KAAK+8B,GAAYhjD,SAGxBgjD,EAAW+6B,eAAeioB,gBAMlC,CACErsG,GAAI,QACJG,MAAO4J,EAAE,SACTohD,QAAQtoD,EAAAA,EAAAA,KAACklJ,GAAS,IAClBz0G,SAAW4W,IACT,IAAKA,GAAU/V,OAAO9tC,OAAQ,CAC5B,MAAMqqC,EAAS,CACbmiE,QAAS,CAAC9oG,EAAE,4CAGd,MAAM,IAAImnD,GAAa,GAAI,GAAI,IAAK,GAAIxgB,EAC1C,IAGJ,CACE1wC,GAAI,aACJG,MAAO4J,EAAE,cACTohD,QAAQtoD,EAAAA,EAAAA,KAACylJ,GAAc,KAEzB,CACEtoJ,GAAI,SACJG,MAAO4J,EAAE,UACTohD,QAAQtoD,EAAAA,EAAAA,KAACioJ,GAAkB,IAE3Bx3G,SAAU/hC,MAAOo7I,EAAmBtjG,KAClC,IAAKA,GAAYlV,OAAO9tC,OAAQ,CAC9B,MAAMqqC,EAAS,CACbmiE,QAAS,CAAC9oG,EAAE,4CAGd,MAAM,IAAImnD,GAAa,GAAI,GAAI,IAAK,GAAIxgB,EAC1C,CAEA,MAAMy7G,EAAUG,EAAWjjG,EAAWlV,MAAOkV,EAAWq7F,YAAc,KAChE,IAAE6B,EAAG,MAAED,SAAgBl0F,GAC3BkC,EAAM,sBACN,CACE+xF,MAAO8F,EAAQ9qI,WAAWhX,MAAM,MAAMC,KAAK,OAG/C,IAAKg8I,EAAMjgJ,SAAWkgJ,EAAIlgJ,OAAQ,CAChC,MAAMqqC,EAAS,CACbmiE,QAAS,CACP9oG,EACE,wJAKN,MAAM,IAAImnD,GAAa,GAAI,GAAI,IAAK,GAAIxgB,EAC1C,MAIL,CAAC47G,EAAYviJ,EAAGpK,IACbgzG,EAAgB,CACpB/hD,QAAS,CACP3wD,KAAM,GACNwe,YAAa,GACborI,cAAe,GACfjzG,SAAU,GACV0sG,cAAe,CAAE1uI,KAAM43I,EAAav6C,KAAMA,GAC1CoxC,SAAU9oC,KAAKC,iBAAiBoyC,kBAAkBzD,UAEpDh1G,MAAO,IAAKmsG,GAAsBnsG,MAAO,IACzCuwG,WAAY,IAAKpE,GAAsBoE,WAAY,KAGrD,OACEv8I,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,mBACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,aAAcY,GAAI88C,EAAWgW,GAASovF,YACjD,CAAE1sJ,MAAO4J,EAAE,wBAGflH,EAAAA,EAAAA,KAACgqD,GAAU,CACT7D,MAAOA,EACP9W,cAAc,EACd7B,SAvHWA,IAAMp4B,EAASiiB,SAASgsB,SAAS1oD,QAAQ,SAAU,KAwH9DizB,aAAckiF,EACdpxE,SAtJehwB,UACnB,MAAM,MAAE4iC,EAAK,WAAEuwG,KAAe9gI,GAASkvF,EAGjC/vF,EAA6B,CACjCsjI,MAHciG,EAAWn4G,EAAOuwG,GAGjBrjI,WAAWhX,MAAM,MAAMC,KAAK,QACxCsZ,GAEL,IACE,MAAM,SACJqjG,SAGQolC,EAAiBtpI,GAErB0pG,EAAU/E,EAAe,UAAWT,GAC1CppD,EAAa4uD,EAAQ/kE,OAAQ,CAAER,OAAQulE,EAAQvlE,QACjD,CAAE,MAAOr3C,GACP,MAAM,YAAEoX,GAAgBi7C,GAAgBryD,GAClCi9I,EAAkB7lI,EAAY5f,MAAMsK,GAAsB,8BAAdA,GAAK1R,OACvD,GAAI6sJ,EAAiB,CACnB,MAAMp8G,EAAS,CACbmiE,QAAS,CAACi6C,EAAgB58I,UAE5B,MAAM,IAAIghD,GAAa,GAAI,GAAI,IAAK,GAAIxgB,EAC1C,CACF,GA6HI1E,aAAck2B,OAItB,CC/MO,SAAS6qF,GAAeptJ,GAC7B,MAAMk+D,EAAerW,KACrB,OACE3kD,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAOR,EAAMQ,MAAM4C,UAC7BF,EAAAA,EAAAA,KAACqS,GAAY,CACX3X,MAAOoC,EAAMiV,KACbO,OAAQxV,GAAOuyE,KAAKzT,SACpBj1D,QAASA,IAAMq0D,EAAaJ,GAASiB,YAAa,CAAExX,OAAQ,CAAElnD,GAAIL,EAAMuyE,KAAKlyE,SAIrF,CCWO,SAASgtJ,GAAgBrtJ,GAC9B,MAAM,IAAQqK,EAAAA,EAAAA,OACP08I,EAASI,IAAcvoJ,EAAAA,EAAAA,WAAS,GAEjC2oD,GAASgZ,EAAAA,GAAAA,KACTrC,EAAerW,MAEnBzkC,KAAMkkG,EAAQ,MACdp3G,EAAK,QACLuoD,GACEc,GAAqB5E,EAAM,cAAepN,EAAOkgE,aAC/ChxB,EAC0B,iBAAvB6wB,GAAU1hC,SACbsD,GAAsBo+B,GAAU1hC,UAChC0hC,GAAU1hC,SACV+Q,EAC2B,iBAAxB2wB,GAAU5hC,UACbwD,GAAsBo+B,GAAU5hC,WAChC4hC,GAAU5hC,UAEhB,GAAIx1E,EAAO,OAAOhN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,IACzD,IAAK6uD,EAAU,OAAOpkH,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,IAEnD,MAAM68B,EAAyB52E,KAAKa,UAAUmzG,GAAU1iC,YAAYn5E,SAAS,QACvEgpG,EAAY6S,GAAU1iC,WAEtB0mE,GAAUgC,EAAAA,GAAAA,IAAShmC,EAASo/B,MAAO,CAAE6G,UAAU,IAC/C/4G,EAAQ82G,EAAQkC,SAASvjJ,KAAI,CAACm7I,EAAMx0I,KAAM,CAAGw0I,OAAM/kJ,GAAIuQ,MACvDm0I,EAAauG,EAAQmC,UAAUxjJ,KAAI,CAACm7I,EAAMx0I,KAAM,CAAGw0I,OAAM/kJ,GAAIuQ,MACnE,OACE1N,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,UACEoF,EAAAA,EAAAA,MAACoc,GAAW,CAACK,gBAAgB,WAAU7hB,SAAA,EACrCF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,QAAQhH,SAAEkkH,GAAUhnH,QACzC4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,eAAehH,SAAEkkH,GAAUxoG,eAChD5b,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,aAAahH,SAC/BwR,GAAiB0yG,GAAUohC,QAASphC,EAASo8B,YAE/Cp8B,EAASomC,UACRxqJ,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,YAAYhH,SAC9BwR,GAAiB0yG,GAAUomC,SAAUpmC,EAASo8B,YAE/C,KACHp8B,EAASqmC,OACRzqJ,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,YAAYhH,SAC9BwR,GAAiB0yG,GAAUqmC,MAAOrmC,EAASo8B,YAE5C,MACJxgJ,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,aAAahH,SAAEkkH,GAAUo8B,YAC9CxgJ,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,YAAaoa,WAAS,EAAAphB,UACzCF,EAAAA,EAAAA,KAACiP,GAAQ,CAACR,KAAM21G,GAAUo/B,MAAMhlI,gBAEhC1hB,EAAM4tJ,8BACNplJ,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACkqJ,GAAc,CACb5sJ,MAAO4J,EAAE,WACT6K,KAAMqyG,EAAS/oD,QACfgU,KAAM+0C,EAASjpD,eAAeyU,cAEhC5vE,EAAAA,EAAAA,KAACmsE,GAAsB,CACrBzxE,MAAO0pH,EAASr0C,SAChBz9D,OAAQ8xG,EAASjpD,eAAe8U,aAAarU,SAC7Cj1D,QAASA,IACPq0D,EAAaJ,GAASiB,YAAa,CACjCxX,OAAQ,CAAElnD,GAAIinH,EAASjpD,eAAe8U,aAAa9yE,YAM7D6C,EAAAA,EAAAA,KAACkhB,GAAU,CAACI,WAAS,EAAAphB,UACnBF,EAAAA,EAAAA,KAACgI,EAAAA,EAAO,OAEVhI,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,aAAahH,SAAEkkH,EAASjpD,eAAeoV,WAAWnzE,QACvE4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,YAAYhH,SAAEkkH,EAASjiC,YAC5CniF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,SAAShH,SAAEkkH,EAASp6E,SACzChqC,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,SAAShH,SAAEkkH,EAAStiC,SACzC9hF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,aAAahH,SAAEkkH,EAASvhC,aAC7C7iF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,gBAAgBhH,SAAEkkH,EAAS5iC,UAAYt6E,CAAC,KAAOA,CAAC,SACrElH,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,YAAaka,SAAUgjG,EAAS1hC,SAASxiF,UAC5DF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SAAEqzF,GAASxsF,KAAI,EAAG3J,WAAW4C,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAAnU,SAAa9C,GAAPA,UAEtD4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,aAAcka,SAAUgjG,EAAS5hC,UAAUtiF,UAC9DF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SAAEuzF,GAAU1sF,KAAI,EAAG3J,WAAW4C,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAAnU,SAAa9C,GAAPA,UAErD4pF,IACAhnF,EAAAA,EAAAA,KAACkhB,GAAU,CAACI,WAAS,EAAAphB,UACnBF,EAAAA,EAAAA,KAACo2E,GAAoB,CACnB94E,MAAO4J,EAAE,mBACTxM,MAAO0V,KAAKa,UAAUmzG,EAAS1iC,gBAIpCsF,IACChnF,EAAAA,EAAAA,KAACkhB,GAAU,CAACI,WAAS,EAAChkB,MAAO4J,EAAE,wBAAwBhH,SAC/B,iBAAdqxG,EACJA,EAAU/yF,WAAW7jB,QAAQ,IAAK,IAAI6M,MAAM,KAAK,GACjD48G,EAAS1iC,WAAW1tE,MAAMwK,aAIjC4lG,IACC9+G,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACkhB,GAAU,CAACI,WAAS,EAAChkB,MAAO4J,EAAE,mBAAmBhH,UAChDF,EAAAA,EAAAA,KAACgkJ,GAAc,CACbH,QAASA,EACTI,WAAYA,EACZC,cAAe9/B,EAASo8B,cAI5BxgJ,EAAAA,EAAAA,KAACqjJ,GAAe,CAACG,MAAOp/B,EAASo/B,MAAOK,QAASA,QAIrDv+I,EAAAA,EAAAA,MAAC4b,GAAU,CAACI,WAAS,EAAAphB,SAAA,EACnBF,EAAAA,EAAAA,KAACmkJ,GAAS,CACR1B,SAAS,QACTjC,SAAUp8B,EAASo8B,SACnBlvG,MAAOA,EACPyzG,kBAAmBlB,IAEpBhC,EAAWr+I,QACVxD,EAAAA,EAAAA,KAACmkJ,GAAS,CACR1B,SAAS,aACTjC,SAAUp8B,EAASo8B,SACnBlvG,MAAOuwG,EACPkD,kBAAmBlB,IAEnB,YAKd,CC9JO,SAAS8G,GAAoBtkI,GAClC,MAAM,IAAQlf,EAAAA,EAAAA,MAER09G,EAAiBX,KACjBlpD,EAAerW,KAEfy8C,EAAatwB,GAAwB,IACtCzqD,EACH0qD,aAAeqzC,GAAuBS,EAAe,OAAQT,GAC7DhlH,KAAM,mDAEFizE,GAAYv2E,EAAAA,EAAAA,cACfsoH,IACC,MAAMwF,EAAU/E,EAAe,UAAWT,GAC1C,OAAOppD,EAAa4uD,EAAQ/kE,OAAQ,CAAER,OAAQulE,EAAQvlE,QAAS,GAEjE,CAACwgE,EAAgB7pD,IAEb34B,EAAa8sC,GAAc,IAC5B9oD,EACH1f,QAAS0rE,IAELu4E,GAAmB9uJ,EAAAA,EAAAA,cACtBsoH,IACC,MAAMwF,EAAU/E,EAAe,WAAYT,GAC3C,OAAOppD,EAAa4uD,EAAQ/kE,OAAQ,CAAER,OAAQulE,EAAQvlE,QAAS,GAEjE,CAACwgE,EAAgB7pD,IAEbz4B,EAAoB+sC,KAwB1B,OAvBqBjrE,EAAAA,EAAAA,UACnB,IAAM,CACJg+B,EACAE,EACA,CACEzhB,OAAQ5Z,EAAE,oBACV9H,KAAM,uBACN0jB,KAAOshG,IACLpkH,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAM21G,EAASjpD,eAAeogB,qBAAqBn+E,KACnDuJ,QAASA,IAAMikJ,EAAiBxmC,MAItChjB,EACA,CACEtgF,OAAQ5Z,EAAE,YACV9H,KAAM,WACN0jB,KAAO+nI,IAAU7qJ,EAAAA,EAAAA,KAACqS,GAAY,CAAC3X,MAAOmwJ,EAAML,cAGhD,CAACnoH,EAAYE,EAAmBr7B,EAAGk6F,EAAYwpD,GAGnD,CCpDO,SAASE,GAAmB5hH,GACjC,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR0kC,EAAsB8+G,GAAoB,CAAE90I,cAAc,EAAM0mD,aAAa,IAC7E8W,EAAyBlE,GAAc,CAAEt5D,cAAc,EAAM0mD,aAAa,IAC1EvzB,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAACgvE,IAAyB,CAACA,IAEzDzT,EAAaH,KAkBnB,OAjByB9E,IACvBiF,EAAW,CACTviE,MAAO6J,EAAE,8BAA+B,CAAEoV,MAAOq+C,EAAUn3D,SAC3DzF,YAAamJ,EAAE,kEAAmE,CAChFoV,MAAOq+C,EAAUn3D,SAEnBwoC,iBAAkB9kC,EAAE,kBAAmB,CAAEoV,MAAOq+C,EAAUn3D,SAC1Ds1B,MAAO6hC,EAAUv7D,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QACzD27B,MAAO62B,GACPtoD,UAAU,EACVukC,sBACA7C,cAAeA,EACfE,aACAD,SAAUA,CAACm7E,EAAoB34F,IAC7BgkC,GAAcgC,EAAM,cAAc2yD,EAASjnH,GAAGqhB,cAAeiN,IAC/D,CAGN,CCfO,SAASs/H,GAAoB1kI,GAKlC,MAAM,IAAQlf,EAAAA,EAAAA,MACR6jJ,EAAiBF,GAAmBzkI,GAAS4kI,4BAC7C,KAAE/qI,GAAS0jD,GAA6CnS,EAAM,eAC9Dy5F,EAAoBlmJ,QAAQkb,GAAQA,EAAK5c,SAAW4c,EAAK5c,QAAc,MACvE6nJ,GAAgFrvJ,EAAAA,EAAAA,cACpF4S,MAAO01G,EAAU9lF,KACf,MAAM8sH,QAAwB57F,GAC5BiC,EAAM,cAAc2yD,EAASjnH,GAAGqhB,cAChC,CAAE8f,YAEJjY,EAAQglI,0BAA0BD,EAAgB,GAEpD,CAAC/kI,IAGGu+B,EAAaT,KAEb0gE,EAAiBX,KAEjBonC,GAAWxvJ,EAAAA,EAAAA,cACdsoH,IACC,MAAMwF,EAAU/E,EAAe,OAAQT,GACvC,OAAOx/D,EAAWglE,EAAQ/kE,OAAQ,CAAER,OAAQulE,EAAQvlE,QAAS,GAE/D,CAACO,EAAYigE,IAwCf,OArCmBxgH,EAAAA,EAAAA,UACjB,IAAM,CACJ,CACEoG,UAAU,EACVrI,UAAY4xE,GACE9sE,EAAZ8sE,EAAc,4BAAiC,4BACjDvwE,KAAMrJ,EAAe+H,OACrB3B,UAAWnG,EAAoBsG,OAC/Be,SAAUwF,EAAE,qBACZ5J,MAAO4J,EAAE,oBACTnG,WAAaqjH,GAAa0S,GAAmB1S,EAAUl9G,EAAGgkJ,GAC1D3oJ,SAAUA,CAAC6hH,EAAU9lF,IAAY6sH,EAAqB/mC,EAAU9lF,GAChE98B,WAAa4iH,GAAaA,EAAS9lF,SAErC,CACE76B,KAAMrJ,EAAeyN,KACrBrH,UAAWnG,EAAoBsG,OAC/BuC,KAAM84D,GAAAA,GACN34D,QAASuB,EAAAA,GAAcC,QACvBvH,MAAO4J,EAAE,iBACTnG,WAAaqjH,GAAa0S,GAAmB1S,EAAUl9G,EAAGgkJ,GAC1DnjJ,KAAOq8G,GAAaknC,EAASlnC,GAC7B35G,UAAU,GAEZ,CAAEhH,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,mBACTnG,WAAaqjH,GAAa4S,GAAqB5S,EAAUl9G,GACzDP,QAAUy9G,GAAa4mC,EAAe,CAAC5mC,IACvC98G,UAAU,KAGd,CAACJ,EAAGgkJ,EAAmBC,EAAsBG,EAAUN,GAG3D,CC9DO,SAASO,GAAazuJ,GAM3B,MAAM0uJ,EAA2B50B,GAAsB,YAEjDvrG,EAAkBwd,MACjB0nC,EAAWk7E,IAAgB/vJ,EAAAA,EAAAA,UAA2B,MACvDgwJ,EAAoB5uJ,EAAM6uJ,mBAAmBhkI,MAAK,EAAGxqB,QAAgB,sBAAPA,IAE9DynD,EAAaT,KACbE,GAASgZ,EAAAA,GAAAA,MACT,MACJrwD,EACAkT,KAAMkkG,EAAQ,QACd7uD,GACEc,GAAqB5E,EAAM,aAAcpN,EAAOkgE,aAC9CnvG,GAAWC,EAAAA,GAAAA,OAEfrI,MAAO4+I,EACP1rI,KAAM6zB,EACNwhB,QAASs2F,GACPx1F,GACF,GAAGv5D,EAAMgqJ,mBACT4E,EAAoBrnG,EAAOuxC,UAAYvxC,EAAOlnD,IAE1C2uJ,EAAiB5nC,KACvB,IAAIu2B,EAGA,CAAEt9I,GAAIy9D,GAASovF,WACnB,GAAI5lC,EAAU,CACZ,MAAM,OAAEv/D,EAAM,OAAER,GAAWynG,EAAe,eAAgB1nC,GAC1Dq2B,EAAQ,CAAEt9I,GAAI0nD,EAAQR,SACxB,CACA,MAAMzjB,EAAcmqH,GAAoB,CACtCE,0BAA2BA,IAAM71I,EAASwvC,EAAW61F,EAAMt9I,GAAI,CAAEknD,OAAQo2F,EAAMp2F,UAC/EgnG,0BAA2B91F,KAG7Bx5D,EAAAA,EAAAA,YAAU,MAER2S,iBACOg9I,GAAsBrnG,EAAOlnD,UAC5BkyD,GAAsBoC,EAAM,gBAAgBpN,EAAOlnD,MAAOkuB,EAAgBI,QAAQC,MACrF4qH,IACCmV,EAAanV,EAAI,GAGvB,CARKyV,EAQL,GACC,CAACL,EAAmBrnG,EAAOlnD,GAAIkuB,EAAgBI,SAClD,MAAMugI,GAAc3nJ,EAAAA,EAAAA,UAAQ,IAmDnB,IAlDsBvH,EAAM6uJ,mBAAmB5kJ,KAAKm8C,IACzD,MAAM+oG,EAAY,CAChB9uJ,GAAIuuJ,EAAoBn7E,GAAWpzE,GAAK42C,GAAU52C,GAClDqzE,eAAgBk7E,EAAoBlO,QAAiB77I,EACrDi0F,UAAW81D,EAAoB33G,GAAU52C,QAAKwE,GAGhD,MAAiB,SAAbuhD,EAAM/lD,GACD,CACLG,MAAO,GAAGy2C,GAAU32C,OACpB0K,GAAI88C,EAAW1B,EAAMp7C,GAAI,CACvBu8C,OAAQ4nG,KAIG,cAAb/oG,EAAM/lD,IAAsBuuJ,EACvB,CACLpuJ,MAAO,GAAGizE,GAAWnzE,OACrB0K,GAAI88C,EAAW1B,EAAMp7C,GAAI,CACvBu8C,OAAQ,CACNlnD,GAAIozE,GAAWpzE,GACfqzE,eAAgBk7E,EAAoBlO,QAAiB77I,EACrDi0F,UAAW81D,EAAoB33G,GAAU52C,QAAKwE,MAKrC,cAAbuhD,EAAM/lD,GACD,CACLG,MAAO4lD,EAAM5lD,MACbwK,GAAI88C,EAAW1B,EAAMp7C,GAAI,CACvBu8C,OAAQ4nG,KAKG,sBAAb/oG,EAAM/lD,GACD,CACLG,MAAO4lD,EAAM5lD,MACbwK,GAAI88C,EAAW1B,EAAMp7C,GAAI,CACvBu8C,OAAQ,CACNlnD,GAAIozE,GAAWpzE,GACfqzE,eAAgBk7E,EAAoBlO,QAAiB77I,MAKtD,CAAErE,MAAO4lD,EAAM5lD,MAAOwK,GAAI88C,EAAW1B,EAAMp7C,IAAK,IAGxB,CAAExK,MAAO8mH,GAAUhnH,QACnD,CACDwnD,EACA7Q,GAAU52C,GACV42C,GAAU32C,KACVmzE,GAAWpzE,GACXozE,GAAWnzE,KACXsuJ,EACA5uJ,EAAM6uJ,mBACNvnC,GAAUhnH,OAGN8uJ,EAAgBN,GAAiB5+I,EACjCm/I,EAAkB52F,GAAWs2F,EACnC,OAAIK,GACKlsJ,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOk/I,EAAehvF,cAAeivF,IAEnD/nC,GAAarwE,GAGhBzuC,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO+mH,GAAUhnH,KACjBgjD,YAAa4rG,EACbrrG,eACE3gD,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAAS,IAAIkoJ,KAA6B5qH,GAC1Cx9B,SAAU6F,GAAAA,GAAiBC,MAC3B3I,aAAc6jH,OAIpBpkH,EAAAA,EAAAA,KAAC09D,GAAc,CAACe,QAAS3hE,EAAM2hE,QAAStU,KAAMrtD,EAAMqtD,KAAM9F,OAAQA,QAfnCrkD,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,GAkBlE,CCnKO,SAASkgF,KACd,MAAM,GAAEltI,EAAK,KAAOkgE,EAAAA,GAAAA,KACpB,OAAOr9D,EAAAA,EAAAA,KAAC84H,GAAa,CAAC10E,IAAKqN,EAAM,kBAAmBkkC,YAAax4F,GACnE,CCIA,SAAS+pG,GAAkB9pG,GACzB,MAAM,IAAQ+J,EAAAA,EAAAA,MAYd,OAXsC9C,EAAAA,EAAAA,UACpC,KAAM,CACJyc,OAAiB,aAAT1jB,EAAsB8J,EAAE,YAAuB,gBAAT9J,EAAyB8J,EAAE,eAAiB,GAC1F4b,KAAOzG,IAASrc,EAAAA,EAAAA,KAACumG,GAAS,CAAC7rC,KAAMr+C,EAAK8+C,gBAAgB8rC,cACtDvsG,MAAQ2hB,GACNA,EAAK8+C,gBAAgB8rC,aAAe5qF,EAAK8+C,gBAAgB8rC,aAAazjG,OAAS,EACjFs9B,KAAM,SACNuC,KAAM,YAER,CAACn8B,EAAG9J,GAGR,CAEA,SAASkyE,KACP,MAAM,EAAEpoE,IAAMC,EAAAA,EAAAA,MAWd,OAVe9C,EAAAA,EAAAA,UACb,KAAM,CACJyc,OAAQ5Z,EAAE,eACVzD,KAAM,cACN/I,MAAQu9D,GAAkBA,EAAKr8C,YAC/BynB,KAAM,cACNvC,KAAM,iBAER,CAAC55B,GAGL,CCxBO,SAASgjI,KACd,MAAM,EAAEhjI,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACfv0B,EAAiBq0G,KACjBviG,EDsBD,SAAoC7b,GAIzC,MAAM20C,EAAerW,KACfN,GAASgZ,EAAAA,GAAAA,KACTgV,GAAYv2E,EAAAA,EAAAA,cACfm8D,GACC+C,EAAaJ,GAASqwE,qBAAsB,CAC1C5mF,OAAQ,CACNmsB,eAAgBnsB,EAAOmsB,eACvBrzE,GAAIknD,EAAOlnD,GACXs7G,QAASxgD,EAAK96D,OAGpB,CAAC69D,EAAc3W,EAAOlnD,GAAIknD,EAAOmsB,iBAE7BnuC,EAAa8sC,GAAc,IAC5B9oD,EACH1f,QAAS0rE,IAEL9vC,EAAoB+sC,KACpBkD,EAAgBhD,GAAiBnpD,GACjCosD,EAAiB3C,GAAkBzpD,GACnC+lI,EAmER,WACE,MAAM,EAAEllJ,IAAMC,EAAAA,EAAAA,MA0Bd,OAxBsC9C,EAAAA,EAAAA,UACpC,KAAM,CACJyc,OAAQ5Z,EAAE,kBACV4b,KAAOm1C,IACL,MAAMx6C,EAA0Ew6C,GAC5EkD,gBAAgB19C,QAAU,CAC5By0C,QAAS,GACT51C,MAAO,GAET,OACEtc,EAAAA,EAAAA,KAACqoB,GAAAA,EAAS,CAAC,aAAYnhB,CAAC,iBAAiBhH,SACtCud,EAAOy0C,QAAQnrD,KAAK2W,IACnB1d,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAAkBC,YAAU,EAAAhoB,SAC9Bwd,EAAMtgB,MADEsgB,EAAMtgB,SAIT,EAGhBgC,UAAMuC,EACNojC,qBAAsB,UAExB,CAAC79B,GAGL,CA/F6BmlJ,GACrBC,EAAaplD,GAAkB,eAC/BC,EAAkB92B,GAAuBzV,GAAS82B,iBAAkB,CACxEniB,qBAAiB5tE,IA6BnB,OA1BqB0C,EAAAA,EAAAA,UAAiC,KACpD,IAAIwT,EAAmC,GAcvC,MAZ8B,cAA1BwsC,EAAOmsB,iBACT34D,EAAU,CAACwqB,EAAYE,EAAmB6pH,EAAoB55E,EAAeC,IAInD,oBAA1BpuB,EAAOmsB,gBACmB,0BAA1BnsB,EAAOmsB,iBAEP87E,EAAWltJ,KAAO,GAClB+nG,EAAgB/nG,KAAO,GACvByY,EAAU,CAACwqB,EAAYiqH,EAAYnlD,IAE9BtvF,CAAO,GACb,CACDwqB,EACAE,EACA6pH,EACA55E,EACAC,EACA65E,EACAnlD,EACA9iD,EAAOmsB,gBAGX,CC/EuB+7E,GACfloG,GAASgZ,EAAAA,GAAAA,KACTvwB,EAAO6zB,GAAoB,CAC/Bvc,IAAKqN,EAAM,gBAAgBpN,EAAOlnD,IAAM,YACxCizB,iBACA8R,iBAEIvM,ECND,SAA2CmX,GAChD,MAAM,IAAQ3lC,EAAAA,EAAAA,MACR6zD,EAAerW,KACfo/E,EAAcF,GAAe/2F,EAAK00B,yBAClCnd,GAASgZ,EAAAA,GAAAA,KACTmT,EAAiBnsB,EAAOmsB,eAExB1vE,EAAgBgsC,EAAKhsC,eAAiB,GACtCktI,EAAmBf,GAA6B,IACjD5oF,EACHvjD,gBACAysI,WAAY,YAGRif,EAAc5oF,GAA6CnS,EAAM,WAAWvxC,KAC5EwkH,EAAgB1/H,QAAQwnJ,GAAeA,EAAYlpJ,SAAWkpJ,EAAYlpJ,QAAc,MAE9F,OAAOe,EAAAA,EAAAA,UAAgC,KACrC,MAAMf,EAAkC,GAqCxC,MAnCuB,cAAnBktE,GACFltE,EAAQS,KAAK,CACXN,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVvH,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,eACTP,QAASA,IACPq0D,EAAattB,OAAOktB,GAAS6xF,kBAAmB,CAC9CpoG,OAAQ,CAAEmsB,eAAgBnsB,EAAOmsB,eAAgBrzE,GAAIknD,EAAOlnD,MAEhE4D,WAAYA,IACV2jI,OACI/iI,EACAuF,EACE,wIAKZ5D,EAAQS,KAAKiqI,GAEU,cAAnBx9D,IACFltE,EAAQS,KAAK,CAAEN,KAAMrJ,EAAesJ,YACpCJ,EAAQS,KAAK,CACXN,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,gBACTP,QAASo9H,EACTz8H,UAAU,EACVvG,WAAam5D,GAAqB+8D,GAAsB/8D,EAAOhzD,MAG5D5D,CAAO,GACb,CACD4D,EACA68H,EACA/oE,EACA3W,EAAOmsB,eACPnsB,EAAOlnD,GACPunI,EACAsJ,EACAx9D,GAEJ,CD5DyBk8E,CAAkC5/G,GACnD3K,EAAa2hG,GAAgBh3F,EAAK00B,wBAAyB10B,EAAK5Q,YAEhEswH,EAAc5oF,GAA6CnS,EAAM,WAAWvxC,KAC5EwkH,EAAgB1/H,QACpBwnJ,GACEA,EAAYlpJ,SACZkpJ,EAAYlpJ,QAAc,MACA,cAA1B+gD,EAAOmsB,gBAGX,IAAItrC,EAAkB,GAClBC,EAAwB,GAgB5B,MAd8B,cAA1Bkf,EAAOmsB,gBACTtrC,EACIh+B,EADcw9H,EACZ,wDACA,gDAENv/F,EACIj+B,EADoBw9H,EAClB,kDACA,2FAENx/F,EAAkBh+B,EAAE,kBACpBi+B,EAAwBj+B,EAAE,2CAG5Bq2D,GAAqB,gBAEnBv9D,EAAAA,EAAAA,KAACmhD,GAAU,CAAAjhD,UACTF,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,4BACHizB,eAAgBA,EAChBuF,eAAgBA,EAChBuM,aAAcA,EACdC,WAAYA,EACZ8C,gBAAiB/9B,EAAE,iCACnBg+B,gBAAiBA,EACjBC,sBAAuBA,EACvBmC,eAAgBo9F,OAAgB/iI,EAAYo2B,GAAAA,GAC5CwN,sBAAsBvlC,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrCwN,qBAAsBo/F,EAAgBx9H,EAAE,oBAAiBvF,EACzD0jC,sBACEq/F,EACI,IACE1pE,EAAaJ,GAAS6xF,iBAAkB,CACtCpoG,OAAQ,CAAElnD,GAAIknD,EAAOlnD,GAAIqzE,eAAgBnsB,EAAOmsB,uBAEpD7uE,KAEFmrC,KAIZ,CE1DO,SAAS6/G,GACd7/G,EACAwwE,GAEA,MAAM,EAAEp2G,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACfioG,ECnBD,SAA0B1jH,GAC/B,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR0kC,ECDD,SAA2BxlB,GAChC,MAAM20C,EAAerW,KACf0tB,GAAYv2E,EAAAA,EAAAA,cACf+9B,GACCmhC,EAAaJ,GAASw6B,sBAAuB,CAAE/wC,OAAQ,CAAElnD,GAAI08B,EAAO18B,OACtE,CAAC69D,IAEG34B,EAAa8sC,GAAc,IAC5B9oD,EACH1f,QAAS0rE,IAEL9vC,EAAoB+sC,KACpBkD,EAAgBhD,GAAiBnpD,GACjCosD,EAAiB3C,GAAkBzpD,GAKzC,OAJqBhiB,EAAAA,EAAAA,UACnB,IAAM,CAACg+B,EAAYE,EAAmBiwC,EAAeC,IACrD,CAACpwC,EAAYE,EAAmBiwC,EAAeC,GAGnD,CDlB8Bo6E,CAAkB,CAAEh3I,cAAc,EAAM0mD,aAAa,IAC3E8W,EAAyBlE,GAAc,CAAEt5D,cAAc,EAAM0mD,aAAa,IAC1EvzB,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAACgvE,IAAyB,CAACA,IACzDzT,EAAaH,KAkBnB,OAjBuBqtF,IACrBltF,EAAW,CACTviE,MAAO6J,EAAE,6BAA8B,CAAEoV,MAAOwwI,EAAQtpJ,SACxDzF,YAAamJ,EAAE,gEAAiE,CAC9EoV,MAAOwwI,EAAQtpJ,SAEjBwoC,iBAAkB9kC,EAAE,iBAAkB,CAAEoV,MAAOwwI,EAAQtpJ,SACvDs1B,MAAOg0H,EAAQ1tJ,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QACvD27B,MAAO62B,GACPtoD,UAAU,EACVukC,sBACA7C,gBACAE,aACAD,SAAUA,CAACpP,EAAyBpO,IAClCgkC,GAAcgC,EAAM,sBAAsB53B,EAAO18B,GAAGqhB,cAAeiN,IACrE,CAGN,CDLwBshI,CAAiBjgH,EAAK00B,yBACtCnd,GAASgZ,EAAAA,GAAAA,KAETg0B,EAAgBztB,GACpBnS,EAAM,uBACNvxC,KAEI8sI,EAAkBhoJ,QACtBqsF,GAAiBA,EAAc/tF,SAAW+tF,EAAc/tF,QAAc,OAGlE,cAAEyuD,GAAkBJ,KAE1B,IAAIs7F,EAA6C,QAE1BtrJ,IAAnBmrC,EAAKpoB,WAAqD,IAA1BooB,EAAKpoB,UAAUlhB,SACjDypJ,EAAqC/lJ,EAAE,8CAItC4lC,EAAKpoB,YACHooB,EAAKpoB,UAAUpgB,OAAO+X,GAASA,EAAK8+C,eAAe6iC,kBAAkB1qF,SACxEy+C,GAAeigB,qBAEfi7E,EAAqC/lJ,EACnC,0EAIJ,MAAMgmJ,EAsDR,SAAoB5vC,EAAsB/nD,GACxC,MAAMnR,EAAMqN,EAAM,gBAAgB6rD,8BAC5B/tD,EAAcyT,KACd50D,EAAerD,MACf,EAAE7D,IAAMC,EAAAA,EAAAA,MAEd,MAAO,KACA,WACH,UACQooD,EAAYnL,EAAK,CAAC,GACnBmR,GACP,CAAE,MAAOvoD,GACPoB,EAAazD,SAAS,CACpBtH,QAAS,SACThG,MAAO6J,EAAE,wCACThH,SAAU8M,aAAiBsX,MAAQtX,EAAMK,QAAUqgC,OAAO1gC,GAC1DzB,QAAS,KAEb,CACD,EAZI,EAYD,CAER,CA3EkB4hJ,CAAW7vC,EAAcxwE,EAAKyoB,SAE9C,OAAOlxD,EAAAA,EAAAA,UACL,IAAM,CACJ,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVvH,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,iBACTP,QAASA,IACPq0D,EAAattB,OAAOktB,GAASwyF,qBAAsB,CACjD/oG,OAAQ,CAAEmsB,eAAgBnsB,EAAOmsB,eAAgBrzE,GAAIknD,EAAOlnD,MAEhE4D,WAAYA,IACVisJ,OACIrrJ,EACAuF,EACE,yIAGV,CAAEzD,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,kBACTP,QAASimJ,EACTtlJ,UAAU,EACVvG,WAAa+rJ,GAA+B71B,GAAsB61B,EAAS5lJ,IAE7E,CACEzD,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/ByC,KAAMixG,GAAAA,GACN72G,MAAO4J,EAAE,4BACTP,QAASumJ,EACTnsJ,WAAYA,IAAMksJ,KAGtB,CACE/lJ,EACA0lJ,EACA5xF,EACA3W,EAAOmsB,eACPnsB,EAAOlnD,GACP6vJ,EACAC,EACAC,GAGN,CGrFO,SAAS/iB,KACd,MAAM,EAAEjjI,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACfziB,EAAe2iE,KACfxgD,GAASgZ,EAAAA,GAAAA,KACTjtC,EAAiB40E,GACrB,eAAe3gD,EAAOlnD,IAAM,yBAExB2vC,EAAO6zB,GAA4B,CACvCvc,IAAKqN,EAAM,gBAAgBpN,EAAOlnD,IAAM,wBACxCizB,iBACA8R,iBAGIvM,EAAiBg3H,GAAoC7/G,EAAMuX,EAAOlnD,IAAM,IACxEglC,EAAa+5G,GAA0B,CAC3CC,0BAA2BrvG,EAAK00B,wBAChC46E,oBAAqBtvG,EAAK00B,0BAGtB6vB,EAAgBztB,GACpBnS,EAAM,uBACNvxC,KACI8sI,EAAkBhoJ,QACtBqsF,GAAiBA,EAAc/tF,SAAW+tF,EAAc/tF,QAAc,MAiCxE,OA9BAi6D,GAAqB,eAyBrBlF,GACE,CAAE3nB,QAAS,CAAC,mBAAoBgqB,KAAM,CAAC,kBAAmBP,YAAa,CAAC,oBAxB3Cr+D,EAAAA,EAAAA,cAC5BuR,IACC,GAAKA,GAASiwG,aACd,OAAQjwG,GAAS4tD,YACf,IAAK,cAEI,YADC5tD,GAASq9B,QAERoC,EAAKyoB,UAGd,MACF,IAAK,OAEI,qBADCloD,GAAS5J,MAERqpC,EAAKyoB,UAIlB,GAEF,CAACzoB,MASD9sC,EAAAA,EAAAA,KAACmhD,GAAU,CAAAjhD,UACTF,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,8BACHizB,eAAgBA,EAChBuF,eAAgBA,EAChBuM,aAAcA,EACdC,WAAYA,EACZ8C,gBAAiB/9B,EAAE,mCACnBg+B,gBAEMh+B,EADJ8lJ,EACM,0DACA,+CAER7nH,sBAEMj+B,EADJ8lJ,EACM,oDAEA,yFAGR1lH,eAAgB0lH,OAAkBrrJ,EAAYo2B,GAAAA,GAC9CwN,sBAAsBvlC,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrCwN,qBAAsB0nH,EAAkB9lJ,EAAE,sBAAmBvF,EAC7D0jC,sBACE2nH,EACI,IACEhyF,EAAaJ,GAASwyF,oBAAqB,CACzC/oG,OAAQ,CAAElnD,GAAIknD,EAAOlnD,GAAIqzE,eAAgBnsB,EAAOmsB,uBAEpD7uE,KAEFmrC,KAIZ,CC/GO,SAASugH,IAAiB,IAC/BjpG,EAAG,YACH0c,IAKA,MAAMqnC,EAAyBjN,KAmB/B,OAhBuB7B,GAAyB,CAC9CC,YAAal1C,GAAY,SACzBo1C,mBAAoB,CAClBp8F,KAAM,CACJi9F,QAASj2C,GAAY,SACrB0c,YAAaA,GAA4B,CAAC,GAE5C3jE,GAAI,CACFk9F,QAASj2C,GAAY,SACrB0c,YAAaA,GAA4B,CAAC,IAG9Cy4B,cAAe,CAAC,OAAQ,KAAM,cAAe,aAAc,cAAe,SAC1EE,kBAAmB,CAfW0B,KAeegN,EhUoJ1C,WACL,MAAM,EAAEjhG,IAAMC,EAAAA,EAAAA,MACd,OAAO9C,EAAAA,EAAAA,UACL,KAAM,CACJ+H,IAAK,QACL9O,MAAO4J,EAAE,cACTzD,KAAMysB,GAAkBuB,YACxB6yB,MAAO,kBACPj+B,QAAS,CAAC,CAAE/oB,MAAO4J,EAAE,yBAA0BxM,MAAO,SACtD0rB,YAAalf,EAAE,2BAEjB,CAACA,GAEL,CgU/KiComJ,IAe7B5zD,cAAe,CAAC,cAGpB,CCnBO,SAAS6zD,KACd,MAAM,EAAErmJ,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACfN,GAASgZ,EAAAA,GAAAA,KAET2wE,EAAmBf,GACvB,IAAK5oF,EAAQkpF,WAAY,OACzB,CAAE9iI,UAAU,IAGd,OAAOpG,EAAAA,EAAAA,UAAuC,IACd,0BAA1BggD,EAAOmsB,eACF,GAGF,CACL,CACE/sE,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/B8J,UAAU,EACVvH,KAAM84D,GAAAA,GACN1+D,MAAO4J,EAAE,cACTP,QAAU+W,GACRs9C,EAAaJ,GAASszE,mBAAoB,CACxC7pF,OAAQ,CACNmsB,eAAgBnsB,EAAOmsB,eACvBrzE,GAAIugB,EAAM6yD,UACVk6D,SAAU/sH,EAAMvgB,MAGtB4D,WAAa2c,GAAUo5G,GAAmBp5G,EAAOxW,IAEnD8mI,IAED,CAAC9mI,EAAG8zD,EAAcgzE,EAAkB3pF,EAAOmsB,gBAChD,CCnCO,SAASy5D,KACd,MAAM,EAAE/iI,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACfziB,ECTD,SAAqC7b,GAI1C,MAAM20C,EAAerW,KACfN,GAASgZ,EAAAA,GAAAA,KACTgV,GAAYv2E,EAAAA,EAAAA,cACf4hB,GACCs9C,EAAaJ,GAASiwE,sBAAuB,CAC3CxmF,OAAQ,CAAEmsB,eAAgBnsB,EAAOmsB,eAAgBrzE,GAAIugB,EAAM6yD,UAAWk6D,SAAU/sH,EAAMvgB,OAE1F,CAAC69D,EAAc3W,EAAOmsB,iBAElBnuC,EAAa8sC,GAAc,IAC5B9oD,EACH1f,QAAS0rE,IAELG,EAAgBhD,GAAiBnpD,GACjCosD,EAAiB3C,GAAkBzpD,GACnC+lI,EAkBR,WACE,MAAM,EAAEllJ,IAAMC,EAAAA,EAAAA,MA0Bd,OAxB6C9C,EAAAA,EAAAA,UAC3C,KAAM,CACJyc,OAAQ5Z,EAAE,kBACV4b,KAAOpF,IACL,MAAMD,EAA0EC,GAC5Ey9C,gBAAgB19C,QAAU,CAC5By0C,QAAS,GACT51C,MAAO,GAET,OACEtc,EAAAA,EAAAA,KAACqoB,GAAAA,EAAS,CAAC,aAAYnhB,CAAC,iBAAiBhH,SACtCud,EAAOy0C,QAAQnrD,KAAK2W,IACnB1d,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAAkBC,YAAU,EAAAhoB,SAC9Bwd,EAAMtgB,MADEsgB,EAAMtgB,SAIT,EAGhBgC,UAAMuC,EACNojC,qBAAsB,UAExB,CAAC79B,GAGL,CA9C6BmlJ,GAe3B,OAbqBhoJ,EAAAA,EAAAA,UAAwC,KAC3D,IAAIwT,EAA0C,GAU9C,MAR8B,cAA1BwsC,EAAOmsB,iBACT34D,EAAU,CAACwqB,EAAY+pH,EAAoB55E,EAAeC,IAG9B,0BAA1BpuB,EAAOmsB,iBACT34D,EAAU,CAACwqB,IAGNxqB,CAAO,GACb,CAACwqB,EAAY+pH,EAAoB55E,EAAeC,EAAgBpuB,EAAOmsB,gBAE5E,CD1BuBg9E,GACfnpG,GAASgZ,EAAAA,GAAAA,KACTjtC,EAAiBi9H,GAAiB,CAAEjpG,IAAK,eAAeC,EAAOlnD,IAAM,cACrE2vC,EAAO6zB,GAA2B,CACtCvc,IAAKqN,EAAM,gBAAgBpN,EAAOlnD,IAAM,aACxCizB,iBACA8R,iBAEIvM,E9FLD,SAA4CmX,GACjD,MAAM,IAAQ3lC,EAAAA,EAAAA,MACR6zD,EAAerW,KAKf8oG,EAAezgB,IAJJtL,KACf50F,EAAKloB,cACAkoB,EAAKyoB,SAAS,IAGflR,GAASgZ,EAAAA,GAAAA,KAETuwE,EAAehqE,GACnBnS,EAAM,gBAAgBpN,EAAOlnD,IAAM,cACnC+iB,KAEI2tH,EAAiB7oI,QACrB4oI,GAAgBA,EAAatqI,SAAWsqI,EAAatqI,QAAc,MAG/DxC,EAAgBgsC,EAAKhsC,eAAiB,GACtCktI,EAAmBf,GAAoC,IACxD5oF,EACHvjD,gBACAysI,WAAY,YAGd,OAAOlpI,EAAAA,EAAAA,UAAuC,KAC5C,MAAMf,EAAyC,GAyC/C,MAvC8B,cAA1B+gD,EAAOmsB,gBACTltE,EAAQS,KAAK,CACXN,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVvH,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,gBACTP,QAASA,IACPq0D,EAAattB,OAAOktB,GAAS8yF,sBAAuB,CAClDrpG,OAAQ,CAAEmsB,eAAgBnsB,EAAOmsB,eAAgBrzE,GAAIknD,EAAOlnD,MAEhE4D,WAAYA,IACV8sI,OACIlsI,EACAuF,EACE,yIAKZ5D,EAAQS,KAAKiqI,GAEiB,cAA1B3pF,EAAOmsB,iBACTltE,EAAQS,KAAK,CAAEN,KAAMrJ,EAAesJ,YAEpCJ,EAAQS,KAAK,CACXN,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,iBACTP,QAAS8mJ,EACTnmJ,UAAU,EACVvG,WACgC,IAA9B+rC,EAAKhsC,cAAc0C,OACf0D,EAAE,0CACDuW,GAA6Bw5G,GAAsBx5G,EAAQvW,MAG/D5D,CAAO,GACb,CACD4D,EACAumJ,EACAzyF,EACA3W,EAAOmsB,eACPnsB,EAAOlnD,GACP0wI,EACAG,EACAlhG,EAAKhsC,cAAc0C,QAEvB,C8FzEyBmqJ,CAAmC7gH,GACpD3K,EAAaorH,KAEbK,EAAkD,0BAA1BvpG,EAAOmsB,eAC/Bo9D,EAAehqE,GAA6CnS,EAAM,YAAYvxC,KAC9E2tH,EAAiB7oI,QACrB4oI,GAAgBA,EAAatqI,SAAWsqI,EAAatqI,QAAc,OAAMsqJ,GAG3E,OACE5tJ,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,4BACHizB,eAAgBA,EAChBuF,eAAgBA,EAChBuM,aAAcA,EACdC,WAAYA,EACZ8C,gBAAiB/9B,EAAE,kCACnBg+B,gBAEMh+B,EADJ2mI,EACM,yDACF+f,EACI,iBACA,gDAEVzoH,sBAEMj+B,EADJ2mI,EACM,mDACF+f,EACI,yCAEA,yFAGVtmH,eAAgBumG,OAAiBlsI,EAAY0nE,GAAAA,GAC7C9jC,sBAAsBvlC,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrCwN,qBAAsBuoG,EAAiB3mI,EAAE,qBAAkBvF,EAC3D0jC,sBACEwoG,EACI,IACE7yE,EAAaJ,GAAS8yF,qBAAsB,CAC1CrpG,OAAQ,CAAElnD,GAAIknD,EAAOlnD,GAAIqzE,eAAgBnsB,EAAOmsB,uBAEpD7uE,KAEFmrC,GAGV,CEvDO,SAAS+gH,KACd,MAAM,EAAE3mJ,IAAMC,EAAAA,EAAAA,MACRk9C,GAASgZ,EAAAA,GAAAA,MACT,MACJrwD,EACAkT,KAAM4tI,EAAc,QACpBv4F,GACEc,GAA2B5E,EAAM,WAAYpN,EAAOomF,UAElD7lF,EAAaT,KAEb7gD,ECbD,WACL,MAAM,EAAE4D,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACfN,GAASgZ,EAAAA,GAAAA,KAQTowF,EAAezgB,IANJtL,KACf1mE,EAAaJ,GAASqvE,gBAAiB,CACrC5lF,OAAQ,CAAEmsB,eAAgBnsB,EAAOmsB,eAAgBrzE,GAAIknD,EAAOlnD,KAC5D,IAKJ,OAAOkH,EAAAA,EAAAA,UACL,IAAM,CACJ,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/B8J,UAAU,EACVvH,KAAM84D,GAAAA,GACN34D,QAASuB,EAAAA,GAAcC,QACvBvH,MAAO4J,EAAE,cACTxG,SAAUA,IAAgC,0BAA1B2jD,EAAOmsB,eACvB7pE,QAAU+W,GACRs9C,EAAaJ,GAASszE,mBAAoB,CACxC7pF,OAAQ,CACNmsB,eAAgBnsB,EAAOmsB,eACvBrzE,GAAIugB,EAAM6yD,UACVk6D,SAAU/sH,EAAMvgB,MAGtB4D,WAAa2c,GAAUo5G,GAAmBp5G,EAAOxW,IAEnD,CACEzD,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,gBACTxG,SAAUA,IAAgC,0BAA1B2jD,EAAOmsB,eACvB7pE,QAAU+W,GAAU+vI,EAAa,CAAC/vI,IAClC3c,WAAa2c,GAAUs5G,GAAqBt5G,EAAOxW,GACnDI,UAAU,KAGd,CAACJ,EAAG8zD,EAAc3W,EAAOmsB,eAAgBi9E,GAE7C,CDjCkBM,GAEhB,OAAI/gJ,GAAchN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,IACpDu4F,GAGHxoJ,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAOywJ,GAAgB1wJ,KACvBgjD,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,eAAgBY,GAAI88C,EAAWgW,GAASooD,cACnD,CACE1lH,MAAO,GAAGwwJ,GAAgB3yF,eAAeoV,UAAUnzE,OACnD0K,GAAI88C,EAAWgW,GAAS82B,iBAAkB,CACxCrtC,OAAQ,CACNlnD,GAAI2wJ,GAAgBv9E,UACpBC,eAAgBnsB,EAAOmsB,mBAI7B,CACElzE,MAAO4J,EAAE,UACTY,GAAI88C,EAAWgW,GAASqvE,gBAAiB,CACvC5lF,OAAQ,CACNlnD,GAAI2wJ,GAAgBv9E,UACpBC,eAAgBnsB,EAAOmsB,mBAI7B,CAAElzE,MAAOwwJ,GAAgB1wJ,OAE3BujD,eACE3gD,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAASA,EACTF,SAAU6F,GAAAA,GAAiBC,MAC3B3I,aAAcutJ,OAIpB9tJ,EAAAA,EAAAA,KAAC09D,GAAc,CACbe,QAAS,CACPnhE,MAAO4J,EAAE,kBACTiuB,KAAMylC,GAASqvE,gBACfvrE,oBAAqB,UAEvBvU,KAAM,CACJ,CAAE7sD,MAAO4J,EAAE,WAAYiuB,KAAMylC,GAASiwE,uBACtC,CAAEvtI,MAAO4J,EAAE,kBAAmBiuB,KAAMylC,GAASozF,6BAC7C,CAAE1wJ,MAAO4J,EAAE,SAAUiuB,KAAMylC,GAASqzF,qBAEtC5pG,OAAQ,CACNlnD,GAAI2wJ,EAAev9E,UACnBC,eAAgBnsB,EAAOmsB,eACvBi6D,SAAUqjB,EAAe3wJ,UAlDL6C,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,GAuD3D,CErEO,SAAS+jG,KACd,MAAM,EAAEhnJ,IAAMC,EAAAA,EAAAA,MACRk9C,GAASgZ,EAAAA,GAAAA,KAMTkT,EAAY+5D,GAAgBjmF,EAAOlnD,GAAIknD,EAAOmsB,iBAC9C,KAAEvY,EAAI,QAAE1C,GAAYkuE,GAAWp/E,EAAOo0D,SACtCz9C,EAAerW,KAEf/jB,EAAckjG,IAAiBO,IACnCrpE,EAAaJ,GAASsvE,eAAgB,CACpC7lF,OAAQ,CAAEmsB,eAAgBnsB,EAAOmsB,eAAgBrzE,GAAIknD,EAAOlnD,KAC5D,GACDo4D,GAEG3Q,EAAaT,KAEnB,IAAIgG,EAA+C,GAanD,OAVEA,EAD4B,cAA1B9F,EAAOmsB,eACF,CACL,CAAElzE,MAAO4J,EAAE,WAAYiuB,KAAMylC,GAASqwE,sBACtC,CAAE3tI,MAAO4J,EAAE,SAAUiuB,KAAMylC,GAASwzE,oBACpC,CAAE9wI,MAAO4J,EAAE,UAAWiuB,KAAMylC,GAAS4yE,qBACrC,CAAElwI,MAAO4J,EAAE,QAASiuB,KAAMylC,GAASuzF,oBAG9B,CAAC,CAAE7wJ,MAAO4J,EAAE,WAAYiuB,KAAMylC,GAASqwE,wBAI9C3lI,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO46D,GAAM76D,KACbgjD,YAAa,CACX,CACE9iD,MAAO4J,EAAE,eACTY,GAAI88C,EAAWgW,GAASooD,cAE1B,CACE1lH,MAAO4J,EAAE,GAAGqpE,GAAWnzE,QACvB0K,GAAI88C,EAAWgW,GAAS82B,iBAAkB,CACxCrtC,OAAQ,CAAElnD,GAAIknD,EAAOlnD,GAAIqzE,eAAgBnsB,EAAOmsB,mBAGpD,CACElzE,MAAO4J,EAAE,SACTY,GAAI88C,EAAWgW,GAASsvE,eAAgB,CACtC7lF,OAAQ,CAAElnD,GAAIknD,EAAOlnD,GAAIqzE,eAAgBnsB,EAAOmsB,mBAGpD,CACElzE,MAAO4J,EAAE,GAAG+wD,GAAM76D,UAGtBujD,eACE3gD,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAASs9B,EACTx9B,SAAU6F,GAAAA,GAAiBC,MAC3B3I,aAAc03D,OAIpBj4D,EAAAA,EAAAA,KAAC09D,GAAc,CACbe,QAAS,CACPnhE,MAAO4J,EAAE,iBACTiuB,KAAMylC,GAASsvE,eACfxrE,oBAAqB,eAEvBvU,KAAMA,EACN9F,OAAQA,MAIhB,CC5EO,SAAS+pG,KACd,MAAM,EAAElnJ,IAAMC,EAAAA,EAAAA,MACRiO,GAAWC,EAAAA,GAAAA,MACX2lD,EAAerW,KACf4K,EAAcyT,KACdqrF,EAAkBrrF,KAClB3e,GAASgZ,EAAAA,GAAAA,KAoCf,OACE/3D,EAAAA,EAAAA,MAAC29D,GAAW,CACV5jE,WAAY6H,EAAE,gBACdw3B,SArC0DhwB,UAC5D,MAAM,KAAEtR,EAAI,YAAEwe,EAAW,UAAEk4E,GAAcw6D,EACnCC,EAAoC,CACxCnxJ,OACAwe,YAAaA,GAAe,GAC5B20D,UAAWuT,SAASz/B,EAAOlnD,IAC3B22F,UAAWA,GAAa,IAEpB06D,QAAiBj/F,EAAYkC,EAAM,WAAY88F,GAErD,GAAIlqG,EAAOomF,SAAU,CACnB,MAAMgkB,EAA0C,CAC9CtxJ,GAAIqxJ,EAASrxJ,UAETkxJ,EAAgB58F,EAAM,WAAWpN,EAAOomF,qBAAsBgkB,GACpEzzF,EAAaJ,GAASozF,4BAA6B,CACjD3pG,OAAQ,CACNmsB,eAAgBnsB,EAAOmsB,eACvBrzE,GAAIqxJ,EAASj+E,UACbk6D,SAAUpmF,EAAOomF,WAGvB,MACEzvE,EAAaJ,GAASiwE,sBAAuB,CAC3CxmF,OAAQ,CACNmsB,eAAgBnsB,EAAOmsB,eACvBrzE,GAAIqxJ,EAASj+E,UACbk6D,SAAU+jB,EAASrxJ,KAGzB,EAQEM,WAAYyJ,EAAE,UACdsmC,SANaA,IAAMp4B,GAAU,GAO7BwY,aAAc,CACZxwB,KAAM,GACNwe,YAAa,GACbk4E,UAAW,SACX5zF,SAAA,EAEFF,EAAAA,EAAAA,KAACo8C,GAAiB,CAACh/C,KAAK,OAAOE,MAAO4J,EAAE,QAASkf,YAAalf,EAAE,cAAe8lB,YAAU,KACzFhtB,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,cACLE,MAAO4J,EAAE,eACTkf,YAAalf,EAAE,wBAEjBlH,EAAAA,EAAAA,KAAC+lE,GAAe,CAAC12B,cAAY,EAAAnvC,UAC3BF,EAAAA,EAAAA,KAACm4C,GAAkB,CAAC/6C,KAAK,YAAYE,MAAO4J,EAAE,aAAcuL,OAAO,aAI3E,CCnEO,SAASi8I,KACd,MAAM,EAAExnJ,IAAMC,EAAAA,EAAAA,MACRiO,GAAWC,EAAAA,GAAAA,MACXguD,EAAeP,KACf9H,EAAerW,KACfN,GAASgZ,EAAAA,GAAAA,MACPn9C,KAAMxC,GAAU24C,GAA2B5E,EAAM,WAAYpN,EAAOomF,UAEtE78G,GAAevpB,EAAAA,EAAAA,UACnB,KAAM,CACJjH,KAAMsgB,GAAOtgB,KACbwe,YAAa8B,GAAO9B,aAAe,GACnCk4E,UAAWp2E,GAAOo2E,WAAa,WAEjC,CAACp2E,IAqBH,OAAKA,GAKHpY,EAAAA,EAAAA,MAAC29D,GAAW,CACV5jE,WAAY6H,EAAE,cACdw3B,SAzB0DhwB,UAC5D,MAAM,KAAEtR,EAAI,YAAEwe,EAAW,UAAEk4E,GAAcw6D,EACnCK,EAAkC,CACtCvxJ,OACAwe,cACAk4E,YACAvjB,UAAW7yD,GAAO6yD,WAAa,GAE3Bq+E,QAAoBvrF,EACxB5R,EAAM,WAAW/zC,GAAOvgB,GAAGqhB,YAAc,MACzCmwI,GAEF3zF,EAAaJ,GAASiwE,sBAAuB,CAC3CxmF,OAAQ,CAAEmsB,eAAgB,YAAarzE,GAAIyxJ,EAAYr+E,UAAWk6D,SAAUmkB,EAAYzxJ,KACxF,EAYAM,WAAYyJ,EAAE,UACdsmC,SAVaA,IAAMp4B,GAAU,GAW7BwY,aAAcA,EAAa1tB,SAAA,EAE3BF,EAAAA,EAAAA,KAACo8C,GAAiB,CAACh/C,KAAK,OAAOE,MAAO4J,EAAE,QAAS8lB,YAAU,KAC3DhtB,EAAAA,EAAAA,KAACo8C,GAAiB,CAACh/C,KAAK,cAAcE,MAAO4J,EAAE,kBAC/ClH,EAAAA,EAAAA,KAAC+lE,GAAe,CAAC12B,cAAY,EAAAnvC,UAC3BF,EAAAA,EAAAA,KAACm4C,GAAkB,CAAC/6C,KAAK,YAAYE,MAAO4J,EAAE,aAAcuL,OAAO,cAdhE,IAkBX,CCtCA,SAASo8I,GAAoB/xJ,GAC3B,MAAM,IAAQqK,EAAAA,EAAAA,MACRy9C,EAAaT,KAEb2qG,EACA,CAAE3xJ,GAAIL,EAAMiyJ,UAAU5xJ,IADtB2xJ,EAEY,CAAEt+E,eAAgB1zE,EAAMiyJ,UAAUv+E,gBAF9Cs+E,EAGM,CAAErkB,SAAU3tI,EAAMiyJ,UAAUtkB,UAGlCukB,EAA8B,CAClC70F,YAAa,CAAE78D,MAAO4J,EAAE,eAAgBY,GAAI88C,EAAWgW,GAASooD,cAChEzyC,UAAW,CACTjzE,MAAO,GAAGR,EAAMq8I,gBAChBrxI,GAAI88C,EAAWgW,GAAS82B,iBAAkB,CACxCrtC,OAAQ,IAAKyqG,KAAyBA,MAG1CrxI,OAAQ,CACNngB,MAAO4J,EAAE,UACTY,GAAI88C,EAAWgW,GAASqvE,gBAAiB,CACvC5lF,OAAQ,IAAKyqG,KAAyBA,MAG1CpxI,MAAO,CACLpgB,MAAO,GAAGR,EAAM4sB,YAChB5hB,GAAI88C,EAAWgW,GAASiwE,sBAAuB,CAC7CxmF,OAAQ,IACHyqG,KACAA,KACAA,MAITG,cAAe,CACb3xJ,MAAO4J,EAAE,kBACTY,GAAI88C,EAAWgW,GAASozF,4BAA6B,CACnD3pG,OAAQ,IACHyqG,KACAA,KACAA,MAITP,YAAa,CAAEjxJ,MAAO4J,EAAE,iBACxBynJ,UAAW,CAAErxJ,MAAO4J,EAAE,qBAAsB,CAAEwiB,UAAW5sB,EAAM4sB,cAGjE,OACE1pB,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAOP,EAAMO,MACb+iD,YAAatjD,EAAMsjD,YAAYr5C,KAAKu5C,GAAe0uG,EAAe1uG,MAGxE,CAEO,SAAS4uG,KACd,MAAM,EAAEhoJ,IAAMC,EAAAA,EAAAA,MACRk9C,GAASgZ,EAAAA,GAAAA,MACT,MACJrwD,EACAkT,KAAMqwD,EAAS,QACfhb,GACEU,GAAkBxE,EAAM,gBAAgBpN,EAAOlnD,IAAIqhB,YAAc,OAErE,OAAIxR,GAAchN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,IACpDgb,GAUHjrE,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAAC6uJ,GAAmB,CAClBxxJ,MAAO6J,EAAE,gBACTk5C,YAXwC,CAC5C,cACA,YACA,SACA,eAQI2uG,UAAW1qG,EACX80F,cAAe5oE,GAAWnzE,QAE5B4C,EAAAA,EAAAA,KAACouJ,GAAW,QAjBOpuJ,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,GAoBtD,CAEO,SAASglG,KACd,MAAM,EAAEjoJ,IAAMC,EAAAA,EAAAA,MACRk9C,GAASgZ,EAAAA,GAAAA,MACT,MACJrwD,EACAkT,KAAMxC,EAAK,QACX63C,GACEU,GAAuBxE,EAAM,WAAWpN,EAAOomF,UAAUjsH,YAAc,OAE3E,OAAIxR,GAAchN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,IACpD73C,GAKHpY,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAAC6uJ,GAAmB,CAClBxxJ,MAAO6J,EAAE,qBAAsB,CAAEwiB,UAAWhM,GAAOtgB,OACnDgjD,YANwC,CAAC,cAAe,YAAa,SAAU,aAO/E2uG,UAAW1qG,EACX80F,cAAez7H,GAAOy9C,eAAeoV,UAAUnzE,KAC/CssB,UAAWhM,GAAOtgB,QAEpB4C,EAAAA,EAAAA,KAAC0uJ,GAAS,QAbK1uJ,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,GAgBlD,CAEO,SAASilG,KACd,MAAM,EAAEloJ,IAAMC,EAAAA,EAAAA,MACRk9C,GAASgZ,EAAAA,GAAAA,MACT,MACJrwD,EACAkT,KAAM4tI,EAAc,QACpBv4F,GACEc,GAA2B5E,EAAM,WAAYpN,EAAOomF,UAExD,OAAIz9H,GAAchN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,IACpDu4F,GAYHxoJ,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAAC6uJ,GAAmB,CAClBxxJ,MAAO6J,EAAE,gBACTk5C,YAbwC,CAC5C,cACA,YACA,SACA,QACA,gBACA,eAQI2uG,UAAW1qG,EACX80F,cAAe2U,GAAgB3yF,eAAeoV,UAAUnzE,KACxDssB,UAAWokI,GAAgB1wJ,QAE7B4C,EAAAA,EAAAA,KAACouJ,GAAW,QApBYpuJ,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,GAuB3D,CC7KO,SAASklG,GAGdvyJ,GAOA,MAAM,IAAQqK,EAAAA,EAAAA,MACRzM,GAAQynE,EAAAA,GAAAA,IAAS,CAAE/kE,KAAMN,EAAMslE,QAC/B22D,EAAYr+H,GAAOyC,IAAIqhB,YAAc,GACrC8lC,GAAQxoD,EAAAA,EAAAA,cAAY4S,UACxB,MAGM4gJ,GAHWv2B,QACP1pE,GAA0BoC,EAAM,aAAasnE,kBACnD,IACyBhyH,KAAK8/E,IAAG,CACnCzpF,KAAMypF,MAER,OAAO18C,QAAQqd,QAAQ,CACrB98B,MAAO4kI,EAAY9rJ,OACnBsG,OAAQ,CAAC,CAAE1M,KAAM,uBAAyBkyJ,IAC1C,GACD,CAACv2B,IAEJ,OACE/4H,EAAAA,EAAAA,KAAC8/F,GAAmB,CAClB1iG,KAAMN,EAAMM,KACZD,GAAG,YACHkG,QAAQ,YACR00C,mBAAoBj7C,EAAMi7C,mBAC1Bz6C,MAAO4J,EAAE,kBACTo9C,MAAOA,EACP27C,cAAgBvlG,GAAWA,GAAqB0C,MAAQ,GACxDgpB,YAAalf,EAAE,yBACfkqC,eAAgBlqC,EAAE,aAClBiqC,UACEr0C,EAAMq0C,WACNjqC,EAAE,8EAEJ84F,mBAAoB94F,EAAE,0BACtB64F,iBAAkB74F,EAAE,6BACpB8lB,WAAYlwB,EAAMkwB,WAClBgd,MAAO,KAGb,CC1CO,SAASulH,KACd,MAAM,EAAEroJ,IAAMC,EAAAA,EAAAA,MACRqoJ,GAA0BrtF,EAAAA,GAAAA,IAA8B,CAC5D/kE,KAAM,qBAEFy8B,GAASsoC,EAAAA,GAAAA,IAA8B,CAC3C/kE,KAAM,WAEFqyJ,EAAc,CAClB,MACA,MACA,WACA,SACA,aACA,YACA,MACA,aACA,WACA,YACA,4BAwBF,OACEzvJ,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,UACEF,EAAAA,EAAAA,KAACkiE,GAAc,CACbE,MAAM,SACNn/C,OAASxf,IAAkBgsJ,EAAYlnJ,SAAS9E,IAAkB,QAATA,EAAevD,UAExEoF,EAAAA,EAAAA,MAACygE,GAAe,CAAC1oE,MAAO6J,EAAE,kBAAkBhH,SAAA,EAC1CF,EAAAA,EAAAA,KAACy7F,GAAwB,CACvBr+F,KAAK,aACLE,MAAO4J,EAAE,cACTiqC,UAAWjqC,EACT,2ZAEF8lB,WAAYyiI,EAAYh3H,MAAM,GAAGlwB,SAASsxB,GAC1CinC,YAnCiBjnC,KACzB,OAAQA,GACN,IAAK,MACH,MAAO,CACL61H,0BAA2B,oBAE/B,IAAK,MACH,MAAO,CACLpsB,2BAA4B,OAEhC,IAAK,2BACH,MAAO,CACLA,2BAA4B,2BAEhC,QACE,MAAO,CACLA,2BAA4BzpG,GAElC,EAiBqB81H,CAAkB91H,MAEjCv0B,EAAAA,EAAAA,MAAC48D,GAAc,CAACE,MAAM,SAASn/C,OAASxf,GAA0B,QAATA,EAAevD,SAAA,EACtEF,EAAAA,EAAAA,KAACkmG,GAAqB,CAAsB9oG,KAAK,iBAAiB4vB,YAAU,KAC5EhtB,EAAAA,EAAAA,KAACqvJ,GAA2B,CAC1BjtF,MAAM,iBACNhlE,KAAK,cACL4vB,YAAU,QAIdhtB,EAAAA,EAAAA,KAACm8D,GAAoB,CACnB/1C,YAAalf,EAAE,4BACf9J,KAAK,YACLipB,QAAS,CACP,CAAE3rB,MAAO,IAAK4C,MAAO4J,EAAE,gBACvB,CAAExM,MAAO,IAAK4C,MAAO4J,EAAE,aACvB,CAAExM,MAAO,IAAK4C,MAAO4J,EAAE,eAEzB0mB,aAAc,IACdwjB,eAAgBlqC,EAAE,SAClBiqC,UAAWjqC,EACT,8EAEF5J,MAAO4J,EAAE,aACT8lB,YAAU,KAEZhtB,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,cACL+zC,UAAWjqC,EACT,uKAEF5J,MAAO4J,EAAE,kBAEXlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,cACL+zC,UAAWjqC,EACT,8IAEF5J,MAAO4J,EAAE,uBAEXlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,gBACL+zC,UAAWjqC,EACT,4IAEF5J,MAAO4J,EAAE,oBAEX5B,EAAAA,EAAAA,MAACygE,GAAe,CAAC1oE,MAAO6J,EAAE,kBAAkBhH,SAAA,EAC1CF,EAAAA,EAAAA,KAACuwC,GAAgB,CACfjzC,MAAO4J,EAAE,aACTkqC,eAAgBlqC,EAAE,aAClBiqC,UAAWjqC,EACT,2gBAEF9J,KAAK,eAEP4C,EAAAA,EAAAA,KAACuwC,GAAgB,CACfjzC,MAAO4J,EAAE,uBACTkqC,eAAgBlqC,EAAE,uBAClBiqC,UAAWjqC,EACT,6OAEF9J,KAAK,oBAEP4C,EAAAA,EAAAA,KAACuwC,GAAgB,CACfjzC,MAAO4J,EAAE,oBACTkqC,eAAgBlqC,EAAE,oBAClBiqC,UAAWjqC,EACT,yHAEF9J,KAAK,qBAENoyJ,GACCxvJ,EAAAA,EAAAA,KAAC+lE,GAAe,CAAC1oE,MAAO6J,EAAE,2BAA2BhH,UACnDF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,uBACLgpB,YAAalf,EAAE,KACf8lB,YAAU,EACVvpB,KAAK,aAGP,SAENzD,EAAAA,EAAAA,KAAC+lE,GAAe,CAAC12B,cAAY,EAAAnvC,UAC3BF,EAAAA,EAAAA,KAACm4C,GAAkB,CAAC/6C,KAAK,cAAcE,MAAO4J,EAAE,oBAAqBuL,OAAO,iBAMxF,CChHO,SAASm9I,KACd,MAAM,EAAE1oJ,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACfvvC,GAAWC,EAAAA,GAAAA,MACXk6C,EAAcyT,KACd3e,GAASgZ,EAAAA,GAAAA,MACPn9C,KAAMqwD,GAActa,GAC1BxE,EAAM,gBAAgBpN,EAAOlnD,IAAIqhB,YAAc,OAmB3ComC,EAAaT,KAEnB,OACE7+C,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,iBACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,eAAgBY,GAAI88C,EAAWgW,GAASooD,cACnD,CACE1lH,MAAO,GAAGizE,GAAWnzE,OACrB0K,GAAI88C,EAAWgW,GAAS82B,iBAAkB,CACxCrtC,OAAQ,CACNlnD,GAAIozE,GAAWpzE,GACfqzE,eAAgBD,GAAW9sE,SAIjC,CACEnG,MAAO4J,EAAE,WACTY,GAAI88C,EAAWgW,GAASuvE,iBAAkB,CACxC9lF,OAAQ,CACNlnD,GAAIozE,GAAWpzE,GACfqzE,eAAgBD,GAAW9sE,SAIjC,CAAEnG,MAAO4J,EAAE,sBAGflH,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,iBACdw3B,SA/CuDhwB,UAC3D,MAAMuhG,EAAoC,IACrCnmG,EACH83E,sBAAuB93E,GAAQ83E,sBAAwB93E,EAAO83E,sBAAwB,KACtFiQ,YAAa/nF,GAAQ+nF,aAAaz0F,KAClCmzE,UAAWuT,SAASz/B,EAAOlnD,IAAM,IACjCw0F,eAAgB7nF,GAAQ6nF,gBAAgBx0F,IAGpC08B,QAAe01B,EAAYkC,EAAM,sBAAuBw+C,GAE9Dj1C,EAAaJ,GAASw6B,sBAAuB,CAC3C/wC,OAAQ,CAAEuxC,UAAW/7D,EAAO18B,GAAIqzE,eAAgBD,GAAW9sE,KAAMtG,GAAIknD,EAAOlnD,KAC5E,EAmCEqwC,SAAUA,IAAMp4B,GAAU,GAC1BwY,aAAc,CACZxwB,KAAM,GACNwe,YAAa,GACbgzD,WAAY,MACZ1uE,UAEFF,EAAAA,EAAAA,KAAC6vJ,GAAqB,QAI9B,CAEO,SAASC,KACd,MAAM,EAAE5oJ,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACfvvC,GAAWC,EAAAA,GAAAA,MACXguD,EAAeP,KACfze,GAASgZ,EAAAA,GAAAA,MACPn9C,KAAMqwD,GAActa,GAC1BxE,EAAM,gBAAgBpN,EAAOlnD,IAAIqhB,YAAc,QAGzC0B,KAAMu1E,GAAoBx/B,GAChCxE,EAAM,sBAAsBpN,EAAOuxC,WAAWp3E,YAAc,OAGxDoP,GAAoCvpB,EAAAA,EAAAA,UACxC,KAAM,CACJjH,KAAMq4F,GAAiBr4F,KACvBwe,YAAa65E,GAAiB75E,aAAe,GAC7CgmE,sBAAuB6T,GAAiBt6B,gBAAgBymB,uBAAuBzkF,GAC/E08B,OAAQ47D,GAAiB57D,OACzB+0C,WAAY6mB,GAAiB7mB,YAAc,KAC3C+iB,eAAgB8D,GAAiBt6B,gBAAgBw2B,eACjDE,YAAa,CACXz0F,KAAMq4F,GAAiB5D,aAEzBhP,UAAW4S,GAAiB5S,UAC5Bo4D,YAAaxlD,GAAiBwlD,YAC9BC,YAAazlD,GAAiBylD,YAC9BC,cAAe1lD,GAAiB0lD,cAChCR,UAAWllD,GAAiBklD,UAC5BC,eAAgBnlD,GAAiBmlD,eACjCC,iBAAkBplD,GAAiBolD,iBACnC/oD,qBAAsB2D,GAAiB3D,qBACvCumD,YAAa5iD,GAAiB4iD,eAEhC,CAAC5iD,IAsBG7wC,EAAaT,KAEnB,OAAKsxC,GAKHnwF,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,sBAAuB,CAAE6oJ,WAAYt6D,GAAiBr4F,OAC/DgjD,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,eAAgBY,GAAI88C,EAAWgW,GAASooD,cACnD,CACE1lH,MAAO,GAAGizE,GAAWnzE,OACrB0K,GAAI88C,EAAWgW,GAAS82B,iBAAkB,CACxCrtC,OAAQ,CACNlnD,GAAIozE,GAAWpzE,GACfqzE,eAAgBD,GAAW9sE,SAIjC,CACEnG,MAAO4J,EAAE,WACTY,GAAI88C,EAAWgW,GAASuvE,iBAAkB,CACxC9lF,OAAQ,CACNlnD,GAAIozE,GAAWpzE,GACfqzE,eAAgBD,GAAW9sE,SAIjC,CAAEnG,MAAO4J,EAAE,sBAAuB,CAAE6oJ,WAAYt6D,GAAiBr4F,YAGrE4C,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,eACdw3B,SAtDuDhwB,UAC3D,MAAMuhG,EAAoC,IACrCnmG,EACH83E,sBAAuB93E,GAAQ83E,sBAAwB93E,EAAO83E,sBAAwB,KACtFiQ,YAAa/nF,GAAQ+nF,aAAaz0F,MAAQ,GAC1CmzE,UAAWuT,SAASz/B,EAAOlnD,IAAM,IACjCw0F,eAAgB7nF,GAAQ6nF,gBAAgBx0F,IAGpC08B,QAAewpC,EACnB5R,EAAM,sBAAsBpN,EAAOuxC,WAAa,MAChDqa,GAGFj1C,EAAaJ,GAASw6B,sBAAuB,CAC3C/wC,OAAQ,CAAEuxC,UAAW/7D,EAAO18B,GAAIqzE,eAAgBD,GAAW9sE,KAAMtG,GAAIknD,EAAOlnD,KAC5E,EAuCEqwC,SAAUA,IAAMp4B,GAAU,GAC1BwY,aAAcA,EAAa1tB,UAE3BF,EAAAA,EAAAA,KAAC6vJ,GAAqB,SApCnB,IAwCX,CAEA,SAASA,KACP,MAAM,EAAE3oJ,IAAMC,EAAAA,EAAAA,OACR,KAAE+Y,GAAS0jD,GAA6CnS,EAAM,uBAC9D53B,GAASsoC,EAAAA,GAAAA,IAA8B,CAC3C/kE,KAAM,WAEF4yJ,GAAcp/G,EAAAA,GAAAA,OACbwqG,EAAY6U,IAAiBv0J,EAAAA,EAAAA,UAASm+B,GAGvCq2H,EAAiBhwI,GAAM5c,SAASmhE,KAAK5qC,QAAQgsC,SAAS1nE,QAAO,EAAEzD,EAAO4C,MAE1E,IAD2B,CAAC,OAAQ,eACZiL,SAAS7N,GAC/B,MAAO,CACL4C,QACA5C,QAEJ,IAcF,OAXAqB,EAAAA,EAAAA,YAAU,KACRi0J,EAAYjiH,cACRqtG,IAAevhH,IACjBm2H,EAAYv1G,WAAW,aAAc,CAAE7sB,aAAc,OACrDoiI,EAAYv1G,WAAW,iBAAkB,CAAE7sB,aAAc,CAAC,IAC1DoiI,EAAYv1G,WAAW,cAAe,CAAE7sB,aAAc,KACtDqiI,EAAcp2H,GAChB,GAGC,CAACA,KAEFv0B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAACh/C,KAAK,OAAOE,MAAO4J,EAAE,QAASkf,YAAalf,EAAE,cAAe8lB,YAAU,KACzFhtB,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB9+C,MAAO4J,EAAE,eACT9J,KAAK,cACLgpB,YAAalf,EAAE,wBAEjBlH,EAAAA,EAAAA,KAACo9F,GAAkC,CACjCpwE,WAAuB,cAAX6M,EACZz8B,KAAK,2BAEP4C,EAAAA,EAAAA,KAACs6C,GAAc,CACbttB,YAAU,EACV5vB,KAAK,SACLD,GAAG,sBACHG,MAAO4J,EAAE,UACTmf,QACE6pI,EACIA,EAAenpJ,KAAI,EAAErM,EAAO4C,MAAW,CACrCA,MAAOA,EACP5C,MAAOA,MAET,GAEN6/C,gBAAiBrzC,EAAE,sBAErBlH,EAAAA,EAAAA,KAACuvJ,GAAsB,MAG7B,CClRO,SAASY,KACd,MAAM,EAAEjpJ,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACfN,GAASgZ,EAAAA,GAAAA,MACPn9C,KAAMxC,GAAU24C,GAA2B5E,EAAM,WAAYpN,EAAOomF,UAE5E,OACEnlI,EAAAA,EAAAA,MAACoc,GAAW,CAAAxhB,SAAA,EACVF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,QAAQhH,SAAEwd,GAAOtgB,QACtC4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,eAAehH,SAAEwd,GAAO9B,eAC7C5b,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,WAAWhH,UAC9BF,EAAAA,EAAAA,KAACqS,GAAY,CACX3X,MAAOgjB,GAAO29C,QACd/oD,OAAQoL,GAAOy9C,gBAAgByU,YAAYhU,SAC3Cj1D,QAASA,IACPq0D,EAAaJ,GAASiB,YAAa,CACjCxX,OAAQ,CAAElnD,GAAIugB,GAAOy9C,gBAAgByU,YAAYzyE,WAKzD6C,EAAAA,EAAAA,KAACmsE,GAAsB,CACrBzxE,MAAOgjB,GAAO29C,QACd/oD,OAAQoL,GAAOy9C,gBAAgByU,YAAYhU,SAC3Cj1D,QAASA,IACPq0D,EAAaJ,GAASiB,YAAa,CACjCxX,OAAQ,CAAElnD,GAAIugB,GAAOy9C,gBAAgByU,YAAYzyE,SAIvD6C,EAAAA,EAAAA,KAACo2E,GAAoB,CACnB94E,MAAO4J,EAAE,aACTmvE,qBAAmB,EACnBC,gBAAc,EACd57E,MAAOgjB,GAAOo2E,WAAa,UAInC,CC3CO,SAASq6D,KACd5wF,GAAqB,eACrB,MAAMqqE,EAAcT,MACd,QAAE1uB,EAAU,KAAOp7C,EAAAA,GAAAA,KACnByD,EAAc,CAAE+mE,WAAYpvB,EAASqvB,iBAAkB,QAC7D,OAAO9nI,EAAAA,EAAAA,KAACmmI,GAAQ,CAACrlE,YAAaA,EAAajpD,QAAS+vH,GACtD,CCIO,SAASwoB,IAAiB,gBAAEC,EAAe,QAAEC,EAAO,YAAE36D,IAC3D,MAAM,EAAEzuF,IAAMC,EAAAA,EAAAA,MACRk7B,EAAa8sC,KACbqD,EAAgBhD,KAChBiD,EAAiB3C,KACjB5tC,GAAe79B,EAAAA,EAAAA,UACnB,IAAM,CAACg+B,EAAYmwC,EAAeC,IAClC,CAACpwC,EAAYmwC,EAAeC,IAExBriD,EAAiBi9H,GAAiB,CACtCjpG,IAAK,eAAeuxC,wBAAkC26D,MAElDxjH,EAAO6zB,GAAoB,CAC/Bvc,IAAKqN,EAAM,gBAAgBkkC,wBAAkC26D,qCAC7DlgI,iBACA8R,iBAGF,OACEliC,EAAAA,EAAAA,KAACitC,GAAiB,CAChB5vC,MAAO6J,EAAE,eACTpB,SAAWo0D,IAAem2F,EAAgBn2F,EAAO,EACjD9pC,eAAgBA,EAChB8R,aAAcA,EACd4K,KAAMA,EACN/uC,YAAamJ,EAAE,cAGrB,CC3BO,SAASqpJ,KACd,MAAM,EAAErpJ,IAAMC,EAAAA,EAAAA,MACRipB,EAAiBq0G,KACjBviG,EvBkFD,SAAyC7b,GAI9C,MAAM20C,EAAerW,KACfN,GAASgZ,EAAAA,GAAAA,KACTgV,GAAYv2E,EAAAA,EAAAA,cACfm8D,GACC+C,EAAaJ,GAASqwE,qBAAsB,CAC1C5mF,OAAQ,CACNmsB,eAAgBnsB,EAAOmsB,eACvBrzE,GAAIknD,EAAOlnD,GACXs7G,QAASxgD,EAAK96D,OAGpB,CAAC69D,EAAc3W,EAAOlnD,GAAIknD,EAAOmsB,iBAE7BnuC,EAAa8sC,GAAc,IAC5B9oD,EACH1f,QAAS0rE,IAEL20B,EAAiBE,GAAkB,YACnC3kE,EAAoB+sC,KACpBkD,EAAgBhD,GAAiBnpD,GACjCosD,EAAiB3C,GAAkBzpD,GAKzC,OAJqBhiB,EAAAA,EAAAA,UACnB,IAAM,CAACg+B,EAAYE,EAAmBykE,EAAgBx0B,EAAeC,IACrE,CAACpwC,EAAYE,EAAmBykE,EAAgBx0B,EAAeC,GAGnE,CuBhHuB+9E,GAEf1jH,EAAO6zB,GAAoB,CAC/Bvc,IAAKqN,EAAM,YAFE4L,EAAAA,GAAAA,KAEgBotE,UAAY,gBACzCr6G,iBACA8R,iBAEIvM,ECFD,SAAiDmX,GACtD,MAAOhgC,EAAG8rB,GAAaD,MACjB,EAAEzxB,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACf8rG,ECjBD,SAA8BvnH,GACnC,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR0kC,EAAsB63F,GAAgB,CAAE7tH,cAAc,EAAM0mD,aAAa,IACzE8W,EAAyBlE,GAAc,CAAEt5D,cAAc,EAAM0mD,aAAa,IAC1EvzB,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAACgvE,IAAyB,CAACA,IACzDhvB,GAASgZ,EAAAA,GAAAA,KACTuC,EAAaH,KAsBnB,OArB0BvF,IACxB0F,EAAW,CACTviE,MAAO6J,EAAE,iCACTnJ,YAAamJ,EAAE,oEAAqE,CAClFoV,MAAO49C,EAAM12D,SAEfwoC,iBAAkB9kC,EAAE,qBAAsB,CAAEoV,MAAO49C,EAAM12D,SACzDs1B,MAAOohC,EAAM96D,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QACrD27B,MAAO62B,GACPtoD,UAAU,EACVukC,sBACA7C,gBACAE,aACAD,SAAUA,CAACvrB,EAAgB+N,IACzB8jC,GACEkC,EAAM,WAAWpN,EAAOomF,kBACxB,CAAEzmD,cAAc,EAAM7mF,GAAIugB,EAAMvgB,IAChCsuB,IAEJ,CAGN,CDZ4BilI,CAAqB5jH,EAAK00B,yBAC9Cnd,GAASgZ,EAAAA,GAAAA,KACTjvD,EAAerD,KAEfijI,EAAmBf,GAA6B,IACjD5oF,EACHvjD,cAAegsC,EAAKhsC,eAAiB,GACrCysI,WAAY,YAGRif,EAAc5oF,GAA6CnS,EAAM,WAAWvxC,KAC5EwkH,EAAgB1/H,QAAQwnJ,GAAeA,EAAYlpJ,SAAWkpJ,EAAYlpJ,QAAc,MAExF+sJ,GAAkBv0J,EAAAA,EAAAA,cACtB4S,UACE,IAAK,MAAMupD,KAAQ04F,EACjB,UACQphG,GAAYkC,EAAM,WAAWpN,EAAOomF,kBAA6B,CACrEttI,GAAI86D,EAAK96D,KACRuuB,MAAK,KAAWohB,EAAKyoB,SAAS,GACnC,CAAE,MAAOzmD,GACPV,EAAazD,SAAS,CACpBtH,QAAS,SACThG,MAAO6J,EAAE,iBAAiB+wD,EAAK76D,0BAC/B8C,SAAU4O,aAAewV,OAASxV,EAAIzB,SAE1C,CAEFurB,OAAUj3B,EAAU,GAEtB,CAACi3B,EAAWyrB,EAAOomF,SAAU39F,EAAM1+B,EAAclH,IAGnD,OAAO7C,EAAAA,EAAAA,UAAgC,KACrC,MAAMsxB,EAAyC,CAC7C,CACElyB,KAAMrJ,EAAewL,SACrBpF,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACV/J,SAAUA,IAAgC,0BAA1B2jD,EAAOmsB,eACvBttE,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,YACT5D,QAAS,CACP,CACEG,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/BnD,MAAO4J,EAAE,qBACTP,QAASA,IACPiyB,GACE54B,EAAAA,EAAAA,KAACowJ,GAAgB,CACfz6D,YAAatxC,EAAOlnD,GACpBmzJ,QAASjsG,EAAOomF,SAChB4lB,gBAAiBA,MAIzB,CACE5sJ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/BnD,MAAO4J,EAAE,eACTP,QAASA,IACPq0D,EAAaJ,GAASg2F,sBAAuB,CAC3CvsG,OAAQ,CACNlnD,GAAIknD,GAAQlnD,GACZqzE,eAAgBnsB,EAAOmsB,eACvBi6D,SAAUpmF,EAAOomF,YAGvB1pI,WAAYA,IACV2jI,OACI/iI,EACAuF,EACE,yIAKd8mI,GAGIoC,EAA2C,CAC/C3sI,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/ByJ,UAAU,EACVnN,MAAO4J,EAAE,sBACTP,QAAS8pJ,EACT1vJ,WACgC,IAA9B+rC,EAAKhsC,cAAc0C,OAAe0D,EAAE,+CAA4CvF,GAMpF,MAH8B,cAA1B0iD,EAAOmsB,gBACT76C,EAAe5xB,KAAKqsI,GAEfz6G,CAAc,GACpB,CACDzuB,EACAupJ,EACA3jH,EAAKhsC,cAAc0C,OACnBo1B,EACAyrB,EAAOlnD,GACPknD,EAAOomF,SACPpmF,EAAOmsB,eACP6/E,EACAr1F,EACA0pE,EACAsJ,GAEJ,CD9GyB6iB,CAAwC/jH,GACzD3K,EGXD,SAA0C5/B,GAC/C,MAAM,IAAQ4E,EAAAA,EAAAA,MACR6zD,EAAerW,KAEf0e,EAAeP,KAEfze,GAASgZ,EAAAA,GAAAA,KAET2mE,GAAuEloI,EAAAA,EAAAA,cAC3E4S,MAAOupD,EAAM35B,WACL+kC,EAAa5R,EAAM,UAAUwG,EAAK96D,GAAGqhB,cAAe,CAAE8f,kBACtD/7B,IACC4nC,QAAQqd,YAEjB,CAACjlD,EAAU8gE,IAGb,OAAOh/D,EAAAA,EAAAA,UACL,IAAM,CACJ,CACEZ,KAAMrJ,EAAe+H,OACrBC,UAAY4xE,GACE9sE,EAAZ8sE,EAAc,4BAAiC,4BACjDxzE,UAAWnG,EAAoBsG,OAC/B4B,SAAUA,CAAC01D,EAAM35B,IAAY0lG,EAAiB/rE,EAAM35B,GACpD98B,WAAay2D,KAAmBA,EAAK35B,QACrChhC,MAAO4J,EAAE,WACTxF,SAAUwF,EAAE,YACZtF,iBAAiB,EACjB6I,UAAU,EACV1J,WAAak3D,GAAS6+D,GAAmB7+D,EAAM/wD,GAC/CzF,QAASyF,EACP,gLAGJ,CACEzD,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/B8J,UAAU,EACVvH,KAAM84D,GAAAA,GACN1+D,MAAO4J,EAAE,aACTP,QAAUsxD,GACR+C,EAAaJ,GAASspE,kBAAmB,CACvC7/E,OAAQ,CAAElnD,GAAIknD,EAAOlnD,GAAIqzE,eAAgBnsB,EAAOmsB,eAAgBioC,QAASxgD,EAAK96D,MAElF4D,WAAak3D,GAAS6+D,GAAmB7+D,EAAM/wD,GAC/CxG,SAAW2jI,GAAoC,0BAA1BhgF,EAAOmsB,kBAGhC,CAACtpE,EAAG88H,EAAkBhpE,EAAc3W,EAAOlnD,GAAIknD,EAAOmsB,gBAE1D,CHxCqBsgF,CAAiChkH,EAAKyoB,SACnD/vB,EIND,SAAmCsH,GACxC,MAAOhgC,EAAG8rB,GAAaD,MACjB,EAAEzxB,IAAMC,EAAAA,EAAAA,MACRk9C,GAASgZ,EAAAA,GAAAA,KAMTjvD,EAAerD,KACfiwD,EAAerW,KAEf6nG,EAAc5oF,GAClBnS,EAAM,gBAAgBpN,EAAOlnD,IAAM,aACnC+iB,KACIwkH,EAAgB1/H,QAAQwnJ,GAAeA,EAAYlpJ,SAAWkpJ,EAAYlpJ,QAAc,MAExF+sJ,GAAkBv0J,EAAAA,EAAAA,cACtB4S,UACE,IAAK,MAAMupD,KAAQ04F,EACjB,UACQphG,GAAYkC,EAAM,WAAWpN,EAAOomF,kBAA6B,CACrEttI,GAAI86D,EAAK96D,KACRuuB,MAAK,KAAWohB,EAAKyoB,SAAS,GACnC,CAAE,MAAOzmD,GACPV,EAAazD,SAAS,CACpBtH,QAAS,SACThG,MAAO6J,EAAE,iBAAiB+wD,EAAK76D,0BAC/B8C,SAAU4O,aAAewV,OAASxV,EAAIzB,SAE1C,CAEFurB,OAAUj3B,EAAU,GAEtB,CAACi3B,EAAWyrB,EAAOomF,SAAUr8H,EAAclH,EAAG4lC,IAGhD,OAAOzoC,EAAAA,EAAAA,UACL,IAAM,CACJ,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcC,QACvB3B,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,qBACTuD,UAAU,EACV9D,QAASA,IACPiyB,GACE54B,EAAAA,EAAAA,KAACowJ,GAAgB,CACfz6D,YAAatxC,EAAOlnD,GACpBmzJ,QAASjsG,EAAOomF,SAChB4lB,gBAAiBA,MAIzB,CACE5sJ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcC,QACvB3B,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,eACTuD,UAAU,EACV9D,QAASA,IACP09C,GAAQomF,SACJzvE,EAAaJ,GAASg2F,sBAAuB,CAC3CvsG,OAAQ,CACNlnD,GAAIknD,EAAOlnD,GACXqzE,eAAgBnsB,EAAOmsB,eACvBi6D,SAAUpmF,EAAOomF,YAGrBzvE,EAAaJ,GAAS+pE,YAC5B5jI,WAAYA,IACV2jI,OACI/iI,EACAuF,EACE,0IAIZ,CACEw9H,EACA2rB,EACAr1F,EACA3W,EAAOomF,SACPpmF,EAAOlnD,GACPknD,EAAOmsB,eACP53C,EACA1xB,GAGN,CJrF4B6pJ,CAA0BjkH,GAE9C0/G,EAAc5oF,GAA6CnS,EAAM,WAAWvxC,KAC5EwkH,EAAgB1/H,QAAQwnJ,GAAeA,EAAYlpJ,SAAWkpJ,EAAYlpJ,QAAc,MAI9F,OAFAi6D,GAAqB,gBAGnBv9D,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,4BACHizB,eAAgBA,EAChBuF,eAAgBA,EAChBuM,aAAcA,EACdC,WAAYA,EACZ8C,gBAAiB/9B,EAAE,iCACnBg+B,gBAEMh+B,EADJw9H,EACM,wDACA,+CAERv/F,sBAEMj+B,EADJw9H,EACM,8CAEA,yFAGRp9F,eAAgBo9F,OAAgB/iI,EAAYo2B,GAAAA,GAC5CwN,sBAAsBvlC,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrCwN,qBAAsBo/F,EAAgBx9H,EAAE,oBAAiBvF,EACzD6jC,kBAAmBA,KACfsH,GAGV,CKnDO,SAAS6gG,GAAsBzkG,GACpC,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR0kC,ECPD,SAA0BxlB,GAC/B,MAAM20C,EAAerW,KACf0tB,GAAYv2E,EAAAA,EAAAA,cACf4hB,GACCs9C,EAAaJ,GAASiwE,sBAAuB,CAAExmF,OAAQ,CAAElnD,GAAIugB,EAAMvgB,OACrE,CAAC69D,IAEG34B,EAAa8sC,GAAc,IAC5B9oD,EACH1f,QAAS0rE,IAELG,EAAgBlD,KAChBmD,EAAiB3C,GAAkBzpD,GAKzC,OAJqBhiB,EAAAA,EAAAA,UACnB,IAAM,CAACg+B,EAAYmwC,EAAeC,IAClC,CAACpwC,EAAYmwC,EAAeC,GAGhC,CDX8Bu+E,CAAiB,CAAEn7I,cAAc,EAAM0mD,aAAa,IAC1E8W,EAAyBlE,GAAc,CAAEt5D,cAAc,EAAM0mD,aAAa,IAC1EvzB,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAACgvE,IAAyB,CAACA,IACzDhvB,GAASgZ,EAAAA,GAAAA,KACTuC,EAAaH,KAsBnB,OArBsBhiD,IACpBmiD,EAAW,CACTviE,MAAO6J,EAAE,kCAAmC,CAAEoV,MAAOmB,EAAOja,SAC5DzF,YAAamJ,EAAE,qEAAsE,CACnFoV,MAAOmB,EAAOja,SAEhBwoC,iBAAkB9kC,EAAE,sBAAuB,CAAEoV,MAAOmB,EAAOja,SAC3Ds1B,MAAOrb,EAAOre,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QACtD27B,MAAO62B,GACPtoD,UAAU,EACVukC,sBACA7C,gBACAE,aACAD,SAAUA,CAACvrB,EAAuB+N,IAChC8jC,GACEkC,EAAM,WAAWpN,EAAOomF,qBACxB,CAAEzmD,aAAcF,SAASz/B,EAAOomF,UAAY,IAAKttI,GAAIugB,EAAMvgB,IAC3DsuB,IAEJ,CAGN,CE1BO,SAASwlI,IAAkB,iBAAEC,EAAgB,QAAEZ,IACpD,MAAM,EAAEppJ,IAAMC,EAAAA,EAAAA,MACRipB,EAAiBi9H,GAAiB,CACtCjpG,IAAK,UAAUksG,uBACfxvF,YAAa,CACXqwF,QAASb,EACTc,aAAcd,KAGZjuH,EAAa8sC,KACbqD,EAAgBhD,KAChBiD,EAAiB3C,KACjB5tC,GAAe79B,EAAAA,EAAAA,UACnB,IAAM,CAACg+B,EAAYmwC,EAAeC,IAClC,CAACpwC,EAAYmwC,EAAeC,IAExB3lC,EAAO6zB,GAA2B,CACtCvc,IAAKqN,EAAM,WAAW6+F,iCAAuCA,kBAAwBA,qCACrFlgI,iBACA8R,iBAGF,OACEliC,EAAAA,EAAAA,KAACitC,GAAiB,CAChB5vC,MAAO6J,EAAE,iBACTpB,SAAW2X,IAAgByzI,EAAiBzzI,EAAQ,EACpD2S,eAAgBA,EAChB8R,aAAcA,EACd4K,KAAMA,EACN/uC,YAAamJ,EAAE,eAGrB,CC/BO,SAASmqJ,KACd,MAAM,EAAEnqJ,IAAMC,EAAAA,EAAAA,MACR+6B,ECVD,SAAiC7b,GAItC,MAAM20C,EAAerW,KACfN,GAASgZ,EAAAA,GAAAA,KACTgV,GAAYv2E,EAAAA,EAAAA,cACf4hB,GACCs9C,EAAaJ,GAASiwE,sBAAuB,CAC3CxmF,OAAQ,CAAEmsB,eAAgBnsB,EAAOmsB,eAAgBrzE,GAAIugB,EAAM6yD,UAAWk6D,SAAU/sH,EAAMvgB,OAE1F,CAAC69D,EAAc3W,EAAOmsB,iBAElBnuC,EAAa8sC,GAAc,IAC5B9oD,EACH1f,QAAS0rE,IAELG,EAAgBhD,GAAiBnpD,GACjCosD,EAAiB3C,GAAkBzpD,GAKzC,OAJqBhiB,EAAAA,EAAAA,UACnB,IAAM,CAACg+B,EAAYmwC,EAAeC,IAClC,CAACpwC,EAAYmwC,EAAeC,GAGhC,CDduB6+E,GACfjtG,GAASgZ,EAAAA,GAAAA,KACTjtC,EAAiBi9H,GAAiB,CAAEjpG,IAAK,UAAUC,EAAOomF,UAAY,gBACtE39F,EAAO6zB,GAA2B,CACtCvc,IAAKqN,EAAM,WAAWpN,EAAOomF,UAAY,eACzCr6G,iBACA8R,iBAEIvM,EEDD,SAAwCmX,GAC7C,MAAOhgC,EAAG8rB,GAAaD,MACjB,EAAEzxB,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACf+oF,EAAqBC,GAAsB7gG,EAAK00B,yBAChDnd,GAASgZ,EAAAA,GAAAA,KACT9N,EAAcyT,KACd50D,EAAerD,KAEfwmJ,EAA0C,0BAA1BltG,EAAOmsB,eAEvBw9D,EAAmBf,GAAoC,IACxD5oF,EACHvjD,cAAegsC,EAAKhsC,eAAiB,GACrCysI,WAAY,YAGRK,EAAehqE,GACnBnS,EAAM,gBAAgBpN,EAAOlnD,IAAM,cACnC+iB,KACI2tH,EAAiB7oI,QACrB4oI,GAAgBA,EAAatqI,SAAWsqI,EAAatqI,QAAc,MAG/D4tJ,GAAmBp1J,EAAAA,EAAAA,cACvB4S,UACE,IAAK,MAAMgP,KAAS8zI,EAClB,UACQjiG,EAAYkC,EAAM,WAAWpN,EAAOomF,qBAAgC,CACxEttI,GAAIugB,EAAMvgB,KACTuuB,MAAK,KAAWohB,EAAKyoB,SAAS,GACnC,CAAE,MAAOzmD,GACPV,EAAazD,SAAS,CACpBtH,QAAS,SACThG,MAAO6J,EAAE,iBAAiBwW,EAAMtgB,0BAChC8C,SAAU4O,aAAewV,OAASxV,EAAIzB,SAE1C,CAEFurB,OAAUj3B,EAAU,GAEtB,CAACi3B,EAAW22B,EAAalL,EAAOomF,SAAU39F,EAAM1+B,EAAclH,IAGhE,OAAO7C,EAAAA,EAAAA,UAAuC,KAC5C,MAAMy0B,EAAuC,GA8D7C,OA5DsB,IAAlBy4H,GACFz4H,EAAM/0B,KAAK,CACTN,KAAMrJ,EAAewL,SACrBpF,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVvH,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,aACT5D,QAAS,CACP,CACEG,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/BnD,MAAO4J,EAAE,sBACTP,QAASA,IACPiyB,GACE54B,EAAAA,EAAAA,KAACixJ,GAAiB,CAChBX,QAASjsG,EAAOomF,SAChBymB,iBAAkBA,MAI1B,CACEztJ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/BnD,MAAO4J,EAAE,gBACTxG,SAAUA,IAAM6wJ,EAChB5qJ,QAASA,IACPq0D,EAAattB,OAAOktB,GAAS62F,mCAAoC,CAC/DptG,OAAQ,CACNmsB,eAAgBnsB,EAAOmsB,eACvBrzE,GAAIknD,EAAOlnD,GACXstI,SAAUpmF,EAAOomF,YAGvB1pI,WAAYA,IACV8sI,OACIlsI,EACAuF,EACE,2IAOhB4xB,EAAM/0B,KAAKiqI,IAEW,IAAlBujB,IACFz4H,EAAM/0B,KAAK,CAAEN,KAAMrJ,EAAesJ,YAClCo1B,EAAM/0B,KAAK,CACTN,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,uBACTP,QAAS+mI,EACTpmI,UAAU,EACVvG,WACgC,IAA9B+rC,EAAKhsC,cAAc0C,OAAe0D,EAAE,+CAA4CvF,KAG/Em3B,CAAK,GACX,CACD5xB,EACAwmI,EACA1yE,EACA3W,EAAOmsB,eACPnsB,EAAOlnD,GACP0wI,EACAG,EACAlhG,EAAKhsC,cAAc0C,OACnB6gD,EAAOomF,SACPymB,EACAt4H,EACA24H,GAEJ,CFzHyBG,CAA+B5kH,GAChD3K,EAAaorH,KACb/nH,EGLD,SAA2CsH,GAChD,MAAOhgC,EAAG8rB,GAAaD,MACjB,EAAEzxB,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACfN,GAASgZ,EAAAA,GAAAA,KACTjvD,EAAerD,KAEf6iI,EAAehqE,GACnBnS,EAAM,gBAAgBpN,EAAOlnD,IAAM,cACnC+iB,KACI2tH,EAAiB7oI,QACrB4oI,GAAgBA,EAAatqI,SAAWsqI,EAAatqI,QAAc,MAG/D4tJ,GAAmBp1J,EAAAA,EAAAA,cACvB4S,UACE,IAAK,MAAMgP,KAAS8zI,EAClB,UACQjiG,GAAYkC,EAAM,WAAWpN,EAAOomF,qBAAgC,CACxEttI,GAAIugB,EAAMvgB,KACTuuB,MAAK,KAAWohB,EAAKyoB,SAAS,GACnC,CAAE,MAAOzmD,GACPV,EAAazD,SAAS,CACpBtH,QAAS,SACThG,MAAO6J,EAAE,iBAAiBwW,EAAMtgB,0BAChC8C,SAAU4O,aAAewV,OAASxV,EAAIzB,SAE1C,CAEFurB,OAAUj3B,EAAU,GAEtB,CAACi3B,EAAWyrB,EAAOomF,SAAUr8H,EAAclH,EAAG4lC,IAGhD,OAAOzoC,EAAAA,EAAAA,UAAuC,IACd,0BAA1BggD,EAAOmsB,eACF,GAGF,CACL,CACE/sE,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcC,QACvB3B,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,sBACTuD,UAAU,EACV9D,QAASA,IACPiyB,GACE54B,EAAAA,EAAAA,KAACixJ,GAAiB,CAChBX,QAASjsG,EAAOomF,SAChBymB,iBAAkBA,MAI1B,CACEztJ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcC,QACvB3B,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,gBACTuD,UAAU,EACV9D,QAASA,IACPq0D,EAAattB,OAAOktB,GAAS62F,mCAAoC,CAC/DptG,OAAQ,CACNmsB,eAAgBnsB,EAAOmsB,eACvBrzE,GAAIknD,EAAOlnD,GACXstI,SAAUpmF,EAAOomF,YAGvB1pI,WAAYA,IACV8sI,OACIlsI,EACAuF,EACE,0IAIX,CACD2mI,EACAqjB,EACAl2F,EACA3W,EAAOomF,SACPpmF,EAAOlnD,GACPknD,EAAOmsB,eACP53C,EACA1xB,GAEJ,CHnF4ByqJ,CAAkC7kH,GAEtD8kH,EAAgBhuF,GAA6CnS,EAAM,YAAYvxC,KAC/E2tH,EAAiB7oI,QACrB4sJ,GAAiBA,EAActuJ,SAAWsuJ,EAActuJ,QAAc,MAGlEiuJ,EAA0C,0BAA1BltG,EAAOmsB,eAE7B,OACExwE,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,2CACHizB,eAAgBA,EAChBuF,eAAgBA,EAChBuM,aAAcA,EACdC,WAAYA,EACZ8C,gBAAiB/9B,EAAE,gCACnBg+B,gBAGQh+B,EAFN2mI,EACI0jB,EACI,0BACA,uDACF,qDAERpsH,sBAGQj+B,EAFN2mI,EACI0jB,EACI,kDACA,wDAEF,yFAGRjqH,eAAgBumG,OAAiBlsI,EAAY0nE,GAAAA,GAC7C9jC,sBAAsBvlC,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrCwN,qBAAsBuoG,IAAmB0jB,EAAgBrqJ,EAAE,2BAAwBvF,EACnF6jC,kBAAmBA,KACfsH,GAGV,CI5CO,SAAS+kH,IAAsB,aAAEt2B,EAAY,GAAEp+H,IACpD,MAAM,EAAE+J,IAAMC,EAAAA,EAAAA,MAYR2qJ,EAAyC,CAC7CC,kBAAmB,mBACnBz3F,SAAU,UACVyyD,cAAe,eACfilC,uBAAwB,wBACxB14F,cAAe,eACf24F,qBAAsB,wBAGlB5tG,GAASgZ,EAAAA,GAAAA,KAET60F,EACJ/0J,GAAMknD,EArBuC,CAC7C0tG,kBAAmB,YACnBz3F,SAAU,KACVyyD,cAAe,KACfilC,uBAAwB,KACxB14F,cAAe,KACf24F,qBAAsB,MAeU12B,IAA6C,KAEvEr7G,KAAMiyI,EAAqB58F,QAAS68F,GAA+Bn8F,GAEzExE,EAAM,IAAI8pE,KAAgB22B,GAAc,uCAElChyI,KAAMmyI,EAAqB98F,QAAS+8F,GAA+Br8F,GAEzExE,EAAM,IAAI8pE,KAAgB22B,GAAc,uCAElChyI,KAAMqyI,EAAmBh9F,QAASi9F,GAA6Bv8F,GAErExE,EAAM,IAAI8pE,KAAgB22B,GAAc,oCASpCO,EAAWx8F,GANE,yBAAjBslE,GACiB,kBAAjBA,GACiB,aAAjBA,EACI,GACA9pE,EAAM,IAAI8pE,KAAgB22B,GAAc,yCAGtChyI,KAAMwyI,EAAsBn9F,QAASo9F,GAC1B,kBAAjBp3B,GAAqD,2BAAjBA,EAChCk3B,EACA,CAAEvyI,KAAM,CAAEgyC,QAAS,IAAMqD,QAASA,KAAgB,GAElDnlC,EC9DD,WACL,MAAM,EAAElpB,IAAMC,EAAAA,EAAAA,MACR8gG,EAAoBjN,KACpBkN,EAA2BjN,KAC3BkN,EAAyBjN,KACzBkN,EAA0BjN,MAC1B,KAAEj7E,GAAS0jD,GAA6CnS,EAAM,4BAC9DmhG,EAAoB1yI,GAAM5c,SAASmhE,KAAKouF,mBAAmBhtF,SAAS9+D,KACxE,EAAErM,EAAO4C,MACA,CACLA,MAAO4J,EAAE5J,GACT5C,YA6BN,OAzBuB2J,EAAAA,EAAAA,UACrB,IAAM,CACJ4jG,EACAC,EACA,CACE97F,IAAK,OACL9O,MAAO4J,EAAE,qBACTzD,KAAMysB,GAAkBuB,YACxB6yB,MAAO,oBAEPj+B,QAASusI,GAAqB,GAC9BxsI,YAAalf,EAAE,iBAEjBihG,EACAC,IAEF,CACEH,EACAC,EACAhhG,EACAihG,EACAC,EACAwqD,GAIN,CDqByBE,GACjB5wH,EEpED,SAAiC7b,GAItC,MAAM,IAAQlf,EAAAA,EAAAA,MACR6zD,EAAerW,KAWftiB,EAAa8sC,GAAc,CAAcxoE,SAV7B7K,EAAAA,EAAAA,cACfi3J,GACQ/3F,EAAaJ,GAASo4F,4BAA6B,CACxD3uG,OAAQ,CACNlnD,GAAI41J,EAAqB51J,OAI/B,CAAC69D,MAGGomC,GAAa/8F,EAAAA,EAAAA,UACjB,KAAM,CACJyc,OAAQ5Z,EAAE,QACVzD,KAAM,OACN/I,MAAQq4J,GACC/iH,GAAsB+iH,EAAqBF,mBAEpD/xH,KAAM,WACNuC,KAAM,cAER,CAACn8B,IAMH,OAJqB7C,EAAAA,EAAAA,UACnB,IAAM,CAACg+B,EAAY++D,IACnB,CAAC/+D,EAAY++D,GAGjB,CFkCuB6xD,GACf9wH,EGpDD,UAAgC,qBACrCuwH,EAAoB,4BACpBC,EAA2B,oBAC3BR,EAAmB,2BACnBC,EAA0B,oBAC1BC,EAAmB,2BACnBC,EAA0B,kBAC1BC,EAAiB,yBACjBC,EAAwB,aACxBj3B,EAAY,WACZ22B,IAEA,MAAM,EAAEhrJ,IAAMC,EAAAA,EAAAA,MAER+rJ,GAAqBp3J,EAAAA,EAAAA,cACzB4S,MAAOvR,EAAY6mF,EAAuBt5C,KACxC,MAAMyoH,EAA+B,CACnCh2J,KACA6mF,cAAeA,GAEbA,UACKmvE,EAAuB,mBAE1B5jG,GACJkC,EAAM,IAAI8pE,KAAgB22B,GAAc,6BAA6BxnH,KACrEyoH,GAEFR,IACAP,IACAE,IACAE,GAA0B,GAE5B,CACEj3B,EACA22B,EACAS,EACAP,EACAE,EACAE,IA8DJ,OA9CmBnuJ,EAAAA,EAAAA,UAA6C,KAC9D,MAAM+uJ,EAA2BA,CAC/BC,EACA/1J,EACAotC,EACAyU,KAEO,CACL10C,UAAU,EACVrI,UAAY4xE,GAEN9sE,EADJ8sE,EACM,oBAAoBq/E,IACpB,mBAAmBA,KAC3B5vJ,KAAMrJ,EAAe+H,OACrB3B,UAAWnG,EAAoBsG,OAC/Be,SAAUwF,EAAE5J,GACZA,MAAO4J,EAAE5J,GACTiF,SAAUA,CAACwwJ,EAA4CO,IACrDJ,EAAmBH,EAAqB51J,GAAIm2J,EAAQ5oH,GACtDlpC,WAAauxJ,GA/BYQ,EAC7BR,EACA5zG,EAA6C,MAE7C,IAAK,MAAME,KAAgBF,EACzB,GAAI4zG,EAAqB51J,KAAOkiD,EAAaliD,GAC3C,OAAO,EAGX,OAAO,CAAK,EAuBNo2J,CAAuBR,EAAsB5zG,GAC/Cv9C,iBAAiB,EACjBY,YAAY,IAGVgxJ,EAAoB,CACxBJ,EAAyB,QAAS,QAAS,UAAWjB,GACtDiB,EAAyB,UAAW,UAAW,UAAWf,GAC1De,EAAyB,UAAW,UAAW,QAASb,IAQ1D,MALqB,kBAAjBh3B,GAAqD,2BAAjBA,GACtCi4B,EAAkBC,QAChBL,EAAyB,WAAY,WAAY,YAAaV,IAG3Dc,CAAiB,GACvB,CACDrB,EACAE,EACAE,EACAh3B,EACAr0H,EACAgsJ,EACAR,GAGJ,CHjDqBgB,CAAuB,CACxChB,qBAAsBA,GAAsBxgG,QAC5CygG,8BACAR,oBAAqBA,GAAqBjgG,QAC1CkgG,6BACAC,oBAAqBA,GAAqBngG,QAC1CogG,6BACAC,kBAAmBA,GAAmBrgG,QACtCsgG,2BACAj3B,eACA22B,eAEIplH,EAAO6zB,GAAiC,CAC5Cvc,IAAKqN,EAAM,2BACXrhC,iBACA8R,iBAKF,OAFAq7B,GAAqB,gBAGnBv9D,EAAAA,EAAAA,KAACmhD,GAAU,CAAAjhD,UACTF,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,8BACHizB,eAAgBA,EAChB8R,aAAcA,EACdC,WAAYA,EACZ8C,gBAAiB/9B,EACf,iBACE4qJ,EAAmBv2B,oBAGvBr2F,gBAAiBh+B,EACf,sDACE4qJ,EAAmBv2B,OAGvBp2F,sBAAuBj+B,EACrB,yFAEFogC,eAAgBvP,GAAAA,MACZ+U,KAIZ,CIvFO,SAAS6mH,GAAc72J,GAM5B,MAAM,IAAQqK,EAAAA,EAAAA,MACR6zD,EAAerW,KACfilE,EAAUzlE,KACVE,GAASgZ,EAAAA,GAAAA,KACT60F,EAAa7tG,EAAOuxC,WAAavxC,EAAOlnD,GAExCy2J,GAAatY,EAAAA,GAAAA,MACbuY,IAA6BD,GAAYjuE,UAC3CmhB,GAAiB8sD,GAAYjuE,UAG3BmuE,EAAkCh3J,EAAMi3J,gBAC1C,GAAGj3J,EAAMi3J,mBAAmB7B,oBAC5BvwJ,EAEEyuB,ECjDD,UAA4B,IACjCg0B,GAGE,CAAC,GACH,MACMk1C,GADUl1C,EAAMA,EAAIzpD,QAAQ62D,GAAY,IAAM,KACrB,YAiB/B,OAbuB6nC,GAAyB,CAC9CC,YAAaA,EACbC,cAAe,CAAC,OAAQ,KAAM,aAAc,eAC5CC,mBAAoB,CAClBp8F,KAAM,CACJi9F,QAASf,GAEXn8F,GAAI,CACFk9F,QAASf,IAGbG,kBAAmB,CAdUyB,KACCC,OAgBlC,CDyByB64D,CAAmB,CACxC5vG,IAAKtnD,EAAMsnD,IAAMtnD,EAAMsnD,IAAM0vG,IAEzB5xH,EAAeyoH,KACf79G,EAAO6zB,GAAqB,CAChCvc,IAAK0vG,GAAeriG,EAAM,cAC1BrhC,iBACA8R,iBAEFq7B,GAAqBzgE,EAAMy+H,aAAe,GAAGz+H,EAAMy+H,yBAA2B,aAE9E,MAAM,KAAEr7G,GAAS0jD,GAA6CkwF,GAAeriG,EAAM,eAC7Ey5F,EAAoBlmJ,QAAQkb,GAAQA,EAAK5c,SAAW4c,EAAK5c,QAAc,MAEvEqyB,EE1DD,SACLuT,EACA+qH,EACAJ,GAEA,MAAM,EAAE3sJ,IAAMC,EAAAA,EAAAA,OACR,KAAE+Y,GAAS0jD,GAA6CnS,EAAM,eAC9Dy5F,EAAoBlmJ,QAAQkb,GAAQA,EAAK5c,SAAW4c,EAAK5c,QAAc,MAEvE4wJ,EAAkBpJ,GAAmB5hH,GAoC3C,OAlC+B7kC,EAAAA,EAAAA,UAC7B,IAAM,CACJ,CACEZ,KAAMrJ,EAAeyN,KACrBrH,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVvH,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,mBACTnG,WAAYmqJ,EACR2I,EACE3sJ,EAAE,kDACFvF,EACFuF,EACE,0IAENa,KAAMksJ,GAGR,CAAExwJ,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,oBACTP,QAASutJ,EACTnzJ,WAAa45D,GAAcs8D,GAAsBt8D,EAAWzzD,GAE5DI,UAAU,KAGd,CAAC4jJ,EAAmB+I,EAAWC,EAAiBhtJ,EAAG2sJ,GAIvD,CFYyBM,CACrBrnH,EAAK00B,wBACLooD,EAAQ9sH,EAAMs3J,qBAAsB,CAAE/vG,WACtCwvG,GAEI1xH,EAAa4oH,GAAoB,CACrCE,0BAA2Bn+G,EAAK00B,wBAChC6pF,0BAA2Bv+G,EAAK5Q,WAChC63H,gBAAiBD,IAEnB,OACE9zJ,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,sBACHizB,eAAgBA,EAChBuF,eAAgBA,EAChBuM,aAAcA,EACdC,WAAYA,EACZ8C,gBAAiB/9B,EAAE,2BACnBg+B,gBAGQh+B,EAFNgkJ,EACI2I,EACI,4CACA,mBACF,mDAER1uH,sBACE+lH,EACI2I,OACElyJ,EACAuF,EAAE,uDACJA,EACE,yFAGRk+B,qBACE8lH,EAAqB2I,EAAoBvnH,GAAAA,QAA0B3qC,EAAao2B,GAAAA,GAElFwN,sBAAsBvlC,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrCwN,qBACE4lH,IAAsB2I,EAAoB3sJ,EAAE,wBAAqBvF,EAEnE0jC,sBACE6lH,IAAsB2I,EAClB,IAAM74F,EAAal+D,EAAMs3J,qBAAsB,CAAE/vG,gBACjD1iD,KAEFmrC,GAGV,CGlHO,SAASs9F,KACd7sE,GAAqB,eACrB,MAAMqqE,EAAcT,MACd,GAAEhqI,EAAK,KAAOkgE,EAAAA,GAAAA,KACdyD,EAAc,CAClBgnE,iBAAkB,OAClBusB,4BAA6Bl3J,EAC7Bm3J,iDAAkDn3J,EAClDo3J,mBAAoBp3J,EACpBq3J,2BAA4Br3J,GAE9B,OAAO6C,EAAAA,EAAAA,KAACmmI,GAAQ,CAACrlE,YAAaA,EAAajpD,QAAS+vH,GACtD,CCUO,SAAS6sB,KACd,MAAM,EAAEvtJ,IAAMC,EAAAA,EAAAA,MACRutJ,GAASvyF,EAAAA,GAAAA,IAA2B,CACxC/kE,KAAM,gBAEFu3J,EAAgB,CACpB,CAAEr3J,MAAO4J,EAAE,WAAYxM,MAAO,WAC9B,CAAE4C,MAAO4J,EAAE,SAAUxM,MAAO,SAC5B,CAAE4C,MAAO4J,EAAE,OAAQxM,MAAO,OAC1B,CAAE4C,MAAO4J,EAAE,OAAQxM,MAAO,OAC1B,CAAE4C,MAAO4J,EAAE,WAAYxM,MAAO,WAC9B,CAAE4C,MAAO4J,EAAE,kBAAmBxM,MAAO,kBACrC,CAAE4C,MAAO4J,EAAE,WAAYxM,MAAO,WAC9B,CAAE4C,MAAO4J,EAAE,WAAYxM,MAAO,WAC9B,CAAE4C,MAAO4J,EAAE,SAAUxM,MAAO,SAC5B,CAAE4C,MAAO4J,EAAE,QAASxM,MAAO,QAC3B,CAAE4C,MAAO4J,EAAE,SAAUxM,MAAO,SAC5B,CAAE4C,MAAO4J,EAAE,QAASxM,MAAO,QAC3B,CAAE4C,MAAO4J,EAAE,WAAYxM,MAAO,WAC9B,CAAE4C,MAAO4J,EAAE,SAAUxM,MAAO,SAC5B,CAAE4C,MAAO4J,EAAE,YAAaxM,MAAO,YAC/B,CAAE4C,MAAO4J,EAAE,eAAgBxM,MAAO,eAClC,CAAE4C,MAAO4J,EAAE,eAAgBxM,MAAO,eAClC,CAAE4C,MAAO4J,EAAE,aAAcxM,MAAO,aAChC,CAAE4C,MAAO4J,EAAE,YAAaxM,MAAO,aAG3Bk6J,EAAmB,CACvB,CAAEt3J,MAAO4J,EAAE,cAAexM,MAAO,KACjC,CAAE4C,MAAO4J,EAAE,eAAgBxM,MAAO,KAClC,CAAE4C,MAAO4J,EAAE,oBAAqBxM,MAAO,KACvC,CAAE4C,MAAO4J,EAAE,aAAcxM,MAAO,KAChC,CAAE4C,MAAO4J,EAAE,wBAAyBxM,MAAO,KAC3C,CAAE4C,MAAO4J,EAAE,mBAAoBxM,MAAO,MAGxC,OACE4K,EAAAA,EAAAA,MAACygE,GAAe,CAAC12B,cAAY,EAAAnvC,SAAA,EAC3BF,EAAAA,EAAAA,KAACs6C,GAAc,CACbl9C,KAAK,cACLm9C,gBAAiBrzC,EAAE,mBACnB8lB,YAAU,EACV1vB,MAAO4J,EAAE,UACTmf,QAASsuI,EACTvjH,eAAgBlqC,EAAE,UAClBiqC,UAAWjqC,EAAE,wEAEflH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,cACLgpB,YAAalf,EAAE,mBACf8lB,WAAuB,YAAX0nI,GAAmC,UAAXA,EACpCp3J,MAAO4J,EAAE,aACTkqC,eAAgBlqC,EAAE,aAClBiqC,UAAWjqC,EAAE,0DAEflH,EAAAA,EAAAA,KAACs6C,GAAc,CACbl9C,KAAK,YACLE,MAAO4J,EAAE,aACTmf,QAASuuI,EACTxjH,eAAgBlqC,EAAE,aAClBiqC,UAAWjqC,EACT,6FAGJlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,QACLE,MAAO4J,EAAE,SACTkqC,eAAgBlqC,EAAE,SAClBiqC,WACE7rC,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEoF,EAAAA,EAAAA,MAACw0G,EAAAA,GAAK,CAAA55G,SAAA,CAAC,qMAGuB,QAE9BF,EAAAA,EAAAA,KAAC85G,EAAAA,GAAK,CAAA55G,UACJF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAG,yEACH6zB,OAAO,SACP87C,IAAI,sBAAqBv3E,SAC1B,iBAOTF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,QACLE,MAAO4J,EAAE,SACTzD,KAAK,SACLo8B,IAAK,EACLuR,eAAgBlqC,EAAE,SAClBiqC,WACE7rC,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEoF,EAAAA,EAAAA,MAACw0G,EAAAA,GAAK,CAAA55G,SAAA,CAAC,yMAGqB,QAE5BF,EAAAA,EAAAA,KAAC85G,EAAAA,GAAK,CAAA55G,UACJF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAG,qHACH6zB,OAAO,SACP87C,IAAI,sBAAqBv3E,SAC1B,iBAOTF,EAAAA,EAAAA,KAAC86C,GAAc,CACb19C,KAAK,YACLE,MAAO4J,EAAE,gBACTkqC,eAAgBlqC,EAAE,gBAClBiqC,UAAWjqC,EACT,wHAGJlH,EAAAA,EAAAA,KAACuwC,GAAgB,CACfnzC,KAAK,iBACLE,MAAO4J,EAAE,wBACTkqC,eAAgBlqC,EAAE,wBAClBiqC,UAAWjqC,EACT,+LAGJlH,EAAAA,EAAAA,KAACm4C,GAAkB,CACjB/G,eAAgBlqC,EAAE,mBAClBiqC,UAAWjqC,EAAE,yDACbuL,OAAO,OACPnV,MAAO4J,EAAE,mBACT9J,KAAK,iBAIb,CAEO,SAASy3J,GAA8B/3J,GAC5C,MAAM,IAAQqK,EAAAA,EAAAA,MACd,OACEnH,EAAAA,EAAAA,KAAC+lE,GAAe,CAAA7lE,UACdF,EAAAA,EAAAA,KAACo9F,GAAkC,CACjChgG,KAAK,wBACLE,MAAO4J,EAAE,yBACTq2F,eAAgB/iG,OAAOsC,EAAMg4J,QAAU,MAI/C,CAEO,SAASC,KACd,MAAM,EAAE7tJ,IAAMC,EAAAA,EAAAA,MACd,OACEnH,EAAAA,EAAAA,KAAC+lE,GAAe,CAAA7lE,UACdF,EAAAA,EAAAA,KAACy7F,GAAwB,CACvBr+F,KAAK,aACLE,MAAO4J,EAAE,cACTiqC,UAAWjqC,EACT,wNAEF45D,YAAa,CACXwiE,2BAA4B,OAE9Bt2G,YAAU,KAIlB,CAEO,SAASgoI,KACd,MAAM,EAAE9tJ,IAAMC,EAAAA,EAAAA,OACR,WAAEq/C,GAAeV,KAGjBlB,EAAaT,MACb,YACJ8wG,EAAW,YACXz1F,EAAW,UACXqjB,EAAS,MACT74C,EAAK,MACL83C,EAAK,UACLN,EAAS,eACTsE,EAAc,WACd9C,EAAU,sBACVpB,EACAhT,WAAY8hD,GACVlqE,GACItmC,KAAM0uD,GAAe3Y,GAAmBxE,EAAM,gBAAgBi/D,EAAalyG,gBAE3E0B,KAAMm0E,GAAch+B,GAC1B5E,EAAM,2BACNmwB,GAGF,OACE5hF,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,UACEF,EAAAA,EAAAA,KAAC+lE,GAAe,CAAC1oE,MAAO6J,EAAE,UAAWmoC,cAAY,EAAAnvC,UAC/CoF,EAAAA,EAAAA,MAACoc,GAAW,CAACC,gBAAc,EAAAzhB,SAAA,EACzBF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,UAAUhH,SAAE+0J,KACjCj1J,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,aAAahH,SAAEs/D,KACpCx/D,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,aAAahH,SAAE2iF,KACpC7iF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,SAAShH,SAAE8pC,KAChChqC,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,SAAShH,SAAE4hF,KAChC9hF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,gBAAgBhH,SAAcgH,EAAZs6E,EAAc,KAAU,UAC/DxhF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,wBAAwBhH,SACzBgH,EAAjB4+E,EAAmB,KAAU,UAEhC9lF,EAAAA,EAAAA,KAACo2E,GAAoB,CAAC94E,MAAO4J,EAAE,cAAexM,MAAOsoF,IACpDpU,GACC5uE,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,eAAgBka,SAAUwtD,EAAW1uE,UACxDF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,UACTF,EAAAA,EAAAA,KAAC2uE,GAAe,CACdC,WAAY,CACVxxE,KAAMwxE,EAAWxxE,KACjBD,GAAI2mF,SAASlV,EAAWzxE,GAAGqhB,YAC3BswD,KAAM,MACND,OAAO,EACPjzD,YAAagzD,EAAWxxE,OAErBwxE,EAAWzxE,QAIpB,MACJ6C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,yBAAyBhH,UAC5CF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS85B,4BAA6B,CACnDrwC,OAAQ,CAAElnD,GAAIuwC,OAAOk0C,MACpB1hF,SAEFm0F,GAAWj3F,eAO1B,CClPO,SAASiwI,KACd,MAAM,EAAEnmI,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,MACb,GAAEhnD,IAAOkgE,EAAAA,GAAAA,MACR9X,GAAgBD,KACvB,IAAItb,EAAQub,EAAauF,IAAI,UAAY,MACzBvF,EAAauF,IAAI,aAG/B9gB,EAAQ95B,aAAaC,QAAQ,kCAAoC65B,GAGnE,MAAMgxB,EAAerW,MACbzkC,KAAMqwD,GAActa,GAAkBxE,EAAM,gBAAgBt0D,MAE9DiY,GAAWC,EAAAA,GAAAA,MAoBX8wC,EAA0B,CAC9B,CACEhpD,GAAI,UACJG,MAAO4J,EAAE,WACTohD,QAAQtoD,EAAAA,EAAAA,KAACy0J,GAAoB,KAE/B,CACEt3J,GAAI,wBACJG,MAAO4J,EAAE,yBACTohD,QACEtoD,EAAAA,EAAAA,KAAC60J,GAA6B,CAC5BC,MAAOvkF,GAAWpV,eAAeiV,aAAajzE,GAAGqhB,YAAc,MAIrE,CACErhB,GAAI,aACJG,MAAO4J,EAAE,cACTohD,QAAQtoD,EAAAA,EAAAA,KAAC+0J,GAAwB,KAEnC,CACE53J,GAAI,SACJG,MAAO4J,EAAE,UACTohD,QAAQtoD,EAAAA,EAAAA,KAACg1J,GAAoB,MAI3BllD,EAAgB,CACpB/hD,QAAS,CACPknG,YAAa,GACbz1F,YAAa,GACbqjB,UAAW,EACX74C,QACA83C,MAAO,EACPN,WAAW,EACXsE,gBAAgB,EAChB9C,WAAY,KAIhB,OACE19E,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,eACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,eAAgBY,GAAI88C,EAAWgW,GAASooD,cACnD,CAAE1lH,MAAO4J,EAAE,oBAGflH,EAAAA,EAAAA,KAACgqD,GAAU,CACT7D,MAAOA,EACP9W,cAAc,EACd7B,SAtEWA,IAAMp4B,GAAU,GAuE3BwY,aAAckiF,EACdpxE,SAtEehwB,UACnB,MAAMwmJ,EAAOh1I,EAAK0hE,sBACZuzE,EAAgB,IACjBj1I,EACH2iE,UAAW3iE,EAAK2iE,UAChBf,MAAO5hE,EAAK4hE,MACZlT,WAAY1uD,EAAK0uD,WACjBgT,sBAAuBszE,GAEnBrxJ,QAA+B0rD,GACnCkC,EAAM,gBAAgBt0D,GAAM,sBAC5Bg4J,GAEFn6F,EAAaJ,GAAS4qC,UAAW,CAAEnhD,OAAQ,CAAElnD,GAAI0G,EAAO1G,GAAIglF,SAAU,YAAc,EA0DhFh5C,aAAck2B,OAItB,CC9EO,SAAS+1F,GAAmBt4J,GACjC,MAAM,IAAQqK,EAAAA,EAAAA,MACRy9C,EAAaT,KACb/uC,GAAWC,EAAAA,GAAAA,MACX2lD,EAAerW,KACf6kG,EAAmBnC,KACnBxiC,EAAiBX,KACjBulC,EAAaJ,KACbhlG,GAASgZ,EAAAA,GAAAA,MAEPn9C,KAAMkkG,GAAa/tD,GAAqB5E,EAAM,cAAepN,EAAOkgE,cAErE8wC,EAAWjmD,GAAkBjE,GAClCiZ,GAAUohC,QACVphC,GAAUo8B,UAkCNr6F,GAA0B9hD,EAAAA,EAAAA,UAAQ,IAC/B,CACL,CACElH,GAAI,UACJG,MAAO4J,EAAE,WACTohD,QAAQtoD,EAAAA,EAAAA,KAAC2mJ,GAAkB,IAAK7pJ,KAElC,CACEK,GAAI,aACJG,MAAO4J,EAAE,WACTohD,QAAQtoD,EAAAA,EAAAA,KAACs1J,GAAW,IACpBryI,OAASujC,IACP,MAAM,cAAE+6B,EAAa,SAAExtC,EAAQ,cAAEizG,GAAkBxgG,EACnD,MACqB,iBAAlBwgG,GAAsD,QAAlBA,IACrCjzG,IACAwtC,GAEO8F,GAAoB9F,EAElB,GAGf,CACEpkF,GAAI,SACJG,MAAO4J,EAAE,UACTohD,QAAQtoD,EAAAA,EAAAA,KAACuqG,GAAU,IACnBtnF,OAASujC,GACgC,IAAnC38C,OAAO4f,KAAK+8B,GAAYhjD,SAGxBgjD,EAAW+6B,eAAeioB,gBAMlC,CACErsG,GAAI,QACJG,MAAO4J,EAAE,SACTohD,QAAQtoD,EAAAA,EAAAA,KAACklJ,GAAS,IAClBz0G,SAAW4W,IACT,IAAKA,GAAU/V,OAAO9tC,OAAQ,CAC5B,MAAMqqC,EAAS,CACbmiE,QAAS,CAAC9oG,EAAE,4CAGd,MAAM,IAAImnD,GAAa,GAAI,GAAI,IAAK,GAAIxgB,EAC1C,IAGJ,CACE1wC,GAAI,aACJG,MAAO4J,EAAE,cACTohD,QAAQtoD,EAAAA,EAAAA,KAACylJ,GAAc,KAEzB,CACEtoJ,GAAI,SACJG,MAAO4J,EAAE,UACTohD,QAAQtoD,EAAAA,EAAAA,KAACioJ,GAAkB,IAC3Bx3G,SAAU/hC,MAAO24C,EAAkBb,KACjC,IAAKA,GAAYlV,OAAO9tC,OAAQ,CAC9B,MAAMqqC,EAAS,CACbmiE,QAAS,CAAC9oG,EAAE,4CAGd,MAAM,IAAImnD,GAAa,GAAI,GAAI,IAAK,GAAIxgB,EAC1C,CAEA,MAAMy7G,EAAUG,EAAWjjG,EAAWlV,MAAOkV,EAAWq7F,YAAc,KAEhE,IAAE6B,EAAG,MAAED,SAAgBl0F,GAC3BkC,EAAM,sBACN,CACE+xF,MAAO8F,EAAQ9qI,WAAWhX,MAAM,MAAMC,KAAK,OAG/C,IAAKg8I,EAAMjgJ,SAAWkgJ,EAAIlgJ,OAAQ,CAChC,MAAMqqC,EAAS,CACbmiE,QAAS,CACP9oG,EACE,wJAKN,MAAM,IAAImnD,GAAa,GAAI,GAAI,IAAK,GAAIxgB,EAC1C,MAIL,CAAC47G,EAAYviJ,EAAGpK,IAEnB,IAAKsnH,EAAU,OACf,MAAMgkC,GAAUgC,EAAAA,GAAAA,IAAShmC,EAASo/B,MAAO,CAAE6G,UAAU,IAC/C/4G,EAAQ82G,EAAQkC,SAASvjJ,KAAI,CAACm7I,EAAMx0I,KAAM,CAAGw0I,OAAM/kJ,GAAIuQ,EAAI,MAC3Dm0I,EAAauG,EAAQmC,UAAUxjJ,KAAI,CAACm7I,EAAMx0I,KAAM,CAAGw0I,OAAM/kJ,GAAIuQ,EAAI,MAEjE6nJ,EAAgB,CACpBxnG,QAAS,CACP3wD,KAAMgnH,GAAUhnH,KAChBwe,YAAawoG,GAAUxoG,YACvBorI,cAAe5iC,GAAUjpD,eAAeogB,qBAAqBgF,iBAC7DxsC,SAAUqwE,GAAUjpD,eAAeogB,qBACnCklE,cAAe,CAAE1uI,KAAMsjJ,EAAWjmD,KAAMA,GACxCoxC,SAAUp8B,GAAUo8B,SACpBkH,sBAAuBtjC,EAAS1iC,WAAW1tE,MAE7CozI,WAAY,CACVx7G,OAAQ,CAAC,GAEX0F,MAAO,IAAKmsG,GAAsBnsG,SAClCuwG,WAAY,IAAKpE,GAAsBoE,eAGzC,OACEv8I,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MACE+mH,GAAUhnH,KACN8J,EAAE,wBAAyB,CAAEsuJ,aAAcpxC,GAAUhnH,OACrD8J,EAAE,YAERk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,aAAcY,GAAI88C,EAAWgW,GAASovF,YACjD,CACE1sJ,MAAO8mH,GAAUhnH,KACb8J,EAAE,wBAAyB,CAAEsuJ,aAAcpxC,GAAUhnH,OACrD8J,EAAE,iBAIZlH,EAAAA,EAAAA,KAACgqD,GAAU,CACT7D,MAAOA,EACP9W,cAAc,EACd7B,SAzIWA,IAAMp4B,GAAU,GA0I3BwY,aAAc2nI,EACd72H,SAxKehwB,UACnB,MAAM,MAAE4iC,EAAK,WAAEuwG,KAAe9gI,GAASkvF,EAGjC/vF,EAA6B,CACjCsjI,MAHciG,EAAWn4G,EAAOuwG,GAGjBrjI,WAAWhX,MAAM,MAAMC,KAAK,QACxCsZ,GAGL,IACE,MAAM,SACJqjG,SAGQolC,EAAiBtpI,GACrB0pG,EAAU/E,EAAe,UAAWT,GAC1C,OAAOppD,EAAa4uD,EAAQ/kE,OAAQ,CAAER,OAAQulE,EAAQvlE,QACxD,CAAE,MAAOr3C,GACP,MAAM,YAAEoX,GAAgBi7C,GAAgBryD,GAClCi9I,EAAkB7lI,EAAY5f,MAAMsK,GAAsB,8BAAdA,GAAK1R,OACvD,GAAI6sJ,EAAiB,CACnB,MAAMp8G,EAAS,CACbmiE,QAAS,CAACi6C,EAAgB58I,UAE5B,MAAM,IAAIghD,GAAa,GAAI,GAAI,IAAK,GAAIxgB,EAC1C,CACF,GA+II1E,aAAck2B,OAItB,CClOO,SAAS2qE,KACd,MAAM3lF,GAASgZ,EAAAA,GAAAA,KACf,OACEr9D,EAAAA,EAAAA,KAAC0/H,GAAU,CACTzsC,QAAQ,MACR91F,GAAIknD,EAAOlnD,IAAM,GACjBsG,KAAM,YACNg8H,cAAe7kE,GAAS66F,mBAG9B,CCVO,SAAS1rB,KACd,MAAM1lF,GAASgZ,EAAAA,GAAAA,KACf,OACEr9D,EAAAA,EAAAA,KAAC6/H,GAAU,CACT5sC,QAAQ,MACR91F,GAAIknD,EAAOlnD,IAAM,GACjBsG,KAAM,YACNg8H,cAAe7kE,GAAS86F,mBAG9B,CCoBO,SAASA,KACd,MAAM,EAAExuJ,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KACbE,GAASgZ,EAAAA,GAAAA,MAEPn9C,KAAMqwD,EAAS,UAAEnnD,GAAc6sC,GACrCxE,EAAM,gBAAgBpN,EAAOlnD,IAAM,OAE/ButH,EAAqBF,KACrBxvD,EAAerW,KAErB,GAAIv7B,IAAcmnD,EAAW,OAAOvwE,EAAAA,EAAAA,KAACkqD,GAAW,IAEhD,MAAM/D,EAA0B,CAC9B,CACEhpD,GAAI,QACJG,MAAO4J,EAAE,kBACTohD,QACEtoD,EAAAA,EAAAA,KAACk9H,GAAkB,CACjBC,6BAA8Bj2H,EAC5B,wEACA,CACEiyI,cAAe5oE,GAAWnzE,SAKlCqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,MAAE0sD,GAAUnS,EAClB,IAAKmS,GAAOh2D,OACV,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,WACJG,MAAO4J,EAAE,yBACTohD,QACEtoD,EAAAA,EAAAA,KAAC+8H,GAAkB,CACjB/uE,YAAY,YACZ0uE,yBAAyB,QACzBC,4BAA6Bz1H,EAAE,8CAA+C,CAC5EiyI,cAAe5oE,GAAWnzE,SAIhCqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,SAAE2uH,GAAap0E,EACrB,IAAKo0E,GAAUj4H,OACb,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,SACJG,MAAO4J,EAAE,UACTohD,QAAQtoD,EAAAA,EAAAA,KAACs7H,GAAyB,MAwCtC,OACEh2H,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,aACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,eAAgBY,GAAI88C,EAAWgW,GAASooD,cACnD,CACE1lH,MAAOizE,GAAWnzE,KAClB0K,GAAI88C,EAAWgW,GAAS82B,iBAAkB,CAAErtC,OAAQ,CAAElnD,GAAIozE,GAAWpzE,OAEvE,CACEG,MAAO4J,EAAE,eACTY,GAAI88C,EAAWgW,GAASmvE,oBAAqB,CAAE1lF,OAAQ,CAAElnD,GAAIozE,GAAWpzE,OAE1E,CAAEG,MAAO4J,EAAE,kBAGflH,EAAAA,EAAAA,KAACgqD,GAAU,CACT7gB,aAAck2B,GACdlZ,MAAOA,EACPznB,SAxDYxe,IAChB,MAAM,MAAEs5C,EAAK,SAAEiiE,GAAav7G,EACtB4Y,EAAwB,GAC9B,IAAK,MAAMu2C,KAAQ7V,EACjB,IAAK,MAAM9wC,KAAQ+yG,EACjB3iG,EAAM/0B,KAAK,CAAEsrE,OAAM3mD,SAGvB,OAAO,IAAIyhB,SAAeqd,IACxBkjE,EAAmB,CACjBrtH,MAAO6J,EAAE,aACT6xB,MAAOA,EAAGs2C,OAAM3mD,UAAW,GAAG2mD,EAAKlyE,MAAMurB,EAAKvrB,KAC9C27B,QACAkQ,cAAe,CACb,CAAEloB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAGusD,UAAWA,EAAKzT,UAC9C,CAAE96C,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAG4F,UAAWA,EAAKtrB,OAEhD6rC,SAAUA,EAAGomC,OAAM3mD,UACjB6mC,GAAYkC,EAAM,0BAA2B,CAC3C4d,KAAMA,EAAKlyE,GACXkgI,gBAAiB30G,EAAKvrB,GACtB4/D,aAAc,gBACdugE,UAAW/sD,EAAUpzE,KAEzB+rC,WAAYA,KACVse,GAAS,EAEXj7C,QAASA,KACPyuD,EAAaJ,GAASmvE,oBAAqB,CACzC1lF,OAAQ,CAAElnD,GAAIozE,EAAUpzE,GAAGqhB,aAC3B,GAEJ,GACF,EAwBE8wB,aAAW,EACX9B,SAAUA,KACRwtB,EAAaJ,GAASmvE,oBAAqB,CAAE1lF,OAAQ,CAAElnD,GAAIozE,GAAWpzE,KAAO,MAKvF,CC5HO,SAASs4J,KACd,MAAM,EAAEvuJ,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KACbE,GAASgZ,EAAAA,GAAAA,KACTrC,EAAerW,MACbzkC,KAAMqwD,EAAS,UAAEnnD,GAAc6sC,GACrCxE,EAAM,gBAAgBpN,EAAOlnD,IAAM,OAE/ButH,EAAqBF,KAE3B,GAAIphG,IAAcmnD,EAAW,OAAOvwE,EAAAA,EAAAA,KAACkqD,GAAW,IAEhD,MAAM/D,EAA0B,CAC9B,CACEhpD,GAAI,QACJG,MAAO4J,EAAE,kBACTohD,QACEtoD,EAAAA,EAAAA,KAACw9H,GAAkB,CACjBC,6BAA8Bv2H,EAC5B,wEACA,CACEiyI,cAAe5oE,GAAWnzE,SAKlCqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,MAAEysD,GAAUlS,EAClB,IAAKkS,GAAO/1D,OACV,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,QACJG,MAAO4J,EAAE,yBACTohD,QACEtoD,EAAAA,EAAAA,KAAC+8H,GAAkB,CACjB/uE,YAAY,YACZ0uE,yBAAyB,QACzBC,4BAA6Bz1H,EAAE,8CAA+C,CAC5EiyI,cAAe5oE,GAAWnzE,SAIhCqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,SAAE2uH,GAAap0E,EACrB,IAAKo0E,GAAUj4H,OACb,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,SACJG,MAAO4J,EAAE,UACTohD,QAAQtoD,EAAAA,EAAAA,KAACs7H,GAAyB,MAwCtC,OACEh2H,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,aACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,eAAgBY,GAAI88C,EAAWgW,GAASooD,cACnD,CACE1lH,MAAOizE,GAAWnzE,KAClB0K,GAAI88C,EAAWgW,GAAS82B,iBAAkB,CAAErtC,OAAQ,CAAElnD,GAAIozE,GAAWpzE,OAEvE,CACEG,MAAO4J,EAAE,eACTY,GAAI88C,EAAWgW,GAASovE,oBAAqB,CAAE3lF,OAAQ,CAAElnD,GAAIozE,GAAWpzE,OAE1E,CAAEG,MAAO4J,EAAE,kBAGflH,EAAAA,EAAAA,KAACgqD,GAAU,CACT7gB,aAAck2B,GACdlZ,MAAOA,EACPznB,SAxDWhwB,UACf,MAAM,MAAE6qD,EAAK,SAAEkiE,GAAav7G,EACtB4Y,EAAwB,GAC9B,IAAK,MAAMo2C,KAAQ3V,EACjB,IAAK,MAAM7wC,KAAQ+yG,EACjB3iG,EAAM/0B,KAAK,CAAEmrE,OAAMxmD,SAGvB,OAAO,IAAIyhB,SAAeqd,IACxBkjE,EAAmB,CACjBrtH,MAAO6J,EAAE,aACT6xB,MAAOA,EAAGm2C,OAAMxmD,UAAW,GAAGwmD,EAAK/xE,MAAMurB,EAAKvrB,KAC9C27B,QACAkQ,cAAe,CACb,CAAEloB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAGosD,UAAWA,EAAK9xE,MAC9C,CAAE0jB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAG4F,UAAWA,EAAKtrB,OAEhD6rC,SAAUA,EAAGimC,OAAMxmD,UACjB6mC,GAAYkC,EAAM,0BAA2B,CAC3Cyd,KAAMA,EAAK/xE,GACXkgI,gBAAiB30G,EAAKvrB,GACtB4/D,aAAc,gBACdugE,UAAW/sD,EAAUpzE,KAEzB+rC,WAAYA,KACVse,GAAS,EAEXj7C,QAASA,KACPyuD,EAAaJ,GAASovE,oBAAqB,CACzC3lF,OAAQ,CAAElnD,GAAIozE,EAAUpzE,GAAGqhB,aAC3B,GAEJ,GACF,EAwBE8wB,aAAW,EACX9B,SAAUA,KACRwtB,EAAaJ,GAASovE,oBAAqB,CAAE3lF,OAAQ,CAAElnD,GAAIozE,GAAWpzE,KAAO,MAKvF,CCzIO,SAASuoH,KACd,MAAM,EAAEx+G,IAAMC,EAAAA,EAAAA,MACR0Q,EAAUstG,KACVvgE,EAAaT,KACb6W,EAAerW,MACf,IAAEw0B,IAAQmiE,EAAAA,GAAAA,MAEVz4D,EAAYsO,GAAmBhY,EAAI0J,WAAa,GAChD8yE,EAAqBzuJ,CAAC,uBAE5B,OACE5B,EAAAA,EAAAA,MAACoc,GAAW,CAAAxhB,SAAA,EACVF,EAAAA,EAAAA,KAACwjB,GAAsB,CAAC3L,QAASA,EAASwE,KAAM88D,KAChDn5E,EAAAA,EAAAA,KAACkhB,GAAU,CAACE,SAAU+3D,EAAI8M,SAAU3oF,MAAO4J,EAAE,YAAYhH,SACtDi5E,EAAI8M,YAEPjmF,EAAAA,EAAAA,KAACkhB,GAAU,CACTE,SAAU+3D,EAAIhe,eAAeie,gBAAgB1uC,OAC7CptC,MAAO4J,EAAE,yBAAyBhH,UAElCF,EAAAA,EAAAA,KAACosE,GAAU,CACT1hC,OAAQyuC,EAAIhe,eAAeie,gBAAgB1uC,OAC3C5iC,GAAI,wBAAwBqxE,EAAIhe,eAAeie,gBAAgBj8E,UAGnE6C,EAAAA,EAAAA,KAACkhB,GAAU,CAACE,SAAU+3D,EAAI+c,aAAc54F,MAAO4J,EAAE,YAAYhH,SAC1Di5E,EAAI+c,gBAEPl2F,EAAAA,EAAAA,KAACkhB,GAAU,CAACE,SAAU+3D,EAAI2hB,gBAAiBx9F,MAAO4J,EAAE,mBAAmBhH,SACpEi5E,EAAI2hB,mBAEP96F,EAAAA,EAAAA,KAACkhB,GAAU,CACTE,SAAU+3D,EAAI0hB,eACdv9F,MAAO4J,EAAE,kBACTia,SAAUja,EAAE,2CAA2ChH,SAEtDi5E,EAAI0hB,kBAEP76F,EAAAA,EAAAA,KAACkhB,GAAU,CACTC,SAAUja,EAAE,wCACZka,SAAU+3D,EAAIhe,eAAek3E,gBAAgBz0C,mBAC7CtgG,MAAO4J,EAAE,kBAAkBhH,UAE3BF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS0c,qBAAsB,CAC5CjzB,OAAQ,CACNlnD,GAAIg8E,EAAIhe,gBAAgBk3E,gBAAgBl1I,MAEzC+C,SAEFi5E,EAAIhe,gBAAgBk3E,gBAAgBj1I,UAGzC4C,EAAAA,EAAAA,KAACkhB,GAAU,CACTE,SAAU+3D,EAAIhe,eAAek3E,gBAAgBz0C,mBAC7CtgG,MAAO4J,EAAE,mBAAmBhH,UAE5BF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS0c,qBAAsB,CAC5CjzB,OAAQ,CACNlnD,GAAIg8E,EAAIhe,gBAAgBk3E,gBAAgBl1I,MAEzC+C,SAEFi5E,EAAIhe,gBAAgBk3E,gBAAgBj1I,UAGzC4C,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,SACTia,SAAUja,EACR,2UACAhH,SAEDi5E,EAAI2I,SAEP9hF,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,WACTia,SAAUja,EACR,wGACAhH,SAEe,IAAhBi5E,EAAI5tE,QAAgBoqJ,EAAqBx8E,EAAI5tE,WAEhDvL,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,aACTia,SAAUja,EAAE,8EAA8EhH,SAEzF2iF,KAEH7iF,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,YACTia,SAAUja,EAAE,kCACZka,SAAU+3D,EAAIuJ,SAASxiF,UAEvBF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACRi5E,EAAIuJ,UAAUl7E,MAAM,MAAMT,KAAK0xE,IAAQz4E,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAAnU,SAAYu4E,GAANA,UAGxDz4E,EAAAA,EAAAA,KAACkhB,GAAU,CACTC,SAAUja,EAAE,mCACZ5J,MAAO4J,EAAE,aACTka,SAAU+3D,EAAIqJ,UAAUtiF,UAExBF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACRi5E,EAAIqJ,WAAWh7E,MAAM,MAAMT,KAAK0xE,IAAQz4E,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAAnU,SAAYu4E,GAANA,UAGzDz4E,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,oBAAqBka,SAAU+3D,EAAI3Z,YAAYt/D,SACjEi5E,EAAI3Z,eAEPx/D,EAAAA,EAAAA,KAACkhB,GAAU,CAACE,SAAU+3D,EAAIhe,gBAAgByU,YAAYhU,SAAUt+D,MAAO4J,EAAE,WAAWhH,UAClFF,EAAAA,EAAAA,KAACqS,GAAY,CACX3X,MAAOy+E,EAAI9d,QACX/oD,OAAQ6mE,EAAIhe,eAAeyU,YAAYhU,SACvCj1D,QAASA,IACPq0D,EAAaJ,GAASiB,YAAa,CACjCxX,OAAQ,CAAElnD,GAAIg8E,EAAIhe,gBAAgByU,YAAYzyE,WAKtD6C,EAAAA,EAAAA,KAACmsE,GAAsB,CACrBzxE,MAAOy+E,EAAIpJ,SACXz9D,OAAQ6mE,EAAIhe,gBAAgB8U,aAAarU,SACzCj1D,QAASA,IACPq0D,EAAaJ,GAASiB,YAAa,CACjCxX,OAAQ,CAAElnD,GAAIg8E,EAAIhe,gBAAgB8U,aAAa9yE,SAIrD6C,EAAAA,EAAAA,KAACo2E,GAAoB,CACnB94E,MAAO4J,CAAC,kBACRia,SAAUja,EACR,oNAEFmvE,qBAAmB,EACnB,UAAQ,oCACR37E,MAAOy+E,EAAI6J,YAAc,OAIjC,CC3IO,SAAS4yE,GAAyB94J,GACvC,MAAM,IAAQqK,EAAAA,EAAAA,OACR,GAAEhK,IAAOkgE,EAAAA,GAAAA,MACT,cAAEwwC,GAAkB/wG,EACpB8nD,EAAaT,MAEZt+C,EAAQ2e,IAAa9oB,EAAAA,EAAAA,WAAkB,IACvCsrB,EAAU6uI,IAAen6J,EAAAA,EAAAA,aACzBo6J,EAAeC,IAAoBr6J,EAAAA,EAAAA,UAA4BmyG,GAEhEmoD,EAAenoD,EAAcrqG,QAAU,EAEvCmmC,GAAqCtlC,EAAAA,EAAAA,UACzC,KAAM,CACJ2oE,OAAQ,CAAC,QAAS,UAClBW,WAAY,CAAC,iBAEf,IAGIsoF,GAAe5xJ,EAAAA,EAAAA,UACnB,IAAMwF,OAAOC,OAAO6/B,GAAU5rB,QAAO,CAACC,EAAK6/D,IAAQ,IAAI7/D,KAAQ6/D,IAAM,KACrE,CAACl0C,IAGGusH,EAAgBA,KACpB1xI,GAAW3e,EAAO,EA0CpB,OACEP,EAAAA,EAAAA,MAACsiB,GAAAA,EAAM,CACLzqB,GAAG,6BACH0I,OAAQA,EACRmhB,SAAUA,EACVlhB,SA5CaA,CAACgiB,EAAqC/d,KACrD,QAAiB,IAANA,EAAmB,OAE9B,MAAMrP,EAAQqP,EAAEyU,WAEhB,GAAI9jB,IAAUssB,EACZ6uI,OAAYl0J,GACZo0J,EAAiBloD,OACZ,CAGL,GAFAgoD,EAAYn7J,IAEPu7J,EAAa1tJ,SAAS7N,GAAQ,OAEnCq7J,EACEloD,EAAc1vG,QACX0zB,GACCA,EAAKspC,gBAAgBge,KAAKzuC,QAC1Bf,EAASjvC,GAAO6N,SAASspB,EAAKspC,gBAAgBge,KAAKzuC,SACnD7Y,EAAKsnD,KAAK36D,aAAerhB,IAGjC,GAwBE4I,aAAeF,GAAW2e,EAAU3e,GACpCS,OAtBYC,IACdvG,EAAAA,EAAAA,KAACwG,EAAAA,EAAU,CACTC,IAAKF,EACLI,QAASuvJ,EACTtvJ,WAAYf,EACZhE,MACE,CACEsU,MAAO,SAEVjW,SAEAgH,EAAE,kCAAmC,CAAE8uJ,mBAYxC5oI,2BAAyB,EAAAltB,SAAA,EAEzBF,EAAAA,EAAAA,KAAC2pB,GAAAA,EAAW,CAACrsB,MAAO4J,CAAC,oBAA2C,UAAQ,kBAAiBhH,UACvFoF,EAAAA,EAAAA,MAACykB,GAAAA,EAAU,CAAA7pB,SAAA,EACTF,EAAAA,EAAAA,KAACupB,GAAAA,EAAY,CACX7uB,MAAM,SAENwI,MAAMlD,EAAAA,EAAAA,KAACk3B,GAAAA,GAAqB,IAC5Btb,YAAa1U,CAAC,wBAAwBhH,SAErCgH,CAAC,UAJE,WAMNlH,EAAAA,EAAAA,KAACupB,GAAAA,EAAY,CACX7uB,MAAO,aACPwI,MAAMlD,EAAAA,EAAAA,KAAC4qC,GAAAA,GAAe,IAEtBhvB,YAAa1U,CAAC,4BAA4BhH,SAEzCgH,CAAC,cAHE,kBAboC,oBAoB9ClH,EAAAA,EAAAA,KAAC2pB,GAAAA,EAAW,CAACrsB,MAAO4J,CAAC,iBAAuC,UAAQ,iBAAgBhH,UAClFF,EAAAA,EAAAA,KAAC+pB,GAAAA,EAAU,CAAA7pB,SACR41J,EAAc/uJ,KAAK8qB,IAClB7xB,EAAAA,EAAAA,KAACupB,GAAAA,EAAY,CAEXzhB,GAAI88C,EAAWgW,GAAS4qC,UAAW,CACjCnhD,OAAQ,CACN89B,SAAUtwD,EAAKspC,eAAege,KAAK11E,KAC/B4iG,GAASx0E,EAAKspC,eAAege,KAAK11E,MAClC,GACJtG,GAAI00B,EAAKspC,eAAege,KAAKh8E,MAGjC8K,UAAWJ,EAAAA,GACXnN,MAAOm3B,EAAKspC,gBAAgBge,KAAK/7E,KAAK8C,SAErCuuE,GAAa58C,EAAK4pD,YAAc5pD,EAAKspC,gBAAgBge,KAAK/7E,KAAOy0B,EAAK4pD,YAZlE5pD,EAAK10B,SAJyB,oBAuBjD,CChIO,SAASg5J,KACd,MAAM,EAAEjvJ,IAAMC,EAAAA,EAAAA,OACR,GAAEhK,IAAOkgE,EAAAA,GAAAA,KACTrC,EAAerW,KACfC,EAAaT,KACbE,GAASgZ,EAAAA,GAAAA,MACT,IAAE8b,GAAQi9E,GAAU/xG,EAAOlnD,GAAIknD,EAAO89B,UAEtCk0E,EAAUl9E,GAAKhe,gBAAgBwqD,qBAAqBxoH,IAClD+iB,KAAM2tF,GAAkB53C,GAC9BogG,EAAU5kG,EAAM,kBAAkB4kG,EAAQ73I,6BAA+B,IAGrE83I,EACJzoD,GAAe37C,QAAQ/zD,QACrB,EAAGg7E,MAAKhe,oBACNge,GAAOA,EAAI36D,aAAerhB,GAAoC,sBAA9Bg+D,GAAgBge,KAAK11E,QACpD,GAEDH,E5JdD,SAA6B4lC,GAClC,MAAM,IAAQ/hC,EAAAA,EAAAA,MACRk/H,EAAavB,GAAc57F,GAC3Bk9F,EAAahB,GAAcl8F,GAC3BqtH,E6JlBoB7nJ,UACxB,MAAM01C,EAAM,GAAG+0B,EAAI5B,QAAQi/E,6BACrB3yJ,QAAekrD,GAAc,CAAE3K,IAAKA,EAAK4K,OAAQ,QACvD,IAAKnrD,EAAO6rD,GACV,YAAY9B,GAAmB/pD,GAEjC,MAAM5B,QAAgB4B,EAAO4K,OAC7BsoC,GAAiBoiC,EAAI/7E,KAAM6E,EAAQ,E7JY/BqkI,EAAkBR,KACxB,OAAOzhI,EAAAA,EAAAA,UAAmC,IASG,IACtCiiI,EACH,CACE7iI,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/B0C,QAASuB,EAAAA,GAAcyD,UACvBoC,UAAU,EACVvH,KAAM0mE,GAAAA,GACNtsE,MAAO4J,EAAE,cACTnG,WAAao4E,GAAoB8sD,GAAgB9sD,EAAKjyE,GACtDP,QAAUwyE,GAAoBktD,EAAW,CAACltD,KAE5C,CAAE11E,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAM62C,GAAAA,GACNz8C,MAAO4J,EAAE,mBACTP,QAAUwyE,GAAoBo9E,EAAkBp9E,GAChD1wE,OAAQ,6BACR/H,SAAWy4E,IAAqBA,EAAI5B,QAAQi/E,QAE9C,CAAE/yJ,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,cACTnG,WAAao4E,GApCQA,IAClBA,EAAIhe,eAAe6iC,kBAAkB3yC,OAEjC04D,GAAa5qC,EAAIzuC,QACjBxjC,EAAE,yDACJ,GAHEA,EAAE,4DAkCwBq/H,CAAgBptD,GACjDxyE,QAAUwyE,IACHA,GACLitD,EAAW,CAACjtD,GAAK,EAEnB1wE,OAAQ,2BACRnB,UAAU,KAIb,CAAC++H,EAAYD,EAAYE,EAAiBiwB,EAAmBrvJ,GAClE,C4JxCkBuvJ,EAAoB,IAAMz7F,EAAaJ,GAAS0oD,QAChE,OACEtjH,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO87E,GAAK/7E,KACZgjD,YAAa,CAAC,CAAE9iD,MAAO4J,EAAE,QAASY,GAAI88C,EAAWgW,GAAS0oD,OAAS,CAAEhmH,MAAO67E,GAAK/7E,OACjFujD,eACEr7C,EAAAA,EAAAA,MAAC6E,EAAAA,EAAI,CAAAjK,SAAA,CACFo2J,GAAe9yJ,OAAS,IACvBxD,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAAtK,UACPF,EAAAA,EAAAA,KAAC41J,GAAwB,CAAC/nD,cAAeyoD,OAG7Ct2J,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAAtK,UACPF,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAASA,EACTF,SAAU6F,GAAAA,GAAiBC,MAC3B3I,aAAc44E,UAO5B,CE7CO,SAASu9E,KACd,MAAM,EAAExvJ,IAAMC,EAAAA,EAAAA,MACRk9C,GAASgZ,EAAAA,GAAAA,MACT,IAAE8b,EAAG,UAAE/vD,EAAS,MAAEpc,EAAK,WAAE2pJ,GAAeP,GAAU/xG,EAAOlnD,GAAIknD,EAAO89B,UAE1E,OAAIn1E,GAAchN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAey5F,KACpDx9E,GAAO/vD,GAAkBppB,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,KAGzD7kD,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACm2J,GAAS,KACVn2J,EAAAA,EAAAA,KAAC09D,GAAc,CACbe,QAAS,CACPnhE,MAAO4J,EAAE,gBACTiuB,KAAMylC,GAAS0oD,KACf5kD,oBAAqB,QAEvBvU,KAAM,CACJ,CAAE7sD,MAAO4J,EAAE,UAAWiuB,KAAMylC,GAAS4qC,WACrC,CAAEloG,MAAO4J,EAAE,WAAYiuB,KAAMylC,GAAS8qD,aAExCrhE,OAAQA,EACR+a,gBAAiB,CAAE+Z,WAI3B,CAEO,SAASi9E,GAAUj5J,EAAasG,GACrC,MAQMi6C,EAAOj6C,EAR+B,CAC1CmtE,QAAS,kBACTL,UAAW,oBACX0V,SAAU,OACV2wE,QAAS,kBACTC,WAAY,cACZC,SAAU,iBAEiBrzJ,GAAQ,QAEnCyc,KAAMi5D,EACN5jB,QAASohG,EAAU,UACnBvtI,EAAS,MACTpc,GACEipD,GAAY94D,EAAKs0D,EAAM,IAAI/T,KAAQvgD,KAAQ,IAC/C,MAAO,CAAEg8E,MAAKw9E,aAAYvtI,YAAWpc,QACvC,CC3CA,MAAM+pJ,GAAar0J,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,sIASvBs0J,GAAat0J,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,yCACN5F,GAAUA,EAAMR,OAAS,YAChCQ,GAA6BA,EAAMwf,OAAS,IAE5D06I,GAAW1rG,YAAc,aAEzB,MAAM2rG,GAAiBv0J,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,2EAS3BioE,GAASjoE,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,4FAMnBw0J,GAAYx0J,EAAAA,GAAO0P,KAAIxP,WAAA,CAAAC,YAAA,oBAAXH,CAAW,wFAIN5F,GAAUA,EAAMR,QAgBhC,SAAS66J,GAAuBr6J,GACrC,MAAM,IAAQqK,EAAAA,EAAAA,MAERiwJ,EAAqC,CACzCzpF,WAAY,CACVrxE,MAAOC,EACPe,MAAO4J,CAAC,WAEV0lE,SAAU,CACRtwE,MAAOG,EACPa,MAAO4J,CAAC,YAEVimE,IAAK,CACH7wE,MAAOI,EACPY,MAAO4J,CAAC,OAEVkmE,QAAS,CACP9wE,MAAOI,EACPY,MAAO4J,CAAC,WAEV+mE,QAAS,CACP3xE,MAAOI,EACPY,MAAO4J,CAAC,WAEVomE,QAAS,CACPhxE,MAAOI,EACPY,MAAO4J,CAAC,WAEV8F,MAAO,CACL1Q,MAAOE,EACPc,MAAO4J,CAAC,SAEV8lE,OAAQ,CACN1wE,MAAOE,EACPc,MAAO4J,CAAC,WAINmwJ,EAA+B,CAAC,EAatC,OAXAv6J,EAAMs+E,MAAMr0E,KAAK8qB,IACf,IAAKA,GAAMspC,gBAAgBge,KAAKzuC,OAC9B,OAGF,MAAMo/B,EAAaj4C,EAAKspC,eAAege,IAAIzuC,OAErC4sH,EAAUD,EAASvtF,GACzButF,EAASvtF,GAAcA,KAAcutF,GAAYC,EAAUA,EAAU,EAAI,CAAC,KAGrEt3J,EAAAA,EAAAA,KAACu3J,GAAS,CAAC90C,OAAQ40C,EAAU3sH,OAAQ0sH,GAC9C,CAEO,SAASI,GAAc16J,GAC5B,MAAM,IAAQqK,EAAAA,EAAAA,MAERswJ,EAA6B,CACjC/nG,GAAI,CACFpzD,MAAOC,EACPe,MAAO4J,CAAC,WAEVqmE,QAAS,CACPjxE,MAAOI,EACPY,MAAO4J,CAAC,WAEViyB,QAAS,CACP78B,MAAOG,EACPa,MAAO4J,CAAC,WAEVwwJ,SAAU,CACRp7J,MAAOE,EACPc,MAAO4J,CAAC,UAEVywJ,KAAM,CACJr7J,MAAOM,EACPU,MAAO4J,CAAC,gBAIZ,OAAOlH,EAAAA,EAAAA,KAACu3J,GAAS,CAAC90C,OAAQ3lH,EAAM2lH,OAAQ/3E,OAAQ+sH,GAClD,CAOA,SAASF,GAA8Cz6J,GACrD,MAAM,IAAQqK,EAAAA,EAAAA,OACR,OAAEs7G,EAAM,OAAE/3E,GAAW5tC,EACrB86J,EAAwC,IAA/B/tJ,OAAO4f,KAAKg5F,GAAQj/G,OAC7Bq0J,EAAchuJ,OAAOC,OAAO24G,GAAQ1kG,QACxC,CAAC+5I,EAAax7I,IAAkBw7I,EAAMx7I,GACtC,GAGIy7I,EAAcluJ,OAAO4f,KAAKihB,GAAQ3jC,KAAKqF,IAC3C,MAAMkQ,EAASmmG,EAAOr2G,IAA8B,EAC9C4rJ,EACHttH,EAAOt+B,IAAoCs+B,EAAkC,KAChF,OACE1qC,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CAENC,SACEqD,EAAAA,EAAAA,MAAC2xJ,GAAc,CAAA/2J,SAAA,CACZ83J,EAAU16J,OACX0C,EAAAA,EAAAA,KAACo0G,GAAAA,EAAK,CAACC,QAAM,EAAAn0G,SAAEoc,OAElBpc,UAEDF,EAAAA,EAAAA,KAACg3J,GAAU,CAAW16J,MAAO07J,EAAU17J,MAAOggB,MAAOA,GAApClQ,IARZA,EASG,IAId,OAAIwrJ,GAEA53J,EAAAA,EAAAA,KAAC+2J,GAAU,CAAC,UAAQ,aAAY72J,UAC9BF,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CAACC,QAASiF,CAAC,uDAAuDhH,UACxEF,EAAAA,EAAAA,KAACg3J,GAAU,CAAC16I,MAAO,SAOzBhX,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAC+2J,GAAU,CAAC,UAAQ,aAAY72J,SAAE63J,KAClC/3J,EAAAA,EAAAA,KAAC2qE,GAAM,CAAAzqE,SACJ2J,OAAO4f,KAAKg5F,GAAQ17G,KAAKqF,IACxBpM,EAAAA,EAAAA,KAACi4J,GAAU,CAET37J,MACGouC,EAAOt+B,IAAiC9P,OACxCouC,EAAkC,KAAEpuC,MAEvCgB,MACGotC,EAAOt+B,IAAiC9O,OACxCotC,EAAkC,KAAEptC,MAEvC46J,SAAYz1C,EAAOr2G,IAA8B,GAAKyrJ,EAAe,KAThEzrJ,SAejB,CAEA,SAAS6rJ,GAAWn7J,GAClB,MAAM,MAAER,EAAK,MAAEgB,EAAK,QAAE46J,GAAYp7J,EAElC,OACEwI,EAAAA,EAAAA,MAAA,OAAApF,SAAA,EACEF,EAAAA,EAAAA,KAACk3J,GAAS,CAAC56J,MAAOA,IACjBgB,EAAM,IAAEqQ,KAAK4Q,MAAM25I,GAAS,MAGnC,CC1NO,SAASC,GAAoBr7J,GAQlC,OAJAf,EAAAA,EAAAA,YAAU,KACRe,EAAMs7J,oBAAoBt7J,EAAMu7J,QAAQ,GACvC,CAACv7J,KAGFwI,EAAAA,EAAAA,MAAA,OAAKoB,UAAU,kBAAiBxG,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,OAAK0G,UAAU,mBACf1G,EAAAA,EAAAA,KAAA,OAAK0G,UAAU,gBAAexG,UAC5BF,EAAAA,EAAAA,KAACm2B,GAAAA,EAAQ,CAAAj2B,SAAE,WAAWpD,EAAMu7J,gBAIpC,C,2BChBO,SAASC,GAAKx7J,GACnB,MAAMojB,EAAOq4I,KAAAA,WAAiBz7J,EAAMyiE,MAAOi5F,IAC3C,OACEx4J,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SACGggB,EAAKnZ,KAAI,CAACmR,EAAOlR,KAChBhH,EAAAA,EAAAA,KAAA,QAAkB0G,UAAWwR,EAAMugJ,GAAK,GAAGvgJ,EAAMugJ,aAAU92J,EAAUzB,SAClEgY,EAAMjW,SADE+E,MAMnB,CAEA,MAAMwxJ,GAAc,CAAE3jH,MAAM,EAAM6jH,cAAc,EAAMC,aAAa,GCf7Dt3J,GAAUqB,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,qBAAVH,CAAU,mJAWnB,SAASk2J,KACd,OAAO54J,EAAAA,EAAAA,KAACqB,GAAO,CAAAnB,SAAC,OAClB,CCFA,MAAM24J,GAAmBn2J,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,2SAe7Bo2J,GAAep2J,EAAAA,GAAO+V,OAAM7V,WAAA,CAAAC,YAAA,oBAAbH,CAAa,qEAM5Bq2J,GAAar2J,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,8BAIvBs2J,GAAet2J,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,4CAKxB,SAASu2J,GAAan8J,GAS3B,MAAM,MAAEkK,EAAK,IAAEkyJ,EAAG,UAAEv9I,EAAS,aAAED,EAAY,kBAAEy9I,GAAsBr8J,EAC7D2J,GAAMuP,EAAAA,EAAAA,QAA4B,OACxCU,EAAAA,GAAAA,GAAkBjQ,GAAK,IAAM3J,EAAMs8J,UAAUpyJ,EAAOP,EAAI2P,SAASK,cAAgB,KACjF,MAAMmD,GAA4C,IAA9B+B,EAAUu9I,EAAIG,MAAQ,IACpCC,GAAkBJ,EAAI39I,aAAgC,KAAjB29I,EAAIK,UAAmBL,EAAIK,WAAaL,EAAIG,KAEvF,OACE/zJ,EAAAA,EAAAA,MAAA,OACEzD,MAAO,CAAEsrB,OAAQmsI,EAAiB,UAAY,QAC9C7yJ,IAAKA,EACLC,UAAU,kBACVgiB,KAAK,SACL6G,SAAU,EACV5oB,QAASA,KACP7J,EAAM6J,QAAQuyJ,EAAI,EAClBh5J,SAAA,EAEFoF,EAAAA,EAAAA,MAACuzJ,GAAgB,CAAA34J,SAAA,CACdi5J,GAAqBD,EAAI39I,cACxBvb,EAAAA,EAAAA,KAAC84J,GAAY,CAACnyJ,QAASA,IAAM+U,EAAaw9I,EAAIG,KAAMH,EAAIb,SAAUz+I,GAAa1Z,UAC7EF,EAAAA,EAAAA,KAACwb,GAAAA,GAAc,CACb3Z,MAAO,CACL4Z,UAAW7B,EAAc,eAAiB,gBAC1CS,WAAY,kBAMpB/U,EAAAA,EAAAA,MAACyzJ,GAAU,CAAA74J,SAAA,CACRg5J,EAAItzF,KACJszF,EAAI39I,aAAe3B,IAAe5Z,EAAAA,EAAAA,KAAC44J,GAAgB,WAGxDtzJ,EAAAA,EAAAA,MAAC0zJ,GAAY,CAAA94J,SAAA,EACXF,EAAAA,EAAAA,KAACs4J,GAAI,CAAC/4F,MAAO25F,EAAI1C,SAChB0C,EAAIM,cAAgBN,EAAI39I,cACvBjW,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,CAAE,MACOF,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAACoG,WAAS,EAAAva,SAAE,IAAI0R,KAAKsnJ,EAAI79F,SAAW,IAAInpD,+BAMjE,CAeO,SAASunJ,GAAeC,GAC7B,MAAMC,EAAYD,EAASE,WAAsCC,WAAa,GACxEN,EAAYG,EAASE,WAAsCE,WAAa,GAC9E,IAAKJ,EAASrB,QAAS,MAAO,GAC9B,IAAKqB,EAASlD,OAAQ,MAAO,GAE7B,MAAMuD,EAAQL,EAASlD,OAAOhvJ,MAAM,QACpC,IAAI+T,GAAc,EAElB,OAAQm+I,EAAS5xI,OACf,IAAK,yBACL,IAAK,yBACL,IAAK,oBACHvM,EAA2B,KAAbo+I,GAAgC,KAAbJ,EAGrC,IAAIC,GAAe,EACfQ,GAAkB,EACtB,OAAOD,EAAMhzJ,KAAI,CAACyvJ,EAAQyD,KACpBP,EAASQ,cACP1D,GACFgD,GAAgBQ,EAChBA,GAAkB,GAElBR,GAAe,GAGiB,CAClC5zF,KAAM8zF,EAASS,WAAcF,EAC7B5B,QAASqB,EAASrB,QAClB7B,SACA6C,KAAMK,EAASL,MAAQ,GACvBM,SAAUA,GAAY,GACtBJ,SAAUA,GAAY,GACtBU,YACA1+I,YAAaA,GAAei+I,EAC5BA,eACAn+F,QAASq+F,EAASr+F,WAIxB,C,wCC5IA,MAAM++F,GAAmB13J,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,qBAAVH,CAAU,iGAQ7B23J,GAAgB33J,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,qBAAVH,CAAU,4CAI1B43J,GAAwB53J,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,qBAAVH,CAAU,2EAmBjC,SAAS63J,GAAaz9J,GAC3B,MAAM,cACJ09J,EAAa,aACbC,EAAY,aACZC,EAAY,iBACZC,EAAgB,wBAChBC,EAAuB,eACvBC,EAAc,WACdC,EAAU,cACVC,GACEj+J,GACE,EAAEoK,IAAMC,EAAAA,EAAAA,MAEd,OACE7B,EAAAA,EAAAA,MAAC80J,GAAgB,CAAAl6J,SAAA,EACfF,EAAAA,EAAAA,KAACs6J,GAAqB,CAAAp6J,UAClB46J,GAAcC,IACd/6J,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACL,aAAYs1J,EAAiB3zJ,CAAC,oBAAsBA,CAAC,0BACrD7D,QAAQ,QACRI,KAAK,SACLkD,QAASi0J,EAAwB16J,SAEhC26J,GAAiB76J,EAAAA,EAAAA,KAACwb,GAAAA,GAAc,KAAMxb,EAAAA,EAAAA,KAAC82C,GAAAA,GAAa,SAI3DxxC,EAAAA,EAAAA,MAAC+0J,GAAa,CAAAn6J,SAAA,EACZF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLkD,OAAO,oCACP,aAAYvB,CAAC,kBACbP,QAASg0J,EACTt3J,QAAQ,QAAOnD,UAEfF,EAAAA,EAAAA,KAACg7J,GAAAA,GAAW,OAEdh7J,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLkD,OAAO,gCACP,aAAYvB,CAAC,cACbP,QAAS+zJ,EACTr3J,QAAQ,QAAOnD,UAEfF,EAAAA,EAAAA,KAAC82C,GAAAA,GAAa,OAEhB92C,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLkD,OAAO,iCACP,aAAYvB,CAAC,eACbP,QAAS6zJ,EACTn3J,QAAQ,QAAOnD,UAEfF,EAAAA,EAAAA,KAACi7J,GAAAA,GAAiB,OAEpBj7J,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLkD,OAAO,gCACP,aAAYvB,CAAC,cACbP,QAAS8zJ,EACTp3J,QAAQ,QAAOnD,UAEfF,EAAAA,EAAAA,KAACk7J,GAAAA,GAAmB,WAK9B,CCzFA,MAAMC,GAAuB,GACvBC,GAA4B,CAAC,MAAO,UAAW,UAAW,WCN1DA,GAA4B,CAAC,MAAO,UAAW,UAAW,WAEzD,SAASr3C,GAAai0C,GAC3B,OAAQA,GAAaoD,GAAgB7yJ,SAASyvJ,EAChD,CCNA,MAAMqD,GAA0B3gK,IAC9B,IAAI+7E,EAWJ,OANEA,EAHG/7E,EAAMk/J,YAAYlrE,IAEqB,iBAA1Bh0F,EAAMk/J,YAAYlrE,IAChBh0F,EAAMk/J,YAAYlrE,IAC3Bz1E,MAAMC,QAAQxe,EAAMk/J,YAAYlrE,KACvBh0F,EAAMk/J,YAAYlrE,IAAIjnF,KAAK,KAE3B/M,EAAMk/J,YAAYlrE,IANlB,GAQbjY,CAAe,EAGlB6kF,GAAkBC,IACtB,MAAMC,EAAaD,GAAW3B,YAAY6B,YACpC/sE,EAAM6sE,GAAW3B,YAAYlrE,IAEnC,IAAIgtE,EAAS,GAQb,MAPmB,UAAfF,GAA0B9sE,GAAK7qF,QAAQ2yJ,OACzCkF,EAAShtE,EAAI7qF,OAAO2yJ,OACI,QAAfgF,GAAwBviJ,MAAMC,QAAQw1E,GAAKx8B,SACpDwpG,EAAShtE,EAAIx8B,QAAQzqD,KAAK,MACjBinF,GAAK8nE,SACdkF,EAASziJ,MAAMC,QAAQw1E,EAAI8nE,QAAU9nE,EAAI8nE,OAAO/uJ,KAAK,KAAQinF,EAAI8nE,QAE5DkF,CAAM,EAGR,SAASC,GAAe7+J,GAK7B,MAAM,QAAEyP,EAAO,UAAEgvJ,EAAS,OAAE11J,GAAS,GAAU/I,GACzC,EAAEoK,IAAMC,EAAAA,EAAAA,OACPy0J,EAAcC,IAAmBngK,EAAAA,EAAAA,UAAiB,GAMnD44F,EAAU+mE,GAAuBE,GACjCO,EAA6BP,GAAW3B,YAAYlrE,KAAKqtE,OACzDL,EAAiBJ,GAAeC,GAEtC,OACEv7J,EAAAA,EAAAA,KAAC++B,GAAAA,EAAK,CACJl5B,OAAQA,EACR0G,QAASA,EACTlP,MAAO6J,CAAC,eACR,aAAYA,CAAC,qBACbiP,MAAM,MACN1N,OAAO,mBAAkBvI,UAEzBoF,EAAAA,EAAAA,MAACw5D,GAAAA,EAAI,CACH,aAAY53D,CAAC,OACb83D,UAAW48F,EACX91J,SAAUA,CAAC29C,EAAIv8C,KAnBnB20J,EAmBwC30J,EAAa,EACjDuB,OAAO,kBAAiBvI,SAAA,EAExBF,EAAAA,EAAAA,KAAC2+D,GAAAA,EAAG,CACF,aAAYz3D,CAAC,cACbuB,OAAO,cACPm2D,SAAU,EACVvhE,OAAO2C,EAAAA,EAAAA,KAACk/D,GAAAA,EAAY,CAAAh/D,SAAEgH,CAAC,YAA0BhH,UAEjDoF,EAAAA,EAAAA,MAACoc,GAAW,CAAAxhB,SAAA,EACVF,EAAAA,EAAAA,KAACkhB,GAAU,CAACE,SAAUm6I,EAAU3B,YAAY3hG,KAAM36D,MAAO4J,EAAE,QAAQhH,SAChEq7J,GAAW3B,YAAY3hG,QAE1Bj4D,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,UAAUhH,UAC7BF,EAAAA,EAAAA,KAACosE,GAAU,CAAC1hC,OAAQsxH,GAAmBT,QAEzCv7J,EAAAA,EAAAA,KAACkhB,GAAU,CAACE,SAAUm6I,EAAUU,KAAM3+J,MAAO4J,EAAE,QAAQhH,SACpDq7J,GAAWU,QAEdj8J,EAAAA,EAAAA,KAACkhB,GAAU,CAACE,SAAUm6I,EAAUW,KAAM5+J,MAAO4J,EAAE,QAAQhH,SACpDq7J,GAAWW,QAEdl8J,EAAAA,EAAAA,KAACkhB,GAAU,CAACE,SAAUm6I,EAAU3B,YAAY6B,YAAan+J,MAAO4J,EAAE,UAAUhH,SACzEq7J,GAAW3B,YAAY6B,oBAI9Bz7J,EAAAA,EAAAA,KAAC2+D,GAAAA,EAAG,CACFC,SAAU,EACVvhE,OAAO2C,EAAAA,EAAAA,KAACk/D,GAAAA,EAAY,CAAAh/D,SAAEgH,CAAC,SACvB,aAAYA,CAAC,WACbuB,OAAO,WAAUvI,SAEC,IAAjB07J,GAAsBtnE,GACrBt0F,EAAAA,EAAAA,KAACo2E,GAAoB,CAACC,qBAAmB,EAAC37E,MAAO0V,KAAKa,UAAUqjF,EAAS,KAAM,MAE/Et0F,EAAAA,EAAAA,KAAC63B,GAAgB,CAACjc,YAAa1U,EAAE,oBAAqB7J,MAAO6J,CAAC,wBAGjEw0J,GAAQl4J,QACPxD,EAAAA,EAAAA,KAAC2+D,GAAAA,EAAG,CACFC,SAAU,EACVvhE,OAAO2C,EAAAA,EAAAA,KAACk/D,GAAAA,EAAY,CAAAh/D,SAAEgH,CAAC,WACvB,aAAYA,CAAC,aACbuB,OAAO,mBAAkBvI,UAEzBF,EAAAA,EAAAA,KAACo2E,GAAoB,CAAC17E,MAAOghK,MAE7B,KACHI,GAAQt4J,QACPxD,EAAAA,EAAAA,KAAC2+D,GAAAA,EAAG,CACFC,SAAU,EACVvhE,OAAO2C,EAAAA,EAAAA,KAACk/D,GAAAA,EAAY,CAAAh/D,SAAEgH,CAAC,mBACvB,aAAYA,CAAC,qBACbuB,OAAO,qBAAoBvI,UAE3BF,EAAAA,EAAAA,KAACo2E,GAAoB,CAAC17E,MAAOohK,MAE7B,SAIZ,CAEA,SAASE,GAAmBl0I,GAC1B,IAAI4iB,EAAS,GAsBb,MArBoB,0BAAhB5iB,EAAMA,QACR4iB,EAAS,eAGP5iB,EAAMklD,SACRtiC,EAAS,UAGO,iBAAhB5iB,EAAMA,OACU,uBAAhBA,EAAMA,OACU,sBAAhBA,EAAMA,QAEN4iB,EAAS,MAGP5iB,EAAMqR,UACRuR,EAAS,WAES,sBAAhB5iB,EAAMA,QACR4iB,EAAS,WAEJA,CACT,CCvIA,MAAMyxH,GAAkBz5J,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,wLAgB3B,SAAS05J,GAAgBt/J,GAC9B,MAAM,IACJq8E,EAAG,UACHyyB,EAAS,eACTx7E,EAAc,YACdC,EAAW,oBACXgsI,EAAmB,uBACnBC,GACEx/J,GAEGy/J,EAAeC,IAAoB9gK,EAAAA,EAAAA,UAA+B,MACnE+gK,EAAa5yJ,OAAO4f,KAAK4G,GAAa7sB,OAAS,GAE/C,gBAAEk5J,EAAe,WAAE5B,GCxCpB,SAAqC3hF,EAAUwjF,GACpD,IAAI7B,EAAa6B,GAA8B,QAAbxjF,EAAI11E,KAEtC,MAAMoqD,EAAWoI,GACfxE,EAAM,SAAS0nB,EAAIh8E,GAAGqhB,4CAElB,KAAE0B,EAAI,MAAElT,GAAU6gD,EAKxB,OAHI7gD,IACF8tJ,GAAa,GAER,CACL4B,gBAAiB5B,IAAe56I,OAAOve,EAAYue,EACnD46I,WAAYA,IAAe56I,EAE/B,CDyB0C08I,CACtCzjF,EACA4qC,GAAa5qC,EAAIzuC,SAAW+xH,IAExB,cAAEI,EAAa,kBAAEC,EAAiB,oBAAE1E,GHnCrC,SACLj/E,EACAyyB,EACAx7E,EACAC,EACA0sI,GAEA,MAAMC,GAAahnJ,EAAAA,EAAAA,QAAO,CAAEinJ,UAAU,IAChCC,GAAgBlnJ,EAAAA,EAAAA,QAAO,CAAC,GACxBmnJ,GAAennJ,EAAAA,EAAAA,aAAOrU,IACrBk7J,EAAeO,IAAoB1hK,EAAAA,EAAAA,UAAS,IAC5C2hK,EAAWC,IAAgB5hK,EAAAA,EAAAA,UAAmC,CAAC,GAEhEohK,GAAoBhhK,EAAAA,EAAAA,cACvBu8J,GACQgF,EAAUhF,IAEnB,CAACgF,IAGGZ,EAAa5yJ,OAAO4f,KAAK4G,GAAa7sB,OAAS,EAC/CugH,GAAgB5qC,EAAIzuC,QAAU0wH,GAAgB7yJ,SAAS4wE,EAAIzuC,QAE3D6yH,GAAczhK,EAAAA,EAAAA,cACjB0hK,IACC,MAAMC,EAA0B,QAAbtkF,EAAI11E,KAAiB,aAAe,SACvDu5J,EAAW5mJ,QAAQ6mJ,UAAW,EAEzB5tG,GACHoC,EAAM,IAAI0nB,EAAI11E,SAAS01E,EAAIh8E,GAAGqhB,cAAci/I,KAAc37D,OAAO,IAAI07D,EAAQ/1J,KAAK,SAEjFikB,MAAM88D,IACAu7B,GACHq5C,EAAiB50E,EAAclsE,OAEjCghJ,GAAcD,IACZA,EAAY,IAAKA,GACjB,IAAI3vJ,EAAI7D,OAAO4f,KAAK4zI,GAAW75J,OAAS,EACxC,IAAK,MAAMk2J,KAAYlxE,EAAct2B,QAC/BuqG,GACFY,EAAU3vJ,GAAKgsJ,EACfhsJ,KAEA2vJ,EAAU3D,EAASrB,SAAWqB,EAGlC,OAAO2D,CAAS,GAChB,IAEHruJ,QACAkd,SAAQ,KACP8wI,EAAW5mJ,QAAQ6mJ,UAAW,CAAK,GACnC,GAEN,CAAC9jF,EAAIh8E,GAAIg8E,EAAI11E,KAAMsgH,EAAc04C,IAG7BrE,GAAsBt8J,EAAAA,EAAAA,cACzBu8J,IACC,MAAMqB,EAAW2D,EAAUhF,EAAU,GACrC,GAAIqB,GAAYsD,EAAW5mJ,QAAQ6mJ,SACjC,OAAOvD,EAET,GAAI31C,EAeF,OAdAm5C,EAAc9mJ,QAAQiiJ,EAAU,IAAK,EAChC8E,EAAa/mJ,UAChB+mJ,EAAa/mJ,QAAU5K,YAAW,KAChC,MAAMkyJ,EAAgB7zJ,OAAO4f,KAAKyzI,EAAc9mJ,SAASjY,QAAQk6J,IACvDgF,EAAU7iK,OAAO69J,MAE3B,GAAIqF,EAAcl6J,OAAS,EAAG,CAC5B,MAAMg6J,EAAU,CAAC,mBAAoB,eAAeE,EAAcj2J,KAAK,QACvE81J,EAAYC,EACd,CACAN,EAAc9mJ,QAAU,CAAC,EACzB+mJ,EAAa/mJ,aAAUzU,CAAS,GAC/B,OAEE+3J,EAGT,MAAMvkI,EAAOxnB,KAAKC,OAAOyqJ,EAAU,GGzCrC,IHyCsD,EAC9C95F,EAmEZ,SAA+BnuC,EAAkCC,GAC/D,IAAKA,EACH,MAAO,GAET,MAAMstI,EAAQ,GACd,IAAK,MAAMvxJ,KAAOikB,EAAa,CAC7B,MAAMm8B,EAAgBp8B,GAAgB5rB,MAAMrG,GAAWA,EAAOiO,MAAQA,IACtE,GAAIogD,EAAe,CACjB,MAAM1iD,EAASumB,EAAYjkB,GACvBtC,GAAUA,EAAOtG,OAAS,IACxBsG,EAAOtG,OAAS,EAClBm6J,EAAM55J,KAAK+F,EAAO/C,KAAKrM,GAAU,OAAO8xD,EAAclI,SAAS5pD,MAAS+M,KAAK,MAE7Ek2J,EAAM55J,KAAK,GAAGyoD,EAAclI,SAASx6C,EAAOrC,KAAK,QAGvD,CACF,CACA,OAAOk2J,EAAMl2J,KAAK,IACpB,CAtF2Bm2J,CAAsBxtI,EAAgBC,GACrDmtI,EAAU,CAAC,mBAAoB,QAAQroI,IAAQ,gBAKrD,OAJIopC,GACFi/F,EAAQz5J,KAAKw6D,GAEfg/F,EAAYC,GACL9D,CAAQ,GAEjB,CAAC2D,EGlDD,GHkDsBhtI,EAAaD,EAAgB2zF,EAAcw5C,IAG7DM,GAAgB7nJ,EAAAA,EAAAA,QAAO,IACvB8nJ,GAAe9nJ,EAAAA,EAAAA,aAAOrU,GACtBo8J,GAAmBjiK,EAAAA,EAAAA,cAAY,KACnC,GAAI2gK,EACF,OAEF,MAAMuB,EAAaH,EAAcznJ,QAAQ2H,QACvC,CAACpK,EAAKmU,IAAUna,KAAKgG,IAAIA,EAAKmU,EAAMuwI,UACpCwE,GAEFS,GAAcD,IACZQ,EAAcznJ,QAAQgjB,SAAS/rB,IAC7BgwJ,EAAUhwJ,EAAQgrJ,SAAWhrJ,CAAO,IAEtCwwJ,EAAcznJ,QAAU,GACjBinJ,KAETD,EAAiBY,EAAW,GAC3B,CAACvB,EAAYI,IAEVoB,EAAa,GAAG9kF,EAAI11E,cACpBqoG,GAAyBhwG,EAAAA,EAAAA,cAC5BuR,IACC,GAAIA,GAAS4tD,aAAegjG,EAAY,CACtC,MAAMvE,EAAWrsJ,EACjBwwJ,EAAcznJ,QAAQrS,KAAK21J,GAC3BvmJ,aAAa2qJ,EAAa1nJ,SACtBynJ,EAAcznJ,QAAQ5S,QAAU23J,GAClC4C,IAEAD,EAAa1nJ,QAAU5K,WAAWuyJ,EAAkB,IAExD,CAC4B,SAAxB1wJ,GAAS4tD,YAAyB5tD,GAAS0+F,iBAAmB5yB,EAAIh8E,IAAMkQ,GAASq9B,QACnFkhE,GACF,GAEF,CAACmyD,EAAkBE,EAAYryD,EAAWzyB,EAAIh8E,KAgBhD,OAdAk7D,GACE,CACE3nB,QAAS,CAAC,mBACVgqB,KAAM,CAAC,UAAW,kBAClB,CAACujG,GAAa,CAAC9kF,EAAIh8E,KAErB2uG,IAGF/vG,EAAAA,EAAAA,YAAU,KACRqhK,EAAiB,GACjBE,EAAa,CAAC,EAAE,GACf,CAACjtI,IAEG,CAAEwsI,gBAAeC,oBAAmB1E,sBAAqBiF,YAClE,CGhHoEa,CAChE/kF,EACAyyB,EACAx7E,EACAC,GAII8tI,GAAgB95J,EAAAA,EAAAA,UAAQ,KAC5B,MAAM85J,EAA4C,GAClD,GAAIhlF,EAAIilF,iBACN,IAAK,MAAMlF,KAAuB//E,EAAIilF,iBLyFrB52J,MAAM,MACdT,KAAI,CAACyvJ,EAAQyD,KACY,CAClCr0F,UAAMjkE,EACN02J,QAAS,EACT7B,SACA6C,KAAM,GACNM,SAAU,GACVJ,SAAU,GACVU,YACA1+I,aAAa,EACbi+I,cAAc,EACdn+F,aAAS15D,MKpGPw8J,EAAcp6J,KAAKm1J,GAGvB,IAAK,IAAIb,EAAU,EAAGA,GAAWwE,EAAexE,IAAW,CACzD,MAAMqB,EAAWoD,EAAkBzE,GACnC,GAAKqB,EAEH,IAAK,MAAMR,KAAOO,GAAeC,GAC/ByE,EAAcp6J,KAAKm1J,QAHRiF,EAAcp6J,KAAKs0J,EAKpC,CACA,OAAO8F,CAAa,GACnB,CAACrB,EAAmBD,EAAe1jF,EAAIilF,oBAEnCziJ,EAAW9B,IAAqBne,EAAAA,EAAAA,UAAqB,CAAC,GACvDggB,EAAeA,CAAC29I,EAAchB,EAAiB18I,KACnD9B,GAAmBwkJ,IAAc,IAC5BA,EACH,CAAChF,GAAO19I,EACR,CAAC08I,GAAU18I,OAEK,IAAdA,GACF2iJ,GAAgB,EAClB,GAGKC,EAAcD,IAAmB5iK,EAAAA,EAAAA,WAAS,GAoB3C8iK,EAoGR,SACE1D,EACA4B,EACA/gJ,EACAwiJ,GAEA,OAAO95J,EAAAA,EAAAA,UAAQ,IACN85J,EAAchgK,QAAQ+6J,IAC3B,GAAI4B,EACF,OAAO,EAIT,GAAmB,iBAAR5B,EAGT,QAAIv9I,EAAUu9I,EAAIS,WAAaT,EAAIS,WAAaT,EAAIG,MAChD19I,EAAUu9I,EAAIK,WAAaL,EAAIK,WAAaL,EAAIG,MAKtD,IAAKqD,EACH,OAAO,EAGT,IAAK,MAAM+B,KAAc/B,EAAgBgC,iBAAkB,CACzD,MAAMC,EAAUjC,EAAgBgC,iBAAiBD,GACjD,IAAKE,EACH,OAAO,EAET,MAAMtG,EAAU79J,OAAOikK,GAEvB,GAAIpG,GAAWa,EACb,OAAO,EAET,GAAIb,EAAUsG,EAAQC,YAAc1F,GAAOv9I,EAAU08I,GACnD,OAAO,CAEX,CACA,OAAO,CAAI,KAEZ,CAACyC,EAAY4B,EAAiB/gJ,EAAWwiJ,GAC9C,CA/I2BU,CACvB/D,EACA4B,EACA/gJ,EACAwiJ,GAGI73H,GAAetwB,EAAAA,EAAAA,QAAuB,OACtC,iBAAE8oJ,EAAgB,aAAEC,EAAY,aAAEC,EAAY,gBAAEC,GEtHjD,SAA+B34H,EAAsCxN,GAC1E,MACO1hB,EAAW8nJ,IAAgBxjK,EAAAA,EAAAA,UAAS,IACpCyjK,EAAiBC,IAAsB1jK,EAAAA,EAAAA,UAAS,GAEjDic,GAAW7b,EAAAA,EAAAA,cAAY,KACtBwqC,EAAalwB,UAClB8oJ,EAAa54H,EAAalwB,QAAQgB,WAClCgoJ,EAAmB94H,EAAalwB,QAAQK,cAAa,GACpD,CAAC6vB,KAEJvqC,EAAAA,EAAAA,YAAU,KACR,IAAKuqC,EAAalwB,QAAS,OAC3B,MAAMilB,EAAKiL,EAAalwB,QAGxB,OAFAilB,EAAGp/B,iBAAiB,SAAU0b,GAEvB,KACL0jB,EAAGn/B,oBAAoB,SAAUyb,EAAS,CAC3C,GACA,CAAC2uB,EAAc3uB,IAElB,MAAM0nJ,GAAWvjK,EAAAA,EAAAA,cAAY,KACtBwqC,EAAalwB,SAClBgpJ,EAAmB94H,EAAalwB,QAAQK,aAAa,GACpD,CAAC6vB,KACJ5vB,EAAAA,GAAAA,GAAkB4vB,GAAc,IAAM+4H,MAEtC,MAAOC,EAAYC,IAAiB7jK,EAAAA,EAAAA,UAA6C,CAAC,IAC3E8jK,EAAcC,IAAmB/jK,EAAAA,EAAAA,UAAS,IAC3CsjK,GAAeljK,EAAAA,EAAAA,cACnB,CAACkL,EAAesP,KACdipJ,GAAeG,IAEb,GADuBA,EAAQ14J,KACRsP,EAAQ,OAAOopJ,EAClCF,EAAelpJ,GAAQmpJ,EAAgBnpJ,GAC3C,MAAMqpJ,EAAa,IAAKD,GAExB,OADAC,EAAW34J,GAASsP,EACbqpJ,CAAU,GACjB,GAEJ,CAACH,IAGGI,EAAgB9mI,EAAMt1B,OAE5B,IAAIq8J,EAAc,EACdniI,EAAW,EACf,KAAOA,EAAWkiI,GAAe,CAC/B,MAAMtpJ,EAASgpJ,EAAW5hI,GACpBoiI,OAAuBn+J,IAAX2U,EAAuBkpJ,EAAelpJ,EACxD,GAAIupJ,EAAcC,GAAa1oJ,EAjDZ,IAiDsC,MACzDyoJ,GAAeC,EACfpiI,GACF,CACA,MAAMqiI,EAAkBriI,EAClBohI,EAAmBe,EAEnBG,EAAmB5oJ,EAAY+nJ,EAxDhB,IAyDrB,IAAIc,EAAmB,EACvB,KAAOviI,EAAWkiI,GAAe,CAC/B,MAAMtpJ,EAASgpJ,EAAW5hI,GAK1B,GAHAmiI,QAD6Bl+J,IAAX2U,EAAuBkpJ,EAAelpJ,EAExDonB,IACAuiI,IACIJ,GAAeG,EAAkB,KACvC,CAEA,MAAME,EAAoBL,EAAcf,EAExC,KAAOphI,EAAWkiI,GAAe,CAC/B,MAAMtpJ,EAASgpJ,EAAW5hI,GAE1BmiI,QAD6Bl+J,IAAX2U,EAAuBkpJ,EAAelpJ,EAExDonB,GACF,CAEA,MAAMuhI,EAAkBY,EAAcf,EAAmBoB,EAIzD,MAAO,CACLH,kBACAjB,mBACAC,aALmBjmI,EAAML,MAAMsnI,EAAiBA,EAAkBE,GAMlEjB,eACAC,kBAEJ,CF8B4EkB,CACxE75H,EACAk4H,GAGIrF,EAAoBuD,GAAiB0D,2BAA6B1D,EAAgB2D,QAClFC,EAA2C,EAAvBnC,EAAc36J,OAClC+8J,EAAkB7yH,OAAO4yH,GAAmB98J,QAE5C,YAAEg9J,EAAW,eAAEC,EAAc,eAAEC,EAAc,aAAEC,GG1HhD,SACLr6H,EACA+1H,EACAC,EACAsE,EACA78C,GAEA,MAAO88C,EAAkBC,IAAuBplK,EAAAA,EAAAA,UAAS,GA+EzD,OA5EAK,EAAAA,EAAAA,YAAU,KACR,IAAKsgK,EACH,OAEF,MAAMxe,EAAW3qI,aAAY,KACvBozB,EAAalwB,SACfkwB,EAAalwB,QAAQ2qJ,SAAS,CAAE3iJ,IAAKkoB,EAAalwB,QAAQkB,cAC5D,GACC,KAEH,MAAO,KACL0pJ,cAAcnjB,EAAS,CACxB,GACA,CAACwe,EAAqB/1H,KAIzBvqC,EAAAA,EAAAA,YAAU,KACR,IAAKsgK,GAAuBt4C,EAC1B,OAEF,MAAM85B,EAAW3qI,aAAY,KACtBozB,EAAalwB,UAGdyqJ,GAAoB,EACtBvE,GAAuB,GA1C/B,SAAoBjhI,GAClB,MAAM,aAAE5kB,EAAY,aAAEa,EAAY,UAAEF,GAAcikB,EAElD,OAAOjkB,GADcE,EAAeb,CAEtC,CA0CUwqJ,CAAW36H,EAAalwB,SAC1B0qJ,GAAqBn5G,GAASA,EAAO,IAErCm5G,EAAoB,GACtB,GACC,KACGI,EAAW11J,YAAW,KAC1B8wJ,GAAuB,EAAM,GAC5B,MAEH,MAAO,KACL0E,cAAcnjB,GACd1qI,aAAa+tJ,EAAS,CACvB,GACA,CAAC7E,EAAqBt4C,EAAcz9E,EAAcu6H,EAAkBvE,IAgChE,CACLkE,YA/BkBA,KAClBl6H,EAAalwB,SAAS2qJ,SAAS,CAAE3iJ,IAAK,IACtCk+I,GAAuB,EAAM,EA8B7BmE,eA3BqBA,KAChBn6H,EAAalwB,UAGlBkwB,EAAalwB,QAAQ2qJ,SAAS,CAAE3iJ,IAAKkoB,EAAalwB,QAAQkB,eAC1DglJ,GAAuB,GAAK,EAuB5BoE,eApBqBA,KACrB,IAAKp6H,EAAalwB,QAChB,OAEF,MAAM,OAAEE,GAAWgwB,EAAalwB,QAAQ4kB,wBACxCsL,EAAalwB,SAAS+qJ,SAAS,CAAE/iJ,IAAK9H,EAAS,IAAK,EAgBpDqqJ,aAbmBA,KACnB,IAAKr6H,EAAalwB,QAChB,OAEF,MAAM,OAAEE,GAAWgwB,EAAalwB,QAAQ4kB,wBACxCsL,EAAalwB,SAAS+qJ,SAAS,CAAE/iJ,KAAsB,GAAhB9H,EAAS,MAChDgmJ,GAAuB,EAAM,EASjC,CH8BwE8E,CACpE96H,EACA+1H,EACAC,EACA6B,EAAc36J,OACdugH,GAAa5qC,EAAIzuC,SAGb22H,EAAmBtC,EAAarzJ,WACnC2vB,GAAqB,iBAAPA,GAAmBA,EAAGg+H,OAASkD,GAAelD,OAEzDiI,EAAcvC,EAAasC,GAC3BE,EAA4C,iBAAhBD,GAA4BA,EAAYjJ,QAEpEmJ,EAAsBD,EACxBzE,EAAkByE,QAClB5/J,EAEE8/J,EACJlF,GAAelE,SFnIZ,SAAqBqB,GAC1B,MAAM,MAAE5xI,EAAK,WAAE8xI,EAAU,KAAE3hG,EAAI,KAAEx0D,GAASi2J,EAC1C,IAAIgI,EASJ,OANEA,KADkB,iBAATzpG,GAAsB2hG,GAAcA,EAAWlrE,QAEtC,yBAATjrF,GAA6C,sBAAVqkB,IAAiC8xI,GAAY3hG,MAKpFypG,CACT,CEwHIC,CAAY7E,EAAkBP,EAAclE,WAC5CkE,EAAclD,OAASkD,EAAchD,SAEvC,OACEj0J,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACu6J,GAAY,CACXC,cAAegG,EACf/F,aAAcgG,EACd/F,aAAcgG,EACd/F,iBAAkBgG,EAClB/F,wBAAyBA,IAlECA,MAC9B0D,GAAiBC,GAGjB,IAAIqD,GAAQ,EACZ7C,EAAa3lI,SAASyoI,IACO,iBAAhBA,IAAsC,IAAVD,GAInCC,EAAYtmJ,aAAesmJ,EAAYrI,cACrCqI,EAAYrL,OAAOlzG,WAAW,UAChCs+G,GAAQ,EACRlmJ,EAAammJ,EAAYlI,SAAUkI,EAAYxJ,SAAUkG,GAE7D,GACA,EAkDiC3D,GAC/BE,WAAYA,EACZC,cAA4B,QAAb5hF,EAAI11E,KACnBo3J,eAAgB0D,KAElBv+J,EAAAA,EAAAA,KAACm8J,GAAe,CAAC11J,IAAK6/B,EAAc/W,SAAU,EAAErvB,UAC9CF,EAAAA,EAAAA,KAAA,OAAAE,UACEoF,EAAAA,EAAAA,MAAA,OACEoB,UAAU,cACV7E,MAAO,CAAE,sBAAuB0+J,GAAwDrgK,SAAA,EAExFF,EAAAA,EAAAA,KAAA,OAAK6B,MAAO,CAAEyU,OAAQwoJ,KACrBC,EAAah4J,KAAI,CAACmyJ,EAAKlyJ,KACtB,GAAmB,iBAARkyJ,EAAkB,CAC3B,MAAMb,EAAUa,EAEhB,OACEl5J,EAAAA,EAAAA,KAACm4J,GAAmB,CAElBE,QAASA,EACTD,oBAAqBA,GAFhBC,EAKX,CAEA,OACEr4J,EAAAA,EAAAA,KAACi5J,GAAY,CAEXjyJ,MAAOA,EACPkyJ,IAAKA,EACLv9I,UAAWA,EACXD,aAAcA,EACd09I,UAAW4F,EACXr4J,QAAS61J,EACTrD,kBAAmBA,GAPd,GAAGD,EAAIb,WAAWa,EAAIe,aAAajzJ,IAQxC,KAGNhH,EAAAA,EAAAA,KAAA,OAAK6B,MAAO,CAAEyU,OAAQ2oJ,YAI3BwC,QAA2C9/J,IAAxB6/J,IAClBxhK,EAAAA,EAAAA,KAAC27J,GAAc,CACb91J,QAAM,EACN0G,QAASA,IAAMiwJ,EAAiB,MAChCjB,UAAWiG,MAKrB,CIhMO,SAASM,GAAiBhlK,GAC/B,MAAM,eACJszB,EAAc,YACdC,EAAW,eACXC,EAAc,UACd0nI,EAAS,oBACTqE,EAAmB,uBACnBC,GACEx/J,GACE,EAAEoK,IAAMC,EAAAA,EAAAA,MAUd,OACEnH,EAAAA,EAAAA,KAACk2B,GAAAA,EAAO,CAACt4B,gBAAiBA,IAAM0yB,EAAe,CAAC,GAAGpwB,UACjDoF,EAAAA,EAAAA,MAAC0vB,GAAAA,EAAc,CAAA90B,SAAA,EACbF,EAAAA,EAAAA,KAAC+wB,GAAkB,CACjBX,eAAgBA,EAChBC,YAAaA,EACbC,eAAgBA,IAEjByzF,GAAai0C,IACZh4J,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLlC,QAASg5J,EAAsB,YAAc,UAC7C11J,QAnBiBo7J,KAEvBzF,GADED,EAIJ,EAcoCn8J,SAELgH,EAAtBm1J,EAAwB,WAAgB,YAEzC,SAIZ,CCxCA,MAAM2F,GAAct/J,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,qBAAVH,CAAU,8GAUvB,SAASu/J,GAAanlK,GAC3B,MAAM,IAAEq8E,GAAQr8E,GACV,EAAEoK,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,MACdu9G,EAAsBC,IAA2BzmK,EAAAA,EAAAA,UAAS,aAEjEK,EAAAA,EAAAA,YAAU,KACR,IAAIqmK,EACJ,OAAIjpF,EAAIwtB,WAIRy7D,EAAWlvJ,aAAY,KACrB,MAAMmvJ,EAAcC,GAAiBnpF,EAAIosC,SACzC48C,EAAwBE,EAAY,GACnC,MANM,IAAMrB,cAAcoB,EAQO,GACnC,CAACjpF,EAAIosC,QAASpsC,EAAIwtB,WAErB,MAAM47D,EAAYppF,EAAIqpF,iBAAiBC,WACjCC,EAAYvpF,EAAIqpF,iBAAiBG,WACjCC,EAAYzpF,EAAI0pF,oBAAoBlL,KACpCmL,EAAe3pF,EAAI0pF,oBAAoBnL,SACvCqL,EAAiB5pF,EAAI0pF,mBACvBh5J,OAAO4f,KAAK0vD,EAAI0pF,oBAAsB,CAAC,GAAG9kJ,QACxC,CAAC+5I,EAAK1rJ,IAAQ0rJ,EAAO3+E,EAAI0pF,mBAAmBz2J,IAC5C,GAEF,EAEEqH,EAAU0lE,EAAIwtB,SAChB4E,GAAAA,GAASC,WAAW,CAAE33F,QAASrZ,OAAO2+E,EAAI1lE,WAAY43F,SAAS,YAC/D62D,EAEEc,GAAkB3+J,EAAAA,EAAAA,UACtB,KAAM,CACJZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcC,QACvB3B,KAAMw1H,GAAAA,GACNp7H,MAAO4J,EAAE,4BACTP,QAASA,IACPq0D,EAAaJ,GAAS+9D,mBAAoB,CACxCt0E,OAAQ,CAAElnD,GAAIg8E,EAAIoC,2BAGxB,CAACr0E,EAAGiyE,EAAIoC,qBAAsBvgB,IAGhC,OACE11D,EAAAA,EAAAA,MAACsD,GAAAA,EAAK,CAACC,WAAS,EAAA3I,SAAA,EACdF,EAAAA,EAAAA,KAACgS,GAAAA,EAAS,CAAC49B,UAAQ,EAAA1vC,UACjBoF,EAAAA,EAAAA,MAAC08J,GAAW,CAAA9hK,SAAA,EACVF,EAAAA,EAAAA,KAAA,MAAAE,SAAKi5E,EAAI/7E,QACT4C,EAAAA,EAAAA,KAACysE,GAAW,CAAC/hC,OAAQyuC,EAAIzuC,OAAQm0B,OAAO,2BAG5C7+D,EAAAA,EAAAA,KAACgS,GAAAA,EAAS,CAAA9R,UACRoF,EAAAA,EAAAA,MAAC6E,EAAAA,EAAI,CAAAjK,SAAA,CACW,iBAAbi5E,EAAI11E,OAA2BzD,EAAAA,EAAAA,KAACoI,GAAgB,CAACjH,UAAQ,EAACb,OAAQ0iK,KACnEhjK,EAAAA,EAAAA,KAACijK,GAAK,CAAC3lK,MAAO4J,EAAE,SAAUoV,MAAOimJ,KACjCviK,EAAAA,EAAAA,KAACijK,GAAK,CAAC3lK,MAAO4J,EAAE,SAAUoV,MAAOomJ,KACjC1iK,EAAAA,EAAAA,KAACijK,GAAK,CAAC3lK,MAAO4J,EAAE,SAAUoV,MAAOymJ,KACjC/iK,EAAAA,EAAAA,KAACijK,GAAK,CAAC3lK,MAAO4J,EAAE,eAAgBoV,MAAOsmJ,KACvC5iK,EAAAA,EAAAA,KAACijK,GAAK,CAAC3lK,MAAO4J,EAAE,UAAWoV,MAAOwmJ,KAClCx9J,EAAAA,EAAAA,MAACkF,EAAAA,EAAQ,CAAAtK,SAAA,CACNgH,EAAE,WAAW,KAAClH,EAAAA,EAAAA,KAACo0G,GAAAA,EAAK,CAACC,QAAM,EAAAn0G,SAAEuT,cAM1C,CAEA,SAASwvJ,GAAMnmK,GACb,MAAM,MAAEQ,EAAK,MAAEgf,GAAUxf,EACzB,OAAKwf,GAKHhX,EAAAA,EAAAA,MAACkF,EAAAA,EAAQ,CAAAtK,SAAA,CACN5C,EAAM,KAAC0C,EAAAA,EAAAA,KAACo0G,GAAAA,EAAK,CAACC,QAAM,EAAAn0G,SAAEoc,OALlB,IAQX,CAEA,MAAMgmJ,GAAoB/8C,IACxB,IAAKA,EACH,MAAO,GAGT,MACM29C,EADMvwJ,GAAAA,GAASG,MAElBm7E,KAAKt7E,GAAAA,GAASE,QAAQ,GAAG0yG,KAAY,CAAC,eAAgB,UAAW,UAAW,UAC5E49C,WAEH,OAAO53D,GAAAA,GAASC,WAAW,IAAK03D,IAAY73D,SAAS,WAAW,EC1G5D+3D,IAAU1gK,EAAAA,EAAAA,IAAO0V,GAAAA,IAAYxV,WAAA,CAAAC,YAAA,oBAAnBH,CAAmB,oEAM5B,SAAS8iG,KACd,MAAMnhD,GAASgZ,EAAAA,GAAAA,MACT,IAAE8b,EAAG,WAAEw9E,GAAeP,GAAU/xG,EAAOlnD,GAAIknD,EAAO89B,UAExD,OAAKhJ,GAGEn5E,EAAAA,EAAAA,KAACqjK,GAAc,CAAClqF,IAAKA,EAAKyyB,UAAW+qD,IAFnC,IAGX,CAEO,SAAS0M,GAAevmK,GAC7B,MAAM,IAAEq8E,EAAG,UAAEyyB,GAAc9uG,EACrBszB,EA8CR,WACE,MAAM,EAAElpB,IAAMC,EAAAA,EAAAA,MAEd,OAAO9C,EAAAA,EAAAA,UACL,IAAM,CACJ,CACE+H,IAAK,SACL9O,MAAO4J,EAAE,iBACTzD,KAAMysB,GAAkBsC,UACxB8xB,MAAO,oBACPl+B,YAAalf,EAAE,qBACf6nB,WAAY,YAEd,CACE3iB,IAAK,QACL9O,MAAO4J,EAAE,SACTzD,KAAMysB,GAAkBuB,YACxB6yB,MAAO,QACPl+B,YAAalf,EAAE,qBACfmf,QAAS,CACP,CAAE3rB,MAAO,QAAS4C,MAAO4J,EAAE,UAC3B,CAAExM,MAAO,aAAc4C,MAAO4J,EAAE,eAChC,CAAExM,MAAO,QAAS4C,MAAO4J,EAAE,UAC3B,CAAExM,MAAO,sBAAuB4C,MAAO4J,EAAE,oBACzC,CAAExM,MAAO,oBAAqB4C,MAAO4J,EAAE,oBACvC,CAAExM,MAAO,yBAA0B4C,MAAO4J,EAAE,uBAC5C,CAAExM,MAAO,qBAAsB4C,MAAO4J,EAAE,kBACxC,CAAExM,MAAO,mBAAoB4C,MAAO4J,EAAE,gBACtC,CAAExM,MAAO,kBAAmB4C,MAAO4J,EAAE,iBACrC,CAAExM,MAAO,eAAgB4C,MAAO4J,EAAE,YAClC,CAAExM,MAAO,uBAAwB4C,MAAO4J,EAAE,iBAC1C,CAAExM,MAAO,eAAgB4C,MAAO4J,EAAE,eAClC,CAAExM,MAAO,oBAAqB4C,MAAO4J,EAAE,iBACvC,CAAExM,MAAO,kBAAmB4C,MAAO4J,EAAE,iBACrC,CAAExM,MAAO,wBAAyB4C,MAAO4J,EAAE,qBAC3C,CAAExM,MAAO,sBAAuB4C,MAAO4J,EAAE,mBACzC,CAAExM,MAAO,wBAAyB4C,MAAO4J,EAAE,gBAC3C,CAAExM,MAAO,oBAAqB4C,MAAO4J,EAAE,YACvC,CAAExM,MAAO,yBAA0B4C,MAAO4J,EAAE,iBAC5C,CAAExM,MAAO,+BAAgC4C,MAAO4J,EAAE,qBAClD,CAAExM,MAAO,iCAAkC4C,MAAO4J,EAAE,uBACpD,CAAExM,MAAO,qBAAsB4C,MAAO4J,EAAE,uBACxC,CAAExM,MAAO,yBAA0B4C,MAAO4J,EAAE,iBAC5C,CAAExM,MAAO,oBAAqB4C,MAAO4J,EAAE,sBACvC,CAAExM,MAAO,oBAAqB4C,MAAO4J,EAAE,qBACvC,CAAExM,MAAO,qBAAsB4C,MAAO4J,EAAE,qBACxC,CAAExM,MAAO,iBAAkB4C,MAAO4J,EAAE,mBACpC,CAAExM,MAAO,yBAA0B4C,MAAO4J,EAAE,iBAC5C,CAAExM,MAAO,0BAA2B4C,MAAO4J,EAAE,uBAC7C,CAAExM,MAAO,UAAW4C,MAAO4J,EAAE,YAC7B,CAAExM,MAAO,UAAW4C,MAAO4J,EAAE,gBAInC,CAACA,GAEL,CAtGyBo8J,IAChBjzI,EAAaC,IAAkB50B,EAAAA,EAAAA,UAAuB,CAAC,GACxD6nK,EAAYx/C,GAAa5qC,EAAIzuC,SAC5B2xH,EAAqBC,IAA0B5gK,EAAAA,EAAAA,UAAS6nK,IAEvDrxG,QAAS27C,EAAa,QAAEt4C,GAAY2nB,GAC1CzrB,EAAM,kBAAkB30D,EAAMq8E,IAAIh8E,GAAGqhB,YAAc,sBAGrD,OAAK26D,GAIH7zE,EAAAA,EAAAA,MAAC89J,GAAO,CAAC//J,QAAQ,QAAOnD,SAAA,EACtBF,EAAAA,EAAAA,KAACiiK,GAAY,CAAC9oF,IAAKA,IACL,iBAAbA,EAAI11E,MACHzD,EAAAA,EAAAA,KAACm3J,GAAsB,CAAC/7E,MAAOyyB,GAAiB,MAEhDvoG,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACw3J,GAAa,CAAC/0C,OAAQtpC,EAAI0pF,oBAAsB,CAAC,KAClD7iK,EAAAA,EAAAA,KAAC8hK,GAAgB,CACf1xI,eAAgBA,EAChBC,YAAaA,EACbC,eAAgBA,EAChB0nI,UAAW7+E,EAAIzuC,OACf2xH,oBAAqBA,EACrBC,uBAAwBA,OAIhB,iBAAbnjF,EAAI11E,MACHzD,EAAAA,EAAAA,KAAC4tG,GAAc,CAACz0B,IAAKA,EAAKyyB,UAAWA,EAAWO,kBAAmB52C,KAEnEv1D,EAAAA,EAAAA,KAACo8J,GAAe,CACdjjF,IAAKA,EACLyyB,UAAWA,EACXx7E,eAAgBA,EAChBC,YAAaA,EACbgsI,oBAAqBA,EACrBC,uBAAwBA,QA7BvBt8J,EAAAA,EAAAA,KAACm2B,GAAAA,EAAQ,GAkCpB,CCjEO,SAASmtF,KACd,MAAM,EAAEp8G,IAAMC,EAAAA,EAAAA,MAER+6B,EAAeijF,KAErB5nD,GAAqB,QACrB,MAAMzE,EAASvC,KAETzpB,EAAO6zB,GAAuB,CAClCvc,IAAKqN,EAAM,iBACXrhC,eAHqB81G,KAIrBhkG,kBAKI,QAAEqzB,GAAYzoB,EA0BpB,OALAurB,GACE,CAAE3nB,QAAS,CAAC,mBAAoBgqB,KAAM,CAAC,kBAAmBC,UAAW,CAAC,aArBzC7+D,EAAAA,EAAAA,cAC5BuR,IACC,GACO,SADCA,GAAS4tD,WAEb,OAAQ5tD,GAAS5J,MACf,IAAK,MAGL,IAAK,eAGL,IAAK,iBACE8xD,IAIb,GAEF,CAACA,MAQDjwD,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,QACT+5C,eAAgB/5C,EAAE,QAClB85C,UAAW95C,EACT,mGACA,CAAE4/G,QA/Ccx8E,QAiDlB4W,aAAc2X,GAAcC,EAAQ,QACpCl9C,YAAa1U,EACX,mGACA,CAAE4/G,QApDcx8E,QAsDlBqW,eAAe3gD,EAAAA,EAAAA,KAACyjE,GAAkB,CAAChgE,KAAM,WAE3CzD,EAAAA,EAAAA,KAACmmI,GAAQ,CAACtuH,QAASqqB,MAGzB,CCrEO,SAASshI,GAAwE1mK,GAGtF,MAAM,OAAEg8D,GAAWh8D,GACb,EAAEoK,IAAMC,EAAAA,EAAAA,OACR,WAAEq/C,GAAeV,MAErBla,QAAQ,YAAEujB,IACR3I,EACEi9G,EAA6B,GACnC,IAAIC,GAA4B,EAC5BC,GAA4C,EAC5CC,GAA6C,EAgEjD,MA7DI,6BAA8B9qG,GAAUA,EAAO+sB,4BACjD,8BAA+B/sB,KAC/BA,EAAOi6C,0BAcE5jD,GACTA,EAAY/1B,SAASw1C,IACnB,KAAM,WAAYA,IAAe,aAAc9V,EAAQ,CACrD,MAAM+qG,EAAyB/qG,EAAOosB,SAAS/1B,YAAY3qD,MACxDs/J,GAAgBA,EAAY3mK,KAAOyxE,EAAWzxE,KAGjD,GAAI0mK,GAA0BA,GAAwBE,iBAAiBvgK,OAAS,EAAG,CAC7EqgK,EAAuBE,iBAAiBx7J,SAAS,kBACnDm7J,GAA4B,GAE1BG,EAAuBE,iBAAiBx7J,SAAS,qBACnDo7J,GAA4C,GAE1CE,EAAuBE,iBAAiBx7J,SAAS,oBACnDq7J,GAA6C,GAG/C,MAAMI,EAAmBH,EAAuBE,iBAC7C5lK,QAAQ8lK,GAAmBA,EAAe3gH,WAAW,oBACrDv8C,KAAKm9J,GAAkBA,EAAc18J,MAAM,UAAU,IAAM,KAE9Di8J,EAAiB1/J,QAAQigK,EAC3B,CACF,KAAO,CACL,MAAMG,EAAa,WAAYv1F,EAC3Bu1F,GAA+C,QAAjCv1F,GAAYtmB,QAAQ87G,WACpCV,GAA4B,GAG1BS,GAAsD,QAAxCv1F,GAAYtmB,QAAQ+7G,kBACpCV,GAA4C,GAG1CQ,GAAqD,QAAvCv1F,GAAYtmB,QAAQg8G,iBACpCV,GAA6C,GAG3CO,GAAqD,QAAvCv1F,GAAYtmB,QAAQi8G,gBACpCd,EAAiB1/J,KAAK6qE,EAAWtmB,OAAOymB,UAAUvwD,YAAc,GAEpE,KArDFs6C,EAAOi6C,0BAA0B35E,SAASgrI,IACxC,GAAiB,iBAAbA,EACFV,GAA4B,OACvB,GAAiB,oBAAbU,EACTT,GAA4C,OACvC,GAAiB,mBAAbS,EACTR,GAA6C,OACxC,GAAIQ,EAAS9gH,WAAW,kBAAmB,CAChD,MAAMk5C,EAAU4nE,EAAS58J,MAAM,UAAU,IAAM,GAC/Ci8J,EAAiB1/J,KAAKy4F,EACxB,MAgDFl3F,EAAAA,EAAAA,MAACiqC,GAAY,CAACJ,YAAU,EAACE,cAAY,EAAAnvC,SAAA,EACnCF,EAAAA,EAAAA,KAACgiG,GAAgB,CAACthG,UAAWgjK,EAA0BxjK,UACrDF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBj/C,GAAG,sBACHG,MAAO4J,EAAE,gBACT9J,KAAK,oCACLgpB,YAAalf,EAAE,oBACfzD,KAAK,WACLupB,YAAU,OAGdhtB,EAAAA,EAAAA,KAACgiG,GAAgB,CAACthG,UAAWkjK,EAA2C1jK,UACtEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBj/C,GAAG,gCACHG,MAAO4J,EAAE,wBACT9J,KAAK,sCACLgpB,YAAalf,EAAE,oBACfzD,KAAK,WACLupB,YAAU,OAGdhtB,EAAAA,EAAAA,KAACgiG,GAAgB,CAACthG,UAAWijK,EAA0CzjK,UACrEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBj/C,GAAG,uCACHG,MAAO4J,CAAC,gCACR9J,KAAK,uCACLgpB,YAAalf,EAAE,oBACfzD,KAAK,WACLupB,YAAU,MAGby2I,EAAiB18J,KAAKy9J,IACrB,MAAMjhE,EAAc,kBAA4B,KAAXihE,EAAgB,IAAIA,IAAW,IACpE,OACExkK,EAAAA,EAAAA,KAACo8C,GAAiB,CAEhBj/C,GAAI,yBAAyBqnK,IAC7BlnK,MAAkB,KAAXknK,EAAgBt9J,CAAC,iBAAmBA,EAAE,8BAA+B,CAAEs9J,WAC9EpnK,KAAM,wBAAwBmmG,IAC9Bn9E,YAAalf,EAAE,oBACfzD,KAAK,WACLupB,YAAU,GANLw3I,EAOL,MAKZ,CC9DO,SAASC,GAAyB3nK,GACvC,MAAM,SAAE6oF,GAAa7oF,GACf,EAAEoK,IAAMC,EAAAA,EAAAA,OACR,WAAEq/C,GAAeV,KACjBlB,EAAaT,MACb,OAAEvY,EAAkB,OAAE42D,GAAWh8C,GAC/BtmC,KAAMuiF,GAAiBxsC,GAvDjC,SAA0B0vB,GACxB,IAAKA,EAAU,MAAO,GACtB,OAAQA,GAAUliF,MAChB,IAAK,eACH,OAAOguD,EAAM,kBAAkBk0B,GAAUxoF,GAAGqhB,0BAC9C,IAAK,wBACH,OAAOizC,EAAM,2BAA2Bk0B,GAAUxoF,GAAGqhB,0BACvD,QACE,MAAO,GAEb,CA6CgDkkF,CAAiB/c,KAEvDzlE,KAAMyiF,GAAOtsC,GACnB5E,EAAM,2BACN7lB,GAAQg2C,uBAAyB,KAE3B1hE,KAAMwkJ,GAAkBruG,GAC9B5E,EAAM,gBACN7lB,GAAQ2kC,WAAWpzE,IAAM,IAG3B,IAAIylG,EAAkBh3D,GAAQo3C,YAAc,KACxCwf,IACFI,EA9CJ,SACE5f,EACAwf,EACAC,GAEA,MAAMI,EAAe7f,EAAc5yE,KAAKC,MAAMwsE,GAAWmG,IAA0B,CAAC,EAC9E8f,EAAsD,IAAKN,GAEjE,GAAIC,GAAcM,KAAM,CACtB,MAIMC,EAvBV,SAAuBC,EAA4CC,GACjE,MAAMC,EAAU,IAAKF,GAMrB,OALAC,EAAa9pE,SAAShtB,SACQ,IAAjB+2F,EAAQ/2F,KACjB+2F,EAAQ/2F,GAAO,cACjB,IAEK+2F,CACT,CAekCC,CAAcZ,EAJrBC,EAAaM,KACjC5kG,QAAQklG,GAAiB,aAAXA,EAAE5/F,OAChBsD,KAAKs8F,GAAMA,EAAEC,YAGhBz5F,OAAO4f,KAAKu5E,GAAuB5pE,SAASmqE,IAC1CT,EAAcS,GAAeP,EAAsBO,EAAY,GAEnE,CAEA,MAAM/O,EAAwE,IACzEqO,KACAC,GAGL,OAAOnmB,GAAWvsE,KAAKa,UAAUujF,GACnC,CAqBsBgP,CAAc53D,GAAQo3C,YAAc,GAAIwf,EAAQC,GAAgB,OAGpF,MAAMjR,EAAkBL,GAAmBvlD,GAAQi3C,WAOnD,OACEv9E,EAAAA,EAAAA,MAACoc,GAAW,CAACK,gBAAgB,WAAU7hB,SAAA,EACrCF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,QAAQhH,SAAEylF,EAASvoF,QACxC4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,YAAYhH,SAAE0rC,GAAQu2C,YAC3CniF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,gBAAiBka,SAAUukE,EAASxqB,eAAeiV,aAAalwE,UACnFF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS62B,oBAAqB,CAC3CptC,OAAQ,CAAElnD,GAAIwoF,EAASxqB,gBAAgBiV,cAAcjzE,MACpD+C,SAEFylF,EAASxqB,gBAAgBiV,cAAchzE,UAG5C4C,EAAAA,EAAAA,KAACgiG,GAAgB,CAACthG,UAAWgkK,EAAcxkK,UACzCF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,CAAC,YAAaka,SAAUsjJ,GAAevnK,GAAG+C,UAC3DF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS82B,iBAAkB,CACxCrtC,OAAQ,CACNlnD,GAAIunK,GAAevnK,GACnBqzE,eAxBuC,CACnD,GAAI,YACJQ,MAAO,kBACPC,YAAa,yBAqBiCyzF,GAAe51F,SAElD5uE,SAEF0rC,GAAQ2kC,WAAWnzE,WAIP,iBAAlBuoF,EAASliF,OACRzD,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,CAAC,UAAWka,SAAUukE,EAASxqB,eAAeyV,QAAQ1wE,UACvEF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAASg3B,eAAgB,CACtCvtC,OAAQ,CAAElnD,GAAIwoF,EAASxqB,gBAAgByV,SAASzzE,MAC/C+C,SAEFylF,EAASxqB,eAAeyV,SAASxzE,UAIxC4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,CAAC,wBAAyBka,QAASA,GAAQwqB,GAAQg2C,uBAAuB1hF,UAC3FF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS85B,4BAA6B,CACnDrwC,OAAQzY,GAAQg2C,sBAAwB,CAAEzkF,GAAIyuC,GAAQg2C,uBAA0B,CAAC,IAChF1hF,SAEFyiG,GAAIvlG,UAGT4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,yBAAyBhH,SAAE0rC,GAAQ02C,aACrC,iBAAlBqD,EAASliF,OACRzD,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,YAAYhH,SAAEylF,GAAUM,YAE/CjmF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,eAAgBka,QAASA,GAAQwqB,GAAQujB,aAAajvD,UACzEF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACR0rC,GAAQujB,aAAapoD,KAAK6nE,IACzB5uE,EAAAA,EAAAA,KAACyjG,GAAgB,CAACC,aAAc90B,EAAWzxE,IAASyxE,EAAWzxE,WAIrE6C,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,CAAC,kBACRia,SAAUja,CAAC,uDACXka,QAASA,GAAQwqB,GAAQi5C,iBAAiB3kF,UAE1CF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACR0rC,GAAQi5C,iBAAiB99E,KAAKmuF,IAC7Bl1F,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAC/X,MAAM,OAAM4D,UACjBF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS0c,qBAAsB,CAC5CjzB,OAAQ,CACNlnD,GAAI+3F,EAAG/3F,MAER+C,SAEFg1F,EAAG93F,QARiB83F,EAAG/3F,WAclC6C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,SAAShH,SAAE0rC,GAAQk2C,OAAS,KACjD9hF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,SAAShH,SAAE0rC,GAAQ5B,SACxChqC,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,aAAahH,SAAEsxF,KACpCxxF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,WAAWhH,SAAE0rC,GAAQrgC,SAAW,KACrDvL,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,gBAAgBhH,SAAE0rC,GAAQ41C,UAAYt6E,CAAC,KAAOA,CAAC,SACpElH,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,eAAehH,SAAE0rC,GAAQq2C,mBAC9CjiF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,UAAWka,QAASA,GAAQwqB,GAAQ1hC,QAAQhK,UAC/DF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACR0rC,GAAQ1hC,QAAQnD,KAAKzJ,IAAU0C,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAAnU,SAAiB5C,EAAMF,MAAjBE,EAAMH,WAGtD6C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,YAAaka,QAASA,GAAQwqB,GAAQ82C,UAAUxiF,UACnEF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACR0rC,GAAQ82C,UAAU37E,KAAI,EAAG3J,WAAW4C,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAAnU,SAAa9C,GAAPA,UAGrD4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,aAAcka,QAASA,GAAQwqB,GAAQ42C,WAAWtiF,UACrEF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACR0rC,GAAQ42C,WAAWz7E,KAAI,EAAG3J,WAAW4C,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAAnU,SAAa9C,GAAPA,UAGtD4C,EAAAA,EAAAA,KAACo2E,GAAoB,CAAC94E,MAAO4J,EAAE,cAAexM,MAAOkoG,MAG3D,CAEO,SAASa,IAAiB,aAAEC,IACjC,MAAQxjF,KAAMyjF,GAAmB1tC,GAC/BxE,EAAM,gBAAgBiyC,EAAallF,eAErC,OAAKmlF,GACE3jG,EAAAA,EAAAA,KAAC2uE,GAAe,CAACC,WAAY+0B,GAAqBD,GAD7B,IAE9B,CAEA,SAAStiF,GAAQ1mB,GACf,OAAIA,UAGAue,MAAMC,QAAQxe,GACQ,IAAjBA,EAAM8I,OAEM,iBAAV9I,IAC4B,IAA9BmP,OAAO4f,KAAK/uB,GAAO8I,QAAgBqG,OAAOC,OAAOpP,GAAO4J,MAAM8c,KAGzE,CC7LO,SAASujJ,KACd,MAAMtgH,GAASgZ,EAAAA,GAAAA,KACTjoD,GAAWC,EAAAA,GAAAA,MACXoxF,EAAkBL,KAClBxhD,EAAaT,KACboL,EAAcyT,KACd50D,EAAerD,MACf,EAAE7D,IAAMC,EAAAA,EAAAA,OAEZ+Y,KAAM44C,EACN9rD,MAAO43J,EACPrvG,QAASsvG,GACP5uG,GAAuBxE,EAAM,SAASpN,GAAQlnD,IAAM,iBAEtD+iB,KAAMylE,EACN34E,MAAO83J,EACPvvG,QAASwvG,GACP9uG,GAAYxE,EAAM,SAASpN,GAAQlnD,IAAM,OAmBvCo4D,EAAUsvG,GAAiBE,EAC3B/3J,EAAQ43J,GAAeE,EAC7B,GAAI93J,EAAO,OAAOhN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,IACzD,IAAKuD,IAAW6sB,EAAU,OAAO3lF,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,IAC9D,MAAM2lD,EAEF,CACFk1D,qBAAsB,CAAC,GAEzBlsG,EAAOi6C,0BAA0B35E,SAAS1rB,GAAOoiG,EAAoC,qBAAEpiG,GAAK,KAC5F,MAAMy4C,EAA0B,CAC9B,CACEhpD,GAAI,uBACJG,MAAO4J,EAAE,wBACTohD,QAAQtoD,EAAAA,EAAAA,KAACwjK,GAAuB,CAAiB1qG,OAAQA,KAE3D,CACE37D,GAAI,SACJG,MAAO4J,EAAE,UACTgwC,SACE5xC,EAAAA,EAAAA,MAACoc,GAAW,CAACK,gBAAgB,WAAU7hB,SAAA,EACrCF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,QAAQhH,SAAEylF,EAASvoF,QACxC4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,eAAehH,UAClCF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACRylF,EAASxqB,eAAehM,aAAapoD,KAAK6nE,IACzC5uE,EAAAA,EAAAA,KAACyjG,GAAgB,CAACC,aAAc90B,EAAWzxE,IAASyxE,EAAWzxE,eAQ7E,OACEmI,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,+BACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,QAASY,GAAI88C,EAAWgW,GAAS0oD,OAC5C,CACEhmH,MAAOqoF,EAASvoF,KAChB0K,GAAI88C,EAAWgW,GAAS8qD,WAAY,CAClCrhE,OAAQ,CAAE89B,SAAU,WAAYhlF,GAAIknD,EAAOlnD,WAKnD6C,EAAAA,EAAAA,KAACgqD,GAAU,CACT7D,MAAOA,EACPv4B,aAAckiF,EACdpxE,SAnEehwB,UACnB,GAAIuhG,EACF,IACE,MAAM92B,QAAY5pB,EAAYkC,EAAM,SAASpN,GAAQlnD,IAAM,eAAgB8yG,GACvE92B,GACF/jE,EAASqxF,EAAgBttB,GAE7B,CAAE,MAAOrqE,GACPV,EAAazD,SAAS,CACpBtH,QAAS,SACThG,MAAO6J,EAAE,qBACThH,SAAU4O,aAAewV,OAASxV,EAAIzB,SAE1C,CACF,EAsDI87B,aAAck2B,OAItB,CC9GO,SAAS4lG,KACd,MAAM,EAAE/9J,IAAMC,EAAAA,EAAAA,MACRk9C,GAASgZ,EAAAA,GAAAA,MACT,MACJrwD,EACAkT,KAAMskF,EAAiB,QACvBjvC,GACEc,GAA8B5E,EAAM,wBAAyBpN,EAAOlnD,IAElEynD,EAAaT,MACb,cAAE4N,GAAkBJ,MAGxBzxC,KAAMglJ,EACNl4J,MAAOm4J,EACP5vG,QAAS6vG,GACPnvG,GACFxE,EAAM,sDAGR,GAAIzkD,EAAO,OAAOhN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,IACzD,GAAI4vG,EACF,OAAOnlK,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOm4J,EAAmBjoG,cAAekoG,IAE5D,IAAM5gE,IAAqB0gE,EAAe,OAAOllK,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,IAE9E,MAAMA,EAAO,CAAC,CAAE7sD,MAAO4J,EAAE,aAAciuB,KAAMylC,GAASy6B,yBAMtD,OAJItjC,GAAeigB,mBAAsBkzF,GAAgBA,EAAahzG,QAAQ1uD,OAAS,IACrF2mD,EAAKpmD,KAAK,CAAEzG,MAAO4J,EAAE,iBAAkBiuB,KAAMylC,GAASyqG,8BAItD//J,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAOmnG,GAAmBpnG,KAC1BgjD,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,mBAAoBY,GAAI88C,EAAWgW,GAAS0qG,iBACvD,CAAEhoK,MAAOknG,GAAmBpnG,OAE9BujD,cAAe,MAEjB3gD,EAAAA,EAAAA,KAAC09D,GAAc,CACbe,QAAS,CACPnhE,MAAO4J,EAAE,2BACTiuB,KAAMylC,GAAS0qG,eACf5mG,oBAAqB,mBAEvBvU,KAAMA,EACN9F,OAAQ,CAAElnD,GAAIqnG,EAAkBrnG,QAIxC,CC/CO,SAASooK,GACdzoK,GAEA,MAAMyyD,EAAcyT,KACd5tD,GAAWC,EAAAA,GAAAA,MACXoxF,EAAkBL,KAkBxB,OACEpmG,EAAAA,EAAAA,KAAC++B,GAAAA,EAAK,CACJ,aAAY73B,GAAAA,CAAC,wBACb7D,QAAQ,QACRD,SAAS,UACT/F,MAAO6J,GAAAA,CAAC,wBACRujC,iBAAiB,OACjBtL,kBAAgB,EAChBt5B,QAAM,EACN0G,QAASA,IAAMzP,EAAMu7B,YAAYn4B,UAEjCoF,EAAAA,EAAAA,MAAC29D,GAAW,CACV5jE,YAAY6H,EAAAA,GAAAA,GAAE,UACdw3B,SA7BgEhwB,UAGpE,MAAM82J,QAAej2G,EACnBkC,EAAM,yBAAyB/jB,OAAO5wC,EAAMK,cAC5Cq0H,GAEF10H,EAAMu7B,YACNjjB,EAASqxF,EAAgB++D,GAAiC,EAsBtD/nK,YAAYyJ,EAAAA,GAAAA,GAAE,UACdsmC,SApBWA,IAAM1wC,EAAMu7B,YAqBvBgX,cAAY,EACZzhB,aAAc,CAAEo1D,WAAY,CAAEhvE,KAAM,KAAO9T,SAAA,EAE3CF,EAAAA,EAAAA,KAAA,QAAAE,UAAOgH,EAAAA,GAAAA,GAAE,oDACTlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,kBACLE,OAAO4J,EAAAA,GAAAA,GAAE,kBACTkf,aAAalf,EAAAA,GAAAA,GAAE,cACf8lB,YAAU,EACVvpB,KAAK,SACLo8B,IA5Bc,EA6BdlsB,IA9Bc,YAmCxB,CCjEO,SAAS2xJ,KACd,MAAM,EAAEp+J,IAAMC,EAAAA,EAAAA,MACR2xD,EAASvC,KACTnmC,EAAiBq0E,KACjBviE,EAAeqiE,KACfpiE,ECHD,WACL,MAAM,EAAEj7B,IAAMC,EAAAA,EAAAA,MAERs+J,ECTD,WACL,MAAM,WAAEttI,EAAU,UAAEE,GAAcK,MAC3B57B,EAAOsuC,IAAY1vC,EAAAA,EAAAA,YAQ1B,OAPAK,EAAAA,EAAAA,YAAU,KACJe,EACFq7B,GAAWn4B,EAAAA,EAAAA,KAACulK,GAA6B,IAAUzoK,EAAOu7B,UAAWA,KAErEA,GACF,GACC,CAACv7B,EAAOq7B,EAAYE,IAChB+S,CACT,CDFkCs6H,GAC1Bn2G,EAAcyT,KACdyjC,EAAkBL,KAClBhxF,GAAWC,EAAAA,GAAAA,MAEXswJ,GAAsB7pK,EAAAA,EAAAA,cAC1B4S,UACE,GAC6B,2BAA3Bk3J,EAAczjF,UACa,iBAA3ByjF,EAAczjF,SAEdsjF,EAAwB,CAAEtoK,GAAIyoK,EAAczoK,SACvC,CACL,MAAMqoK,QAAej2G,EACnBkC,EAAM,yBAAyB/jB,OAAOk4H,EAAczoK,cACpD,CAAC,GAEHiY,EAASqxF,EAAgB++D,GAC3B,IAEF,CAACC,EAAyBh/D,EAAiBrxF,EAAUm6C,IAGvD,OAAOlrD,EAAAA,EAAAA,UAA0C,IACG,CAChD,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/B0C,QAASuB,EAAAA,GAAcyD,UACvBoC,UAAU,EACVvH,KAAMixG,GAAAA,GACN72G,MAAO4J,EAAE,yBACTP,QAASg/J,KAIZ,CAACz+J,EAAGy+J,GACT,CDrCqBE,GAEb/4H,EAAO6zB,GAA8B,CACzCvc,IAAKqN,EAAM,yBACXrhC,iBACA8R,iBAGF,OACE58B,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,mBACT0U,YAAa1U,EACX,0IAEF+5C,eAAgB/5C,EAAE,mBAClB85C,UAAW95C,EACT,0IAEFg6C,aAAc2X,GAAcC,EAAQ,qBAEtC94D,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,sBACHizB,eAAgBA,EAChB8R,aAAcA,EACdC,WAAYA,EACZ8C,gBAAiB/9B,EAAE,iCACnBg+B,gBAAgB,4BACZ4H,MAIZ,CGtCO,SAASg5H,GAAoBzhH,GAClC,MAAM,IAAQl9C,EAAAA,EAAAA,MAER+1F,EAAqBhtB,GAA0BtV,GAAS62B,qBACxD7sC,EAAaT,KACb4hH,EAAuB1hH,GAAQ0hH,qBAgDrC,OA9CqB1hK,EAAAA,EAAAA,UACnB,IAAM,CACJ,CACEyc,OAAQ5Z,EAAE,QACV4b,KAAO6iE,IACL3lF,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAMk3E,EAASvoF,KACf0K,GAAI88C,EAAWgW,GAASo4F,4BAA6B,CACnD3uG,OAAQ,CAAElnD,GAAIwoF,EAASxoF,QAK7BiC,KAAM,OACN0hC,KAAM,OACNuC,KAAM,OACN0B,qBAAsB,MACtBD,aAAa,GAEf,CACEhkB,OAAQ5Z,EAAE,UACV4b,KAAO6iE,GACDogF,GAAwBA,EAAqBpgF,EAASxoF,KACjD6C,EAAAA,EAAAA,KAACosE,GAAU,CAAC1hC,OAAQ,aAG3B1qC,EAAAA,EAAAA,KAACosE,GAAU,CACT1hC,OACEi7C,EAASxqB,gBAAgB6qG,sBACzBrgF,EAASxqB,eAAe6qG,qBAAqBxiK,OAAS,EAClDmiF,EAASxqB,gBAAgB6qG,qBAAqB,GAAGt7H,YACjD/oC,KAMd,CACEmf,OAAQ5Z,EAAE,QACV4b,KAAO6iE,IAAmC3lF,EAAAA,EAAAA,KAACmV,GAAQ,CAAC1G,KAAMk3E,EAASktE,oBACnEzzJ,KAAM,qBAER89F,IAEF,CAACh2F,EAAGg2F,EAAoBt4C,EAAYmhH,GAGxC,CCtDO,SAASE,GAAmB/8H,GACjC,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR0kC,EAAsBi6H,KACtBzyF,EAAyBlE,GAAc,CAAEt5D,cAAc,EAAM0mD,aAAa,IAC1EvzB,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAACgvE,IAAyB,CAACA,IACzDzT,EAAaH,KAkBnB,OAjB6BpgB,IAC3BugB,EAAW,CACTviE,MAAO6J,EAAE,mBAAoB,CAAEoV,MAAO+iC,EAAa77C,SACnDzF,YAAamJ,EAAE,kEAAmE,CAChFoV,MAAO+iC,EAAa77C,SAEtBwoC,iBAAkB9kC,EAAE,mBAAoB,CAAEoV,MAAO+iC,EAAa77C,SAC9Ds1B,MAAOumB,EAAajgD,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QAC5D27B,MAAO62B,GACPtoD,UAAU,EACVukC,sBACA7C,gBACAE,aACAD,SAAUA,CAACoW,EAAoC5zB,IAC7CgkC,GAAcgC,EAAM,2BAA2BpS,EAAaliD,GAAGqhB,cAAeiN,IAChF,CAGN,C,gBCTO,SAASy6I,GAAuB7hH,GAOrC,MAAM,WAAEnb,EAAU,iBAAEi9H,EAAgB,oBAAEC,EAAmB,KAAE3iK,EAAI,qBAAEsiK,GAAyB1hH,GACpF,EAAEn9C,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACf0hH,EAAkBJ,GAAmB/8H,GAAc,MAAS,IAC5Do9H,EC7BD,SAAyBp9H,GAC9B,MAAM,IAAQ/hC,EAAAA,EAAAA,MACRooD,EAAcyT,KACd50D,EAAerD,KAyBrB,OAvBsBs0C,IACpB,MAAMx/C,EAAoB,CACxBwD,QAAS,UACThG,MAAO6J,EAAE,GAAGm4C,EAAajiD,gBACzBmO,QAAS,KAEXgkD,EAAYkC,EAAM,2BAA2BpS,EAAaliD,GAAGqhB,mBAAoB,CAC/EphB,KAAM,GAAGiiD,EAAajiD,WAAU,IAAIwU,MACjC6lH,eACA98H,QAAQ,0BAA2B,UAErC+wB,MAAK,KACJtd,EAAazD,SAAS9K,EAAM,IAE7BmP,OAAOhC,IACNoB,EAAavD,aAAahL,EAAO,CAC/BwD,QAAS,SACThG,MAAO6J,EAAE,2BACThH,SAAU8M,aAAiBsX,OAAStX,EAAMK,SAC1C,IAEH6e,QAAQgd,EAAW,CAG1B,CDAuBq9H,CAAgBJ,GAAoB,MAAS,IAC5D/3J,EAAerD,KAErB,OAAO1G,EAAAA,EAAAA,UAA6C,IAC3C,CAEL,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAM84D,GAAAA,GACN34D,QAASuB,EAAAA,GAAcC,QACvBvH,MAAO4J,EAAE,iBACTP,QAAU04C,GACR2b,EAAaJ,GAAS4rG,yBAA0B,CAC9CniH,OAAQ,CAAElnD,GAAIkiD,EAAaliD,MAE/B4D,WAAas+C,GAAiBy3E,GAAmBz3E,EAAcn4C,GAC/DI,UAAU,EACVmD,UAAU,GAEZ,CACEhH,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMujK,GAAAA,GACNnpK,MAAO4J,EAAE,iBACTnG,WAAas+C,IACX,MAAMuiH,EAAQmE,IAAuB1mH,EAAaliD,IAClD,YAAiBwE,IAAVigK,EAAsB16J,EAAE,wCAAqCvF,CAAS,EAE/EgF,QAAU04C,IACH,WACH,IACE,MAAMx7C,QAAe0rD,GACnBkC,EAAM,2BAA2BpS,EAAaliD,GAAGqhB,mBACjD,CAAC,GAEH4nJ,IAAsB/mH,EAAaliD,GAAGqhB,WAAY3a,EAAO1G,GAAGqhB,WAC9D,CAAE,MAAOxR,GACPoB,EAAazD,SAAS,CACpBtH,QAAS,SACThG,MAAO6J,EAAE,2BACThH,SAAU8M,aAAiBsX,OAAStX,EAAMK,SAE9C,CACD,EAdI,EAcD,EAEN/F,UAAU,EACVmD,UAAU,GAEZ,CACEhH,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAM22C,GAAAA,GACNv8C,MAAO4J,EAAE,iBACTP,QAAU04C,GAAuCinH,EAAajnH,GAC9Dt+C,WAAas+C,GAAiB63E,GAAmB73E,EAAcn4C,GAC/DI,UAAU,EACVmD,UAAU,EACV/J,SAAUA,IAAe,WAAT+C,GAElB,CAAEA,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,mBACTP,QAAU04C,GAAuCgnH,EAAgB,CAAChnH,IAClEt+C,WAAas+C,GAAiB23E,GAAqB33E,EAAcn4C,GACjEI,UAAU,KAGb,CACD0zD,EACAsrG,EACAD,EACA5iK,EACAyD,EACAk/J,EACAh4J,EACA23J,GAEJ,CE/GO,SAASW,KAEd,MAAOX,EAAsBY,IAA2BjrK,EAAAA,EAAAA,UAAmC,CAAC,GACtF0S,EAAerD,MACf,EAAE7D,IAAMC,EAAAA,EAAAA,MAEd,MAAO,CACL4+J,uBACAY,0BACAP,oBAAqBA,CAAC/oD,EAAqBupD,KACzC,MAAMzsH,EAAM,IAAK4rH,GACjB5rH,EAAIkjE,GAAeupD,EACnBD,EAAwBxsH,EAAI,EAE9B0sH,eAAiBC,IACf,IAAKA,EACH,OAGF,MAAM3sH,EAAM,IAAK4rH,GACjBe,EAAsB1tI,SAAS25H,IAE7B,MAAM6T,EAAiBb,EAAqBhT,EAAqB51J,GAAGqhB,YAC9D2gC,EAAgB4zG,EAAqB53F,gBAAgB6qG,qBACrD3mH,EAAeF,EAAc36C,MAChC66C,GAAiBA,EAAaliD,GAAGqhB,aAAeooJ,IAG/CvnH,GAAwC,YAAxBA,EAAa3U,SAC/Bt8B,EAAazD,SAAS,CACpBtH,QAAiC,WAAxBg8C,EAAa3U,OAAsB,SAAW,UACvDrtC,MAAO6J,EAAE,uBAAwB,CAC/B9J,KAAM21J,EAAqB31J,KAC3BD,GAAIypK,IAEN1mK,UAAUF,EAAAA,EAAAA,KAAA,OAAAE,SAAMm/C,EAAaryC,iBAGxBmtC,EAAI44G,EAAqB51J,IAClC,IAEFwpK,EAAwBxsH,EAAI,EAGlC,CC/BO,SAAS4sH,KACd,MAAM,EAAE7/J,IAAMC,EAAAA,EAAAA,OACR,qBAAE4+J,EAAoB,oBAAEK,EAAmB,eAAES,GAAmBH,KAChEt2I,ECbiBipE,GAAyB,CAC9CC,YAAa,yBACbC,cAAe,CAAC,OAAQ,KAAM,aAAc,eAC5CC,mBAAoB,CAClBp8F,KAAM,CAAEi9F,QAAS,0BACjBl9F,GAAI,CAAEk9F,QAAS,2BAEjBZ,kBAAmB,CATUyB,KACCC,QDe1Bj5D,EAAe4jI,GAAoB,CAAEC,yBACrCj5H,EAAO6zB,GAAiC,CAC5Cvc,IAAKqN,EAAM,2BACXrhC,iBACA8R,iBAEI42B,EAASvC,KACTyE,EAAerW,KAEfhvB,EEdD,SACLuT,GAEA,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR6zD,EAAerW,KACf0hH,EAAkBJ,GAAmB/8H,GAErC89H,EAAuBpjG,GAC3BnS,EAAM,4BACNvxC,KACI+mJ,EAA6BjiK,QACjCgiK,GAAwBA,EAAqB1jK,SAAW0jK,EAAqB1jK,QAAc,MAG7F,OAAOe,EAAAA,EAAAA,UACL,IAAM,CAEJ,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVvH,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,mBACTP,QAASA,IAAMq0D,EAAaJ,GAASssG,yBACrCnmK,WAAYA,IACVkmK,OACItlK,EACAuF,EACE,uIAGV,CACEzD,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,oBACTP,QAAS0/J,EACTtlK,WAAas+C,GAAiB43E,GAAsB53E,EAAcn4C,GAClEI,UAAU,KAGd,CAAC2/J,EAA4BjsG,EAAcqrG,EAAiBn/J,GAEhE,CF9ByBigK,CAA2Br6H,EAAK00B,yBAEjDr/B,EAAa+jI,GAAuB,CACxCh9H,WAAY4D,EAAK00B,wBACjB2kG,iBAAkBA,KACXr5H,EAAKyoB,SAAS,EAErB6wG,sBACA3iK,KAAM,OACNsiK,yBAGIiB,EAAuBpjG,GAC3BnS,EAAM,4BACNvxC,KACI+mJ,EAA6BjiK,QACjCgiK,GAAwBA,EAAqB1jK,SAAW0jK,EAAqB1jK,QAAc,MAU7F,OAPAvH,EAAAA,EAAAA,YAAU,KACJ+wC,EAAKpoB,WACPmiJ,EAAe/5H,EAAKpoB,UACtB,GAEC,CAACooB,EAAKpoB,aAGPpf,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,aACT0U,YAAa1U,EAAE,yEACf+5C,eAAgB/5C,EAAE,aAClB85C,UAAW95C,EAAE,yEACbg6C,aAAc2X,GAAcC,EAAQ,aACpCnY,eAAe3gD,EAAAA,EAAAA,KAACyjE,GAAkB,CAAChgE,KAAM,6BAE3CzD,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,yBACHizB,eAAgBA,EAChB8R,aAAcA,EACdvM,eAAgBA,EAChBwM,WAAYA,EACZ8C,gBAAiB/9B,EAAE,2BACnBg+B,gBAEMh+B,EADJ+/J,EACM,sBACA,mDAER9hI,sBAEMj+B,EADJ+/J,EACM,iDAEA,yFAGR1hI,sBAAsBvlC,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrCwN,qBAAsB2hI,EAA6B//J,EAAE,wBAAqBvF,EAC1E0jC,sBACE4hI,EACI,IAAMjsG,EAAaJ,GAASssG,8BAC5BvlK,KAEFmrC,MAIZ,CGjFO,SAASs6H,GAAUtqK,GACxB,MAAM+1J,EAAoB/1J,EAAM+1J,kBAChC,MAA0B,UAAtBA,GACK7yJ,EAAAA,EAAAA,KAACqnK,GAAS,IAGO,UAAtBxU,GACK7yJ,EAAAA,EAAAA,KAACsnK,GAAS,IAGO,WAAtBzU,GACK7yJ,EAAAA,EAAAA,KAACunK,GAAU,IAGM,cAAtB1U,GACK7yJ,EAAAA,EAAAA,KAACwnK,GAAa,IAGG,YAAtB3U,GACK7yJ,EAAAA,EAAAA,KAACynK,GAAW,IAGK,YAAtB5U,GACK7yJ,EAAAA,EAAAA,KAAC0nK,GAAW,IAGK,eAAtB7U,GACK7yJ,EAAAA,EAAAA,KAAC2nK,GAAc,IAGE,eAAtB9U,GACK7yJ,EAAAA,EAAAA,KAAC4nK,GAAc,IAGE,QAAtB/U,GACK7yJ,EAAAA,EAAAA,KAAC6nK,GAAO,KAGV7nK,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,GACT,CAEA,SAAS2iK,KACP,MAAM,EAAEngK,IAAMC,EAAAA,EAAAA,MACd,OACE7B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAM,OACNrG,KAAM,sCACNE,MAAO4J,EAAE,eAGXlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAM,WACNrG,KAAM,sCACNE,MAAO4J,EAAE,eAGXlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAM,OACNrG,KAAM,kCACNE,MAAO4J,EAAE,QACT8lB,YAAU,KAGZhtB,EAAAA,EAAAA,KAACg7C,GAAgB,CACf59C,KAAM,wCACNE,MAAO4J,EAAE,kBACT8lB,YAAU,EACVmkB,UAAW22H,GAAa,QAAS,aAAc5gK,MAGjDlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAM,OACNrG,KAAM,oCACNE,MAAO4J,EAAE,gBACT8lB,YAAU,EACVyjB,SAAW/1C,GA6dnB,SAAuBA,EAAewM,GAOpC,GAAc,KAAVxM,EACF,OAEF,MAAMqtK,EAAYrtK,GAAO8M,MAAM,KAE/B,OAAIugK,EAAUvkK,QAAU,GAClBukK,EAAU,IAAMA,EAAU,QADhC,EAQO7gK,EAAE,wBACX,CAlf6B8gK,CAActtK,EAAOwM,MAG5ClH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAM,SACNrG,KAAM,kCACNE,MAAO4J,EAAE,QACT8lB,YAAU,EACVyjB,SAAW/1C,GAAUutK,GAAevtK,EAAO,EAAG,MAAOwM,MAGvDlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAM,SACNrG,KAAM,qCACNE,MAAO4J,EAAE,WACT8lB,YAAU,EACVyjB,SAAW/1C,GAAUutK,GAAevtK,EAAO,EAAG,IAAKwM,GACnDiqC,UAAW22H,GAAa,QAAS,UAAW5gK,MAG9C5B,EAAAA,EAAAA,MAACmyC,GAAa,CACZn6C,MAAO4J,EAAE,kBACTkqC,eAAgBlqC,EAAE,iBAClBiqC,WACE7rC,EAAAA,EAAAA,MAACw0G,EAAAA,GAAK,CAAA55G,SAAA,CAAC,aACM,KACXF,EAAAA,EAAAA,KAAA,KAAG+H,KAAK,gFAA+E7H,SAAC,kBAEnF,IAAI,2BAGZA,SAAA,EAEDF,EAAAA,EAAAA,KAACuwC,GAAgB,CACfnzC,KAAM,qCACNE,MAAO4J,EAAE,cAGXlH,EAAAA,EAAAA,KAACuwC,GAAgB,CACfnzC,KAAM,qCACNE,MAAO4J,EAAE,kBAKnB,CAEA,SAASogK,KACP,MAAM,EAAEpgK,IAAMC,EAAAA,EAAAA,MACd,OACE7B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAM,WACNrG,KAAM,mCACNE,MAAO4J,EAAE,SACT8lB,YAAU,KAGZhtB,EAAAA,EAAAA,KAACg7C,GAAgB,CACf59C,KAAM,sCACNE,MAAO4J,EAAE,wBACT8lB,YAAU,EACVmkB,UAAW22H,GAAa,QAAS,WAAY5gK,MAG/ClH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAM,uCACNE,MAAO4J,EAAE,sBACTiqC,UAAW22H,GAAa,QAAS,YAAa5gK,OAItD,CAEA,SAASqgK,KACP,MAAM,EAAErgK,IAAMC,EAAAA,EAAAA,MACd,OACE7B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAM,OACNrG,KAAM,yCACNE,MAAO4J,EAAE,eACT8lB,YAAU,KAGZhtB,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAM,WACNrG,KAAM,2CACNE,MAAO4J,EAAE,iBACT8lB,YAAU,KAGZhtB,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAM,OACNrG,KAAM,yCACNE,MAAO4J,EAAE,uBACTupC,SAAW/1C,GAAUwtK,GAAkBxtK,EAAOwM,GAC9C8lB,YAAU,EACVmkB,UAAW22H,GAAa,SAAU,cAAe5gK,MAGnDlH,EAAAA,EAAAA,KAACg7C,GAAgB,CACf59C,KAAM,wCACNE,MAAO4J,EAAE,2BACTupC,SAAW/1C,GAAUwtK,GAAkBxtK,EAAOwM,GAC9CiqC,UAAW22H,GAAa,SAAU,aAAc5gK,GAChD8lB,YAAU,MAIlB,CAEA,SAASw6I,KACP,MAAM,EAAEtgK,IAAMC,EAAAA,EAAAA,MACd,OACE7B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAM,OACNrG,KAAM,uCACNE,MAAO4J,EAAE,uBACT8lB,YAAU,KAGZhtB,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAM,WACNrG,KAAM,mCACNE,MAAO4J,EAAE,aACT8lB,YAAU,KAGZhtB,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAM,OACNrG,KAAM,yCACNE,MAAO4J,EAAE,+BACT8lB,YAAU,KAGZhtB,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAM,OACNrG,KAAM,yCACNE,MAAO4J,EAAE,qBACT8lB,YAAU,MAIlB,CAEA,SAASy6I,KACP,MAAM,EAAEvgK,IAAMC,EAAAA,EAAAA,MACd,OACE7B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAM,OACNrG,KAAM,yCACNE,MAAO4J,EAAE,eACTiqC,UAAW22H,GAAa,UAAW,cAAe5gK,GAClD8lB,YAAU,KAGZhtB,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAM,WACNrG,KAAM,yCACNE,MAAO4J,EAAE,mBACT8lB,YAAU,KAGZhtB,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAM,yCACNE,MAAO4J,EAAE,0BAGXlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAM,qCACNE,MAAO4J,EAAE,sBAGXlH,EAAAA,EAAAA,KAACg7C,GAAgB,CACf59C,KAAM,6CACNE,MAAO4J,EAAE,2BACTiqC,UAAW22H,GAAa,UAAW,kBAAmB5gK,MAGxDlH,EAAAA,EAAAA,KAACuwC,GAAgB,CACfnzC,KAAM,mDACNE,MAAO4J,EAAE,gCAIjB,CAEA,SAASwgK,KACP,MAAM,EAAExgK,IAAMC,EAAAA,EAAAA,MAMd,OACE7B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAM,OACNrG,KAAM,sCACNE,MAAO4J,EAAE,eAGXlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAM,WACNrG,KAAM,sCACNE,MAAO4J,EAAE,0BAGXlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAM,OACNrG,KAAM,iCACNE,MAAO4J,EAAE,cACT8lB,YAAU,EACVyjB,SAAWp0B,GAAS8rJ,GAAY9rJ,EAAMnV,MAGxClH,EAAAA,EAAAA,KAACuwC,GAAgB,CACfnzC,KAAM,sDACNE,MAAO4J,EAAE,gCAGXlH,EAAAA,EAAAA,KAACm4C,GAAkB,CACjB/6C,KAjCc,qCAkCdE,MAAO4J,EAAE,gBACTuL,OAAO,SACP0+B,UAAW22H,GAAa,UAAW,UAAW5gK,GAC9CkqC,eAAgBlqC,EAAE,mBAGpBlH,EAAAA,EAAAA,KAACm8D,GAAoB,CACnB/+D,KAAM,yCACNE,MAAO4J,EAAE,eACTkf,YAAalf,EAAE,yBACf8lB,YAAU,EACV3G,QAAS,CACP,CAAE/oB,MAAO,OAAQ5C,MAAO,QACxB,CAAE4C,MAAO,MAAO5C,MAAO,YAKjC,CAEA,SAASitK,KACP,MAAM,EAAEzgK,IAAMC,EAAAA,EAAAA,MAEd,OACE7B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAM,OACNrG,KAAM,4CACNE,MAAO4J,EAAE,cACT8lB,YAAU,EACVyjB,SAAWp0B,GAAS8rJ,GAAY9rJ,EAAMnV,MAGxClH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAM,OACNrG,KAAM,iDACNE,MAAO4J,EAAE,eAGXlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAM,OACNrG,KAAM,gDACNE,MAAO4J,EAAE,cAGXlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAM,OACNrG,KAAM,iDACNE,MAAO4J,EAAE,YACTupC,SAAWp0B,GAAS8rJ,GAAY9rJ,EAAMnV,MAGxClH,EAAAA,EAAAA,KAACuwC,GAAgB,CACfnzC,KAAM,sDACNE,MAAO4J,EAAE,kBAIjB,CAEA,SAAS0gK,KACP,MAAM,EAAE1gK,IAAMC,EAAAA,EAAAA,MAEd,OACE7B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAM,OACNrG,KAAM,4CACNE,MAAO4J,EAAE,cACT8lB,YAAU,EACVyjB,SAAWp0B,GAAS8rJ,GAAY9rJ,EAAMnV,MAGxClH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAM,OACNrG,KAAM,iDACNE,MAAO4J,EAAE,eAGXlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAM,OACNrG,KAAM,iDACNE,MAAO4J,EAAE,YACTupC,SAAWp0B,GAAS8rJ,GAAY9rJ,EAAMnV,MAGxClH,EAAAA,EAAAA,KAACuwC,GAAgB,CACfnzC,KAAM,sDACNE,MAAO4J,EAAE,gCAIjB,CAEA,SAAS2gK,KACP,MAAM,EAAE3gK,IAAMC,EAAAA,EAAAA,MACd,OACE7B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAM,WACNrG,KAAM,sCACNE,MAAO4J,EAAE,0BAGXlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAK,SACLrG,KAAM,kCACNE,MAAO4J,EAAE,mBACT8lB,YAAU,KAGZhtB,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAM,OACNrG,KAAM,oCACNE,MAAO4J,EAAE,sBACT8lB,YAAU,EACVyjB,SAAWp0B,GAAS8rJ,GAAY9rJ,EAAMnV,MAGxClH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB34C,KAAM,OACNrG,KAAM,sCACNE,MAAO4J,EAAE,YACT8lB,YAAU,KAGZhtB,EAAAA,EAAAA,KAACg7C,GAAgB,CACf59C,KAAM,qCACNE,MAAO4J,EAAE,iCACT8lB,YAAU,EACVmkB,UAAW22H,GAAa,MAAO,UAAW5gK,MAG5ClH,EAAAA,EAAAA,KAACuwC,GAAgB,CACfnzC,KAAM,qCACNE,MAAO4J,EAAE,iCAIjB,CAEO,SAAS4gK,GACdjV,EACAzmJ,EACAlF,GAEA,MAA0B,UAAtB2rJ,GAAyC,eAARzmJ,EAC5BlF,EACL,4FAIsB,UAAtB2rJ,GAAyC,YAARzmJ,EAC5BlF,EACL,6IAIsB,UAAtB2rJ,GAAyC,aAARzmJ,GAEjC9G,EAAAA,EAAAA,MAACw0G,EAAAA,GAAK,CAAA55G,SAAA,CAAC,sUAIiD,KACtDF,EAAAA,EAAAA,KAAA,KAAG+H,KAAK,iEAAgE7H,SAAC,kBAAkB,IAAI,2BAM3E,UAAtB2yJ,GAAyC,cAARzmJ,EAC5BlF,EACL,kGAIsB,WAAtB2rJ,GAA0C,gBAARzmJ,EAC7BlF,EACL,8FAIsB,WAAtB2rJ,GAA0C,eAARzmJ,EAC7BlF,EACL,yHAIsB,YAAtB2rJ,GAA2C,gBAARzmJ,EAC9BlF,EACL,2HAIsB,YAAtB2rJ,GAA2C,oBAARzmJ,EAC9BlF,EAAE,oDAGe,YAAtB2rJ,GAA2C,YAARzmJ,EAC9BlF,EACL,kHAIsB,QAAtB2rJ,GAAuC,YAARzmJ,EAC1BlF,EACL,mIAIG,IACT,CAEA,SAAS+gK,GACPphF,EACAhnD,EACAlsB,EACAzM,GAEA,MAAMslC,EAAMhyC,OAAOspF,SAAS+C,EAAK,IACjC,KAAIr6C,GAAO3M,GAAO2M,GAAO74B,GAIzB,OAAOzM,EAAE,2EAA4E,CACnF24B,MACAlsB,OAEJ,CAEO,SAASu0J,GAAkBxtK,EAAewM,GAC/C,GAAc,KAAVxM,EACF,OAGF,MAAM0tK,EAAe1tK,GAAO8M,MAAM,MAClC,IAAIwF,EAWJ,OATAo7J,GAAchvI,SAASrvB,IACX,KAANA,IAIC,yCAAyC2kE,KAAK3kE,KACjDiD,EAAQ9F,EAAE,sCACZ,IAEK8F,CACT,CAyBO,SAASm7J,GAAYztK,EAAewM,GACzC,GAAKxM,EAIL,MAEG,oKAAoKg0E,KACnKh0E,QAHJ,EAMSwM,CAAC,0BAGZ,CCplBO,SAASmhK,GAAqBvrK,GAInC,MAAM,IAAQqK,EAAAA,EAAAA,MACR6oJ,GAAcp/G,EAAAA,GAAAA,MACdiiH,EAAoB7C,EAAYt3G,UAAU,sBACzC4vH,EAASC,IAAc7sK,EAAAA,EAAAA,UAAS,IAEvC,IAAI8sK,GAAe,EAEfF,GACEzV,IAAsByV,IACR,KAAZA,IACFE,GAAe,GAEjBD,EAAW1V,GAAqB,KAIpC,IAAI4V,GAAc,EACdC,GAAU,EAEY,UAAtB7V,GAAuD,cAAtBA,IACnC6V,GAAU,GAGc,YAAtB7V,IACF6V,GAAU,EACVD,GAAc,GAGhB,MAAM,KAAEvoJ,EAAI,mBAAEyoJ,GAAuB7rK,EAE/B8rK,EC3CD,SAA4B/V,GACjC,IAAI14G,EAAoB,CACtBorE,QAAS,CAAC,EACVt6E,QAAS,CAAC,EACVj+B,MAAO,CAAC,EACRkuD,kBAAmB,CAAE4R,OAAQ,CAAC,EAAGQ,QAAS,CAAC,EAAGZ,SAAU,CAAC,EAAGm8F,UAAW,CAAC,IAqE1E,MAlE0B,YAAtBhW,IACF14G,EAAM,CACJorE,QAAS,CACPl4G,QAAS,sFAEX49B,QAAS,CACP59B,QAAS,sFAEXL,MAAO,CACLK,QAAS,sFAEX6tD,kBAAmB,CACjB4R,OAAQ,CACNz/D,QAAS,+EAEXigE,QAAS,CACPjgE,QAAS,6GAEXq/D,SAAU,CACRr/D,QAAS,iFAEXw7J,UAAW,CACTx7J,QAAS,qFAMS,UAAtBwlJ,IACF14G,EAAIntC,MAAM7G,KACRg0C,EAAIorE,QAAQp/G,KACZg0C,EAAIlP,QAAQ9kC,KACV,8HAKoB,cAAtB0sJ,GAA2D,YAAtBA,IACvC14G,EAAIntC,MAAM7G,KAAOg0C,EAAIorE,QAAQp/G,KAAOg0C,EAAIlP,QAAQ9kC,KAAO,sBAG/B,UAAtB0sJ,GAAuD,cAAtBA,IACnC14G,EAAI+gB,kBAAkBwR,SAASvmE,KAAO,0GAItCg0C,EAAI+gB,kBAAkB4R,OAAO3mE,KAAO,0GAIpCg0C,EAAI+gB,kBAAkBoS,QAAQnnE,KAAO,iJAIrCg0C,EAAI+gB,kBAAkB2tG,UAAU1iK,KAAO,8GAKf,YAAtB0sJ,IACF14G,EAAI+gB,kBAAkBwR,SAASvmE,KAAO,4FACtCg0C,EAAI+gB,kBAAkB4R,OAAO3mE,KAAO,0FACpCg0C,EAAI+gB,kBAAkBoS,QAAQnnE,KAAO,wHACrCg0C,EAAI+gB,kBAAkB2tG,UAAU1iK,KAAO,8FAGlCg0C,CACT,CDhC0B2uH,CAAmBjW,GACrC9sI,EAAWiqI,EAAYjqI,SACvB2yB,EAAYs3G,EAAYt3G,UAkN9B,OAhNI8vH,IAAuC,IAAvBG,GAClB5iJ,EAAS,WAAY6iJ,IAGI,IAAvBD,IAAgD,IAAjBH,IAE7BC,IACGvoJ,GAAM6oJ,UAAU/7J,OAAOK,QAGrBqrC,EAAU,2BACb3yB,EAAS,yBAA0B7F,EAAK6oJ,SAAS/7J,MAAMK,SAHzD0Y,EAAS,yBAA0B6iJ,EAAgB57J,MAAMK,UAQzDq7J,IAEGxoJ,GAAM6oJ,UAAU/7J,OAAO7G,KAGrBuyC,EAAU,wBACb3yB,EAAS,sBAAuB7F,EAAK6oJ,SAAS/7J,MAAM7G,MAHtD4f,EAAS,sBAAuB6iJ,EAAgB57J,MAAM7G,OAQtDsiK,IAEGvoJ,GAAM6oJ,UAAUxjD,SAASl4G,QAGvBqrC,EAAU,6BACb3yB,EAAS,2BAA4B7F,EAAK6oJ,SAASxjD,QAAQl4G,SAH7D0Y,EAAS,2BAA4B6iJ,EAAgBrjD,QAAQl4G,UAQ7Dq7J,IAEGxoJ,GAAM6oJ,UAAUxjD,SAASp/G,KAGvBuyC,EAAU,0BACb3yB,EAAS,wBAAyB7F,EAAK6oJ,SAASxjD,QAAQp/G,MAH1D4f,EAAS,wBAAyB6iJ,EAAgBrjD,QAAQp/G,OAQ1DsiK,IAEGvoJ,GAAM6oJ,UAAU99H,SAAS59B,QAGvBqrC,EAAU,6BACb3yB,EAAS,2BAA4B7F,EAAK6oJ,SAAS99H,QAAQ59B,SAH7D0Y,EAAS,2BAA4B6iJ,EAAgB39H,QAAQ59B,UAQ7Dq7J,IAEGxoJ,GAAM6oJ,UAAU99H,SAAS9kC,KAGvBuyC,EAAU,0BACb3yB,EAAS,wBAAyB7F,EAAK6oJ,SAAS99H,QAAQ9kC,MAH1D4f,EAAS,wBAAyB6iJ,EAAgB39H,QAAQ9kC,OAQ1DsiK,IAEGvoJ,GAAM6oJ,UAAU7tG,mBAAmBwR,UAAUr/D,QAM3CqrC,EAAU,gDACb3yB,EACE,8CACA7F,EAAK6oJ,SAAS7tG,kBAAkBwR,SAASr/D,SAR7C0Y,EACE,8CACA6iJ,EAAgB1tG,kBAAkBwR,SAASr/D,UAY7Cq7J,IAEGxoJ,GAAM6oJ,UAAU7tG,mBAAmBwR,UAAUvmE,KAM3CuyC,EAAU,6CACb3yB,EACE,2CACA7F,EAAK6oJ,SAAS7tG,kBAAkBwR,SAASvmE,MAR7C4f,EACE,2CACA6iJ,EAAgB1tG,kBAAkBwR,SAASvmE,OAY7CsiK,IAEGvoJ,GAAM6oJ,UAAU7tG,mBAAmB4R,QAAQz/D,QAMzCqrC,EAAU,8CACb3yB,EACE,4CACA7F,EAAK6oJ,SAAS7tG,kBAAkB4R,OAAOz/D,SAR3C0Y,EACE,4CACA6iJ,EAAgB1tG,kBAAkB4R,OAAOz/D,UAY3Cq7J,IACGxoJ,GAAM6oJ,UAAU7tG,mBAAmB4R,QAAQ3mE,KAOzCuyC,EAAU,2CACb3yB,EACE,yCACA7F,EAAK6oJ,SAAS7tG,kBAAkB4R,OAAO3mE,MAR3C4f,EACE,yCACA6iJ,EAAgB1tG,kBAAkB4R,OAAO3mE,OAY3CsiK,IAEGvoJ,GAAM6oJ,UAAU7tG,mBAAmBoS,SAASjgE,QAM1CqrC,EAAU,+CACb3yB,EACE,6CACA7F,EAAK6oJ,SAAS7tG,kBAAkBoS,QAAQjgE,SAR5C0Y,EACE,6CACA6iJ,EAAgB1tG,kBAAkBoS,QAAQjgE,UAY5Cq7J,IAEGxoJ,GAAM6oJ,UAAU7tG,mBAAmBoS,SAASnnE,KAM1CuyC,EAAU,4CACb3yB,EACE,0CACA7F,EAAK6oJ,SAAS7tG,kBAAkBoS,QAAQnnE,MAR5C4f,EACE,0CACA6iJ,EAAgB1tG,kBAAkBoS,QAAQnnE,OAY5CsiK,IAEGvoJ,GAAM6oJ,UAAU7tG,mBAAmB2tG,WAAWx7J,QAM5CqrC,EAAU,iDACb3yB,EACE,+CACA7F,EAAK6oJ,SAAS7tG,kBAAkB2tG,UAAUx7J,SAR9C0Y,EACE,+CACA6iJ,EAAgB1tG,kBAAkB2tG,UAAUx7J,UAY9Cq7J,IAEGxoJ,GAAM6oJ,UAAU7tG,mBAAmB2tG,WAAW1iK,KAM5CuyC,EAAU,8CACb3yB,EACE,4CACA7F,EAAK6oJ,SAAS7tG,kBAAkB2tG,UAAU1iK,MAR9C4f,EACE,4CACA6iJ,EAAgB1tG,kBAAkB2tG,UAAU1iK,SAazB,IAAvBwiK,GACK3oK,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,KAIPY,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,CACGuoK,IACCzoK,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,2BACLE,MAAO4J,EAAE,mBAGZwhK,IACC1oK,EAAAA,EAAAA,KAACg7C,GAAgB,CACf59C,KAAK,wBACLE,MAAO4J,EAAE,wBAIZuhK,IACCzoK,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,2BACLE,MAAO4J,EAAE,qBAIZwhK,IACC1oK,EAAAA,EAAAA,KAACg7C,GAAgB,CACf59C,KAAK,wBACLE,MAAO4J,EAAE,0BAIZuhK,IACCzoK,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,yBACLE,MAAO4J,EAAE,mBAIZwhK,IACC1oK,EAAAA,EAAAA,KAACg7C,GAAgB,CACf59C,KAAK,sBACLE,MAAO4J,EAAE,wBAIZuhK,IACCzoK,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,8CACLE,MAAO4J,EAAE,+BAIZwhK,IACC1oK,EAAAA,EAAAA,KAACg7C,GAAgB,CACf59C,KAAK,2CACLE,MAAO4J,EAAE,4BAIZuhK,IACCzoK,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,4CACLE,MAAO4J,EAAE,6BAIZwhK,IACC1oK,EAAAA,EAAAA,KAACg7C,GAAgB,CACf59C,KAAK,yCACLE,MAAO4J,EAAE,kCAIZuhK,IACCzoK,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,6CACLE,MAAO4J,EAAE,8BAIZwhK,IACC1oK,EAAAA,EAAAA,KAACg7C,GAAgB,CACf59C,KAAK,0CACLE,MAAO4J,EAAE,mCAIZuhK,IACCzoK,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,+CACLE,MAAO4J,EAAE,gCAIZwhK,IACC1oK,EAAAA,EAAAA,KAACg7C,GAAgB,CACf59C,KAAK,4CACLE,MAAO4J,EAAE,uCAKnB,CExUO,SAAS8hK,KACd,OAAOhpK,EAAAA,EAAAA,KAACipK,GAAY,CAAChmC,KAAM,QAC7B,CAEO,SAASimC,KACd,OAAOlpK,EAAAA,EAAAA,KAACipK,GAAY,CAAChmC,KAAM,OAC7B,CAmBA,SAASgmC,GAAansK,GACpB,MAAM,IAAQqK,EAAAA,EAAAA,MACRy9C,EAAaT,MACb,KAAE8+E,GAASnmI,EACXunD,GAASgZ,EAAAA,GAAAA,KAET8rG,EAAkBlzG,GADA,QAATgtE,EAAiB,GAAKxxE,EAAM,2BAA2BpN,EAAOlnD,IAAM,OAE7EiY,GAAWC,EAAAA,GAAAA,MACX2lD,EAAerW,MACdykH,EAAeC,IAAoB3tK,EAAAA,EAAAA,UAAiB,IAErD2nE,EAAeP,KACfvT,EAAcyT,KAEdsmG,EAAiB1lG,GAAwCnS,EAAM,4BAErE,GAAI03G,EAAgBn8J,MAClB,OAAOhN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOm8J,EAAgBn8J,QAG1C,GAAIs8J,EAAet8J,MACjB,OAAOhN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOs8J,EAAet8J,QAGzC,IAAKm8J,EAAgBjpJ,MAAiB,SAAT+iH,EAC3B,OAAOjjI,EAAAA,EAAAA,KAACkqD,GAAW,IAGrB,IAAKo/G,EAAeppJ,KAClB,OAAOlgB,EAAAA,EAAAA,KAACkqD,GAAW,IAGrB,MAAMt8B,EAAwB,QAATq1G,EAAiB,CAAC,EAAIkmC,EAAgBjpJ,KAEvD0N,GAAyB,SAATq1G,GAmNtB,SAAwB/iH,GACtB,GAAKA,EAAKqpJ,2BAIV,IAAK,MAAMn9J,KAAO8T,EAAKqpJ,2BAA4B,CACjD,IAAKC,GAAOp9J,EAAK8T,EAAK2yI,mBAAqB,IACzC,SAIF,MAAMz1H,EAAMld,GAAMqpJ,2BAA2Bn9J,GACzCgxB,GAAOA,EAAI31B,OACbyY,EAAKqpJ,2BAA2Bn9J,GAAOgxB,EAAI31B,KAAK,MAEpD,CACF,CAlOIgiK,CAAe77I,GAGjB,MACM87I,GF6RyBxpJ,EE9RF0N,IFgS3B1N,GAAM6oJ,UAAU/7J,OAAOK,SACvB6S,GAAM6oJ,UAAU/7J,OAAO7G,MACvB+Z,GAAM6oJ,UAAUxjD,SAASl4G,SACzB6S,GAAM6oJ,UAAUxjD,SAASp/G,MACzB+Z,GAAM6oJ,UAAU99H,SAAS59B,SACzB6S,GAAM6oJ,UAAU99H,SAAS9kC,MACzB+Z,GAAM6oJ,UAAU7tG,mBAAmBwR,UAAUr/D,SAC7C6S,GAAM6oJ,UAAU7tG,mBAAmBwR,UAAUvmE,MAC7C+Z,GAAM6oJ,UAAU7tG,mBAAmB4R,QAAQz/D,SAC3C6S,GAAM6oJ,UAAU7tG,mBAAmB4R,QAAQ3mE,MAC3C+Z,GAAM6oJ,UAAU7tG,mBAAmBoS,SAASjgE,SAC5C6S,GAAM6oJ,UAAU7tG,mBAAmBoS,SAASnnE,MAC5C+Z,GAAM6oJ,UAAU7tG,mBAAmB2tG,WAAWx7J,SAC9C6S,GAAM6oJ,UAAU7tG,mBAAmB2tG,WAAW1iK,OAf3C,IAA0B+Z,EE3R3B0N,GAAgB87I,IACjB97I,EAAsC+6I,oBAAqB,GAG9D,MAAMvoH,EAAoC,CACxC,CAAE9iD,MAAO4J,EAAE,aAAcY,GAAI88C,EAAWgW,GAAS+uG,wBACjD,CACErsK,MAEM4J,EADK,QAAT+7H,EACM,kBACFkmC,GAAiBjpJ,MAAM9iB,KACnB,QAAQ+rK,EAAgBjpJ,KAAK9iB,OAC7B,mBAsFd,OAlFIwwB,IAAiB87I,IAClB97I,EAAsC+6I,oBAAqB,IAkF5DrjK,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAEM6J,EADK,QAAT+7H,EACM,kBACFkmC,GAAiBjpJ,MAAM9iB,KACnB,QAAQ+rK,EAAgBjpJ,KAAK9iB,OAC7B,iBAEVgjD,YAAaA,KAEf96C,EAAAA,EAAAA,MAAC29D,GAAW,CACV5jE,WAAY6H,EAAE,iBACdw3B,SA5FwDhwB,UAC5D,IACE,MAAMwR,EACK,QAAT+iH,EACI57E,EACC,CACCzrC,YAAayrC,EAASzrC,YACtBmtJ,SAAU1hH,EAAS0hH,SACnB3rK,KAAMiqD,EAASjqD,KACfmsK,2BAA4BliH,EAASkiH,2BACrC1W,kBAAmBxrG,EAASwrG,kBAC5BziF,aAAc/oB,EAAS+oB,aACvBu4F,mBAAqBthH,EAAkCshH,oBAU/D,IAAIiB,GAoLV,SAAwB1pJ,GACtB,GAAKA,EAAKqpJ,2BAIV,IAAK,MAAMn9J,KAAO8T,EAAKqpJ,2BAA4B,CACjD,IAAKC,GAAOp9J,EAAK8T,EAAK2yI,mBAAqB,IACzC,SAIF,MAAMhsE,EAAM3mE,GAAMqpJ,2BAA2Bn9J,GACzCy6E,GAAOA,EAAIr/E,QACb0Y,EAAKqpJ,2BAA2Bn9J,GAAOy6E,EAAIr/E,MAAM,MAErD,CACF,CA3MMqiK,CAAe3pJ,IAE2C,IAArDA,EAA8ByoJ,qBACjCzoJ,EAAK6oJ,SAAW,aAEV7oJ,EAA8ByoJ,mBAItC,MAAMl3C,EACJ63C,EAAeppJ,MAAM5c,QAAQmhE,IAAI8kG,2BAA2BrpJ,EAAK2yI,mBAAqB,IACxF,GAAIphC,EAAQ,CACV,MAAM83C,EAA6BrpJ,EAAKqpJ,2BACxC,IAAK,MAAMv4H,KAASygF,EAAQ,CAQ1B,GAPK83C,EAA2Bv4H,KAC9B44H,EAAan4C,EAAOzgF,GACpBu4H,EAA2Bv4H,GAAS,IAItC44H,EAAan4C,EAAOzgF,GACI,QAApB44H,EAAWnmK,KAAgB,CAC7B,MAAM/I,EAAQ6uK,EAA2Bv4H,GACpB,iBAAVt2C,IACT6uK,EAA2Bv4H,GAASx2C,OAAOspF,SAASppF,EAAO,IAE/D,CAEwB,SAApBkvK,EAAWnmK,MAAyD,KAAtC8lK,EAA2Bv4H,KAC3Du4H,EAA2Bv4H,IAAS,EAExC,CACF,CAE+B,YAA3B9wB,EAAK2yI,oBACF3yI,EAAKqpJ,2BAA2Bt7G,UACnC/tC,EAAKqpJ,2BAA2Bt7G,QAAU,CAAC,IAI/C,IAAIpqD,EAA0B,CAAC,EAClB,QAATo/H,EACFp/H,QAAgB0rD,EAAYkC,EAAM,2BAA4BvxC,SAExDmjD,EAAa5R,EAAM,2BAA2BpK,EAASlqD,IAAIqhB,YAAc,MAAO0B,GAGxF,MAAM/iB,EAAc,QAAT8lI,EAAiBp/H,GAAQ1G,GAAKkqD,EAASlqD,GAClD69D,EAAaJ,GAASo4F,4BAA6B,CAAE3uG,OAAQ,CAAElnD,OACjE,CAAE,MAAOmT,GACP,MAAMq8H,EAAKr8H,EACX,GAAIq8H,GAAIxmI,MAAM4iK,SAAU,CACtB,MAAMe,EAAO15J,KAAKa,UAAU07H,EAAGxmI,KAAK4iK,SAAU,KAAM,GACpDM,EAAiBS,EACnB,CACA,MAAMn9B,CACR,GAsBIlvI,WAAYyJ,EAAE,UACdsmC,SAAUA,IAAMp4B,GAAU,GAC1BwY,aAAcA,EAAa1tB,SAAA,EAE3BoF,EAAAA,EAAAA,MAACygE,GAAe,CAAA7lE,SAAA,EACdF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,OACLE,MAAO4J,EAAE,QACTkf,YAAalf,EAAE,gBACf8lB,YAAU,EACVkuB,UAAW,OAEbl7C,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,cACLE,MAAO4J,EAAE,eACTkf,YAAalf,EAAE,0BAEjBlH,EAAAA,EAAAA,KAACgtH,GAA0B,CAAuB5vH,KAAK,eAAe4vB,YAAU,KAChFhtB,EAAAA,EAAAA,KAACm8D,GAAoB,CACnB/+D,KAAK,oBACLD,GAAG,oBACHG,MAAO4J,EAAE,QACTkf,YAAalf,EAAE,8BACf8lB,YAAY,EACZ3G,QAAS,CACP,CAAE3rB,MAAO,QAAS4C,MAAO4J,EAAE,UAC3B,CAAExM,MAAO,UAAW4C,MAAO4J,EAAE,YAC7B,CAAExM,MAAO,MAAO4C,MAAO4J,EAAE,QACzB,CAAExM,MAAO,aAAc4C,MAAO4J,EAAE,eAChC,CAAExM,MAAO,YAAa4C,MAAO4J,EAAE,cAC/B,CAAExM,MAAO,aAAc4C,MAAO4J,EAAE,gBAChC,CAAExM,MAAO,QAAS4C,MAAO4J,EAAE,UAC3B,CAAExM,MAAO,SAAU4C,MAAO4J,EAAE,WAC5B,CAAExM,MAAO,UAAW4C,MAAO4J,EAAE,mBAInClH,EAAAA,EAAAA,KAAC+lE,GAAe,CAAA7lE,UACdF,EAAAA,EAAAA,KAACskG,GAAa,CAACliC,MAAM,oBAAmBliE,SACpC2yJ,IACA7yJ,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,UACEF,EAAAA,EAAAA,KAACy3C,GAAa,CAACn6C,MAAO4J,EAAE,gBAAgBhH,UACtCF,EAAAA,EAAAA,KAAConK,GAAS,CAACvU,kBAAmBA,aAMxC7yJ,EAAAA,EAAAA,KAAC+lE,GAAe,CAAA7lE,UACdF,EAAAA,EAAAA,KAAC86C,GAAc,CACb3J,WACE7rC,EAAAA,EAAAA,MAACw0G,EAAAA,GAAK,CAAA55G,SAAA,CAAC,iKAEqEF,EAAAA,EAAAA,KAAA,UAC1EA,EAAAA,EAAAA,KAAA,SACC,CAAE+pK,kBA1ES,yBA0EW,KAAG,CAAE3lH,IAzE9B,WAyEoC,KAAG,CAAE1Z,OAxEtC,cAwE+C,KAAC1qC,EAAAA,EAAAA,KAAA,UACjDA,EAAAA,EAAAA,KAAA,SAAM,kGAEO,KACbA,EAAAA,EAAAA,KAAA,KAAG+H,KAAK,sHAAqH7H,SAAC,yCAKlI9C,KAAM,qBACNE,MAAO4J,EAAE,2BAIblH,EAAAA,EAAAA,KAAC+lE,GAAe,CAAC12B,cAAY,EAAAnvC,UAC3BF,EAAAA,EAAAA,KAACskG,GAAa,CAACliC,MAAM,qBAAoBliE,SACrCyoK,IAEErjK,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAA,OAAK6B,MAAO,CAAEvF,MAAOD,EAAmB,QAAS6D,SAAEkpK,KAEjDppK,EAAAA,EAAAA,KAACqoK,GAAoB,CACnBM,mBAAoBA,EACpBzoJ,KAAMipJ,EAAgBjpJ,mBAW5C,CAsCA,SAASspJ,GAAOp9J,EAAaymJ,GAC3B,MAAY,eAARzmJ,GAA8C,UAAtBymJ,GAIhB,aAARzmJ,GAA4C,UAAtBymJ,GAId,eAARzmJ,GAA8C,WAAtBymJ,GAIhB,oBAARzmJ,GAAmD,YAAtBymJ,GAIrB,YAARzmJ,GAA2C,QAAtBymJ,CAK3B,CC3VO,SAASmX,KACd,MAAM,EAAE9iK,IAAMC,EAAAA,EAAAA,OACR,qBAAE4rJ,EAAoB,YAAEkX,IAAgB3uB,EAAAA,GAAAA,MAIxC12F,EAAaT,KACb6W,EAAerW,KAEfja,EACJqoH,EAAqB53F,eAAe6qG,qBAAqBxiK,OAAS,EAC9DuvJ,EAAqB53F,eAAe6qG,qBAAqB,GAAGt7H,OAC5D,GACN,OACE1qC,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,UACEoF,EAAAA,EAAAA,MAACuR,GAAU,CAAA3W,SAAA,EACToF,EAAAA,EAAAA,MAACoc,GAAW,CAACU,eAAe,EAAKliB,SAAA,EAC/BF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,QAAQhH,SAAE6yJ,EAAqB31J,QACpD4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,eAAehH,SAAE6yJ,EAAqBn3I,cAC1D8uB,IACCplC,EAAAA,EAAAA,MAAC4b,GAAU,CAAC5jB,MAAO4J,EAAE,UAAUhH,SAAA,EACZ,IAAhB+pK,IAAyBjqK,EAAAA,EAAAA,KAACysE,GAAW,CAAC/hC,OAAQA,KAC9B,IAAhBu/H,IAAwBjqK,EAAAA,EAAAA,KAACysE,GAAW,CAAC/hC,OAAQ,gBAGlD1qC,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,WAAWhH,UAC9BF,EAAAA,EAAAA,KAACqS,GAAY,CACX3X,MAAOq4J,EAAqB13F,QAC5B/oD,OAAQygJ,EAAqB53F,gBAAgByU,YAAYhU,SACzDj1D,QAASA,IACPq0D,EAAaJ,GAASiB,YAAa,CACjCxX,OAAQ,CAAElnD,GAAI41J,EAAqB53F,gBAAgByU,YAAYzyE,WAKvE6C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,iBAAiBhH,UACpCF,EAAAA,EAAAA,KAACqS,GAAY,CACX3X,MAAOq4J,EAAqBhjF,SAC5Bz9D,OAAQygJ,EAAqB53F,gBAAgB8U,aAAarU,SAC1Dj1D,QAASA,IACPq0D,EAAaJ,GAASiB,YAAa,CACjCxX,OAAQ,CAAElnD,GAAI41J,EAAqB53F,gBAAgB8U,aAAa9yE,WAMxE6C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,gBAAgBhH,UACnCF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS62B,oBAAqB,CAC3CptC,OAAQ,CAAElnD,GAAI41J,EAAqB53F,eAAeiV,aAAajzE,MAC9D+C,SAEF6yJ,EAAqB53F,eAAeiV,aAAahzE,UAGtD4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,qBAAqBhH,SACvC6yJ,EAAqBF,qBAGxB7yJ,EAAAA,EAAAA,KAACkqK,GAAiB,CAACnX,qBAAsBA,OAE1CA,EAAqBgW,WACpB/oK,EAAAA,EAAAA,KAACmqK,GAAc,CAACpX,qBAAsBA,QAKhD,CAEA,SAASoX,GAAertK,GACtB,MAAMisK,EAAWjsK,EAAMi2J,qBAAqBgW,SAC5C,OACE/oK,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,UACEoF,EAAAA,EAAAA,MAACoc,GAAW,CAACK,gBAAgB,SAASK,eAAe,EAAKliB,SAAA,CACvD6oK,GAAUxjD,SAASl4G,UAClBrN,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,OAAO4J,EAAAA,GAAAA,GAAE,iBAAiBhH,SAAE6oK,GAAUxjD,SAASl4G,UAG5D07J,GAAUxjD,SAASp/G,OAClBnG,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,OAAO4J,EAAAA,GAAAA,GAAE,sBAAsBhH,SAAE6oK,GAAUxjD,SAASp/G,OAGjE4iK,GAAU99H,SAAS59B,UAClBrN,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,OAAO4J,EAAAA,GAAAA,GAAE,mBAAmBhH,SAAE6oK,GAAU99H,SAAS59B,UAG9D07J,GAAU99H,SAAS9kC,OAClBnG,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,OAAO4J,EAAAA,GAAAA,GAAE,wBAAwBhH,SAAE6oK,GAAU99H,SAAS9kC,OAGnE4iK,GAAU/7J,OAAOK,UAChBrN,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,OAAO4J,EAAAA,GAAAA,GAAE,iBAAiBhH,SAAE6oK,GAAU/7J,OAAOK,UAG1D07J,GAAU/7J,OAAO7G,OAChBnG,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,OAAO4J,EAAAA,GAAAA,GAAE,sBAAsBhH,SAAE6oK,GAAU/7J,OAAO7G,OAG/D4iK,GAAU7tG,mBAAmBwR,UAAUr/D,UACtCrN,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,OAAO4J,EAAAA,GAAAA,GAAE,6BAA6BhH,SAC/C6oK,GAAU7tG,mBAAmBwR,UAAUr/D,UAI3C07J,GAAU7tG,mBAAmBwR,UAAUvmE,OACtCnG,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,OAAO4J,EAAAA,GAAAA,GAAE,kCAAkChH,SACpD6oK,GAAU7tG,mBAAmBwR,UAAUvmE,OAI3C4iK,GAAU7tG,mBAAmB4R,QAAQz/D,UACpCrN,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,OAAO4J,EAAAA,GAAAA,GAAE,2BAA2BhH,SAC7C6oK,GAAU7tG,mBAAmB4R,QAAQz/D,UAIzC07J,GAAU7tG,mBAAmB4R,QAAQ3mE,OACpCnG,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,OAAO4J,EAAAA,GAAAA,GAAE,gCAAgChH,SAClD6oK,GAAU7tG,mBAAmB4R,QAAQ3mE,OAIzC4iK,GAAU7tG,mBAAmBoS,SAASjgE,UACrCrN,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,OAAO4J,EAAAA,GAAAA,GAAE,4BAA4BhH,SAC9C6oK,GAAU7tG,mBAAmBoS,SAASjgE,UAI1C07J,GAAU7tG,mBAAmBoS,SAASnnE,OACrCnG,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,OAAO4J,EAAAA,GAAAA,GAAE,iCAAiChH,SACnD6oK,GAAU7tG,mBAAmBoS,SAASnnE,OAI1C4iK,GAAU7tG,mBAAmB2tG,WAAWx7J,UACvCrN,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,OAAO4J,EAAAA,GAAAA,GAAE,8BAA8BhH,SAChD6oK,GAAU7tG,mBAAmB2tG,WAAWx7J,UAI5C07J,GAAU7tG,mBAAmB2tG,WAAW1iK,OACvCnG,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,OAAO4J,EAAAA,GAAAA,GAAE,mCAAmChH,SACrD6oK,GAAU7tG,mBAAmB2tG,WAAW1iK,WAMrD,CAEA,SAAS+jK,GAAkBptK,GACzB,MAAM,qBAAEi2J,GAAyBj2J,EACjC,OACEkD,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SACG2J,OAAO4f,KAAKspI,EAAqBwW,4BAA8B,CAAC,GAAGxiK,KAAKqF,IACvE,IACE,IAAI1R,EAAQq4J,EAAqBwW,2BAA2Bn9J,GAKxDg+J,GAAS,EACT/mI,GAAO,EAgBX,GAfIpqB,MAAMC,QAAQxe,IAChB2oC,GAAO,EACP3oC,EAAQA,EAAM+M,KAAK,OAEE,iBAAV/M,IACTA,EAAQ0V,KAAKa,UAAUvW,OAAOiH,EAAW,GACzCyoK,GAAS,QAICzoK,IAAVjH,IACFA,EAAQ,IAII,gBAAVA,EACF,OAAOsF,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,IAGT,IAAI2lK,EAkCd,SAAuBxX,EAAkCzmJ,GACvD,GAA0B,UAAtBymJ,EAA+B,CACjC,GAAY,aAARzmJ,EAAoB,OAAOlF,EAAAA,GAAAA,GAAE,YACjC,GAAY,aAARkF,EAAoB,OAAOlF,EAAAA,GAAAA,GAAE,YACjC,GAAY,SAARkF,EAAgB,OAAOlF,EAAAA,GAAAA,GAAE,QAC7B,GAAY,eAARkF,EAAsB,OAAOlF,EAAAA,GAAAA,GAAE,kBACnC,GAAY,WAARkF,EAAkB,OAAOlF,EAAAA,GAAAA,GAAE,gBAC/B,GAAY,SAARkF,EAAgB,OAAOlF,EAAAA,GAAAA,GAAE,QAC7B,GAAY,YAARkF,EAAmB,OAAOlF,EAAAA,GAAAA,GAAE,WAChC,GAAY,YAARkF,EAAmB,OAAOlF,EAAAA,GAAAA,GAAE,WAChC,GAAY,YAARkF,EAAmB,OAAOlF,EAAAA,GAAAA,GAAE,UAClC,CAEA,GAA0B,UAAtB2rJ,EAA+B,CACjC,GAAY,UAARzmJ,EAAiB,OAAOlF,EAAAA,GAAAA,GAAE,SAC9B,GAAY,aAARkF,EAAoB,OAAOlF,EAAAA,GAAAA,GAAE,wBACjC,GAAY,cAARkF,EAAqB,OAAOlF,EAAAA,GAAAA,GAAE,qBACpC,CAEA,GAA0B,WAAtB2rJ,EAAgC,CAClC,GAAY,gBAARzmJ,EAAuB,OAAOlF,EAAAA,GAAAA,GAAE,eACpC,GAAY,kBAARkF,EAAyB,OAAOlF,EAAAA,GAAAA,GAAE,iBACtC,GAAY,gBAARkF,EAAuB,OAAOlF,EAAAA,GAAAA,GAAE,uBACpC,GAAY,eAARkF,EAAsB,OAAOlF,EAAAA,GAAAA,GAAE,0BACrC,CAEA,GAA0B,cAAtB2rJ,EAAmC,CACrC,GAAY,cAARzmJ,EAAqB,OAAOlF,EAAAA,GAAAA,GAAE,uBAClC,GAAY,gBAARkF,EAAuB,OAAOlF,EAAAA,GAAAA,GAAE,+BACpC,GAAY,gBAARkF,EAAuB,OAAOlF,EAAAA,GAAAA,GAAE,oBACtC,CAEA,GAA0B,YAAtB2rJ,EAAiC,CACnC,GAAY,gBAARzmJ,EAAuB,OAAOlF,EAAAA,GAAAA,GAAE,eACpC,GAAY,gBAARkF,EAAuB,OAAOlF,EAAAA,GAAAA,GAAE,mBACpC,GAAY,gBAARkF,EAAuB,OAAOlF,EAAAA,GAAAA,GAAE,uBACpC,GAAY,YAARkF,EAAmB,OAAOlF,EAAAA,GAAAA,GAAE,mBAChC,GAAY,oBAARkF,EAA2B,OAAOlF,EAAAA,GAAAA,GAAE,2BACxC,GAAY,0BAARkF,EAAiC,OAAOlF,EAAAA,GAAAA,GAAE,2BAChD,CAEA,GAA0B,YAAtB2rJ,EAAiC,CACnC,GAAY,aAARzmJ,EAAoB,OAAOlF,EAAAA,GAAAA,GAAE,YACjC,GAAY,aAARkF,EAAoB,OAAOlF,EAAAA,GAAAA,GAAE,uBACjC,GAAY,QAARkF,EAAe,OAAOlF,EAAAA,GAAAA,GAAE,cAC5B,GAAY,6BAARkF,EAAoC,OAAOlF,EAAAA,GAAAA,GAAE,6BACjD,GAAY,gBAARkF,EAAuB,OAAOlF,EAAAA,GAAAA,GAAE,eACpC,GAAY,YAARkF,EAAmB,OAAOlF,EAAAA,GAAAA,GAAE,UAClC,CAEA,GAA0B,eAAtB2rJ,EAAoC,CACtC,GAAY,mBAARzmJ,EAA0B,OAAOlF,EAAAA,GAAAA,GAAE,cACvC,GAAY,wBAARkF,EAA+B,OAAOlF,EAAAA,GAAAA,GAAE,YAC5C,GAAY,uBAARkF,EAA8B,OAAOlF,EAAAA,GAAAA,GAAE,WAC3C,GAAY,wBAARkF,EAA+B,OAAOlF,EAAAA,GAAAA,GAAE,YAC5C,GAAY,6BAARkF,EAAoC,OAAOlF,EAAAA,GAAAA,GAAE,aACnD,CAEA,GAA0B,eAAtB2rJ,EAAoC,CACtC,GAAY,mBAARzmJ,EAA0B,OAAOlF,EAAAA,GAAAA,GAAE,cACvC,GAAY,wBAARkF,EAA+B,OAAOlF,EAAAA,GAAAA,GAAE,YAC5C,GAAY,wBAARkF,EAA+B,OAAOlF,EAAAA,GAAAA,GAAE,YAC5C,GAAY,6BAARkF,EAAoC,OAAOlF,EAAAA,GAAAA,GAAE,2BACnD,CAEA,GAA0B,QAAtB2rJ,EAA6B,CAC/B,GAAY,WAARzmJ,EAAkB,OAAOlF,EAAAA,GAAAA,GAAE,sBAC/B,GAAY,aAARkF,EAAoB,OAAOlF,EAAAA,GAAAA,GAAE,YACjC,GAAY,YAARkF,EAAmB,OAAOlF,EAAAA,GAAAA,GAAE,iCAChC,GAAY,aAARkF,EAAoB,OAAOlF,EAAAA,GAAAA,GAAE,uBACjC,GAAY,SAARkF,EAAgB,OAAOlF,EAAAA,GAAAA,GAAE,mBAC7B,GAAY,YAARkF,EAAmB,OAAOlF,EAAAA,GAAAA,GAAE,4BAClC,CAEA,MAAO,EACT,CA7GwBojK,CAAcvX,EAAqBF,kBAAmBzmJ,GAE/Di+J,IACHA,EAAUj+J,GAIZ,MAAM+kC,EAAY22H,GAAa/U,EAAqBF,mBAAqB,GAAIzmJ,EAAKlF,GAAAA,GAElF,OAAKm8B,GAAS+mI,GAQVpqK,EAAAA,EAAAA,KAACkhB,GAAU,CAAW5jB,MAAO+sK,EAASlpJ,SAAUgwB,EAAUjxC,UACxDF,EAAAA,EAAAA,KAAC47C,GAAAA,GAAQ,CAAClhD,MAAOA,EAAM8jB,WAAY+rJ,iBAAiB,EAAOC,KAAM,KADlDp+J,IANjBpM,EAAAA,EAAAA,KAACkhB,GAAU,CAAW5jB,MAAO+sK,EAASlpJ,SAAUgwB,EAAUjxC,SACvDxF,EAAM8jB,YADQpS,EAWvB,CAAE,MAAO0C,GACP,OACE9O,EAAAA,EAAAA,KAACkhB,GAAU,CAAW5jB,MAAO8O,EAAIlM,UAC9BgH,EAAAA,GAAAA,GAAE,2BADYkF,EAIrB,MAIR,CC/MO,SAASq+J,KACd,MAAM,EAAEvjK,IAAMC,EAAAA,EAAAA,MACRk9C,GAASgZ,EAAAA,GAAAA,KACT5D,EAAiBm9D,GAAsB,0BACvC,qBAAEmvC,EAAoB,oBAAEK,EAAmB,eAAES,GAAmBH,MAGhE,MACJ15J,EACAkT,KAAM6yI,EAAoB,QAC1Bx9F,GACEc,GAAiC5E,EAAM,0BAA2BpN,EAAOlnD,GAAI,CAC/EoT,qBAA2D5O,IAA1CokK,EAAqB1hH,EAAOlnD,IAAM,IAAoB,IAAO,MAG1E69D,EAAerW,KAEfC,EAAaT,KACbyvF,EAAcsyB,GAAuB,CACzCh9H,WAAYA,KACV8xB,EAAaJ,GAAS+uG,sBAAsB,EAE9CvD,sBACA3iK,KAAM,SACNsiK,yBAUF,IAPAhqK,EAAAA,EAAAA,YAAU,KACJg3J,GACF8T,EAAe,CAAC9T,GAClB,GAEC,CAACA,IAEA/lJ,EAAO,OAAOhN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,IACzD,IAAKw9F,EAAsB,OAAO/yJ,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,IAG/D,MAAMy8G,EAAiBb,EAAqBhT,EAAqB51J,GAAGqhB,YAEpE,OACElZ,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO01J,GAAsB31J,KAC7BgjD,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,aAAcY,GAAI88C,EAAWgW,GAAS+uG,wBACjD,CAAErsK,MAAOy1J,GAAsB31J,OAEjCujD,eACE3gD,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAAS,IAAIm2D,KAAmBm6E,GAChCxwI,SAAU6F,GAAAA,GAAiBC,MAC3B3I,aAAcwyJ,OAIpB/yJ,EAAAA,EAAAA,KAAC09D,GAAc,CACbe,QAAS,CACPnhE,MAAO4J,EAAE,qBACTiuB,KAAMylC,GAAS+uG,sBACfjrG,oBAAqB,oBAEvBvU,KAAM,CACJ,CAAE7sD,MAAO4J,EAAE,WAAYiuB,KAAMylC,GAASo4F,6BACtC,CAAE11J,MAAO4J,EAAE,eAAgBiuB,KAAMylC,GAAS8vG,gCAC1C,CAAEptK,MAAO4J,EAAE,eAAgBiuB,KAAMylC,GAAS+vG,iCAE5CtmH,OAAQA,EACR+a,gBAAiB,CACf2zF,uBACAkX,iBAAgCtoK,IAAnBilK,OAKvB,CC9FO,SAASgE,KACd,MAAMvmH,GAASgZ,EAAAA,GAAAA,KACf,OACEr9D,EAAAA,EAAAA,KAAC0/H,GAAU,CACTzsC,QAAQ,MACR91F,GAAIknD,EAAOlnD,IAAM,GACjBsG,KAAM,uBACNg8H,cAAe7kE,GAASiwG,sBAG9B,CCVO,SAASC,KACd,MAAMzmH,GAASgZ,EAAAA,GAAAA,KACf,OACEr9D,EAAAA,EAAAA,KAAC6/H,GAAU,CACT5sC,QAAQ,MACR91F,GAAIknD,EAAOlnD,IAAM,GACjBsG,KAAM,uBACNg8H,cAAe7kE,GAASmwG,sBAG9B,CCmBO,SAASC,KACd,MAAM,EAAE9jK,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KACbE,GAASgZ,EAAAA,GAAAA,MAEPn9C,KAAM0uD,EAAU,UAAExlD,GAAc6sC,GACtCxE,EAAM,2BAA2BpN,EAAOlnD,IAAM,OAE1CutH,EAAqBF,KACrBxvD,EAAerW,KAErB,GAAIv7B,IAAcwlD,EAAY,OAAO5uE,EAAAA,EAAAA,KAACkqD,GAAW,IAEjD,MAAM/D,EAA0B,CAC9B,CACEhpD,GAAI,QACJG,MAAO4J,EAAE,kBACTohD,QACEtoD,EAAAA,EAAAA,KAACk9H,GAAkB,CACjBC,6BAA8Bj2H,EAC5B,yEACA,CACEitH,eAAgBvlD,GAAYxxE,SAKpCqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,MAAE0sD,GAAUnS,EAClB,IAAKmS,GAAOh2D,OACV,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,WACJG,MAAO4J,EAAE,yBACTohD,QACEtoD,EAAAA,EAAAA,KAAC+8H,GAAkB,CACjB/uE,YAAY,uBACZ0uE,yBAAyB,QACzBC,4BAA6Bz1H,EAAE,+CAAgD,CAC7EitH,eAAgBvlD,GAAYxxE,SAIlCqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,SAAE2uH,GAAap0E,EACrB,IAAKo0E,GAAUj4H,OACb,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,SACJG,MAAO4J,EAAE,UACTohD,QAAQtoD,EAAAA,EAAAA,KAACs7H,GAAyB,MAwCtC,OACEh2H,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,aACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,aAAcY,GAAI88C,EAAWgW,GAAS+uG,wBACjD,CACErsK,MAAOsxE,GAAYxxE,KACnB0K,GAAI88C,EAAWgW,GAASo4F,4BAA6B,CACnD3uG,OAAQ,CAAElnD,GAAIyxE,GAAYzxE,OAG9B,CACEG,MAAO4J,EAAE,eACTY,GAAI88C,EAAWgW,GAAS+vG,+BAAgC,CACtDtmH,OAAQ,CAAElnD,GAAIyxE,GAAYzxE,OAG9B,CAAEG,MAAO4J,EAAE,kBAGflH,EAAAA,EAAAA,KAACgqD,GAAU,CACT7D,MAAOA,EACPznB,SA3DYxe,IAChB,MAAM,MAAEs5C,EAAK,SAAEiiE,GAAav7G,EACtB4Y,EAAwB,GAC9B,IAAK,MAAMu2C,KAAQ7V,EACjB,IAAK,MAAM9wC,KAAQ+yG,EACjB3iG,EAAM/0B,KAAK,CAAEsrE,OAAM3mD,SAGvB,OAAO,IAAIyhB,SAAeqd,IACxBkjE,EAAmB,CACjBrtH,MAAO6J,EAAE,aACT6xB,MAAOA,EAAGs2C,OAAM3mD,UAAW,GAAG2mD,EAAKlyE,MAAMurB,EAAKvrB,KAC9C27B,QACAkQ,cAAe,CACb,CAAEloB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAGusD,UAAWA,EAAKzT,UAC9C,CAAE96C,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAG4F,UAAWA,EAAKtrB,OAEhD6rC,SAAUA,EAAGomC,OAAM3mD,UACjB6mC,GAAYkC,EAAM,0BAA2B,CAC3C4d,KAAMA,EAAKlyE,GACXkgI,gBAAiB30G,EAAKvrB,GACtB4/D,aAAc,2BACdugE,UAAW1uD,EAAWzxE,KAE1B+rC,WAAYA,KACVse,GAAS,EAEXj7C,QAASA,KACPyuD,EAAaJ,GAAS+vG,+BAAgC,CACpDtmH,OAAQ,CAAElnD,GAAIyxE,EAAWzxE,GAAGqhB,aAC5B,GAEJ,GACF,EA2BE8wB,aAAW,EACX9B,SAAUA,KACRwtB,EAAaJ,GAAS+vG,+BAAgC,CAAEtmH,OAAQ,CAAElnD,GAAIyxE,GAAYzxE,KAAO,MAKnG,CC/HO,SAAS8tK,KACd,MAAM,EAAE/jK,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KACbE,GAASgZ,EAAAA,GAAAA,KACTrC,EAAerW,MACbzkC,KAAM0uD,EAAU,UAAExlD,GAAc6sC,GACtCxE,EAAM,2BAA2BpN,EAAOlnD,IAAM,OAE1CutH,EAAqBF,KAE3B,GAAIphG,IAAcwlD,EAAY,OAAO5uE,EAAAA,EAAAA,KAACkqD,GAAW,IAEjD,MAAM/D,EAA0B,CAC9B,CACEhpD,GAAI,QACJG,MAAO4J,EAAE,kBACTohD,QACEtoD,EAAAA,EAAAA,KAACw9H,GAAkB,CACjBC,6BAA8Bv2H,EAC5B,yEACA,CACEitH,eAAgBvlD,GAAYxxE,SAKpCqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,MAAEysD,GAAUlS,EAClB,IAAKkS,GAAO/1D,OACV,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,QACJG,MAAO4J,EAAE,yBACTohD,QACEtoD,EAAAA,EAAAA,KAAC+8H,GAAkB,CACjB/uE,YAAY,uBACZ0uE,yBAAyB,QACzBC,4BAA6Bz1H,EAAE,+CAAgD,CAC7EitH,eAAgBvlD,GAAYxxE,SAIlCqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,SAAE2uH,GAAap0E,EACrB,IAAKo0E,GAAUj4H,OACb,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,SACJG,MAAO4J,EAAE,UACTohD,QAAQtoD,EAAAA,EAAAA,KAACs7H,GAAyB,MAwCtC,OACEh2H,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,aACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,aAAcY,GAAI88C,EAAWgW,GAAS+uG,wBACjD,CACErsK,MAAOsxE,GAAYxxE,KACnB0K,GAAI88C,EAAWgW,GAASo4F,4BAA6B,CACnD3uG,OAAQ,CAAElnD,GAAIyxE,GAAYzxE,OAG9B,CACEG,MAAO4J,EAAE,eACTY,GAAI88C,EAAWgW,GAAS8vG,+BAAgC,CACtDrmH,OAAQ,CAAElnD,GAAIyxE,GAAYzxE,OAG9B,CAAEG,MAAO4J,EAAE,kBAGflH,EAAAA,EAAAA,KAACgqD,GAAU,CACT7D,MAAOA,EACPznB,SA3DWhwB,UACf,MAAM,MAAE6qD,EAAK,SAAEkiE,GAAav7G,EACtB4Y,EAAwB,GAC9B,IAAK,MAAMo2C,KAAQ3V,EACjB,IAAK,MAAM7wC,KAAQ+yG,EACjB3iG,EAAM/0B,KAAK,CAAEmrE,OAAMxmD,SAGvB,OAAO,IAAIyhB,SAAeqd,IACxBkjE,EAAmB,CACjBrtH,MAAO6J,EAAE,aACT6xB,MAAOA,EAAGm2C,OAAMxmD,UAAW,GAAGwmD,EAAK/xE,MAAMurB,EAAKvrB,KAC9C27B,QACAkQ,cAAe,CACb,CAAEloB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAGosD,UAAWA,EAAK9xE,MAC9C,CAAE0jB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAG4F,UAAWA,EAAKtrB,OAEhD6rC,SAAUA,EAAGimC,OAAMxmD,UACjB6mC,GAAYkC,EAAM,0BAA2B,CAC3Cyd,KAAMA,EAAK/xE,GACXkgI,gBAAiB30G,EAAKvrB,GACtB4/D,aAAc,2BACdugE,UAAW1uD,EAAWzxE,KAE1B+rC,WAAYA,KACVse,GAAS,EAEXj7C,QAASA,KACPyuD,EAAaJ,GAAS8vG,+BAAgC,CACpDrmH,OAAQ,CAAElnD,GAAIyxE,EAAWzxE,GAAGqhB,aAC5B,GAEJ,GACF,EA2BE8wB,aAAW,EACX9B,SAAUA,KACRwtB,EAAaJ,GAAS8vG,+BAAgC,CAAErmH,OAAQ,CAAElnD,GAAIyxE,GAAYzxE,KAAO,MAKnG,CCpIO,SAASwvH,KACd,MAAM,EAAEzlH,IAAMC,EAAAA,EAAAA,MACRiO,GAAWC,EAAAA,GAAAA,MACX2lD,EAAerW,KACrB0d,KAEA,MAAM9S,EAAcyT,KAiBdpe,EAAaT,KACnB,OACE7+C,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,uBACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,iBAAkBY,GAAI88C,EAAWgW,GAASoxD,gBACrD,CAAE1uH,MAAO4J,EAAE,4BAGflH,EAAAA,EAAAA,KAACijE,GAAW,CAAC5jE,WAAY6H,EAAE,uBAAwBw3B,SAzBIhwB,UACzD,MAAM,eAAEmmE,KAAmBzE,GAAiBtmE,EACtCohK,QAA4B37G,EAAYkC,EAAM,kBAAmB2e,GACjE+6F,EAAa,GACnB,IAAK,MAAMj2E,KAAMprF,EAAO+qE,gBAAkB,GACxCs2F,EAAWpnK,KACTwrD,EAAYkC,EAAM,kBAAkBy5G,EAAoB/tK,GAAGqhB,8BAA+B,CACxFrhB,GAAI+3F,EAAG/3F,YAIPgtC,QAAQC,IAAI+gI,GAClBnwG,EAAaJ,GAAS62B,oBAAqB,CAAEptC,OAAQ,CAAElnD,GAAI+tK,EAAoB/tK,KAAO,EAabqwC,SAX1DA,IAAMp4B,GAAU,GAW6DlV,UACxFF,EAAAA,EAAAA,KAACorK,GAAkB,QAI3B,CAEO,SAASx+C,KACd,MAAM,EAAE1lH,IAAMC,EAAAA,EAAAA,MACRiO,GAAWC,EAAAA,GAAAA,MACX2lD,EAAerW,KAEfN,GAASgZ,EAAAA,GAAAA,KACTlgE,EAAK3C,OAAO6pD,EAAOlnD,IACnBoyD,EAAcyT,MAEZ9iD,KAAMkwD,IAAiBte,EAAAA,GAAAA,IAC7BL,EAAM,kBAAkBt0D,EAAGqhB,cAC3B6wC,GACAQ,KAEM3vC,KAAM24H,IAAe/mF,EAAAA,GAAAA,IAC3BL,EAAM,kBAAkBt0D,EAAGqhB,8BAC3B6wC,GACAQ,IAEImpF,EAAyBH,GAAY3mF,QAE3CmQ,KAEA,MAgCMzd,EAAaT,KACnB,OACE7+C,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MACE+yE,GAAchzE,KACV8J,EAAE,4BAA6B,CAAEmkK,iBAAkBj7F,GAAchzE,OACjE8J,EAAE,gBAERk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,iBAAkBY,GAAI88C,EAAWgW,GAASoxD,gBACrD,CACE1uH,MAAO8yE,GAAchzE,KACjB8J,EAAE,4BAA6B,CAAEmkK,iBAAkBj7F,GAAchzE,OACjE8J,EAAE,oBAIXkpE,GACCpwE,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,qBACdw3B,SArDmDhwB,UACzD,MAAM,eAAEmmE,KAAmBzE,GAAiBtmE,GACtC,MAAE4zE,EAAK,QAAEC,GAAYH,GACzBw7D,GAA0B,GAC1BnkE,GAAkB,IAEdy2F,QAA2B97G,GAC/BiC,EAAM,kBAAkBt0D,EAAGqhB,cAC3B4xD,GAEIm7F,EAAuB,GAC7B,IAAK,MAAMr2E,KAAMvX,GAAW,GAC1B4tF,EAAqBxnK,KACnBwrD,EAAYkC,EAAM,kBAAkB65G,EAAmBnuK,GAAGqhB,8BAA+B,CACvFrhB,GAAI+3F,EAAG/3F,GACP6mF,cAAc,WAId75C,QAAQC,IAAImhI,GAClB,MAAMJ,EAAa,GACnB,IAAK,MAAMj2E,KAAMxX,GAAS,GACxBytF,EAAWpnK,KACTwrD,EAAYkC,EAAM,kBAAkB65G,EAAmBnuK,GAAGqhB,8BAA+B,CACvFrhB,GAAI+3F,EAAG/3F,YAIPgtC,QAAQC,IAAI+gI,GAClBnwG,EAAaJ,GAAS62B,oBAAqB,CAAEptC,OAAQ,CAAElnD,GAAImuK,EAAmBnuK,KAAO,EAyB/EqwC,SAvBSA,IAAMp4B,GAAU,GAwBzBwY,aAAc,IACTwiD,EACHyE,eAAgBmkE,GAA0B,IAC1C94I,UAEFF,EAAAA,EAAAA,KAACorK,GAAkB,CAACtW,MAAO1kF,EAAajzE,OAExC,OAGV,CAEA,SAASiuK,GAAmBtuK,GAC1B,MAAM,IAAQqK,EAAAA,EAAAA,OACR,MAAE2tJ,GAAUh4J,EAClB,OACEwI,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB9+C,MAAO4J,EAAE,QACT9J,KAAK,OACLgpB,YAAalf,EAAE,cACf8lB,YAAU,KAEZhtB,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB9+C,MAAO4J,EAAE,eACT9J,KAAK,cACLgpB,YAAalf,EAAE,wBAEjBlH,EAAAA,EAAAA,KAACy/F,GAA2B,CAC1BriG,KAAK,iBACL+zC,UAAWjqC,EAAE,kEAEflH,EAAAA,EAAAA,KAACo9F,GAAkC,CACjChgG,KAAK,sBACLE,MAAO4J,EAAE,yBACTq2F,eAAgBu3D,MAKxB,CCrLO,SAAS0W,KACd,MAAMnnH,GAASgZ,EAAAA,GAAAA,KACf,OACEr9D,EAAAA,EAAAA,KAAC6/H,GAAU,CACT5sC,QAAQ,MACR91F,GAAIknD,EAAOlnD,IAAM,GACjBsG,KAAM,eACNg8H,cAAe7kE,GAAS6wG,sBAG9B,CCqBO,SAASh6E,KACd,MAAM,EAAEvqF,IAAMC,EAAAA,EAAAA,MACRk9C,GAASgZ,EAAAA,GAAAA,MACPn9C,KAAMkwD,GAAiB/Z,GAAyB5E,EAAM,kBAAmBpN,EAAOlnD,IAClFynD,EAAaT,KAEbtsC,EAAUk0G,KACV2/C,EArBR,SAA8B5W,GAC5B,MAAM,KAAE50I,GAAS+1C,GACfxE,EAAM,kBAAkBqjG,yBAE1B,OAAO50I,GAAMgyC,SAAW,EAC1B,CAgB4By5G,CAAqBtnH,EAAOlnD,IAAM,KACtD03E,EAfR,SAA2BigF,GACzB,MAAM,KAAE50I,GAAS+1C,GACfxE,EAAM,kBAAkBqjG,sBAE1B,OAAO50I,GAAMgyC,SAAW,EAC1B,CAUyBwpF,CAAkBr3F,EAAOlnD,IAAM,KAEhDyuK,GAAgBvnK,EAAAA,EAAAA,UACpB,IAAMwT,EAAQ1Z,QAAQ0tK,GAAmB,0BAAXA,EAAI1uK,MAClC,CAAC0a,IAGH,OAAKu4D,GAMHpwE,EAAAA,EAAAA,KAAC0hB,GAAW,CAAAxhB,UACVoF,EAAAA,EAAAA,MAACke,GAAsB,CAAC3L,QAAS+zJ,EAAevvJ,KAAM+zD,EAAalwE,SAAA,EACjEF,EAAAA,EAAAA,KAACo6I,GAA0B,CACzBG,yBAAuB,EACvBD,mBAAoBlqE,EAAai1B,wBAAqB1jG,EACtD0xF,qBAAsBjjB,EAAajV,gBAAgBy/B,oBACnDy/C,sBAAoB,EACpBl5H,SAAUja,CAAC;;;uDAKblH,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,CAAC,kBACRia,SAAUja,CAAC,uDACXka,QAAmC,IAA1ByzD,EAAerxE,OAAatD,UAErCF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACR20E,EAAe9tE,KAAKmuF,IACnBl1F,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAC/X,MAAM,OAAM4D,UACjBF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS0c,qBAAsB,CAC5CjzB,OAAQ,CACNlnD,GAAI+3F,EAAG/3F,MAER+C,SAEFg1F,EAAG93F,QARiB83F,EAAG/3F,WAclC6C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,sBAAuBka,QAAsC,IAA7BsqJ,EAAkBloK,OAAatD,UAClFF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACRwrK,GAAmB3kK,KAAK6nE,IACvB5uE,EAAAA,EAAAA,KAAC2uE,GAAe,CAACC,WAAYA,GAAiBA,EAAWzxE,gBAzC5D6C,EAAAA,EAAAA,KAACkqD,GAAW,GAgDvB,CCxEO,SAAS4hH,KACd,MAAM,EAAE5kK,IAAMC,EAAAA,EAAAA,MACRk9C,GAASgZ,EAAAA,GAAAA,MAEbn9C,KAAMkwD,EAAY,MAClBpjE,EAAK,QACLuoD,GACEc,GAAyB5E,EAAM,kBAAmBpN,EAAOlnD,IACvD69D,EAAerW,KAEfunE,EAAsBJ,IAAwBigD,IAC9CA,EAAQvoK,OAAS,GACnBw3D,EAAaJ,GAASoxD,cACxB,IAGIvyD,EAAiBm9D,GAAsB,gBACvCh2F,GAA2Cv8B,EAAAA,EAAAA,UAAQ,KACvD,MAAMu8B,EAA2C,IAC5C64B,EACH,CACEh2D,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/B0C,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVvH,KAAM84D,GAAAA,GACN1+D,MAAO4J,EAAE,qBACTP,QAAUypE,GACRpV,EAAaJ,GAASgyD,iBAAkB,CAAEvoE,OAAQ,CAAElnD,GAAIizE,EAAajzE,OAEzE,CAAEsG,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,uBACTP,QAAUypE,IACHA,GACL87C,EAAoB,CAAC97C,GAAc,EAErC9oE,UAAU,IAGd,OAAOs5B,CAAW,GACjB,CAACsrF,EAAqBlxD,EAAc9zD,EAAGuyD,IAEpC7U,EAAaT,KAEnB,OAAIn3C,GAAchN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,IACpD6a,GAGH9qE,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO+yE,GAAchzE,KACrBgjD,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,iBAAkBY,GAAI88C,EAAWgW,GAASoxD,gBACrD,CAAE1uH,MAAO8yE,GAAchzE,OAEzBujD,eACE3gD,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAASs9B,EACTx9B,SAAU6F,GAAAA,GAAiBC,MAC3B3I,aAAc6vE,MAInBA,IAAgBpwE,EAAAA,EAAAA,KAACgsK,GAAoB,CAAC57F,aAAcA,QAlB/BpwE,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,GAqBzD,CAEO,SAAS6hH,GAAqBlvK,GACnC,MAAM,aAAEszE,GAAiBtzE,GACnB,EAAEoK,IAAMC,EAAAA,EAAAA,MACd,OACEnH,EAAAA,EAAAA,KAAC09D,GAAc,CACbe,QAAS,CACPnhE,MAAO4J,EAAE,yBACTiuB,KAAMylC,GAASoxD,cACfttD,oBAAqB,iBAEvBvU,KAAM,CACJ,CAAE7sD,MAAO4J,EAAE,WAAYiuB,KAAMylC,GAAS62B,qBACtC,CAAEn0F,MAAO4J,EAAE,gBAAiBiuB,KAAMylC,GAASqxG,yBAC3C,CAAE3uK,MAAO4J,EAAE,gBAAiBiuB,KAAMylC,GAASsxG,yBAC3C,CAAE5uK,MAAO4J,EAAE,0BAA2BiuB,KAAMylC,GAASuxG,mCACrD,CAAE7uK,MAAO4J,EAAE,iBAAkBiuB,KAAMylC,GAASwxG,4BAE9C/nH,OAAQ,CAAElnD,GAAIizE,EAAajzE,KAGjC,CCjHO,SAAS+uK,KACd,MAAM7nH,GAASgZ,EAAAA,GAAAA,MACT,IAAQl2D,EAAAA,EAAAA,MACd,OACEnH,EAAAA,EAAAA,KAAC0/H,GAAU,CACTzsC,QAAQ,MACR91F,GAAIknD,EAAOlnD,IAAM,GACjBsG,KAAM,eACN+7H,kBAAmBt4H,EAAE,YACrBo4H,eAAgBp4H,EAAE,eAClBm4H,uBAAyB/iH,GACvBpV,EAAE,8DAA+D,CAAEoV,UAErEmjH,cAAe7kE,GAASyxG,sBAG9B,CClBO,SAASF,KACd,MAAM,GAAEhvK,EAAK,KAAOkgE,EAAAA,GAAAA,KACpB,OACEr9D,EAAAA,EAAAA,KAACiiI,GAAyB,CACxB79E,IAAKqN,EAAM,kBAAkBt0D,4BAC7B+kI,eAAe,GAGrB,CCsBO,SAASupC,KACd,MAAM,EAAEvkK,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KACbE,GAASgZ,EAAAA,GAAAA,MAEPn9C,KAAMkwD,EAAY,UAAEhnD,GAAcitC,GACxC5E,EAAM,kBACNpN,EAAOlnD,IAEHutH,EAAqBF,KACrBxvD,EAAerW,KAErB,GAAIv7B,IAAcgnD,EAAc,OAAOpwE,EAAAA,EAAAA,KAACkqD,GAAW,IAEnD,MAAM/D,EAA0B,CAC9B,CACEhpD,GAAI,QACJG,MAAO4J,EAAE,kBACTohD,QACEtoD,EAAAA,EAAAA,KAACk9H,GAAkB,CACjBC,6BAA8Bj2H,EAC5B,2EACA,CACEmkK,iBAAkBj7F,GAAchzE,SAKxCqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,MAAE0sD,GAAUnS,EAClB,IAAKmS,GAAOh2D,OACV,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,WACJG,MAAO4J,EAAE,yBACTohD,QACEtoD,EAAAA,EAAAA,KAAC+8H,GAAkB,CACjB/uE,YAAY,eACZ0uE,yBAAyB,QACzBC,4BAA6Bz1H,EAAE,iDAAkD,CAC/EmkK,iBAAkBj7F,GAAchzE,SAItCqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,SAAE2uH,GAAap0E,EACrB,IAAKo0E,GAAUj4H,OACb,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,SACJG,MAAO4J,EAAE,UACTohD,QAAQtoD,EAAAA,EAAAA,KAACs7H,GAAyB,MAwCtC,OACEh2H,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,aACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,gBAAiBY,GAAI88C,EAAWgW,GAASoxD,gBACpD,CACE1uH,MAAO8yE,GAAchzE,KACrB0K,GAAI88C,EAAWgW,GAAS62B,oBAAqB,CAAEptC,OAAQ,CAAElnD,GAAIizE,GAAcjzE,OAE7E,CACEG,MAAO4J,EAAE,eACTY,GAAI88C,EAAWgW,GAASqxG,wBAAyB,CAAE5nH,OAAQ,CAAElnD,GAAIizE,GAAcjzE,OAEjF,CAAEG,MAAO4J,EAAE,kBAGflH,EAAAA,EAAAA,KAACgqD,GAAU,CACT7gB,aAAck2B,GACdlZ,MAAOA,EACPznB,SAxDYxe,IAChB,MAAM,MAAEs5C,EAAK,SAAEiiE,GAAav7G,EACtB4Y,EAAwB,GAC9B,IAAK,MAAMu2C,KAAQ7V,EACjB,IAAK,MAAM9wC,KAAQ+yG,EACjB3iG,EAAM/0B,KAAK,CAAEsrE,OAAM3mD,SAGvB,OAAO,IAAIyhB,SAAeqd,IACxBkjE,EAAmB,CACjBrtH,MAAO6J,EAAE,aACT6xB,MAAOA,EAAGs2C,OAAM3mD,UAAW,GAAG2mD,EAAKlyE,MAAMurB,EAAKvrB,KAC9C27B,QACAkQ,cAAe,CACb,CAAEloB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAGusD,UAAWA,EAAKzT,UAC9C,CAAE96C,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAG4F,UAAWA,EAAKtrB,OAEhD6rC,SAAUA,EAAGomC,OAAM3mD,UACjB6mC,GAAYkC,EAAM,0BAA2B,CAC3C4d,KAAMA,EAAKlyE,GACXkgI,gBAAiB30G,EAAKvrB,GACtB4/D,aAAc,mBACdugE,UAAWltD,EAAajzE,KAE5B+rC,WAAYA,KACVse,GAAS,EAEXj7C,QAASA,KACPyuD,EAAaJ,GAASqxG,wBAAyB,CAC7C5nH,OAAQ,CAAElnD,GAAIizE,EAAajzE,GAAGqhB,aAC9B,GAEJ,GACF,EAwBE8wB,aAAW,EACX9B,SAAUA,KACRwtB,EAAaJ,GAASqxG,wBAAyB,CAAE5nH,OAAQ,CAAElnD,GAAIizE,GAAcjzE,KAAO,MAK9F,CC7HO,SAASkvK,KACd,MAAM,EAAEnlK,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KACbE,GAASgZ,EAAAA,GAAAA,KACTrC,EAAerW,MACbzkC,KAAMkwD,EAAY,UAAEhnD,GAAc6sC,GACxCxE,EAAM,kBAAkBpN,EAAOlnD,IAAM,OAEjCutH,EAAqBF,KAE3B,GAAIphG,IAAcgnD,EAAc,OAAOpwE,EAAAA,EAAAA,KAACkqD,GAAW,IAEnD,MAAM/D,EAA0B,CAC9B,CACEhpD,GAAI,QACJG,MAAO4J,EAAE,kBACTohD,QACEtoD,EAAAA,EAAAA,KAACw9H,GAAkB,CACjBC,6BAA8Bv2H,EAC5B,2EACA,CACEmkK,iBAAkBj7F,GAAchzE,SAKxCqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,MAAEysD,GAAUlS,EAClB,IAAKkS,GAAO/1D,OACV,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,QACJG,MAAO4J,EAAE,yBACTohD,QACEtoD,EAAAA,EAAAA,KAAC+8H,GAAkB,CACjB/uE,YAAY,eACZ0uE,yBAAyB,QACzBC,4BAA6Bz1H,EAAE,iDAAkD,CAC/EmkK,iBAAkBj7F,GAAchzE,SAItCqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,SAAE2uH,GAAap0E,EACrB,IAAKo0E,GAAUj4H,OACb,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,SACJG,MAAO4J,EAAE,UACTohD,QAAQtoD,EAAAA,EAAAA,KAACs7H,GAAyB,MAwCtC,OACEh2H,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,aACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,iBAAkBY,GAAI88C,EAAWgW,GAASoxD,gBACrD,CACE1uH,MAAO8yE,GAAchzE,KACrB0K,GAAI88C,EAAWgW,GAAS62B,oBAAqB,CAAEptC,OAAQ,CAAElnD,GAAIizE,GAAcjzE,OAE7E,CACEG,MAAO4J,EAAE,eACTY,GAAI88C,EAAWgW,GAASsxG,wBAAyB,CAAE7nH,OAAQ,CAAElnD,GAAIizE,GAAcjzE,OAEjF,CAAEG,MAAO4J,EAAE,kBAGflH,EAAAA,EAAAA,KAACgqD,GAAU,CACT7gB,aAAck2B,GACdlZ,MAAOA,EACPznB,SAxDWhwB,UACf,MAAM,MAAE6qD,EAAK,SAAEkiE,GAAav7G,EACtB4Y,EAAwB,GAC9B,IAAK,MAAMo2C,KAAQ3V,EACjB,IAAK,MAAM7wC,KAAQ+yG,EACjB3iG,EAAM/0B,KAAK,CAAEmrE,OAAMxmD,SAGvB,OAAO,IAAIyhB,SAAeqd,IACxBkjE,EAAmB,CACjBrtH,MAAO6J,EAAE,aACT6xB,MAAOA,EAAGm2C,OAAMxmD,UAAW,GAAGwmD,EAAK/xE,MAAMurB,EAAKvrB,KAC9C27B,QACAkQ,cAAe,CACb,CAAEloB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAGosD,UAAWA,EAAK9xE,MAC9C,CAAE0jB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAG4F,UAAWA,EAAKtrB,OAEhD6rC,SAAUA,EAAGimC,OAAMxmD,UACjB6mC,GAAYkC,EAAM,0BAA2B,CAC3Cyd,KAAMA,EAAK/xE,GACXkgI,gBAAiB30G,EAAKvrB,GACtB4/D,aAAc,mBACdugE,UAAWltD,EAAajzE,KAE5B+rC,WAAYA,KACVse,GAAS,EAEXj7C,QAASA,KACPyuD,EAAaJ,GAASsxG,wBAAyB,CAC7C7nH,OAAQ,CAAElnD,GAAIizE,EAAajzE,GAAGqhB,aAC9B,GAEJ,GACF,EAwBE8wB,aAAW,EACX9B,SAAUA,KACRwtB,EAAaJ,GAASsxG,wBAAyB,CAAE7nH,OAAQ,CAAElnD,GAAIizE,GAAcjzE,KAAO,MAK9F,CCzHO,SAASy0F,GAAe90F,GAC7B,MAAM,IAAQqK,EAAAA,EAAAA,MACRk9C,GAASgZ,EAAAA,GAAAA,KACTo9E,EAAQ39I,GAAOi8H,UAAYj8H,EAAMi8H,UAAY10E,EAAOlnD,IACpD,MAAE6P,EAAOkT,KAAM0wD,EAAO,QAAErb,GAAYc,GAAoB5E,EAAM,YAAagpF,GAC3Ez/E,EAAerW,KACfmU,EAASvC,KACT3R,EAAaT,KAkBnBkU,GACE,CAAE3nB,QAAS,CAAC,mBAAoBgqB,KAAM,CAAC,oBAjBV5+D,EAAAA,EAAAA,cAC5BuR,IACC,GACO,SADCA,GAAS4tD,WAEb,OAAQ5tD,GAAS5J,MACf,IAAK,MACL,IAAK,eACL,IAAK,iBACE8xD,IAIb,GAEF,CAACA,KAOH,MAEM+2G,EAA8BplK,CAAC,+JAC/BqlK,EAA4BrlK,CAAC,wKAC7BslK,EAAuBtlK,CAAC;;;;;cAMxBulK,EAA6BvlK,CAAC;;;4CAI9BwlK,GACJpnK,EAAAA,EAAAA,MAAA,QAAApF,SAAA,CACGgH,CAAC;;wDAGFlH,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,SACCkH,CAAC,yDACFlH,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,SACCkH,CAAC,qBACFlH,EAAAA,EAAAA,KAAA,MAAI6B,MAAO,CAAEgd,OAAQ,oBAAqB3e,UACxCoF,EAAAA,EAAAA,MAACw0G,EAAAA,GAAK,CAAA55G,SAAA,EACJF,EAAAA,EAAAA,KAAA,MAAAE,UACEF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,oCAERF,EAAAA,EAAAA,KAAA,MAAAE,UACEF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,8DAIXgH,CAAC;;qDAGFlH,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,SACCkH,CAAC,qCAAsC,KACxClH,EAAAA,EAAAA,KAAA,KACE27B,OAAO,SACP87C,IAAI,sBACJ1vE,KAAM8wD,GAAcC,EAAQ,qBAAqB54D,SAEhDgH,CAAC,sBAIFylK,GACJrnK,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAA,KAAAE,SACGgH,EACC,2OAGJlH,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,KAAAE,UACEoF,EAAAA,EAAAA,MAACw0G,EAAAA,GAAK,CAAA55G,SAAA,CAAC,uCACgC,CAAE4mH,QA3DvBx8E,OA2DiC,IAAE,CAAEmX,MA5DlB,OA4D0B,oCAK/DmrH,GACJtnK,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAA,KAAAE,SAAIgH,EAAE,mDACNlH,EAAAA,EAAAA,KAAC85G,EAAAA,GAAK,CAAA55G,UACJF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,0HAKRF,EAAAA,EAAAA,KAAA,KAAAE,SACGgH,EACC,ySAgER,OAAI8F,GAAchN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,IACpDqb,GAEHtrE,EAAAA,EAAAA,MAACoc,GAAW,CAACU,cAAetlB,EAAMslB,cAAcliB,SAAA,EAC9CF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,QAAQhH,SAC1BpD,EAAMi8H,WACL/4H,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CAACC,GAAI88C,EAAWgW,GAASg3B,eAAgB,CAAEvtC,OAAQ,CAAElnD,GAAIL,EAAMi8H,aAAe74H,SAChF0wE,EAAQxzE,OAGXwzE,EAAQxzE,QAGZ4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,eAAehH,SAAE0wE,EAAQh1D,cAC7Cg1D,EAAQzV,gBAAgBiV,cAAchzE,OACrC4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,gBAAgBhH,UACnCF,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAMmiE,EAAQzV,gBAAgBiV,cAAchzE,KAC5C0K,GAAI88C,EAAWgW,GAAS62B,oBAAqB,CAC3CptC,OAAQ,CAAElnD,GAAIyzE,EAAQzV,gBAAgBiV,cAAcjzE,WAK5D6C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,mBAAmBhH,SACrC0wE,EAAQzV,gBAAgBoqC,aAAe30B,EAAQzV,gBAAgB4/B,UAC9D/6F,EAAAA,EAAAA,KAACosE,GAAU,CACT1hC,OAAQkmC,EAAQlmC,OAChB5iC,GAAI88C,EAAWgW,GAAS4qC,UAAW,CACjCnhD,OAAQ,CACN89B,SAAUvR,EAAQntE,KAClBtG,GAAIyzE,EAAQzV,gBAAgBoqC,aAAapoG,IAAMyzE,EAAQzV,gBAAgB4/B,UAAU59F,SAKvF6C,EAAAA,EAAAA,KAACosE,GAAU,CAAC1hC,OAAQkmC,EAAQlmC,YAGhC1qC,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,uBAAuBhH,UAC1CF,EAAAA,EAAAA,KAAC61F,GAAO,CAACI,QAASrlB,EAAQmlB,aAE3BnlB,EAAQslB,eACPl2F,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,2BAA2BhH,UAC9CF,EAAAA,EAAAA,KAACiP,GAAQ,CAACR,KAAMmiE,EAAQslB,kBAG5Bl2F,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,sBAAuBia,SAAUyrJ,EAAgB1sK,SACnE0wE,EAAQulB,WAEXn2F,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,yBAAyBhH,SAAE0wE,EAAQ0R,cACxDtiF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,0BAA2Bia,SAAUurJ,EAA8BxsK,SACrF0wE,EAAQwlB,cAEVxlB,EAAQzV,eAAe0xG,kCACtB7sK,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,2CACTia,SAAUmrJ,EAA4BpsK,UAEtCF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,UACTF,EAAAA,EAAAA,KAAC2uE,GAAe,CACdC,WAAYgC,EAAQzV,eAAe0xG,iCAC9Bj8F,EAAQzV,eAAe0xG,gCAAgC1vK,QAKnEyzE,EAAQzV,eAAeyT,aACtB5uE,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,6BAA6BhH,UAChDF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,UACTF,EAAAA,EAAAA,KAAC2uE,GAAe,CACdC,WAAYgC,EAAQzV,eAAeyT,YAC9BgC,EAAQzV,eAAeyT,WAAWzxE,SAK/C6C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,iBAAkBia,SAAUqrJ,EAAqBtsK,SACnE,GAAG0wE,EAAQylB,qCAEbzlB,EAAQzV,eAAey/B,sBACtB56F,EAAAA,EAAAA,KAACo6I,GAA0B,CACzBE,mBAAoB1pE,EAAQy0B,wBAAqB1jG,EACjD0xF,qBAAsBziB,EAAQzV,eAAey/B,oBAC7Cy/C,sBAAoB,EACpBl5H,SAAUsrJ,KAGdzsK,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,qBAAsBia,SAAUwrJ,EAAkBzsK,SACpE44D,GAAQw9B,oBAEXt2F,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,sBAAuBia,SAAUorJ,EAA0BrsK,SAC7E0wE,EAAQ2lB,cAEXv2F,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,WAAWhH,UAC9BF,EAAAA,EAAAA,KAACqS,GAAY,CACX3X,MAAOk2E,EAAQvV,QACf/oD,OAAQs+D,EAAQzV,gBAAgByU,YAAYhU,SAC5Cj1D,QAASA,IACPq0D,EAAaJ,GAASiB,YAAa,CACjCxX,OAAQ,CAAElnD,GAAIyzE,EAAQzV,gBAAgByU,YAAYzyE,WAK1D6C,EAAAA,EAAAA,KAACmsE,GAAsB,CACrBzxE,MAAOk2E,EAAQb,SACfz9D,OAAQs+D,EAAQzV,gBAAgB8U,aAAarU,SAC7Cj1D,QAASA,IACPq0D,EAAaJ,GAASiB,YAAa,CACjCxX,OAAQ,CAAElnD,GAAIyzE,EAAQzV,gBAAgB8U,aAAa9yE,SAIvDyzE,EAAQk8F,WACRl8F,EAAQm8F,sBACRn8F,EAAQo8F,sBACRp8F,EAAQq8F,sBACRr8F,EAAQs8F,kBACRltK,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,mBAAmBhH,UAlLvBmmB,EAkLuCuqD,GAjL5DtrE,EAAAA,EAAAA,MAAC4vD,GAAAA,EAAQ,CAACjtD,UAAW4sF,GAAAA,EAAiBC,GAAG50F,SAAA,CACtCmmB,EAAQymJ,YACPxnK,EAAAA,EAAAA,MAAC6vD,GAAAA,EAAY,CAACltD,UAAW8sF,GAAAA,EAAqBC,GAAG90F,SAAA,CAC9CgH,CAAC,wCACFlH,EAAAA,EAAAA,KAAC6gB,GAAe,CACdC,OAAQ,GACR7e,QAASiF,CAAC,qEAIfmf,EAAQ0mJ,uBACPznK,EAAAA,EAAAA,MAAC6vD,GAAAA,EAAY,CAACltD,UAAW8sF,GAAAA,EAAqBC,GAAG90F,SAAA,CAC9CgH,CAAC,qCACFlH,EAAAA,EAAAA,KAAC6gB,GAAe,CACdC,OAAQ,GACR7e,QAASiF,CAAC;;;gEAOfmf,EAAQ2mJ,uBACP1nK,EAAAA,EAAAA,MAAC6vD,GAAAA,EAAY,CAACltD,UAAW8sF,GAAAA,EAAqBC,GAAG90F,SAAA,CAC9CgH,CAAC,4CACFlH,EAAAA,EAAAA,KAAC6gB,GAAe,CACdC,OAAQ,GACR7e,QAASiF,CAAC;;;;;sDASfmf,EAAQ4mJ,uBACP3nK,EAAAA,EAAAA,MAAC6vD,GAAAA,EAAY,CAACltD,UAAW8sF,GAAAA,EAAqBC,GAAG90F,SAAA,CAC9CgH,CAAC,iCACFlH,EAAAA,EAAAA,KAAC6gB,GAAe,CACdC,OAAQ,GACR7e,QAASiF,CAAC;2EAKfmf,EAAQ6mJ,iBACP5nK,EAAAA,EAAAA,MAAC6vD,GAAAA,EAAY,CAACltD,UAAW8sF,GAAAA,EAAqBC,GAAG90F,SAAA,CAC9CgH,CAAC,yBACFlH,EAAAA,EAAAA,KAAC6gB,GAAe,CACdC,OAAQ,GACR7e,QAASiF,CAAC;qEAQClH,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,IA5D3B9jC,KAsLzB,CCnUO,SAAS8mJ,GAAerwK,GAC7B,MAAM,IAAQqK,EAAAA,EAAAA,MACd,OACE7B,EAAAA,EAAAA,MAACygE,GAAe,CAAC1oE,MAAO6J,EAAE,WAAWhH,SAAA,EACnCF,EAAAA,EAAAA,KAACuwC,GAAgB,CACfpzC,GAAG,mBACHG,MAAO4J,EAAE,SACTkqC,eAAgBlqC,EAAE,SAClBiqC,UAAWjqC,EAAE,iEACb9J,KAAK,eAEP4C,EAAAA,EAAAA,KAACuwC,GAAgB,CACfpzC,GAAG,8BACHG,MAAO4J,EAAE,UACTkqC,eAAgBlqC,EAAE,UAClBiqC,UAAWjqC,EACT,yMAEF9J,KAAK,0BAEP4C,EAAAA,EAAAA,KAACkiE,GAAc,CAACE,MAAM,WAAWn/C,OAASxf,GAA0B,QAATA,EAAevD,UACxEF,EAAAA,EAAAA,KAACuwC,GAAgB,CACfpzC,GAAG,8BACHG,MAAO4J,EAAE,oBACTkqC,eAAgBlqC,EAAE,oBAClBiqC,UAAWjqC,EACT,wQAEF9J,KAAK,4BAGT4C,EAAAA,EAAAA,KAACuwC,GAAgB,CACfpzC,GAAG,8BACHG,MAAO4J,EAAE,6BACTiqC,UAAWjqC,EACT,0GAEF9J,KAAK,0BAELN,EAAMswK,oBACNptK,EAAAA,EAAAA,KAACuwC,GAAgB,CACfpzC,GAAG,wBACHG,MAAO4J,EAAE,yBACTiqC,UAAWjqC,EACT,kGAEF9J,KAAK,oBAGT4C,EAAAA,EAAAA,KAACkiE,GAAc,CACbE,MAAM,uBACNn/C,OAASoqJ,IAAiCA,EAAkBntK,UAE5DF,EAAAA,EAAAA,KAAC+lE,GAAe,CAAC1oE,MAAO6J,EAAE,kBAAkBhH,UAC1CF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,2BACLqG,KAAK,SACL0tC,UAAWjqC,EACT,6QAEF5J,MAAO4J,EAAE,iBACT24B,IAAI,YAMhB,CCjEO,SAASytI,KACd,MAAM,EAAEpmK,IAAMC,EAAAA,EAAAA,MACRomK,GACJvtK,EAAAA,EAAAA,KAAC85G,EAAAA,GAAK,CAAC0zD,QAAQ,8BAA6BttK,UAC1CoF,EAAAA,EAAAA,MAAA,QAAApF,SAAA,CAAM,2DAEJoF,EAAAA,EAAAA,MAAA,MAAApF,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,UACEF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,iEAERF,EAAAA,EAAAA,KAAA,MAAAE,UACEF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,qEAOhB,OACEF,EAAAA,EAAAA,KAACkiE,GAAc,CAACE,MAAM,WAAWn/C,OAASxf,GAA0B,YAATA,EAAmBvD,UAC5EoF,EAAAA,EAAAA,MAACygE,GAAe,CAAC1oE,MAAO6J,EAAE,gBAAgBhH,SAAA,EACxCF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,UACLE,MAAO4J,EAAE,sBACTkqC,eAAgBlqC,EAAE,sBAClBiqC,UAAWo8H,EACXvgJ,YAAU,KAEZhtB,EAAAA,EAAAA,KAACy7F,GAAwB,CACvBr+F,KAAK,aACLE,MAAO4J,EAAE,6BACT45D,YAAa,CACXwiE,2BAA4B,UAGhCtjI,EAAAA,EAAAA,KAACmtK,GAAc,QAIvB,CCrCO,SAASM,KACd,MAAM,EAAEvmK,IAAMC,EAAAA,EAAAA,MACR2xD,EAASvC,KAETm3G,GACJ1tK,EAAAA,EAAAA,KAAC85G,EAAAA,GAAK,CAAC0zD,QAAQ,0BAAyBttK,UACtCoF,EAAAA,EAAAA,MAAA,QAAApF,SAAA,CAAM,gDAEJoF,EAAAA,EAAAA,MAAA,MAAApF,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,UACEF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,8CAERF,EAAAA,EAAAA,KAAA,MAAAE,UACEF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,0CAERF,EAAAA,EAAAA,KAAA,MAAAE,UACEF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,kDAEL,wSAQLytK,GACJ3tK,EAAAA,EAAAA,KAAC85G,EAAAA,GAAK,CAAC0zD,QAAQ,2BAA0BttK,UACvCoF,EAAAA,EAAAA,MAAA,QAAApF,SAAA,CAAM,mJAGJF,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,SAAM,yDAENA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,SAAM,qBAENsF,EAAAA,EAAAA,MAAA,MAAIzD,MAAO,CAAEgd,OAAQ,oBAAqB3e,SAAA,EACxCF,EAAAA,EAAAA,KAAA,MAAAE,UACEF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,oCAERF,EAAAA,EAAAA,KAAA,MAAAE,UACEF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,4DAEL,kJAGLF,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,SACCkH,CAAC,qCAAsC,KACxClH,EAAAA,EAAAA,KAAA,KACE27B,OAAO,SACP87C,IAAI,sBACJ1vE,KAAM8wD,GAAcC,EAAQ,qBAAqB54D,SAEhDgH,CAAC,wBAMV,OACElH,EAAAA,EAAAA,KAACkiE,GAAc,CAACE,MAAM,WAAWn/C,OAASxf,GAA0B,QAATA,EAAevD,UACxEoF,EAAAA,EAAAA,MAACygE,GAAe,CAAC1oE,MAAO6J,EAAE,gBAAgBhH,SAAA,EACxCF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,UACLE,MAAO4J,EAAE,sBACTkqC,eAAgBlqC,EAAE,sBAClBiqC,UAAWu8H,EACX1gJ,YAAU,KAEZhtB,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,aACLE,MAAO4J,EAAE,oCACTkqC,eAAgBlqC,EAAE,oCAClBiqC,UAAWjqC,EACT,qMAGJlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,cACLE,MAAO4J,EAAE,0BACTkqC,eAAgBlqC,EAAE,0BAClBiqC,UAAWw8H,KAEb3tK,EAAAA,EAAAA,KAACy7F,GAAwB,CACvBr+F,KAAK,aACLE,MAAO4J,EAAE,6BACT45D,YAAa,CACXwiE,2BAA4B,UAGhCtjI,EAAAA,EAAAA,KAACmtK,GAAc,QAIvB,CCnGO,SAASS,KACd,MAAM,EAAE1mK,IAAMC,EAAAA,EAAAA,MAEd,OACEnH,EAAAA,EAAAA,KAACkiE,GAAc,CAACE,MAAM,WAAWn/C,OAASxf,GAA0B,aAATA,EAAoBvD,UAC7EoF,EAAAA,EAAAA,MAACygE,GAAe,CAAC1oE,MAAO6J,EAAE,gBAAgBhH,SAAA,EACxCF,EAAAA,EAAAA,KAACy7F,GAAwB,CACvBr+F,KAAK,aACLE,MAAO4J,EAAE,uBACT8lB,YAAU,EACV8zC,YAAa,CACXwiE,2BAA4B,eAGhCtjI,EAAAA,EAAAA,KAACmtK,GAAc,CAACC,mBAAiB,QAIzC,CCXO,SAASS,GAAc/wK,GAC5B,MAAM,IAAQqK,EAAAA,EAAAA,OACN+Y,KAAM44C,IAAWhH,EAAAA,GAAAA,IAAoBL,EAAM,YAAarN,GAC9D8K,MAAM9K,GAAK14B,MAAMwgB,GAAMA,EAAE2I,WAIrB83H,GACJrnK,EAAAA,EAAAA,MAACw0G,EAAAA,GAAK,CAAC0zD,QAAQ,oBAAmBttK,SAAA,EAChCF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,0OAKHF,EAAAA,EAAAA,KAAA,UACAsF,EAAAA,EAAAA,MAAA,KAAApF,SAAA,CAAG,uCATiBoqC,MAU2B,IAXR,MAWgB,kCAIrDwjI,GACJ9tK,EAAAA,EAAAA,KAAC85G,EAAAA,GAAK,CAAC0zD,QAAQ,6BAA4BttK,UACzCoF,EAAAA,EAAAA,MAAA,KAAApF,SAAA,CAAG,kDAC+C44D,GAAQw9B,kBAAoB,GAAG,gNAjB7DhsD,MAoBY,IArBO,MAqBC,yGAoBtCjkB,EAAU,IAfUyyC,GAAQi1G,oBAC9Bj1G,GAAQi1G,oBAAoBhnK,KAAK22C,IAAI,CACnCpgD,MAAOogD,EACPhjD,MAAOgjD,MAET,MAEyB,iBAApB5gD,EAAMkxK,WAA0BlxK,EAAMkxK,UAAUxqK,OAAS,EAC5D,CACE,CACElG,MAAOR,EAAMkxK,UACbtzK,MAAOoC,EAAMkxK,YAGjB,IAGN,OACEhuK,EAAAA,EAAAA,KAACkiE,GAAc,CAACE,MAAM,WAAWn/C,OAASxf,GAA0B,WAATA,EAAkBvD,UAC3EoF,EAAAA,EAAAA,MAACygE,GAAe,CAAC1oE,MAAO6J,EAAE,gBAAgBhH,SAAA,CACpB,IAAnBmmB,EAAQ7iB,SACPxD,EAAAA,EAAAA,KAAC+lE,GAAe,CAAC12B,cAAY,EAAAnvC,UAC3BF,EAAAA,EAAAA,KAACmM,GAAAA,EAAK,CACJ9O,MAAO6J,CAAC,YACR7D,QAAQ,UACR+P,UAAQ,EACR3K,OAAO,+BAA8BvI,SAEpC4tK,OAIP9tK,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,WACLE,MAAO4J,EAAE,qBACTkf,YAAa0yC,GAAQw9B,kBAAoB,GACzCllD,eAAgBlqC,EAAE,qBAClBiqC,UAAWw7H,EACXzkJ,YAAU,KAEZloB,EAAAA,EAAAA,KAACs6C,GAAc,CACbttB,YAAU,EACV5vB,KAAK,aACLD,GAAG,qBACHG,MAAO4J,EAAE,sBACTmf,QAASA,EACTk0B,gBAAiBrzC,EAAE,+BACnBkqC,eAAgBlqC,EAAE,sBAClBiqC,UAAWjqC,EACT,+KAMZ,CC5FO,SAAS+mK,KACd,MAAM,EAAE/mK,IAAMC,EAAAA,EAAAA,MACR+mK,GACJluK,EAAAA,EAAAA,KAAC85G,EAAAA,GAAK,CAAC0zD,QAAQ,0BAAyBttK,UACtCoF,EAAAA,EAAAA,MAAA,QAAApF,SAAA,CAAM,uDAEJoF,EAAAA,EAAAA,MAAA,MAAApF,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,UACEF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,0CAERF,EAAAA,EAAAA,KAAA,MAAAE,UACEF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,yCAERF,EAAAA,EAAAA,KAAA,MAAAE,UACEF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,oDAOhB,OACEF,EAAAA,EAAAA,KAACkiE,GAAc,CAACE,MAAM,WAAWn/C,OAASxf,GAA0B,QAATA,EAAevD,UACxEoF,EAAAA,EAAAA,MAACygE,GAAe,CAAC1oE,MAAO6J,EAAE,gBAAgBhH,SAAA,EACxCF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,UACLE,MAAO4J,EAAE,sBACTkqC,eAAgBlqC,EAAE,sBAClBiqC,UAAW+8H,EACXlhJ,YAAU,KAEZhtB,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,aACLE,MAAO4J,EAAE,mBACTiqC,UAAWjqC,EACT,qMAGJlH,EAAAA,EAAAA,KAACy7F,GAAwB,CACvBr+F,KAAK,aACLE,MAAO4J,EAAE,6BACT45D,YAAa,CACXwiE,2BAA4B,UAGhCtjI,EAAAA,EAAAA,KAACmtK,GAAc,QAIvB,CC1BA,MAAMv+H,GAAkC,CACtCu/H,SAAU,GACVv/F,WAAY,KACZ2nB,WAAY,GACZjU,WAAY,GACZwqF,WAAW,EACXC,sBAAsB,EACtBC,sBAAsB,EACtB52E,YAAa,GACbL,SAAU,GACVM,yBAA0B,EAC1B42E,sBAAsB,EACtB92E,QAAS,GACT02E,gCAAiC,KACjCjyE,oBAAqB,MAGhB,SAAS6rB,KACd,MAAM,EAAEv/G,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACfvvC,GAAWC,EAAAA,GAAAA,MACXk6C,EAAcyT,KAWdpe,EAAaT,KAEnB,OACE7+C,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,kBACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,YAAaY,GAAI88C,EAAWgW,GAASmoD,WAChD,CAAEzlH,MAAO4J,EAAE,uBAGflH,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,kBACdw3B,SAvB2ChwB,UACtB,WAArBkiE,EAAQmlB,WACVnlB,EAAQmlB,SAAW,IAGrB,MAAMq4E,QAAmB7+G,EAAYkC,EAAM,aAAcmf,GAEzD5V,EAAaJ,GAASg3B,eAAgB,CAAEvtC,OAAQ,CAAElnD,GAAIixK,EAAWjxK,KAAO,EAiBpEqwC,SAAUA,IAAMp4B,GAAU,GAC1BwY,aAAcghB,GAAyB1uC,UAEvCF,EAAAA,EAAAA,KAACquK,GAAa,QAItB,CAEO,SAASC,KACd,MAAM,EAAEpnK,IAAMC,EAAAA,EAAAA,MACRiO,GAAWC,EAAAA,GAAAA,MACX2lD,EAAerW,KACfN,GAASgZ,EAAAA,GAAAA,KACTlgE,EAAK3C,OAAO6pD,EAAOlnD,KACjB+iB,KAAM0wD,GAAY3a,GAAgBxE,EAAM,aAAat0D,EAAGqhB,eAE5DoyD,GAAgC,KAArBA,EAAQmlB,WACrBnlB,EAAQmlB,SAAW,UAGrB,MAcMnxC,EAAaT,KAEnB,OAAKysB,GAcHtrE,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MACEuzE,GAASxzE,KAAO8J,EAAE,uBAAwB,CAAEqnK,YAAa39F,GAASxzE,OAAU8J,EAAE,WAEhFk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,YAAaY,GAAI88C,EAAWgW,GAASmoD,WAChD,CACEzlH,MAAOszE,GAASxzE,KACZ8J,EAAE,uBAAwB,CAAEqnK,YAAa39F,GAASxzE,OAClD8J,EAAE,gBAIZlH,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,gBACdw3B,SA9C2ChwB,UACtB,WAArBkiE,EAAQmlB,WACVnlB,EAAQmlB,SAAW,IAIrB,MAAMy4E,QAAuBh/G,GAC3BiC,EAAM,aAAat0D,EAAGqhB,cACtBoyD,GAGF5V,EAAaJ,GAASg3B,eAAgB,CAAEvtC,OAAQ,CAAElnD,GAAIqxK,EAAerxK,KAAO,EAoCxEqwC,SAAUA,IAAMp4B,GAAU,GAC1BwY,aAAcgjD,EAAQ1wE,UAEtBF,EAAAA,EAAAA,KAACquK,GAAa,CAACz9F,QAASA,UAhC1B5wE,EAAAA,EAAAA,KAACmhD,GAAU,CAAAjhD,UACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTL,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,YAAaY,GAAI88C,EAAWgW,GAASmoD,WAChD,CAAEzlH,MAAO4J,EAAE,qBAgCvB,CAGA,MAAMunK,GAA+C,CACnDt4E,QAAS,GACT7T,WAAY,GACZ8T,YAAa,GACbxnB,WAAY,KACZi+F,gCAAiC,KACjCC,WAAW,EACXC,sBAAsB,EACtBC,sBAAsB,EACtBC,sBAAsB,EACtBC,gBAAgB,EAChB72E,yBAA0B,GAG5B,SAASg4E,GAAcvxK,GACrB,MAAM,IAAQqK,EAAAA,EAAAA,MACRo2F,GAAiBp7B,EAAAA,GAAAA,IAAkC,CAAE/kE,KAAM,kBAC3D,KAAE8iB,GAAS0jD,GAA6CnS,EAAM,cAC9Dy+F,EAAiBhwI,GAAM5c,SAASmhE,KAAKsxB,UAAUlwB,QAC/CowB,GAAU9zB,EAAAA,GAAAA,IAA8B,CAAE/kE,KAAM,cAChD,QAAEwzE,GAAY9zE,GACd,SAAEipB,IAAa6qB,EAAAA,GAAAA,MAkBrB,OAfA70C,EAAAA,EAAAA,YAAU,UAEU4F,IAAZivE,GAAyBqlB,GAAWA,IAAYrlB,EAAQmlB,SAC1DlsF,OAAO4f,KAAKglJ,IAAsBr1I,SAAS4X,IACzCjrB,EAAS,GAAGirB,IAAS4/B,EAAQ5/B,GAAwB,IAGvDnnC,OAAO4f,KAAKglJ,IAAsBr1I,SAAS4X,IACzCjrB,EAAS,GAAGirB,IAASy9H,GAAqBz9H,GAAO,GAInC,GACnB,CAAC4/B,EAASqlB,EAASlwE,KAGpBzgB,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,OACLE,MAAO4J,EAAE,QACTkf,YAAalf,EAAE,cACf8lB,YAAU,KAEZhtB,EAAAA,EAAAA,KAACo8C,GAAiB,CAChB9+C,MAAO4J,EAAE,eACT9J,KAAK,cACLgpB,YAAalf,EAAE,wBAEjBlH,EAAAA,EAAAA,KAACgtH,GAA0B,CAAU5vH,KAAK,eAAe4vB,YAAU,KACnEhtB,EAAAA,EAAAA,KAACo9F,GAAkC,CACjChgG,KAAK,sBACLmgG,eAAgBA,EAChBjgG,MAAO4J,EAAE,yBACTnG,gBACqBY,IAAnB47F,EACIr2F,EAAE,iFACFvF,KAGR3B,EAAAA,EAAAA,KAACs6C,GAAc,CACbttB,YAAU,EACV5vB,KAAK,WACLD,GAAG,sBACHG,MAAO4J,EAAE,uBACTmf,QACE6pI,EACIA,EAAenpJ,KAAI,EAAErM,EAAO4C,MAAW,CACrCA,MAAOA,EACP5C,MAAiB,KAAVA,EAAe,SAAWA,MAEnC,GAEN6/C,gBAAiBrzC,EAAE,mCAErBlH,EAAAA,EAAAA,KAACy7F,GAAwB,CACvBt+F,GAAG,kCACHC,KAAK,kCACLE,MAAO4J,EAAE,2CACTiqC,UAAWjqC,EACT,gKAEF45D,YAAa,CACXwiE,2BAA4B,qBAGhCtjI,EAAAA,EAAAA,KAAC6tK,GAAa,CACZG,UAAWlxK,EAAM8zE,SAAS2lB,WAAaz5F,EAAM8zE,SAAS2lB,gBAAa50F,KAErE3B,EAAAA,EAAAA,KAACytK,GAAU,KACXztK,EAAAA,EAAAA,KAACiuK,GAAU,KACXjuK,EAAAA,EAAAA,KAACstK,GAAc,KACfttK,EAAAA,EAAAA,KAAC4tK,GAAe,MAGtB,CCzPO,SAASc,KACd,MAAM,GAAEvxK,EAAK,KAAOkgE,EAAAA,GAAAA,KACpB,OAAOr9D,EAAAA,EAAAA,KAAC84H,GAAa,CAAC10E,IAAKqN,EAAM,kBAAmBsnE,UAAW57H,GACjE,CCIO,SAASwxK,GAAkBzlI,GAChC,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR0kC,EAAsBu5D,GAAmB,CAAEvvF,cAAc,EAAM0mD,aAAa,IAC5EwoE,EAAyB51D,GAAc,CAAEt5D,cAAc,EAAM0mD,aAAa,IAC1EvzB,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAAC0gI,IAAyB,CAACA,IACzDnlE,EAAaH,KACblQ,EAAcyT,KAEpB,SAAS4rG,EAAiBlkI,GACxB,MAAO,CAAC,UAAW,UAAW,WAAWniC,SAASmiC,EACpD,CACA,MAAMmkI,EAAuCj+F,GACtCA,EAAQzV,gBAAgB6iC,mBAAmB1qF,MAEzC,GADEpM,EAAE,sEAGP4nK,EAAkCl+F,GACjCg+F,EAAiBh+F,EAAQlmC,QAAU,IAEjC,GADExjC,EAAE,iEAmEb,OA/DwBozD,IACtB,MAAMy0G,EAA8Cz0G,EAASn8D,OAC3D2wK,GAKIE,EAH6B10G,EAASn8D,QAAQyyE,GAClDg+F,EAAiBh+F,EAAQlmC,QAAU,MAEoCvsC,OACvE0wK,GAGFjvG,EAAW,CACTviE,MAAO6J,EAAE,sBAAuB,CAAEoV,MAAOg+C,EAAS92D,SAClDzF,YAAamJ,EAAE,0EAA2E,CACxFoV,MACEg+C,EAAS92D,OACTwrK,EAAsCxrK,OACtCurK,EAAiCvrK,SAErCwoC,iBAAkB9kC,EAAE,sBAAuB,CAAEoV,MAAOg+C,EAAS92D,SAC7Ds1B,MAAOwhC,EAASl7D,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QACxDwkB,aACEmtJ,EAAiCvrK,QAAUwrK,EAAsCxrK,OAC7E,IACMurK,EAAiCvrK,OACjC,CACE0D,EACE,+FACA,CACEoV,MAAOyyJ,EAAiCvrK,UAI9C,MACAwrK,EAAsCxrK,OACtC,CACE0D,EACE,mGACA,CACEoV,MAAO0yJ,EAAsCxrK,UAInD,SAEN7B,EACNmqC,oBAAsBzvB,GACpByyJ,EAA+BzyJ,GAC3ByyJ,EAA+BzyJ,GAC/BwyJ,EAAoCxyJ,GAC1C0c,MAAO62B,GACP/jB,sBACA7C,gBACAE,aACAD,SAAW2nC,GACTrhB,EACEkC,EAAM,oBACJmf,EAAQzV,gBAAgB8zG,gBAAgB9xK,GAAGqhB,YAAc,aAE3D,CAAC,IAEL,CAGN,CCvFO,SAAS0wJ,GAAkBhmI,GAChC,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR0kC,EAAsBu5D,GAAmB,CAAEvvF,cAAc,EAAM0mD,aAAa,IAC5E8W,EAAyBlE,GAAc,CAAEt5D,cAAc,EAAM0mD,aAAa,IAC1EvzB,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAACgvE,IAAyB,CAACA,IACzDzT,EAAaH,KAkBnB,OAjBwBnF,IACtBsF,EAAW,CACTviE,MAAO6J,EAAE,8BAA+B,CAAEoV,MAAOg+C,EAAS92D,SAC1DzF,YAAamJ,EAAE,iEAAkE,CAC/EoV,MAAOg+C,EAAS92D,SAElBwoC,iBAAkB9kC,EAAE,kBAAmB,CAAEoV,MAAOg+C,EAAS92D,SACzDs1B,MAAOwhC,EAASl7D,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QACxD27B,MAAO62B,GACPtoD,UAAU,EACVukC,sBACA7C,gBACAE,aACAD,SAAUA,CAAC2nC,EAAkBnlD,IAC3BgkC,GAAcgC,EAAM,aAAamf,EAAQzzE,GAAGqhB,cAAeiN,IAC7D,CAGN,CCVO,SAAS0jJ,GACdjmI,EACAkmI,GAEA,MAAM,EAAEloK,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACf0qH,EAAiBH,GAAkBhmI,GACnComI,EAAiBX,KACjBvgK,EAAerD,KACfwkD,EAAcyT,KAEpB,OAAO3+D,EAAAA,EAAAA,UAAgC,KACrC,MAAMyqK,EAAkCl+F,GACtC,CAAC,UAAW,UAAW,WAAWroE,SAASqoE,EAAQlmC,QAAU,IACzD,GACAxjC,EAAE,iEA8BR,MAAO,CACL,CACEzD,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/B8J,UAAU,EACVpH,QAASuB,EAAAA,GAAcyD,UACvBnF,KAAM0mE,GAAAA,GACNtsE,MAAO4J,EAAE,uBACTnG,WAAa6vE,GArC4BA,IAC3CA,GAASzV,gBAAgB6iC,mBAAmB1qF,MACxC,GACApM,EAAE,sEAmCF2nK,CAAoCj+F,IAAYk+F,EAA+Bl+F,GACjFlwE,SAAWkwE,GAAqB5rE,QAAQ8pK,EAA+Bl+F,IACvEjqE,QAAUiqE,GAAqB0+F,EAAe,CAAC1+F,KAEjD,CACEntE,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/B8J,UAAU,EACVpH,QAASuB,EAAAA,GAAcC,QACvB3B,KAAMi6D,GAAAA,GACN7/D,MAAO4J,EAAE,gBACTnG,WArCuB6vE,GACA,KAArBA,EAAQmlB,SACH7uF,EAAE,uBAEP0pE,EAAQmlB,WAAanlB,GAASzV,gBAAgB6iC,mBAAmB1qF,MAC5DpM,EAAE,+DAEP,CAAC,UAAW,UAAW,WAAWqB,SAASqoE,EAAQlmC,QAAU,IACxDxjC,EAAE,wEAEJ,GA4BLxG,SAAWkwE,GAAqB5rE,SAAS8pK,EAA+Bl+F,IACxEjqE,QAAUiqE,IACR,MAAM/wE,EAAoB,CACxBwD,QAAS,UACThG,MAAO6J,EAAE,WAAW0pE,EAAQxzE,SAC5BmO,QAAS,KAEXgkD,EAAYkC,EAAM,aAAamf,GAASzzE,GAAGqhB,YAAc,aAAc,CACrErhB,GAAIyzE,EAAQzzE,KAEXuuB,MAAK,KACJ0jJ,GAAmBhhK,EAAazD,SAAS9K,EAAa,IAEvDmP,OAAOhC,IACNoB,EAAazD,SAAS,CACpBtH,QAAS,SACThG,MAAO6J,EAAE,0BACThH,SAAU8M,aAAiBsX,OAAStX,EAAMK,SAC1C,GACF,GAGR,CACE5J,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/B8J,UAAU,EACVvH,KAAM84D,GAAAA,GACN1+D,MAAO4J,EAAE,gBACTnG,WAAa6vE,GAtEUA,IACzBA,GAASzV,gBAAgB6iC,mBAAmB5G,KACxC,GACAlwF,EAAE,+DAmE8BqoK,CAAkB3+F,GACpDjqE,QAAUiqE,GAAY5V,EAAaJ,GAAS0zG,YAAa,CAAEjqH,OAAQ,CAAElnD,GAAIyzE,EAAQzzE,OAEnF,CACEsG,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAM22C,GAAAA,GACNv8C,MAAO4J,EAAE,gBACTnG,WAAa6vE,GA9DUA,IACzBA,GAASzV,gBAAgB6iC,mBAAmBm5B,KACxC,GACAjwH,EAAE,+DA2D8BsoK,CAAkB5+F,GACpDjqE,QAAUiqE,IACR,MAAM/wE,EAAoB,CACxBwD,QAAS,UACThG,MAAO6J,EAAE,GAAG0pE,EAAQxzE,gBACpBmO,QAAS,KAEXgkD,EAAYkC,EAAM,aAAamf,GAASzzE,GAAGqhB,YAAc,WAAY,CACnEphB,KAAM,GAAGwzE,EAAQxzE,WAAU,IAAIwU,MAC5B6lH,eACA98H,QAAQ,0BAA2B,UAErC+wB,MAAK,KACJtd,EAAazD,SAAS9K,EAAM,IAE7BmP,OAAOhC,IACNoB,EAAavD,aAAahL,EAAO,CAC/BwD,QAAS,SACThG,MAAO6J,EAAE,0BACThH,SAAU8M,aAAiBsX,OAAStX,EAAMK,SAC1C,GACF,GAGR,CAAE5J,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,kBACTnG,WAAa6vE,GAhHYA,IAC3BA,GAASzV,gBAAgB6iC,mBAAmB3yC,OACxC,GACAnkD,EAAE,gEA6G8BuoK,CAAoB7+F,GACtDjqE,QAAUiqE,GAAYy+F,EAAe,CAACz+F,IACtCtpE,UAAU,GAEb,GACA,CACD8G,EACAkhK,EACAD,EACAD,EACAp0G,EACAzL,EACAroD,GAEJ,CCjJO,SAASwoK,KACd,MAAM,EAAExoK,IAAMC,EAAAA,EAAAA,MACRk9C,GAASgZ,EAAAA,GAAAA,KACT5D,EAAiBm9D,GAAsB,YAE3C5pH,MAAO2iK,EACPzvJ,KAAM0wD,EACNrb,QAASq6G,EACTxmJ,UAAWymJ,GACT55G,GAAgBxE,EAAM,aAAapN,EAAOlnD,IAAM,OAC9C69D,EAAerW,KACf/jB,EAAcuuI,IAAkB,IAAMn0G,EAAaJ,GAASmoD,aAC5D,cAAEhxD,GAAkBJ,MAExBzxC,KAAMglJ,EACNl4J,MAAOm4J,EACP5vG,QAAS6vG,EACTh8I,UAAW0mJ,GACT75G,GAAuCxE,EAAM,kBAAmB,CAClEs+G,WAAY,4BAER/iK,EAAQm4J,GAAqBwK,EAC7B/qH,EAAaT,KACbgG,GAA0C9lD,EAAAA,EAAAA,UAAQ,KACtD,MAAM8lD,EAAO,CACX,CAAE7sD,MAAO4J,EAAE,WAAYiuB,KAAMylC,GAASg3B,gBACtC,CAAEt0F,MAAO4J,EAAE,aAAciuB,KAAMylC,GAASmuF,kBACxC,CAAEzrJ,MAAO4J,EAAE,iBAAkBiuB,KAAMylC,GAAS8zG,qBAC5C,CAAEpxK,MAAO4J,EAAE,eAAgBiuB,KAAMylC,GAASo1G,cAC1C,CAAE1yK,MAAO4J,EAAE,eAAgBiuB,KAAMylC,GAASq1G,eAK5C,OAHIl+G,GAAeigB,mBAAsBkzF,GAAgBA,EAAahzG,QAAQ1uD,OAAS,IACrF2mD,EAAKpmD,KAAK,CAAEzG,MAAO4J,EAAE,iBAAkBiuB,KAAMylC,GAASs1G,uBAEjD/lH,CAAI,GACV,CAACjjD,EAAG6qD,EAAemzG,IACtB,OAAIl4J,GAAchN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe0yG,GAAkBxK,KACtEx0F,GAAWi/F,GAAoBC,GAA4B9vK,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,KAG3F7kD,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAOuzE,GAASxzE,KAChBgjD,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,YAAaY,GAAI88C,EAAWgW,GAASmoD,WAChD,CAAEzlH,MAAOszE,GAASxzE,OAEpBujD,eACE3gD,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAAS,IAAIm2D,KAAmB74B,GAChCx9B,SAAU6F,GAAAA,GAAiBC,MAC3B3I,aAAcqwE,OAKpB5wE,EAAAA,EAAAA,KAAC09D,GAAc,CACbe,QAAS,CACPnhE,MAAO4J,EAAE,oBACTiuB,KAAMylC,GAASmoD,SACfrkD,oBAAqB,YAEvBvU,KAAMA,EACN9F,OAAQ,CAAElnD,GAAIyzE,EAAQzzE,QAI9B,CCxEO,SAAS4lH,KACd,MAAM,EAAE77G,IAAMC,EAAAA,EAAAA,MAER6zD,EAAerW,KACfv0B,EAAiB41E,KACjB9jE,EAAekjE,KACft4D,EAAO6zB,GAAoB,CAC/Bvc,IAAKqN,EAAM,aACXrhC,iBACA8R,iBAGIvM,ECdD,SAAkCuT,GACvC,MAAM,IAAQ/hC,EAAAA,EAAAA,MACRy9C,EAAaT,MACb,KAAEjkC,GAAS0jD,GAA6CnS,EAAM,cAC9D+0D,EAAmBxhH,QAAQkb,GAAQA,EAAK5c,SAAW4c,EAAK5c,QAAc,MAEtE+rK,EAAiBH,GAAkBhmI,GACnComI,EAAiBX,GAAkBzlI,GAsCzC,OApC8B7kC,EAAAA,EAAAA,UAC5B,IAAM,CACJ,CACEZ,KAAMrJ,EAAeyN,KACrBrH,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVvH,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,kBACTnG,WAAYylH,OACR7kH,EACAuF,EACE,yIAENa,KAAM68C,EAAWgW,GAAS6rD,gBAE5B,CACEhjH,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAMirE,GAAAA,GACN7wE,MAAO4J,EAAE,mBACTP,QAAS2oK,GAEX,CAAE7rK,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,mBACTP,QAAS0oK,EACT/nK,UAAU,KAGd,CAACk/G,EAAkB8oD,EAAgBD,EAAgBzqH,EAAY19C,GAInE,CDhCyBipK,CAAyBrjI,EAAK00B,yBAC/Cr/B,EAAagtI,GAAkBriI,EAAK00B,yBAFjB,IAGnB,KAAEthD,GAAS0jD,GAA6CnS,EAAM,cAC9D+0D,EAAmBxhH,QAAQkb,GAAQA,EAAK5c,SAAW4c,EAAK5c,QAAc,OACtE,QAAEiyD,GAAYzoB,EACpBywB,GAAqB,YAsBrBlF,GACE,CAAE3nB,QAAS,CAAC,mBAAoBgqB,KAAM,CAAC,oBArBV5+D,EAAAA,EAAAA,cAC5BuR,IACC,GACO,SADCA,GAAS4tD,WAEb,OAAQ5tD,GAAS5J,MACf,IAAK,MAGL,IAAK,eAGL,IAAK,iBACE8xD,IAIb,GAEF,CAACA,KAMH,MAAMuD,EAASvC,KAEf,OACEjxD,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,YACT+5C,eAAgB/5C,EAAE,YAClB85C,UAAW95C,EACT,8XACA,CAAE4/G,QAlDcx8E,QAoDlB4W,aAAc2X,GAAcC,EAAQ,YACpCl9C,YAAa1U,EACX,sFACA,CAAE4/G,QAvDcx8E,QAyDlBqW,eAAe3gD,EAAAA,EAAAA,KAACyjE,GAAkB,CAAChgE,KAAM,eAE3CzD,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,qBACHizB,eAAgBA,EAChBuF,eAAgBA,EAChBuM,aAAcA,EACdC,WAAYA,EACZ8C,gBAAiB/9B,EAAE,0BACnBg+B,gBAEMh+B,EADJs/G,EACM,8DACA,kDAERrhF,sBAEMj+B,EADJs/G,EACM,qDAEA,yFAGRl/E,eAAgBk/E,OAAmB7kH,EAAYo2B,GAAAA,GAC/CwN,sBAAsBvlC,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrCwN,qBAAsBkhF,EAAmBt/G,EAAE,uBAAoBvF,EAC/D0jC,sBACEmhF,EAAmB,IAAMxrD,EAAaJ,GAAS6rD,oBAAiB9kH,KAE9DmrC,EACJ1K,gBAAiBl7B,EAAE,eAI3B,CE3GO,SAAS+oK,KACd,MAAM5rH,GAASgZ,EAAAA,GAAAA,KAEf,OACEr9D,EAAAA,EAAAA,KAAC0/H,GAAU,CACTzsC,QAAS,MACT91F,GAAIknD,EAAOlnD,IAAM,GACjBsG,KAAM,UACNg8H,cAAe7kE,GAASw1G,iBAG9B,CCXO,SAASJ,KACd,MAAM3rH,GAASgZ,EAAAA,GAAAA,KAEf,OACEr9D,EAAAA,EAAAA,KAAC6/H,GAAU,CACT5sC,QAAS,MACT91F,GAAIknD,EAAOlnD,IAAM,GACjBsG,KAAM,UACNg8H,cAAe7kE,GAASy1G,iBAG9B,CCqBO,SAASC,KACd,MAAM,EAAEppK,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KACbE,GAASgZ,EAAAA,GAAAA,MAEPn9C,KAAM0wD,EAAO,UAAExnD,GAAc6sC,GAAgBxE,EAAM,aAAapN,EAAOlnD,IAAM,OAC/EutH,EAAqBF,KACrBxvD,EAAerW,KAErB,GAAIv7B,IAAcwnD,EAAS,OAAO5wE,EAAAA,EAAAA,KAACkqD,GAAW,IAE9C,MAAM/D,EAA0B,CAC9B,CACEhpD,GAAI,QACJG,MAAO4J,EAAE,kBACTohD,QACEtoD,EAAAA,EAAAA,KAACk9H,GAAkB,CACjBC,6BAA8Bj2H,EAC5B,sEACA,CACEqnK,YAAa39F,GAASxzE,SAK9BqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,MAAE0sD,GAAUnS,EAClB,IAAKmS,GAAOh2D,OACV,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,WACJG,MAAO4J,EAAE,yBACTohD,QACEtoD,EAAAA,EAAAA,KAAC+8H,GAAkB,CACjB/uE,YAAY,UACZ0uE,yBAAyB,QACzBC,4BAA6Bz1H,EAAE,4CAA6C,CAC1EqnK,YAAa39F,GAASxzE,SAI5BqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,SAAE2uH,GAAap0E,EACrB,IAAKo0E,GAAUj4H,OACb,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,SACJG,MAAO4J,EAAE,UACTohD,QAAQtoD,EAAAA,EAAAA,KAACs7H,GAAyB,MAwCtC,OACEh2H,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,aACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,YAAaY,GAAI88C,EAAWgW,GAASmoD,WAChD,CACEzlH,MAAOszE,GAASxzE,KAChB0K,GAAI88C,EAAWgW,GAASg3B,eAAgB,CAAEvtC,OAAQ,CAAElnD,GAAIyzE,GAASzzE,OAEnE,CACEG,MAAO4J,EAAE,UACTY,GAAI88C,EAAWgW,GAASo1G,aAAc,CAAE3rH,OAAQ,CAAElnD,GAAIyzE,GAASzzE,OAEjE,CAAEG,MAAO4J,EAAE,kBAGflH,EAAAA,EAAAA,KAACgqD,GAAU,CACT7D,MAAOA,EACPznB,SAvDYxe,IAChB,MAAM,MAAEs5C,EAAK,SAAEiiE,GAAav7G,EACtB4Y,EAAwB,GAC9B,IAAK,MAAMu2C,KAAQ7V,EACjB,IAAK,MAAM9wC,KAAQ+yG,EACjB3iG,EAAM/0B,KAAK,CAAEsrE,OAAM3mD,SAGvB,OAAO,IAAIyhB,SAAeqd,IACxBkjE,EAAmB,CACjBrtH,MAAO6J,EAAE,aACT6xB,MAAOA,EAAGs2C,OAAM3mD,UAAW,GAAG2mD,EAAKlyE,MAAMurB,EAAKvrB,KAC9C27B,QACAkQ,cAAe,CACb,CAAEloB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAGusD,UAAWA,EAAKzT,UAC9C,CAAE96C,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAG4F,UAAWA,EAAKtrB,OAEhD6rC,SAAUA,EAAGomC,OAAM3mD,UACjB6mC,GAAYkC,EAAM,0BAA2B,CAC3C4d,KAAMA,EAAKlyE,GACXkgI,gBAAiB30G,EAAKvrB,GACtB4/D,aAAc,UACdugE,UAAW1sD,EAAQzzE,KAEvB+rC,WAAYA,KACVse,GAAS,EAEXj7C,QAASA,KACPyuD,EAAaJ,GAASo1G,aAAc,CAClC3rH,OAAQ,CAAElnD,GAAIyzE,EAAQzzE,GAAGqhB,aACzB,GAEJ,GACF,EAuBE8wB,aAAW,EACX9B,SAAUA,KACRwtB,EAAaJ,GAASo1G,aAAc,CAAE3rH,OAAQ,CAAElnD,GAAIyzE,GAASzzE,KAAO,MAK9E,CCxHO,SAASozK,KACd,MAAM,EAAErpK,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KACbE,GAASgZ,EAAAA,GAAAA,KACTrC,EAAerW,MACbzkC,KAAM0wD,EAAO,UAAExnD,GAAc6sC,GAAgBxE,EAAM,aAAapN,EAAOlnD,IAAM,OAC/EutH,EAAqBF,KAE3B,GAAIphG,IAAcwnD,EAAS,OAAO5wE,EAAAA,EAAAA,KAACkqD,GAAW,IAE9C,MAAM/D,EAA0B,CAC9B,CACEhpD,GAAI,QACJG,MAAO4J,EAAE,kBACTohD,QACEtoD,EAAAA,EAAAA,KAACw9H,GAAkB,CACjBC,6BAA8Bv2H,EAC5B,sEACA,CACEqnK,YAAa39F,GAASxzE,SAK9BqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,MAAEysD,GAAUlS,EAClB,IAAKkS,GAAO/1D,OACV,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,QACJG,MAAO4J,EAAE,yBACTohD,QACEtoD,EAAAA,EAAAA,KAAC+8H,GAAkB,CACjB/uE,YAAY,UACZ0uE,yBAAyB,QACzBC,4BAA6Bz1H,EAAE,4CAA6C,CAC1EqnK,YAAa39F,GAASxzE,SAI5BqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,SAAE2uH,GAAap0E,EACrB,IAAKo0E,GAAUj4H,OACb,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,SACJG,MAAO4J,EAAE,UACTohD,QAAQtoD,EAAAA,EAAAA,KAACs7H,GAAyB,MAwCtC,OACEh2H,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,aACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,YAAaY,GAAI88C,EAAWgW,GAASmoD,WAChD,CACEzlH,MAAOszE,GAASxzE,KAChB0K,GAAI88C,EAAWgW,GAASg3B,eAAgB,CAAEvtC,OAAQ,CAAElnD,GAAIyzE,GAASzzE,OAEnE,CACEG,MAAO4J,EAAE,eACTY,GAAI88C,EAAWgW,GAASq1G,aAAc,CAAE5rH,OAAQ,CAAElnD,GAAIyzE,GAASzzE,OAEjE,CAAEG,MAAO4J,EAAE,kBAGflH,EAAAA,EAAAA,KAACgqD,GAAU,CACT7D,MAAOA,EACPznB,SAvDWhwB,UACf,MAAM,MAAE6qD,EAAK,SAAEkiE,GAAav7G,EACtB4Y,EAAwB,GAC9B,IAAK,MAAMo2C,KAAQ3V,EACjB,IAAK,MAAM7wC,KAAQ+yG,EACjB3iG,EAAM/0B,KAAK,CAAEmrE,OAAMxmD,SAGvB,OAAO,IAAIyhB,SAAeqd,IACxBkjE,EAAmB,CACjBrtH,MAAO6J,EAAE,aACT6xB,MAAOA,EAAGm2C,OAAMxmD,UAAW,GAAGwmD,EAAK/xE,MAAMurB,EAAKvrB,KAC9C27B,QACAkQ,cAAe,CACb,CAAEloB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAGosD,UAAWA,EAAK9xE,MAC9C,CAAE0jB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAG4F,UAAWA,EAAKtrB,OAEhD6rC,SAAUA,EAAGimC,OAAMxmD,UACjB6mC,GAAYkC,EAAM,0BAA2B,CAC3Cyd,KAAMA,EAAK/xE,GACXkgI,gBAAiB30G,EAAKvrB,GACtB4/D,aAAc,UACdugE,UAAW1sD,EAAQzzE,KAEvB+rC,WAAYA,KACVse,GAAS,EAEXj7C,QAASA,KACPyuD,EAAaJ,GAASq1G,aAAc,CAClC5rH,OAAQ,CAAElnD,GAAIyzE,EAAQzzE,GAAGqhB,aACzB,GAEJ,GACF,EAuBE8wB,aAAW,EACX9B,SAAUA,KACRwtB,EAAaJ,GAASq1G,aAAc,CAAE5rH,OAAQ,CAAElnD,GAAIyzE,GAASzzE,KAAO,MAK9E,CCpJO,SAAS6sJ,GAAUltJ,GACxB,MAAM,IAAQqK,EAAAA,EAAAA,MACR2xD,EAASvC,KACf,OACEjxD,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,aACT+5C,eAAgB/5C,EAAE,aAClB85C,UAAW95C,EACT,yMAEFg6C,aAAc2X,GAAcC,EAAQ,aACpCl9C,YAAa1U,EACX,yMAEFy5C,eAAe3gD,EAAAA,EAAAA,KAACyjE,GAAkB,CAAChgE,KAAM,gBAE3CzD,EAAAA,EAAAA,KAAC2zJ,GAAa,CACZS,qBAAsBx5F,GAAS41G,eAC/Bzc,gBAAiBj3J,EAAMi3J,gBACvB3vG,IAAKqN,EAAM,kBAInB,CCjBO,SAASg/G,KACd,MAAM,EAAEvpK,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACfvvC,GAAWC,EAAAA,GAAAA,MACXk6C,EAAcyT,KAKdpe,EAAaT,KACnB,OACE7+C,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,eACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,SAAUY,GAAI88C,EAAWgW,GAAS81G,QAC7C,CAAEpzK,MAAO4J,EAAE,oBAGflH,EAAAA,EAAAA,KAACijE,GAAW,CAAC5jE,WAAY6H,EAAE,eAAgBw3B,SAdDhwB,UAC5C,MAAMiiK,QAAoBphH,EAAYkC,EAAM,UAAWyd,GACvDlU,EAAaJ,GAASktD,YAAa,CAAEzjE,OAAQ,CAAElnD,GAAIwzK,EAAYxzK,KAAO,EAYLqwC,SAAUA,IAAMp4B,GAAU,GAAGlV,UAC1FF,EAAAA,EAAAA,KAAC4wK,GAAU,QAInB,CAEO,SAASC,KACd,MAAM,EAAE3pK,IAAMC,EAAAA,EAAAA,MACRiO,GAAWC,EAAAA,GAAAA,MACXgvC,GAASgZ,EAAAA,GAAAA,KACTlgE,EAAK3C,OAAO6pD,EAAOlnD,KACjB+iB,KAAMgvD,GAASjZ,GAAaxE,EAAM,UAAUt0D,EAAGqhB,eACjD6kD,EAAeP,KAKfle,EAAaT,KACnB,OAAK+qB,GAaH5pE,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6xE,GAAM9xE,KAAO8J,EAAE,oBAAqB,CAAE4pK,SAAU5hG,GAAM9xE,OAAU8J,EAAE,QACzEk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,SAAUY,GAAI88C,EAAWgW,GAAS81G,QAC7C,CAAEpzK,MAAO4xE,GAAM9xE,KAAO8J,EAAE,oBAAqB,CAAE4pK,SAAU5hG,GAAM9xE,OAAU8J,EAAE,aAG/ElH,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,aACdw3B,SA5BwChwB,gBACtC20D,EAAa5R,EAAM,UAAUt0D,EAAGqhB,cAAe0wD,GACrD95D,GAAU,EAAE,EA2BRo4B,SAAUA,IAAMp4B,GAAU,GAC1BwY,aAAcshD,EAAKhvE,UAEnBF,EAAAA,EAAAA,KAAC4wK,GAAU,UAzBb5wK,EAAAA,EAAAA,KAACmhD,GAAU,CAAAjhD,UACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTL,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,SAAUY,GAAI88C,EAAWgW,GAAS81G,QAC7C,CAAEpzK,MAAO4J,EAAE,kBAyBvB,CAEA,SAAS0pK,KACP,MAAM,EAAE1pK,IAAMC,EAAAA,EAAAA,MACd,OACE7B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,OACLE,MAAO4J,EAAE,QACTkf,YAAalf,EAAE,cACf8lB,YAAU,KAEZhtB,EAAAA,EAAAA,KAACgtH,GAA0B,CAAO5vH,KAAK,eAAe4vB,YAAU,KAChEhtB,EAAAA,EAAAA,KAAC+lE,GAAe,CAAC12B,cAAY,EAAAnvC,UAC3BF,EAAAA,EAAAA,KAACg7C,GAAgB,CACf59C,KAAK,cACLE,MAAO4J,EAAE,eACTkf,YAAalf,EAAE,2BAKzB,CCrEO,SAAS4gH,GAAuChrH,GASrD,MAAM,IAAQqK,EAAAA,EAAAA,MACRiO,GAAWC,EAAAA,GAAAA,OACX,KAAE65D,EAAI,uBAAE6hG,EAAsB,wBAAEC,EAAuB,yBAAEC,GAA6Bn0K,EAE5F,OACEwI,EAAAA,EAAAA,MAACoc,GAAW,CAAAxhB,SAAA,EACVF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,QAAQhH,SAAEgvE,EAAK9xE,OACnC8xE,EAAKtzD,cAAe5b,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,eAAehH,SAAEgvE,EAAKtzD,cAC/DszD,EAAK/T,gBAAgBiV,eACpBpwE,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,gBAAgBhH,SAClC6wK,GACC/wK,EAAAA,EAAAA,KAACiU,GAAU,CACTK,gBAAiB,CACf,CAAElX,KAAM8xE,EAAK/T,gBAAgBiV,cAAchzE,KAAMoX,KAAMu8J,OAI3D/wK,EAAAA,EAAAA,KAACiU,GAAU,CAAC/J,OAAQ,CAACglE,EAAK/T,gBAAgBiV,cAAchzE,WAI5D8xE,EAAK7T,SAAW6T,EAAKO,YAAcP,EAAKgiG,cACxClxK,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,WAAWhH,UAC9BF,EAAAA,EAAAA,KAACqS,GAAY,CACXC,OAAQ48D,EAAK/T,gBAAgByU,YAAYhU,SACzClhE,MAAOw0E,EAAK7T,SAAW6T,EAAKO,YAAcP,EAAKgiG,WAC/CvqK,QACEqqK,EACI,KACE57J,EAAS47J,EAAwB,OAEnCrvK,OAKVutE,EAAKa,UAAYb,EAAKc,aAAed,EAAKiiG,eAC1CnxK,EAAAA,EAAAA,KAACmsE,GAAsB,CACrB75D,OAAQ48D,EAAK/T,gBAAgB8U,aAAarU,SAC1ClhE,MAAOw0E,EAAKa,UAAYb,EAAKc,aAAed,EAAKiiG,YACjDxqK,QACEsqK,EACI,KACE77J,EAAS67J,EAAyB,OAEpCtvK,MAMhB,CC1FO,SAASyvK,KACd,MAAM/sH,GAASgZ,EAAAA,GAAAA,MACPn9C,KAAMgvD,GAAS7Y,GAAiB5E,EAAM,SAAUpN,EAAOlnD,IACzDynD,EAAaT,KAEnB,OAAO+qB,GACLlvE,EAAAA,EAAAA,KAAC8nH,GAAW,CACV54C,KAAMA,EACN6hG,uBAAwBnsH,EAAWgW,GAAS62B,oBAAqB,CAC/DptC,OAAQ,CAAElnD,IAAK+xE,EAAK/T,gBAAgBiV,cAAcjzE,IAAM,IAAIqhB,cAE9DwyJ,wBAAyBpsH,EAAWgW,GAASiB,YAAa,CACxDxX,OAAQ,CAAElnD,IAAK+xE,EAAK/T,gBAAgByU,YAAYzyE,IAAM,GAAGqhB,cAE3DyyJ,yBAA0BrsH,EAAWgW,GAASiB,YAAa,CACzDxX,OAAQ,CACNlnD,IAAK+xE,EAAK/T,gBAAgB8U,aAAa9yE,IAAM,GAAGqhB,gBAIpD,IACN,CCxBO,SAASkhH,KACd,MAAMr7E,GAASgZ,EAAAA,GAAAA,MACT,IAAQl2D,EAAAA,EAAAA,MACd,OACEnH,EAAAA,EAAAA,KAAC6/H,GAAU,CACT5sC,QAAQ,MACRusC,kBAAmBt4H,EAAE,aACrBo4H,eAAgBp4H,EAAE,gBAClBm4H,uBAAyB/iH,GACvBpV,EAAE,8DAA+D,CAAEoV,UAErEnf,GAAIknD,EAAOlnD,IAAM,GACjBsG,KAAM,OACNg8H,cAAe7kE,GAASy2G,gBAG9B,CCdO,SAASC,GAAuB/kK,GACrC,MAAM,IAAQpF,EAAAA,EAAAA,MACRilH,EAAcP,KACdQ,EAAsB5B,KAS5B,OAR4B3uH,EAAAA,EAAAA,cACzBy9D,IACC6yD,EAAYllH,EAAE,qBAAsB,CAAEoV,MAAOi9C,EAAM/1D,UAAYg2D,IAC7D6yD,EAAoB7yD,EAAOD,EAAOhtD,EAAQ,GAC1C,GAEJ,CAAC8/G,EAAqB9/G,EAAS6/G,EAAallH,GAGhD,CCPO,SAASqqK,GAAgBlrJ,GAC9B,MAAM20C,EAAerW,KACf6sH,GAAkB11K,EAAAA,EAAAA,cACrBozE,GAAelU,EAAaJ,GAASktD,YAAa,CAAEzjE,OAAQ,CAAElnD,GAAI+xE,EAAK/xE,OACxE,CAAC69D,IAEG+9B,EAAW9pB,KACX5sC,EAAa8sC,GAAc,IAAK9oD,EAAS1f,QAAS6qK,IAClDjvI,EAAoB+sC,KAEpB4tB,EAAqBhtB,GAA0BtV,GAAS62B,oBAAqBprE,GAC7EmsD,EAAgBhD,GAAiBnpD,GACjCosD,EAAiB3C,GAAkBzpD,GAYzC,OAXqBhiB,EAAAA,EAAAA,UACnB,IAAM,CACJ00F,EACA12D,EACA66D,EACA36D,EACAiwC,EACAC,IAEF,CAACD,EAAejwC,EAAmBw2D,EAAUtmB,EAAgBpwC,EAAY66D,GAG7E,CC3BO,SAASu0E,GAAevoI,GAC7B,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR0kC,EAAsB0lI,GAAgB,CAAE17J,cAAc,EAAM0mD,aAAa,IACzE8W,EAAyBlE,GAAc,CAAEt5D,cAAc,EAAM0mD,aAAa,IAC1Em1G,EAAiCxhG,GAA0BtV,GAAS62B,oBAAqB,CAC7F57E,cAAc,EACd0mD,aAAa,IAETvzB,GAAgB3kC,EAAAA,EAAAA,UACpB,IAAM,CAACgvE,EAAwBq+F,IAC/B,CAACr+F,EAAwBq+F,IAGrBC,EAAoBziG,GACjBA,GAAM/T,gBAAgB6iC,mBAAmB3yC,YAC5C1pD,EACAuF,EAAE,+DAGF04D,EAAaH,KAiCnB,OA/BqBlG,IACnB,MAAMq4G,EAAmBr4G,EAAMp7D,OAAOwzK,GAEtC/xG,EAAW,CACTviE,MAAO6J,EAAE,2BAA4B,CAAEoV,MAAOi9C,EAAM/1D,SACpDzF,YAAamJ,EAAE,8DAA+D,CAC5EoV,MAAOi9C,EAAM/1D,OAASouK,EAAiBpuK,SAEzCwoC,iBAAkB9kC,EAAE,eAAgB,CAAEoV,MAAOi9C,EAAM/1D,SACnDs1B,MAAOygC,EAAMn6D,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QACrDwkB,aACEgwJ,EAAiBpuK,OAAS,EACtB,CACE0D,EACE,qFACA,CACEoV,MAAOs1J,EAAiBpuK,eAI9B7B,EACNmqC,oBAAqB6lI,EACrB54I,MAAO62B,GACPtoD,UAAU,EACVukC,sBACA7C,gBACAE,aACAD,SAAUA,CAACimC,EAAYzjD,IACrBgkC,GAAcgC,EAAM,UAAUyd,EAAK/xE,GAAGqhB,cAAeiN,IACvD,CAGN,CC/CO,SAASomJ,GAAexrJ,GAI7B,MAAM,eAAEyrJ,GAAmBzrJ,GACrB,EAAEnf,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACfotH,EAAcN,GAAeK,GAC7BE,EAAsBV,KACtBW,EClBD,SAAyC1lK,GAC9C,MAAM,IAAQpF,EAAAA,EAAAA,MACRilH,EAAcP,KACdqmD,ECAD,WACL,MAAM,EAAEhrK,IAAMC,EAAAA,EAAAA,OACR,cAAE4qD,GAAkBJ,KACpB9lB,EAAsBi/E,KACtBqnD,EAA+B1yG,KAE/BlQ,EAAcyT,KAmEpB,OAjEgClnE,EAAAA,EAAAA,cAC9B,CAAC09D,EAAkBzlB,EAAwB7K,KACzC,MAAMkpI,EACJrgH,GAAegO,cAAgBhsB,GAAUonB,gBAAgB6iC,mBAAmB5G,KACxEi7E,EAAoBhjG,GACpBA,EAAKtP,aACA74D,EAAE,oEAEPmoE,EAAK2C,kBACA9qE,EAAE,sDAENkrK,OAAL,EACSlrK,EAAE,+DAIPorK,EAAmB94G,EAAMr7D,OAAOk0K,GAKhCh1K,EAAQ02C,EAAStwC,KAJqB,CAC1C2sE,aAAc,gCACdlB,KAAM,yBAE+Bn7B,EAAStwC,MAAQ,cAExD0uK,EAA6B,CAC3B90K,MAAO6J,EAAE7J,EAAO,CAAEif,MAAOk9C,EAAMh2D,SAC/BzF,YAAamJ,EAAE,8DAA+D,CAC5EoV,MAAOk9C,EAAMh2D,OAAS8uK,EAAiB9uK,SAEzCwoC,iBAAkB9kC,EAAE,cAAe,CAAEoV,MAAOk9C,EAAMh2D,SAClDs1B,MAAO0gC,EAAMp6D,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE2vB,SAAU1vB,EAAE0vB,YACzD7iC,MAAQs2C,GAAkBA,EAAKlyE,GAC/BykB,aACE0wJ,EAAiB9uK,OAAS,EACtB,CACE0D,EACE,qFACA,CACEoV,MAAOg2J,EAAiB9uK,eAI9B7B,EACNmqC,oBAAqBumI,EACrB/qK,UAAU,EACVukC,sBACA7C,cAAe,CAAC,CAAEloB,OAAQ,OAAQgC,KAAOusD,GAAkBA,EAAKzT,WAChE1yB,aACAD,SAAUv6B,MAAO2gE,EAAe5jD,KAC9B,GAAI4jD,EAAKo8C,WACP,IAAK,MAAM/iG,KAAQ2mD,EAAKo8C,iBAChBl8D,EACJkC,EAAM,UAAU4d,EAAKlyE,GAAGqhB,oBACxB,CACErhB,GAAIurB,EAAKvrB,GACT6mF,cAAc,GAEhBv4D,EAGN,GAEF,GAEJ,CAACsmC,GAAegO,aAAcl0B,EAAqBsmI,EAA8B5iH,EAAaroD,GAGlG,CD1E+BqrK,GAe7B,OAb+Bz2K,EAAAA,EAAAA,cAC5BozE,IACCk9C,EACEllH,EAAE,2BACDsyD,IACC04G,EAAqB14G,EAAO0V,EAAM3iE,EAAQ,GAE5CrF,EAAE,kBACFuqD,EAAM,UAAUyd,EAAK/xE,GAAGqhB,0BACzB,GAEH,CAAC0zJ,EAAsB3lK,EAAS6/G,EAAallH,GAGjD,CDDuCsrK,IAC/B,cAAEzgH,GAAkBJ,KAE1B,OAAOttD,EAAAA,EAAAA,UAAQ,IAsBwB,CACnC,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/B0C,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVvH,KAAM84D,GAAAA,GACN1+D,MAAO4J,EAAE,aACTnG,WAAamuE,GAzBOA,IACtBA,GAAM/T,gBAAgB6iC,mBAAmB5G,KACrC,GACAlwF,EAAE,8DAsBwBurK,CAAevjG,GAC3CvoE,QAAUuoE,GAASlU,EAAaJ,GAASi2G,SAAU,CAAExsH,OAAQ,CAAElnD,GAAI+xE,EAAK/xE,OAE1E,CAAEsG,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,sBACTnG,WAAamuE,GAxBOA,IACtBnd,GAAegO,cAAgBmP,GAAM/T,gBAAgB6iC,mBAAmB5G,KACpE,GACAlwF,EACE,kIAoBwBwrK,CAAexjG,GAC3CvoE,QAAUuoE,GAAS8iG,EAAoB,CAAC9iG,KAE1C,CACEzrE,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAM0mE,GAAAA,GACNtsE,MAAO4J,EAAE,2BACTnG,WAAamuE,GAtCUA,IACzBnd,GAAegO,cAAgBmP,GAAM/T,gBAAgB6iC,mBAAmB5G,KACpE,GACAlwF,EACE,qIAkCwByrK,CAAkBzjG,GAC9CvoE,QAAUuoE,GAAS+iG,EAA6B/iG,IAElD,CAAEzrE,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,eACTnG,WAAamuE,GAvDSA,IACxBA,GAAM/T,gBAAgB6iC,mBAAmB3yC,OACrC,GACAnkD,EAAE,+DAoDwByqK,CAAiBziG,GAC7CvoE,QAAUuoE,GAAS6iG,EAAY,CAAC7iG,IAChC5nE,UAAU,KAIb,CACDyqD,GAAegO,aACfgyG,EACA/2G,EACAi3G,EACAD,EACA9qK,GAEJ,CG/EO,SAAS0rK,KACd,MAAM,EAAE1rK,IAAMC,EAAAA,EAAAA,MACRk9C,GAASgZ,EAAAA,GAAAA,MACT,MAAErwD,EAAOkT,KAAMgvD,EAAI,QAAE3Z,GAAYc,GAAiB5E,EAAM,SAAUpN,EAAOlnD,IACzE69D,EAAerW,KACf/jB,EAAcixI,GAAe,CACjCC,eAAgBA,IAAM92G,EAAaJ,GAAS81G,OAC5CmC,qBAAqB,IAEjBrnB,EAA2B50B,GAAsB,QACjDhyE,EAAaT,KAEnB,OAAIn3C,GAAchN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,IACpD2Z,GAGH5pE,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6xE,GAAM9xE,KACbgjD,YAAa,CAAC,CAAE9iD,MAAO4J,EAAE,SAAUY,GAAI88C,EAAWgW,GAAS81G,QAAU,CAAEpzK,MAAO4xE,GAAM9xE,OACpFujD,eACE3gD,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAAS,IAAIkoJ,KAA6B5qH,GAC1Cx9B,SAAU6F,GAAAA,GAAiBC,MAC3B3I,aAAc2uE,OAIpBlvE,EAAAA,EAAAA,KAAC09D,GAAc,CACbe,QAAS,CACPnhE,MAAO4J,EAAE,iBACTiuB,KAAMylC,GAAS81G,MACfhyG,oBAAqB,SAEvBvU,KAAM,CACJ,CAAE7sD,MAAO4J,EAAE,WAAYiuB,KAAMylC,GAASktD,aACtC,CAAExqH,MAAO4J,EAAE,SAAUiuB,KAAMylC,GAASk4G,aACpC,CAAEx1K,MAAO4J,EAAE,SAAUiuB,KAAMylC,GAASm4G,YAEtC1uH,OAAQ,CAAElnD,GAAI+xE,EAAK/xE,UA1BP6C,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,GA8BjD,CC7CO,SAASumH,KACd,MAAM,EAAExpK,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACfv0B,EAAiBmtG,KACjBr7F,EAAeqvI,KACfzkI,EAAO6zB,GAAiB,CAAEvc,IAAKqN,EAAM,UAAWrhC,iBAAgB8R,iBAChEvM,ECLD,SAA+BmX,GACpC,MAAM,IAAQ3lC,EAAAA,EAAAA,MACRy9C,EAAaT,KACb4tH,EAAcN,GAAe3kI,EAAK00B,yBAClCwwG,EAAsBV,MAEtB,KAAEpxJ,GAAS0jD,GAA6CnS,EAAM,WAC9DuhH,EAAgBhuK,QAAQkb,GAAQA,EAAK5c,SAAW4c,EAAK5c,QAAc,MAEzE,OAAOe,EAAAA,EAAAA,UACL,IAAM,CACJ,CACEZ,KAAMrJ,EAAeyN,KACrBrH,UAAWnG,EAAoBoG,KAC/BgK,UAAU,EACVpH,QAASuB,EAAAA,GAAcC,QACvB3B,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,eACTnG,WAAYiyK,OACRrxK,EACAuF,EACE,sIAENa,KAAM68C,EAAWgW,GAAS61G,aAE5B,CAAEhtK,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,sBACTP,QAASA,IAAMqrK,EAAoBllI,EAAKhsC,gBAE1C,CACE2C,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/ByC,KAAMi6D,GAAAA,GACN7/D,MAAO4J,EAAE,WACTP,QAASA,KAAWmmC,EAAKyoB,SAC3B,GACA,CAAE9xD,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,gBACTP,QAASorK,EACTzqK,UAAU,KAGd,CAAC0rK,EAAejB,EAAantH,EAAYotH,EAAqB9qK,EAAG4lC,GAErE,CD/CyBmmI,CAAsBnmI,GACvC3K,EAAa0vI,GAAe,CAAEC,eAAgBhlI,EAAK00B,2BACnD,KAAEthD,GAAS0jD,GAA6CnS,EAAM,WAC9DuhH,EAAgBhuK,QAAQkb,GAAQA,EAAK5c,SAAW4c,EAAK5c,QAAc,MACzEi6D,GAAqB,SACrB,MAAMzE,EAASvC,KAEf,OACEjxD,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,SACT+5C,eAAgB/5C,EAAE,SAClB85C,UAAW,CACT95C,EACE,6GAEFA,EACE,4HAEFA,EACE,gGAGJg6C,aAAc2X,GAAcC,EAAQ,SACpCl9C,YAAa1U,EACX,6GAEFy5C,eAAe3gD,EAAAA,EAAAA,KAACyjE,GAAkB,CAAChgE,KAAM,YAE3CzD,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,kBACHizB,eAAgBA,EAChBuF,eAAgBA,EAChBuM,aAAcA,EACdC,WAAYA,EACZ8C,gBAAiB/9B,EAAE,uBACnBg+B,gBAEMh+B,EADJ8rK,EACM,2DACA,+CAER7tI,sBAEMj+B,EADJ8rK,EACM,kDAEA,yFAGR1rI,eAAgB0rI,OAAgBrxK,EAAYo2B,GAAAA,GAC5CwN,sBAAsBvlC,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrCwN,qBAAsB0tI,EAAgB9rK,EAAE,oBAAiBvF,EACzD0jC,sBAAuB2tI,EAAgB,IAAMh4G,EAAaJ,GAAS61G,iBAAc9uK,KAC7EmrC,EACJ1K,gBAAiBl7B,EAAE,YAI3B,CEzEO,SAASgsK,KACd,MAAM,EAAEhsK,IAAMC,EAAAA,EAAAA,OACR,WAAEq/C,EAAU,YAAEG,EAAW,cAAEF,GAAkBX,MAC7C,KAAE5lC,EAAI,UAAEkJ,GAAcw6C,GAEzBnS,EAAM,sBAET,GAAIroC,IAAclJ,EAChB,OAAOlgB,EAAAA,EAAAA,KAACkqD,GAAW,IAGrB,MAAM7jC,EAA+BnG,GAAM5c,SAASmhE,KAAK1H,cAAc8I,SAAW,GAElF,OACE7lE,EAAAA,EAAAA,KAACs6C,GAAc,CACbh9C,MAAO4J,EAAE,iBACT9J,KAAK,eACLipB,QAASA,EACNloB,QAAO,EAAEzD,EAAOoS,KAAOpS,GAAO4oD,WAAW,UACzCv8C,KAAI,EAAErM,EAAOy4K,MAAkB,CAC9Bz4K,QACA4C,MAAO61K,MAEX7wK,SAAWykB,IAEJy/B,EAAwD,eAAMz/B,IACjE0/B,EAAc,CAAC,GACfE,EAAY,CAAC,GACf,EAEFpM,gBAAiBrzC,EAAE,0BACnB8lB,YAAU,GAGhB,CCdA,MAAMomJ,GAAuD,CAC3D,iBAAkB3hH,EAAM,gBACxB,2BAA4BA,EAAM,2BAClC,oBAAqBA,EAAM,oBAC3B,gBAAiBA,EAAM,gBACvB,kBAAmBA,EAAM,kBACzB,2BAA4BA,EAAM,2BAClC,cAAeA,EAAM,aACrB,0BAA2BA,EAAM,4BAG7B+qE,IAAc95H,EAAAA,EAAAA,IAAOqY,GAAAA,GAAMnY,WAAA,CAAAC,YAAA,oBAAbH,CAAa,yBAK1B,SAAS2wK,KACd,MAAM,WAAE7sH,GAAeV,MACjB,IAAQ3+C,EAAAA,EAAAA,OACR,aAAEo0H,GAAiB/0E,EAEnB8sH,GAAyBjvK,EAAAA,EAAAA,UAAmC,KACzD,CACL,iBAAkB6C,EAAE,sBACpB,2BAA4BA,EAAE,iCAC9B,oBAAqBA,EAAE,0BACvB,gBAAiBA,EAAE,sBACnB,kBAAmBA,EAAE,wBACrB,2BAA4BA,EAAE,iCAC9B,cAAeA,EAAE,mBACjB,0BAA2BA,EAAE,oCAE9B,CAACA,IACEg7B,GAAe79B,EAAAA,EAAAA,UACnB,IAAM,CACJ,CACEyc,OAAQ5Z,EAAE,QACVzD,KAAM,OACN/I,MAAQ2hB,GAA0BA,EAAKjf,KACvCgC,KAAM,UAGV,CAAC8H,IAEGkpB,GAAiB/rB,EAAAA,EAAAA,UACrB,IAAM,CACJ,CACE+H,IAAK,OACL9O,MAAO4J,EAAE,QACTzD,KAAMysB,GAAkBsC,UACxB8xB,MAAO,iBACPv1B,WAAY,cAGhB,CAAC7nB,IAGG4lC,EAAOwvF,GACX,CACEl4E,IAAKgvH,GAA0B73C,GAC/Bz6D,YAEmB,6BAAjBy6D,EACI,CACEg4C,kBAAmB,OACnB/2G,QAAS,cAEX76D,EACNyuB,iBACA8R,gBAEF,aAGF,OACE58B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACw8H,GAAW,CAACxhH,aAAa,KAAI9a,SAAEozK,EAAuB/3C,MACvDv7H,EAAAA,EAAAA,KAAA,MAAI6B,MAAO,CAAEsmB,UAAW,OAAQC,aAAc,QAASloB,SACpDgH,EACC,+MAGJlH,EAAAA,EAAAA,KAAC4pB,GAAmB,CAClBkjB,KAAMA,EACN5K,aAAcA,EACd9R,eAAgBA,EAChB2c,sBAAuB7lC,EAAE,gBAIjC,CCrFO,SAASssK,GAAYnvH,GAC1B,MAAM,IAAQl9C,EAAAA,EAAAA,MACRssK,EAAiBjpD,KAEjBrkE,EAA0B,CAC9B,CACEhpD,GAAI,gBACJG,MAAO4J,EAAE,0BACTohD,QAAQtoD,EAAAA,EAAAA,KAACkzK,GAAyB,KAEpC,CACE/1K,GAAI,YACJG,MAAO4J,EAAE,oBACTohD,QAAQtoD,EAAAA,EAAAA,KAACqzK,GAAsB,IAC/B5iI,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,UAAE0uF,GAAcn0C,EACtB,IAAKm0C,GAAWh4F,OACd,MAAM,IAAI8gB,MAAMpd,EAAE,iCACpB,GAGJ,CACE/J,GAAI,QACJG,MAAO4J,EAAE,yBACTohD,QAAQtoD,EAAAA,EAAAA,KAAC+8H,GAAkB,CAACL,yBAAyB,cACrDjsF,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,SAAE2uH,GAAap0E,EACrB,IAAKo0E,GAAUj4H,OACb,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CAAE/J,GAAI,SAAUG,MAAO4J,EAAE,UAAWgwC,SAASl3C,EAAAA,EAAAA,KAACs7H,GAAyB,MAqCzE,OACEt7H,EAAAA,EAAAA,KAACgqD,GAAU,CACT7D,MAAOA,EACPznB,SArCcxe,IAChB,MAAM,UAAEs7E,EAAS,SAAEigC,EAAQ,aAAEF,GAAiBr7G,EACxC4Y,EAA4B,GAClC,IAAK,MAAMib,KAAYynD,EACrB,IAAK,MAAM9yE,KAAQ+yG,EACjB3iG,EAAM/0B,KAAK,CAAEgwC,WAAUrrB,SAG3B,OAAO,IAAIyhB,SAAeqd,IACxBisH,EAAe,CACbp2K,MAAO6J,EAAE,aACT6xB,MAAOA,EAAGgb,WAAUrrB,UAAW,GAAGqrB,EAAS52C,MAAMurB,EAAKvrB,KACtD27B,QACAkQ,cAAe,CACb,CAAEloB,OAAQ5Z,EAAE,iBAAkB4b,KAAMA,EAAGixB,cAAeA,EAAS32C,MAC/D,CAAE0jB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAG4F,UAAWA,EAAKtrB,OAEhD6rC,SAAUA,EAAG8K,WAAUrrB,WACrB,MAAMxI,EAAqB,CACzBm9G,gBAAiB30G,EAAKvrB,GACtB4/D,aAAcw+D,EACd+B,UAAWvpF,EAAS52C,IAGtB,MADgB,SAAhBknD,EAAO5gD,KAAmByc,EAAKmvD,KAAOhrB,EAAOlnD,GAAO+iB,EAAKgvD,KAAO7qB,EAAOlnD,GAChEoyD,GAAYkC,EAAM,SAASpN,EAAO5gD,oBAAqByc,EAAK,EAErEgpB,WAAYA,KACVse,GAAS,EAEXj7C,QAAS83C,EAAO93C,SAChB,GACF,EAOAihC,SAAU6W,EAAO93C,QACjB+iC,aAAW,GAGjB,CChGO,SAASokI,GAAgB52K,GAC9B,MAAM,IAAQqK,EAAAA,EAAAA,MACRk9C,GAASgZ,EAAAA,GAAAA,KACTzY,EAAaT,KACb6W,EAAerW,MACbzkC,KAAMgvD,EAAI,UAAE9lD,GAAc6sC,GAChCxE,EAAM,UAAU30D,EAAMK,IAAMknD,EAAOlnD,IAAM,OAG3C,OAAIisB,IAAc8lD,GAAalvE,EAAAA,EAAAA,KAACkqD,GAAW,KAGzC5kD,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,aACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,SAAUY,GAAI88C,EAAWgW,GAAS81G,QAC7C,CACEpzK,MAAO4xE,EAAK9xE,KACZ0K,GAAI88C,EAAWgW,GAASktD,YAAa,CAAEzjE,OAAQ,CAAElnD,GAAI,MAEvD,CACEG,MAAO4J,EAAE,SACTY,GAAI88C,EAAWgW,GAASm4G,UAAW,CAAE1uH,OAAQ,CAAElnD,GAAI,MAErD,CAAEG,MAAO4J,EAAE,kBAGflH,EAAAA,EAAAA,KAACwzK,GAAW,CACVr2K,GAAI+xE,EAAK/xE,GAAGqhB,WACZ/a,KAAM,OACN8I,QAASA,KACPyuD,EAAal+D,EAAM62K,gBAAkB/4G,GAASm4G,UAAW,CACvD1uH,OAAQ,CAAElnD,GAAI+xE,EAAK/xE,KACnB,MAKZ,CCrDO,IAAKy2K,GAAQ,SAARA,GAAQ,OAARA,EAAQ,UAARA,EAAQ,wBAARA,EAAQ,6BAARA,EAAQ,oCAARA,EAAQ,0CAARA,EAAQ,0CAARA,EAAQ,wCAARA,EAAQ,+CAARA,EAAQ,0DAARA,EAAQ,sDAARA,EAAQ,4DAARA,EAAQ,4DAARA,EAAQ,uEAARA,EAAQ,6EAARA,EAAQ,mEAARA,EAAQ,mEAARA,EAAQ,+DAARA,EAAQ,+DAARA,EAAQ,wBAARA,EAAQ,mCAARA,EAAQ,+BAARA,EAAQ,+BAARA,EAAQ,qCAARA,EAAQ,oDAARA,EAAQ,oDAARA,EAAQ,wCAARA,EAAQ,wCAARA,EAAQ,iDAARA,EAAQ,4DAARA,EAAQ,wDAARA,EAAQ,wDAARA,EAAQ,8DAARA,EAAQ,sEAARA,EAAQ,sEAARA,EAAQ,kEAARA,EAAQ,kEAARA,EAAQ,8BAARA,EAAQ,yCAARA,EAAQ,qCAARA,EAAQ,qCAARA,EAAQ,2CAARA,EAAQ,kDAARA,EAAQ,kDAARA,EAAQ,8CAARA,EAAQ,8CAARA,EAAQ,uCAARA,EAAQ,kDAARA,EAAQ,8CAARA,EAAQ,8CAARA,EAAQ,oDAARA,EAAQ,4DAARA,EAAQ,oBAARA,EAAQ,kBAARA,EAAQ,6BAARA,EAAQ,yBAARA,EAAQ,wCAARA,EAAQ,yBAARA,EAAQ,qBAARA,EAAQ,2BAARA,EAAQ,+BAARA,EAAQ,2BAARA,EAAQ,kCAARA,EAAQ,kCAARA,EAAQ,6CAARA,EAAQ,yCAARA,EAAQ,yCAARA,EAAQ,+CAARA,EAAQ,kBAARA,EAAQ,6BAARA,EAAQ,yBAARA,EAAQ,yBAARA,EAAQ,+BAARA,EAAQ,iCAARA,EAAQ,4CAARA,EAAQ,wCAARA,EAAQ,wCAARA,EAAQ,8CAARA,EAAQ,sDAARA,EAAQ,qDAARA,EAAQ,qDAARA,EAAQ,iDAARA,EAAQ,iDAARA,EAAQ,wBAARA,EAAQ,+CAARA,EAAQ,kCAARA,EAAQ,yBAARA,EAAQ,2BAARA,EAAQ,kBAARA,EAAQ,6BAARA,EAAQ,yBAARA,EAAQ,+BAARA,EAAQ,kBAARA,CAAQ,MCARC,GAAQ,SAARA,GAAQ,OAARA,EAAQ,UAARA,EAAQ,wBAARA,EAAQ,4BAARA,EAAQ,uCAARA,EAAQ,mCAARA,EAAQ,mCAARA,EAAQ,iDAARA,EAAQ,yCAARA,EAAQ,iCAARA,EAAQ,gDAARA,EAAQ,gDAARA,EAAQ,4CAARA,EAAQ,4CAARA,EAAQ,iDAARA,EAAQ,8BAARA,EAAQ,yCAARA,EAAQ,qCAARA,EAAQ,2CAARA,EAAQ,2CAARA,EAAQ,uDAARA,EAAQ,sEAARA,EAAQ,6CAARA,EAAQ,qDAARA,EAAQ,uDAARA,EAAQ,qDAARA,EAAQ,mDAARA,EAAQ,0DAARA,EAAQ,8DAARA,EAAQ,0DAARA,EAAQ,uEAARA,EAAQ,yEAARA,EAAQ,qEAARA,EAAQ,4EAARA,EAAQ,kFAARA,EAAQ,mEAARA,EAAQ,mEAARA,EAAQ,uEAARA,EAAQ,uEAARA,EAAQ,mCAARA,EAAQ,gCAARA,EAAQ,yCAARA,EAAQ,qCAARA,EAAQ,qCAARA,EAAQ,gDAARA,EAAQ,qEAARA,EAAQ,kDAARA,EAAQ,yDAARA,EAAQ,oEAARA,EAAQ,4EAARA,EAAQ,4DAARA,EAAQ,8CAARA,EAAQ,8CAARA,EAAQ,kDAARA,EAAQ,kDAARA,EAAQ,yCAARA,EAAQ,kDAARA,EAAQ,8CAARA,EAAQ,8CAARA,EAAQ,oDAARA,EAAQ,kBAARA,EAAQ,yBAARA,EAAQ,0BAARA,EAAQ,sBAARA,EAAQ,iCAARA,EAAQ,6BAARA,EAAQ,6BAARA,EAAQ,mCAARA,EAAQ,sCAARA,EAAQ,sCAARA,EAAQ,8CAARA,EAAQ,0CAARA,EAAQ,oBAARA,EAAQ,kCAARA,EAAQ,kBAARA,EAAQ,yBAARA,EAAQ,2BAARA,EAAQ,kCAARA,EAAQ,+BAARA,EAAQ,kBAARA,EAAQ,yBAARA,EAAQ,2BAARA,EAAQ,kCAARA,EAAQ,+BAARA,EAAQ,yBAARA,EAAQ,2BAARA,EAAQ,kBAARA,EAAQ,6BAARA,EAAQ,yBAARA,EAAQ,+BAARA,EAAQ,yBAARA,EAAQ,wBAARA,EAAQ,+CAARA,EAAQ,kBAARA,CAAQ,MCsBb,SAASC,GAAeh3K,GAM7B,MAAM,GAAEK,EAAE,KAAEsG,EAAI,cAAEg8H,EAAa,QAAExsC,GAAYn2F,GACvC,EAAEoK,IAAMC,EAAAA,EAAAA,MACRw0H,EAAiB9B,KACjBk6C,EACQ,QAAZ9gF,EACIxhC,EAAM,qBACM,QAAZwhC,EACE2qC,EAAM,qBACN7sE,EAAM,4BACR+uE,EACQ,QAAZ7sC,EACIxhC,EAAM,0BACM,QAAZwhC,EACE2qC,EAAM,0BACN7sE,EAAM,iCACR4uE,EACQ,QAAZ1sC,EACIxhC,EAAM,0BACM,QAAZwhC,EACE2qC,EAAM,0BACN7sE,EAAM,kCACR,KAAE7wC,EAAI,UAAEkJ,GAAcw6C,GAEzBmwG,GACGC,EC9CD,WACL,MAAMpvH,EAAaT,KACnB,OAAOroD,EAAAA,EAAAA,cACJuqB,IACC,MAAM,YAAE2nC,EAAW,SAAEimH,GAAa5tJ,EAClC,GAAoB,OAAhB2nC,GAAqC,OAAbimH,EAgD5B,MA5C6D,CAC3D,oBAAqBrvH,EAAWgvH,GAAS5kG,kBAAmB,CAAE3qB,OAAQ,CAAElnD,GAAI82K,KAC5E,cAAervH,EAAWgvH,GAAShiF,eAAgB,CAAEvtC,OAAQ,CAAElnD,GAAI82K,KACnE,iBAAkBrvH,EAAWgvH,GAASM,0BAA2B,CAC/D7vH,OAAQ,CAAElnD,GAAI82K,KAEhB,sBAAuBrvH,EAAWgvH,GAASO,kCAAmC,CAC5E9vH,OAAQ,CAAElnD,GAAI82K,KAEhB,qBAAsBrvH,EAAWgvH,GAAS7rD,sBAAuB,CAC/D1jE,OAAQ,CAAElnD,GAAI82K,KAEhB,0BAA2BrvH,EAAWgvH,GAASQ,2BAA4B,CACzE/vH,OAAQ,CAAElnD,GAAI82K,KAEhB,gBAAiBrvH,EAAWgvH,GAASS,iBAAkB,CAAEhwH,OAAQ,CAAElnD,GAAI82K,KACvE,iBAAkBrvH,EAAWgW,GAASoU,kBAAmB,CAAE3qB,OAAQ,CAAElnD,GAAI82K,KACzE,2BAA4BrvH,EAAWgW,GAAS85B,4BAA6B,CAC3ErwC,OAAQ,CAAElnD,GAAI82K,KAEhB,oBAAqBrvH,EAAWgW,GAAS0c,qBAAsB,CAC7DjzB,OAAQ,CAAElnD,GAAI82K,KAEhB,gBAAiBrvH,EAAWgW,GAAS82B,iBAAkB,CAAErtC,OAAQ,CAAElnD,GAAI82K,KACvE,kBAAmBrvH,EAAWgW,GAASu4B,mBAAoB,CAAE9uC,OAAQ,CAAElnD,GAAI82K,KAC3E,2BAA4BrvH,EAAWgW,GAASo4F,4BAA6B,CAC3E3uG,OAAQ,CAAElnD,GAAI82K,KAEhB,0BAA2BrvH,EAAWgW,GAAS06B,2BAA4B,CACzEjxC,OAAQ,CAAElnD,GAAI82K,KAEhB,cAAervH,EAAWgW,GAASg3B,eAAgB,CAAEvtC,OAAQ,CAAElnD,GAAI82K,KACnE,mBAAoBrvH,EAAWivH,GAASS,iBAAkB,CAAEjwH,OAAQ,CAAElnD,GAAI82K,KAC1E,2BAA4BrvH,EAAWivH,GAASU,kBAAmB,CACjElwH,OAAQ,CAAElnD,GAAI82K,KAEhB,4BAA6BrvH,EAAWivH,GAASn/E,4BAA6B,CAC5ErwC,OAAQ,CAAElnD,GAAI82K,KAEhB,6BAA8BrvH,EAAWivH,GAASn/E,4BAA6B,CAC7ErwC,OAAQ,CAAElnD,GAAI82K,KAEhB,0BAA2BrvH,EAAWivH,GAASW,cAAe,CAAEnwH,OAAQ,CAAElnD,GAAI82K,MAE/CjmH,SAAgBrsD,CAAS,GAE5D,CAACijD,GAEL,CDXgC6vH,GAGxBC,GAA2BrwK,EAAAA,EAAAA,UAAQ,KACvC,MAAMgiB,EACJnG,GAAM5c,SAASmvI,MAAM11E,cAAc8I,SAAW,GAC1C8uG,EAA2C,GAkBjD,OAjBCtuJ,GAA4D+S,SAASrS,IAC/DA,GAA8BrsB,MACjCi6K,EAAa5wK,KAAK,CAChBrJ,MACGqsB,EAA6BrsB,MAAM8M,MAAM,KAAK5D,OAC9CmjB,EAA6BrsB,MAChC4C,MAAOq+H,EAAgB50G,EAA6BrsB,MAAO,CAAEs/H,aAAa,MAEnEjzG,GAAoD,OAAzCA,EAAkC,IACtD4tJ,EAAa5wK,KAAK,CAChBrJ,MACGqsB,EAAkC,GAAGvf,MAAM,KAAK5D,OAChDmjB,EAAkC,GACrCzpB,MAAOq+H,EAAgB50G,EAAkC,GAAI,CAAEizG,aAAa,KAEhF,IAEK26C,CAAY,GAClB,CAACz0J,GAAM5c,SAASmvI,MAAM11E,cAAc8I,QAAS81D,IAEhD,OAAIvyG,IAAclJ,GACTlgB,EAAAA,EAAAA,KAACkqD,GAAW,KAInBlqD,EAAAA,EAAAA,KAACq+H,GAAM,CACLprC,QAASA,EACTsrC,qBAAsB,CACpBnhI,KAAM,CACJohI,SAAWo2C,GACTA,EAAWz5G,eAAe05G,gBAAgBz3K,KAC5CE,MAAO4J,EAAE,iBACTY,GAAK8sK,GACHZ,EAAsB,CACpBhmH,YAAa4mH,EAAW73G,aACxBk3G,SACc,QAAZhhF,EACI2hF,EAAWz5G,gBAAgB05G,gBAAgBz3K,KAC3Cw3K,EAAWt3C,cAIzBgB,uBAAwB,CACtB,CACEx9G,OAAQ5Z,EAAE,QACVzD,KAAM,cACNrE,KAAM,eACN1E,MAAQ2hB,GAASs/G,EAAet/G,EAAK0gD,aAAc,CAAEi9D,aAAa,IAClEn2G,SAAUlB,GAAemB,OAG7B66G,uBAAwB,CACtB,CACEvyH,IAAK,eACL9O,MAAO4J,EAAE,iBACTzD,KAAMysB,GAAkBuB,YACxBrL,YAAalf,EAAE,eACfo9C,MAAO,gCACPj+B,QAASquJ,EACTltJ,oBAAoB,IAGxB48B,IAAc,eAAT3gD,EAAwBq8H,EAAyBH,EACtDxiI,GAAIA,EACJsiI,cAAeA,EACfhB,eAAgBh7H,GAGtB,CE3HO,SAASqxK,GAAah4K,GAC3B,MAAMunD,GAASgZ,EAAAA,GAAAA,KACf,OACEr9D,EAAAA,EAAAA,KAAC8zK,GAAc,CACb7gF,QAAS,MACT91F,GAAIL,EAAMK,IAAMknD,EAAOlnD,IAAM,GAC7BsG,KAAK,aACLg8H,cAAe3iI,EAAM2iI,eAAiB7kE,GAASm6G,gBAGrD,CCoBO,SAASC,KACd,MAAM,EAAE9tK,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KACbE,GAASgZ,EAAAA,GAAAA,MAEPn9C,KAAMgvD,EAAI,UAAE9lD,GAAcitC,GAAiB5E,EAAM,UAAWpN,EAAOlnD,IACrEutH,EAAqBF,KACrBxvD,EAAerW,KAErB,GAAIv7B,IAAc8lD,EAAM,OAAOlvE,EAAAA,EAAAA,KAACkqD,GAAW,IAE3C,MAAM/D,EAA0B,CAC9B,CACEhpD,GAAI,QACJG,MAAO4J,EAAE,kBACTohD,QACEtoD,EAAAA,EAAAA,KAACk9H,GAAkB,CACjBC,6BAA8Bj2H,EAC5B,mEACA,CACE4pK,SAAU5hG,GAAM9xE,SAKxBqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,MAAE0sD,GAAUnS,EAClB,IAAKmS,GAAOh2D,OACV,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,WACJG,MAAO4J,EAAE,yBACTohD,QACEtoD,EAAAA,EAAAA,KAAC+8H,GAAkB,CACjB/uE,YAAY,OACZ0uE,yBAAyB,QACzBC,4BAA6Bz1H,EAAE,yCAA0C,CACvE4pK,SAAU5hG,GAAM9xE,SAItBqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,SAAE2uH,GAAap0E,EACrB,IAAKo0E,GAAUj4H,OACb,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,SACJG,MAAO4J,EAAE,UACTohD,QAAQtoD,EAAAA,EAAAA,KAACs7H,GAAyB,MAwCtC,OACEh2H,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,aACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,SAAUY,GAAI88C,EAAWgW,GAAS81G,QAC7C,CACEpzK,MAAO4xE,GAAM9xE,KACb0K,GAAI88C,EAAWgW,GAASktD,YAAa,CAAEzjE,OAAQ,CAAElnD,GAAI+xE,GAAM/xE,OAE7D,CACEG,MAAO4J,EAAE,eACTY,GAAI88C,EAAWgW,GAASk4G,YAAa,CAAEzuH,OAAQ,CAAElnD,GAAI+xE,GAAM/xE,OAE7D,CAAEG,MAAO4J,EAAE,kBAGflH,EAAAA,EAAAA,KAACgqD,GAAU,CACT7gB,aAAck2B,GACdlZ,MAAOA,EACPznB,SAxDYxe,IAChB,MAAM,MAAEs5C,EAAK,SAAEiiE,GAAav7G,EACtB4Y,EAAwB,GAC9B,IAAK,MAAMu2C,KAAQ7V,EACjB,IAAK,MAAM9wC,KAAQ+yG,EACjB3iG,EAAM/0B,KAAK,CAAEsrE,OAAM3mD,SAGvB,OAAO,IAAIyhB,SAAeqd,IACxBkjE,EAAmB,CACjBrtH,MAAO6J,EAAE,aACT6xB,MAAOA,EAAGs2C,OAAM3mD,UAAW,GAAG2mD,EAAKlyE,MAAMurB,EAAKvrB,KAC9C27B,QACAkQ,cAAe,CACb,CAAEloB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAGusD,UAAWA,EAAKzT,UAC9C,CAAE96C,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAG4F,UAAWA,EAAKtrB,OAEhD6rC,SAAUA,EAAGomC,OAAM3mD,UACjB6mC,GAAYkC,EAAM,0BAA2B,CAC3C4d,KAAMA,EAAKlyE,GACXkgI,gBAAiB30G,EAAKvrB,GACtB4/D,aAAc,WACdugE,UAAWpuD,EAAK/xE,KAEpB+rC,WAAYA,KACVse,GAAS,EAEXj7C,QAASA,KACPyuD,EAAaJ,GAASk4G,YAAa,CACjCzuH,OAAQ,CAAElnD,GAAI+xE,EAAK/xE,GAAGqhB,aACtB,GAEJ,GACF,EAwBE8wB,aAAW,EACX9B,SAAUA,KACRwtB,EAAaJ,GAASk4G,YAAa,CAAEzuH,OAAQ,CAAElnD,GAAI+xE,GAAM/xE,KAAO,MAK1E,CCzIO,SAAS83K,GAAen4K,GAG7B,MAAM,IAAQqK,EAAAA,EAAAA,MACRk9C,GAASgZ,EAAAA,GAAAA,MACT,SAAEt3C,EAAQ,UAAE2yB,EAAS,MAAEwpD,IAAUtxD,EAAAA,GAAAA,MACjCmjD,GAAa5xB,EAAAA,GAAAA,IAAS,CAAE/kE,KAAM,gBAC9B83K,GAAiB/yG,EAAAA,GAAAA,IAAS,CAAE/kE,KAAM,oBAClCwpF,GAAmBzkB,EAAAA,GAAAA,IAAS,CAAE/kE,KAAM,sBACpC,aAAEkrG,GAAiBxrG,GAEnB,SAAEumD,IAAasa,EAAAA,GAAAA,MACfw3G,EAAkBpiF,MAExBh3F,EAAAA,EAAAA,YAAU,KAUHsnD,EAAS2N,SAAS,YATvBtiD,iBACE,MAAM0mK,QAAgB/lH,GACpBoC,EAAM,IAAI62C,KAAgBjkD,EAAOlnD,IAAM,mBAEzC+kG,EAAM,IACDxpD,IACH8tC,YAAa4uF,EAAQ5uF,aAAeuN,GAAer7C,EAAU,gBAEjE,CACwC28H,EAAuB,GAE9D,KAEHt5K,EAAAA,EAAAA,YAAU,KACJm5K,GACFnvJ,EACE,2BACAs9B,EAAS2N,SAAS,WACd9pD,CAAC,+CAA+CgpC,cAChD,GAAGhqC,SAASmxB,SAASkvD,SAAS90B,EAAM,IAAI62C,OACtCjkD,EAAOlnD,MACL+3K,MAGR7xH,EAAS2N,SAAS,YACpBjrC,EAAS,cAAe7e,CAAC,+CAA+CgpC,cAAc,GACvF,CAACglI,EAAgBnvJ,EAAUs9B,EAAUgB,EAAOlnD,GAAI+J,EAAGohG,IAEtD,MAAMgtE,GAA2Bx5K,EAAAA,EAAAA,cAAY4S,UAC3C,GAAIk4E,GAAoBviC,EAAOlnD,GAA/B,CACE,MAAQqpF,YAAauN,SAAqBxkC,GACxCkC,EAAM,IAAI62C,KAAgBjkD,EAAOlnD,kBACjC,CAAC,GAEH4oB,EAAS,cAAeguE,EAE1B,IACC,CAACnN,EAAkB7gE,EAAUs+B,EAAQikD,IAElCitE,EACJlyH,EAAS2N,SAAS,YAA6B,iDAAf+iC,EAClC,OACEzuF,EAAAA,EAAAA,MAACygE,GAAe,CAAC1oE,MAAO6J,EAAE,mBAAmBhH,SAAA,EAC3CF,EAAAA,EAAAA,KAACs6C,GAAc,CACbl9C,KAAK,kBACLE,MAAO4J,EAAE,mBACTmf,QAAS8uJ,EACTnoJ,WAAY45D,EACZrsC,gBAAiBrzC,EAAE,+BAErBlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,2BACL2D,YAAasjD,EAAOlnD,KAAO+3K,EAC3B53K,MAAO4J,EAAE,eACTghB,YAAU,EACV9B,YAAalf,EAAE,+BAEjBlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,cACLE,MAAO4J,EAAE,eACTghB,YAAU,EACVzP,QACEzY,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLkD,OAAO,4BACP1H,WAAYw0K,EACZlyK,QAAQ,WACR,aAAY6D,CAAC,qBACbP,QAASA,KACF2uK,GAA0B,EAC/Bp1K,UAEFF,EAAAA,EAAAA,KAACysB,GAAAA,GAAW,QAIjByoJ,GACCl1K,EAAAA,EAAAA,KAACy7F,GAAwB,CACvBt+F,GAAG,qBACHC,KAAK,qBACLE,MAAO4J,EAAE,sBACTkf,YAAalf,EAAE,6BACfnG,WAAam0K,OAAiCvzK,EAAhBuF,EAAE,YAChC45D,YAAa,CACXwiE,2BAA4B,GAAG4xC,aAGjC,OAGV,CCnGA,MAAMM,GAA4B,CAChC,UACA,QACA,MACA,MACA,QACA,aACA,gBAGK,SAASC,GAAkB34K,GAChC,MAAM,YAAE29H,GAAgB39H,GAClB,EAAEoK,IAAMC,EAAAA,EAAAA,OACR,SAAE4e,EAAQ,UAAE2yB,EAAS,MAAEwpD,IAAUtxD,EAAAA,GAAAA,OAChC8kI,EAAiBC,IAAsBj6K,EAAAA,EAAAA,YACxCk6K,GAAczzG,EAAAA,GAAAA,IAAqC,CAAE/kE,KAAM,YAC3DspF,GAAgCvkB,EAAAA,GAAAA,IAA2D,CAC/F/kE,KAAM,kCAEFwpF,GAAmBzkB,EAAAA,GAAAA,IAA8C,CACrE/kE,KAAM,qBAEFy4K,GAAsB1zG,EAAAA,GAAAA,IAAqD,CAC/E/kE,KAAM,4BAEF04K,GAAqB3zG,EAAAA,GAAAA,IAAoD,CAC7E/kE,KAAM,2BAGFmgG,GADep7B,EAAAA,GAAAA,IAA0C,CAAE/kE,KAAM,kBAChCw4K,GAAaxlG,aAiBpD,OAhBAr0E,EAAAA,EAAAA,YAAU,KACRmmG,EAAMxpD,IAAY,GACjB,CAACguC,EAA+Bwb,EAAOxpD,KAE1C38C,EAAAA,EAAAA,YAAU,MACR2S,iBACE,GAAIknK,EAAa,CACf,MAAMG,QAAkB1mH,GACtBoC,EAAM,aAAamkH,EAAYz4K,GAAGqhB,yBAEpC,OAAOm3J,EAAmBI,EAC5B,CACF,EACAC,GAAuBhnK,OAAM,IAAM,sBAAqB,GACvD,CAAC4mK,EAAa7vJ,KAGfzgB,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,OACLE,MAAO4J,EAAE,QACT8lB,YAAU,EACV5G,YAAalf,EAAE,uCAEjBlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,cACLE,MAAO4J,EAAE,eACTkf,YAAalf,EAAE,8CAEjBlH,EAAAA,EAAAA,KAACs6C,GAAc,CACbttB,YAAa8oJ,EACb/9H,oBACE/3C,EAAAA,EAAAA,KAACuwC,GAAgB,CAACjzC,MAAO4J,EAAE,oBAAqB9J,KAAK,2BAEvDg0C,eAAgBlqC,EAAE,YAClBiqC,UAAWjqC,EAAE,4CACb9J,KAAK,WACLD,GAAG,WACHG,MAAO4J,EAAE,YACTmf,QAAS,CACP,CAAE/oB,MAAO4J,EAAE,SAAUxM,MAAO,SAC5B,CAAE4C,MAAO4J,EAAE,OAAQxM,MAAO,QAE5B6/C,gBAAiBrzC,EAAE,sBAErBlH,EAAAA,EAAAA,KAAC4hG,GAAuB,CACtB7pD,oBACE/3C,EAAAA,EAAAA,KAACuwC,GAAgB,CAACjzC,MAAO4J,EAAE,oBAAqB9J,KAAK,4BAEvDA,KAAK,YACL4vB,YAAa6oJ,KAEf71K,EAAAA,EAAAA,KAACkmG,GAAqB,CAAkB9oG,KAAK,UAAU4vB,YAAU,KAEjEhtB,EAAAA,EAAAA,KAACs6C,GAAc,CACbl9C,KAAK,WACLD,GAAG,WACHi0C,eAAgBlqC,EAAE,YAClBiqC,UAAWjqC,EAAE,mDACbqzC,gBAAiBrzC,EAAE,yCACnB5J,MAAO4J,EAAE,YACT8lB,YAAU,EACVjsB,YAAa20K,GAAiBlyK,OAC9B6iB,QAASqvJ,GAAiB3uK,KAAKk/E,IAAQ,CAAQ3oF,MAAO2oF,EAAUvrF,MAAOurF,OAAgB,KAGxF2vF,GAAa1I,gBACZltK,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,aACLgpB,YAAalf,EAAE,+BACfkqC,eAAgBlqC,EAAE,yBAClBiqC,UAAWjqC,EACT,yHAEF6wC,oBACE/3C,EAAAA,EAAAA,KAACuwC,GAAgB,CAACjzC,MAAO4J,EAAE,oBAAqB9J,KAAK,6BAEvDE,MAAO4J,EAAE,2BAET,MACJlH,EAAAA,EAAAA,KAACo9F,GAAkC,CACjChgG,KAAK,2BACLmgG,eAAgBA,EAChBxlD,oBACE/3C,EAAAA,EAAAA,KAACuwC,GAAgB,CACfjzC,MAAO4J,EAAE,oBACT9J,KAAK,2CAIX4C,EAAAA,EAAAA,KAACy7F,GAAwB,CACvBr+F,KAAK,cACL26C,oBACE/3C,EAAAA,EAAAA,KAACuwC,GAAgB,CAACjzC,MAAO4J,EAAE,oBAAqB9J,KAAK,6BAEvDE,MAAO4J,EAAE,eACTkf,YAAalf,EAAE,sBACfiqC,UAAWjqC,EACT,2ZAEF41F,YAAU,EACVh8B,YAAa,CAAE4uF,0BAA2B8lB,GAA0B/tK,KAAK,SAE3EzH,EAAAA,EAAAA,KAAC4/F,GAAmB,CAClBxuD,eAAgBlqC,EAAE,UAClBiqC,UAAWjqC,EACT,sJAEF9J,KAAK,SACL26C,oBACE/3C,EAAAA,EAAAA,KAACuwC,GAAgB,CAACjzC,MAAO4J,EAAE,oBAAqB9J,KAAK,4BAGzD4C,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh2B,YAAalf,EAAE,uBACf6wC,oBACE/3C,EAAAA,EAAAA,KAACuwC,GAAgB,CAACjzC,MAAO4J,EAAE,oBAAqB9J,KAAK,wBAEvDA,KAAK,QACLg0C,eAAgBlqC,EAAE,SAClBiqC,UAAWjqC,EACT,2UAEFzD,KAAK,SACLnG,MAAO4J,EAAE,YAEXlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh2B,YAAalf,EAAE,0CACf6wC,oBACE/3C,EAAAA,EAAAA,KAACuwC,GAAgB,CAACjzC,MAAO4J,EAAE,oBAAqB9J,KAAK,wBAEvDA,KAAK,QACLg0C,eAAgBlqC,EAAE,SAClBiqC,UAAWjqC,EACT,gOAEF5J,MAAO4J,EAAE,YAEXlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh2B,YAAalf,EAAE,4BACf6wC,oBACE/3C,EAAAA,EAAAA,KAACuwC,GAAgB,CAACjzC,MAAO4J,EAAE,oBAAqB9J,KAAK,4BAEvDA,KAAK,YACLqG,KAAK,SACL2tC,eAAgBlqC,EAAE,aAClBiqC,UAAWjqC,EAAE,8EACb5J,MAAO4J,EAAE,gBAEXlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh2B,YAAalf,EAAE,2BACf6wC,oBACE/3C,EAAAA,EAAAA,KAACuwC,GAAgB,CAACjzC,MAAO4J,EAAE,oBAAqB9J,KAAK,kCAEvDg0C,eAAgBlqC,EAAE,eAClBiqC,UAAWjqC,EACT,sJAEF9J,KAAK,kBACLqG,KAAK,SACLnG,MAAO4J,EAAE,kBAEXlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh2B,YAAalf,EAAE,uBACfzD,KAAK,SACL2tC,eAAgBlqC,EAAE,WAClBiqC,UAAWjqC,EACT,wGAEF6wC,oBACE/3C,EAAAA,EAAAA,KAACuwC,GAAgB,CAACjzC,MAAO4J,EAAE,oBAAqB9J,KAAK,0BAEvDA,KAAK,UACLE,MAAO4J,EAAE,cAEXlH,EAAAA,EAAAA,KAAC86C,GAAc,CACb39C,GAAG,eACHC,KAAK,YACLE,MAAO4J,EAAE,gBACTkqC,eAAgBlqC,EAAE,gBAClBiqC,UAAWjqC,EACT,qHAEF6wC,oBACE/3C,EAAAA,EAAAA,KAACuwC,GAAgB,CAACjzC,MAAO4J,EAAE,oBAAqB9J,KAAK,+BAGzD4C,EAAAA,EAAAA,KAACy/F,GAA2B,CAC1B1nD,oBACE/3C,EAAAA,EAAAA,KAACuwC,GAAgB,CAACjzC,MAAO4J,EAAE,oBAAqB9J,KAAK,kCAEvDA,KAAK,kBACL+zC,UAAWjqC,EAAE,kEAEflH,EAAAA,EAAAA,KAACk4F,GAAuB,CACtB9mD,eAAgBlqC,EAAE,YAClBiqC,UAAWjqC,EACT,6MAEF9J,KAAK,WACL26C,oBACE/3C,EAAAA,EAAAA,KAACuwC,GAAgB,CAACjzC,MAAO4J,EAAE,oBAAqB9J,KAAK,uBAEvDm9C,gBAAiBrzC,EAAE,6BACnB5J,MAAO4J,EAAE,YACTmf,QAASo0G,GAAa/3C,UAAY,CAAC,CAAEhoF,MAAO,GAAI4C,MAAO,GAAIF,KAAM,QAEnE4C,EAAAA,EAAAA,KAACk4F,GAAuB,CACtB9mD,eAAgBlqC,EAAE,aAClBiqC,UAAWjqC,EACT,kNAEF6wC,oBACE/3C,EAAAA,EAAAA,KAACuwC,GAAgB,CAACjzC,MAAO4J,EAAE,oBAAqB9J,KAAK,4BAEvDA,KAAK,YACLm9C,gBAAiBrzC,EAAE,8BACnB5J,MAAO4J,EAAE,aACTmf,QAASo0G,GAAaj4C,WAAa,CAAC,CAAE9nF,MAAO,GAAI4C,MAAO,GAAIF,KAAM,QAEpE4C,EAAAA,EAAAA,KAAC+lE,GAAe,CAAC12B,cAAY,EAAAnvC,UAC3BF,EAAAA,EAAAA,KAACm4C,GAAkB,CACjBJ,oBACE/3C,EAAAA,EAAAA,KAACuwC,GAAgB,CAACjzC,MAAO4J,EAAE,oBAAqB9J,KAAK,4BAEvDg0C,eAAgBlqC,EAAE,mBAClBiqC,UAAWjqC,EAAE,2DACbuL,OAAO,OACPnV,MAAO4J,EAAE,mBACT9J,KAAK,kBAGT4C,EAAAA,EAAAA,KAACuwC,GAAgB,CAAkBjzC,MAAO4J,EAAE,wBAAyB9J,KAAK,oBAC1E4C,EAAAA,EAAAA,KAACuwC,GAAgB,CACfjzC,MAAO4J,EAAE,yBACT9J,KAAK,mCAEP4C,EAAAA,EAAAA,KAACuwC,GAAgB,CACfjzC,MAAO4J,EAAE,kBACT9J,KAAK,sBAEP4C,EAAAA,EAAAA,KAACuwC,GAAgB,CAAkBjzC,MAAO4J,EAAE,mBAAoB9J,KAAK,wBACrE4C,EAAAA,EAAAA,KAACuwC,GAAgB,CAAkBjzC,MAAO4J,EAAE,uBAAwB9J,KAAK,oBACzE4C,EAAAA,EAAAA,KAACuwC,GAAgB,CACfjzC,MAAO4J,EAAE,mCACT9J,KAAK,oCAENspF,GACCphF,EAAAA,EAAAA,MAAC6gE,GAAAA,EAAW,CAAC9oE,MAAO6J,EAAE,iCAAiChH,SAAA,CACpDu6H,GAAaljD,QAAQoP,UACpB3mF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,mBACL2D,YAAU,EACVqlB,YAAalf,EAAE,sBACf5J,MAAO4J,EAAE,+BAET,MACJlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,kBACLgpB,YAAalf,EAAE,yBACf8lB,aAAc05D,EACdppF,MAAO4J,EAAE,wBAGX,KACH0/E,GAAmB5mF,EAAAA,EAAAA,KAACi1K,GAAc,CAAC3sE,aAAa,kBAAqB,OAG5E,CCpSO,SAASswB,KACd,MAAM,EAAE1xH,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACfN,GAASgZ,EAAAA,GAAAA,KACTlgE,EAAK3C,OAAO6pD,EAAOlnD,KAEvB+iB,KAAMu/F,EACNzyG,MAAOipK,EACP1gH,QAAS2gH,EACT9sJ,UAAW+sJ,GACTlgH,GAAoBxE,EAAM,kBAAkBt0D,EAAGqhB,gBAEjD0B,KAAM20D,EACN7nE,MAAOopK,EACPhtJ,UAAWitJ,EACX9gH,QAAS+gH,GACPrgH,GACFxE,EAAM,kBAAkBt0D,EAAGqhB,+BAGvBowB,GAAgBvqC,EAAAA,EAAAA,UACpB,IAAMqhF,GAA4Bx+E,EAAGu4G,EAAa5qC,GAAgB3iB,SAAW,KAC7E,CAAChrD,EAAGu4G,EAAa5qC,KAEb,MAAEvS,IAAUC,EAAAA,GAAAA,MAmCZ3d,EAAaT,KAEboyH,EAAuBN,GAAoBG,EACjD,OAAIG,aAAgCjyJ,OAEhCtkB,EAAAA,EAAAA,KAACi9D,GAAQ,CACPjwD,MAAOupK,EACPr5G,cAAe+4G,EAAmBC,EAAqBI,IAIzDH,GAAwBE,GAAgCr2K,EAAAA,EAAAA,KAACkqD,GAAW,KAEtE5kD,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MACEoiH,GAAariH,KACT8J,EAAE,2BAA4B,CAAEsvK,gBAAiB/2D,GAAariH,OAC9D8J,EAAE,gBAERk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,aAAcY,GAAI88C,EAAWgW,GAAS67G,YACjD,CACEn5K,MAAOmiH,GAAariH,KAChB8J,EAAE,2BAA4B,CAAEsvK,gBAAiB/2D,GAAariH,OAC9D8J,EAAE,qBAIZlH,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,qBACdw3B,SAjEmDhwB,UACvD,MAAM,YACJygD,EAAW,OACXjlD,EAAM,gBACN26E,EAAe,YACf2B,EAAW,YACXH,EAAW,8BACXK,EAA6B,iBAC7BE,EAAgB,gBAChBb,KACGhlE,GACDjX,EACEmmG,EAAa,IACdlvF,EACH6vD,QAAS9mE,EAAO8mE,QAAQzzE,GACxBykF,sBAAuB93E,EAAO83E,uBAAuBzkF,IAAM,KAC3DozE,UAAWzmE,EAAOymE,WAAWpzE,IAAM,KACnCulF,SAAUoE,GAAch9E,EAAO44E,WAAa,GAC5CF,UAAWsE,GAAch9E,EAAO04E,YAAc,GAC9CiE,mBAAoB38E,EAAO28E,oBAAsB,KACjDL,gBAAiBQ,EAAmB98E,EAAOs8E,gBAAkB,KAC7DL,gBAAiBW,EAAgCX,EAAkB,YAE/Dv2B,GAA8BiC,EAAM,kBAAkBt0D,EAAGqhB,cAAeyxF,GAC7E3tC,EAA2CE,UAC5C,MAAMme,EAAW,GAEjBA,EAAS58E,KAAK2yK,GAAkBj3D,EAA4BtwD,IAC5DwxB,EAAS58E,KAAK20I,GAAaj5B,EAA4Bv1G,IACvDy2E,EAAS58E,KAAKy0I,GAAqBr7I,EAAI0nF,UACjC16C,QAAQC,IAAIu2C,GAClB3lB,EAAaJ,GAASu4B,mBAAoB,CAAE9uC,OAAQ,CAAElnD,OAAO,EAmCzDqwC,SAAUA,IAAMwtB,EAAaJ,GAASu4B,mBAAoB,CAAE9uC,OAAQ,CAAElnD,QACtEywB,aAAcghB,EAAc1uC,UAE5BF,EAAAA,EAAAA,KAACy1K,GAAiB,CAACh7C,YAAa7rF,QAIxC,CACO,SAAS03E,KACd,MAAM,EAAEp/G,IAAMC,EAAAA,EAAAA,MACRiO,GAAWC,EAAAA,GAAAA,MACX2lD,EAAerW,KACf4K,EAAcyT,KACdp0B,GAAgBvqC,EAAAA,EAAAA,UAAQ,IAAMqhF,GAA4Bx+E,EAAG,CAAC,IAAmB,CAACA,IAgClF09C,EAAaT,KAEnB,OACE7+C,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,uBACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,aAAcY,GAAI88C,EAAWgW,GAAS67G,YACjD,CAAEn5K,MAAO4J,EAAE,4BAGflH,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,uBACdw3B,SA3CmDhwB,UACvD,MAAM,YAAEygD,EAAW,OAAEjlD,EAAM,gBAAE26E,EAAe,YAAE2B,EAAW,YAAEH,KAAgBtlE,GAASjX,EAC9EmmG,EAAa,IACdlvF,EACH6vD,QAAS9mE,EAAO8mE,QAAQzzE,GACxBykF,sBAAuB93E,EAAO83E,uBAAuBzkF,GACjD2M,EAAO83E,uBAAuBzkF,GAC9B,KACJozE,UAAWzmE,EAAOymE,WAAWpzE,IAAM,KACnCulF,SAAUoE,GAAch9E,EAAO44E,WAAa,GAC5CF,UAAWsE,GAAch9E,EAAO04E,YAAc,GAC9CiE,mBAAoB38E,EAAO28E,oBAAsB,MAG7Cd,QAAiBp2B,EAAYkC,EAAM,kBAAmBw+C,GACtDtvB,EAAW,GACbxxB,GAAa3rD,OAAS,GACxBm9E,EAAS58E,KAAK2yK,GAAkB/wF,EAAUx2B,IAExCjlD,GAAUA,GAAQ1G,OAAS,GAC7Bm9E,EAAS58E,KAAK20I,GAAa/yD,EAAUz7E,IAEnC26E,EAAgBrhF,OAAS,GAC3Bm9E,EAAS58E,KAAKy0I,GAAqB7yD,EAASxoF,GAAI0nF,IAE9ClE,EAASn9E,OAAS,SAAS2mC,QAAQC,IAAIu2C,GAE3C3lB,EAAaJ,GAASu4B,mBAAoB,CAAE9uC,OAAQ,CAAElnD,GAAIwoF,EAASxoF,KAAO,EAiBtEqwC,SAAUA,IAAMp4B,GAAU,GAC1BwY,aAAcghB,EAAc1uC,UAE5BF,EAAAA,EAAAA,KAACy1K,GAAiB,QAI1B,CAEA/mK,eAAegoK,GACb/wF,EACAoW,GAEA,MAAM,MAAEre,EAAK,QAAEC,GAAYH,GACzBmI,GAAUxqB,gBAAgBhM,aAAgB,GAC1C4sC,GAGI46E,EAA0Bh5F,EAAQ52E,KAAK61F,GAC3CrtC,GAAYkC,EAAM,kBAAkBk0B,GAAUxoF,IAAIqhB,0BAA2B,CAC3ErhB,GAAIy/F,EAAKz/F,GACT6mF,cAAc,MAGZ4yF,QAA4BzsI,QAAQC,IAAIusI,GACxCE,EAAuBn5F,EAAM32E,KAAK61F,GACtCrtC,GAAYkC,EAAM,kBAAkBk0B,GAAUxoF,IAAIqhB,0BAA2B,CAC3ErhB,GAAIy/F,EAAKz/F,OAIP25K,QAAyB3sI,QAAQC,IAAIysI,GAC3C,OAAO1sI,QAAQC,IAAI,CAACwsI,EAAqBE,GAC3C,CAEApoK,eAAegqI,GAAa/yD,EAAuBz7E,GACjD,MAAM,MAAEwzE,EAAK,QAAEC,GAAYH,GACzBmI,EAASxqB,gBAAgBjxD,QAAQgoD,SAAY,GAC7ChoD,GAAW,IAGb,IAAI4qJ,EAAQnvE,EAASxqB,gBAAgBiV,cAAcjzE,GACnD,IAAKwoF,EAASxqB,gBAAgBiV,cAAcjzE,GAE1C,IACE,MAAM+iB,QAAamvC,GAA2CoC,EAAM,mBACpEqjG,EAAQ50I,EAAKgyC,QAAQ,GAAG/0D,EAC1B,CAAE,MAAO2R,GACP,MAAMA,CACR,CAEF,MAAM01E,EAAyB7G,EAAQ52E,KAAKzJ,GAC1CiyD,GAAYkC,EAAM,kBAAkBk0B,EAASxoF,GAAGqhB,qBAAsB,CACpErhB,GAAIG,EAAMH,GACV6mF,cAAc,MAGZS,EAAsB/G,EAAM32E,KAAKzJ,GACrCiyD,GAAYkC,EAAM,kBAAkBk0B,EAASxoF,GAAGqhB,qBAAsB,CACpEphB,KAAME,EAAMF,KACZgzE,aAAc0kF,MAKlB,aADsB3qH,QAAQC,IAAI,IAAIo6C,KAA2BC,GAEnE,CACA/1E,eAAe8pI,GAAqBz6D,EAAoBg5F,GACtD,MAAM/9B,QAA+B3pF,GACnCoC,EAAM,kBAAkBssB,EAAWv/D,+BAErC,GAeew4J,EAfFD,EAe2BE,EAfRj+B,EAAuB9mF,QAiBrD8kH,EAAOxzK,SAAWyzK,EAAOzzK,SACzBwzK,EAAO1yK,OAAM,CAAC4yC,EAASlwC,IAAUkwC,EAAQ/5C,KAAO85K,EAAOjwK,GAAO7J,KAlBC,CAC/D,IAAK,MAAMugB,KAASs7H,EAAuB9mF,cACnC3C,GAAYkC,EAAM,kBAAkBssB,EAAWv/D,8BAA+B,CAClFrhB,GAAIugB,EAAMvgB,GACV6mF,cAAc,IAGlB,IAAK,MAAMtmE,KAASq5J,cACNxnH,GAAYkC,EAAM,kBAAkBssB,EAAWv/D,8BAA+B,CACxFrhB,GAAIugB,EAAMvgB,IAGhB,CAGF,IAAiB65K,EAAyBC,CAF1C,CCzOA,MAAMC,GAAax0K,EAAAA,GAAO0P,KAAIxP,WAAA,CAAAC,YAAA,oBAAXH,CAAW,eACnBrG,EAAmB,WAGxB86K,GAAgBA,KACpB,MAAM,EAAEjwK,IAAMC,EAAAA,EAAAA,MACd,OAAOnH,EAAAA,EAAAA,KAACk3K,GAAU,CAAAh3K,SAAEgH,CAAC,WAAuB,EAUvC,SAASkwK,GAAgBt6K,GAC9B,MAAM,IAAQqK,EAAAA,EAAAA,MACRk9C,GAASgZ,EAAAA,GAAAA,KAETo9E,EAAQ39I,GAAOihF,WAAajhF,EAAMihF,WAAa15B,EAAOlnD,IACtD,MAAE6P,EAAOkT,KAAMylE,EAAQ,QAAEpwB,GAAYc,GAAwB5E,EAAM,iBAAkBgpF,GACrF5lE,EAbR,SAA2BkJ,GACzB,MAAM,KAAE79D,GAAS+1C,GACfxE,EAAM,kBAAkBssB,sBAE1B,OAAO79D,GAAMgyC,SAAW,EAC1B,CAQyBwpF,CAAkBjB,GAAS,KAC5C71F,EAAaT,KACbiB,GAAU/vC,EAAAA,GAAAA,MAEVwtE,EAAoBsO,GAAmBxL,GAAU9C,WACvD,GAAI71E,EAAO,OAAOhN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,IACzD,IAAKowB,EAAU,OAAO3lF,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,IACnD,MAAQgR,eAAgBk8G,EAAer1F,wBAAyBs1F,GAAyB3xF,EAEnFiR,EACJjR,EAASG,gBACTH,EAASI,iBACTJ,EAASC,oBACTD,EAASQ,gBACTR,EAASS,iBACTT,EAASO,gCAQX,OACE5gF,EAAAA,EAAAA,MAACoc,GAAW,CAACU,cAAetlB,EAAMslB,cAAcliB,SAAA,EAC9CF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,QAAQhH,SAC1BpD,EAAMihF,YACL/9E,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CAACC,GAAI88C,EAAWgW,GAASu4B,mBAAoB,CAAE9uC,OAAQ,CAAElnD,GAAIL,EAAMihF,cAAgB79E,SACrFylF,EAASvoF,OAGZuoF,EAASvoF,QAGb4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,eAAehH,SAAEylF,EAAS/pE,eAC/C5b,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,YACTia,SAAUja,EACR,kLACAhH,SAEDylF,EAASxD,YAEZniF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,gBAAgBhH,SAClCm3K,EAAcjnG,cACbpwE,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS62B,oBAAqB,CAC3CptC,OAAQ,CAAElnD,GAAIwoF,EAASxqB,gBAAgBiV,cAAcjzE,MACpD+C,SAEFm3K,EAAcjnG,cAAchzE,QAG/B4C,EAAAA,EAAAA,KAACm3K,GAAa,OAGlBn3K,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,aACTka,SAAUi2J,EAAc9mG,WAAa+mG,EACrCn2J,SAAUja,EAAE,0EAA0EhH,SAErFm3K,EAAc9mG,WACbvwE,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS82B,iBAAkB,CACxCrtC,OAAQ,CACNlnD,GAAIk6K,EAAc9mG,WAAWpzE,GAC7BqzE,eAjDuC,CACnD,GAAI,YACJQ,MAAO,kBACPC,YAAa,yBA8CiComG,EAAc9mG,WAAWzB,SAE5D5uE,SAEFm3K,EAAc9mG,WAAWnzE,QAG5B4C,EAAAA,EAAAA,KAACm3K,GAAa,OAGlBn3K,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,CAAC,UACRia,SAAUja,EAAE,4EAA4EhH,SAEvFm3K,EAAczmG,SACb5wE,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAASg3B,eAAgB,CAAEvtC,OAAQ,CAAElnD,GAAIk6K,EAAczmG,SAASzzE,MAAQ+C,SAEtFm3K,EAAczmG,SAASxzE,QAG1B4C,EAAAA,EAAAA,KAACm3K,GAAa,OAGlBn3K,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,CAAC,wBACRka,SAAUi2J,EAAcE,qBACxBp2J,SAAUja,EACR,oMACAhH,UAEFF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS85B,4BAA6B,CACnDrwC,OAAQ,CAAElnD,GAAIk6K,EAAcE,sBAAsBp6K,MACjD+C,SAEFm3K,EAAcE,sBAAsBn6K,UAGzC4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,yBAAyBhH,SAAEylF,EAASrD,cACzDtiF,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,YACTia,SAAUja,EAAE,mDAAmDhH,SAE9DylF,EAASM,YAEZjmF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,eAAgBka,SAAUi2J,EAAcloH,aAAa3rD,OAAOtD,UAC/EF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACRm3K,EAAcloH,aAAapoD,KAAK6nE,IAC/B5uE,EAAAA,EAAAA,KAAC2uE,GAAe,CAACC,WAAYA,GAAiBA,EAAWzxE,WAI/D6C,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,CAAC,kBACRia,SAAUja,CAAC,uDACXka,SAAUyzD,GAAgBrxE,OAAOtD,UAEjCF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACR20E,GAAgB9tE,KAAKmuF,IACpBl1F,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAC/X,MAAM,OAAM4D,UACjBF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS0c,qBAAsB,CAC5CjzB,OAAQ,CACNlnD,GAAI+3F,EAAG/3F,MAER+C,SAEFg1F,EAAG93F,QARiB83F,EAAG/3F,WAclC6C,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,SACTia,UACE7b,EAAAA,EAAAA,MAAA,QAAApF,SAAA,CACGgH,EACC,iPACC,KACHlH,EAAAA,EAAAA,KAAA,QAAAE,SAAM,gBAAkB,IAAE,IACzBgH,EAAE,mFAENhH,SAEAylF,EAAS7D,OAAS,KAErB9hF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,SAAShH,SAAEylF,EAAS37C,SACzChqC,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,aACTia,SAAUja,EAAE,8EAA8EhH,SAEzF2iF,KAEH7iF,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,WACTia,SAAUja,EACR,wGACAhH,SAEDylF,EAASp6E,SAAW,KAEvBvL,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,gBACTia,SAAUja,EACR,qHACAhH,SAEDylF,EAASnE,UAAYt6E,CAAC,KAAOA,CAAC,SAEjClH,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,eACTia,SAAUja,EACR,sJACAhH,SAEDylF,EAAS1D,mBAEZjiF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,mBAAmBhH,SAAEylF,EAASI,mBACnD/lF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,6BAA8Bka,SAAUukE,EAASI,gBAAgB7lF,SACnF,GAAGvE,OAAO07B,SAASkvD,UAAUZ,EAASvhC,kBAEzCpkD,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,mBAAoBka,SAAUukE,EAASS,gBAAgBlmF,UAC1EF,EAAAA,EAAAA,KAACgzF,GAAc,CAACC,QAAStN,EAASS,oBAEnCixF,EAAc5wF,qBACbzmF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,sBAAuBka,SAAUi2J,EAAc5wF,mBAAmBvmF,UACrFF,EAAAA,EAAAA,KAAC2uE,GAAe,CAACC,WAAYyoG,GAAe5wF,wBAGhDzmF,EAAAA,EAAAA,KAACkqJ,GAAc,CACb5sJ,MAAO4J,EAAE,WACT6K,KAAM4zE,EAAStqB,QACfgU,KAAMsW,EAASxqB,eAAeyU,cAEhC5vE,EAAAA,EAAAA,KAACmsE,GAAsB,CACrBzxE,MAAOirF,EAAS5V,SAChBz9D,OAAQqzE,EAASxqB,eAAe8U,aAAarU,SAC7Cj1D,QAASA,IACPy+C,EACER,EAAWgW,GAASiB,YAAa,CAC/BxX,OAAQ,CAAElnD,IAAKwoF,EAASxqB,gBAAgB8U,aAAa9yE,IAAM,GAAGqhB,kBAKtExe,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,UAAWka,SAAUi2J,EAAcntK,QAAQgoD,SAAS1uD,OAAOtD,UAC9EF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACRm3K,EAAcntK,QAAQgoD,SAASnrD,KAAKzJ,IACnC0C,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAAnU,SAAiB5C,EAAMF,MAAjBE,EAAMH,WAIxB6C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,YAAaka,SAAUukE,EAASjD,SAASxiF,UAC5DF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACRylF,EAASjD,SAASl7E,MAAM,MAAMT,KAAK0xE,IAAQz4E,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAAnU,SAAYu4E,GAANA,UAG5Dz4E,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,aAAcka,SAAUukE,EAASnD,UAAUtiF,UAC9DF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACRylF,EAASnD,UAAUh7E,MAAM,MAAMT,KAAK0xE,IAAQz4E,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAAnU,SAAYu4E,GAANA,UAG7Dz4E,EAAAA,EAAAA,KAACo2E,GAAoB,CACnB94E,MAAO4J,EAAE,mBACTxM,MAAOirF,EAAS3C,WAChB7hE,SAAUja,EACR,uOAGJlH,EAAAA,EAAAA,KAACkhB,GAAU,CACT5jB,MAAO4J,EAAE,mBACTka,SAAUw1E,EACVz1E,UACE7b,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAA,KAAAE,SAAIgH,CAAC,0FACLlH,EAAAA,EAAAA,KAAA,KAAAE,SAAIgH,CAAC,wKACLlH,EAAAA,EAAAA,KAAA,KAAAE,SAAIgH,CAAC,8EACLlH,EAAAA,EAAAA,KAAA,KAAAE,SAAIgH,CAAC,uLACLlH,EAAAA,EAAAA,KAAA,KAAAE,SAAIgH,CAAC,iDACLlH,EAAAA,EAAAA,KAAA,KAAAE,SAAIgH,CAAC,4LAERhH,UAEDoF,EAAAA,EAAAA,MAAC4vD,GAAAA,EAAQ,CAACjtD,UAAW4sF,GAAAA,EAAiBC,GAAG50F,SAAA,CACtCylF,EAASG,iBACR9lF,EAAAA,EAAAA,KAACm1D,GAAAA,EAAY,CAACltD,UAAW8sF,GAAAA,EAAqBC,GAAG90F,SAC9CgH,CAAC,yBAGLy+E,EAASI,kBACR/lF,EAAAA,EAAAA,KAACm1D,GAAAA,EAAY,CAACltD,UAAW8sF,GAAAA,EAAqBC,GAAG90F,SAC9CgH,CAAC,2BAGLy+E,EAASC,qBACR5lF,EAAAA,EAAAA,KAACm1D,GAAAA,EAAY,CAACltD,UAAW8sF,GAAAA,EAAqBC,GAAG90F,SAAEgH,CAAC,oBAErDy+E,EAASQ,iBACRnmF,EAAAA,EAAAA,KAACm1D,GAAAA,EAAY,CAACltD,UAAW8sF,GAAAA,EAAqBC,GAAG90F,SAAEgH,CAAC,iBAErDy+E,EAASS,kBACRpmF,EAAAA,EAAAA,KAACm1D,GAAAA,EAAY,CAACltD,UAAW8sF,GAAAA,EAAqBC,GAAG90F,SAAEgH,CAAC,aAErDy+E,EAASO,kCACRlmF,EAAAA,EAAAA,KAACm1D,GAAAA,EAAY,CAACltD,UAAW8sF,GAAAA,EAAqBC,GAAG90F,SAC9CgH,CAAC,2CAOhB,CCxUO,SAASswK,GAAyB16K,GACvC,MAAM,cAAE2pD,GAAkBX,KAa1B,OAXA/pD,EAAAA,EAAAA,YAAU,KACR0qD,GAAekB,IACb,MAAM8vH,EAA0B9vH,GAAM/b,QAAU/hC,OAAOwmD,QAAQ1I,GAAM/b,SAASpoC,OAE9E,MAAO,IACF1G,EAAM8xC,cACThD,OAAQ6rI,EAA0B9vH,EAAK/b,OAAS9uC,EAAM8xC,cAAchD,OACrE,GACD,GACD,CAAC6a,EAAe3pD,EAAM8xC,iBAElB5uC,EAAAA,EAAAA,KAACiiG,GAAe,GACzB,CCcO,MAAMy1E,GAA0B,CACrCv1F,SAAU,yBACV5R,UAAW,0BACXphB,YAAa,2BACbyyB,sBAAuB,sCACvBiD,gBAAiB,gCACjBvC,WAAY,2BACZR,MAAO,sBACPN,UAAW,0BACXm2F,UAAW,gCACXztK,OAAQ,uBACR8/B,MAAO,sBACPw4C,UAAW,0BACXE,SAAU,qBACVn3E,QAAS,wBACTy3E,WAAY,0BACZH,UAAW,2BAgCN,SAAS+0F,IAAe,QAAE1nF,IAC/B,MAAM,IAAQ/oF,EAAAA,EAAAA,MACRooD,EAAcyT,KACd60G,ECpED,WACL,MAAM,EAAE3wK,IAAMC,EAAAA,EAAAA,MACRiH,EAAerD,KACfwkD,EAAcyT,KAEpB,OAAOlnE,EAAAA,EAAAA,cACL4S,MAAOxE,EAAyCy7E,KAC9C,IAAImyF,EAAyB,GACzBv6E,EAAiB5X,GAAUxqB,gBAAgBiV,cAAcjzE,GAC7D,MAAMknF,EAAiBn6E,EAAO/L,QAAQb,GAAUA,EAAMH,KAChD46K,EAAY7tK,EAAO/L,QAAQb,IAAWA,EAAMH,KAElD,IACOogG,IAEHA,SADmBluC,GAA2CoC,EAAM,oBAC9CS,QAAQ,GAAG/0D,IAGnC,MAAM66K,EAAgB,GACtB,IAAK,MAAM16K,KAASy6K,GAAa,GAC/BC,EAAcj0K,KACZwrD,EAAYkC,EAAM,WAAY,CAC5Br0D,KAAME,EAAMF,KACZgzE,aAAcmtB,KAKpBu6E,QAAsB3tI,QAAQC,IAAI4tI,EACpC,CAAE,MAAOlpK,GACPV,EAAazD,SAAS,CACpBtH,QAAS,SACThG,MAAO6J,EAAE,8BACThH,SAAU4O,aAAewV,OAASxV,EAAIzB,SAE1C,CAMA,MAJiB,IAAIg3E,KAAmByzF,GACrC/wK,KAAKzJ,GAAUA,EAAMH,KACrBgB,QAAQhB,GAAqB,iBAAPA,IAAoBy/C,MAAMz/C,IAEpC,GAEjB,CAAC+J,EAAGkH,EAAcmhD,GAEtB,CDuB6B0oH,GAErB7pK,EAAerD,KAEfqK,GAAWC,EAAAA,GAAAA,MACXgvC,GAASgZ,EAAAA,GAAAA,KACT60F,EAAa7tG,EAAOlnD,IAAIqhB,YAAc,IAE1C0B,KAAMylE,EACN34E,MAAOkrK,EACP3iH,QAAS4iH,GACPliH,GAAoBxE,EAAM,IAAIy+B,KAAWgiE,OAE3ChyI,KAAM44C,EACN9rD,MAAOorK,EACP7iH,QAAS8iH,GACPpiH,GAA4BxE,EAAM,IAAIy+B,KAAWgiE,aAC/CllJ,EAAQkrK,GAAoBE,EAC5B7iH,EAAU4iH,GAAsBE,EAChC5xE,EAAkBL,KAExB,OAAIp5F,GAAchN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,IACpDuD,GAAW6sB,GA2Fd3lF,EAAAA,EAAAA,KAACs4K,GAAY,CACX3yF,SAAUA,EACV7sB,OAAQA,EACRrqB,aA7FiB//B,UACnB,GAAIuhG,EAAY,CACd,MAAM,qBAAE+0D,EAAuB,CAAC,EAAC,OAAEp5H,EAAkB,OAAE42D,GAAWyN,EAElE,IACE,MAAMsoE,QAAqBV,EAAmBjsI,GAAQ1hC,QAAU,GAAIy7E,GAEpE,IAAIsrC,EAAkC,CAAC,EACvC,MAAMlrG,EAAWA,CAAkC3Z,EAAQ1R,KACzC,MAAOA,IAKP,2BAAZw1F,GAEAp3B,EAAO4+G,GAAwBtrK,KAC/B0sD,EAAO0wC,kBAOXynB,EAAQ7kH,GAAO1R,EAAK,EAyCtB,QAvCeiH,IAAXiqC,IACF7lB,EACE,eACC6lB,GAAQujB,aAAe,IAAIpoD,KAAK61F,GAASpiG,OAAOoiG,EAAKz/F,OAExD4oB,EAAS,uBAAwBi/I,GACjCj/I,EAAS,YAAa6lB,EAAO41C,WAC7B51C,GAAQg2C,uBACN77D,EAAS,wBAAyB6lB,EAAOg2C,uBAC3C77D,EAAS,aAAc6lB,GAAQo3C,YAC/Bj9D,EAAS,QAAS6lB,GAAQk2C,OAC1B/7D,EACE,kBACA6lB,EAAOi5C,iBAAiB99E,KAAI,EAAG5J,QAASA,KAE1CyuC,EAAO2kC,WAAWpzE,IAAM4oB,EAAS,YAAa6lB,EAAO2kC,WAAWpzE,IAChE4oB,EAAS,kBAAmB6lB,EAAOq2C,iBACnCl8D,EAAS,WAAY6lB,EAAO82C,UAAU37E,KAAK0xE,GAAQA,EAAIr7E,OAAMqK,KAAK,MAClEse,EAAS,WAAY6lB,EAAOu2C,UAC5Bp8D,EAAS,QAAS6lB,EAAO5B,OACzBjkB,EAAS,aAAc6lB,EAAO02C,YAC9Bv8D,EAAS,YAAa6lB,EAAO42C,WAAWz7E,KAAK0xE,GAAQA,EAAIr7E,OAAMqK,KAAK,MACpEse,EAAS,UAAW6lB,EAAOrgC,SAC3Bwa,EAAS,YAAa6lB,EAAOi3C,YAE3B01F,EAAa/0K,OAAS,GACxBuiB,EAAS,SAAUwyJ,GAGjBz/G,EAAO0wC,gBAA8B,kBAAZtZ,GAI3BnqE,EAAS,aAAc,IAHF6lB,GAAQo3C,WACxB5yE,KAAKC,MAAMwsE,GAAWjxC,GAAQo3C,aAC/B,CAAC,KAGAwf,IAIS,2BAAZtS,EAAsC,CACxC,MAAM2S,EAAej3D,GAAQo3C,WACxB5yE,KAAKC,MAAMwsE,GAAWjxC,GAAQo3C,aAC/B,CAAC,EAELiuC,EAAU,IACLA,EACHjuC,WAAY,IAAK6f,KAAiBL,GAEtC,CAEA,MAAMrpB,QAAY5pB,EAAYkC,EAAM,IAAIy+B,KAAWgiE,YAAsBjhC,GACrE93C,GACF/jE,EAASqxF,EAAgBttB,GAE7B,CAAE,MAAOrqE,GACPV,EAAazD,SAAS,CACpBtH,QAAS,SACThG,MAAO6J,EAAE,qBACThH,SAAU4O,aAAewV,OAASxV,EAAIzB,SAE1C,CACF,GAOE6iF,QAASA,KA/FoBlwF,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,GAkGhE,CAEO,SAASmuH,IAAa,SAC3B3yF,EAAQ,OACR7sB,EAAM,aACNrqB,EAAY,QACZyhD,IAOA,MAAM,EAAEhpF,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,MACb,SAAE+gC,GAAapsB,EACfupC,EAAiBnd,GAAUh7E,QAAQnD,KAAKzJ,IAAK,IAC9CA,EACH4qB,YAAY,MAGR4nF,EAAgB,CACpB/7D,SAAU4xC,EACVq/E,qBAAsB,CAAC,EACvBp5H,OAAQ,CACN2kC,UAAW2U,EAAS3U,UAAUpzE,GAAK+nF,EAAS3U,UAAY,KACxDphB,YAAa+1B,GAAU/1B,YACvByyB,sBAAuBsD,EAAStD,uBAAuBzkF,GACvD0nF,gBAAiBK,EAASL,gBAC1BrD,UAAW0D,EAAS1D,UACpBc,WAAY4C,EAAS5C,WACrBU,WAAYkC,EAASlC,WACrBlB,MAAOoD,EAASpD,MAChBG,gBAAiBiD,EAASjD,gBAC1BS,SAAUsD,GAAsBd,EAASxC,UACzCP,SAAU+C,EAAS/C,SACnBj4E,OAAQm4F,EACRr4D,MAAOk7C,EAASl7C,MAChBw4C,UAAWwD,GAAsBd,EAAS1C,WAC1Cj3E,QAAS25E,EAAS35E,QAClBs3E,UAAWqC,EAASrC,WAEtBtB,cAAezoB,EACf0pC,OAAQ,CAAC,GAELg2E,EAAoB,SACxBC,GAUA,OACEA,GACA,WAAYA,GACZ,aAAcA,EAA2B,OAElCA,EAAmBnwH,OAAOymB,SAE/B0pG,GAAsB,aAAcA,EAC/BA,EAAmB1pG,cAD5B,CAIF,EAEM5oB,EAA0B,CAC9B,CACEhpD,GAAI,kBACJG,MAAO4J,EAAE,WACTohD,QAAQtoD,EAAAA,EAAAA,KAACw3K,GAAwB,CAAC5oI,cAAekhE,IACjD7sF,OAAQA,IAAMokE,GAAoBvuB,GAClCroB,SAAU/hC,UACR,MAAMgqK,EAAmC,SACnCrpH,GACJoC,EAAM,kBAAkBk0B,EAASxoF,IAAIqhB,2BACrCkN,MAAK,EAAGwmC,QAAS4pC,MACjB,MACElwD,QAAUujB,YAAa6sC,IACrB30C,EAwBJ,GAvBIy0C,EAAoBt4F,OAAS,GAAKw4F,GACpCF,EAAoB1iE,SAASu/I,IAExB38E,EAAoBx3F,MAAMi0K,IACzB,MAAMG,EAA4BJ,EAAkBC,GAC9CI,EAA4BL,EAAkBG,GACpD,OACGF,GAAoBr/E,kBAAoBu/E,GAAoBv/E,kBAC1Dw/E,IACAC,GACFA,GACCD,IAA8BC,CAA0B,KAI9DH,EAAuB30K,KACrB40K,GAAoBrwH,QAAQymB,SACxB,GAAG4pG,GAAoBx9G,eAAei+B,gBAAgBh8F,UAAUu7K,EAAmBrwH,OAAOymB,WAC1F4pG,GAAoBx9G,eAAei+B,gBAAgBh8F,KAE3D,IAGAs7K,EAAuBl1K,OAAS,EAAG,CACrC,MAAMqqC,EAAS,CACbmiE,QAAS,CACP9oG,EACE,yJAAyJwxK,EAAuBjxK,KAC9K,WAKR,MAAM,IAAI4mD,GAAa,GAAI,GAAI,IAAK,GAAIxgB,EAC1C,CAEgB,GAChB,GAGN,CACE1wC,GAAI,uBACJG,MAAO4J,EAAE,wBACT+b,OAAS61J,IACP,MAAM,OAAEltI,EAAS,CAAC,GAAMktI,EACxB,IAAKltI,IAAWktB,EAAQ,OAAO,EAC/B,MAAM3J,EACJ,gBAAiBvjB,EACZktI,GAAcltI,QAAQujB,YACtB2J,EAAOosB,SAAS/1B,YAEjB4pH,EAA8BjgH,EAAO+sB,yBACrCmzF,EAAgClgH,EAAOi6C,2BAA2BvvG,OAAS,EACjF,IAAKu1K,GAA+BC,EAElC,OAAO,EAGT,MAAMC,EAA8B9pH,GAAaxnC,MAAMinD,IACrD,IAAKA,EAAWtmB,OAAQ,CACtB,MAAMu7G,EAAyB/qG,EAAOosB,SAAS/1B,aAAa3qD,MACzDs/J,GAAgB1zJ,KAAKa,UAAU6yJ,EAAY3mK,MAAQiT,KAAKa,UAAU29D,EAAWzxE,MAEhF,OAAO0mK,GAA0BA,GAAwBE,kBAAkBvgK,OAAS,CACtF,CAQA,MANuB,CACrB,WACA,kBACA,iBACA,kBAEoBmkB,MAAMuxJ,GAAiD,QAAnCtqG,EAAWtmB,SAAS4wH,IAAqB,IAGrF,OAAQD,CAA2B,EAErC3wH,QAAQtoD,EAAAA,EAAAA,KAACwjK,GAAuB,CAAsB1qG,OAAQA,KAEhE,CACE37D,GAAI,SACJG,MAAO4J,EAAE,UACT+b,OAAQA,KAAO61C,GAAQ0wC,eACvBlhD,QAAQtoD,EAAAA,EAAAA,KAACuqG,GAAU,CAACra,QAASA,EAASnS,WAAY4H,EAASxoF,GAAGqhB,cAEhE,CACErhB,GAAI,SACJG,MAAO4J,EAAE,UACTgwC,SAASl3C,EAAAA,EAAAA,KAACykK,GAAwB,CAAC9+E,SAAUA,MAIjD,OACErgF,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,oBACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,aAAcY,GAAI88C,EAAWgW,GAAS67G,YACjD,CACEn5K,MAAOqoF,EAASvoF,KAChB0K,GAAI88C,EAAWgW,GAASu4B,mBAAoB,CAAE9uC,OAAQ,CAAElnD,GAAIwoF,EAASxoF,WAI3E6C,EAAAA,EAAAA,KAACgqD,GAAU,CACT7D,MAAOA,EACPv4B,aAAckiF,EACdpxE,SAAU+P,EACVtF,aAAck2B,OAItB,CEvXO,SAAS85G,KACd,MAAM,EAAEjyK,IAAMC,EAAAA,EAAAA,MACRsyD,EAAiBm9D,GACrB,kEAGI,cAAE7kE,GAAkBJ,KACpBtN,GAASgZ,EAAAA,GAAAA,MAEbrwD,MAAO83J,EACP5kJ,KAAMylE,EACNv8D,UAAWgwJ,EAAiB,QAC5B7jH,GACEc,GAAwB5E,EAAM,iBAAkBpN,EAAOlnD,KAEzD+iB,KAAMglJ,EACNl4J,MAAOm4J,EACP5vG,QAAS6vG,EACTh8I,UAAW0mJ,GACT75G,GACFxE,EAAM,sDAEF7M,EAAaT,KACb6W,EAAerW,KACf/jB,EAAcu3F,GAAmB,CACrCC,mBAAoBA,IAAMp9D,EAAaJ,GAAS67G,aAG5CzpK,EAAQm4J,GAAqBL,EAC7B36G,GAA0C9lD,EAAAA,EAAAA,UAAQ,KACtD,MAAM8lD,EAAO,CACX,CAAE7sD,MAAO4J,EAAE,WAAYiuB,KAAMylC,GAASu4B,oBACtC,CAAE71F,MAAO4J,EAAE,eAAgBiuB,KAAMylC,GAASy+G,uBAC1C,CAAE/7K,MAAO4J,EAAE,eAAgBiuB,KAAMylC,GAAS0+G,uBAC1C,CAAEh8K,MAAO4J,EAAE,aAAciuB,KAAMylC,GAASguF,sBACxC,CAAEtrJ,MAAO4J,EAAE,QAASiuB,KAAMylC,GAAS2+G,iBACnC,CAAEj8K,MAAO4J,EAAE,UAAWiuB,KAAMylC,GAAS4+G,oBAKvC,OAHIznH,GAAeigB,mBAAsBkzF,GAAgBA,EAAahzG,QAAQ1uD,OAAS,IACrF2mD,EAAKpmD,KAAK,CAAEzG,MAAO4J,EAAE,iBAAkBiuB,KAAMylC,GAAS6+G,2BAEjDtvH,CAAI,GACV,CAACjjD,EAAG6qD,EAAemzG,IACtB,OAAIl4J,GAAchN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,GAAW6vG,IAChEgU,GAAqBtJ,GAA4B9vK,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,KAGhF7kD,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAOsoF,GAAUvoF,KACjBgjD,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,aAAcY,GAAI88C,EAAWgW,GAAS67G,YACjD,CAAEn5K,MAAOqoF,GAAUvoF,OAErBujD,eACE3gD,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAAS,IAAIm2D,KAAmB74B,GAChCx9B,SAAU6F,GAAAA,GAAiBC,MAC3B3I,aAAcolF,OAIpB3lF,EAAAA,EAAAA,KAAC09D,GAAc,CACbe,QAAS,CACPnhE,MAAO4J,EAAE,qBACTiuB,KAAMylC,GAAS67G,UACf/3G,oBAAqB,aAEvBvU,KAAMA,EACN9F,OAAQ,CAAElnD,GAAIwoF,GAAUxoF,IACxBiiE,gBAAiB,CAAEumB,gBAI3B,CC1FO,SAAS8wF,KACd,MAAM,EAAEvvK,IAAMC,EAAAA,EAAAA,MAEdo2D,GAAqB,aACrB,MAAMzE,EAASvC,KAEf,OACEjxD,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,aACT+5C,eAAgB/5C,EAAE,aAClB85C,UAAW95C,EACT,qPAEFg6C,aAAc2X,GAAcC,EAAQ,aACpCl9C,YAAa1U,EACX,oFAEFy5C,eACE3gD,EAAAA,EAAAA,KAACyjE,GAAkB,CACjBhgE,KAAM,qEAIZzD,EAAAA,EAAAA,KAAC84H,GAAa,CAAC10E,IAAKqN,EAAM,8BAGhC,CCxBO,SAASioH,GAA0B58K,GAGxC,MAAM,oBAAE68K,GAAwB78K,GAC1B,SAAEipB,IAAa6qB,EAAAA,GAAAA,MACfg2C,GAAmBzkB,EAAAA,GAAAA,IAAkC,CAAE/kE,KAAM,sBACnErB,EAAAA,EAAAA,YAAU,KACH6qF,IACH7gE,EAAS,uBAAmBpkB,GAC5BokB,EAAS,qBAAsB,MACjC,GACC,CAAC6gE,EAAkB7gE,IACtB,MAAM,EAAE7e,IAAMC,EAAAA,EAAAA,MACd,OACE7B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,OACLE,MAAO4J,EAAE,QACT8lB,YAAU,EACV5G,YAAalf,EAAE,gDAEjBlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,cACLE,MAAO4J,EAAE,eACTkf,YAAalf,EAAE,uDAEjBlH,EAAAA,EAAAA,KAACgtH,GAA0B,CAA0B5vH,KAAK,kBAC1D4C,EAAAA,EAAAA,KAAC4hG,GAAuB,CACtB7pD,oBACE/3C,EAAAA,EAAAA,KAACuwC,GAAgB,CAACjzC,MAAO4J,EAAE,oBAAqB9J,KAAK,4BAEvDA,KAAK,eAEP4C,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh2B,YAAalf,EAAE,0CACf6wC,oBACE/3C,EAAAA,EAAAA,KAACuwC,GAAgB,CAACjzC,MAAO4J,EAAE,oBAAqB9J,KAAK,wBAEvDA,KAAK,QACLg0C,eAAgBlqC,EAAE,SAClBiqC,UAAWjqC,EACT,gOAEF5J,MAAO4J,EAAE,YAEXlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,aACLgpB,YAAalf,EAAE,+BACfkqC,eAAgBlqC,EAAE,yBAClBiqC,UAAWjqC,EACT,yHAEF6wC,oBACE/3C,EAAAA,EAAAA,KAACuwC,GAAgB,CAACjzC,MAAO4J,EAAE,oBAAqB9J,KAAK,6BAEvDE,MAAO4J,EAAE,4BAGXlH,EAAAA,EAAAA,KAAC4/F,GAAmB,CAClBxuD,eAAgBlqC,EAAE,UAClBiqC,UAAWjqC,EACT,sJAEF9J,KAAK,SACL26C,oBACE/3C,EAAAA,EAAAA,KAACuwC,GAAgB,CAACjzC,MAAO4J,EAAE,oBAAqB9J,KAAK,4BAGzD4C,EAAAA,EAAAA,KAACk4F,GAAuB,CACtB9mD,eAAgBlqC,EAAE,YAClBiqC,UAAWjqC,EACT,6MAEF9J,KAAK,WACL26C,oBACE/3C,EAAAA,EAAAA,KAACuwC,GAAgB,CAACjzC,MAAO4J,EAAE,oBAAqB9J,KAAK,uBAEvDm9C,gBAAiBrzC,EAAE,6BACnB5J,MAAO4J,EAAE,YACTmf,QAASszJ,GAAqBj3F,UAAY,CAAC,CAAEhoF,MAAO,GAAI4C,MAAO,QAEjE0C,EAAAA,EAAAA,KAACk4F,GAAuB,CACtB9mD,eAAgBlqC,EAAE,aAClBiqC,UAAWjqC,EACT,kNAEF6wC,oBACE/3C,EAAAA,EAAAA,KAACuwC,GAAgB,CAACjzC,MAAO4J,EAAE,oBAAqB9J,KAAK,4BAEvDA,KAAK,YACLm9C,gBAAiBrzC,EAAE,8BACnB5J,MAAO4J,EAAE,aACTmf,QAASszJ,GAAqBn3F,WAAa,CAAC,CAAE9nF,MAAO,GAAI4C,MAAO,QAElE0C,EAAAA,EAAAA,KAAC+lE,GAAe,CAAC12B,cAAY,EAAAnvC,UAC3BF,EAAAA,EAAAA,KAACm4C,GAAkB,CACjBJ,oBACE/3C,EAAAA,EAAAA,KAACuwC,GAAgB,CAACjzC,MAAO4J,EAAE,oBAAqB9J,KAAK,4BAEvDg0C,eAAgBlqC,EAAE,mBAClBiqC,UAAWjqC,EAAE,2DACbuL,OAAO,OACPnV,MAAO4J,EAAE,mBACT9J,KAAK,kBAGTkI,EAAAA,EAAAA,MAACygE,GAAe,CAAC1oE,MAAO6J,EAAE,WAAWhH,SAAA,EACnCF,EAAAA,EAAAA,KAACuwC,GAAgB,CACfjzC,MAAO4J,EAAE,kBACT9J,KAAK,sBAEP4C,EAAAA,EAAAA,KAACuwC,GAAgB,CACfjzC,MAAO4J,EAAE,0BACT9J,KAAK,0BAIRwpF,GAAmB5mF,EAAAA,EAAAA,KAACi1K,GAAc,CAAC3sE,aAAa,2BAA8B,OAGrF,CCrGO,SAASuwB,KACd,MAAM,EAAE3xH,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACfC,EAAaT,KACbE,GAASgZ,EAAAA,GAAAA,KAETlgE,EAAK3C,OAAO6pD,EAAOlnD,KAEvB+iB,KAAMy5J,EACN3sK,MAAO4sK,EACPrkH,QAASskH,EACTzwJ,UAAW0wJ,GACT7jH,GAA4BxE,EAAM,2BAA2Bt0D,EAAGqhB,eAsB9DowB,GAAgBvqC,EAAAA,EAAAA,UAAQ,KAC5B,GAAKs1K,EACL,MAAO,CACL/zF,mBAAoB+zF,EAAoB/zF,qBAAsB,EAC9D5D,wBAAyB23F,EAAoB33F,0BAA2B,EACxEoC,qBAAsBu1F,EAAoBv1F,uBAAwB,EAClE/B,oBAAqBs3F,EAAoBt3F,sBAAuB,EAChEE,yBAA0Bo3F,EAAoBp3F,2BAA4B,EAC1EE,wBAAyBk3F,EAAoBl3F,0BAA2B,EACxEE,mBAAoBg3F,EAAoBh3F,qBAAsB,EAC9DhB,wBAAyBg4F,EAAoBh4F,0BAA2B,EACxE/lE,YAAa+9J,EAAoB/9J,aAAe,GAChDonE,WAAY22F,EAAoB32F,YAAc,MAC9CzS,UAAWopG,EAAoBx+G,eAAeoV,WAAa,KAC3DqW,iBAAkB5hF,QAAQ20K,EAAoBpiG,SAAS+O,kBACvD5D,SAAUsD,GAAsB2zF,EAAoBj3F,UAAY,IAChEtS,aAAcupG,GAAqBvpG,cAAgB,KACnDlmE,OAAQyvK,EAAoBx+G,gBAAgBjxD,QAAQgoD,SAAW,GAC/DloB,MAAO2vI,EAAoB3vI,OAAS,GACpC5sC,KAAMu8K,EAAoBv8K,MAAQ,GAClCklF,WAAYq3F,EAAoBr3F,YAAc,GAC9CE,UAAWwD,GAAsB2zF,EAAoBn3F,WAAa,IAClEiE,mBAAoBkzF,EAAoBx+G,eAAesrB,oBAAsB,KAC7ED,YAAat/E,EAAE,gDAAgDgpC,cAC/Dm2C,YAAaszF,EAAoBpiG,SAAS+O,iBACtC,GAAGpgF,SAASmxB,SAASkvD,SAASozF,EAAoBpiG,QAAQ+O,mBAC1Dp/E,EAAE,gDAAgDgpC,cACtDo2C,iBAAkBqzF,EAAoBpiG,QAAQ+O,iBAC9CF,gBAAiBuzF,EAAoBvzF,iBAAmB,GACzD,GACA,CAACl/E,EAAGyyK,KACD,MAAEr3G,IAAUC,EAAAA,GAAAA,MAElB,OAAIq3G,aAAqBt1J,OAChBtkB,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAO4sK,EAAW18G,cAAe28G,IAEhDC,GAAsB95K,EAAAA,EAAAA,KAACkqD,GAAW,KAEpC5kD,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MACEs8K,GAAqBv8K,KACjB8J,EAAE,mCAAoC,CACpC6yK,wBAAyBJ,GAAqBv8K,OAEhD8J,EAAE,yBAERk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,aAAcY,GAAI88C,EAAWgW,GAAS67G,YACjD,CACEn5K,MAAOq8K,GAAqBv8K,KACxB8J,EAAE,mCAAoC,CACpC6yK,wBAAyBJ,GAAqBv8K,OAEhD8J,EAAE,8BAIZlH,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,8BACdw3B,SAhF2DhwB,UAG/D,MAAM,OAAExE,KAAW6W,GAASjX,QAEtB0lD,GAAsCiC,EAAM,2BAA2Bt0D,EAAGqhB,cAAe,IAC1FuC,EACHwvD,UAAWzmE,EAAOymE,WAAWpzE,IAAM,KACnCulF,SAAUoE,GAAch9E,EAAO44E,WAAa,GAC5CtS,aAActmE,GAAQsmE,aACtBoS,UAAWsE,GAAch9E,EAAO04E,YAAc,GAC9CiE,mBAAoB38E,EAAO28E,oBAAoBtpF,IAAM,KACrDipF,gBAAiBt8E,EAAOs8E,iBAAmB,KAE5C9jB,EAA2CE,gBAEtCk2E,GAAaihC,EAA4CzvK,GAC/D8wD,EAAaJ,GAAS06B,2BAA4B,CAAEjxC,OAAQ,CAAElnD,GAAIA,EAAGqhB,aAAe,EAgEhFgvB,SAAUA,IAAMwtB,EAAaJ,GAAS06B,2BAA4B,CAAEjxC,OAAQ,CAAElnD,QAC9EywB,aAAcghB,EAAc1uC,UAE5BF,EAAAA,EAAAA,KAAC05K,GAAyB,CAACC,oBAAqB/qI,QAIxD,CAEO,SAASgrF,KACd,MAAM,EAAE1yH,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACf4K,EAAcyT,KAqBdp0B,GAAgBvqC,EAAAA,EAAAA,UACpB,KAAM,CACJq+E,SAAUsD,GAAsB,KAAO,GACvCxD,UAAWwD,GAAsB,KAAO,GACxChD,WAAY,QACZwD,YAAat/E,EAAE,gDAAgDgpC,cAC/Dm2C,YAAan/E,EAAE,gDAAgDgpC,iBAEjE,CAAChpC,IAGG09C,EAAaT,KAEnB,OACE7+C,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,gCACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,aAAcY,GAAI88C,EAAWgW,GAAS67G,YACjD,CAAEn5K,MAAO4J,EAAE,qCAGflH,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,gCACdw3B,SA3C2DhwB,UAC/D,MAAM,OAAExE,EAAM,mBAAEu8E,KAAuB1lE,GAASjX,EAE1C67E,QAAiBp2B,EAAYkC,EAAM,2BAA4B,IAChE1wC,EACHwvD,UAAWzmE,EAAOymE,WAAWpzE,GAC7BulF,SAAUoE,GAAch9E,EAAO44E,UAAY,IAC3CtS,aAAetmE,GAAQsmE,mBAA2BzuE,EAClD6gF,UAAWsE,GAAch9E,EAAO04E,WAAa,IAC7CiE,mBAAoBA,GAAoBtpF,IAAM,aAG1Cu7I,GAAa/yD,EAAUz7E,GAE7B8wD,EAAaJ,GAAS+9D,mBAAoB,CACxCt0E,OAAQ,CAAElnD,GAAIwoF,EAASxoF,GAAGqhB,aAC1B,EA4BEgvB,SAAUA,IAAMwtB,EAAaJ,GAAS67G,WACtC7oJ,aAAcghB,EAAc1uC,UAE5BF,EAAAA,EAAAA,KAAC05K,GAAyB,QAIlC,CAEAhrK,eAAegqI,GACb/yD,EACAz7E,GAEA,MAAM,MAAEwzE,EAAK,QAAEC,GAAYH,GACzBmI,EAASxqB,gBAAgBjxD,QAAQgoD,SAAY,GAC7ChoD,GAAW,IAGb,IAAI4qJ,EAAQnvE,GAAUvV,aACtB,IAAKuV,EAASxqB,gBAAgBiV,cAAcjzE,GAE1C,IACE,MAAM+iB,QAAamvC,GAA2CoC,EAAM,mBACpEqjG,EAAQ50I,EAAKgyC,QAAQ,GAAG/0D,EAC1B,CAAE,MAAO2R,GACP,MAAMA,CACR,CAEF,MAAM01E,EAAyB7G,EAAQ52E,KAAKzJ,GAC1CiyD,GAAYkC,EAAM,2BAA2Bk0B,EAASxoF,GAAGqhB,qBAAsB,CAC7ErhB,GAAIG,EAAMH,GACV6mF,cAAc,MAGZS,EAAsB/G,EAAM32E,KAAKzJ,GACrCiyD,GAAYkC,EAAM,2BAA2Bk0B,EAASxoF,GAAGqhB,qBAAsB,CAC7EphB,KAAME,EAAMF,KACZgzE,aAAc0kF,MAKlB,aADsB3qH,QAAQC,IAAI,IAAIo6C,KAA2BC,GAEnE,CC7MO,SAAS6Q,GAA2Bx4F,GAIzC,MAAM,IAAQqK,EAAAA,EAAAA,MACRk9C,GAASgZ,EAAAA,GAAAA,KACTo9E,EAAQ39I,GAAOihF,WAAajhF,EAAMihF,WAAa15B,EAAOlnD,IAE1D+iB,KAAMylE,EAAQ,MACd34E,EAAK,QACLuoD,GACEc,GAAgC5E,EAAM,2BAA4BgpF,GAChE71F,EAAaT,KACbiB,GAAU/vC,EAAAA,GAAAA,MAChB,GAAIrI,EAAO,OAAOhN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,IACzD,IAAKowB,EAAU,OAAO3lF,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,IAEnD,MAAQgR,eAAgBk8G,GAAkB1xF,EAEpCiR,EAAmBjR,EAASC,oBAAsBD,EAASS,gBAQjE,OACE9gF,EAAAA,EAAAA,MAACoc,GAAW,CAACU,cAAetlB,EAAMslB,cAAcliB,SAAA,EAC9CF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,QAAQhH,SAC1BpD,EAAMihF,YACL/9E,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS06B,2BAA4B,CAClDjxC,OAAQ,CAAElnD,GAAIL,EAAMihF,cACnB79E,SAEFylF,EAASvoF,OAGZuoF,EAASvoF,QAGb4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,eAAehH,SAAEylF,EAAS/pE,eAC/C5b,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,gBAAiBka,SAAUi2J,EAAcjnG,aAAalwE,UACzEF,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS62B,oBAAqB,CAC3CptC,OAAQ,CAAElnD,GAAIk6K,EAAcjnG,cAAcjzE,MACzC+C,SAEFm3K,EAAcjnG,cAAchzE,UAGjC4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,aAAcka,SAAUi2J,EAAc9mG,UAAUrwE,SAClEm3K,EAAc9mG,WACbvwE,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CACHC,GAAI88C,EAAWgW,GAAS82B,iBAAkB,CACxCrtC,OAAQ,CACNlnD,GAAIk6K,EAAc9mG,WAAWpzE,GAC7BqzE,eArCuC,CACnD,GAAI,YACJQ,MAAO,kBACPC,YAAa,yBAkCiComG,EAAc9mG,UAAUzB,SAE3D5uE,SAEFm3K,EAAc9mG,WAAWnzE,OAE1B,QAGN4C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,mBAAoBka,SAAUukE,EAASS,gBAAgBlmF,UAC1EF,EAAAA,EAAAA,KAACgzF,GAAc,CAACC,QAAStN,EAASS,oBAEnCixF,EAAc5wF,qBACbzmF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,sBAAuBka,SAAUi2J,EAAc5wF,mBAAmBvmF,UACrFF,EAAAA,EAAAA,KAAC2uE,GAAe,CAACC,WAAYyoG,GAAe5wF,wBAGhDzmF,EAAAA,EAAAA,KAACkqJ,GAAc,CACb5sJ,MAAO4J,EAAE,WACT6K,KAAM4zE,EAAStqB,QACfgU,KAAMsW,EAASxqB,eAAeyU,cAEhC5vE,EAAAA,EAAAA,KAACmsE,GAAsB,CACrBzxE,MAAOirF,EAAS5V,SAChBz9D,OAAQqzE,EAASxqB,eAAe8U,aAAarU,SAC7Cj1D,QAASA,IACPy+C,EACER,EAAWgW,GAASiB,YAAa,CAC/BxX,OAAQ,CAAElnD,IAAKwoF,EAASxqB,gBAAgB8U,aAAa9yE,IAAM,GAAGqhB,kBAKtExe,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,UAAWka,SAAUi2J,EAAcntK,QAAQgoD,SAAS1uD,OAAOtD,UAC9EF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACRm3K,EAAcntK,OAAOgoD,QAAQnrD,KAAKzJ,IACjC0C,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAAnU,SAAiB5C,EAAMF,MAAjBE,EAAMH,WAIxB6C,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,YAAaka,SAAUukE,EAASjD,SAASxiF,UAC5DF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACRylF,EAASjD,UAAUl7E,MAAM,KAAKT,KAAK0xE,IAAQz4E,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAAnU,SAAYu4E,GAANA,UAG5Dz4E,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,aAAcka,SAAUukE,EAASnD,UAAUtiF,UAC9DF,EAAAA,EAAAA,KAACkU,GAAAA,EAAU,CAAAhU,SACRylF,EAASnD,WAAWh7E,MAAM,KAAKT,KAAK0xE,IAAQz4E,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAAnU,SAAYu4E,GAANA,UAG7Dz4E,EAAAA,EAAAA,KAACo2E,GAAoB,CAAC94E,MAAO4J,EAAE,cAAexM,MAAOirF,EAAS3C,cAC9DhjF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,mBAAoBka,SAAUw1E,EAAiB12F,UAClEoF,EAAAA,EAAAA,MAAC4vD,GAAAA,EAAQ,CAACjtD,UAAW4sF,GAAAA,EAAiBC,GAAG50F,SAAA,CACtCylF,EAASC,qBACR5lF,EAAAA,EAAAA,KAACm1D,GAAAA,EAAY,CAACltD,UAAW8sF,GAAAA,EAAqBC,GAAG90F,SAAEgH,CAAC,oBAErDy+E,EAASS,kBACRpmF,EAAAA,EAAAA,KAACm1D,GAAAA,EAAY,CAACltD,UAAW8sF,GAAAA,EAAqBC,GAAG90F,SAAEgH,CAAC,oBAMhE,CCtHO,SAAS8yK,KACd,MAAM,EAAE9yK,IAAMC,EAAAA,EAAAA,MACRsyD,EAAiBm9D,GACrB,iEAEIvyE,GAASgZ,EAAAA,GAAAA,MACT,cAAEtL,GAAkBJ,MAExB3kD,MAAO83J,EACP5kJ,KAAMylE,EACNv8D,UAAWgwJ,EAAiB,QAC5B7jH,GACEc,GAAgC5E,EAAM,0BAA2BpN,EAAOlnD,KAG1E+iB,KAAMglJ,EACNl4J,MAAOm4J,EACP5vG,QAAS6vG,EACTh8I,UAAW0mJ,GACT75G,GACFxE,EAAM,sDAEF7M,EAAaT,KACb6W,EAAerW,KACf/jB,EAAcu3F,GAAmB,CACrCC,mBAAoBA,IAAMp9D,EAAaJ,GAAS67G,aAE5CzpK,EAAQm4J,GAAqBL,EAE7B36G,GAAoD9lD,EAAAA,EAAAA,UACxD,IAAM,CACJ,CAAE/G,MAAO4J,EAAE,WAAYiuB,KAAMylC,GAAS06B,4BACtC,CAAEh4F,MAAO4J,EAAE,eAAgBiuB,KAAMylC,GAASq/G,+BAC1C,CAAE38K,MAAO4J,EAAE,eAAgBiuB,KAAMylC,GAASs/G,+BAC1C,CAAE58K,MAAO4J,EAAE,aAAciuB,KAAMylC,GAASwuF,8BACxC,CAAE9rJ,MAAO4J,EAAE,QAASiuB,KAAMylC,GAASu/G,yBACnC,CAAE78K,MAAO4J,EAAE,UAAWiuB,KAAMylC,GAASw/G,8BACrCroH,GAAeigB,mBAAsBkzF,GAAgBA,EAAahzG,QAAQ1uD,OAAS,IAC/E,CAAElG,MAAO4J,EAAE,iBAAkBiuB,KAAMylC,GAASy/G,oCAIlD,CAACnzK,EAAG6qD,EAAemzG,IAGrB,OAAIl4J,GAAchN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,GAAW6vG,KAC/Dz/E,GAAYyzF,GAAqBtJ,GAC7B9vK,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,KAGpC7kD,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAOsoF,GAAUvoF,KACjBgjD,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,aAAcY,GAAI88C,EAAWgW,GAAS67G,YACjD,CAAEn5K,MAAOqoF,GAAUvoF,OAErBujD,eACE3gD,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAAS,IAAIm2D,KAAmB74B,GAChCx9B,SAAU6F,GAAAA,GAAiBC,MAC3B3I,aAAcolF,OAIpB3lF,EAAAA,EAAAA,KAAC09D,GAAc,CACbe,QAAS,CACPnhE,MAAO4J,EAAE,qBACTiuB,KAAMylC,GAAS67G,UACf/3G,oBAAqB,aAEvBvU,KAAMA,EACN9F,OAAQ,CAAElnD,GAAIwoF,EAASxoF,IACvBiiE,gBAAiB,CAAEumB,gBAI3B,CClGO,SAASs0F,KACd,MAAM51H,GAASgZ,EAAAA,GAAAA,KACf,OACEr9D,EAAAA,EAAAA,KAAC0/H,GAAU,CACTzsC,QAAQ,MACR91F,GAAIknD,EAAOlnD,IAAM,GACjBsG,KAAM,sBACNg8H,cAAe7kE,GAAS0/G,6BAG9B,CCVO,SAASJ,KACd,MAAM71H,GAASgZ,EAAAA,GAAAA,KACf,OACEr9D,EAAAA,EAAAA,KAAC6/H,GAAU,CACT5sC,QAAQ,MACR91F,GAAIknD,EAAOlnD,IAAM,GACjBsG,KAAM,sBACNg8H,cAAe7kE,GAAS2/G,6BAG9B,CCoBO,SAASD,KACd,MAAM,EAAEpzK,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KACbE,GAASgZ,EAAAA,GAAAA,KACTrC,EAAerW,MACbzkC,KAAMylE,EAAQ,UAAEv8D,GAAc6sC,GACpCxE,EAAM,2BAA2BpN,EAAOlnD,IAAM,OAE1Cy0I,EAAyBpnB,KAE/B,GAAIphG,IAAcu8D,EAAU,OAAO3lF,EAAAA,EAAAA,KAACkqD,GAAW,IAE/C,MAAM/D,EAA0B,CAC9B,CACEhpD,GAAI,QACJG,MAAO4J,EAAE,kBACTohD,QACEtoD,EAAAA,EAAAA,KAACw9H,GAAkB,CACjBC,6BAA8Bv2H,EAC5B,uEACA,CACEszK,aAAc70F,GAAUvoF,SAKhCqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,MAAEysD,GAAUlS,EAClB,IAAKkS,GAAO/1D,OACV,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,QACJG,MAAO4J,EAAE,yBACTohD,QACEtoD,EAAAA,EAAAA,KAAC+8H,GAAkB,CACjB/uE,YAAY,sBACZ0uE,yBAAyB,QACzBC,4BAA6Bz1H,EAAE,6CAA8C,CAC3EszK,aAAc70F,GAAUvoF,SAI9BqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,SAAE2uH,GAAap0E,EACrB,IAAKo0E,GAAUj4H,OACb,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,SACJG,MAAO4J,EAAE,UACTohD,QAAQtoD,EAAAA,EAAAA,KAACs7H,GAAyB,MAwCtC,OACEh2H,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,aACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,aAAcY,GAAI88C,EAAWgW,GAAS67G,YACjD,CACEn5K,MAAOqoF,GAAUvoF,KACjB0K,GAAI88C,EAAWgW,GAAS06B,2BAA4B,CAAEjxC,OAAQ,CAAElnD,GAAIwoF,GAAUxoF,OAEhF,CACEG,MAAO4J,EAAE,eACTY,GAAI88C,EAAWgW,GAASq/G,8BAA+B,CACrD51H,OAAQ,CAAElnD,GAAIwoF,GAAUxoF,OAG5B,CAAEG,MAAO4J,EAAE,kBAGflH,EAAAA,EAAAA,KAACgqD,GAAU,CACT7D,MAAOA,EACPznB,SAzDWhwB,UACf,MAAM,MAAE6qD,EAAK,SAAEkiE,GAAav7G,EACtB4Y,EAAwB,GAC9B,IAAK,MAAMo2C,KAAQ3V,EACjB,IAAK,MAAM7wC,KAAQ+yG,EACjB3iG,EAAM/0B,KAAK,CAAEmrE,OAAMxmD,SAGvB,OAAO,IAAIyhB,SAAeqd,IACxBoqF,EAAuB,CACrBv0I,MAAO6J,EAAE,aACT6xB,MAAOA,EAAGm2C,OAAMxmD,UAAW,GAAGwmD,EAAK/xE,MAAMurB,EAAKvrB,KAC9C27B,QACAkQ,cAAe,CACb,CAAEloB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAGosD,UAAWA,EAAK9xE,MAC9C,CAAE0jB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAG4F,UAAWA,EAAKtrB,OAEhD6rC,SAAUA,EAAGimC,OAAMxmD,UACjB6mC,GAAYkC,EAAM,0BAA2B,CAC3Cyd,KAAMA,EAAK/xE,GACXkgI,gBAAiB30G,EAAKvrB,GACtB4/D,aAAc,sBACdugE,UAAW33C,EAASxoF,KAExB+rC,WAAYA,KACVse,GAAS,EAEXj7C,QAASA,KACPyuD,EAAaJ,GAASq/G,8BAA+B,CACnD51H,OAAQ,CAAElnD,GAAIwoF,EAASxoF,GAAGqhB,aAC1B,GAEJ,GACF,EAyBE8wB,aAAW,EACX9B,SAAUA,KACRwtB,EAAaJ,GAASq/G,8BAA+B,CAAE51H,OAAQ,CAAElnD,GAAIwoF,GAAUxoF,KAAO,EAExFgsC,aAAck2B,OAItB,CC7HO,SAASk7G,KACd,MAAM,EAAErzK,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KACbE,GAASgZ,EAAAA,GAAAA,MAEPn9C,KAAMylE,EAAQ,UAAEv8D,GAAc6sC,GACpCxE,EAAM,2BAA2BpN,EAAOlnD,IAAM,OAE1CutH,EAAqBF,KACrBxvD,EAAerW,KAErB,GAAIv7B,IAAcu8D,EAAU,OAAO3lF,EAAAA,EAAAA,KAACkqD,GAAW,IAE/C,MAAM/D,EAA0B,CAC9B,CACEhpD,GAAI,QACJG,MAAO4J,EAAE,kBACTohD,QACEtoD,EAAAA,EAAAA,KAACk9H,GAAkB,CACjBC,6BAA8Bj2H,EAC5B,uEACA,CACEszK,aAAc70F,GAAUvoF,SAKhCqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,MAAE0sD,GAAUnS,EAClB,IAAKmS,GAAOh2D,OACV,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,QACJG,MAAO4J,EAAE,yBACTohD,QACEtoD,EAAAA,EAAAA,KAAC+8H,GAAkB,CACjB/uE,YAAY,sBACZ0uE,yBAAyB,QACzBC,4BAA6Bz1H,EAAE,6CAA8C,CAC3EszK,aAAc70F,GAAUvoF,SAI9BqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,SAAE2uH,GAAap0E,EACrB,IAAKo0E,GAAUj4H,OACb,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,SACJG,MAAO4J,EAAE,UACTohD,QAAQtoD,EAAAA,EAAAA,KAACs7H,GAAyB,MAwCtC,OACEh2H,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,aACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,aAAcY,GAAI88C,EAAWgW,GAAS67G,YACjD,CACEn5K,MAAOqoF,GAAUvoF,KACjB0K,GAAI88C,EAAWgW,GAAS06B,2BAA4B,CAAEjxC,OAAQ,CAAElnD,GAAIwoF,GAAUxoF,OAEhF,CACEG,MAAO4J,EAAE,eACTY,GAAI88C,EAAWgW,GAASs/G,8BAA+B,CACrD71H,OAAQ,CAAElnD,GAAIwoF,GAAUxoF,OAG5B,CAAEG,MAAO4J,EAAE,kBAGflH,EAAAA,EAAAA,KAACgqD,GAAU,CACT7D,MAAOA,EACPznB,SAzDYxe,IAChB,MAAM,MAAEs5C,EAAK,SAAEiiE,GAAav7G,EACtB4Y,EAAwB,GAC9B,IAAK,MAAMu2C,KAAQ7V,EACjB,IAAK,MAAM9wC,KAAQ+yG,EACjB3iG,EAAM/0B,KAAK,CAAEsrE,OAAM3mD,SAGvB,OAAO,IAAIyhB,SAAeqd,IACxBkjE,EAAmB,CACjBrtH,MAAO6J,EAAE,aACT6xB,MAAOA,EAAGs2C,OAAM3mD,UAAW,GAAG2mD,EAAKlyE,MAAMurB,EAAKvrB,KAC9C27B,QACAkQ,cAAe,CACb,CAAEloB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAGusD,UAAWA,EAAKzT,UAC9C,CAAE96C,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAG4F,UAAWA,EAAKtrB,OAEhD6rC,SAAUA,EAAGomC,OAAM3mD,UACjB6mC,GAAYkC,EAAM,0BAA2B,CAC3C4d,KAAMA,EAAKlyE,GACXkgI,gBAAiB30G,EAAKvrB,GACtB4/D,aAAc,sBACdugE,UAAW33C,EAASxoF,KAExB+rC,WAAYA,KACVse,GAAS,EAEXj7C,QAASA,KACPyuD,EAAaJ,GAASs/G,8BAA+B,CACnD71H,OAAQ,CAAElnD,GAAIwoF,EAASxoF,GAAGqhB,aAC1B,GAEJ,GACF,EAyBE8wB,aAAW,EACX9B,SAAUA,KACRwtB,EAAaJ,GAASs/G,8BAA+B,CAAE71H,OAAQ,CAAElnD,GAAIwoF,GAAUxoF,KAAO,EAExFgsC,aAAck2B,OAItB,CCpIO,SAASo7G,KAGd,MAAMC,EC1BD,WACL,MAAM7gG,EAAatB,KACnB,OAAOz8E,EAAAA,EAAAA,cACL,CACE+9B,EACA8B,KAEA,MAAMsX,EAAQpZ,EAAO+gD,gBAAgBG,UAC/BlD,EAAah+C,EAAO+gD,gBAC1B,KAAKuV,EAAAA,GAAAA,KAAOx0D,GACV,OAEGsX,EAAM+nC,QACT/nC,EAAM+nC,MAAQ,IAEhB,MAAMwB,EAAO3C,EAAWhgD,EAAO2gD,QAAS7+C,EAAO6+C,QAASpC,GAAWE,MACnErlC,EAAM+nC,MAAMj3E,KAAKy4E,GACjB3iD,EAAOijB,SAAS,CAAEizB,UAAU,IAC5B8H,EAAW/6B,SAAS,IAAK+6B,EAAWI,WAAYlI,UAAU,IAC1D8H,EAAWoD,UAAUhoC,GAAO,GAC5B4kC,EAAWwD,WAAWnnC,QAAQ,GAEhC,CAAC2lC,GAEL,CDE0B8gG,GAClBC,GAAkB9+K,EAAAA,EAAAA,cACrBo7C,GAAuB,EAACl3C,EAAAA,EAAAA,KAAC6wF,GAAe,CAAmB35C,QAASA,GAAvB,iBAC9C,IAGI2jI,EExBD,WACL,MAAMC,GCHCh/K,EAAAA,EAAAA,cAAa+9B,IAClB,IAAKA,GAAQwhD,aAAc,OAC3B,MAAMD,EAAQvhD,EAAOwhD,WAAWyD,WAC1Bu2B,EAAQx7E,EAAOwhD,WAAW0/F,WAC1Bv7F,EAAW,IAAIpE,GACf4/F,EAAuE,CAAC,EACxEC,EAAiC,GAEvC5lE,EAAMj8E,SAAS5kB,IAEoB,cAA7BA,EAAK8lE,YAAYE,UAGjBhmE,EAAK8lE,YAAYE,UAAY3gD,EAAO2gD,SAEtCygG,EAAqBl3K,KAAKyQ,EAAKkmE,YAAYF,SAExCwgG,EAAUxmK,EAAKkmE,YAAYF,WAC9BwgG,EAAUxmK,EAAKkmE,YAAYF,SAAW,CACpC0gG,QAAS,GACTC,WAAW,IAGfH,EAAUxmK,EAAKkmE,YAAYF,SAAS0gG,QAAQn3K,KAAKyQ,EAAK8lE,YAAYE,SAAQ,IAG5E,MAAM4gG,EAAgBj+K,IAChB69K,EAAU79K,KAAQ69K,EAAU79K,GAAIg+K,YAClCH,EAAU79K,GAAI+9K,QAAQ9hJ,SAASiiJ,IAC7BJ,EAAqBl3K,KAAKs3K,GAC1BD,EAAaC,EAAS,IAExBL,EAAU79K,GAAIg+K,WAAY,EAC5B,EAGFC,EAAavhJ,EAAO2gD,SAGpBygG,EACG98K,QAAO,CAAC+4C,EAASlwC,EAAO01F,IAAU11F,IAAU01F,EAAMj3C,QAAQvO,KAC1D9d,SAASkiJ,IACR97F,EAASpmD,SAASvH,IACZA,EAAK2oD,UAAY8gG,IACnBh7K,EAAAA,GAAAA,MAAO,KACLuxB,EAAK0pJ,aAAajsE,GAAAA,IAAUksE,SAC5B3pJ,EAAK0qD,cAAclE,GAAAA,IAAW/vE,OAAO,GAFvChI,EAIF,GACA,GACF,GACH,ID/CH,OAAOxE,EAAAA,EAAAA,cACL,CAAC2/K,EAA4B3+K,KAC3B,MAAM49B,EAAa+gJ,EAAQ/gJ,aAErBiB,EAAS8/I,EAAQC,gBACjB5xG,EAAanuC,GAAQ4xE,iBAAmBl1B,GAAAA,IAAWhuE,QAEnD8tE,EAAasjG,EAAQtrK,UAE3B,IAAKuqB,EAAY,CACf,MAAMihJ,EAAe7+K,EAAMo6C,SAC3B52C,EAAAA,GAAAA,MAAO,KACLq7K,EAAaJ,aAAajsE,GAAAA,IAAUC,QACpCosE,EAAap/F,cAAclE,GAAAA,IAAWhuE,QAAQ,GAFhD/J,EAIF,CAIA,OAHIo6B,GACFogJ,EAAoB3iG,GAEf,IACFr7E,EACH8+K,QAAS9xG,IAAeuO,GAAAA,IAAW/vE,OACnCuzK,aAAcnhJ,EACf,GAEH,CAACogJ,GAEL,CFLiCgB,GAEzBC,GAAqBjgL,EAAAA,EAAAA,cAEvB46C,IAAmB,CAOnBA,OAAQA,GAAU,CAACslI,GAAAA,IAAgBC,GAAAA,IACnCC,QAASrB,KAEX,CAACA,IAEH,OAAO/+K,EAAAA,EAAAA,cACL,KACEqgL,EAAAA,GAAAA,MACE,CACEtiJ,EACA8B,KAEA,IAAKw0D,EAAAA,GAAAA,KAAOx0D,IAEOA,EAAO4xE,kBACPl1B,GAAAA,IAAW/vE,OAA9B,CAMA,GAAuC,IAAnCqzB,EAAOs+C,iBAAiBz2E,OAAc,CACxC,MAAMg5E,EAAO7gD,EAAOs+C,iBAAiB,GACjCuC,EAAKlC,YAAYE,UAAYf,IAC/B+C,EAAKzC,YAAW,EAEpB,CAEA2gG,EAAgB7gJ,EAAQ8B,EAXxB,CAW+B,GArBnCwgJ,EAwBEC,EAAAA,GAAAA,KAAgBxB,EAAhBwB,EACEC,EAAAA,GAAAA,KACEN,EAAmB,CzgB7EM,qBACA,wBygB+EvBE,GAAAA,KAJJI,EAMEC,EAAAA,GAAAA,MAAaC,EAAAA,GAAAA,KAAmB,QAAQ,GAAM,GAA9CD,EAAqDnuE,EAAAA,GAAAA,MAAAA,CAAgBle,SAG7E,CAACyqF,EAAiBE,EAAiBmB,GAEvC,CIzCA,MAAMtwE,IAAe/oG,EAAAA,EAAAA,IAAOgpG,GAAAA,KAAe9oG,WAAA,CAAAC,YAAA,qBAAtBH,CAAsB,qCAK9BgrG,GAAoB,CAC/BtyB,MAAO,GACPJ,MAAO,GACPoO,MAAO,CACLjsF,GAAIo8E,GACJ91E,KAAM,QACNywC,OAAQ,QACRwkC,SAAS,IAWA8jG,GAAmBA,EAAGt8J,MAAQ2tF,gBAAgB,GAAIloB,gBAC7D,MAAM,EAAEz+E,IAAMC,EAAAA,EAAAA,MACRs1K,GCxDC3gL,EAAAA,EAAAA,cAAa+7E,IACIhuE,OAAO4f,KAAKouD,GAAY6kG,UAAUv+K,QAAQiO,GAC9DA,EAAI4kD,SAAS,kBAED53B,SAAShtB,IACrB,MAAMuwK,EAAY9kG,EAAW+kG,eAAexwK,GACxCuwK,IACFr8K,EAAAA,GAAAA,MAAO,KACLq8K,EAAU98F,MAAMzzE,GAChByrE,EAAWglG,cAAcF,EAAU,GAFrCr8K,EAIF,GACA,GACD,ID4CGu5E,EAAatB,KACbukG,EAAsBrC,KACtBsC,GAAqBjhL,EAAAA,EAAAA,cACxBkhL,GACyBnvE,EAAcrpG,MACnCqtB,GAASA,EAAK10B,GAAGqhB,aAAew+J,EAAsB,MAI3D,CAACnvE,IAEGovE,GAAkBnhL,EAAAA,EAAAA,cAEpBo7C,GAUG,EAACl3C,EAAAA,EAAAA,KAACwwF,GAAe,CAAmBt5C,QAASA,GAAvB,iBAC3B,IAEI42D,GAA6ChyG,EAAAA,EAAAA,cACjD,CAACgzE,EAAiBrrE,KAChB,GACO,UADCA,EAEJ,OAAOsqG,GAAAA,IAEP,OAAQj/B,GACN,KAAKk/B,GAAAA,IAAU5kB,MACb,OAAO6kB,EAAAA,GAAAA,MAAAA,EAAcE,EAAAA,GAAAA,MAAAA,CAAgBD,GAAAA,MACvC,KAAKF,GAAAA,IAAUn8E,KACb,OAAOirJ,IACT,KAAK9uE,GAAAA,IAAUxxB,KACb,OAAO4/F,EAAAA,GAAAA,KAAgBa,EAAhBb,EAAiCjuE,EAAAA,GAAAA,MAAAA,CAAgB1e,KAC1D,QACE,OAER,GAEF,CAACqtF,EAAqBG,IAGlB7uE,GAAsBtyG,EAAAA,EAAAA,cAAY,KACtC,MAAMuyG,EAAmB,IAAIC,GAAAA,IAgB7B,OAfAD,EAAiBE,wBAAuB,GACxCF,EAAiBG,yBAAyBV,GAC1CO,EAAiBI,uBACf,CAAChrG,EAAc2lF,IACb,IAAIslB,GAAAA,IAAYtlB,EAAO,CACrBulB,QAAS,IACTC,QAAS,GACTC,QAAS,GACTC,QAAS,KACTC,OAAQ,kBACRC,QAAS,QAGfX,EAAiBpzB,UAAUyyB,IAAY,GACvCW,EAAiBpyG,iBAAiBk6G,GAAAA,IAAiB4mE,GAC5C1uE,CAAgB,GACtB,CAACP,EAA0BivE,IAGxB9tE,GADmBj5F,EAAAA,EAAAA,QAAsBo4F,KACRh4F,QA4EvC,OA1EAra,EAAAA,EAAAA,YAAU,KACR,MAAMi/E,EAAqB,GACrBk0B,EAAY,CAChB/xG,GAAIs8E,GACJh2E,KAAMg2E,GACNn8E,MAAO4J,EAAE,SACTiP,MAAOqjE,GACPljE,OAAQkjE,GACRt5D,KAAM,CACJ6zB,SAAU,CAAE+rC,aAAc,MAGxB1E,EAAQyyB,EAAc9mG,KAAK8sD,IAC/B,MAAMosB,EAASpsB,EAAE12D,GAAGqhB,WAGd2wF,EAAYhoB,GADDtzB,EAAEsH,gBAAgBogB,sBAAsBn+E,MAAQ,GACxBy2D,EAAE4nB,aAAev0E,EAAE,WAE5D2sD,EAAEmsB,cAAc5mD,SAASj8B,IACvB69E,EAAMj3E,KAAK81E,EAAWoG,EAAQ9iF,EAAGqhB,WAAY45D,GAAWntC,SAAS,IAEnE4oB,EAAEksB,cAAc3mD,SAASj8B,IACvB69E,EAAMj3E,KAAK81E,EAAWoG,EAAQ9iF,EAAGqhB,WAAY45D,GAAW9vE,QAAQ,IAElEurD,EAAEisB,aAAa1mD,SAASj8B,IACtB69E,EAAMj3E,KAAK81E,EAAWoG,EAAQ9iF,EAAGqhB,WAAY45D,GAAWE,MAAM,IAGhE,MAAMzmD,EAAO,CACX10B,GAAI8iF,EACJx8E,KAhBe,OAiBfnG,MAAO6xG,EACPh5F,MAAOqjE,GACPljE,OAAQkjE,GACR61B,MAAOC,GAAAA,IAAUC,OACjB7kE,OAAQ2tC,GAAAA,IAAWhuE,QACnBmlG,cAAeC,GAAAA,IAAcpxF,OAC7B6B,KAAM,CACJ6zB,SAAU8f,IAId,OAAIA,EAAEotB,0BACG,IAAKpvD,EAAM3R,KAAM,IAAK2R,EAAK3R,QAASytF,KAGtC97E,CAAI,IAEP69E,EAAe10B,EAAMj0E,KAAKy1E,GAASA,EAAK7gD,SACxCg0E,EAAYv0B,GAAOj9E,QACtB0zB,IAAU69E,EAAannG,SAASspB,EAAK10B,KAAO00B,EAAK10B,KAAOs8E,KAE3Dk2B,EAAUv2E,SAASvH,IACjBmpD,EAAMj3E,KAAK81E,EAAWJ,GAAe5nD,EAAK10B,GAAIi7E,GAAWE,MAAM,IAGjE,MAAMrlC,EAAQ,CACZ+nC,QACAI,MAAO,CAAC8zB,KAAc9zB,GACtBgO,MAAO,CACLjsF,GAAIo8E,GACJ91E,KAAM,QACNywC,OAAQ,QACRwkC,SAAS,IAIb+jG,EAAextE,GAEfA,EAAch0B,UAAUhoC,GAAO,GAC/Bg8D,EAAc5zB,WAAW6mB,QACzB+M,EAAc5zB,WAAWnnC,QAAQ,GAChC,CAAChtC,EAAG+nG,EAAep1B,EAAYg0B,EAAe4uE,KAG/Cz8K,EAAAA,EAAAA,KAAC4vG,GAAAA,IAAqB,CAAC/3B,WAAYo3B,EAAc/uG,UAC/CF,EAAAA,EAAAA,KAACipF,GAAmB,CAAA/oF,UAElBF,EAAAA,EAAAA,KAAC2oF,GAAmBh2D,SAAQ,CAAAzyB,SACzBA,EAAG2oF,eAAcznE,UAAS0nE,eAAcC,eAAcC,kBAEnDhpF,EAAAA,EAAAA,KAACyrG,GAAY,CACX,UAAQ,sBACRyxE,eAAgBr0F,EAAe,MAAO7oF,EAAAA,EAAAA,KAACqzG,GAAa,IACpD8pE,aAAan9K,EAAAA,EAAAA,KAAC8zG,GAAyB,IACvCxH,YACGlrF,IACCphB,EAAAA,EAAAA,KAACusG,GAAAA,IAAkB,CACjBC,gBAAgBC,EAAAA,GAAAA,KAA6B,IACxCC,GAAAA,IACHC,gBAAgBrsG,EAAAA,GAAAA,MAAO,KACrB2uG,EAAc5zB,WAAWuxB,QAAQ,EAAI,EAAE,IAEzCC,iBAAiBvsG,EAAAA,GAAAA,MAAO,KACtB2uG,EAAc5zB,WAAWuxB,QAAQ,IAAK,IAExCE,qBAAqBxsG,EAAAA,GAAAA,MAAO,KAC1B2uG,EAAc5zB,WAAW0xB,IAAI,GAAG,IAElCC,mBAAmB1sG,EAAAA,GAAAA,MAAO,KACxB2uG,EAAc5zB,WAAW6mB,QACzB+M,EAAc5zB,WAAWnnC,QAAQ,IAEnC93B,QAAQ,EACR6wF,eAAgBlkB,MAKxBmkB,iBAA6BvrG,IAAhBqnF,EACbutB,kBAAgB,EAChBC,SAASx2G,EAAAA,EAAAA,KAACmyG,GAAO,IACjBirE,eAAgB,MAAMl9K,SAErBkhB,GACCphB,EAAAA,EAAAA,KAAA,OAAK6B,MAAO,CAAEw7K,KAAM,YAAan9K,UAC/BF,EAAAA,EAAAA,KAAC63B,GAAgB,CACfpf,QAAQzY,EAAAA,EAAAA,KAAC2pF,GAAa,CAACtmF,QAAQ,YAC/BhG,MAAO6J,EAAE,iDACT0U,YAAa1U,EAAE,gDAInB5B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,CACG4oF,IAAgB9oF,EAAAA,EAAAA,KAAC2qE,GAAM,KACxB3qE,EAAAA,EAAAA,KAACmtG,GAAAA,IAAoB,CACnBptG,MAAO,CACLihF,iBAAkB2E,EAClBsR,KAAM,CACJG,KAAMzR,EAASxqB,eAAe6iC,kBAAkB5G,KAChD9jF,MAAOqyE,EAASxqB,eAAe6iC,kBAAkB1qF,oBAW/C,EElRrB,SAASqlH,KACd,MAAM,EAAEzxH,IAAMC,EAAAA,EAAAA,OACR,GAAEhK,IAAOkgE,EAAAA,GAAAA,MAEbnL,QAAS27C,EACT7gG,MAAOswK,EACPl0J,UAAWm0J,EACXhoH,QAASqpB,GACP1B,GAAgCzrB,EAAM,2BAA2Bt0D,GAAM,uBAGzE+iB,KAAMy5J,EACN3sK,MAAOwwK,EACPjoH,QAASkoH,EACTr0J,UAAWs0J,GACTrnH,GAAgC5E,EAAM,2BAA4Bt0D,GAEhE6P,EAAQwwK,GAAiBF,EAC/B,OAAItwK,GACKhN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAeugH,GAAmB7+F,IAG/D8+F,GAAqBH,IAA0B5D,IAAwB9rE,GAEvE7tG,EAAAA,EAAAA,KAACqpB,GAAAA,EAAQ,CAAAnpB,UACPF,EAAAA,EAAAA,KAAC62B,GAAAA,EAAU,CAAA32B,UACTF,EAAAA,EAAAA,KAAC+2B,GAAAA,EAAgB,CACfC,UAAW9vB,EAAE,2DACb8T,aAAa,KACb9X,MACElD,EAAAA,EAAAA,KAACoF,EAAAA,EAAI,CACH7J,KAAK,KACLsG,MAAO,CACL8c,cAAe,OACfriB,MAAOD,EAAmB,SAC1B6D,UAEFF,EAAAA,EAAAA,KAAC+vF,GAAAA,GAAY,MAEhB7vF,UAEDF,EAAAA,EAAAA,KAACspB,GAAAA,EAAO,WAQhBtpB,EAAAA,EAAAA,KAACw8K,GAAgB,CACft8J,KAAM,CACJ2tF,gBACAloB,SAAUg0F,IAIlB,CCjEO,SAASgE,KACd,MAAMt5H,GAASgZ,EAAAA,GAAAA,KACf,OACEr9D,EAAAA,EAAAA,KAAC0/H,GAAU,CACTzsC,QAAQ,MACR91F,GAAIknD,EAAOlnD,IAAM,GACjBsG,KAAM,cACNg8H,cAAe7kE,GAASgjH,qBAG9B,CCVO,SAASC,KACd,MAAMx5H,GAASgZ,EAAAA,GAAAA,KACf,OACEr9D,EAAAA,EAAAA,KAAC6/H,GAAU,CACT5sC,QAAQ,MACR91F,GAAIknD,EAAOlnD,IAAM,GACjBsG,KAAM,cACNg8H,cAAe7kE,GAASkjH,qBAG9B,CCoBO,SAASF,KACd,MAAM,EAAE12K,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KACbE,GAASgZ,EAAAA,GAAAA,KACTrC,EAAerW,MACbzkC,KAAMylE,EAAQ,UAAEv8D,GAAc6sC,GACpCxE,EAAM,kBAAkBpN,EAAOlnD,IAAM,OAEjCy0I,EAAyBpnB,KAE/B,GAAIphG,IAAcu8D,EAAU,OAAO3lF,EAAAA,EAAAA,KAACkqD,GAAW,IAE/C,MAAM/D,EAA0B,CAC9B,CACEhpD,GAAI,QACJG,MAAO4J,EAAE,kBACTohD,QACEtoD,EAAAA,EAAAA,KAACw9H,GAAkB,CACjBC,6BAA8Bv2H,EAC5B,uEACA,CACEszK,aAAc70F,GAAUvoF,SAKhCqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,MAAEysD,GAAUlS,EAClB,IAAKkS,GAAO/1D,OACV,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,QACJG,MAAO4J,EAAE,yBACTohD,QACEtoD,EAAAA,EAAAA,KAAC+8H,GAAkB,CACjB/uE,YAAY,cACZ0uE,yBAAyB,QACzBC,4BAA6Bz1H,EAAE,6CAA8C,CAC3EszK,aAAc70F,GAAUvoF,SAI9BqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,SAAE2uH,GAAap0E,EACrB,IAAKo0E,GAAUj4H,OACb,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,SACJG,MAAO4J,EAAE,UACTohD,QAAQtoD,EAAAA,EAAAA,KAACs7H,GAAyB,MAwCtC,OACEh2H,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,aACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,aAAcY,GAAI88C,EAAWgW,GAAS67G,YACjD,CACEn5K,MAAOqoF,GAAUvoF,KACjB0K,GAAI88C,EAAWgW,GAASu4B,mBAAoB,CAAE9uC,OAAQ,CAAElnD,GAAIwoF,GAAUxoF,OAExE,CACEG,MAAO4J,EAAE,eACTY,GAAI88C,EAAWgW,GAASy+G,sBAAuB,CAAEh1H,OAAQ,CAAElnD,GAAIwoF,GAAUxoF,OAE3E,CAAEG,MAAO4J,EAAE,kBAGflH,EAAAA,EAAAA,KAACgqD,GAAU,CACT7gB,aAAck2B,GACdlZ,MAAOA,EACPznB,SAxDWhwB,UACf,MAAM,MAAE6qD,EAAK,SAAEkiE,GAAav7G,EACtB4Y,EAAwB,GAC9B,IAAK,MAAMo2C,KAAQ3V,EACjB,IAAK,MAAM7wC,KAAQ+yG,EACjB3iG,EAAM/0B,KAAK,CAAEmrE,OAAMxmD,SAGvB,OAAO,IAAIyhB,SAAeqd,IACxBoqF,EAAuB,CACrBv0I,MAAO6J,EAAE,aACT6xB,MAAOA,EAAGm2C,OAAMxmD,UAAW,GAAGwmD,EAAK/xE,MAAMurB,EAAKvrB,KAC9C27B,QACAkQ,cAAe,CACb,CAAEloB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAGosD,UAAWA,EAAK9xE,MAC9C,CAAE0jB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAG4F,UAAWA,EAAKtrB,OAEhD6rC,SAAUA,EAAGimC,OAAMxmD,UACjB6mC,GAAYkC,EAAM,0BAA2B,CAC3Cyd,KAAMA,EAAK/xE,GACXkgI,gBAAiB30G,EAAKvrB,GACtB4/D,aAAc,cACdugE,UAAW33C,EAASxoF,KAExB+rC,WAAYA,KACVse,GAAS,EAEXj7C,QAASA,KACPyuD,EAAaJ,GAASy+G,sBAAuB,CAC3Ch1H,OAAQ,CAAElnD,GAAIwoF,EAASxoF,GAAGqhB,aAC1B,GAEJ,GACF,EAwBE8wB,aAAW,EACX9B,SAAUA,KACRwtB,EAAaJ,GAASy+G,sBAAuB,CAAEh1H,OAAQ,CAAElnD,GAAIwoF,GAAUxoF,KAAO,MAKxF,CC5HO,SAAS2gL,KACd,MAAM,EAAE52K,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KACbE,GAASgZ,EAAAA,GAAAA,MAEPn9C,KAAMylE,EAAQ,UAAEv8D,GAAc6sC,GACpCxE,EAAM,kBAAkBpN,EAAOlnD,IAAM,OAEjCutH,EAAqBF,KACrBxvD,EAAerW,KAErB,GAAIv7B,IAAcu8D,EAAU,OAAO3lF,EAAAA,EAAAA,KAACkqD,GAAW,IAE/C,MAAM/D,EAA0B,CAC9B,CACEhpD,GAAI,QACJG,MAAO4J,EAAE,kBACTohD,QACEtoD,EAAAA,EAAAA,KAACk9H,GAAkB,CACjBC,6BAA8Bj2H,EAC5B,uEACA,CACEszK,aAAc70F,GAAUvoF,SAKhCqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,MAAE0sD,GAAUnS,EAClB,IAAKmS,GAAOh2D,OACV,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,QACJG,MAAO4J,EAAE,yBACTohD,QACEtoD,EAAAA,EAAAA,KAAC+8H,GAAkB,CACjB/uE,YAAY,cACZ0uE,yBAAyB,QACzBC,4BAA6Bz1H,EAAE,6CAA8C,CAC3EszK,aAAc70F,GAAUvoF,SAI9BqzC,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,SAAE2uH,GAAap0E,EACrB,IAAKo0E,GAAUj4H,OACb,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CACE/J,GAAI,SACJG,MAAO4J,EAAE,UACTohD,QAAQtoD,EAAAA,EAAAA,KAACs7H,GAAyB,MAwCtC,OACEh2H,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,aACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,aAAcY,GAAI88C,EAAWgW,GAAS67G,YACjD,CACEn5K,MAAOqoF,GAAUvoF,KACjB0K,GAAI88C,EAAWgW,GAASu4B,mBAAoB,CAAE9uC,OAAQ,CAAElnD,GAAIwoF,GAAUxoF,OAExE,CACEG,MAAO4J,EAAE,eACTY,GAAI88C,EAAWgW,GAAS0+G,sBAAuB,CAAEj1H,OAAQ,CAAElnD,GAAIwoF,GAAUxoF,OAE3E,CAAEG,MAAO4J,EAAE,kBAGflH,EAAAA,EAAAA,KAACgqD,GAAU,CACT7D,MAAOA,EACPznB,SAvDYxe,IAChB,MAAM,MAAEs5C,EAAK,SAAEiiE,GAAav7G,EACtB4Y,EAAwB,GAC9B,IAAK,MAAMu2C,KAAQ7V,EACjB,IAAK,MAAM9wC,KAAQ+yG,EACjB3iG,EAAM/0B,KAAK,CAAEsrE,OAAM3mD,SAGvB,OAAO,IAAIyhB,SAAeqd,IACxBkjE,EAAmB,CACjBrtH,MAAO6J,EAAE,aACT6xB,MAAOA,EAAGs2C,OAAM3mD,UAAW,GAAG2mD,EAAKlyE,MAAMurB,EAAKvrB,KAC9C27B,QACAkQ,cAAe,CACb,CAAEloB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAGusD,UAAWA,EAAKzT,UAC9C,CAAE96C,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAG4F,UAAWA,EAAKtrB,OAEhD6rC,SAAUA,EAAGomC,OAAM3mD,UACjB6mC,GAAYkC,EAAM,0BAA2B,CAC3C4d,KAAMA,EAAKlyE,GACXkgI,gBAAiB30G,EAAKvrB,GACtB4/D,aAAc,cACdugE,UAAW33C,EAASxoF,KAExB+rC,WAAYA,KACVse,GAAS,EAEXj7C,QAASA,KACPyuD,EAAaJ,GAAS0+G,sBAAuB,CAC3Cj1H,OAAQ,CAAElnD,GAAIwoF,EAASxoF,GAAGqhB,aAC1B,GAEJ,GACF,EAuBE8wB,aAAW,EACX9B,SAAUA,KACRwtB,EAAaJ,GAAS0+G,sBAAuB,CAAEj1H,OAAQ,CAAElnD,GAAIwoF,GAAUxoF,KAAO,MAKxF,CCvJO,SAAS4gL,GAAajhL,GAC3B,MAAM,aAAEy+H,GAAiBz+H,EACzBygE,GAAqB,eACrB,MAAMqqE,EAAcT,MACd,GAAEhqI,EAAK,KAAOkgE,EAAAA,GAAAA,KACdyD,EAAc,CAClB,CAAkB,kBAAjBy6D,EACG,oBACA,uCAAwCp+H,EAC5C2qI,iBAAkB,QAEpB,OAAO9nI,EAAAA,EAAAA,KAACmmI,GAAQ,CAACrlE,YAAaA,EAAajpD,QAAS+vH,GACtD,C,gBCTO,SAASo2C,GAAiBhqC,GAI/B,MAAM,IAAQ7sI,EAAAA,EAAAA,OACR,aAAEmhG,EAAY,GAAEnrG,GAAO62I,GAAY,CAAC,EAEpCpvF,EAAaT,KAEnB,OAAO9/C,EAAAA,EAAAA,UACL,IAAM,CACJ,CACEyc,OAAQ5Z,EAAE,QACV4b,KAAO0uF,IACLxxG,EAAAA,EAAAA,KAACmK,EAAAA,EAAI,CAACC,SAAU,CAAEC,QAAS,UAAWnK,UACpCF,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAM+iG,GAAU1G,cAChBx1F,UAAU,QACVpS,KACEsuG,EAAS3gE,UACP7wC,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CAACC,QAASiF,EAAE,YAAYhH,UAC9BF,EAAAA,EAAAA,KAACoF,EAAAA,EAAI,CAACslC,OAAO,SAAS/iC,SAAS,KAAK,UAAQ,2BAA0BzH,UACpEF,EAAAA,EAAAA,KAACi+K,GAAAA,GAAY,QAGf,KAENn2K,GAAI88C,EACe,iBAAjB0jD,EACI1tC,GAASsjH,sBACTtjH,GAASujH,8BACb,CAAE95H,OAAQ,CAAElnD,MAAMmnD,MAAO,CAAE85H,kBAAmB5sE,EAASlO,gBAK/DxiE,KAAM,OACNuC,KAAM,QAER,CACEviB,OAAQ5Z,EAAE,QACV4b,KAAO0uF,IAAaxxG,EAAAA,EAAAA,KAACmV,GAAQ,CAAC1G,KAAM+iG,GAAU/tG,OAC9Cq9B,KAAM,WACNuC,KAAM,YAER,CACEviB,OAAQ5Z,EAAE,WACV45B,KAAM,WACNuC,KAAM,WACNvgB,KAAO0uF,GAEkB,OAArBA,EAASnnG,cACY1I,IAArB6vG,EAASnnG,SACY,KAArBmnG,EAASnnG,QAEF,KAEa,gBAAlBmnG,EAAS/tG,KACJ+tG,EAASnnG,SAGhBrK,EAAAA,EAAAA,KAACqoB,GAAAA,EAAS,CAAAnoB,SACPsxG,EAASnnG,QACPmU,WACAhX,MAAM,MACNT,KAAKoxF,IACJn4F,EAAAA,EAAAA,KAACioB,GAAAA,EAAI,CAAYC,YAAU,EAACzf,OAAQ,GAAG+oG,EAASlO,YAAYnL,IAAOj4F,SAChEi4F,GADQA,UASzB,CAACjxF,EAAG09C,EAAYznD,EAAImrG,GAExB,CCvEA,MAAM78D,GAAe/oC,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,sIAOzBgpC,GAAgBhpC,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,mEAOzB,SAAS27K,GACdn1I,EACAo/D,GAEA,MAAM,EAAEphG,IAAMC,EAAAA,EAAAA,OACP2F,EAAG8rB,GAAaD,KACjBvqB,EAAerD,MACf,GAAE5N,IAAOkgE,EAAAA,GAAAA,KAETihH,EAAWtxK,IACf,MAAM,cAAEmX,EAAa,YAAEC,GAAgBi7C,GAAgBryD,GACvDoB,EAAazD,SAAS,CACpBtH,QAAS,SACThG,MAAO6J,EAAE,qCACThH,UACEoF,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,CACGikB,GAAepd,KAAK+H,GAAQA,EAAIzB,UAChC+W,GAAard,KAAK+H,GAAQA,EAAIzB,cAGnC,EAeJ,OAZ4BkxK,IAC1B3lJ,GACE54B,EAAAA,EAAAA,KAACw+K,GAAkB,CACjBD,UAAWA,EACXhyK,QAASA,IAAMqsB,OAAUj3B,GACzBunC,WAAYA,EACZo1I,QAASA,EACTnhL,GAAIA,EACJmrG,aAAcA,IAEjB,CAGL,CAEA,SAASk2E,GAAmB1hL,GAQ1B,MAAM,UAAEyhL,EAAS,QAAEhyK,EAAO,WAAE28B,EAAU,QAAEo1I,EAAO,GAAEnhL,EAAE,aAAEmrG,GAAiBxrG,GAChE,EAAEoK,IAAMC,EAAAA,EAAAA,MACRojC,EAAa3Q,GAAS2kJ,GACtB/zI,EAAewzI,KACfS,ECrED,SAAyB3hL,GAO9B,MAAM,QAAEyP,EAAO,WAAE28B,EAAU,QAAEo1I,EAAO,GAAEnhL,EAAE,aAAEmrG,GAAiBxrG,EACrDyyD,EAAcyT,KACdiF,EAAgBH,KAEhB42G,EAAqBvhL,EACvBs0D,EAAM,IAAqB,iBAAjB62C,EAAkC,gBAAkB,4BAA4BnrG,iBAC1F,IAEE,KAAE+iB,GAAS+1C,GAAeyoH,GAEhC,OAAO5iL,EAAAA,EAAAA,cACL4S,UACE,IACE,GAAIwR,EAAM,CACR,MAAM4iF,EAAgB,CACpB1lG,KAAM8iB,GAAM9iB,KACZwe,YAAasE,GAAMtE,YACnBmnF,KAAM7iF,GAAM6iF,MAAM5kG,QAAQklG,IAAOs7E,EAAgBp2K,SAAS86F,MAGxDs7E,EAAgBn7K,SAAW0c,EAAK6iF,MAAMv/F,aAClCykE,EAAcy2G,SAEdnvH,EAAYmvH,EAAoB57E,EAE1C,CACF,CAAE,MAAO91F,GACPsxK,EAAQtxK,EACV,CAAE,QACAk8B,EAAWy1I,GACXpyK,GACF,IAEF,CAAC2T,EAAM+nD,EAAeq2G,EAAS/uH,EAAahjD,EAAS28B,EAAYw1I,GAErE,CD2BuBE,CAAgB,CAAEryK,UAAS28B,aAAYo1I,UAASnhL,KAAImrG,kBAClEn8D,EAAWC,IAAgB1wC,EAAAA,EAAAA,WAAS,GAE3C,OACEsE,EAAAA,EAAAA,KAAC++B,GAAAA,EAAK,CACJl5B,QAAM,EACNs5B,kBAAgB,EAChBsL,iBAAiB,UACjBptC,MAAO6J,EAAE,uCACT,aAAYA,EAAE,iBACduB,OAAO,uBACP,UAAQ,uBACRpF,QAAS27B,GAAAA,EAAaC,OACtB1yB,QAASzP,EAAMyP,QACfjJ,QAAS,EACPtD,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACL,UAAQ,6BACRkD,OAAO,6BAEPpF,QAAQ,SACRsD,QAASA,KAAW83K,EAAaF,EAAW,EAC5C,aAAYr3K,CAAC,iBACbzB,gBAAiB0mC,EAAUjsC,SAE1BgH,EAAE,WANC,WAQNlH,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACLkD,OAAO,oCAEPpF,QAAQ,OACRsD,QAAS4F,EAAQrM,SAEhBgH,EAAE,WAJC,WAMNhH,SAEDq+K,EAAU/6K,OAAS,IAClB8B,EAAAA,EAAAA,MAAC85B,GAAAA,EAAY,CAACv9B,MAAO,CAAE6D,YAAa,EAAGkC,aAAc,GAAI1H,SAAA,EACvDF,EAAAA,EAAAA,KAACyrC,GAAY,CAAAvrC,UACXF,EAAAA,EAAAA,KAACkkC,GAAS,CAERxf,UAAW6lB,EAAWzQ,MACtB/U,UAAWw5J,EAAU/6K,OACrB0+B,aAAcsI,EACdzR,MAAQy4E,GAAaA,EAASlO,SAC9B9jE,SAAO,EACPyF,gBAAiB/9B,CAAC,QAClBg+B,gBAAiBh+B,CAAC,WAClBqvB,oBAAoB,EACpBsU,oBAAkB,KACdN,GAVA,YAaRvqC,EAAAA,EAAAA,KAAC0rC,GAAa,CAAAxrC,UACZF,EAAAA,EAAAA,KAACqhC,GAAAA,EAAQ,CACPlkC,GAAG,UACHsL,OAAO,UACPnL,MAAO4J,EAAE,yEAA0E,CACjFoV,MAAOiiK,EAAU/6K,SAEnBjC,UAAW4qC,EACX7pC,SAAUA,CAACkjB,EAAQgnB,IAAQJ,EAAaI,WAOtD,CEvHA,MAAMqyI,IAAen8K,EAAAA,EAAAA,IAAOP,EAAAA,GAAOS,WAAA,CAAAC,YAAA,qBAAdH,CAAc,sCAK5B,SAASo8K,IAAe,aAAEvjD,IAC/B,MAAMl3E,GAASgZ,EAAAA,GAAAA,MACPn9C,KAAMylE,EAAQ,QAAEpwB,GAAYc,GAClC5E,EAAM,IAAI8pE,KACVl3E,EAAOlnD,IAGH4hL,GAAqBjjL,EAAAA,EAAAA,cACzB4S,UACE,IAAKi3E,EAAU,OAEf,MAAMvhC,EACc,iBAAlBuhC,EAASliF,KACLguD,EAAM,kBAAkBk0B,EAASxoF,GAAGqhB,cACpCizC,EAAM,2BAA2Bk0B,EAASxoF,GAAGqhB,oBAE7CgxC,GAAapL,EAAK,CACtBolD,eAAgBlrE,IAGlBi3B,GAAS,GAEX,CAACowB,EAAUpwB,IAGb,OAAKowB,GAIE3lF,EAAAA,EAAAA,KAACg/K,GAAsB,CAACr5F,SAAUA,EAAUs5F,eAAgBF,IAH1D,IAIX,CAEO,SAASC,IAAuB,SACrCr5F,EAAQ,eACRs5F,IAKA,MAAM,EAAE/3K,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KAEf7X,ECnDD,SAAuBzmB,GAC5B,MAAM,IAAE+9B,GAAQ/9B,EAEVymB,EAAOyd,GAAQ,CAAEC,oBAAoB,IACrCqW,GAAe7qD,EAAAA,EAAAA,QAA0C,CAAE+O,eAAWpjB,IAEtE2/D,EAAU3R,KACV9B,GAAWiE,EAAAA,GAAAA,IAA2B1N,EAAKkd,EAASzR,KACpD,KAAE3vC,EAAI,OAAEiyC,GAAWtE,EACnB0H,GAAUz5D,EAAAA,EAAAA,cAAY4S,gBACpByjD,IAASjmC,SAAQ,QAAS,GAC/B,CAACimC,KACJL,EAAAA,GAAAA,IAA2B1N,EAAKkd,EAASzR,IAGzC,IAAI7iD,EAA2B6gD,EAAS7gD,MACpCA,aAAiBqhD,IACM,MAArBrhD,EAAMshD,YAAsBxhB,EAAK3X,KAAO,IAC1C2X,EAAKzX,QAAQ,GACbroB,OAAQrL,GAQZ,MAAMnB,EAAYq4B,GAAkB3Y,GAAM6iF,MAAQ,IAJlD,SAAoB1mF,GAClB,OAAOA,GAAMinF,QACf,IAIIpjF,QAAsBve,IAAdue,EAAK6iF,KACfliC,EAAazqD,QAAQ2O,UAAY7E,EAAK6iF,KAAKv/F,OAClC0c,QAAsBve,IAAdue,EAAK6iF,OACtBliC,EAAazqD,QAAQ2O,UAAY,GAGnC,MAAMw8C,GAAwBzlE,EAAAA,EAAAA,cAC3Bg9B,IACCt4B,EAAUmkB,YAAYmU,GACjBy8B,GAAS,GAEhB,CAACA,EAAS/0D,IAGNghE,GAA0B1lE,EAAAA,EAAAA,cAC7Bg9B,IACCt4B,EAAUk5B,cAAcZ,GACnBy8B,GAAS,GAEhB,CAACA,EAAS/0D,KAGLs4B,EAAOqB,IAAYz+B,EAAAA,EAAAA,eAA6BiG,IACvD5F,EAAAA,EAAAA,YAAU,KACRo+B,EAASja,GAAM6iF,KAAK,GACnB,CAAC7iF,GAAM6iF,OAEV,MAAM7mE,GAAapgC,EAAAA,EAAAA,cAChBugB,IACC,IAAKyc,EAAO,OACZ,MAAM9xB,EAAQ8xB,GAAOptB,WAAWgC,GAAMA,EAAE41F,WAAajnF,EAAKinF,WAC1D,IAAe,IAAXt8F,EAAc,CAChB,MAAMm1B,EAAW,IAAIrD,GACrBqD,EAASn1B,GAASqV,EAClB8d,EAASgC,EACX,IAEF,CAACrD,IAGH,OAAOz0B,EAAAA,EAAAA,UAAQ,KACN,CACL2I,QACAuoD,UACAxwC,UAAW87C,EAAazqD,QAAQ2O,UAChCL,UAAWoU,KACRgU,KACAtsC,EACH+gE,wBACAC,0BACAtlC,gBAED,CACDlvB,EACA8rB,EACAy8B,EACAgM,EACA/gE,EACAghE,EACAtlC,EACA4Q,GAEJ,CDxCeoyI,CAAc,CACzB96H,IACoB,iBAAlBuhC,EAASliF,KACLguD,EAAM,kBAAkBk0B,EAASxoF,GAAGqhB,0BACpCizC,EAAM,2BAA2Bk0B,EAASxoF,GAAGqhB,4BAG/C2gK,EAAkBx5F,EAASxqB,eAAe6iC,kBAAkB5G,KAC5DgoF,EAAkBz5F,EAASxqB,eAAe6iC,kBAAkB3yC,OAE5DnpB,EAAe87I,GAAiB,CACpC11E,aAAc3iB,EAASliF,KACvBtG,GAAIwoF,EAASxoF,GAAGqhB,aAEZmX,EElED,SACLmX,EACAw7D,GAEA,MAAM,EAAEphG,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,MACf,GAAExnD,IAAOkgE,EAAAA,GAAAA,KACTgiH,EAAkBhB,GAAsBvxI,EAAK00B,wBAAyB8mC,GAEtEg3E,EAAiC,iBAAjBh3E,GAEhB,wBAAEi3E,GCxBH,SAAkCD,GACvC,MAAM,IAAQn4K,EAAAA,EAAAA,MACRk9C,GAASgZ,EAAAA,GAAAA,KACT9N,EAAcyT,KACdulB,EAAW92B,EAAM,IAAI6tH,EAAgB,gBAAkB,4BAA4Bj7H,EAAOlnD,IAAIqhB,YAAc,kBAC5G3G,GAAUxT,EAAAA,EAAAA,UACd,IAAM,CACJ,CACEyc,OAAQ5Z,EAAE,QACV4b,KAAOigF,GAAeA,EAAK+H,eAE7B,CACEhqF,OAAQ5Z,EAAE,YACV4b,KAAOigF,GAAeA,EAAK14F,WAG/B,CAACnD,KAGG,KAAEgZ,EAAI,QAAEq1C,GAAYU,GAAesyB,IACjC5pD,gBAAiB4gJ,GAA4BzhJ,GAAe,CAClE3gC,GAAI,4BAA4BknD,EAAOlnD,KACvCE,MAAO,wBACPue,YAAa1U,EAAE,+EACf4xB,MAAO5Y,GAAM6iF,MAAQ,GACrBhqE,MAAQgqE,GAAeA,EAAK+H,cAC5BjzF,UACAwnB,eAAe,EACfX,SAAW5F,IACJ,iBACSy2B,EAAYg5B,EAAU,IAC7BroE,EACH6iF,KAAMjqE,IAERy8B,GACD,EANI,EAMD,IAIR,OAAOlxD,EAAAA,EAAAA,UACL,KAAM,CACJk7K,6BAEF,CAACA,GAEL,CDrBsCC,CAAyBF,IAErDp/J,KAAMmG,GAAYu9C,GACxBzmE,EACIs0D,EAAM,IAAI6tH,EAAgB,gBAAkB,4BAA4BniL,EAAGqhB,cAC3E,IAEAihK,EAAkBz6K,QAAQqhB,GAAWA,EAAQ/iB,SAAW+iB,EAAQ/iB,QAAa,KAEnF,OAAOe,EAAAA,EAAAA,UACL,IAAM,CACJ,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVvH,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,0BACTnG,WAAY0+K,OACR99K,EACAuF,EACE,oIAENP,QAASA,KACPq0D,EACEskH,EAAgB1kH,GAAS8kH,qBAAuB9kH,GAAS+kH,6BACzD,CACEt7H,OAAQ,CAAElnD,OAEb,GAGL,CACEsG,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/ByC,KAAM4sF,GAAAA,GACNxyF,MAAO4J,EAAE,yBACTP,QAAS44K,EACTx+K,WAAY0+K,OACR99K,EACAuF,EACE,qIAGR,CAAEzD,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,2BACTP,QAAS04K,EACT/3K,UAAU,EACVvG,WAAY0+K,OACR99K,EACAuF,EACE,6IAIV,CAACA,EAAGq4K,EAAyBF,EAAiBI,EAAiBtiL,EAAI69D,EAAcskH,GAErF,CFNyBM,CAAwB9yI,EAAM64C,EAASliF,MACxD47K,EAAkBhB,GAAsBvxI,EAAK00B,wBAAyBmkB,EAASliF,MAE/E0+B,GAAa99B,EAAAA,EAAAA,UACjB,IAAM,CACJ,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/B8J,UAAU,EACVvH,KAAM84D,GAAAA,GACN1+D,MAAO4J,EAAE,wBACTnG,WAAYA,IACVo+K,OAAkBx9K,EAAYuF,EAAE,qDAClCP,QAAU6qG,IACRx2C,EACoB,iBAAlB2qB,EAASliF,KACLm3D,GAASsjH,sBACTtjH,GAASujH,8BACb,CACE95H,OAAQ,CAAElnD,GAAIwoF,EAASxoF,GAAGqhB,YAC1B8lC,MAAO,CAAE85H,kBAAmB5sE,EAASlO,WAExC,GAGL,CACE7/F,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,0BACTnG,WAAYA,IACVq+K,OAAkBz9K,EAAYuF,EAAE,uDAClCP,QAAU6qG,GAAa6tE,EAAgB,CAAC7tE,IACxClqG,UAAU,KAGd,CAACJ,EAAGi4K,EAAiBC,EAAiBC,EAAiBrkH,EAAc2qB,EAASxoF,GAAIwoF,EAASliF,OAG7F,OACEzD,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,mBACHw4B,eAAgBA,EAChBuM,aAAcA,EACdC,WAAYA,EACZ8C,gBAAiB/9B,EAAE,wBACnBg+B,gBAEMh+B,EADJi4K,EACM,2CACA,kDAERh6I,sBAEMj+B,EADJi4K,EACM,yDAEA,yFAGR73I,eAAgB63I,OAAkBx9K,EAAYo2B,GAAAA,GAC9CuN,qBAAsB65I,EAAkBj4K,EAAE,+BAA4BvF,EACtE4jC,qBAAsB45I,GAAkBn/K,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,SAAMn2B,EAC7D0jC,sBACE85I,EACI,KACEnkH,EACoB,iBAAlB2qB,EAASliF,KACLm3D,GAAS8kH,qBACT9kH,GAAS+kH,6BACb,CACEt7H,OAAQ,CAAElnD,GAAIwoF,EAASxoF,GAAGqhB,aAE7B,OAEH7c,KAEFmrC,EACJzW,gBACEr2B,EAAAA,EAAAA,KAAC6+K,GAAY,CACXvhL,MAAO4J,EAAE,kBACTxF,SAAUwF,EAAE,mBACZ/J,GAAG,gBACH,UAAQ,gBACR,aAAW,iBACXkF,cAAY,EACZd,UAAWokF,EAAS6jB,iBAAkB,EACtClnG,SAAUA,CAACwK,EAAGwxB,KAAiB2gJ,EAAe3gJ,EAAS,KAKjE,C,gBIzJA,MAAMuhJ,IAAmBn9K,EAAAA,EAAAA,IAAOsF,EAAAA,GAAQpF,WAAA,CAAAC,YAAA,oBAAfH,CAAe,iGAiBjC,SAASo9K,GAAoBhjL,GAClC,MAAM,IAAQqK,EAAAA,EAAAA,MACR2xD,EAASvC,MAET,KAAE9yD,GAAS3G,EAEXijL,EAAUlnH,GAAcC,EAAQ,sBAEhCknH,EAAiB94K,EAAE,kCACnB+4K,EAAqB/4K,EAAE,iCACvBg5K,EAAkBh5K,EAAE,mBAEpB,QAAEwpC,EAAO,SAAE3qB,EAAQ,SAAE2jB,EAAQ,YAAEqE,EAAW,cAAE06D,IAAkB73D,EAAAA,GAAAA,OAE9D,OAAE6gF,EAAM,OAAE0uD,EAAM,OAAE3uK,EAAM,OAAE2F,EAAM,QAAExc,IAAYylL,EAAAA,GAAAA,IAAc,CAChE1vI,UACAtzC,KAAM,qBAGFyoE,EAAU4rD,EACV4uD,GAAkBl+G,EAAAA,GAAAA,IAAS,CAAE/kE,KAAM,sBAA4C,GAE/EkjL,GAAan+G,EAAAA,GAAAA,IAAS,CAAE/kE,KAAM,gBAA8B,GAE5DmjL,EAAeF,EAAet5K,KAAK++D,GAAWA,EAAO1oE,OAErDojL,EAAYA,KACZF,EAAU98K,QAAU,EACtBkmC,EAAS,aAAc,CAAEr8B,QAAS2yK,IAIhCO,EAAah4K,SAAS+3K,GACxB52I,EAAS,aAAc,CAAEr8B,QAAS4yK,KAIpCE,EAAO,CAAE/iL,KAAMkjL,EAAWj2K,SAAS,IACnC0b,EAAS,aAAc,IACvBgoB,EAAY,cAAa,EAU3B,OAPAhyC,EAAAA,EAAAA,YAAU,KACK,mBAAT0H,GAA6BoiE,EAAQ1nE,QAAQywF,GAAMA,EAAEvkF,UAAS7G,OAAS,GACzE7I,EAAQ0lL,EAAet5K,KAAK++D,IAAM,IAAWA,EAAQz7D,SAAS,MAAU,GAGzE,CAAC5G,KAGF6B,EAAAA,EAAAA,MAACmyC,GAAa,CACZG,QAAS,0BACTt6C,MAAO4J,EAAE,2BACTiqC,WACE7rC,EAAAA,EAAAA,MAACw0G,EAAAA,GAAK,CAAA55G,SAAA,CAAC,eACQ,KACbF,EAAAA,EAAAA,KAAA,KAAG+H,KAAMg4K,EAASpkJ,OAAO,SAAS87C,IAAI,aAAYv3E,SAAC,kBAE9C,IAAI,2BAIb8sB,YAAY,EAAK9sB,SAAA,EAEjBoF,EAAAA,EAAAA,MAACyqC,GAAAA,EAAI,CAAClnC,WAAS,EAAA3I,SAAA,EACbF,EAAAA,EAAAA,KAAComE,GAAAA,EAAQ,CAACh0D,KAAM,GAAGlS,UACjBF,EAAAA,EAAAA,KAAC8wC,GAAAA,GAAU,CACT1zC,KAAM,aACNszC,QAASA,EACTvjC,OAAQA,EAAG6jC,QAAOC,YAAcjkC,aAC9B1H,EAAAA,EAAAA,MAAC0T,GAAAA,EAAK,CAACnQ,WAAS,EAAA3I,SAAA,EACdF,EAAAA,EAAAA,KAAC08C,GAAAA,GAAS,CACRv/C,GAAI,mBACJ,UAAS,mBACT,aAAY+J,EAAE,uBACV8pC,EACJ5qB,YAAalf,EAAE,gCACfkoB,QAAU9e,IACM,UAAVA,EAAElE,KACJo0K,GACF,IAGHxzK,GAAOK,UACNrN,EAAAA,EAAAA,KAACg4C,GAAAA,EAAc,CAAA93C,UACbF,EAAAA,EAAAA,KAACi4C,GAAAA,EAAU,CAAA/3C,UACTF,EAAAA,EAAAA,KAACk4C,GAAAA,EAAc,CAAC70C,QAAQ,QAAOnD,SAAE8M,EAAMK,sBAQrDrN,EAAAA,EAAAA,KAAComE,GAAAA,EAAQ,CAACh0D,KAAM,EAAElS,UAChBF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACL9B,KAAK,SACLJ,QAAQ,QACR,aAAY6D,EAAE,cACd,UAAS,aACTP,QAAS65K,EACTz/K,WAAYw/K,EAAah4K,SAAS+3K,IAAoC,IAAtBA,GAAW98K,OAAatD,UAExEF,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,YAKrB93B,EAAAA,EAAAA,KAAC6/K,GAAgB,IAEhBh6G,EAAQ9+D,KAAI,CAAC++D,EAAQ9+D,KACpB1B,EAAAA,EAAAA,MAAC6E,EAAAA,EAAI,CACHs2K,UAAW,CAAEp2K,QAAS,iBACtBq2K,aAAc,CAAEr2K,QAAS,4BAEzBxI,MAAO,CAAEumB,aAAc,mCAAoCloB,SAAA,EAE3DF,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAC6yK,KAAM,CAAEhzK,QAAS,UAAWnK,UACpCF,EAAAA,EAAAA,KAACgZ,GAAAA,EAAK,CAAA9Y,UACJF,EAAAA,EAAAA,KAAC8wC,GAAAA,GAAU,CACT1zC,KAAM,oBAAoB4J,UAC1B0pC,QAASA,EACTY,MAAO,CACLb,SAAU,CACRI,SAAW9mC,IACT,MAAM,UAAE++F,GAAcL,EAAc,oBAAoBzhG,WAExD,OAAI+C,EAAEvG,QAAU,EAAUw8K,EAEtBl3E,GAAay3E,EAAapiL,QAAQwiL,GAAOA,IAAO52K,IAAGvG,OAAS,EACvDy8K,OADT,CAC2B,IAIjC9yK,OAAQA,EAAG6jC,QAAOC,YAAcjkC,aAC9B1H,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAC08C,GAAAA,GAAS,CACR9B,UAAW5tC,GAAOK,QAAUuzK,GAAAA,GAAiB5zK,WAAQrL,EACrDxE,GAAI,iBAAiB6J,IACrB,UAAS,iBAAiBA,IAC1B,aAAYE,EAAE,oBACV8pC,IAELhkC,GAAOK,UACNrN,EAAAA,EAAAA,KAACg4C,GAAAA,EAAc,CAAA93C,UACbF,EAAAA,EAAAA,KAACi4C,GAAAA,EAAU,CAAA/3C,UACTF,EAAAA,EAAAA,KAACk4C,GAAAA,EAAc,CAAC70C,QAAQ,QAAOnD,SAAE8M,EAAMK,wBASvDrN,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAAtK,UACPoF,EAAAA,EAAAA,MAAC6E,EAAAA,EAAI,CAACtI,MAAO,CAAE4T,SAAU,SAAW6C,IAAK,CAAEjO,QAAS,WAAYnK,SAAA,EAC9DF,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAAtK,UACPF,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CACL9B,KAAK,SACLJ,QAAQ,QACR,aAAY6D,EAAE,iBACd,UAAS,iBAAiBF,IAC1BL,QAASA,KACP6K,EAAOxK,EAAM,EACb9G,UAEFF,EAAAA,EAAAA,KAACsgE,GAAAA,GAAS,SAGdtgE,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAAtK,UACPF,EAAAA,EAAAA,KAAC8wC,GAAAA,GAAU,CACTJ,QAASA,EACTtzC,KAAM,oBAAoB4J,aAC1BmG,OAAQA,EAAG6jC,YACThxC,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,SACY,mBAATuD,GACCzD,EAAAA,EAAAA,KAAC+sI,GAAAA,EAAK,IACA/7F,EACJ,UAAS,gBAAgBhqC,IACzB7J,GAAI,gBAAgB6J,IACpB1J,MAAO4iL,EACP59K,SAAUA,KACR3H,EACE0lL,EAAet5K,KAAI,CAAC++D,EAAQp4D,KAAM,IAC7Bo4D,EACHz7D,QAASrD,IAAU0G,MAEtB,EAEH/G,QAASA,MACgB,IAAnBm/D,EAAOz7D,SACT8M,EAAOnQ,EAAO,IAAK8+D,EAAQz7D,SAAS,GAAQ,EAEhD9I,UAAWukE,EAAOz7D,QAClBtJ,WAAYs/K,EAAer5K,IAAQ5J,KAAKoG,QAAU,KAGpDxD,EAAAA,EAAAA,KAACqhC,GAAAA,EAAQ,IACH2P,EACJ,UAAS,mBAAmBhqC,IAC5B7J,GAAI,mBAAmB6J,IACvB1J,MAAO4iL,EACP3+K,UAAWukE,EAAOz7D,QAClB1D,QAASA,IAAMwQ,EAAOnQ,EAAO,IAAK8+D,EAAQz7D,SAAUy7D,EAAOz7D,UAC3DtJ,WAAYs/K,EAAer5K,IAAQ5J,KAAKoG,QAAU,iBA3F7DsiE,EAAO3oE,QAwGtB,CCrOA,MAAM0jL,GAAa,EACbC,GAAa,KAEZ,SAASC,IAAuB,aAAExlD,IACvC,MAAOh2E,GAAgBD,KAEjB07H,EAAmBz7H,EAAauF,IAAI,qBAE1C,OACE9qD,EAAAA,EAAAA,KAACihL,GAAkB,CACjBh+C,KAAK,OACL1H,aAAcA,EACdylD,iBAAkBA,GAGxB,CAEO,SAASE,IAAsB,aAAE3lD,IACtC,OAAOv7H,EAAAA,EAAAA,KAACihL,GAAkB,CAACh+C,KAAK,MAAM1H,aAAcA,GACtD,CAYO,SAAS0lD,GAAmBnkL,GACjC,MAAM,IAAQqK,EAAAA,EAAAA,OACR,GAAEhK,IAAOkgE,EAAAA,GAAAA,KACTrC,EAAerW,KACf4K,EAAcyT,MAEd,aAAEu4D,EAAY,KAAE0H,EAAI,iBAAE+9C,GAAqBlkL,EAE3CqkL,EAA0BA,IAC9BnmH,EACmB,kBAAjBugE,EACI3gE,GAAS4+G,kBACT5+G,GAASw/G,0BACb,CAAE/1H,OAAQ,CAAElnD,QAGX6jL,GAA6B,QAAT/9C,GAAgBk+C,IAEzC,MAAM,MACJn0K,EACAkT,KAAMsiF,EAAM,UACZp5E,EAAS,QACTmsC,GACEU,GAAexE,EAAM,IAAI8pE,KAAgBp+H,GAAM,mBAEnD,GAAI6P,EAAO,OAAOhN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,IAEzD,GAAInsC,EAAW,OAAOppB,EAAAA,EAAAA,KAACkqD,GAAW,IAElC,IAAIsnD,EAOJ,GANa,SAATyxB,GAAmB+9C,IACrBxvE,EAAWhP,GAAQO,KAAKv+F,MAAM6+F,GAAMA,EAAEC,WAAa09E,IAE9CxvE,GAAU2vE,KAGJ,SAATl+C,IAAoBzxB,EAAU,OAAO,KAEzC,MAAM4vE,EAAiB39K,GAA0B,gBAATA,GAAmC,mBAATA,EAE5D49K,EAAwBA,CAAC7vE,EAAgB9nE,KAC7CA,EACExiC,EAAE,yEAA0E,CAC1EsqG,SAAUA,EAASlO,WAEtB,EAGH,IAAIg+E,EACJ,GAAI9vE,GAAY4vE,EAAc5vE,EAAS/tG,MAAO,CAC5C,MAAMoiE,EAAU5sD,MAAMC,QAAQs4F,EAAS3rC,SACnC2rC,EAAS3rC,QACT2rC,EAAS3rC,QAAQr+D,MAAM,MACrB09E,EAAWjsE,MAAMC,QAAQs4F,GAAUnnG,SACrCmnG,EAASnnG,QACTmnG,EAASnnG,QAAQmU,WAAWhX,MAAM,MAEtC85K,EAAmBz7G,GAAS9+D,KAAI,CAAC6nF,EAAGlhF,KAAM,CACxCtQ,KAAMwxF,EACNvkF,QAAS66E,GAAU38E,SAASqmF,KAAM,EAClCzxF,GAAIuQ,EAAE8Q,cAEV,CAEA,MAAMsxF,EAA0B,CAC9BhF,cAAe0G,GAAU1G,eAAiB,GAC1CC,qBAAsByG,GAAUzG,sBAAwB,GACxDl6D,UAAU2gE,GAAWA,GAAU3gE,SAC/BptC,KAAM+tG,GAAU/tG,MAAQ,OACxB6/F,SAAUkO,GAAUlO,UAAY,GAChCzjE,IAAK2xE,GAAU3xE,KAAOghJ,GACtBltK,IAAK69F,GAAU79F,KAAOmtK,GACtBz2K,QAASmnG,GAAUnnG,SAAW,GAC9Bw7D,QAAS2rC,GAAU3rC,SAAW,GAC9By7G,mBACAC,cAAe/vE,GAoGjB,OACExxG,EAAAA,EAAAA,KAACijE,GAAW,CACVvkC,SAnG0EhwB,MAC5E8yK,EACA93I,EACAiF,KAEA,MAAMm0D,EAAgB,CACpB1lG,KAAMolG,GAAQplG,MAAQ,GACtBwe,YAAa4mF,GAAQ5mF,aAAe,GACpCmnF,KAAMP,GAAQO,MAAQ,IAGxB,GACE,CAAC,iBAAkB,eAAex6F,SAASi5K,EAAY/9K,QACtD+9K,EAAYF,kBAAkB99K,OAK/B,YAHAmrC,EAAc,aAAc,CAC1BthC,QAASnG,CAAC,kDAKd,MAAM0mB,EAAe4zJ,EAAYn3K,QACR,YAArBm3K,EAAY/9K,KACVjJ,OAAOgnL,EAAYn3K,SACE,UAArBm3K,EAAY/9K,KACVqK,WAAW0zK,EAAYn3K,QAAQmU,YAC/BgjK,GAAan3K,SAASmU,WAC1B,GAEJ,IAAIgzF,EAAiB,CACnB79F,IAAKnZ,OAAOgnL,EAAY7tK,KACxBksB,IAAKrlC,OAAOgnL,EAAY3hJ,KACxB0hJ,aAAcC,EAAYD,aAC1B99K,KAAM+9K,EAAY/9K,KAClB4G,QAASujB,EACTijB,SAAU2wI,EAAY3wI,SACtByyD,SAAUk+E,EAAYl+E,SACtBwH,cAAe02E,EAAY12E,cAC3BC,qBAAsBy2E,EAAYz2E,qBAClCllC,QAAS27G,EAAY37G,SAGvB,MAAM47G,EAAc3+E,EAAcC,KAAKp7E,MAAM07E,GAAMA,EAAEC,WAAak+E,EAAYl+E,WAE9E,IAAIi7E,EAEJ,GAAa,QAATt7C,GAAkBw+C,EAEpB,YADAJ,EAAsB7vE,EAAU9nE,GAIlC,GAAIzwB,MAAMC,QAAQsoK,EAAYF,mBAAqBF,EAAc5vE,EAAS/tG,MAAO,CAC/E,MAAMoiE,EAAU27G,EAAYF,kBAAkBv6K,KAAK++D,GAAWA,EAAO1oE,QAAS,GAExE8nF,EACJs8F,EAAYF,kBACRnjL,QAAQ2nE,GAAWA,EAAOz7D,UAC3BtD,KAAK++D,GAAWA,EAAO1oE,OACvBqK,KAAK,OAAS,GAEnB+pG,EAAW,IAAKA,EAAU3rC,UAASx7D,QAAS66E,EAC9C,CAEA,GAAa,QAAT+9C,EACFs7C,EAAY,IAAIz7E,EAAcC,KAAMyO,OAC/B,CACL+sE,EAAY,IAAIz7E,EAAcC,MAE9B,MAAM2+E,EAAwBnD,EAAU7yK,WACrC8lG,GAAaA,EAASlO,WAAawM,EAAcxM,WAGpD,GAAIwM,EAAcxM,WAAakO,EAASlO,UAAYm+E,EAElD,YADAJ,EAAsB7vE,EAAU9nE,IAIH,IAA3Bg4I,GACFh4I,EAASxiC,EAAE,+BAGbq3K,EAAUmD,GAAyBlwE,CACrC,CAEA,MAAMmwE,EAAmB,IACpB7+E,EACHC,KAAMw7E,GAGR,UACQhvH,EAAYkC,EAAM,IAAI8pE,KAAgBp+H,GAAM,kBAAmBwkL,GACrER,GACF,CAAE,MAAOryK,GACP46B,EAASxiC,CAAC,wCACZ,GAMEsmC,SAAUA,IAAM2zI,IAChB9hL,WAA6B6H,EAAR,QAAT+7H,EAAmB,yBAA8B,wBAC7Dr1G,aAAckiF,EACdpgE,sBAAoB,EAAAxvC,UAEpBF,EAAAA,EAAAA,KAAC4hL,GAAoB,KAG3B,CAEA,SAASA,KACP,MAAM,EAAE16K,IAAMC,EAAAA,EAAAA,MAER06K,GAAa1/G,EAAAA,GAAAA,IAAS,CAAE/kE,KAAM,SAEpC,OACEkI,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBj/C,GAAG,gBACHC,KAAK,gBACLqG,KAAK,OACLnG,MAAO4J,CAAC,WACR8lB,YAAU,KAEZhtB,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBj/C,GAAG,uBACHC,KAAK,uBACLqG,KAAK,OACLnG,MAAO4J,CAAC,iBAEVlH,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBj/C,GAAG,oBACHC,KAAK,WACLqG,KAAK,OACLnG,MAAO4J,CAAC,uBACRupC,SAAW6yD,IACT,GAAI,KAAK50B,KAAK40B,GACZ,OAAOp8F,CAAC,qCAEM,EAElB8lB,YAAU,EACVmkB,UAAWjqC,CAAC,iLAGdlH,EAAAA,EAAAA,KAACs6C,GAAc,CACbl9C,KAAK,OACLD,GAAG,gBACH,UAAQ,gBACRG,MAAO4J,EAAE,eACTqzC,gBAAiBrzC,EAAE,qBACnBmf,QAAS,CACP,CAAE3rB,MAAO,OAAQ4C,MAAO4J,EAAE,SAC1B,CAAExM,MAAO,WAAY4C,MAAO4J,EAAE,aAC9B,CAAExM,MAAO,WAAY4C,MAAO4J,EAAE,aAC9B,CAAExM,MAAO,iBAAkB4C,MAAO4J,EAAE,oCACpC,CAAExM,MAAO,cAAe4C,MAAO4J,EAAE,sCACjC,CAAExM,MAAO,UAAW4C,MAAO4J,EAAE,YAC7B,CAAExM,MAAO,QAAS4C,MAAO4J,EAAE,WAE7B8lB,YAAU,EACVmkB,UAAWjqC,CAAC,2KAGdlH,EAAAA,EAAAA,KAACy3C,GAAa,CAACn6C,MAAO4J,EAAE,WAAWhH,UACjCF,EAAAA,EAAAA,KAACuwC,GAAgB,CACfpzC,GAAG,oBACH,UAAQ,oBACRG,MAAO4J,CAAC,WACR9J,KAAK,eAIRykL,IAAc7hL,EAAAA,EAAAA,KAAC8hL,GAAkB,CAACC,OAAQF,MAGjD,CAEA,SAASC,IAAmB,OAAEC,IAC5B,MAAM,IAAQ56K,EAAAA,EAAAA,OAER,SAAE4e,EAAQ,MAAEm8E,IAAUtxD,EAAAA,GAAAA,OAE5B70C,EAAAA,EAAAA,YAAU,KACRgqB,EAAS,MAAO86J,IAChB96J,EAAS,MAAO+6J,IAChB5+E,OAAMvgG,EAAW,CAAEqgL,YAAY,EAAMC,YAAY,GAAQ,GACxD,CAACF,EAAQh8J,EAAUm8E,IAEtB,MAAMriE,EAAMrlC,QAAO2nE,EAAAA,GAAAA,IAAS,CAAE/kE,KAAM,SAC9BuW,EAAMnZ,QAAO2nE,EAAAA,GAAAA,IAAS,CAAE/kE,KAAM,SAEpC,OACEkI,EAAAA,EAAAA,MAACygE,GAAe,CAAA7lE,SAAA,CACb,CAAC,OAAQ,WAAY,YAAYqI,SAASw5K,KACzCz8K,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAACj/C,GAAG,eAAeC,KAAK,MAAMqG,KAAK,SAASnG,MAAO4J,CAAC,oBACtElH,EAAAA,EAAAA,KAACo8C,GAAiB,CAACj/C,GAAG,eAAeC,KAAK,MAAMqG,KAAK,SAASnG,MAAO4J,CAAC,sBAGzE,CAAC,UAAW,SAASqB,SAASw5K,KAC7Bz8K,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAACj/C,GAAG,eAAeC,KAAK,MAAMqG,KAAK,SAASnG,MAAO4J,CAAC,aACtElH,EAAAA,EAAAA,KAACo8C,GAAiB,CAACj/C,GAAG,eAAeC,KAAK,MAAMqG,KAAK,SAASnG,MAAO4J,CAAC,eAGzE,CAAC,OAAQ,UAAW,SAASqB,SAASw5K,KACrC/hL,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBj/C,GAAG,mBACHC,KAAK,UACLyiC,IAAKA,EACLlsB,IAAKA,EACLunC,UAAWvnC,EACXsnC,UAAWpb,EACXp8B,KAAiB,SAAXs+K,EAAoB,OAAS,SACnCzkL,MAAO4J,CAAC,iBACRupC,SAAW/1C,IACT,GAAe,YAAXqnL,EAAsB,CACxB,MAAM5hC,EAAMryI,WAAWpT,GACvB,OAAKF,OAAO8Q,UAAU60I,IAAQ,SAASzxE,KAAKh0E,GACnCwM,CAAC,sCAEV,CACF,KAIM,aAAX66K,IACC/hL,EAAAA,EAAAA,KAACg7C,GAAgB,CAAC79C,GAAG,mBAAmBC,KAAK,UAAUE,MAAO4J,CAAC,mBAErD,aAAX66K,IACC/hL,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBj/C,GAAG,mBACHC,KAAK,UACLE,MAAO4J,CAAC,iBACRzD,KAAK,aAGR,CAAC,iBAAkB,eAAe8E,SAASw5K,KAC1C/hL,EAAAA,EAAAA,KAAC8/K,GAAmB,CAACr8K,KAAMs+K,MAInC,CCzWA,MAAMl3D,GAAW,CACfq3D,oBAAqB,uBACrBC,cAAe,iBACfC,WAAY,eAGP,SAASC,KACd,MAAM,EAAEn7K,IAAMC,EAAAA,EAAAA,MACR6zD,EAAerW,KACfvvC,GAAWC,EAAAA,GAAAA,MACXk6C,EAAcyT,KAqBdpe,EAAaT,KAEnB,OACE7+C,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,eACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,SAAUY,GAAI88C,EAAWgW,GAAS0nH,QAC7C,CAAEhlL,MAAO4J,EAAE,oBAGflH,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,eACdw3B,SAjC8ChwB,MAClD6zK,EACA74I,EACAiF,KAEA,MAAM,SAAE6zI,EAAQ,gBAAEC,KAAoBpzG,GAASkzG,EAG/C,GAFAlzG,EAAKtP,aAAeyiH,IAAa33D,GAASq3D,oBAC1C7yG,EAAK2C,kBAAoBwwG,IAAa33D,GAASs3D,cAC3CM,IAAoBpzG,EAAK+0F,SAE3B,OADAz1H,EAAc,kBAAmB,CAAEthC,QAASnG,EAAE,+BACvC,EAET,MAAMw7K,QAAgBnzH,EACpBkC,EAAM,kBAAkB4d,EAAKe,aAAc5xD,oBAC3C6wD,GAEFrU,EAAaJ,GAASiB,YAAa,CAAExX,OAAQ,CAAElnD,GAAIulL,EAAQvlL,KAAO,EAkB9DM,WAAYyJ,EAAE,UACdsmC,SAhBWA,IAAMp4B,GAAU,GAiB3BwY,aAAc,CAAE40J,SAAU33D,GAASu3D,YAAaliL,UAEhDF,EAAAA,EAAAA,KAAC2iL,GAAU,CAAC1/C,KAAK,eAIzB,CAEO,SAAS2/C,KACd,MAAM,EAAE17K,IAAMC,EAAAA,EAAAA,MACRiO,GAAWC,EAAAA,GAAAA,MACX2lD,EAAerW,KACfN,GAASgZ,EAAAA,GAAAA,KACTlgE,EAAK3C,OAAO6pD,EAAOlnD,KACjB+iB,KAAMmvD,IAASvd,EAAAA,GAAAA,IAAgBL,EAAM,UAAUt0D,EAAGqhB,cAAe6wC,GAAYQ,IAoB/EjL,EAAaT,KAInB,IAAKkrB,EACH,OACErvE,EAAAA,EAAAA,KAACmhD,GAAU,CAAAjhD,UACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTL,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,SAAUY,GAAI88C,EAAWgW,GAAS0nH,QAC7C,CAAEhlL,MAAO4J,EAAE,mBAOrB,MAAM,SAAEk9J,KAAaye,GAAqBxzG,EACpCzhD,EAAoC,IACrCi1J,EACHL,SAAUnzG,EAAKtP,aACX8qD,GAASq3D,oBACT7yG,EAAK2C,kBACH64C,GAASs3D,cACTt3D,GAASu3D,YAEjB,OACE98K,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAOgyE,GAAMzT,SAAW10D,EAAE,oBAAqB,CAAE47K,SAAUzzG,GAAMzT,WAAc10D,EAAE,QACjFk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,SAAUY,GAAI88C,EAAWgW,GAAS0nH,QAC7C,CACEhlL,MAAO+xE,GAAMzT,SACT10D,EAAE,oBAAqB,CAAE47K,SAAUzzG,GAAMzT,WACzC10D,EAAE,aAIZlH,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,aACdw3B,SA3D8ChwB,MAClD6zK,EACA74I,EACAiF,KAEA,MAAM,SAAE6zI,EAAQ,gBAAEC,KAAoBpzG,GAASkzG,EAG/C,GAFAlzG,EAAKtP,aAAeyiH,IAAa33D,GAASq3D,oBAC1C7yG,EAAK2C,kBAAoBwwG,IAAa33D,GAASs3D,cAC3C9yG,EAAK+0F,UACHqe,IAAoBpzG,EAAK+0F,SAE3B,OADAz1H,EAAc,kBAAmB,CAAEthC,QAASnG,EAAE,+BACvC,EAGX,MAAMw7K,QAAgBlzH,GAAsBiC,EAAM,UAAUt0D,EAAGqhB,cAAe6wD,GAC9ErU,EAAaJ,GAASiB,YAAa,CAAExX,OAAQ,CAAElnD,GAAIulL,EAAQvlL,KAAO,EA6C9DM,WAAYyJ,EAAE,UACdsmC,SAzCWA,IAAMp4B,GAAU,GA0C3BwY,aAAcA,EAAa1tB,UAE3BF,EAAAA,EAAAA,KAAC2iL,GAAU,CAAC1/C,KAAK,aAIzB,CAIA,SAAS0/C,GAAW7lL,GAClB,MAAM,KAAEmmI,GAASnmI,GACX,EAAEoK,IAAMC,EAAAA,EAAAA,MACd,OACE7B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,WACLE,MAAO4J,EAAE,YACTkf,YAAalf,EAAE,kBACf8lB,YAAU,EACVkuB,UAAW,IACXzK,SAAWmrB,IACT,IAAK,MAAMgzB,KAAKhzB,EACd,IACG,sEAAsErzD,SAASqmF,GAEhF,OAAO1nF,EAAE,oEAEb,KAGJlH,EAAAA,EAAAA,KAACm8D,GAAoB,CACnB/+D,KAAK,WACLE,MAAO4J,EAAE,aACTkf,YAAalf,EAAE,oBACfmf,QAAS,CACP,CACE/oB,MAAO4J,EAAE,wBACT0U,YAAa1U,EAAE,uEACfxM,MAAOmwH,GAASq3D,qBAElB,CACE5kL,MAAO4J,EAAE,kBACT0U,YAAa1U,EACX,oGAEFxM,MAAOmwH,GAASs3D,eAElB,CACE7kL,MAAO4J,EAAE,eACT0U,YAAa1U,EACX,iLAEFxM,MAAOmwH,GAASu3D,aAGpBp1J,YAAU,IAEF,WAATi2G,IACCjjI,EAAAA,EAAAA,KAACgtH,GAA0B,CAAa5vH,KAAK,eAAe4vB,YAAU,KAExE1nB,EAAAA,EAAAA,MAACygE,GAAe,CAAA7lE,SAAA,EACdF,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,WACLE,MAAO4J,EAAE,YACTkf,YAAalf,EAAE,kBACfzD,KAAK,WACLupB,WAAqB,WAATi2G,KAEdjjI,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,kBACLE,MAAO4J,EAAE,oBACTkf,YAAalf,EAAE,kBACfzD,KAAK,WACLupB,WAAqB,WAATi2G,QAGhBjjI,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,aACLE,MAAO4J,EAAE,cACTkf,YAAalf,EAAE,oBACfg0C,UAAW,OAEbl7C,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,YACLE,MAAO4J,EAAE,aACTkf,YAAalf,EAAE,mBACfg0C,UAAW,OAEbl7C,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,QACLE,MAAO4J,EAAE,SACTkf,YAAalf,EAAE,mBAIvB,CChPO,SAAS67K,GAAoEjmL,GAGlF,MAAM,KAAEuyE,GAASvyE,GACX,EAAEoK,IAAMC,EAAAA,EAAAA,MACd,OAAIkoE,EAAK2zG,SACAhjL,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAAnU,SAAEgH,EAAE,UAEfmoE,EAAK4zG,MAAQ5zG,EAAK4zG,KAAKz/K,OAAS,GAC3BxD,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAAnU,SAAEgH,EAAE,aAEZlH,EAAAA,EAAAA,KAACqU,GAAAA,EAAK,CAAAnU,SAAEgH,EAAE,UACnB,CCWO,SAAS20D,GAAuC/+D,GAerD,MAAM,IAAQqK,EAAAA,EAAAA,OACR,KAAEkoE,EAAI,cAAE/V,EAAa,QAAEjzC,GAAYvpB,EAEzC,OACEwI,EAAAA,EAAAA,MAACoc,GAAW,CAAAxhB,SAAA,EACVF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,cAAchH,SAAEmvE,EAAK07C,cAC1C/qH,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,aAAahH,SAAEmvE,EAAK27C,aACzChrH,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,SAAShH,SAAEmvE,EAAK47C,SACrCjrH,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,YAAYhH,SAAEmvE,EAAKzT,WACvCtC,GAAiBA,EAAc91D,OAAS,IACvCxD,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,eAAgB,CAAEoV,MAAOg9C,EAAc91D,SAAUtD,UACpEF,EAAAA,EAAAA,KAACiU,GAAU,CAACK,gBAAiBglD,MAGhC+V,EAAK6zG,aACJljL,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,cAAchH,UACjCF,EAAAA,EAAAA,KAACqS,GAAY,CAAC3X,MAAO20E,EAAK6zG,eAG7B78J,GAAS88J,eACRnjL,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,uBAAuBhH,UAC1CF,EAAAA,EAAAA,KAAC+iL,GAAkB,CAAC1zG,KAAMA,MAE3B,IACFhpD,GAAS+8J,eACRpjL,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,aAAahH,UAChCF,EAAAA,EAAAA,KAAC6qH,GAAQ,CAACx7C,KAAMA,OAGpBrvE,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,EAAE,WAAWhH,UAC9BF,EAAAA,EAAAA,KAACqS,GAAY,CACX3X,MAAO20E,EAAKhU,SAAWgU,EAAK6hG,YAAc7hG,EAAKK,aAAeL,EAAKI,gBAGrEJ,EAAKU,UAAYV,EAAK8hG,aAAe9hG,EAAKW,eAC1ChwE,EAAAA,EAAAA,KAACmsE,GAAsB,CACrB,UAAQ,WACRzxE,MAAO20E,EAAKU,UAAYV,EAAK8hG,aAAe9hG,EAAKW,gBAK3D,CCvEO,SAASqzG,KACd,MAAMh/H,GAASgZ,EAAAA,GAAAA,KACTzY,EAAaT,MACXjkC,KAAMmvD,GAAShZ,GAAoB5E,EAAM,SAAUpN,EAAOlnD,IAC5DqrF,EAAgBvyB,GACpBoZ,GAAMkI,SAASje,eAEXA,GAAgBj1D,EAAAA,EAAAA,UAKpB,IACImkF,GAAetoE,MAAMgyC,QAChBs2B,GAAetoE,MAAMgyC,QAAQnrD,KAAKqpE,IAA0B,CACjEhzE,KAAMgzE,EAAahzE,KACnBoX,KAAMowC,EAAWgW,GAAS62B,oBAAqB,CAC7CptC,OAAQ,CAAElnD,GAAIizE,EAAajzE,UAI1B,IACN,CAACynD,EAAY4jC,GAAetoE,MAAMgyC,UAErC,OAAKmd,GAKHrvE,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,UACEF,EAAAA,EAAAA,KAAC67D,GAAW,CACVwT,KAAMA,EACN/V,cAAeA,EACfjzC,QAAS,CAAE88J,cAAc,EAAMC,cAAc,OAR1C,IAYX,CC/CO,SAASE,GAAWxmL,GACzB,MAAM,MAAEO,EAAK,YAAEue,GAAgB9e,EAC/B,OACEkD,EAAAA,EAAAA,KAACoY,GAAAA,GAAW,CAAC/U,QAAQ,QAAOnD,UAC1BF,EAAAA,EAAAA,KAACmM,GAAAA,EAAK,CAACiH,UAAQ,EAACsgD,SAAO,EAACrwD,QAAQ,OAAOhG,MAAOA,EAAM6C,SACjD0b,IAAe5b,EAAAA,EAAAA,KAAA,KAAAE,SAAI0b,OAI5B,CCHO,SAAS2nK,KACd,MAAM,EAAEr8K,IAAMC,EAAAA,EAAAA,MACRq8K,EAA6Bh5D,KAC7Bj7D,EAAcyT,KAiCpB,OAhCkClnE,EAAAA,EAAAA,cAChC,CACE09D,EACAF,EACApwB,KAEAs6I,EAA2B,CACzBnmL,MAAO6J,EAAE,mCAAoC,CAC3CoV,MAAOg9C,EAAc91D,SAEvBu1B,MAAQq3C,GAA+BA,EAAajzE,GACpD27B,MAAOwgC,EACPtwB,cAAe,CACb,CAAEloB,OAAQ5Z,EAAE,gBAAiB4b,KAAOstD,GAA+BA,EAAahzE,OAElF6rC,SAAUv6B,MAAO0hE,EAA4B3kD,KAC3C,IAAK,MAAM4jD,KAAQ7V,QACXjK,EACJkC,EAAM,UAAU4d,EAAKlyE,GAAGqhB,oBACxB,CAAErhB,GAAIizE,EAAajV,eAAewvD,aAAaC,YAAYztH,GAAI6mF,cAAc,GAC7Ev4D,EAEJ,EAEFzsB,eAAgBkI,EAAE,sCAAuC,CACvDoV,MAAOg9C,EAAc91D,SAEvB0lC,cACA,GAEJ,CAACs6I,EAA4Bj0H,EAAaroD,GAG9C,CCrCA,SAASu8K,GAAoB3mL,GAI3B,MAAMszB,EAAiB67F,KACjB/pF,EAAe6pF,GAAwB,CAAEl2G,cAAc,IACvDi3B,EAAO6zB,GAAyB,CACpCvc,IAAKqN,EAAM,kBACXrhC,iBACA8R,eACAsoB,oBAAoB,IAEtB,OACExqD,EAAAA,EAAAA,KAACitC,GAAiB,IACZnwC,EACJszB,eAAgBA,EAChB8R,aAAcA,EACd4K,KAAMA,GAGZ,CAEO,SAAS42I,KACd,MAAO52K,EAAG8rB,GAAaD,KAOvB,OANgC78B,EAAAA,EAAAA,cAC9B,CAACuB,EAAeyI,KACd8yB,GAAU54B,EAAAA,EAAAA,KAACyjL,GAAmB,CAACpmL,MAAOA,EAAOyI,SAAUA,IAAa,GAEtE,CAAC8yB,GAGL,CChCO,SAAS+qJ,GAA+Bp3K,GAC7C,MAAM,IAAQpF,EAAAA,EAAAA,MACRy8K,EAAsBF,KACtBG,ECFD,WACL,MAAM,EAAE38K,IAAMC,EAAAA,EAAAA,MACRq8K,EAA6Bh5D,KAC7Bj7D,EAAcyT,KAkCpB,OAhC+BlnE,EAAAA,EAAAA,cAC7B,CACE09D,EACAF,EACApwB,KAEAs6I,EAA2B,CACzBnmL,MAAO6J,EAAE,gCAAiC,CACxCoV,MAAOg9C,EAAc91D,SAEvBu1B,MAAQq3C,GAA+BA,EAAajzE,GACpD27B,MAAOwgC,EACPtwB,cAAe,CACb,CAAEloB,OAAQ5Z,EAAE,gBAAiB4b,KAAOstD,GAA+BA,EAAahzE,OAElF6rC,SAAUv6B,MAAO0hE,EAA4B3kD,KAC3C,IAAK,MAAM4jD,KAAQ7V,QACXjK,EACJkC,EAAM,UAAU4d,EAAKlyE,GAAGqhB,oBACxB,CAAErhB,GAAIizE,EAAajV,eAAewvD,aAAaC,YAAYztH,IAC3DsuB,EAEJ,EAEFzsB,eAAgBkI,EAAE,kCAAmC,CACnDoV,MAAOg9C,EAAc91D,SAEvB0lC,cACA,GAEJ,CAACs6I,EAA4Bj0H,EAAaroD,GAG9C,CDpCkC48K,GAYhC,OAXoChoL,EAAAA,EAAAA,cACjC09D,IACCoqH,EACE18K,EAAE,6BAA8B,CAAEoV,MAAOk9C,EAAMh2D,UAC9C81D,IACCuqH,EAAwBrqH,EAAOF,EAAe/sD,EAAQ,GAEzD,GAEH,CAACs3K,EAAyBt3K,EAASq3K,EAAqB18K,GAG5D,CEEO,SAAS68K,KACd,MAAM1/H,GAASgZ,EAAAA,GAAAA,MACPn9C,KAAMmvD,GAAShZ,GAAoB5E,EAAM,SAAUpN,EAAOlnD,IAElE,OAAKkyE,GAGErvE,EAAAA,EAAAA,KAACgkL,GAAyB,CAAC30G,KAAMA,IAF/B,IAGX,CAEA,SAAS20G,GAA0BlnL,GACjC,MAAM,IAAQqK,EAAAA,EAAAA,OACR,KAAEkoE,GAASvyE,EACXszB,EAAiB67F,KACjB/pF,EAAe6pF,KAEfj/E,EAAO6zB,GAAyB,CACpCvc,IAAKqN,EAAM,UAAU4d,EAAKlyE,GAAGqhB,4BAC7B4R,iBACAo6B,oBAAoB,IAGhBy5H,EAA8BN,GAA+B72I,EAAKy0B,uBAClE2iH,EAA+BX,KAC/B5tJ,GAAiBtxB,EAAAA,EAAAA,UACrB,IAAM,CACJ,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVvH,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,8BACTP,QAASA,IAAMs9K,EAA4B,CAAC50G,KAE9C,CAAE5rE,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAM0mE,GAAAA,GACNtsE,MAAO4J,EAAE,mCACTP,QAASA,IACPu9K,EAA6B,CAAC70G,GAAOviC,EAAKhsC,cAAegsC,EAAK00B,yBAChEl6D,UAAU,KAGd,CACE48K,EACAD,EACA/8K,EACAmoE,EACAviC,EAAKhsC,cACLgsC,EAAK00B,0BAGHr/B,GAAa99B,EAAAA,EAAAA,UACjB,IAAM,CACJ,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAM0mE,GAAAA,GACNtsE,MAAO4J,EAAE,iCACTP,QAAUypE,GACR8zG,EAA6B,CAAC70G,GAAO,CAACe,GAAetjC,EAAK00B,yBAC5Dl6D,UAAU,KAGd,CAAC48K,EAA8Bh9K,EAAGmoE,EAAMviC,EAAK00B,0BAE/C,OACEl8D,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACsjL,GAAU,CACTjmL,MAAO6J,EACL,0HAGJlH,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,0BACHizB,eAAgBA,EAChB8R,aAAcA,EACdvM,eAAgBA,EAChBwM,WAAYA,EACZ8C,gBAAiB/9B,EAAE,+BACnBg+B,gBAAiBh+B,EAAE,8CACnBi+B,sBAAuBj+B,EAAE,oDACzBq+B,sBAAsBvlC,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrCwN,qBAAsBp+B,EAAE,4BACxBm+B,sBAAuBA,IAAM4+I,EAA4B,CAAC50G,OACtDviC,MAIZ,CC5GO,SAASq3I,GAAej7I,GAC7B,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR0kC,EAAsBi/E,GAAgB,CAAEj1G,cAAc,EAAM0mD,aAAa,IACzE8W,GAAyBhvE,EAAAA,EAAAA,UAC7B,KAAM,CACJyc,OAAQ5Z,EAAE,YACV4b,KAAOusD,IAAkBrvE,EAAAA,EAAAA,KAACmV,GAAQ,CAAC1G,KAAM4gE,EAAKzT,WAC9Cx8D,KAAM,WACNqW,SAAU,OAEZ,CAACvO,IAEG8hC,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAACgvE,IAAyB,CAACA,IACzD+wG,EAAoB/0G,GACjBA,GAAMlU,gBAAgB6iC,mBAAmB3yC,YAC5C1pD,EACAuF,EAAE,+DAEF04D,EAAaH,KAgCnB,OA/BqBjG,IACnB,MAAM84G,EAAmB94G,EAAMr7D,OAAOimL,GAEtCxkH,EAAW,CACTviE,MAAO6J,EAAE,2BAA4B,CAAEoV,MAAOk9C,EAAMh2D,SACpDzF,YAAamJ,EAAE,8DAA+D,CAC5EoV,MAAOk9C,EAAMh2D,OAAS8uK,EAAiB9uK,SAEzCwoC,iBAAkB9kC,EAAE,eAAgB,CAAEoV,MAAOk9C,EAAMh2D,SACnDs1B,MAAO0gC,EAAMp6D,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE2vB,SAAU1vB,EAAE0vB,YACzDh6C,aACE0wJ,EAAiB9uK,OAAS,EACtB,CACE0D,EACE,qFACA,CACEoV,MAAOg2J,EAAiB9uK,eAI9B7B,EACNmqC,oBAAqBs4I,EACrBrrJ,MAAO62B,GACPtoD,UAAU,EACVukC,sBACA7C,gBACAE,aACAD,SAAUA,CAAComC,EAAe5jD,IACxBgkC,GAAcgC,EAAM,UAAU4d,EAAKlyE,GAAGqhB,cAAeiN,IACvD,CAGN,CCjCO,SAAS44J,KACd,MAAM,EAAEn9K,IAAMC,EAAAA,EAAAA,MACRk9C,GAASgZ,EAAAA,GAAAA,MACT,MAAErwD,EAAOkT,KAAMmvD,EAAI,QAAE9Z,GAAYc,GAAoB5E,EAAM,SAAUpN,EAAOlnD,IAC5E69D,EAAerW,MACf,cAAEoN,GAAkBJ,KAEpB2yH,EAAcH,IAAgBpY,IAC9BA,EAAQvoK,OAAS,GACnBw3D,EAAaJ,GAAS0nH,MACxB,IAEI7oH,EAAiBm9D,GAAsB,QACvCh2F,GAAsCv8B,EAAAA,EAAAA,UAAQ,KAClD,MAAMu8B,EAAsC,IACvC64B,EACH,CACEh2D,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/B0C,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVvH,KAAM84D,GAAAA,GACN1+D,MAAO4J,EAAE,aACTP,QAAU0oE,GAASrU,EAAaJ,GAASgoH,SAAU,CAAEv+H,OAAQ,CAAElnD,GAAIkyE,EAAKlyE,OAE1E,CAAEsG,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,eACTP,QAAU0oE,GAASi1G,EAAY,CAACj1G,IAChC/nE,UAAU,IAGd,OAAOs5B,CAAW,GACjB,CAAC15B,EAAG8zD,EAAcspH,EAAa7qH,IAE5B7U,EAAaT,KAEbogI,EAAW,CACf,CAAEjnL,MAAO4J,EAAE,WAAYiuB,KAAMylC,GAASiB,aACtC,CAAEv+D,MAAO4J,EAAE,iBAAkBiuB,KAAMylC,GAASmpH,mBAC5C,CAAEzmL,MAAO4J,EAAE,SAAUiuB,KAAMylC,GAAS4pH,WACpC,CAAElnL,MAAO4J,EAAE,SAAUiuB,KAAMylC,GAAS6pH,YAQtC,YAJ0B9iL,IAAtBowD,GAAe50D,IAAoB40D,GAAe50D,GAAGqhB,aAAe6lC,EAAOlnD,IAC7EonL,EAASxgL,KAAK,CAAEzG,MAAO4J,EAAE,UAAWiuB,KAAMylC,GAAS8pH,aAGjD13K,GAAchN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,IACpD8Z,GAGH/pE,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAOgyE,EAAKzT,SACZxb,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,SAAUY,GAAI88C,EAAWgW,GAAS0nH,QAC7C,CAAEhlL,MAAO+xE,EAAKzT,WAEhBjb,eACE3gD,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAASs9B,EACTx9B,SAAU6F,GAAAA,GAAiBC,MAC3B3I,aAAc8uE,OAIpBrvE,EAAAA,EAAAA,KAAC09D,GAAc,CACbe,QAAS,CACPnhE,MAAO4J,EAAE,iBACTiuB,KAAMylC,GAAS0nH,MACf5jH,oBAAqB,SAEvBvU,KAAMo6H,EACNlgI,OAAQ,CAAElnD,GAAIkyE,EAAKlyE,UAzBP6C,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,GA6BjD,CCzGO,SAASs6H,GAAU3nL,GACxB,MAAMunD,GAASgZ,EAAAA,GAAAA,KACf,OACEr9D,EAAAA,EAAAA,KAAC8zK,GAAc,CACb7gF,QAAQ,MACR91F,GAAIL,EAAMK,IAAMknD,EAAOlnD,IAAM,GAC7BsG,KAAK,aACLg8H,cAAe3iI,EAAM2iI,eAAiB7kE,GAAS+pH,gBAGrD,CCNO,SAASC,GAAwB17I,GACtC,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR09K,EAAqBr6D,KACrBj7D,EAAcyT,KA2BpB,OA1B0BlnE,EAAAA,EAAAA,cACxB,CAAC09D,EAAkBD,KACjBsrH,EAAmB,CACjBxnL,MAAO6J,EAAE,2BAA4B,CACnCoV,MAAOi9C,EAAM/1D,SAEfu1B,MAAQm2C,GAAeA,EAAK/xE,GAC5B27B,MAAOygC,EACPvwB,cAAe,CAAC,CAAEloB,OAAQ5Z,EAAE,QAAS4b,KAAOosD,GAAeA,EAAK9xE,OAChE6rC,SAAUv6B,MAAOwgE,EAAYzjD,KAC3B,IAAK,MAAM4jD,KAAQ7V,QACXjK,EACJkC,EAAM,UAAU4d,EAAKlyE,GAAGqhB,oBACxB,CAAErhB,GAAI+xE,EAAK/T,eAAewvD,aAAaC,YAAYztH,GAAI6mF,cAAc,GACrEv4D,EAEJ,EAEFzsB,eAAgBkI,EAAE,8BAA+B,CAC/CoV,MAAOi9C,EAAM/1D,SAEf0lC,cACA,GAEJ,CAAC27I,EAAoB39K,EAAGgiC,EAAYqmB,GAGxC,CC9BA,SAASu1H,GAAYhoL,GACnB,MAAMszB,EAAiBmtG,KACjBr7F,EAAeqvI,GAAgB,CAAE17J,cAAc,IAC/Ci3B,EAAO6zB,GAAiB,CAC5Bvc,IAAKqN,EAAM,UACXrhC,iBACA8R,eACAsoB,oBAAoB,IAEtB,OACExqD,EAAAA,EAAAA,KAACitC,GAAiB,IACZnwC,EACJszB,eAAgBA,EAChB8R,aAAcA,EACd4K,KAAMA,GAGZ,CAEO,SAASi4I,KACd,MAAOj4K,EAAG8rB,GAAaD,KAOvB,OANwB78B,EAAAA,EAAAA,cACtB,CAACuB,EAAeyI,KACd8yB,GAAU54B,EAAAA,EAAAA,KAAC8kL,GAAW,CAACznL,MAAOA,EAAOyI,SAAUA,IAAa,GAE9D,CAAC8yB,GAGL,CC9BO,SAASosJ,GAAuBz4K,GACrC,MAAM,IAAQpF,EAAAA,EAAAA,MACR89K,EAAcF,KACdG,ECFD,WACL,MAAM,EAAEh+K,IAAMC,EAAAA,EAAAA,MACRg+K,EAAqB36D,KACrBj7D,EAAcyT,KAuBpB,OAtBuBlnE,EAAAA,EAAAA,cACrB,CAACy9D,EAAeC,EAAkBtwB,KAChCi8I,EAAmB,CACjB9nL,MAAO6J,EAAE,uBAAwB,CAAEoV,MAAOi9C,EAAM/1D,SAChDu1B,MAAQm2C,GAAeA,EAAK/xE,GAC5B27B,MAAOygC,EACPvwB,cAAe,CAAC,CAAEloB,OAAQ5Z,EAAE,QAAS4b,KAAOosD,GAAeA,EAAK9xE,OAChE6rC,SAAUv6B,MAAOwgE,EAAYzjD,KAC3B,IAAK,MAAM4jD,KAAQ7V,QACXjK,EACJkC,EAAM,UAAU4d,EAAKlyE,GAAGqhB,oBACxB,CAAErhB,GAAI+xE,EAAK/T,eAAewvD,aAAaC,YAAYztH,IACnDsuB,EAEJ,EAEFzsB,eAAgBkI,EAAE,0BAA2B,CAAEoV,MAAOi9C,EAAM/1D,SAC5D0lC,cACA,GAEJ,CAACi8I,EAAoBj+K,EAAGqoD,GAG5B,CDzB0B61H,GASxB,OAR4BtpL,EAAAA,EAAAA,cACzB09D,IACCyrH,EAAY/9K,EAAE,qBAAsB,CAAEoV,MAAOk9C,EAAMh2D,UAAY+1D,IAC7D2rH,EAAgB3rH,EAAOC,EAAOjtD,EAAQ,GACtC,GAEJ,CAAC24K,EAAiB34K,EAAS04K,EAAa/9K,GAG5C,CEKO,SAASs9K,KACd,MAAMngI,GAASgZ,EAAAA,GAAAA,MACPn9C,KAAMmvD,GAAShZ,GAAoB5E,EAAM,SAAUpN,EAAOlnD,IAElE,OAAKkyE,GAGErvE,EAAAA,EAAAA,KAACqlL,GAAiB,CAACh2G,KAAMA,IAFvB,IAGX,CAEA,SAASg2G,GAAkBvoL,GACzB,MAAM,KAAEuyE,GAASvyE,GACX,EAAEoK,IAAMC,EAAAA,EAAAA,MACRipB,EAAiBmtG,KACjBr7F,EAAeqvI,KACfzkI,EAAO6zB,GAAiB,CAC5Bvc,IAAKqN,EAAM,UAAU4d,EAAKlyE,GAAGqhB,oBAC7B4R,iBACAo6B,oBAAoB,IAEhB86H,EAAsBN,GAAuBl4I,EAAKy0B,uBAClDgkH,EAAuBX,GAAwB93I,EAAK00B,0BACpD,KAAEthD,GAAS0jD,GAA6CnS,EAAM,WAC9D+zH,EAAmBxgL,QAAQkb,GAAQA,EAAK5c,SAAW4c,EAAK5c,QAAc,MAEtEqyB,GAAiBtxB,EAAAA,EAAAA,UACrB,IAAM,CACJ,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVvH,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,sBACTnG,WAAYykL,OACR7jL,EACAuF,EACE,iJAENP,QAASA,IAAM2+K,EAAoB,CAACj2G,KAEtC,CAAE5rE,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAM0mE,GAAAA,GACNtsE,MAAO4J,EAAE,2BACTP,QAASA,IAAM4+K,EAAqB,CAACl2G,GAAOviC,EAAKhsC,eACjDwG,UAAU,KAGd,CAACJ,EAAGs+K,EAAkBF,EAAqBj2G,EAAMk2G,EAAsBz4I,EAAKhsC,gBAExEqhC,GAAa99B,EAAAA,EAAAA,UACjB,IAAM,CACJ,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAM0mE,GAAAA,GACNtsE,MAAO4J,EAAE,yBACTP,QAAUuoE,GAAeq2G,EAAqB,CAACl2G,GAAO,CAACH,IACvD5nE,UAAU,KAGd,CAACi+K,EAAsBr+K,EAAGmoE,IAE5B,OACE/pE,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACsjL,GAAU,CACTjmL,MAAO6J,EAAE,2EAEXlH,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,kBACHizB,eAAgBA,EAChB8R,aAAcA,EACdvM,eAAgBA,EAChBwM,WAAYA,EACZ8C,gBAAiB/9B,EAAE,uBACnBg+B,gBAEMh+B,EADJs+K,EACM,oDACA,2DAERrgJ,sBAEMj+B,EADJs+K,EACM,+CAEA,yFAGRl+I,eAAgBk+I,OAAmB7jL,EAAYo2B,GAAAA,GAC/CuN,qBAAsBkgJ,EAAmBt+K,EAAE,iBAAcvF,EACzD4jC,qBAAsBigJ,GAAmBxlL,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IAAM,KAC9DuN,sBAAuBmgJ,EAAmB,IAAMF,EAAoB,CAACj2G,SAAS1tE,KAC1EmrC,MAIZ,CCpHO,SAAS24I,GAAqBp/J,GACnC,MAAM,IAAQlf,EAAAA,EAAAA,MACRy9C,EAAaT,KACbquB,EAAgBhD,GAAiBnpD,GACjCosD,EAAiB3C,GAAkBzpD,GAEzC,OAAOhiB,EAAAA,EAAAA,UACL,IAAM,CACJ,CACEyc,OAAQ5Z,EAAE,oBACV4b,KAAO4yB,IACL11C,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KACEinC,EAAMylB,gBAAgBuqH,aAAatoL,KAC/Bs4C,EAAMylB,eAAeuqH,YAAYtoL,KACjC8J,EAAE,yBAERY,GACEue,GAASxQ,kBACLlU,EACAijD,EAAWgW,GAAS+qH,iBAAkB,CACpCthI,OAAQ,CAAElnD,GAAIu4C,EAAMylB,eAAekU,KAAKlyE,GAAIyoL,QAASlwI,EAAMv4C,GAAGqhB,gBAK1E/I,SAAU,IACVqvB,aAAa,EACbC,qBAAsB,MACtB3lC,KAAMinB,GAASk2C,iBAAc56D,EAAY,MAE3C,CACEmf,OAAQ5Z,EAAE,eACVzD,KAAM,OACN/I,MAAQg7C,GAAUA,EAAM95B,YACxBxc,KAAMinB,GAASk2C,iBAAc56D,EAAY,eAE3C,CACEmf,OAAQ5Z,EAAE,SACVzD,KAAM,OACN/I,MAAQg7C,GAAUA,EAAMmwI,MACxBzmL,KAAMinB,GAASk2C,iBAAc56D,EAAY,SAE3C,CACEmf,OAAQ5Z,EAAE,WACVzD,KAAM,WACN/I,MAAQg7C,GAAUA,EAAMowI,QACxB1mL,KAAMinB,GAASk2C,iBAAc56D,EAAY,WAE3C6wE,EACAC,IAEF,CAACD,EAAe5tB,EAAY6tB,EAAgBpsD,GAASxQ,aAAcwQ,GAASk2C,YAAar1D,GAE7F,CCrDO,SAAS6+K,GAAoB78I,GAClC,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR6+K,EAAoBP,GAAqB,CAAE5vK,cAAc,EAAM0mD,aAAa,IAC5EqD,EAAaH,KAuBnB,OAtBsBwmH,IACpBrmH,EAAW,CACTviE,MAAyB,IAAlB4oL,EAAOziL,OAAe0D,EAAE,4BAA8BA,EAAE,6BAC/DnJ,YACoB,IAAlBkoL,EAAOziL,OACH0D,EAAE,oDACFA,EAAE,+DAAgE,CAChEoV,MAAO2pK,EAAOziL,SAEtBwoC,iBAAkB9kC,EAAE,eAAgB,CAAEoV,MAAO2pK,EAAOziL,SACpDs1B,MAAOmtJ,EAAO7mL,MAAK,CAAC6sC,EAAGC,IACrBV,GAAeS,EAAEkvB,eAAekU,KAAKzT,SAAU1vB,EAAEivB,eAAekU,KAAKzT,YAEvE7iC,MAAO62B,GACPtoD,UAAU,EACVukC,oBAAqBm6I,EACrBh9I,cAAeg9I,EACf98I,aACAD,SAAUA,CAACyM,EAAcjqB,IACvBgkC,GAAcgC,EAAM,WAAW/b,EAAMv4C,GAAGqhB,cAAeiN,IACzD,CAGN,CCRO,SAASi5J,GAAW5nL,GAKzB,MAAMunD,GAASgZ,EAAAA,GAAAA,KACT6oH,EAASppL,EAAMK,IAAMknD,EAAOlnD,IAC5B,cAAE40D,GAAkBJ,KACpBqJ,EAAerW,KASrB,OAPA5oD,EAAAA,EAAAA,YAAU,UACc4F,IAAlBowD,GAA+BA,GAAe50D,GAAGqhB,aAAe0nK,GAElElrH,EAAaJ,GAASiB,YAAa,CAAExX,OAAQ,CAAElnD,GAAI40D,GAAe50D,KACpE,GACC,CAAC40D,EAAem0H,EAAQlrH,IAEtBjJ,EAEEA,GAAe50D,GAAGqhB,aAAe0nK,GACtClmL,EAAAA,EAAAA,KAACmmL,GAAkB,CACjB92G,KAAMtd,EACNq0H,YAAatpL,EAAMspL,YACnBC,YAAavpL,EAAMwpL,kBAAoB1rH,GAAS2rH,mBAGlDvmL,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,KATyB1E,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,GAW1D,CAEA,SAASg8H,GAAmBrpL,GAC1B,MAAM,KAAEuyE,GAASvyE,GACX,EAAEoK,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KAEbjiB,EAAeujJ,KACfr1J,EC5DCipE,GAAyB,CAC9BC,YAAa,SACbC,cAAe,CAAC,cAAe,QAAS,MACxCC,mBAAoB,CAClBr8F,GAAI,CACFk9F,QAAS,aDwDTvtD,EAAO6zB,GAAkB,CAC7Bvc,IAAKqN,EAAM,UAAU4d,EAAKlyE,GAAGqhB,qBAC7B4R,iBACA8R,iBAEIskJ,EAAeT,GAAoBj5I,EAAK00B,yBAExC7rC,GAAiBtxB,EAAAA,EAAAA,UACrB,IAAM,CACJ,CACEZ,KAAMrJ,EAAeyN,KACrBrH,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVvH,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,gBACTa,KAAM68C,EAAW9nD,EAAMupL,YAAa,CAAEhiI,OAAQ,CAAElnD,GAAIkyE,EAAKlyE,OAE3D,CAAEsG,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,iBACTI,UAAU,EACVX,QAAS6/K,KAGb,CAACA,EAAc5hI,EAAY19C,EAAGmoE,EAAKlyE,GAAIL,EAAMupL,cAGzClkJ,GAAa99B,EAAAA,EAAAA,UACjB,IAAM,CACJ,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,gBACTI,UAAU,EACVmD,UAAU,EACV9D,QAAU+uC,IACR8wI,EAAa,CAAC9wI,GAAO,KAI3B,CAAC8wI,EAAct/K,IAGjB,OACE5B,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,CACRpD,EAAMspL,cAAepmL,EAAAA,EAAAA,KAACsjL,GAAU,CAACjmL,MAAO6J,EAAEpK,EAAMspL,gBACjDpmL,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,kBACH8nC,gBAAiB/9B,EAAE,wBACnBg+B,gBAAiBh+B,EAAE,kCACnBi+B,sBAAuBj+B,EAAE,+CACzBq+B,sBAAsBvlC,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrC0N,kBAAmB7P,EAAe8C,MAAM,EAAG,GAC3CyJ,aAAcA,EACd9R,eAAgBA,EAChBuF,eAAgBA,EAChBwM,WAAYA,KACR2K,MAIZ,CEzHO,SAAS64I,KACd,MAAMthI,GAASgZ,EAAAA,GAAAA,MAEbrwD,MAAOy5K,EACPvmK,KAAMmvD,EACN9Z,QAASmxH,GACPrwH,GAAoB5E,EAAM,SAAUpN,EAAOlnD,KAE7C6P,MAAO25K,EACPzmK,KAAMw1B,EACN6f,QAASqxH,GACPvwH,GAAkB5E,EAAM,UAAWpN,EAAOuhI,SAE9C,OAAIa,GAAkBzmL,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOy5K,EAAWvpH,cAAewpH,IAC7DC,GAAmB3mL,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAO25K,EAAYzpH,cAAe0pH,IAE9Dv3G,GAAS35B,GAEP11C,EAAAA,EAAAA,KAAC6mL,GAAwB,CAACnxI,MAAOA,KAFZ11C,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,GAG3D,CAEA,SAAS08H,GAAyB/pL,GAChC,MAAM,MAAE44C,GAAU54C,EAEZkpL,EAAoBP,GAAqB,CAAE5vK,cAAc,IAE/D,OACE7V,EAAAA,EAAAA,KAAC0hB,GAAW,CAAAxhB,UACVF,EAAAA,EAAAA,KAACwjB,GAAsB,CAAC3L,QAASmuK,EAAmB3pK,KAAMq5B,KAGhE,CCFO,SAAS4sI,KACd,MAAM,EAAEp7K,IAAMC,EAAAA,EAAAA,MAER6zD,EAAerW,KACfC,EAAaT,KACnBoZ,GAAqB,SACrB,MAAMzE,EAASvC,KAETnmC,EAAiB86F,KAEjBhpF,EAAe4oF,KAEfh+E,EAAO6zB,GAAoB,CAAEvc,IAAKqN,EAAM,UAAWrhC,iBAAgB8R,iBAEnEoiJ,EAAcH,GAAer3I,EAAK00B,yBAElCyiH,EAA8BN,KAC9B2B,EAAsBN,KACtB8B,ECjDD,SACLv6K,GAEA,MAAM,IAAQpF,EAAAA,EAAAA,MACRy8K,EAAsBF,KACtBQ,EAA+BX,KAYrC,OAXuCznL,EAAAA,EAAAA,cACpC09D,IACCoqH,EACE18K,EAAE,kCAAmC,CAAEoV,MAAOk9C,EAAMh2D,UACnD81D,IACC4qH,EAA6B1qH,EAAOF,EAAe/sD,EAAQ,GAE9D,GAEH,CAACq3K,EAAqB18K,EAAGg9K,EAA8B33K,GAG3D,CD+ByCw6K,GACjCC,EElDD,SAAmCz6K,GACxC,MAAM,IAAQpF,EAAAA,EAAAA,MACR89K,EAAcF,KACdQ,EAAuBX,QF+CEqC,GEtC/B,OAR+BnrL,EAAAA,EAAAA,cAC5B09D,IACCyrH,EAAY/9K,EAAE,0BAA2B,CAAEoV,MAAOk9C,EAAMh2D,UAAY+1D,IAClEgsH,EAAqB/rH,EAAOD,EAAM,GAClC,GAEJ,CAAC0rH,EAAaM,EAAsBr+K,GAGxC,CFqCiC+/K,IAEzB,KAAE/mK,GAAS0jD,GAA6CnS,EAAM,WAC9Dy1H,EAAgBliL,QAAQkb,GAAQA,EAAK5c,SAAW4c,EAAK5c,QAAc,MAEnEqyB,GAAiBtxB,EAAAA,EAAAA,UACrB,IAAM,CACJ,CACEZ,KAAMrJ,EAAeyN,KACrBrH,UAAWnG,EAAoBoG,KAC/B4C,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVvH,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,eACTnG,WAAYmmL,OACRvlL,EACAuF,EACE,gIAENa,KAAM68C,EAAWgW,GAASynH,aAE5B,CAAE5+K,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,sBACTP,QAASA,IAAM2+K,EAAoBx4I,EAAKhsC,gBAE1C,CACE2C,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAM0mE,GAAAA,GACNtsE,MAAO4J,EAAE,2BACTP,QAASA,IAAMqgL,EAAuBl6I,EAAKhsC,gBAE7C,CAAE2C,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,8BACTP,QAASA,IAAMs9K,EAA4Bn3I,EAAKhsC,gBAElD,CACE2C,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAM0mE,GAAAA,GACNtsE,MAAO4J,EAAE,mCACTP,QAASA,IAAMmgL,EAA+Bh6I,EAAKhsC,gBAErD,CAAE2C,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,gBACTP,QAAS29K,EACTh9K,UAAU,KAGd,CACEJ,EACAggL,EACAtiI,EACA0/H,EACAgB,EACAx4I,EAAKhsC,cACLkmL,EACA/C,EACA6C,IAIE3kJ,GAAa99B,EAAAA,EAAAA,UAAgC,IAU1C,CACL,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAE/B8J,UAAU,EACVvH,KAAM84D,GAAAA,GACN1+D,MAAO4J,EAAE,aACTnG,WAAasuE,GAbOA,IACtBA,GAAMlU,gBAAgB6iC,mBAAmB5G,KACrC,GACAlwF,EAAE,8DAU2BigL,CAAe93G,GAC9C1oE,QAAU0oE,GAASrU,EAAaJ,GAASgoH,SAAU,CAAEv+H,OAAQ,CAAElnD,GAAIkyE,EAAKlyE,OAE1E,CAAEsG,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,qBACTP,QAAU0oE,GAASi2G,EAAoB,CAACj2G,KAE1C,CACE5rE,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAM0mE,GAAAA,GACNtsE,MAAO4J,EAAE,0BACTP,QAAU0oE,GAAS23G,EAAuB,CAAC33G,KAE7C,CAAE5rE,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAM40B,GAAAA,GACNx6B,MAAO4J,EAAE,6BACTP,QAAU0oE,GAAS40G,EAA4B,CAAC50G,KAElD,CACE5rE,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAM0mE,GAAAA,GACNtsE,MAAO4J,EAAE,kCACTP,QAAU0oE,GAASy3G,EAA+B,CAACz3G,KAErD,CAAE5rE,KAAMrJ,EAAesJ,WACvB,CACED,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,eACTnG,WAAasuE,GAxDSA,IACxBA,GAAMlU,gBAAgB6iC,mBAAmB3yC,OACrC,GACAnkD,EAAE,+DAqD2Bk9K,CAAiB/0G,GAChD1oE,QAAU0oE,GAASi1G,EAAY,CAACj1G,IAChC/nE,UAAU,KAGb,CACDg9K,EACAtpH,EACAipH,EACA6C,EACAxB,EACA0B,EACA9/K,IAGF,OACE5B,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,SACT+5C,eAAgB/5C,EAAE,SAClB85C,UAAW95C,EACT,+FACA,CAAE4/G,QA1Kcx8E,QA4KlB4W,aAAc2X,GAAcC,EAAQ,SACpCl9C,YAAa1U,EACX,+FACA,CAAE4/G,QA/Kcx8E,QAiLlBqW,eAAe3gD,EAAAA,EAAAA,KAACyjE,GAAkB,CAAChgE,KAAM,YAE3CzD,EAAAA,EAAAA,KAACkkC,GAAS,CACR/mC,GAAG,kBACHizB,eAAgBA,EAChBuF,eAAgBA,EAChBuM,aAAcA,EACdC,WAAYA,EACZ8C,gBAAiB/9B,EAAE,uBACnBg+B,gBAEMh+B,EADJggL,EACM,sCACA,+CAER/hJ,sBAEMj+B,EADJggL,EACM,kDAEA,yFAGR5/I,eAAgB4/I,OAAgBvlL,EAAYo2B,GAAAA,GAC5CwN,sBAAsBvlC,EAAAA,EAAAA,KAAC83B,GAAAA,GAAc,IACrCwN,qBAAsB4hJ,EAAgBhgL,EAAE,oBAAiBvF,EACzD0jC,sBAAuB6hJ,EAAgB,IAAMlsH,EAAaJ,GAASynH,iBAAc1gL,KAC7EmrC,MAIZ,CGjNO,SAAS63I,GAAe7nL,GAC7B,MAAM,IAAQqK,EAAAA,EAAAA,MACRk9C,GAASgZ,EAAAA,GAAAA,KACTzY,EAAaT,KACb6W,EAAerW,KACf8uH,EAAiBjpD,MAEftqG,KAAMmvD,EAAI,UAAEjmD,GAAc6sC,GAAgBxE,EAAM,UAAU30D,EAAMK,IAAMknD,EAAOlnD,IAAM,OAE3F,GAAIisB,IAAcimD,EAAM,OAAOrvE,EAAAA,EAAAA,KAACkqD,GAAW,IAE3C,MAAM/D,EAA0B,CAC9B,CACEhpD,GAAI,gBACJG,MAAO4J,EAAE,0BACTohD,QAAQtoD,EAAAA,EAAAA,KAACkzK,GAAyB,KAEpC,CACE/1K,GAAI,YACJG,MAAO4J,EAAE,oBACTohD,QAAQtoD,EAAAA,EAAAA,KAACqzK,GAAsB,IAC/B5iI,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,UAAE0uF,GAAcn0C,EACtB,IAAKm0C,GAAWh4F,OACd,MAAM,IAAI8gB,MAAMpd,EAAE,iCACpB,GAGJ,CACE/J,GAAI,QACJG,MAAO4J,EAAE,yBACTohD,QAAQtoD,EAAAA,EAAAA,KAAC+8H,GAAkB,CAACL,yBAAyB,cACrDjsF,SAAUA,CAAC4W,EAAUv6C,KACnB,MAAM,SAAE2uH,GAAap0E,EACrB,IAAKo0E,GAAUj4H,OACb,MAAM,IAAI8gB,MAAMpd,EAAE,6BACpB,GAGJ,CAAE/J,GAAI,SAAUG,MAAO4J,EAAE,UAAWgwC,SAASl3C,EAAAA,EAAAA,KAACs7H,GAAyB,MAuCzE,OACEh2H,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,aACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,SAAUY,GAAI88C,EAAWgW,GAAS0nH,QAC7C,CACEhlL,MAAO+xE,GAAMzT,SACb9zD,GAAI88C,EAAWgW,GAASiB,YAAa,CAAExX,OAAQ,CAAElnD,GAAIkyE,GAAMlyE,OAE7D,CACEG,MAAO4J,EAAE,SACTY,GAAI88C,EAAWgW,GAAS6pH,UAAW,CAAEpgI,OAAQ,CAAElnD,GAAIkyE,GAAMlyE,OAE3D,CAAEG,MAAO4J,EAAE,kBAGflH,EAAAA,EAAAA,KAACgqD,GAAU,CACT7gB,aAAck2B,GACdlZ,MAAOA,EACPznB,SAxDYxe,IAChB,MAAM,UAAEs7E,EAAS,SAAEigC,EAAQ,aAAEF,GAAiBr7G,EACxC4Y,EAA4B,GAClC,IAAK,MAAMib,KAAYynD,EACrB,IAAK,MAAM9yE,KAAQ+yG,EACjB3iG,EAAM/0B,KAAK,CAAEgwC,WAAUrrB,SAG3B,OAAO,IAAIyhB,SAAeqd,IACxBisH,EAAe,CACbp2K,MAAO6J,EAAE,aACT6xB,MAAOA,EAAGgb,WAAUrrB,UAAW,GAAGqrB,EAAS52C,MAAMurB,EAAKvrB,KACtD27B,QACAkQ,cAAe,CACb,CAAEloB,OAAQ5Z,EAAE,iBAAkB4b,KAAMA,EAAGixB,cAAeA,EAAS32C,MAC/D,CAAE0jB,OAAQ5Z,EAAE,QAAS4b,KAAMA,EAAG4F,UAAWA,EAAKtrB,OAEhD6rC,SAAUA,EAAG8K,WAAUrrB,UACrB6mC,GAAYkC,EAAM,0BAA2B,CAC3C4d,KAAMA,EAAKlyE,GACXkgI,gBAAiB30G,EAAKvrB,GACtB4/D,aAAcw+D,EACd+B,UAAWvpF,EAAS52C,KAExB+rC,WAAYA,KACVse,GAAS,EAEXj7C,QAASA,KACPyuD,EAAal+D,EAAMsqL,gBAAkBxsH,GAAS6pH,UAAW,CACvDpgI,OAAQ,CAAElnD,GAAIknD,EAAOlnD,KACrB,GAEJ,GACF,EAwBEqwC,SAAUA,KACRwtB,EAAal+D,EAAMsqL,gBAAkBxsH,GAAS6pH,UAAW,CAAEpgI,OAAQ,CAAElnD,GAAIknD,EAAOlnD,KAAO,EAEzFmyC,aAAW,MAInB,CCvHO,SAAS+3I,GAAcvqL,GAI5B,MAAM,IAAQqK,EAAAA,EAAAA,MACRy9C,EAAaT,KACb6W,EAAerW,KACfN,GAASgZ,EAAAA,GAAAA,MAEbrwD,MAAO25K,EACPzmK,KAAMw1B,EACN6f,QAASqxH,GACPvwH,GAAkB5E,EAAM,UAAWpN,EAAOuhI,SAExCY,EAAeT,IAAqBha,IACpCA,EAAQvoK,OAAS,GACnBw3D,EAAaJ,GAAS8pH,WAAY,CAAErgI,OAAQ,CAAElnD,GAAIknD,EAAOlnD,KAC3D,IAGIyjC,GAAoCv8B,EAAAA,EAAAA,UAAQ,IACzC,CACL,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,gBACTP,QAAU+uC,GAAU8wI,EAAa,CAAC9wI,IAClCpuC,UAAU,EACVmD,UAAU,KAGb,CAAC+7K,EAAct/K,IAElB,OAAIy/K,GAAmB3mL,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAO25K,EAAYzpH,cAAe0pH,IAC9DlxI,GAGHpwC,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,SACTk5C,YAAa,CACX,CACE9iD,MAAOR,EAAM2jE,gCAAkCv5D,EAAE,UACjDY,GAAI88C,EAAWgW,GAAS8pH,WAAY,CAClCrgI,OAAQ,CAAElnD,GAAIknD,EAAOlnD,GAAIyoL,QAASvhI,EAAOuhI,YAG7C,CACEtoL,MAAOo4C,EAAMylB,gBAAgBuqH,aAAatoL,MAAQ8J,EAAE,2BAGxDy5C,eACE3gD,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAASs9B,EACTx9B,SAAU6F,GAAAA,GAAiBC,MAC3B3I,aAAcm1C,OAIpB11C,EAAAA,EAAAA,KAAC09D,GAAc,CACbe,QAAS,CACPnhE,MAAOR,EAAM4jE,cAAgBx5D,EAAE,uBAC/BiuB,KAAMylC,GAAS8pH,WACfhmH,oBAAqB,eAEvBvU,KAAM,CAAC,CAAE7sD,MAAO4J,EAAE,WAAYiuB,KAAMylC,GAAS+qH,mBAC7CthI,OAAQ,CAAElnD,GAAIknD,EAAOlnD,GAAIyoL,QAASvhI,EAAOuhI,eAhC5B5lL,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,GAoClD,CCvFO,SAASm9H,GAGdxqL,GACA,MAAM,IAAQqK,EAAAA,EAAAA,MACRogL,ECDD,SAAgClhK,GAIrC,MAAMgc,EAAa8sC,GAAc,IAC5B9oD,IAECkc,EAAoB+sC,KACpB4tB,EAAqBhtB,GAA0BtV,GAAS62B,oBAAqBprE,GAC7EmsD,EAAgBhD,GAAiBnpD,GACjCosD,EAAiB3C,GAAkB,IAAKzpD,EAASk2C,aAAa,IAKpE,OAJqBl4D,EAAAA,EAAAA,UACnB,IAAM,CAACg+B,EAAYE,EAAmB26D,EAAoB1qB,EAAeC,IACzE,CAACpwC,EAAYE,EAAmB26D,EAAoB1qB,EAAeC,GAGvE,CDf6B+0G,CAAuB,CAAE3xK,cAAc,IAC5D4xK,EEXiBpuF,GAAyB,CAC9CC,YAAa,eACbE,mBAAoB,CAClBp8F,KAAM,CACJi9F,QAAS,gBAEXl9F,GAAI,CACFk9F,QAAS,iBAGbd,cAAe,CAAC,OAAQ,KAAM,iBFEhC,OACEv5F,EAAAA,EAAAA,KAACw4F,GAA+B,CAC9Bp7F,KAAMN,EAAMM,KACZD,GAAG,cACHG,MAAO4J,EAAE,eACTkf,YAAalf,EAAE,sBACfurB,iBAAkBvrB,EAAE,2BACpBylB,eAAgBzlB,EAAE,8BAClB8lB,WAAYlwB,EAAMkwB,WAClBjsB,WAAYjE,EAAMiE,WAClB22C,WAAY56C,EAAM46C,WAClB0M,IAAKqN,EAAM,iBACXvvB,aAAcqlJ,EACdn3J,eAAgBq3J,GAGtB,CGTO,SAASlB,GAAgBzpL,GAC9B,MAAMunD,GAASgZ,EAAAA,GAAAA,MACT,cAAEtL,GAAkBJ,KACpBqJ,EAAerW,KASrB,OAPA5oD,EAAAA,EAAAA,YAAU,UACc4F,IAAlBowD,GAA+BA,GAAe50D,GAAGqhB,aAAe6lC,EAAOlnD,IAEzE69D,EAAaJ,GAASiB,YAAa,CAAExX,OAAQ,CAAElnD,GAAI40D,GAAe50D,KACpE,GACC,CAAC40D,EAAe1N,EAAOlnD,GAAI69D,IAEzBjJ,EAEEA,GAAe50D,GAAGqhB,aAAe6lC,EAAOlnD,IAC7C6C,EAAAA,EAAAA,KAAC0nL,GAAuB,CAACr4G,KAAMtd,EAAe41H,SAAU7qL,EAAM8qL,sBAE9D5nL,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,KALyB1E,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,GAO1D,CAEA,SAASu9H,GAAwB5qL,GAC/B,MAAM,KAAEuyE,GAASvyE,GACX,EAAEoK,IAAMC,EAAAA,EAAAA,MACRy9C,EAAaT,KACb/uC,GAAWC,EAAAA,GAAAA,MACXk6C,EAAcyT,KACdhI,EAAerW,KASrB,OACEr/C,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,gBACTk5C,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,SAAUY,GAAI88C,EAAWgW,GAAS0nH,QAC7C,CACEhlL,MAAO+xE,EAAKzT,SACZ9zD,GAAI88C,EAAWgW,GAASiB,YAAa,CAAExX,OAAQ,CAAElnD,GAAIkyE,EAAKlyE,OAE5D,CACEG,MAAO4J,EAAE,UACTY,GAAI88C,EAAWgW,GAAS8pH,WAAY,CAAErgI,OAAQ,CAAElnD,GAAIkyE,EAAKlyE,WAI/D6C,EAAAA,EAAAA,KAACijE,GAAW,CACV5jE,WAAY6H,EAAE,gBACdw3B,SAxByChwB,UAC7C,MAAMm5K,QAAiBt4H,EAAYkC,EAAM,WAAYq2H,GACrDhrL,EAAM6qL,SAASE,GACf7sH,EAAaJ,GAAS+qH,iBAAkB,CAAEthI,OAAQ,CAAElnD,GAAIkyE,EAAKlyE,GAAIyoL,QAASiC,EAAS1qL,KAAO,EAsBtFM,WAAYyJ,EAAE,UACdsmC,SA3BWA,IAAMp4B,GAAU,GA2BRlV,UAEnBF,EAAAA,EAAAA,KAAC+nL,GAAmB,QAI5B,CAEA,SAASA,KACP,MAAM,EAAE7gL,IAAMC,EAAAA,EAAAA,MACd,OACE7B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACsnL,GAAyB,CAAClqL,KAAK,cAAc4vB,YAAY,KAC1DhtB,EAAAA,EAAAA,KAACo8C,GAAiB,CAChBh/C,KAAK,cACLE,MAAO4J,EAAE,eACTkf,YAAalf,EAAE,2BACf8lB,YAAY,KAEdhtB,EAAAA,EAAAA,KAACs6C,GAAc,CACbl9C,KAAK,QACLE,MAAO4J,EAAE,SACTqzC,gBAAiBrzC,EAAE,kBACnBmf,QAAS,CACP,CACE/oB,MAAO4J,EAAE,QACTxM,MAAO,QAET,CACE4C,MAAO4J,EAAE,SACTxM,MAAO,UAGXsyB,YAAU,MAIlB,CC5GO,SAASg7J,GAAsBlrL,GAIpC,MAAM,MAAE44C,EAAK,cAAEuyI,GAAkBnrL,EAAM+qL,SACvC,OACE7nL,EAAAA,EAAAA,KAAC++B,GAAAA,EAAK,CACJ,aAAY73B,GAAAA,CAAC,oBACbrB,QAAM,EACNxC,QAAQ,SACRD,SAAS,MACT/F,OAAO6J,EAAAA,GAAAA,GAAE,qBACTqF,QAASA,KACPzP,EAAMyP,aAAQ5K,EAAU,EAE1Bw9B,kBAAgB,EAAAj/B,UAEhBoF,EAAAA,EAAAA,MAACoc,GAAW,CACVE,aAAc,CAAC1a,GAAAA,CAAC,kDAChB6a,gBAAgB,SAAQ7hB,SAAA,EAExBF,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,GAAAA,CAAC,QAAQhH,UAC1BF,EAAAA,EAAAA,KAACkP,GAAAA,GAAa,CAACgZ,YAAU,EAAC7kB,QAAS6kL,GAAAA,GAAqBC,UAAUjoL,SAC/Dw1C,MAGJuyI,IACCjoL,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,GAAAA,CAAC,gBAAgBhH,UAClCF,EAAAA,EAAAA,KAACkP,GAAAA,GAAa,CAACgZ,YAAU,EAAC7kB,QAAS6kL,GAAAA,GAAqBC,UAAUjoL,SAC/D+nL,OAIPjoL,EAAAA,EAAAA,KAACkhB,GAAU,CAAC5jB,MAAO4J,GAAAA,CAAC,UAAUhH,SAAEwR,GAAiB5U,EAAM+qL,SAAS/B,eAIxE,CCpCO,SAASsC,GAA8BtrL,GAC5C,MAAM,IAAQqK,EAAAA,EAAAA,MACRkhL,GAAqBhkL,EAAAA,EAAAA,UACzB,IAAM,IAAIuN,KAAK9U,EAAMwrL,qBAAuB,GAAG/0K,WAC/C,CAACzW,EAAMwrL,uBAGFC,EAAeC,IAAoB9sL,EAAAA,EAAAA,UACxCiS,KAAKgG,IAAI,EAAG00K,EAAqBz2K,KAAKkB,MAAMS,aAG9CxX,EAAAA,EAAAA,YAAU,KACR,GAAsB,IAAlBwsL,EAAqB,OACzB,MAAMh9K,EAAU2H,aAAY,KAC1Bs1K,EAAiB76K,KAAKgG,IAAI,EAAG00K,EAAqBz2K,KAAKkB,MAAMS,WAAW,GACvE,KACH,MAAO,IAAMJ,aAAa5H,EAAQ,GACjC,CAAC88K,EAAoBE,IAExB,MAAM30K,EAAejG,KAAKC,MAAM26K,EAAgB,KAC1C10K,EAAUlG,KAAKC,MAAMgG,EAAe,IACpCE,EAAUnG,KAAKC,MAAOgG,EAAe,GAAM,IAC3CG,EAAQpG,KAAKC,MAAOgG,EAAe,GAAK,GAAM,IAC9CI,EAAOrG,KAAKC,MAAMgG,EAAe,GAAK,GAAK,IAE3C60K,EAAkBvhL,EAAE,GAAG8M,MACvB00K,EAAmBxhL,EAAE,GAAG6M,MACxB40K,EAAqBzhL,EAAE,GAAG4M,MAC1B80K,EAAqB1hL,EAAE,GAAG2M,MAEhC,OAAqB,IAAjBD,GAEA5T,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAMvH,CAAC,YACP5K,MAAO,MACPkZ,UAAW,SACXtS,MAAMlD,EAAAA,EAAAA,KAACk3B,GAAAA,GAAqB,OAIhC5xB,EAAAA,EAAAA,MAAC6E,EAAAA,EAAI,CACHG,WAAY,CAAED,QAAS,kBACvBD,SAAU,CAAEC,QAAS,UACrBvB,WAAY,CAAEuB,QAAS,sBAAuBnK,SAAA,EAE9CF,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAC+K,UAAW,CAAElL,QAAS,mBAAoBnK,UAClDF,EAAAA,EAAAA,KAACyU,GAAW,CAAClZ,KAAK,KAAKe,MAAM,OAAOqY,UAAQ,EAAAzU,UAC1CF,EAAAA,EAAAA,KAAC2pE,GAAAA,GAAS,SAGd3pE,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAC3I,MAAO,CAAE4T,SAAU,QAASvV,UACpCF,EAAAA,EAAAA,KAAA,OACE6B,MAAO,CACL8N,SAAU,IACV8F,SAAU,OACVC,WAAY,SACZC,aAAc,WACdC,SAAU,SACVtZ,MAAOD,EAAmB,SAC1B6D,UAEFF,EAAAA,EAAAA,KAAC85G,EAAAA,GAAK,CAAA55G,UACJoF,EAAAA,EAAAA,MAACsD,GAAAA,EAAK,CAAA1I,SAAA,EACJF,EAAAA,EAAAA,KAACgS,GAAAA,EAAS,CAAA9R,SAAC,gBACD,IAAT8T,IAAc1O,EAAAA,EAAAA,MAAC0M,GAAAA,EAAS,CAAA9R,SAAA,CAAEuoL,EAAgB,OAChC,IAAV10K,IAAezO,EAAAA,EAAAA,MAAC0M,GAAAA,EAAS,CAAA9R,SAAA,CAAEwoL,EAAiB,OAChC,IAAZ50K,IAAiBxO,EAAAA,EAAAA,MAAC0M,GAAAA,EAAS,CAAA9R,SAAA,CAAEyoL,EAAmB,QAChDrjL,EAAAA,EAAAA,MAAC0M,GAAAA,EAAS,CAAA9R,SAAA,CAAE0oL,EAAmB,kBAO9C,CCvEO,SAASC,GAA2B/rL,GACzC,MAAM,IAAQqK,EAAAA,EAAAA,MAEd,GAAIrK,EAAMo+D,kBAAkB2tG,UAC1B,OACE7oK,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAMvH,CAAC,YACP5K,MAAO,MACPkZ,UAAW,SACXtS,MAAMlD,EAAAA,EAAAA,KAACk3B,GAAAA,GAAqB,MAKlC,GAAIp6B,EAAMo+D,kBAAkB0oE,YAC1B,OACE5jI,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAMvH,CAAC,WACP5K,MAAO,SACPkZ,UAAW,UACXtS,MAAMlD,EAAAA,EAAAA,KAACssC,GAAAA,GAAuB,MAKpC,OAAQxvC,EAAMo+D,kBAAkBxwB,QAC9B,IAAK,MACL,IAAK,UACL,IAAK,UACL,IAAK,UACH,OAAI5tC,EAAMo+D,kBAAkBotH,qBAExBtoL,EAAAA,EAAAA,KAACooL,GAA6B,CAC5BE,oBAAqBxrL,EAAMo+D,kBAAkBotH,uBAKjDtoL,EAAAA,EAAAA,KAACmV,GAAQ,CAAC1G,KAAMvH,CAAC,gBAAiB5K,MAAO,OAAQkZ,UAAW,OAAQtS,MAAMlD,EAAAA,EAAAA,KAAC2pE,GAAAA,GAAS,MAExF,IAAK,aACH,OACE3pE,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAMvH,CAAC,WACP5K,MAAO,QACPkZ,UAAW,UACXtS,MAAMlD,EAAAA,EAAAA,KAAC4qC,GAAAA,GAAe,MAG5B,IAAK,SACH,OACE5qC,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAMvH,CAAC,SACP5K,MAAO,MACPkZ,UAAW,SACXtS,MAAMlD,EAAAA,EAAAA,KAACk3B,GAAAA,GAAqB,MAGlC,IAAK,QACH,OACEl3B,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAMvH,CAAC,QACP5K,MAAO,MACPkZ,UAAW,SACXtS,MAAMlD,EAAAA,EAAAA,KAACk3B,GAAAA,GAAqB,MAGlC,QACE,OACEl3B,EAAAA,EAAAA,KAACmV,GAAQ,CACP1G,KAAMvH,CAAC,UACP5K,MAAO,SACPkZ,UAAW,UACXtS,MAAMlD,EAAAA,EAAAA,KAACssC,GAAAA,GAAuB,MAIxC,CC3EO,SAASw8I,GAA4BziK,GAI1C,MAAM,IAAQlf,EAAAA,EAAAA,MACR6zD,EAAerW,KACfo0C,EAAW9pB,IAAY,GAMvB5sC,EAAa8sC,GAAc,IAC5B9oD,EACH1f,SAPgB7K,EAAAA,EAAAA,cACfo/D,GACCF,EAAaJ,GAASU,wBAAyB,CAAEjX,OAAQ,CAAElnD,GAAI+9D,EAAkB/9D,OACnF,CAAC69D,MA8BH,OAxBqB32D,EAAAA,EAAAA,UACnB,IAAM,CACJ00F,EACA12D,EACA,CACEvhB,OAAQ5Z,EAAE,WACV4b,KAAOo4C,GACLA,EAAkBqqD,UAAWvlH,EAAAA,EAAAA,KAACqS,GAAY,CAAC3X,MAAOwgE,EAAkBqqD,UACtEnmH,KAAM,UACNikC,KAAM,YACN0B,qBAAsB,OACtB/hB,MAAOP,GAAkBQ,QAE3B,CACEnC,OAAQ5Z,EAAE,UACV4b,KAAOo4C,IACLl7D,EAAAA,EAAAA,KAAC6oL,GAA0B,CAAC3tH,kBAAmBA,IAEjD97D,KAAM,SACN2lC,qBAAsB,UAG1B,CAACg0D,EAAU12D,EAAYn7B,GAG3B,CC/CO,SAASo0D,KACd,MAAMjX,GAASgZ,EAAAA,GAAAA,MACPn9C,KAAM6oK,GAAqB1yH,GACjC5E,EAAM,sBACNpN,EAAOlnD,IAEH0a,EAAUixK,KAChB,OAAOC,GACL/oL,EAAAA,EAAAA,KAAC0hB,GAAW,CAAAxhB,UACVF,EAAAA,EAAAA,KAACwjB,GAAsB,CAACnH,KAAM0sK,EAAkBlxK,QAASA,MAEzD,IACN,C,4BCRO,SAASmxK,GACd9/I,GAEA,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR0kC,EAAsBi9I,GAA4B,CACtDjzK,cAAc,EACd0mD,aAAa,IAETwoE,EAAyB51D,GAAc,CAAEt5D,cAAc,EAAM0mD,aAAa,IAC1EvzB,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAAC0gI,IAAyB,CAACA,IACzDnlE,EAAaH,KACblQ,EAAcyT,KACdimH,EAAiB/tH,IACrB,GAAIA,EAAkB2tG,UACpB,OAAO3hK,EAAE,qEAEX,OAAQg0D,EAAkBxwB,QACxB,IAAK,WACH,OAAOxjC,EAAE,mFACX,IAAK,aACH,OAAOA,EAAE,iFACX,IAAK,SACH,OAAOA,EAAE,+EACX,IAAK,QACH,OAAOA,EAAE,4EACX,QACE,OAAKg0D,EAAkBguH,oBAEhB,GADEhiL,EAAE,4EAEf,EAkCF,OA/BkCiiL,IAChC,MAAMC,EACJD,EAAmBhrL,OAAO8qL,GAE5BrpH,EAAW,CACTviE,MAAO6J,EAAE,6BAA8B,CAAEoV,MAAO6sK,EAAmB3lL,SACnEzF,YAAamJ,EAAE,4EAA6E,CAC1FoV,MAAO6sK,EAAmB3lL,OAAS4lL,EAA+B5lL,SAEpEwoC,iBAAkB9kC,EAAE,6BAA8B,CAAEoV,MAAO6sK,EAAmB3lL,SAC9Es1B,MAAOqwJ,EAAmB/pL,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QAClEwkB,aAAcwnK,EAA+B5lL,OACzC,IACM4lL,EAA+B5lL,OAC/B,CACE0D,EAAE,mEAAoE,CACpEoV,MAAO8sK,EAA+B5lL,UAG1C,SAEN7B,EACJmqC,oBAAsBzvB,GAA2B4sK,EAAc5sK,GAC/D0c,MAAO62B,GACP/jB,sBACA7C,gBACAE,aACAD,SAAWiyB,GACT3L,EAAYkC,EAAM,uBAAuByJ,EAAkB/9D,GAAGqhB,sBAAuB,CAAC,IACxF,CAGN,CCjEO,SAAS6qK,GACdngJ,GAEA,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR0kC,EAAsBi9I,GAA4B,CACtDjzK,cAAc,EACd0mD,aAAa,IAETwoE,EAAyB51D,GAAc,CAAEt5D,cAAc,EAAM0mD,aAAa,IAC1EvzB,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAAC0gI,IAAyB,CAACA,IACzDnlE,EAAaH,KACb6pH,EAAgCpuH,GAC/BA,EAAkBC,eAAe6iC,kBAAkB3yC,OAEjD,GADEnkD,EAAE,0EAsCb,OAlCiCiiL,IAC/B,MAAMI,EACJJ,EAAmBhrL,OAAOmrL,GAE5B1pH,EAAW,CACTviE,MAAO6J,EAAE,4BAA6B,CAAEoV,MAAO6sK,EAAmB3lL,SAClEzF,YAAamJ,EAAE,2EAA4E,CACzFoV,MAAO6sK,EAAmB3lL,OAAS+lL,EAA6C/lL,SAElFwoC,iBAAkB9kC,EAAE,4BAA6B,CAAEoV,MAAO6sK,EAAmB3lL,SAC7Es1B,MAAOqwJ,EAAmB/pL,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QAClEwkB,aAAc2nK,EAA6C/lL,OACvD,IACM+lL,EAA6C/lL,OAC7C,CACE0D,EACE,kGACA,CACEoV,MAAOitK,EAA6C/lL,UAI1D,SAEN7B,EACJmqC,oBAAsBzvB,GAA2BitK,EAA6BjtK,GAC9E0c,MAAO62B,GACP/jB,sBACA7C,gBACAE,aACAD,SAAUA,CAACiyB,EAAqCzvC,IAC9CgkC,GAAcgC,EAAM,uBAAuByJ,EAAkB/9D,GAAGqhB,cAAeiN,IACjF,CAGN,CCnDO,SAAS+9J,GACdtgJ,GAEA,MAAM,IAAQ/hC,EAAAA,EAAAA,MACR0kC,EAAsBi9I,GAA4B,CACtDjzK,cAAc,EACd0mD,aAAa,IAETwoE,EAAyB51D,GAAc,CAAEt5D,cAAc,EAAM0mD,aAAa,IAC1EvzB,GAAgB3kC,EAAAA,EAAAA,UAAQ,IAAM,CAAC0gI,IAAyB,CAACA,IACzDnlE,EAAaH,KACblQ,EAAcyT,KACdymH,EAAcvuH,IAClB,GAAIA,EAAkB2tG,UACpB,OAAO3hK,EAAE,mEAEX,OAAQg0D,EAAkBxwB,QACxB,IAAK,WACH,OAAOxjC,EAAE,iFACX,IAAK,aACH,OAAOA,EAAE,+EACX,IAAK,SACH,OAAOA,EAAE,6EACX,IAAK,QACH,OAAOA,EAAE,0EACX,QACE,OAAKg0D,EAAkBguH,oBAEhB,GADEhiL,EAAE,0EAEf,EAkCF,OA/B+BiiL,IAC7B,MAAMO,EACJP,EAAmBhrL,OAAOsrL,GAE5B7pH,EAAW,CACTviE,MAAO6J,EAAE,0BAA2B,CAAEoV,MAAO6sK,EAAmB3lL,SAChEzF,YAAamJ,EAAE,yEAA0E,CACvFoV,MAAO6sK,EAAmB3lL,OAASkmL,EAA4ClmL,SAEjFwoC,iBAAkB9kC,EAAE,0BAA2B,CAAEoV,MAAO6sK,EAAmB3lL,SAC3Es1B,MAAOqwJ,EAAmB/pL,MAAK,CAAC6sC,EAAGC,IAAMV,GAAeS,EAAE7uC,KAAM8uC,EAAE9uC,QAClEwkB,aAAc8nK,EAA4ClmL,OACtD,IACMkmL,EAA4ClmL,OAC5C,CACE0D,EAAE,iEAAkE,CAClEoV,MAAOotK,EAA4ClmL,UAGvD,SAEN7B,EACJmqC,oBAAsBzvB,GAA2BotK,EAAWptK,GAC5D0c,MAAO62B,GACP/jB,sBACA7C,gBACAE,aACAD,SAAWiyB,GACT3L,EAAYkC,EAAM,uBAAuByJ,EAAkB/9D,GAAGqhB,mBAAoB,CAAC,IACrF,CAGN,CC/DO,SAASmrK,GACdzgJ,GAEA,MAAM,IAAQ/hC,EAAAA,EAAAA,MACRyiL,EAA2BZ,GAA4B9/I,GACvD2gJ,EAA0BR,GAA2BngJ,GACrD4gJ,EAAwBN,GAAyBtgJ,GACjDqmB,EAAcyT,KAEpB,OAAO3+D,EAAAA,EAAAA,UAAyC,KAC9C,MAkBMolL,EAAcvuH,GACbA,EAAkBguH,oBAGhB,GAFEhiL,EAAE,0EA8Db,MAzDiD,CAC/C,CACEzD,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/B0C,QAASuB,EAAAA,GAAcC,QACvB4F,UAAU,EACVvH,KAAM6mL,GAAAA,GACNzsL,MAAO4J,EAAE,WACTnG,WAAam6D,GAtBMA,IAChBA,EAAkBguH,oBAGhB,GAFEhiL,EAAE,4EAoB4C+hL,CAAc/tH,GACnEx6D,SAAWw6D,GACT,CAAC,aAAc,SAAU,QAAS,YAAY3yD,SAAS2yD,EAAkBxwB,QAC3E/jC,QAAUu0D,GACR0uH,EAAyB,CAAC1uH,KAE9B,CACEz3D,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/B0C,QAASuB,EAAAA,GAAcyD,UACvBoC,UAAU,EACVvH,KAAM8mL,GAAAA,GACN1iL,UAAU,EACVhK,MAAO4J,EAAE,QACTnG,WAAam6D,GAAwCuuH,EAAWvuH,GAChEx6D,SAAWw6D,GACT,CAAC,aAAc,SAAU,QAAS,YAAY3yD,SAAS2yD,EAAkBxwB,QAC3E/jC,QAAUu0D,GACR4uH,EAAsB,CAAC5uH,KAE3B,CACEz3D,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/B0C,QAASuB,EAAAA,GAAcyD,UACvBoC,UAAU,EACVvH,KAAM0mE,GAAAA,GACNtsE,MAAO4J,EAAE,UACTnG,WAAam6D,GAAwCuuH,EAAWvuH,GAChEx6D,SAAWw6D,GACT,CAAC,aAAc,SAAU,QAAS,YAAY3yD,SAAS2yD,EAAkBxwB,QAC3E/jC,QAAUu0D,GACR3L,EACEkC,EAAM,kBAAkByJ,GAAmBC,gBAAgBC,cAAcj+D,GAAGqhB,qBAC5E,CAAC,IAIP,CACE/a,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoBsG,OAC/BuC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,4BACTnG,WAAam6D,GA3EqBA,IAC/B,CAAC,aAAc,SAAU,QAAS,YAAY3yD,SAAS2yD,EAAkBxwB,QAKzEwwB,EAAkBC,eAAe6iC,kBAAkB3yC,OAEjD,GADEnkD,EAAE,2EALFA,EACL,qFAyEA+iL,CAA6B/uH,GAC/Bv0D,QAAUu0D,GACR2uH,EAAwB,CAAC3uH,IAC3B5zD,UAAU,GAGA,GACb,CAACJ,EAAG0iL,EAA0BE,EAAuBv6H,EAAas6H,GACvE,CC1FO,SAASK,KACd,MAAM,EAAEhjL,IAAMC,EAAAA,EAAAA,MACRk9C,GAASgZ,EAAAA,GAAAA,MAEbrwD,MAAOm9K,EACPjqK,KAAM6oK,EAAgB,QACtBxzH,GACEc,GAA6B5E,EAAM,sBAAuBpN,EAAOlnD,IAE/DitL,EAAgBrB,GAAkB5tH,gBAAgBwqD,qBAAqBxoH,IACrE+iB,KAAMmqK,EAAar9K,MAAOs9K,GAAqBr0H,GACrDm0H,EAAgB34H,EAAM,kBAAkB24H,EAAc5rK,cAAgB,IAGlEomC,EAAaT,KACbsV,EAAiBm9D,GAAsB,qBACvCtzH,EAAUqmL,GAA+Bp0H,GAEzCvoD,EAAQm9K,GAAyBG,EACvC,OAAIt9K,GAAchN,EAAAA,EAAAA,KAACi9D,GAAQ,CAACjwD,MAAOA,EAAOkwD,cAAe3H,IACpDwzH,GAAqBsB,GAGxB/kL,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO0rL,GAAkB3rL,KACzBgjD,YAAa,CACX,CAAE9iD,MAAO4J,EAAE,sBAAuBY,GAAI88C,EAAWgW,GAAS2vH,oBAC1D,CAAEjtL,MAAOyrL,GAAkB3rL,OAE7BujD,eACE3gD,EAAAA,EAAAA,KAACmJ,GAAW,CACV7F,QAAS,IAAIm2D,KAAmBn2D,GAChCF,SAAU6F,GAAAA,GAAiBC,MAC3B3I,aAAcwoL,OAIpB/oL,EAAAA,EAAAA,KAAC09D,GAAc,CACbe,QAAS,CACPnhE,MAAO4J,EAAE,8BACTiuB,KAAMylC,GAAS2vH,kBACf7rH,oBAAqB,sBAEvBvU,KAAM,CACJ,CAAE7sD,MAAO4J,EAAE,WAAYiuB,KAAMylC,GAASU,yBACtC,CAAEh+D,MAAO4J,EAAE,wBAAyBiuB,KAAMylC,GAAS4vH,qCAErDnmI,OAAQ,CACNlnD,GAAIknD,EAAOlnD,IAAM,EACjBstL,OAAQ1B,GAAkB5tH,gBAAgBC,cAAcj+D,GACxDglF,SAAU,YAEZ/iB,gBAAiB,CAAE+Z,IAAKkxG,SAjCgBrqL,EAAAA,EAAAA,KAACkqD,GAAW,CAAC9J,aAAW,EAAC+J,MAAI,GAqC7E,CCzDO,SAASogI,KACd,MAAM,EAAErjL,IAAMC,EAAAA,EAAAA,MAERipB,EChBiBipE,GAAyB,CAC9CC,YAAa,qBACbE,mBAAoB,CAClBp8F,KAAM,CAAEi9F,QAAS,sBACjBl9F,GAAI,CAAEk9F,QAAS,uBAEjBd,cAAe,CAAC,OAAQ,QDWpBr3D,EAAe4mJ,KACfh8I,EAAO6zB,GAA6B,CACxCvc,IAAKqN,EAAM,uBACXrhC,iBACA8R,iBAEIvM,EEhBD,SAA2CmX,GAChD,MAAM,IAAQ3lC,EAAAA,EAAAA,MACRyiL,EAA2BZ,GAA4Bl8I,EAAK00B,yBAC5DsoH,EAAwBN,GAAyB18I,EAAK00B,yBACtDqoH,EAA0BR,GAA2Bv8I,EAAK00B,yBAEhE,OAAOn9D,EAAAA,EAAAA,UACL,IAAM,CACJ,CACEZ,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAM6mL,GAAAA,GACNzsL,MAAO4J,EAAE,WACTP,QAASijL,EACTn/K,UAAU,EACV1J,WACgC,IAA9B+rC,EAAKhsC,cAAc0C,OAAe0D,EAAE,+CAA4CvF,GAEpF,CACE8B,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAM8mL,GAAAA,GACN1sL,MAAO4J,EAAE,QACTP,QAASmjL,EACTxiL,UAAU,EACVmD,UAAU,EACV1J,WACgC,IAA9B+rC,EAAKhsC,cAAc0C,OAAe0D,EAAE,+CAA4CvF,GAEpF,CACE8B,KAAMrJ,EAAemL,OACrB/E,UAAWnG,EAAoB2G,SAC/BkC,KAAMo9D,GAAAA,GACNhjE,MAAO4J,EAAE,6BACTP,QAASkjL,EACTviL,UAAU,KAGd,CACEJ,EACA0iL,EACA98I,EAAKhsC,cAAc0C,OACnBsmL,EACAD,GAGN,CF9ByBa,CAAkC59I,GACnD3K,EAAawnJ,GAA+B78I,EAAK00B,yBACvDjE,GAAqB,QACrB,MAAMzE,EAASvC,MAET,QAAEhB,GAAYzoB,EAqBpB,OALAurB,GACE,CAAE3nB,QAAS,CAAC,mBAAoBgqB,KAAM,CAAC,oBAhBV5+D,EAAAA,EAAAA,cAC5BuR,IAEQ,SADCA,GAAS4tD,YAGN,sBADC5tD,GAAS5J,MAER8xD,GAIb,GAEF,CAACA,MASDjwD,EAAAA,EAAAA,MAAC67C,GAAU,CAAAjhD,SAAA,EACTF,EAAAA,EAAAA,KAACygD,GAAU,CACTpjD,MAAO6J,EAAE,sBACT+5C,eAAgB/5C,EAAE,sBAClB85C,UAAW95C,EACT,yHACA,CAAE4/G,QAzCcx8E,QA2ClB4W,aAAc2X,GAAcC,EAAQ,aACpCl9C,YAAa1U,EACX,yHACA,CAAE4/G,QA9Ccx8E,QAgDlBqW,eAAe3gD,EAAAA,EAAAA,KAACyjE,GAAkB,CAAChgE,KAAM,yBAE3CzD,EAAAA,EAAAA,KAACkkC,GAAS,CACR9T,eAAgBA,EAChB8R,aAAcA,EACdvM,eAAgBA,EAChBwM,WAAYA,EACZ8C,gBAAiB/9B,EAAE,oCACnBg+B,gBAAiBh+B,EAAE,6CACnBi+B,sBAAuBj+B,EACrB,0EAEE4lC,EACJ1K,gBAAiBl7B,EAAE,yBAI3B,CG/EO,SAASyjL,KACd,MAAMptI,ECoCD,WACL,MAAM,EAAEr2C,IAAMC,EAAAA,EAAAA,MACRyjL,ECOD,WACL,MAAM,EAAE1jL,IAAMC,EAAAA,EAAAA,MAsQd,OArQwB9C,EAAAA,EAAAA,UACtB,KAAM,CACJlH,GAAIy9D,GAASooD,YACb1lH,MAAO4J,EAAE,eACTw2C,KAAM,cACNx9C,SAAU,CACR,CACE/C,GAAIy9D,GAASiwH,4BACbntI,KAAM,iEACNxG,SACEl3C,EAAAA,EAAAA,KAACurJ,GAAY,CACXzE,iBAAkBr1F,EAAM,sBACxBk6F,mBAAoB,CAClB,CAAEruJ,MAAO4J,EAAE,eAAgBY,GAAI8yD,GAASooD,aACxC,CAAE7lH,GAAI,YAAa2K,GAAI8yD,GAAS82B,kBAChC,CACEv0F,GAAI,oBACJG,MAAO4J,EAAE,qBACTY,GAAI8yD,GAASuvE,kBAEf,CAAEhtI,GAAI,OAAQ2K,GAAI8yD,GAASw6B,uBAC3B,CAAE93F,MAAO4J,EAAE,aAAc/J,GAAI,YAAa2K,GAAI8yD,GAASyiF,2BAEzD5+E,QAAS,CACPnhE,MAAO4J,EAAE,qBACTiuB,KAAMylC,GAASyiF,yBACf3+E,oBAAqB,uBAEvBvU,KAAM,CACJ,CACE7sD,MAAO4J,EAAE,WACTiuB,KAAMylC,GAAS0pD,mCAKvBpkH,SAAU,CACR,CACE/C,GAAIy9D,GAAS0pD,+BACb5mE,KAAM,UACNxG,SAASl3C,EAAAA,EAAAA,KAACmqJ,GAAe,OAI/B,CACEhtJ,GAAIy9D,GAAS2tF,8BACb7qG,KAAM,0DACNxG,SAASl3C,EAAAA,EAAAA,KAACupJ,GAAiB,CAACzC,iBAAkBr1F,EAAM,yBAEtD,CACEt0D,GAAIy9D,GAAS4tF,4BACb9qG,KAAM,qEACNxG,SAASl3C,EAAAA,EAAAA,KAACo1J,GAAkB,CAACtO,iBAAkBr1F,EAAM,yBAEvD,CACEt0D,GAAIy9D,GAASwiF,oBACb1/F,KAAM,yCACNxG,SAASl3C,EAAAA,EAAAA,KAACo9I,GAAmB,IAC7Bl9I,SAAU,CACR,CACE/C,GAAIy9D,GAASw6B,sBACb13C,KAAM,UACNxG,SAASl3C,EAAAA,EAAAA,KAACoxF,GAAsB,KAElC,CACEj0F,GAAIy9D,GAAS0iF,6BACb5/F,KAAM,gBACNxG,SAASl3C,EAAAA,EAAAA,KAAC6xJ,GAAqB,CAACt2B,aAAa,uBAE/C,CACEp+H,GAAIy9D,GAASyiF,yBACb3/F,KAAM,YACNxG,SACEl3C,EAAAA,EAAAA,KAAC2zJ,GAAa,CACZS,qBAAsBx5F,GAAS2tF,8BAC/BhtB,aAAa,oBACbw4B,gBAAiBtiG,EAAM,0BAMjC,CACEt0D,GAAIy9D,GAAS6xF,iBACb/uG,KAAM,0BACNxG,SAASl3C,EAAAA,EAAAA,KAAC2kI,GAAU,KAEtB,CACExnI,GAAIy9D,GAASspE,kBACbxmF,KAAM,yCACNxG,SAASl3C,EAAAA,EAAAA,KAACmkI,GAAQ,KAEpB,CACEhnI,GAAIy9D,GAAS62F,kCACb/zG,KAAM,yDACNxG,SAASl3C,EAAAA,EAAAA,KAACovJ,GAAkB,KAE9B,CACEjyJ,GAAIy9D,GAASyyE,oBACb3vF,KAAM,kCACNxG,SAASl3C,EAAAA,EAAAA,KAACqtI,GAAmB,KAE/B,CACElwI,GAAIy9D,GAASkwH,mBACbptI,KAAM,uCACNxG,SAASl3C,EAAAA,EAAAA,KAAC6tJ,GAAS,IACnB3tJ,SAAU,CACR,CACE/C,GAAIy9D,GAASiwE,sBACbntF,KAAM,UACNxG,SAASl3C,EAAAA,EAAAA,KAACmwJ,GAAY,KAExB,CACEhzJ,GAAIy9D,GAASozF,4BACbtwG,KAAM,gBACNxG,SAASl3C,EAAAA,EAAAA,KAACqxJ,GAAkB,KAE9B,CACEl0J,GAAIy9D,GAASqzF,mBACbvwG,KAAM,eACNxG,SAASl3C,EAAAA,EAAAA,KAACuwJ,GAAU,OAI1B,CACEpzJ,GAAIy9D,GAASg2F,sBACblzG,KAAM,uDACNxG,SAASl3C,EAAAA,EAAAA,KAAC2kI,GAAU,KAEtB,CACExnI,GAAIy9D,GAASszE,mBACbxwF,KAAM,2CACNxG,SAASl3C,EAAAA,EAAAA,KAACmvJ,GAAS,KAErB,CACEhyJ,GAAIy9D,GAAS8yF,qBACbhwG,KAAM,gCACNxG,SAASl3C,EAAAA,EAAAA,KAACkvJ,GAAW,KAEvB,CACE/xJ,GAAIy9D,GAAS0uE,cACb5rF,KAAM,uBACNxG,SAASl3C,EAAAA,EAAAA,KAACspI,GAAa,IACvBppI,SAAU,CACR,CACE/C,GAAIy9D,GAAS82B,iBACbh0C,KAAM,UACNxG,SAASl3C,EAAAA,EAAAA,KAAC0xF,GAAgB,KAE5B,CACEv0F,GAAIy9D,GAASqvE,gBACbvsF,KAAM,SACNxG,SAASl3C,EAAAA,EAAAA,KAACiqI,GAAe,KAE3B,CACE9sI,GAAIy9D,GAASsvE,eACbxsF,KAAM,QACNxG,SAASl3C,EAAAA,EAAAA,KAACkqI,GAAc,KAE1B,CACE/sI,GAAIy9D,GAASuvE,iBACbzsF,KAAM,UACNxG,SAASl3C,EAAAA,EAAAA,KAACmqI,GAAgB,KAE5B,CACEhtI,GAAIy9D,GAASwvE,cACb1sF,KAAM,OACNxG,SAASl3C,EAAAA,EAAAA,KAACoqI,GAAa,KAEzB,CACEjtI,GAAIy9D,GAASyvE,sBACb3sF,KAAM,YACNxG,SAASl3C,EAAAA,EAAAA,KAACqqI,GAAqB,KAEjC,CACEltI,GAAIy9D,GAASovE,oBACbtsF,KAAM,cACNxG,SAASl3C,EAAAA,EAAAA,KAACgqI,GAAmB,KAE/B,CACE7sI,GAAIy9D,GAASmvE,oBACbrsF,KAAM,cACNxG,SAASl3C,EAAAA,EAAAA,KAAC+pI,GAAmB,OAInC,CACE5sI,GAAIy9D,GAASszF,kBACbxwG,KAAM,qCACNxG,SAASl3C,EAAAA,EAAAA,KAACkuJ,GAAiB,IAC3BhuJ,SAAU,CACR,CACE/C,GAAIy9D,GAASqwE,qBACbvtF,KAAM,UACNxG,SAASl3C,EAAAA,EAAAA,KAACirI,GAAoB,KAEhC,CACE9tI,GAAIy9D,GAAS4yE,oBACb9vF,KAAM,SACNxG,SAASl3C,EAAAA,EAAAA,KAACwtI,GAAmB,CAACr4G,KAAK,eAErC,CACEh4B,GAAIy9D,GAASuzF,kBACbzwG,KAAM,OACNxG,SAASl3C,EAAAA,EAAAA,KAACmuJ,GAAiB,KAE7B,CACEhxJ,GAAIy9D,GAASwzE,mBACb1wF,KAAM,QACNxG,SAASl3C,EAAAA,EAAAA,KAACouI,GAAkB,CAACj5G,KAAK,iBAIxC,CACEh4B,GAAIy9D,GAASquE,cACbvrF,KAAM,2BACNxG,SAASl3C,EAAAA,EAAAA,KAACipI,GAAa,KAEzB,CACE9rI,GAAIy9D,GAASipD,gBACbnmE,KAAM,mBACNxG,SAASl3C,EAAAA,EAAAA,KAAC6jH,GAAe,CAACm0B,cAAc,MAE1C,CACE76I,GAAIy9D,GAASgqE,qBACblnF,KAAM,yBACNxG,SAASl3C,EAAAA,EAAAA,KAAC6jH,GAAe,CAACm0B,cAAc,WAE1C,CACE76I,GAAIy9D,GAASu7E,2BACbz4F,KAAM,+BACNxG,SAASl3C,EAAAA,EAAAA,KAAC6jH,GAAe,CAACm0B,cAAc,iBAE1C,CACE76I,GAAIy9D,GAAS86F,kBACbh4G,KAAM,sBACNxG,SAASl3C,EAAAA,EAAAA,KAAC01J,GAAiB,KAE7B,CACEv4J,GAAIy9D,GAAS66F,kBACb/3G,KAAM,sBACNxG,SAASl3C,EAAAA,EAAAA,KAACy1J,GAAiB,KAE7B,CACE/3G,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACgjH,GAAW,KAEvB,CACE7lH,GAAIy9D,GAASoiF,oBACbt/F,KAAM,8CACNxG,SAASl3C,EAAAA,EAAAA,KAAC8vJ,GAAmB,KAE/B,CACE3yJ,GAAIy9D,GAASwyF,oBACb1vG,KAAM,kCACNxG,SAASl3C,EAAAA,EAAAA,KAAC4vJ,GAAqB,SAIrC,CAAC1oJ,GAGL,CD/Q6B6jL,GACrBC,EE7BD,WACL,MAAM,EAAE9jL,IAAMC,EAAAA,EAAAA,MAoDd,OAnDmB9C,EAAAA,EAAAA,UACjB,KAAM,CACJlH,GAAIy9D,GAASkoD,MACbxlH,MAAO4J,EAAE,SACTw2C,KAAM,QACNx9C,SAAU,CACR,CACE/C,GAAIy9D,GAASwpE,SACb1mF,KAAM,MACNxG,SAASl3C,EAAAA,EAAAA,KAACokI,GAAQ,IAClBlkI,SAAU,CACR,CACE/C,GAAIy9D,GAASitD,YACbnqE,KAAM,UACNxG,SAASl3C,EAAAA,EAAAA,KAACirI,GAAoB,KAEhC,CACE9tI,GAAIy9D,GAAS0pE,UACb5mF,KAAM,QACNxG,SAASl3C,EAAAA,EAAAA,KAACouI,GAAkB,CAACj5G,KAAK,UAEpC,CACEh4B,GAAIy9D,GAAS2pE,WACb7mF,KAAM,SACNxG,SAASl3C,EAAAA,EAAAA,KAACwtI,GAAmB,CAACr4G,KAAK,UAErC,CACEh4B,GAAIy9D,GAAS4pE,SACb9mF,KAAM,OACNxG,SAASl3C,EAAAA,EAAAA,KAACwkI,GAAQ,OAIxB,CACErnI,GAAIy9D,GAASupE,SACbzmF,KAAM,WACNxG,SAASl3C,EAAAA,EAAAA,KAACmkI,GAAQ,KAEpB,CACEhnI,GAAIy9D,GAAS+pE,WACbjnF,KAAM,SACNxG,SAASl3C,EAAAA,EAAAA,KAAC2kI,GAAU,KAEtB,CACEjnF,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAAC8iH,GAAK,SAIrB,CAAC57G,GAGL,CFzBwB+jL,GAChBC,EGvBD,WACL,MAAM,EAAEhkL,IAAMC,EAAAA,EAAAA,MAyHd,OAxHsB9C,EAAAA,EAAAA,UACpB,KAAM,CACJlH,GAAIy9D,GAASmoD,SACbzlH,MAAO4J,EAAE,YACTw2C,KAAM,WACNx9C,SAAU,CACR,CACE/C,GAAIy9D,GAAS6rD,cACb/oE,KAAM,SACNxG,SAASl3C,EAAAA,EAAAA,KAACymH,GAAa,KAEzB,CACEtpH,GAAIy9D,GAAS0zG,YACb5wH,KAAM,WACNxG,SAASl3C,EAAAA,EAAAA,KAACsuK,GAAW,KAEvB,CACEnxK,GAAIy9D,GAASiuF,sBACbnrG,KAAM,uBACNxG,SAASl3C,EAAAA,EAAAA,KAACupJ,GAAiB,CAACzC,iBAAkBr1F,EAAM,gBAEtD,CACEt0D,GAAIy9D,GAASkuF,oBACbprG,KAAM,kCACNxG,SAASl3C,EAAAA,EAAAA,KAACo1J,GAAkB,CAACtO,iBAAkBr1F,EAAM,gBAEvD,CACEt0D,GAAIy9D,GAASuwH,oBACbztI,KAAM,6BACNxG,SACEl3C,EAAAA,EAAAA,KAACurJ,GAAY,CACXzE,iBAAkBr1F,EAAM,aACxBk6F,mBAAoB,CAClB,CAAEruJ,MAAO4J,EAAE,YAAaY,GAAI8yD,GAASmoD,UACrC,CAAE5lH,GAAI,OAAQ2K,GAAI8yD,GAAS80G,aAC3B,CAAEpyK,MAAO4J,EAAE,aAAc/J,GAAI,YAAa2K,GAAI8yD,GAASmuF,mBAEzDtqF,QAAS,CACPnhE,MAAO4J,EAAE,qBACTiuB,KAAMylC,GAASmuF,iBACfrqF,oBAAqB,qBAEvBvU,KAAM,CACJ,CACE7sD,MAAO4J,EAAE,WACTiuB,KAAMylC,GAAS6pD,2BAKvBvkH,SAAU,CACR,CACE/C,GAAIy9D,GAAS6pD,uBACb/mE,KAAM,UACNxG,SAASl3C,EAAAA,EAAAA,KAACmqJ,GAAe,OAK/B,CACEhtJ,GAAIy9D,GAAS80G,YACbhyH,KAAM,MACNxG,SAASl3C,EAAAA,EAAAA,KAAC0vK,GAAW,IACrBxvK,SAAU,CACR,CAAE/C,GAAIy9D,GAASg3B,eAAgBl0C,KAAM,UAAWxG,SAASl3C,EAAAA,EAAAA,KAAC4xF,GAAc,KACxE,CACEz0F,GAAIy9D,GAAS8zG,oBACbhxH,KAAM,gBACNxG,SAASl3C,EAAAA,EAAAA,KAAC0uK,GAAmB,KAE/B,CACEvxK,GAAIy9D,GAASs1G,qBACbxyH,KAAM,gBACNxG,SAASl3C,EAAAA,EAAAA,KAAC6xJ,GAAqB,CAACt2B,aAAa,cAE/C,CACEp+H,GAAIy9D,GAASmuF,iBACbrrG,KAAM,YACNxG,SACEl3C,EAAAA,EAAAA,KAAC2zJ,GAAa,CACZS,qBAAsBx5F,GAASiuF,sBAC/BttB,aAAa,WACbw4B,gBAAiBtiG,EAAM,eAI7B,CACEt0D,GAAIy9D,GAASo1G,aACbtyH,KAAM,cACNxG,SAASl3C,EAAAA,EAAAA,KAACgwK,GAAY,KAExB,CACE7yK,GAAIy9D,GAASq1G,aACbvyH,KAAM,cACNxG,SAASl3C,EAAAA,EAAAA,KAACiwK,GAAY,KAExB,CACEvyH,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACorL,GAAAA,GAAQ,CAACtjL,GAAG,UAAUnN,SAAO,OAI7C,CACEwC,GAAIy9D,GAASy1G,gBACb3yH,KAAM,4BACNxG,SAASl3C,EAAAA,EAAAA,KAACswK,GAAkB,KAE9B,CACEnzK,GAAIy9D,GAASw1G,gBACb1yH,KAAM,4BACNxG,SAASl3C,EAAAA,EAAAA,KAACuwK,GAAkB,KAE9B,CACE7yH,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAAC+iH,GAAQ,SAIxB,CAAC77G,GAGL,CHpG2BmkL,GACnBC,EIhCD,WACL,MAAM,EAAEpkL,IAAMC,EAAAA,EAAAA,MA8Dd,OA7DyB9C,EAAAA,EAAAA,UACvB,KAAM,CACJlH,GAAIy9D,GAAS+3D,YACbr1H,MAAO4J,EAAE,eACTw2C,KAAM,cACNx9C,SAAU,CACR,CACE/C,GAAIy9D,GAASk3D,iBACbp0E,KAAM,SACNxG,SAASl3C,EAAAA,EAAAA,KAAC8xH,GAAgB,KAE5B,CACE30H,GAAIy9D,GAASy4D,eACb31E,KAAM,WACNxG,SAASl3C,EAAAA,EAAAA,KAACqzH,GAAc,KAE1B,CACEl2H,GAAIy9D,GAASg9D,eACbl6E,KAAM,MACNxG,SAASl3C,EAAAA,EAAAA,KAAC43H,GAAc,IACxB13H,SAAU,CACR,CACE/C,GAAIy9D,GAASoU,kBACbtxB,KAAM,UACNxG,SAASl3C,EAAAA,EAAAA,KAACgvE,GAAiB,KAE7B,CACE7xE,GAAIy9D,GAASi9D,uBACbn6E,KAAM,YACNxG,SAASl3C,EAAAA,EAAAA,KAAC63H,GAAsB,KAElC,CACE16H,GAAIy9D,GAASk9D,qBACbp6E,KAAM,cACNxG,SAASl3C,EAAAA,EAAAA,KAAC83H,GAAoB,KAEhC,CACE36H,GAAIy9D,GAASm9D,qBACbr6E,KAAM,cACNxG,SAASl3C,EAAAA,EAAAA,KAAC+3H,GAAoB,OAIpC,CACE56H,GAAIy9D,GAASwiE,mBACb1/E,KAAM,sBACNxG,SAASl3C,EAAAA,EAAAA,KAACo9H,GAAkB,KAE9B,CACEjgI,GAAIy9D,GAAS8iE,mBACbhgF,KAAM,sBACNxG,SAASl3C,EAAAA,EAAAA,KAAC09H,GAAkB,KAE9B,CACEhgF,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAAC2yH,GAAW,SAI3B,CAACzrH,GAGL,CJhC8BqkL,GACtBC,EKRD,WACL,MAAM,EAAEtkL,IAAMC,EAAAA,EAAAA,MAoSd,OAnSuB9C,EAAAA,EAAAA,UACrB,KAAM,CACJ/G,MAAO4J,EAAE,aACTw2C,KAAM,YACNx9C,SAAU,CACR,CACEw9C,KAAM,eACNx9C,SAAU,CACR,CACE/C,GAAIy9D,GAAS0rD,kBACb5oE,KAAM,SACNxG,SAASl3C,EAAAA,EAAAA,KAACsmH,GAAiB,KAE7B,CACEnpH,GAAIy9D,GAASg+D,gBACbl7E,KAAM,WACNxG,SAASl3C,EAAAA,EAAAA,KAAC44H,GAAe,KAE3B,CACEz7H,GAAIy9D,GAAS8tF,0BACbhrG,KAAM,uBACNxG,SAASl3C,EAAAA,EAAAA,KAACupJ,GAAiB,CAACzC,iBAAkBr1F,EAAM,qBAEtD,CACEt0D,GAAIy9D,GAAS+tF,wBACbjrG,KAAM,kCACNxG,SAASl3C,EAAAA,EAAAA,KAACo1J,GAAkB,CAACtO,iBAAkBr1F,EAAM,qBAEvD,CACEt0D,GAAIy9D,GAAS6wH,wBACb/tI,KAAM,6BACNxG,SACEl3C,EAAAA,EAAAA,KAACurJ,GAAY,CACXzE,iBAAkBr1F,EAAM,kBACxBk6F,mBAAoB,CAClB,CAAEruJ,MAAO4J,EAAE,aAAcY,GAAI8yD,GAAS67G,WACtC,CAAEt5K,GAAI,OAAQ2K,GAAI8yD,GAAS8wH,iBAC3B,CAAEpuL,MAAO4J,EAAE,aAAc/J,GAAI,YAAa2K,GAAI8yD,GAASguF,uBAEzDnqF,QAAS,CACPnhE,MAAO4J,EAAE,qBACTiuB,KAAMylC,GAASguF,qBACflqF,oBAAqB,0BAEvBvU,KAAM,CACJ,CACE7sD,MAAO4J,EAAE,WACTiuB,KAAMylC,GAAS4pD,+BAKvBtkH,SAAU,CACR,CACE/C,GAAIy9D,GAAS4pD,2BACb9mE,KAAM,UACNxG,SAASl3C,EAAAA,EAAAA,KAACmqJ,GAAe,OAI/B,CACEhtJ,GAAIy9D,GAAS8wH,gBACbhuI,KAAM,MACNxG,SAASl3C,EAAAA,EAAAA,KAACm5K,GAAY,IACtBj5K,SAAU,CACR,CACE/C,GAAIy9D,GAASu4B,mBACbz1C,KAAM,UACNxG,SAASl3C,EAAAA,EAAAA,KAACo3K,GAAe,KAE3B,CACEj6K,GAAIy9D,GAASy+G,sBACb37H,KAAM,cACNxG,SAASl3C,EAAAA,EAAAA,KAAC29K,GAAkB,KAE9B,CACExgL,GAAIy9D,GAAS0+G,sBACb57H,KAAM,cACNxG,SAASl3C,EAAAA,EAAAA,KAAC69K,GAAkB,KAE9B,CACE1gL,GAAIy9D,GAAS2+G,gBACb77H,KAAM,MACNxG,SAASl3C,EAAAA,EAAAA,KAAC+9K,GAAY,CAACxiD,aAAa,mBAEtC,CACEp+H,GAAIy9D,GAAS6+G,yBACb/7H,KAAM,gBACNxG,SAASl3C,EAAAA,EAAAA,KAAC6xJ,GAAqB,CAACt2B,aAAa,mBAE/C,CACEp+H,GAAIy9D,GAAS4+G,kBACb97H,KAAM,SACNxG,SAASl3C,EAAAA,EAAAA,KAAC8+K,GAAc,CAACvjD,aAAa,mBAExC,CACEp+H,GAAIy9D,GAAS8kH,qBACbhiI,KAAM,aACNxG,SAASl3C,EAAAA,EAAAA,KAACkhL,GAAqB,CAAC3lD,aAAa,mBAE/C,CACEp+H,GAAIy9D,GAASsjH,sBACbxgI,KAAM,cACNxG,SAASl3C,EAAAA,EAAAA,KAAC+gL,GAAsB,CAACxlD,aAAa,mBAEhD,CACEp+H,GAAIy9D,GAASguF,qBACblrG,KAAM,YACNxG,SACEl3C,EAAAA,EAAAA,KAAC2zJ,GAAa,CACZS,qBAAsBx5F,GAAS8tF,0BAC/BntB,aAAa,eACbw4B,gBAAiBtiG,EAAM,oBAI7B,CACE/T,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACorL,GAAAA,GAAQ,CAACtjL,GAAG,UAAUnN,SAAO,OAI7C,CACEwC,GAAIy9D,GAASgjH,oBACblgI,KAAM,sBACNxG,SAASl3C,EAAAA,EAAAA,KAAC49K,GAAmB,KAE/B,CACEzgL,GAAIy9D,GAASkjH,oBACbpgI,KAAM,sBACNxG,SAASl3C,EAAAA,EAAAA,KAAC89K,GAAmB,KAE/B,CACE3gL,GAAIy9D,GAASu4C,qBACbz1D,KAAM,aACNxG,SAASl3C,EAAAA,EAAAA,KAAC43K,GAAc,CAAC1nF,QAAQ,qBAIvC,CACExyC,KAAM,wBACNx9C,SAAU,CACR,CACE/C,GAAIy9D,GAASg/D,0BACbl8E,KAAM,SACNxG,SAASl3C,EAAAA,EAAAA,KAAC45H,GAAyB,KAErC,CACEz8H,GAAIy9D,GAASi+D,wBACbn7E,KAAM,WACNxG,SAASl3C,EAAAA,EAAAA,KAAC64H,GAAuB,KAEnC,CACE17H,GAAIy9D,GAASsuF,kCACbxrG,KAAM,uBACNxG,SAASl3C,EAAAA,EAAAA,KAACupJ,GAAiB,CAACzC,iBAAkBr1F,EAAM,8BAEtD,CACEt0D,GAAIy9D,GAASuuF,gCACbzrG,KAAM,kCACNxG,SAASl3C,EAAAA,EAAAA,KAACo1J,GAAkB,CAACtO,iBAAkBr1F,EAAM,8BAEvD,CACEt0D,GAAIy9D,GAAS+wH,gCACbjuI,KAAM,6BACNxG,SACEl3C,EAAAA,EAAAA,KAACurJ,GAAY,CACXzE,iBAAkBr1F,EAAM,2BACxBk6F,mBAAoB,CAClB,CAAEruJ,MAAO4J,EAAE,aAAcY,GAAI8yD,GAAS67G,WACtC,CAAEt5K,GAAI,OAAQ2K,GAAI8yD,GAASo/G,yBAC3B,CACE18K,MAAO4J,EAAE,aACT/J,GAAI,YACJ2K,GAAI8yD,GAASwuF,+BAGjB3qF,QAAS,CACPnhE,MAAO4J,EAAE,qBACTiuB,KAAMylC,GAASwuF,6BACf1qF,oBAAqB,mCAEvBvU,KAAM,CACJ,CACE7sD,MAAO4J,EAAE,WACTiuB,KAAMylC,GAAS+pD,uCAKvBzkH,SAAU,CACR,CACE/C,GAAIy9D,GAAS+pD,mCACbjnE,KAAM,UACNxG,SAASl3C,EAAAA,EAAAA,KAACmqJ,GAAe,OAI/B,CACEhtJ,GAAIy9D,GAAS+9D,mBACbj7E,KAAM,iBACNxG,SAASl3C,EAAAA,EAAAA,KAAC24H,GAAkB,KAE9B,CACEx7H,GAAIy9D,GAASo/G,wBACbt8H,KAAM,MACNxG,SAASl3C,EAAAA,EAAAA,KAACg6K,GAAuB,IACjC95K,SAAU,CACR,CACE/C,GAAIy9D,GAAS06B,2BACb53C,KAAM,UACNxG,SAASl3C,EAAAA,EAAAA,KAACs1F,GAA0B,KAEtC,CACEn4F,GAAIy9D,GAASq/G,8BACbv8H,KAAM,cACNxG,SAASl3C,EAAAA,EAAAA,KAACi6K,GAA6B,KAEzC,CACE98K,GAAIy9D,GAASs/G,8BACbx8H,KAAM,cACNxG,SAASl3C,EAAAA,EAAAA,KAACk6K,GAA6B,KAEzC,CACE/8K,GAAIy9D,GAASu/G,wBACbz8H,KAAM,gBACNxG,SAASl3C,EAAAA,EAAAA,KAAC+9K,GAAY,CAACxiD,aAAa,4BAEtC,CACEp+H,GAAIy9D,GAASw/G,0BACb18H,KAAM,SACNxG,SAASl3C,EAAAA,EAAAA,KAAC8+K,GAAc,CAACvjD,aAAa,4BAExC,CACEp+H,GAAIy9D,GAAS+kH,6BACbjiI,KAAM,aACNxG,SAASl3C,EAAAA,EAAAA,KAACkhL,GAAqB,CAAC3lD,aAAa,4BAE/C,CACEp+H,GAAIy9D,GAASujH,8BACbzgI,KAAM,cACNxG,SAASl3C,EAAAA,EAAAA,KAAC+gL,GAAsB,CAACxlD,aAAa,4BAEhD,CACEp+H,GAAIy9D,GAASwuF,6BACb1rG,KAAM,YACNxG,SACEl3C,EAAAA,EAAAA,KAAC2zJ,GAAa,CACZS,qBAAsBx5F,GAASsuF,kCAC/B3tB,aAAa,wBACbw4B,gBAAiBtiG,EAAM,6BAI7B,CACEt0D,GAAIy9D,GAASy/G,iCACb38H,KAAM,gBACNxG,SAASl3C,EAAAA,EAAAA,KAAC6xJ,GAAqB,CAACt2B,aAAa,4BAE/C,CACE79E,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACorL,GAAAA,GAAQ,CAACtjL,GAAG,UAAUnN,SAAO,OAI7C,CACEwC,GAAIy9D,GAAS0/G,4BACb58H,KAAM,sBACNxG,SAASl3C,EAAAA,EAAAA,KAACs6K,GAA2B,KAEvC,CACEn9K,GAAIy9D,GAAS2/G,4BACb78H,KAAM,sBACNxG,SAASl3C,EAAAA,EAAAA,KAACu6K,GAA2B,KAEvC,CACEp9K,GAAIy9D,GAASs4C,gCACbx1D,KAAM,aACNxG,SAASl3C,EAAAA,EAAAA,KAAC43K,GAAc,CAAC1nF,QAAQ,8BAIvC,CACE/yF,GAAIy9D,GAAS67G,UACb/4H,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACy2K,GAAS,SAIzB,CAACvvK,GAGL,CL9R4B0kL,GACpBC,EMvCD,WACL,MAAM,EAAE3kL,IAAMC,EAAAA,EAAAA,MAgCd,OA/B+B9C,EAAAA,EAAAA,UAC7B,KAAM,CACJlH,GAAIy9D,GAAS2vH,kBACbjtL,MAAO4J,EAAE,sBACTw2C,KAAM,qBACNx9C,SAAU,CACR,CACE/C,GAAIy9D,GAASsvH,qBACbxsI,KAAM,OACNxG,SAASl3C,EAAAA,EAAAA,KAACkqL,GAAoB,IAC9BhqL,SAAU,CACR,CACE/C,GAAIy9D,GAASU,wBACb5d,KAAM,UACNxG,SAASl3C,EAAAA,EAAAA,KAACs7D,GAAuB,KAEnC,CACEn+D,GAAIy9D,GAAS4vH,mCACb9sI,KAAM,gCACNxG,SAASl3C,EAAAA,EAAAA,KAAC0lH,GAAU,OAI1B,CACEhoE,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACuqL,GAAiB,SAIjC,CAACrjL,GAGL,CNKoC4kL,GAC5BC,EO1CD,WACL,MAAM,EAAE7kL,IAAMC,EAAAA,EAAAA,MAoBd,OAnBwB9C,EAAAA,EAAAA,UACtB,KAAM,CACJlH,GAAIy9D,GAASovF,UACb1sJ,MAAO4J,EAAE,aACTw2C,KAAM,YACNx9C,SAAU,CACR,CACE/C,GAAIy9D,GAAS41G,eACb9yH,KAAM,SACNxG,SAASl3C,EAAAA,EAAAA,KAACupJ,GAAiB,CAAC1C,oBAAkB,KAEhD,CACEnpG,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACgqJ,GAAS,SAIzB,CAAC9iJ,GAGL,CPoB6B8kL,GACrBC,EQxCD,WACL,MAAM,EAAE/kL,IAAMC,EAAAA,EAAAA,MAsCd,OArCkB9C,EAAAA,EAAAA,UAChB,KAAM,CACJlH,GAAIy9D,GAAS0oD,KACbhmH,MAAO4J,EAAE,QACTw2C,KAAM,OACNx9C,SAAU,CACR,CACE/C,GAAIy9D,GAASgrE,kCACbloF,KAAM,wCACNxG,SAASl3C,EAAAA,EAAAA,KAAC2kK,GAAgB,KAE5B,CACExnK,GAAIy9D,GAAS87F,QACbh5G,KAAM,gBACNxG,SAASl3C,EAAAA,EAAAA,KAAC02J,GAAO,IACjBx2J,SAAU,CACR,CACE/C,GAAIy9D,GAAS4qC,UACb9nD,KAAM,SACNxG,SAASl3C,EAAAA,EAAAA,KAACwlG,GAAS,KAErB,CACEroG,GAAIy9D,GAAS8qD,WACbhoE,KAAM,UACNxG,SAASl3C,EAAAA,EAAAA,KAAC0lH,GAAU,OAK1B,CACEhoE,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACsjH,GAAI,SAIpB,CAACp8G,GAGL,CRAwBglL,GAChBC,ES7CD,WACL,MAAM,EAAEjlL,IAAMC,EAAAA,EAAAA,MAUd,OAT6B9C,EAAAA,EAAAA,UAC3B,KAAM,CACJlH,GAAIy9D,GAAS8I,eACbpmE,MAAO4J,EAAE,mBACTw2C,KAAM,kBACNxG,SAASl3C,EAAAA,EAAAA,KAAC+pH,GAAe,OAE3B,CAAC7iH,GAGL,CTiCkCklL,GAC1BC,EUpCD,WACL,MAAM,EAAEnlL,IAAMC,EAAAA,EAAAA,MAuEd,OAtE+B9C,EAAAA,EAAAA,UAC7B,KAAM,CACJlH,GAAIy9D,GAASoxD,cACb1uH,MAAO4J,EAAE,iBACTw2C,KAAM,gBACNx9C,SAAU,CACR,CACE/C,GAAIy9D,GAAS+xD,mBACbjvE,KAAM,SACNxG,SAASl3C,EAAAA,EAAAA,KAAC2sH,GAAkB,KAE9B,CACExvH,GAAIy9D,GAASgyD,iBACblvE,KAAM,WACNxG,SAASl3C,EAAAA,EAAAA,KAAC4sH,GAAgB,KAE5B,CACEzvH,GAAIy9D,GAASkxG,iBACbpuH,KAAM,MACNxG,SAASl3C,EAAAA,EAAAA,KAAC8rK,GAAgB,IAC1B5rK,SAAU,CACR,CACE/C,GAAIy9D,GAAS62B,oBACb/zC,KAAM,UACNxG,SAASl3C,EAAAA,EAAAA,KAACyxF,GAAmB,KAE/B,CACEt0F,GAAIy9D,GAASqxG,wBACbvuH,KAAM,cACNxG,SAASl3C,EAAAA,EAAAA,KAACwrK,GAAsB,KAElC,CACEruK,GAAIy9D,GAASsxG,wBACbxuH,KAAM,cACNxG,SAASl3C,EAAAA,EAAAA,KAACksK,GAAuB,KAEnC,CACE/uK,GAAIy9D,GAASuxG,kCACbzuH,KAAM,yBACNxG,SAASl3C,EAAAA,EAAAA,KAACmsK,GAAiC,KAE7C,CACEhvK,GAAIy9D,GAASwxG,0BACb1uH,KAAM,gBACNxG,SAASl3C,EAAAA,EAAAA,KAAC6xJ,GAAqB,CAACt2B,aAAa,mBAE/C,CACE79E,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACorL,GAAAA,GAAQ,CAACtjL,GAAG,UAAUnN,SAAO,OAI7C,CACEwC,GAAIy9D,GAAS6wG,qBACb/tH,KAAM,sBACNxG,SAASl3C,EAAAA,EAAAA,KAACyrK,GAAoB,KAEhC,CACEtuK,GAAIy9D,GAASyxG,qBACb3uH,KAAM,sBACNxG,SAASl3C,EAAAA,EAAAA,KAACqsK,GAAoB,KAEhC,CACE3uH,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACgsH,GAAa,SAI7B,CAAC9kH,GAGL,CVrCgColL,GACxBC,EWvCD,WACL,MAAM,EAAErlL,IAAMC,EAAAA,EAAAA,MA6Dd,OA5DoB9C,EAAAA,EAAAA,UAClB,KAAM,CACJlH,GAAIy9D,GAAS81G,MACbpzK,MAAO4J,EAAE,SACTw2C,KAAM,QACNx9C,SAAU,CACR,CACE/C,GAAIy9D,GAAS61G,WACb/yH,KAAM,SACNxG,SAASl3C,EAAAA,EAAAA,KAACywK,GAAU,KAEtB,CACEtzK,GAAIy9D,GAASi2G,SACbnzH,KAAM,WACNxG,SAASl3C,EAAAA,EAAAA,KAAC6wK,GAAQ,KAEpB,CACE1zK,GAAIy9D,GAASm6G,eACbr3H,KAAM,gBACNxG,SAASl3C,EAAAA,EAAAA,KAAC0zK,GAAe,KAE3B,CACEv2K,GAAIy9D,GAASg4G,SACbl1H,KAAM,MACNxG,SAASl3C,EAAAA,EAAAA,KAAC4yK,GAAQ,IAClB1yK,SAAU,CACR,CACE/C,GAAIy9D,GAASktD,YACbpqE,KAAM,UACNxG,SAASl3C,EAAAA,EAAAA,KAACoxK,GAAc,KAE1B,CACEj0K,GAAIy9D,GAASk4G,YACbp1H,KAAM,SACNxG,SAASl3C,EAAAA,EAAAA,KAAC0/H,GAAU,KAEtB,CACEviI,GAAIy9D,GAASm4G,UACbr1H,KAAM,QACNxG,SAASl3C,EAAAA,EAAAA,KAAC80K,GAAY,KAExB,CACEp3H,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACorL,GAAAA,GAAQ,CAACtjL,GAAG,UAAUnN,SAAO,OAI7C,CACEwC,GAAIy9D,GAASy2G,eACb3zH,KAAM,sBACNxG,SAASl3C,EAAAA,EAAAA,KAACg1K,GAAc,KAE1B,CACEt3H,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAAC0wK,GAAK,SAIrB,CAACxpK,GAGL,CXxByBslL,GACjBC,EYlCD,WACL,MAAM,EAAEvlL,IAAMC,EAAAA,EAAAA,OACPulL,EAAcC,IAAmBjxL,EAAAA,EAAAA,YAkGxC,OAhGoB2I,EAAAA,EAAAA,UAClB,KAAM,CACJlH,GAAIy9D,GAAS0nH,MACbhlL,MAAO4J,EAAE,SACTw2C,KAAM,QACNx9C,SAAU,CACR,CACE/C,GAAIy9D,GAASynH,WACb3kI,KAAM,SACNxG,SAASl3C,EAAAA,EAAAA,KAACqiL,GAAU,KAEtB,CACEllL,GAAIy9D,GAASgoH,SACbllI,KAAM,WACNxG,SAASl3C,EAAAA,EAAAA,KAAC4iL,GAAQ,KAEpB,CACEzlL,GAAIy9D,GAASypH,SACb3mI,KAAM,MACNxG,SAASl3C,EAAAA,EAAAA,KAACqkL,GAAQ,IAClBnkL,SAAU,CACR,CACE/C,GAAIy9D,GAASiB,YACbne,KAAM,UACNxG,SAASl3C,EAAAA,EAAAA,KAACqjL,GAAc,KAE1B,CACElmL,GAAIy9D,GAASmpH,kBACbrmI,KAAM,gBACNxG,SAASl3C,EAAAA,EAAAA,KAAC+jL,GAAiB,KAE7B,CACE5mL,GAAIy9D,GAAS4pH,UACb9mI,KAAM,QACNxG,SAASl3C,EAAAA,EAAAA,KAACwkL,GAAS,KAErB,CACErnL,GAAIy9D,GAAS6pH,UACb/mI,KAAM,QACNxG,SAASl3C,EAAAA,EAAAA,KAACykL,GAAS,KAErB,CACEtnL,GAAIy9D,GAAS8pH,WACbhnI,KAAM,SACNxG,SAASl3C,EAAAA,EAAAA,KAAC0kL,GAAU,KAEtB,CACEhnI,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACorL,GAAAA,GAAQ,CAACtjL,GAAG,UAAUnN,SAAO,OAI7C,CACEwC,GAAIy9D,GAAS+pH,eACbjnI,KAAM,sBACNxG,SAASl3C,EAAAA,EAAAA,KAAC2kL,GAAc,KAE1B,CACExnL,GAAIy9D,GAAS2rH,gBACb7oI,KAAM,oBACNxG,SAASl3C,EAAAA,EAAAA,KAACumL,GAAe,CAACqB,mBAAqB1gL,GAAaylL,EAAgBzlL,MAE9E,CACE/J,GAAIy9D,GAASysH,cACb3pI,KAAM,sBACNxG,SACE5xC,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAACqnL,GAAa,IACbqF,IACC1sL,EAAAA,EAAAA,KAACgoL,GAAqB,CACpBz7K,QAASogL,EACT9E,SAAU6E,OAKlBxsL,SAAU,CACR,CACE/C,GAAIy9D,GAAS+qH,iBACbjoI,KAAM,UACNxG,SAASl3C,EAAAA,EAAAA,KAAC2lL,GAAgB,KAE5B,CACEjoI,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACorL,GAAAA,GAAQ,CAACtjL,GAAG,eAI5B,CACE41C,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACsiL,GAAK,SAIrB,CAACoK,EAAcxlL,GAGnB,CZnEyB0lL,GACjBC,EavCD,WACL,MAAM,EAAE3lL,IAAMC,EAAAA,EAAAA,MA6Dd,OA5D4B9C,EAAAA,EAAAA,UAC1B,KAAM,CACJlH,GAAIy9D,GAAS+uG,sBACbrsK,MAAO4J,EAAE,aACTw2C,KAAM,YACNx9C,SAAU,CACR,CACE/C,GAAIy9D,GAASkyH,yBACbpvI,KAAM,OACNxG,SAASl3C,EAAAA,EAAAA,KAACyqK,GAAgB,IAC1BvqK,SAAU,CACR,CACE/C,GAAIy9D,GAASo4F,4BACbt1G,KAAM,UACNxG,SAASl3C,EAAAA,EAAAA,KAACgqK,GAAmB,KAE/B,CACE7sK,GAAIy9D,GAAS8vG,+BACbhtH,KAAM,cACNxG,SAASl3C,EAAAA,EAAAA,KAAC4qK,GAAsB,KAElC,CACEztK,GAAIy9D,GAAS+vG,+BACbjtH,KAAM,cACNxG,SAASl3C,EAAAA,EAAAA,KAAC8qK,GAAsB,KAElC,CACEptH,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACorL,GAAAA,GAAQ,CAACtjL,GAAG,UAAUnN,SAAO,OAI7C,CACEwC,GAAIy9D,GAAS4rG,yBACb9oH,KAAM,WACNxG,SAASl3C,EAAAA,EAAAA,KAACgpK,GAAY,KAExB,CACE7rK,GAAIy9D,GAASmwG,qBACbrtH,KAAM,sBACNxG,SAASl3C,EAAAA,EAAAA,KAACgrK,GAAgB,KAE5B,CACE7tK,GAAIy9D,GAASiwG,qBACbntH,KAAM,sBACNxG,SAASl3C,EAAAA,EAAAA,KAACirK,GAAgB,KAE5B,CACE9tK,GAAIy9D,GAASssG,wBACbxpH,KAAM,SACNxG,SAASl3C,EAAAA,EAAAA,KAACkpK,GAAW,KAEvB,CACExrH,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAAC+mK,GAAS,SAIzB,CAAC7/J,GAGL,CbxBiC6lL,GACzBC,EczCD,WACL,MAAM,EAAE9lL,IAAMC,EAAAA,EAAAA,MAoFd,OAnF6B9C,EAAAA,EAAAA,UAC3B,KAAM,CACJlH,GAAIy9D,GAAS0qG,eACbhoK,MAAO4J,EAAE,mBACTw2C,KAAM,kBACNx9C,SAAU,CACR,CACE/C,GAAIy9D,GAASqyH,0BACbvvI,KAAM,8BACNxG,SACEl3C,EAAAA,EAAAA,KAACurJ,GAAY,CACXzE,iBAAkBr1F,EAAM,yBACxBk6F,mBAAoB,CAClB,CAAEruJ,MAAO4J,EAAE,mBAAoBY,GAAI8yD,GAAS0qG,gBAC5C,CAAEnoK,GAAI,OAAQ2K,GAAI8yD,GAASqqG,mBAC3B,CAAE3nK,MAAO4J,EAAE,aAAc/J,GAAI,YAAa2K,GAAI8yD,GAASy6B,yBAEzD52B,QAAS,CACPnhE,MAAO4J,EAAE,qBACTiuB,KAAMylC,GAASy6B,uBACf32B,oBAAqB,6BAEvBvU,KAAM,CACJ,CACE7sD,MAAO4J,EAAE,WACTiuB,KAAMylC,GAAS8pD,iCAKvBxkH,SAAU,CACR,CACE/C,GAAIy9D,GAAS8pD,6BACbhnE,KAAM,UACNxG,SAASl3C,EAAAA,EAAAA,KAACmqJ,GAAe,CAACO,6BAA2B,OAI3D,CACEvtJ,GAAIy9D,GAASquF,0BACbvrG,KAAM,kCACNxG,SAASl3C,EAAAA,EAAAA,KAACo1J,GAAkB,CAACtO,iBAAkBr1F,EAAM,4BAEvD,CACEt0D,GAAIy9D,GAASouF,4BACbtrG,KAAM,uBACNxG,SAASl3C,EAAAA,EAAAA,KAACupJ,GAAiB,CAACzC,iBAAkBr1F,EAAM,4BAEtD,CACEt0D,GAAIy9D,GAASqqG,kBACbvnH,KAAM,MACNxG,SAASl3C,EAAAA,EAAAA,KAACilK,GAAiB,IAC3B/kK,SAAU,CACR,CACE/C,GAAIy9D,GAASy6B,uBACb33C,KAAM,YACNxG,SACEl3C,EAAAA,EAAAA,KAAC2zJ,GAAa,CACZS,qBAAsBx5F,GAASouF,4BAC/B+K,gBAAiBtiG,EAAM,wBACvB8pE,aAAa,qBAInB,CACEp+H,GAAIy9D,GAASyqG,2BACb3nH,KAAM,gBACNxG,SAASl3C,EAAAA,EAAAA,KAAC6xJ,GAAqB,CAACt2B,aAAa,0BAE/C,CACE79E,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACorL,GAAAA,GAAQ,CAACtjL,GAAG,YAAYnN,SAAO,OAI/C,CACE+iD,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACslK,GAAc,SAI9B,CAACp+J,GAGL,Cd7CkCgmL,GAC1BC,EehCD,WACL,MAAM,EAAEjmL,IAAMC,EAAAA,EAAAA,MA6Fd,OA5F6B9C,EAAAA,EAAAA,UAC3B,KAAM,CACJlH,GAAIy9D,GAASukC,eACb7hG,MAAO4J,EAAE,mBACTw2C,KAAM,kBACNx9C,SAAU,CACR,CACE/C,GAAIy9D,GAAS0kC,qBACb5hD,KAAM,yBACNxG,SAASl3C,EAAAA,EAAAA,KAACs/F,GAAoB,KAEhC,CACEniG,GAAIy9D,GAASskC,mBACbxhD,KAAM,2BACNxG,SAASl3C,EAAAA,EAAAA,KAACk/F,GAAkB,KAE9B,CACE/hG,GAAIy9D,GAAS2kC,oBACb7hD,KAAM,wBACNxG,SAASl3C,EAAAA,EAAAA,KAACu/F,GAAmB,KAE/B,CACEpiG,GAAIy9D,GAASqkC,kBACbvhD,KAAM,0BACNxG,SAASl3C,EAAAA,EAAAA,KAACi/F,GAAiB,KAE7B,CACE9hG,GAAIy9D,GAASq4E,kBACbv1F,KAAM,MACNxG,SAASl3C,EAAAA,EAAAA,KAACizI,GAAiB,IAC3B/yI,SAAU,CACR,CACE/C,GAAIy9D,GAAS0c,qBACb55B,KAAM,UACNxG,SAASl3C,EAAAA,EAAAA,KAACs3E,GAAoB,KAEhC,CACEn6E,GAAIy9D,GAASk2E,uBACbpzF,KAAM,YACNxG,SAASl3C,EAAAA,EAAAA,KAAC8wI,GAAsB,KAElC,CACE3zI,GAAIy9D,GAASq2E,wBACbvzF,KAAM,cACNxG,SAASl3C,EAAAA,EAAAA,KAACixI,GAAuB,KAEnC,CACE9zI,GAAIy9D,GAASu2E,wBACbzzF,KAAM,cACNxG,SAASl3C,EAAAA,EAAAA,KAACmxI,GAAuB,KAEnC,CACEh0I,GAAIy9D,GAASo3E,kBACbt0F,KAAM,OACNxG,SAASl3C,EAAAA,EAAAA,KAACgyI,GAAiB,KAE7B,CACEt0F,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACorL,GAAAA,GAAQ,CAACtjL,GAAG,UAAUnN,SAAO,OAI7C,CACEwC,GAAIy9D,GAASo2E,2BACbtzF,KAAM,8BACNxG,SAASl3C,EAAAA,EAAAA,KAACgxI,GAA0B,IACpC9wI,SAAU,CACR,CACE/C,GAAIy9D,GAASm2E,6BACbrzF,KAAM,UACNxG,SAASl3C,EAAAA,EAAAA,KAACsyE,GAAe,OAI/B,CACEn1E,GAAIy9D,GAASs2E,sBACbxzF,KAAM,sCACNxG,SAASl3C,EAAAA,EAAAA,KAACkxI,GAAqB,KAEjC,CACE/zI,GAAIy9D,GAASw2E,sBACb1zF,KAAM,sCACNxG,SAASl3C,EAAAA,EAAAA,KAACoxI,GAAqB,KAEjC,CACE1zF,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACm/F,GAAc,SAI9B,CAACj4F,GAGL,Cf/DkCkmL,GAC1BC,EgB/CD,WACL,MAAM,EAAEnmL,IAAMC,EAAAA,EAAAA,MA+Cd,OA7CwB9C,EAAAA,EAAAA,UAA4B,KAC3C,CACLlH,GAAIy9D,GAAS6a,UACbn4E,MAAO4J,EAAE,aACTw2C,KAAM,YACNx9C,SAAU,CACR,CACE/C,GAAIy9D,GAASw0E,YACb1xF,KAAM,MACNxG,SAASl3C,EAAAA,EAAAA,KAACovI,GAAW,KAEvB,CACEjyI,GAAIy9D,GAAS6Z,aACb/2B,KAAM,WACNxG,SAASl3C,EAAAA,EAAAA,KAACy0E,GAAY,KAExB,CACEt3E,GAAIy9D,GAAS+4E,aACbj2F,KAAM,MACNxG,SAASl3C,EAAAA,EAAAA,KAAC2zI,GAAY,IACtBzzI,SAAU,CACR,CACE/C,GAAIy9D,GAAS0X,gBACb50B,KAAM,UACNxG,SAASl3C,EAAAA,EAAAA,KAACsyE,GAAe,KAE3B,CACEn1E,GAAIy9D,GAASi5E,0BACbn2F,KAAM,qBACNxG,SAASl3C,EAAAA,EAAAA,KAAC6zI,GAAyB,KAErC,CACE12I,GAAIy9D,GAASk5E,cACbp2F,KAAM,QACNxG,SAASl3C,EAAAA,EAAAA,KAAC8zI,GAAa,OAI7B,CACEp2F,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACy1E,GAAS,SAIxB,CAACvuE,GAEN,ChBF6BomL,GACrBC,EiB1CD,WACL,MAAM,EAAErmL,IAAMC,EAAAA,EAAAA,MA8Dd,OA7DkC9C,EAAAA,EAAAA,UAChC,KAAM,CACJlH,GAAIy9D,GAASgtC,sBACbtqG,MAAO4J,EAAE,0BACTw2C,KAAM,yBACNx9C,SAAU,CACR,CACE/C,GAAIy9D,GAASinE,yBACbnkF,KAAM,MACNxG,SAASl3C,EAAAA,EAAAA,KAAC6hI,GAAwB,IAClC3hI,SAAU,CACR,CACE/C,GAAIy9D,GAAS85B,4BACbh3C,KAAM,UACNxG,SAASl3C,EAAAA,EAAAA,KAAC00F,GAA2B,KAEvC,CACEv3F,GAAIy9D,GAASknE,8BACbpkF,KAAM,YACNxG,SAASl3C,EAAAA,EAAAA,KAAC8hI,GAA6B,KAEzC,CACE3kI,GAAIy9D,GAASmnE,+BACbrkF,KAAM,cACNxG,SAASl3C,EAAAA,EAAAA,KAAC+hI,GAA8B,KAE1C,CACE5kI,GAAIy9D,GAASonE,+BACbtkF,KAAM,cACNxG,SAASl3C,EAAAA,EAAAA,KAACgiI,GAA8B,OAI9C,CACEtkF,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAAC4nG,GAAqB,KAEjC,CACEzqG,GAAIy9D,GAASynE,2BACb3kF,KAAM,MACNxG,SAASl3C,EAAAA,EAAAA,KAACqiI,GAA0B,KAEtC,CACEllI,GAAIy9D,GAASgnE,yBACblkF,KAAM,WACNxG,SAASl3C,EAAAA,EAAAA,KAAC4hI,GAAwB,KAEpC,CACEzkI,GAAIy9D,GAAS4oE,6BACb9lF,KAAM,sBACNxG,SAASl3C,EAAAA,EAAAA,KAACwjI,GAA4B,KAExC,CACErmI,GAAIy9D,GAAS2oE,6BACb7lF,KAAM,sBACNxG,SAASl3C,EAAAA,EAAAA,KAACujI,GAA4B,SAI5C,CAACr8H,GAGL,CjBtByCsmL,GACjCC,EkB9CD,WACL,MAAM,EAAEvmL,IAAMC,EAAAA,EAAAA,MA8Cd,OA7C+B9C,EAAAA,EAAAA,UAC7B,KAAM,CACJlH,GAAIy9D,GAASolE,gBACb1iI,MAAO4J,EAAE,oBACTw2C,KAAM,mBACNx9C,SAAU,CACR,CACE/C,GAAIy9D,GAASmlE,qBACbriF,KAAM,SACNxG,SAASl3C,EAAAA,EAAAA,KAAC+/H,GAAoB,KAEhC,CACE5iI,GAAIy9D,GAASwlE,mBACb1iF,KAAM,WACNxG,SAASl3C,EAAAA,EAAAA,KAACogI,GAAkB,KAE9B,CACEjjI,GAAIy9D,GAASymE,mBACb3jF,KAAM,OACNxG,SAASl3C,EAAAA,EAAAA,KAACqhI,GAAkB,IAC5BnhI,SAAU,CACR,CACE/C,GAAIy9D,GAASmtD,sBACbrqE,KAAM,UACNxG,SAASl3C,EAAAA,EAAAA,KAAC+nH,GAAqB,KAEjC,CACE5qH,GAAIy9D,GAAS6lE,0BACb/iF,KAAM,cACNxG,SAASl3C,EAAAA,EAAAA,KAACygI,GAAyB,KAErC,CACE/iF,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACorL,GAAAA,GAAQ,CAACtjL,GAAG,UAAUnN,SAAO,OAI7C,CACE+iD,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACggI,GAAe,SAI/B,CAAC94H,GAGL,ClBFmCwmL,IAC3B,cAAE37H,GAAkBJ,KAEpBg8H,EAAiC,CACrC,CACExwL,GAAIy9D,GAASgzH,SACbtwL,MAAO4J,EAAE,YACTw2C,KAAM,WACNxG,SAASl3C,EAAAA,EAAAA,KAAC0mH,GAAW,MAGnBmnE,EAA4C,CAChD,CACE1wL,GAAIy9D,GAASkzH,eACbxwL,MAAO4J,EAAE,kBACTw2C,KAAM,iBACNx9C,SAAU6xD,GAAegO,aACrB,CACE,CACE5iE,GAAIy9D,GAAS6wC,aACbnuG,MAAO4J,EAAE,iBACTw2C,KAAM,WACNxG,SAASl3C,EAAAA,EAAAA,KAAC62G,GAAQ,KAEpB+zE,EACAI,EACAmC,EACAE,EACAE,GAEF,CACE3C,EACAI,EACAmC,EACAE,EACAE,KAIJQ,EAAuC,CAC3C,CACE5wL,GAAIy9D,GAASozH,UACb1wL,MAAO4J,EAAE,aACTw2C,KAAM,YACNx9C,SAAU,CACR,CACE/C,GAAIy9D,GAASkiD,qBACbx/G,MAAO4J,EAAE,yBACTw2C,KAAM,wBACNxG,SAASl3C,EAAAA,EAAAA,KAAC8/G,GAAO,KAEnB,CACE3iH,GAAIy9D,GAAS0sD,YACbhqH,MAAO4J,EAAE,gBACTw2C,KAAM,eACNxG,SAASl3C,EAAAA,EAAAA,KAACsnH,GAAW,KAEvB,CACEnqH,GAAIy9D,GAASunD,kBACb7kH,MAAO4J,EAAE,sBACTw2C,KAAM,qBACNxG,SAASl3C,EAAAA,EAAAA,KAACmiH,GAAiB,QAK7B8rE,EAA4C,CAChD,CACE9wL,GAAIy9D,GAASszH,eACb5wL,MAAO4J,EAAE,kBACTw2C,KAAM,iBACNx9C,SAAU6xD,GAAegO,aACrB,CACEosH,EACAN,EACAgB,EACAG,GAEF,CAACb,EAAyBN,KAG5BsC,EAAoC,CACxC,CACEhxL,GAAIy9D,GAASyjE,OACb/gI,MAAO4J,EAAE,qBACTw2C,KAAM,SACNx9C,SAAU,CACR,CACE/C,GAAIy9D,GAASwzH,uBACb9wL,MAAO4J,EAAE,0BACTw2C,KAAM,iBACNx9C,SAAU,CACR,CACE/C,GAAIy9D,GAASyK,iBACb3nB,KAAM,iBACNxG,SAASl3C,EAAAA,EAAAA,KAACgpE,GAA4B,KAExC,CACEtrB,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACklE,GAAW,OAI3BmnH,EACAE,EACAE,EACA,CACEtvL,GAAIy9D,GAAS4F,MACbljE,MAAO4J,EAAE,SACTw2C,KAAM,QACNx9C,SAAU,CACR,CACE/C,GAAIy9D,GAASkH,WACbpkB,KAAM,SACNxG,SAASl3C,EAAAA,EAAAA,KAAC8hE,GAAU,KAEtB,CACE3kE,GAAIy9D,GAASyF,SACb3iB,KAAM,WACNxG,SAASl3C,EAAAA,EAAAA,KAACqgE,GAAQ,KAEpB,CACEljE,GAAIy9D,GAASyzH,SACb3wI,KAAM,MACNxG,SAASl3C,EAAAA,EAAAA,KAACugE,GAAW,IACrBrgE,SAAU,CACR,CACE/C,GAAIy9D,GAAS0B,YACb5e,KAAM,UACNxG,SAASl3C,EAAAA,EAAAA,KAACo9D,GAAc,KAE1B,CACE1f,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACorL,GAAAA,GAAQ,CAACtjL,GAAG,UAAUnN,SAAO,OAI7C,CACE+iD,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAAC4hE,GAAQ,OAIxB0pH,EACAmC,KAIAa,EAAsC,CAC1C,CACEnxL,GAAIy9D,GAAS2zH,SACbjxL,MAAO4J,EAAE,YACTw2C,KAAM,WACNx9C,SAAU,CACR,CACE/C,GAAIy9D,GAAS4zH,oBACblxL,MAAO4J,EAAE,oBACTw2C,KAAM,cACNx9C,SAAU,CACR,CACEw9C,KAAM,OACNxG,SAASl3C,EAAAA,EAAAA,KAACo8D,GAAgB,KAE5B,CACE1e,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAAC+7D,GAAmB,OAInC,CACE5+D,GAAIy9D,GAAS6zH,eACbnxL,MAAO4J,EAAE,UACTw2C,KAAM,SACNx9C,SAAU,CACR,CACEw9C,KAAM,OACNxG,SAASl3C,EAAAA,EAAAA,KAACipE,GAAuB,CAACzD,WAAW,UAAa,WAE5D,CACE9nB,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACulE,GAA8B,CAACC,WAAW,UAAa,aAIvE,CACEroE,GAAIy9D,GAAS8zH,aACbpxL,MAAO4J,EAAE,OACTw2C,KAAM,eACNx9C,SAAU,CACR,CACEw9C,KAAM,OACNxG,SAASl3C,EAAAA,EAAAA,KAACipE,GAAuB,CAACzD,WAAW,QAAW,SAE1D,CACE9nB,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACulE,GAA8B,CAACC,WAAW,QAAW,WAIrE,CACEroE,GAAIy9D,GAAS+zH,gBACbrxL,MAAO4J,EAAE,WACTw2C,KAAM,UACNx9C,SAAU,CACR,CACEw9C,KAAM,OACNxG,SAASl3C,EAAAA,EAAAA,KAACipE,GAAuB,CAACzD,WAAW,WAAc,YAE7D,CACE9nB,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACulE,GAA8B,CAACC,WAAW,WAAc,cAIxE,CACEroE,GAAIy9D,GAASg0H,wBACbtxL,MAAO4J,EAAE,mBACTw2C,KAAM,kBACNx9C,SAAU,CACR,CACEw9C,KAAM,OACNxG,SAASl3C,EAAAA,EAAAA,KAACipE,GAAuB,CAACzD,WAAW,SAAY,UAE3D,CACE9nB,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACulE,GAA8B,CAACC,WAAW,SAAY,YAItE,CACE9nB,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACorL,GAAAA,GAAQ,CAACtjL,GAAG,KAAKnN,SAAO,QAuB1C,MAjBwB,IACnBgzL,EACH1B,EACAT,EACAO,EACAb,KACG2C,KACC97H,GAAegO,cAAgBhO,GAAeigB,kBAAoB+7G,EAAiB,MACpFE,KACAE,KACAG,EACH,CACE5wI,KAAM,GACNxG,SAASl3C,EAAAA,EAAAA,KAACorL,GAAAA,GAAQ,CAACtjL,GAAI,aAAcnN,SAAO,KAKlD,CDtTqBk0L,GACnB,OACE7uL,EAAAA,EAAAA,KAAC0jD,GAAO,CACNC,UAAU3jD,EAAAA,EAAAA,KAAC66D,GAAW,IACtBtd,WAAYA,EACZsF,SAAUvY,IACV95B,uBAAwB,IAG9B,C,mJoBTA,MAAMjL,IAAS7C,EAAAA,EAAAA,IAAOosL,EAAAA,IAASlsL,WAAA,CAAAC,YAAA,oBAAhBH,CAAgB,6CAexB,SAASqsL,GAAgBjyL,GAC9B,MAAM,QAAEupB,GAAYvpB,GACd,EAAEoK,IAAMC,EAAAA,EAAAA,MAEd,OAAKkf,GAAYxc,OAAO4f,KAAKpD,GAAS7iB,QAKpC8B,EAAAA,EAAAA,MAAAZ,EAAAA,SAAA,CAAAxE,SAAA,EACEF,EAAAA,EAAAA,KAAC+a,GAAAA,EAAK,CAACC,aAAa,KAAI9a,SAAEgH,CAAC,iBAC3BlH,EAAAA,EAAAA,KAACgZ,GAAAA,EAAK,CAACnX,MAAO,CAAEsU,MAAO,QAAUtN,WAAS,EAAA3I,SACvCmmB,EAAQtf,KAAKggB,IACZ/mB,EAAAA,EAAAA,KAACgvL,GAAc,CAAwBjoK,OAAQA,GAA1BA,EAAOkoK,kBAR3B,IAaX,CAEA,MAAMC,GAA8C,CAClD,iBAAkBC,GAAAA,GAClBC,OAAQC,GAAAA,GACR,aAAcA,GAAAA,GACd,cAAeA,GAAAA,GACf,oBAAqBA,GAAAA,GACrB,wBAAyBA,GAAAA,GACzB,yBAA0BA,GAAAA,GAC1B,gBAAiBC,GAAAA,GACjBC,KAAM5zH,GAAAA,GACN6zH,KAAM7zH,GAAAA,IAGR,SAASqzH,GAAelyL,GACtB,MAAM,OAAEiqB,GAAWjqB,GACb,EAAEoK,IAAMC,EAAAA,EAAAA,MAER+C,EAAoC,CACxC,iBAAkBhD,EAAE,YACpBkoL,OAAQloL,EAAE,UACV,aAAcA,EAAE,wBAChB,cAAeA,EAAE,gBACjB,oBAAqBA,EAAE,qBACvB,wBAAyBA,EAAE,mCAC3B,yBAA0BA,EAAE,2BAC5B,gBAAiBA,EAAE,UACnBqoL,KAAMroL,EAAE,QACRsoL,KAAMtoL,EAAE,SAGJ9B,EAAO8pL,GAAMnoK,EAAOtjB,OAASk4D,GAAAA,GAEnC,OACE37D,EAAAA,EAAAA,KAACuF,GAAM,CACL,UAAS,eAAewhB,EAAOtjB,OAC/BwE,UAAU,IACVF,KAAMgf,EAAOkoK,UACb5rL,QAAQ,YACRH,MAAMlD,EAAAA,EAAAA,KAACoF,EAAI,IAAIlF,SAEd6mB,EAAO3pB,MAAQ8M,EAAO6c,EAAOtjB,OAAS,IAG7C,CC7DO,SAASgsL,GAAa3yL,GA4B3B,MAAM,IAAQqK,EAAAA,EAAAA,OACPtG,GAAgBV,KAChBy7D,EAAU8zH,IAAeh0L,EAAAA,EAAAA,UAAS,KAClC0oK,EAAUurB,IAAej0L,EAAAA,EAAAA,UAAS,KAClCg8C,EAAYk4I,IAAiBl0L,EAAAA,EAAAA,UAAoB,IAClD27B,GAAWsmC,EAAAA,GAAAA,OAEX,YAAEkyH,GAAgB/yL,EAElBgzL,EADc,IAAIpqI,gBAAgBruB,EAASrM,QACpB8/B,IAAI,QAC3BpsB,GAAW5iC,EAAAA,EAAAA,cAAY4S,UAC3B,IACE,MAAMqhL,QAA0B7gI,MAAM2gI,EAAa,CACjD1gI,YAAa,UACblB,QAAS,CAAE+hI,OAAQ,6BAErB,IAAKD,EAAkBrgI,GACrB,YAAY9B,GAAmBmiI,GAGjC,MAAMxqI,EAAe,IAAIG,gBACzBH,EAAa6F,IAAI,WAAYwQ,GAC7BrW,EAAa6F,IAAI,WAAYg5G,GAE7B,MAAMn2G,EAAU,CACd,eAAgB,kDAChB,cAAiBU,GAAU,cAAgB,IAG7C,IAIE,MAAMd,QAAiBqB,MAAM2gI,EAAa,CACxC1gI,YAAa,UACbH,OAAQ,OACRf,UACA9nD,KAAMo/C,EACN6J,SAAU,WAEZ,IAAKvB,EAAS6B,GACZ,YAAY9B,GAAmBC,EAEnC,CAAE,MAAO/+C,GACP,KAAMA,aAAeu/C,IACnB,MAAMv/C,EAER,GAAuB,MAAnBA,EAAIw/C,YAAyC,MAAnBx/C,EAAIw/C,WAChC,MAAM,IAAIhqC,MAAMpd,EAAE,oDACb,GAAuB,IAAnB4H,EAAIw/C,WACb,MAAMx/C,CAEV,CAEIghL,EACFn0L,OAAO07B,SAAStvB,KAAO+nL,EAEvBhzL,EAAMmzL,aAEV,CAAE,MAAOnhL,GACHA,aAAewV,MACjBsrK,GAAc5vL,EAAAA,EAAAA,KAACkwL,GAAe,CAAAhwL,SAAE4O,EAAIzB,WAEpCuiL,GACE5vL,EAAAA,EAAAA,KAACkwL,GAAe,CAAAhwL,SAAEgH,EAAE,qDAG1B,IACC,CAAC2oL,EAAazrB,EAAUtnK,EAAOoK,EAAG00D,EAAUk0H,IAEzCK,EAAoB94J,EAASrM,OAAOziB,SAAS,eAUnD,OATAxM,EAAAA,EAAAA,YAAU,KACJo0L,GACFP,GAAc5vL,EAAAA,EAAAA,KAACkwL,GAAe,CAAAhwL,SAAEgH,EAAE,0CACpC,GACC,CAACipL,EAAmBjpL,KAMrB5B,EAAAA,EAAAA,MAACkH,GAAa,CAACa,QAASxM,EAAa3C,UAAUgC,SAAA,CAC5CpD,EAAMszL,mBAAoBpwL,EAAAA,EAAAA,KAACqwL,GAAAA,EAAe,CAACC,IAAKxzL,EAAMszL,oBACvD9qL,EAAAA,EAAAA,MAACirL,GAAAA,EAAK,CACJzvK,QACE9gB,EAAAA,EAAAA,KAACwwL,GAAAA,EAAW,CACVC,YAC4B,iBAAnB3zL,EAAM4zL,UACX1wL,EAAAA,EAAAA,KAAC2wL,GAAAA,EAAK,CAACL,IAAKxzL,EAAM4zL,SAAUE,IAAK9zL,EAAM+zL,eAEvC7wL,EAAAA,EAAAA,KAAC8wL,GAAW,CAAA5wL,SAAEpD,EAAM4zL,aAK5B7mK,OACE/sB,EAAMi0L,cACJ/wL,EAAAA,EAAAA,KAACgxL,GAAAA,EAAW,CAAA9wL,UACVF,EAAAA,EAAAA,KAAA,KAAAE,SAAIpD,EAAMi0L,gBAGf7wL,SAAA,EAEDF,EAAAA,EAAAA,KAACixL,GAAAA,EAAe,CACd5zL,MAAOP,EAAMo0L,YAAchqL,EAAE,0BAC7BmU,SAAUve,EAAMq0L,iBAElBnxL,EAAAA,EAAAA,KAACoxL,GAAAA,EAAa,CAAAlxL,UACZF,EAAAA,EAAAA,KAACqxL,GAAAA,EAAS,CACRC,iBAAkB55I,EAClBA,WAAYA,EACZ65I,gBAAgBvxL,EAAAA,EAAAA,KAACwxL,GAAgC,IACjDC,cAAevqL,EAAE,YACjBwqL,cAAe91H,EACf+1H,iBAAkBA,CAAC7kL,EAAG8uD,KACpBg0H,EAAc,IACdF,EAAY9zH,EAAS,EAEvBg2H,iBAAkBl6I,KAAgBkkB,EAClCi2H,cAAe3qL,EAAE,YACjB4qL,cAAe1tB,EACf2tB,iBAAkBA,CAACjlL,EAAGs3J,KACpBwrB,EAAc,IACdD,EAAYvrB,EAAS,EAEvB4tB,iBAAkBt6I,KAAgB0sH,EAClC6tB,uBAAqB,EACrBC,sBAAuBhrL,EAAE,iBACzBirL,sBAAuBjrL,EAAE,iBACzBkrL,iBAAkBlrL,EAAE,UACpBmrL,mBAAqBvqK,IACnBA,EAAMhS,iBACD8lD,EAIAwoG,EAIA1lI,IAHHkxJ,EAAc1oL,EAAE,yBAJhB0oL,EAAc1oL,EAAE,wBAOH,MAIpBpK,EAAMw1L,cACLtyL,EAAAA,EAAAA,KAACuyL,GAAAA,EAAe,CACdC,wBACE11L,EAAMw1L,aAActyL,EAAAA,EAAAA,KAAC+uL,GAAe,CAAC1oK,QAASvpB,EAAMw1L,mBAAkB3wL,EAExE8wL,0BAA2BvrL,EAAE,8CAMzC,CAEA,MAAMgpL,GAAkBxtL,EAAAA,GAAO0P,KAAIxP,WAAA,CAAAC,YAAA,oBAAXH,CAAW,mDAI7B8uL,IAAmC9uL,EAAAA,EAAAA,IAAOw0B,GAAAA,IAAsBt0B,WAAA,CAAAC,YAAA,oBAA7BH,CAA6B,mDAIhEouL,GAAcpuL,EAAAA,GAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAVH,CAAU,yBCrMvB,SAASgwL,GAAS51L,GACvB,MAAQojB,KAAMmG,IAAYyrC,EAAAA,GAAAA,IAAuBL,EAAM,SAAUpC,IAC3DijI,EAA4B,GAC9BjsK,GAA8B,iBAAZA,GACpBxc,OAAO4f,KAAKpD,GAAS+S,SAAShtB,IAC5BkmL,EAAYvuL,KAAK,CAAEkrL,UAAW5oK,EAAQja,GAAK6iL,UAAWxrL,KAAM2I,GAAM,IAItE,MAAM,cAAE2lD,EAAa,qBAAEK,GAAyBT,KAEhD,YAAsBhwD,IAAlBowD,GAEA/xD,EAAAA,EAAAA,KAAC4jD,GAAAA,EAAI,CAAA1jD,UACHF,EAAAA,EAAAA,KAACiqD,GAAY,MAKd8H,GAgBH/xD,EAAAA,EAAAA,KAAC44D,GAAmB,CAACD,aAASh3D,EAAUzB,UACtCF,EAAAA,EAAAA,KAACu3D,GAAiB,CAAAr3D,UAChBF,EAAAA,EAAAA,KAACy2D,GAAiB,CAAAv2D,SAAEpD,EAAMoD,gBAhB5BF,EAAAA,EAAAA,KAACyvL,GAAY,CACX6C,YAAaA,EACbzC,YAAY,cACZI,UAAWA,KACT79H,OACKD,EAAAA,GAAAA,KAAO,KAAM,GAAK,EAEzBu+H,SAAS,uBACTG,YAAavmJ,OAYrB,CC7Ce,SAASqoJ,KACtB,OACE3yL,EAAAA,EAAAA,KAAC4yL,EAAAA,GAAa,CAAA1yL,UACZF,EAAAA,EAAAA,KAACkgD,GAAa,CAAC1vC,uBAAwB,GAAGtQ,UACxCF,EAAAA,EAAAA,KAAC4xD,GAAqB,CAAA1xD,UACpBF,EAAAA,EAAAA,KAAC0yL,GAAQ,CAAAxyL,UACPF,EAAAA,EAAAA,KAAC2qL,GAAM,WAMnB,C","sources":["webpack://@ansible/ansible-ui/./framework/PageActions/PageAction.tsx","webpack://@ansible/ansible-ui/./framework/components/useBreakPoint.tsx","webpack://@ansible/ansible-ui/./framework/components/pfcolors.tsx","webpack://@ansible/ansible-ui/./framework/hooks/useID.tsx","webpack://@ansible/ansible-ui/./framework/useFrameworkTranslations.tsx","webpack://@ansible/ansible-ui/./framework/PageActions/PageActionUtils.tsx","webpack://@ansible/ansible-ui/./framework/PageActions/PageActionSwitch.tsx","webpack://@ansible/ansible-ui/./framework/PageActions/PageActionDropdown.tsx","webpack://@ansible/ansible-ui/./framework/PageActions/PageActionButton.tsx","webpack://@ansible/ansible-ui/./framework/PageActions/PageActionsPinned.tsx","webpack://@ansible/ansible-ui/./framework/PageActions/PageActions.tsx","webpack://@ansible/ansible-ui/./framework/PageAlertToaster.tsx","webpack://@ansible/ansible-ui/./framework/components/ErrorBoundary.tsx","webpack://@ansible/ansible-ui/./framework/PageCells/BytesCell.tsx","webpack://@ansible/ansible-ui/./framework/hooks/useClipboard.tsx","webpack://@ansible/ansible-ui/./framework/PageCells/CopyCell.tsx","webpack://@ansible/ansible-ui/./framework/PageSettings/PageSettingsProvider.tsx","webpack://@ansible/ansible-ui/./framework/utils/formatDateString.tsx","webpack://@ansible/ansible-ui/./framework/PageCells/DateTimeCell.tsx","webpack://@ansible/ansible-ui/./framework/PageCells/ElapsedTimeCell.tsx","webpack://@ansible/ansible-ui/./framework/PageCells/LabelsCell.tsx","webpack://@ansible/ansible-ui/./framework/components/IconWrapper.tsx","webpack://@ansible/ansible-ui/./framework/PageCells/TextCell.tsx","webpack://@ansible/ansible-ui/./framework/PageDashboard/PageChartContainer.tsx","webpack://@ansible/ansible-ui/./framework/components/Scrollable.tsx","webpack://@ansible/ansible-ui/./framework/PageDashboard/PageDashboard.tsx","webpack://@ansible/ansible-ui/./framework/components/IconButton.tsx","webpack://@ansible/ansible-ui/./framework/components/Help.tsx","webpack://@ansible/ansible-ui/./framework/PageDashboard/PageDashboardCard.tsx","webpack://@ansible/ansible-ui/./framework/PageDashboard/PageChartLegend.tsx","webpack://@ansible/ansible-ui/./framework/PageDashboard/PageDashboardChart.tsx","webpack://@ansible/ansible-ui/./framework/components/StandardPopover.tsx","webpack://@ansible/ansible-ui/./framework/PageDetails/PageDetail.tsx","webpack://@ansible/ansible-ui/./framework/PageDetails/PageDetails.tsx","webpack://@ansible/ansible-ui/./framework/PageToolbar/PageTableViewType.tsx","webpack://@ansible/ansible-ui/./framework/PageTable/PageTableColumn.tsx","webpack://@ansible/ansible-ui/./framework/PageDetails/PageDetailsFromColumns.tsx","webpack://@ansible/ansible-ui/./framework/PageForm/genericErrorAdapter.ts","webpack://@ansible/ansible-ui/./framework/components/BulkSelector.tsx","webpack://@ansible/ansible-ui/./framework/components/useOverridableState.tsx","webpack://@ansible/ansible-ui/./framework/PageInputs/PageMultiSelect.tsx","webpack://@ansible/ansible-ui/./framework/PageInputs/PageAsyncMultiSelect.tsx","webpack://@ansible/ansible-ui/./framework/PageInputs/PageSingleSelect.tsx","webpack://@ansible/ansible-ui/./framework/PageInputs/PageAsyncSingleSelect.tsx","webpack://@ansible/ansible-ui/./framework/PageToolbar/PageToolbarFilters/ToolbarDateRangeFilter.tsx","webpack://@ansible/ansible-ui/./framework/PageToolbar/PageToolbarFilters/ToolbarTextFilter.tsx","webpack://@ansible/ansible-ui/./framework/PageToolbar/PageToolbarToggleGroup.tsx","webpack://@ansible/ansible-ui/./framework/PageToolbar/PageToolbarFilter.tsx","webpack://@ansible/ansible-ui/./framework/PageToolbar/PageToolbarSort.tsx","webpack://@ansible/ansible-ui/./framework/PageToolbar/PageToolbarView.tsx","webpack://@ansible/ansible-ui/./framework/PageToolbar/PageToolbar.tsx","webpack://@ansible/ansible-ui/./framework/components/EmptyStateError.tsx","webpack://@ansible/ansible-ui/./framework/components/EmptyStateCustom.tsx","webpack://@ansible/ansible-ui/./framework/components/EmptyStateNoData.tsx","webpack://@ansible/ansible-ui/./framework/PageDialogs/PageDialog.tsx","webpack://@ansible/ansible-ui/./framework/PageTable/useTableItems.tsx","webpack://@ansible/ansible-ui/./framework/components/ReorderItems.tsx","webpack://@ansible/ansible-ui/./framework/components/useManagedItems.tsx","webpack://@ansible/ansible-ui/./framework/PageTable/PageLoadingTable.tsx","webpack://@ansible/ansible-ui/./framework/PageTable/PagePagination.tsx","webpack://@ansible/ansible-ui/./framework/components/PageGrid.tsx","webpack://@ansible/ansible-ui/./framework/PageTable/PageTableCard.tsx","webpack://@ansible/ansible-ui/./framework/PageTable/PageTableCards.tsx","webpack://@ansible/ansible-ui/./framework/PageTable/PageTableList.tsx","webpack://@ansible/ansible-ui/./framework/PageTable/PageTable.tsx","webpack://@ansible/ansible-ui/./framework/components/useManageColumns.tsx","webpack://@ansible/ansible-ui/./framework/hooks/useAbortController.tsx","webpack://@ansible/ansible-ui/./framework/PageDialogs/BulkActionDialog.tsx","webpack://@ansible/ansible-ui/./framework/utils/compare.ts","webpack://@ansible/ansible-ui/./framework/PageDialogs/BulkConfirmationDialog.tsx","webpack://@ansible/ansible-ui/./framework/PageTable/PageMultiSelectList.tsx","webpack://@ansible/ansible-ui/./framework/PageDialogs/MultiSelectDialog.tsx","webpack://@ansible/ansible-ui/./framework/PageEmptyStates/PageNotFound.tsx","webpack://@ansible/ansible-ui/./framework/PageForm/ErrorAlert.tsx","webpack://@ansible/ansible-ui/./framework/PageForm/PageFormButtons.tsx","webpack://@ansible/ansible-ui/./framework/PageForm/PageForm.tsx","webpack://@ansible/ansible-ui/./framework/utils/strings.ts","webpack://@ansible/ansible-ui/./framework/PageForm/Inputs/validation-hooks.tsx","webpack://@ansible/ansible-ui/./framework/PageForm/Inputs/PageFormCheckbox.tsx","webpack://@ansible/ansible-ui/./framework/components/DataEditor.tsx","webpack://@ansible/ansible-ui/./framework/components/DropZone.tsx","webpack://@ansible/ansible-ui/./framework/components/icons/ExpandIcon.tsx","webpack://@ansible/ansible-ui/./framework/utils/download-file.ts","webpack://@ansible/ansible-ui/./framework/PageForm/Inputs/PageFormGroup.tsx","webpack://@ansible/ansible-ui/./framework/PageForm/Inputs/PageFormDataEditor.tsx","webpack://@ansible/ansible-ui/./framework/PageForm/Inputs/PageFormSelect.tsx","webpack://@ansible/ansible-ui/./framework/PageForm/Inputs/PageFormSwitch.tsx","webpack://@ansible/ansible-ui/./framework/PageForm/Inputs/PageFormTextArea.tsx","webpack://@ansible/ansible-ui/./framework/PageForm/Inputs/PageFormTextInput.tsx","webpack://@ansible/ansible-ui/./framework/PageNavigation/PageNavSidebar.tsx","webpack://@ansible/ansible-ui/./framework/PageNavigation/PageNavigationRoutesProvider.tsx","webpack://@ansible/ansible-ui/./framework/PageNotifications/PageNotificationsProvider.tsx","webpack://@ansible/ansible-ui/./framework/PageTabs/PageBreadcrumbs.tsx","webpack://@ansible/ansible-ui/./framework/PageFramework.tsx","webpack://@ansible/ansible-ui/./framework/PageHeader.tsx","webpack://@ansible/ansible-ui/./framework/PageLayout.tsx","webpack://@ansible/ansible-ui/./framework/PageMasthead/PageMasthead.tsx","webpack://@ansible/ansible-ui/./framework/PageMasthead/PageNotificationsIcon.tsx","webpack://@ansible/ansible-ui/./framework/PageMasthead/PageThemeSwitcher.tsx","webpack://@ansible/ansible-ui/./framework/PageNavigation/PageNavigation.tsx","webpack://@ansible/ansible-ui/./framework/PageNavigation/PageApp.tsx","webpack://@ansible/ansible-ui/./framework/PageNavigation/useGetPageUrl.tsx","webpack://@ansible/ansible-ui/./framework/PageNavigation/usePageNavigate.tsx","webpack://@ansible/ansible-ui/./framework/components/useWindowLocation.tsx","webpack://@ansible/ansible-ui/./framework/components/useIsMounted.tsx","webpack://@ansible/ansible-ui/./framework/components/useURLSearchParams.tsx","webpack://@ansible/ansible-ui/./framework/PageWizard/PageWizardProvider.tsx","webpack://@ansible/ansible-ui/./framework/PageWizard/PageWizardFooter.tsx","webpack://@ansible/ansible-ui/./framework/PageWizard/PageWizardBody.tsx","webpack://@ansible/ansible-ui/./framework/PageWizard/PageWizardHeader.tsx","webpack://@ansible/ansible-ui/./framework/PageWizard/PageWizardNavigation.tsx","webpack://@ansible/ansible-ui/./framework/PageWizard/PageWizardToggle.tsx","webpack://@ansible/ansible-ui/./framework/PageWizard/PageWizard.tsx","webpack://@ansible/ansible-ui/./framework/components/LoadingState.tsx","webpack://@ansible/ansible-ui/./framework/components/LoadingPage.tsx","webpack://@ansible/ansible-ui/./framework/components/icons/RunningIcon.tsx","webpack://@ansible/ansible-ui/./framework/useView.tsx","webpack://@ansible/ansible-ui/./framework/useInMemoryView.tsx","webpack://@ansible/ansible-ui/./frontend/common/i18n.tsx","webpack://@ansible/ansible-ui/./frontend/common/crud/RequestError.ts","webpack://@ansible/ansible-ui/./frontend/common/crud/cookie.ts","webpack://@ansible/ansible-ui/./frontend/common/crud/requestCommon.ts","webpack://@ansible/ansible-ui/./frontend/common/crud/Data.tsx","webpack://@ansible/ansible-ui/./frontend/common/crud/normalizeQueryString.ts","webpack://@ansible/ansible-ui/./frontend/hub/common/api/query-string.ts","webpack://@ansible/ansible-ui/./frontend/hub/common/api/formatPath.tsx","webpack://@ansible/ansible-ui/./frontend/awx/common/api/awx-utils.tsx","webpack://@ansible/ansible-ui/./frontend/awx/common/useAwxActiveUser.tsx","webpack://@ansible/ansible-ui/./frontend/assets/awx-logo.svg","webpack://@ansible/ansible-ui/./framework/PageMasthead/PageMastheadDropdown.tsx","webpack://@ansible/ansible-ui/./frontend/common/AboutModal.tsx","webpack://@ansible/ansible-ui/./frontend/common/PageRefreshIcon.tsx","webpack://@ansible/ansible-ui/./frontend/common/crud/useGet.tsx","webpack://@ansible/ansible-ui/./frontend/awx/common/useAwxConfig.tsx","webpack://@ansible/ansible-ui/./frontend/awx/common/useAwxWebSocket.tsx","webpack://@ansible/ansible-ui/./frontend/awx/common/useDocsVersion.tsx","webpack://@ansible/ansible-ui/./frontend/awx/common/util/useGetDocsUrl.ts","webpack://@ansible/ansible-ui/./frontend/awx/main/AwxRoutes.tsx","webpack://@ansible/ansible-ui/./frontend/awx/main/AwxMasthead.tsx","webpack://@ansible/ansible-ui/./framework/PageSettings/usePageSettingOptions.tsx","webpack://@ansible/ansible-ui/./framework/PageSettings/PageSettingsDetails.tsx","webpack://@ansible/ansible-ui/./framework/PageForm/Inputs/PageFormSingleSelect.tsx","webpack://@ansible/ansible-ui/./framework/PageSettings/PageSettingsForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/roles/hooks/useAwxRoleColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/roles/hooks/useAwxRoleMetadata.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/roles/components/AwxRolePermissions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/common/AwxError.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/roles/AwxRoleDetails.tsx","webpack://@ansible/ansible-ui/./frontend/common/PersistentFilters.ts","webpack://@ansible/ansible-ui/./frontend/common/PageRoutedTabs.tsx","webpack://@ansible/ansible-ui/./frontend/awx/common/adapters/awxErrorAdapter.tsx","webpack://@ansible/ansible-ui/./frontend/awx/common/useAwxBulkConfirmation.tsx","webpack://@ansible/ansible-ui/./frontend/common/utils/nameKeyFn.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/roles/hooks/useDeleteAwxRoles.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/roles/hooks/useAwxRoleRowActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/roles/AwxRolePage.tsx","webpack://@ansible/ansible-ui/./frontend/awx/common/useAwxView.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/roles/components/AwxRoleExpandedRow.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/roles/AwxRoles.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/roles/hooks/useAwxRoleToolbarActions.tsx","webpack://@ansible/ansible-ui/./framework/PageForm/Inputs/PageFormMultiSelect.tsx","webpack://@ansible/ansible-ui/./framework/PageForm/Utils/PageFormHidden.tsx","webpack://@ansible/ansible-ui/./frontend/common/useInvalidateCache/useInvalidateCache.tsx","webpack://@ansible/ansible-ui/./frontend/common/crud/usePatchRequest.tsx","webpack://@ansible/ansible-ui/./frontend/common/crud/usePostRequest.tsx","webpack://@ansible/ansible-ui/./frontend/awx/common/AwxPageForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/roles/RoleForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/common/ActivityStreamIcon.tsx","webpack://@ansible/ansible-ui/./frontend/common/crud/useOptions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/settings/useAwxSettingsGroups.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/settings/AwxSettings.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/settings/AwxSettingsCategoryDetails.tsx","webpack://@ansible/ansible-ui/./framework/PageForm/Utils/PageFormSection.tsx","webpack://@ansible/ansible-ui/./framework/PageForm/Inputs/PageFormFileUpload.tsx","webpack://@ansible/ansible-ui/./frontend/common/crud/useDeleteRequest.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/settings/useRevertAllSettingsModal.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/settings/AwxSettingsForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/settings/AwxSettingsCategoryForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/topology/components/MeshNode.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/topology/Legend.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/topology/Loader.tsx","webpack://@ansible/ansible-ui/./framework/components/Dotted.tsx","webpack://@ansible/ansible-ui/./frontend/common/LastModifiedPageDetail.tsx","webpack://@ansible/ansible-ui/./frontend/common/Status.tsx","webpack://@ansible/ansible-ui/./frontend/awx/common/util/strings.ts","webpack://@ansible/ansible-ui/./frontend/awx/common/CredentialLabel.tsx","webpack://@ansible/ansible-ui/./frontend/common/columns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instances/hooks/useNodeTypeTooltip.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instances/components/InstanceForksSlider.tsx","webpack://@ansible/ansible-ui/./framework/components/Unavailable.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instances/hooks/useInstancesColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instances/hooks/useRemoveInstances.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instances/hooks/useInstanceRowActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instances/hooks/useInstanceActions.tsx","webpack://@ansible/ansible-ui/./framework/PageDetails/PageDetailCodeEditor.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instances/components/InstanceSwitch.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instances/InstanceDetails.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/hooks/useCloseSidebar.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/types.ts","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/hooks/useCreateEdge.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/hooks/useGetNodeTypeDetail.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/constants.ts","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/hooks/useRemoveGraphElements.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/hooks/useRemoveNode.tsx","webpack://@ansible/ansible-ui/./framework/utils/codeEditorUtils.ts","webpack://@ansible/ansible-ui/./frontend/awx/common/useAwxGetAllPages.tsx","webpack://@ansible/ansible-ui/./frontend/awx/common/util/getAddedAndRemoved.ts","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/hooks/useSaveVisualizer.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/hooks/useGetTimeoutString.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/JobTemplateFormHelpers.ts","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/wizard/helpers.ts","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/hooks/useGetInitialValues.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/ViewOptionsProvider.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/components/AddNodeButton.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/components/CustomLabel.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/hooks/useGetPath.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/components/EdgeTerminal.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/components/CustomEdge.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/components/CustomNode.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/components/EdgeContextMenu.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/components/Legend.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/components/NodeContextMenu.tsx","webpack://@ansible/ansible-ui/./frontend/awx/common/useVerbosityString.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/components/InventorySourceDetails.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/components/PromptDetail.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/components/NodeCodeEditorDetail.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/components/NodeTagDetail.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/components/WebhookService.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/components/JobTemplateDetails.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/components/NodeNameDetail.tsx","webpack://@ansible/ansible-ui/./frontend/common/scm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/components/ProjectDetails.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/components/SidebarHeader.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/components/WorkflowJobTemplateDetails.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/components/WorkflowNodeDetails.tsx","webpack://@ansible/ansible-ui/./framework/PageForm/Inputs/FormGroupTypeAheadMultiSelect.tsx","webpack://@ansible/ansible-ui/./framework/PageForm/Inputs/PageFormCreatableSelect.tsx","webpack://@ansible/ansible-ui/./framework/PageDialogs/SingleSelectDialog.tsx","webpack://@ansible/ansible-ui/./framework/PageForm/Inputs/PageFormAsyncSingleSelect.tsx","webpack://@ansible/ansible-ui/./frontend/common/AsyncQueryLabel.tsx","webpack://@ansible/ansible-ui/./frontend/awx/common/PageFormSingleSelectAwxResource.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credentials/hooks/useCredentialsColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/common/useDynamicFilters.tsx","webpack://@ansible/ansible-ui/./frontend/awx/common/awx-toolbar-filters.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credentials/hooks/useCredentialsFilters.tsx","webpack://@ansible/ansible-ui/./framework/PageForm/Inputs/PageFormAsyncMultiSelect.tsx","webpack://@ansible/ansible-ui/./frontend/awx/common/PageFormMultiSelectAwxResource.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credentials/components/PageFormCredentialSelect.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credentials/hooks/useCredentialsValidate.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/execution-environments/hooks/useExecutionEnvironmentsColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/execution-environments/hooks/useExecutionEnvironmentsFilters.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/execution-environments/components/PageFormSelectExecutionEnvironment.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instance-groups/hooks/useInstanceGroupColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instance-groups/hooks/useDeleteInstanceGroups.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instance-groups/hooks/useInstanceGroupActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instance-groups/InstanceGroups.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instance-groups/components/PageFormInstanceGroupSelect.tsx","webpack://@ansible/ansible-ui/./frontend/awx/common/PageFormLabelSelect.tsx","webpack://@ansible/ansible-ui/./framework/PageForm/Inputs/PageFormAsyncSelect.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/hooks/useInventoriesColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/hooks/useInventoriesFilters.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/hooks/useSelectInventory.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/components/PageFormInventorySelect.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/TemplatePage/steps/ConditionalField.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/wizard/NodePromptsStep.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/wizard/PromptReviewDetails.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/wizard/NodeReviewStep.tsx","webpack://@ansible/ansible-ui/./framework/PageForm/Utils/PageFormWatch.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/management-jobs/hooks/useManagementJobColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/management-jobs/hooks/useManagementJobFilters.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/management-jobs/hooks/useSelectManagementJobs.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/management-jobs/components/PageFormManagementJobsSelect.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/hooks/useInventorySourceColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/hooks/useInventorySourceFilters.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/hooks/useSelectInventorySource.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/components/PageFormInventorySourceSelect.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/projects/hooks/useProjectsColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/projects/hooks/useProjectNameColumn.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/projects/hooks/useProjectStatusColumn.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/projects/hooks/useLastUsedColumn.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/projects/hooks/useDefaultEnvironment.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/projects/hooks/useProjectsFilters.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/projects/hooks/useSelectProject.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/projects/components/PageFormProjectSelect.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/useGetJobOutputUrl.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/components/Sparkline.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/hooks/useTemplateColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/hooks/useSelectJobTemplate.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/components/PageFormJobTemplateSelect.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/wizard/NodeTypeStep.tsx","webpack://@ansible/ansible-ui/./frontend/awx/common/SurveyStep.tsx","webpack://@ansible/ansible-ui/./framework/utils/dateTimeHelpers.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/WorkflowOutput/WorkflowOutputGraph.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/WorkflowOutput/hooks/useWorkflowOutput.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/WorkflowOutput/hooks/useStatusDecorator.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/WorkflowOutput/WorkflowOutputNode.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/WorkflowOutput/WorkflowOutput.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/wizard/NodeAddWizard.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/wizard/NodeEditWizard.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/components/Sidebar.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/hooks/useSelectedNode.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/hooks/useLaunchTemplate.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/components/WorkflowVisualizerToolbar.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/topology/Sidebar.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/topology/components/MeshEdge.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/topology/Visualizer.tsx","webpack://@ansible/ansible-ui/./framework/components/EmptyStateUnauthorized.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/topology/Topology.tsx","webpack://@ansible/ansible-ui/./framework/components/EmptyStateFilter.tsx","webpack://@ansible/ansible-ui/./frontend/awx/analytics/components/Chart/types.ts","webpack://@ansible/ansible-ui/./frontend/awx/analytics/components/Chart/convertApi.ts","webpack://@ansible/ansible-ui/./frontend/awx/analytics/components/Chart/index.tsx","webpack://@ansible/ansible-ui/./frontend/awx/analytics/components/Chart/hydrateSchema.ts","webpack://@ansible/ansible-ui/./frontend/awx/analytics/utilities/currencyFormatter.ts","webpack://@ansible/ansible-ui/./frontend/awx/analytics/Reports/AutomationFormula.tsx","webpack://@ansible/ansible-ui/./frontend/awx/analytics/Reports/CalculationCost.tsx","webpack://@ansible/ansible-ui/./frontend/awx/analytics/Reports/ErrorStates.tsx","webpack://@ansible/ansible-ui/./frontend/awx/analytics/utilities/numberFormatter.ts","webpack://@ansible/ansible-ui/./frontend/awx/analytics/Reports/TemplatesTable/ExpandedRowContents.tsx","webpack://@ansible/ansible-ui/./frontend/awx/analytics/Reports/TemplatesTable/Row.tsx","webpack://@ansible/ansible-ui/./frontend/awx/analytics/Reports/TemplatesTable/index.tsx","webpack://@ansible/ansible-ui/./frontend/awx/analytics/Reports/TotalSavings.tsx","webpack://@ansible/ansible-ui/./frontend/awx/analytics/Reports/AutomationCalculator.tsx","webpack://@ansible/ansible-ui/./frontend/awx/analytics/Reports/constants.ts","webpack://@ansible/ansible-ui/./frontend/awx/analytics/Reports/Reports.tsx","webpack://@ansible/ansible-ui/./framework/PageDashboard/usePageChartColors.tsx","webpack://@ansible/ansible-ui/./frontend/awx/analytics/subscription-usage/SubscriptionUsageChart.tsx","webpack://@ansible/ansible-ui/./frontend/awx/analytics/subscription-usage/SubscriptionUsage.tsx","webpack://@ansible/ansible-ui/./frontend/awx/analytics/subscription-usage/useSubscriptionUsageFilters.tsx","webpack://@ansible/ansible-ui/./framework/PageDashboard/PageDashboardCountBar.tsx","webpack://@ansible/ansible-ui/./frontend/awx/overview/cards/AwxCountsCard.tsx","webpack://@ansible/ansible-ui/./frontend/awx/overview/charts/JobsChart.tsx","webpack://@ansible/ansible-ui/./frontend/awx/overview/cards/AwxJobActivityCard.tsx","webpack://@ansible/ansible-ui/./frontend/awx/overview/cards/AwxRecentInventoriesCard.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/jobUtils.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/hooks/useJobsColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/overview/cards/AwxRecentJobsCard.tsx","webpack://@ansible/ansible-ui/./frontend/awx/overview/cards/AwxRecentProjectsCard.tsx","webpack://@ansible/ansible-ui/./frontend/awx/overview/AwxOverview.tsx","webpack://@ansible/ansible-ui/./frontend/awx/overview/hooks/useManagedAwxDashboard.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/hooks/useHostMetricsColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/hooks/useDeleteHostMetrics.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/HostMetrics.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/hooks/useHostMetricsFilters.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/hooks/useHostMetricsToolbarActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/hooks/useHostMetricsRowActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/activity-stream/hooks/useGetActivityStreamRoute.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/constants.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/activity-stream/components/ActivityDescription.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/activity-stream/components/ActivityStreamInitiatedByCell.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/activity-stream/hooks/useActivityStreamDialog.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/activity-stream/ActivityStream.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/activity-stream/hooks/useActivityStreamFilters.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/activity-stream/hooks/useActivityStreamColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/activity-stream/hooks/useActivityStreamActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/common/useAwxBulkActionDialog.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/users/hooks/useAddUsersToResources.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/users/components/UserType.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/users/hooks/useUsersColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/users/hooks/useUsersFilters.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/users/hooks/useSelectUsers.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/common/useUserAndTeamRolesLists.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/organizations/hooks/useDeleteOrganizations.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/organizations/Organizations.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/users/hooks/useSelectUsersAddOrganizations.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/users/hooks/useSelectUsersRemoveOrganizations.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/users/hooks/useRemoveUsersFromOrganizations.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/organizations/components/PageFormOrganizationSelect.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credentials/components/BecomeMethodField.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credentials/components/CredentialMultilineInput.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credentials/components/GCEUploadField.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credential-types/hooks/useCredentialTypesFilters.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credential-types/hooks/useCredentialTypesColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credentials/components/PageFormSelectCredentialType.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credentials/CredentialPlugins/components/PageFormExternalCredentialSelect.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credentials/utils/CredentialsTestButton.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credentials/CredentialPlugins/CredentialPlugins.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credentials/CredentialPlugins/hooks/useCredentialPluginsDialog.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credentials/utils/CredentialsExternalTestModal.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credentials/hooks/useCredentialsTestModal.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credentials/CredentialForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credentials/components/CredentialTypeDetail.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credentials/CredentialPage/CredentialDetails.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/common/useViewActivityStream.tsx","webpack://@ansible/ansible-ui/./frontend/common/utils/RBAChelpers.ts","webpack://@ansible/ansible-ui/./frontend/awx/access/credentials/hooks/useDeleteCredentials.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credentials/hooks/useCredentialActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credentials/hooks/useCopyCredential.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credentials/CredentialPage/CredentialPage.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credentials/CredentialsList.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credentials/hooks/useCredentialToolbarActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credentials/Credentials.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/hooks/useDeleteTemplates.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/hooks/useTemplateActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/hooks/useCopyTemplate.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/TemplatesList.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/hooks/useTemplateFilters.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credentials/CredentialPage/CredentialJobTemplates.tsx","webpack://@ansible/ansible-ui/./frontend/common/access/hooks/useMapContentTypeToDisplayName.tsx","webpack://@ansible/ansible-ui/./frontend/common/access/RolesWizard/steps/RoleAssignmentsReviewStep.tsx","webpack://@ansible/ansible-ui/./frontend/awx/common/useAwxMultiSelectListView.ts","webpack://@ansible/ansible-ui/./frontend/common/access/RolesWizard/steps/SelectRolesStep.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/common/AwxRolesWizardSteps/AwxSelectRolesStep.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/roles/hooks/useAwxRolesFilters.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/common/AwxRolesWizardSteps/AwxSelectUsersStep.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credentials/components/CredentialAddUsers.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/teams/hooks/useTeamsFilters.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/common/AwxRolesWizardSteps/AwxSelectTeamsStep.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credentials/components/CredentialAddTeams.tsx","webpack://@ansible/ansible-ui/./frontend/eda/common/eda-utils.tsx","webpack://@ansible/ansible-ui/./frontend/eda/common/edaErrorAdapter.tsx","webpack://@ansible/ansible-ui/./frontend/eda/common/useEdaBulkConfirmation.tsx","webpack://@ansible/ansible-ui/./frontend/hub/common/adapters/hubErrorAdapter.tsx","webpack://@ansible/ansible-ui/./frontend/hub/common/useHubBulkConfirmation.tsx","webpack://@ansible/ansible-ui/./frontend/common/access/components/Access.tsx","webpack://@ansible/ansible-ui/./frontend/eda/common/useEventDrivenView.tsx","webpack://@ansible/ansible-ui/./frontend/common/access/components/TeamAccess.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credentials/CredentialPage/CredentialTeamAccess.tsx","webpack://@ansible/ansible-ui/./frontend/common/access/components/UserAccess.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credentials/CredentialPage/CredentialUserAccess.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credential-types/CredentialTypeForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credential-types/CredentialTypePage/CredentialTypeCredentials.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credential-types/CredentialTypePage/CredentialTypeDetails.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credential-types/hooks/useDeleteCredentialTypes.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credential-types/hooks/useCredentialTypeActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credential-types/CredentialTypePage/CredentialTypePage.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/credential-types/CredentialTypes.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/execution-environments/hooks/useDeleteExecutionEnvironments.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/execution-environments/hooks/useExecutionEnvRowActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/execution-environments/ExecutionEnvironmentPage/ExecutionEnvironmentPage.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/execution-environments/ExecutionEnvironmentsList.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/execution-environments/hooks/useExecutionEnvToolbarActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/execution-environments/ExecutionEnvironments.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/execution-environments/ExecutionEnvironmentPage/ExecutionEnvironmentDetails.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/execution-environments/ExecutionEnvironmentForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/execution-environments/ExecutionEnvironmentPage/ExecutionEnvironmentTemplates.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/execution-environments/components/ExecutionEnvironmentAddTeams.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/execution-environments/components/ExecutionEnvironmentAddUsers.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/execution-environments/ExecutionEnvironmentPage/ExecutionEnvironmentTeamAccess.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/execution-environments/ExecutionEnvironmentPage/ExecutionEnvironmentUserAccess.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/hosts/hooks/useGetHost.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/hosts/hooks/useHostsColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/hosts/hooks/useDeleteHosts.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/hosts/hooks/useHostsActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/hosts/HostPage/HostPage.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/hosts/hooks/useHostsFilters.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/hosts/Hosts.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/hosts/hooks/useHostsToolbarActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/hooks/useCancelJobs.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/hooks/useDeleteJobs.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/hooks/useRelaunchJob.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/hooks/useRelaunchOptions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/hooks/useJobHeaderActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/hooks/useJobsFilters.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/JobsList.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/hooks/useJobRowActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/hooks/useJobToolbarActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/common/JobColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/inventoryHostsPage/hooks/useHostsJobsColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/hosts/HostPage/HostJobs.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/hooks/useDeleteInventories.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/hooks/useInventoryActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/hooks/useCopyInventory.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/InventoryPage/InventoryPage.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/inventoryHostsPage/InventoryHostForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/inventoryHostsPage/InventoryHostDetails.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/inventoryHostsPage/hooks/useHostsGroupsFilters.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/inventoryHostsPage/hooks/useHostsGroupsColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/inventoryHostsPage/InventoryHostGroupsModal.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/inventoryHostsPage/hooks/useAssociateGroupsToHost.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/groups/hooks/useDeleteGroups.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/hooks/useInventoriesGroupsToolbarActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/inventoryHostsPage/InventoryHostGroups.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/inventoryHostsPage/hooks/useHostsGroupsToolbarActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/inventoryHostsPage/hooks/useDisassociateGroups.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/inventoryHostsPage/hooks/useHostsGroupsActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/inventoryHostsPage/InventoryHostFacts.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instances/hooks/useInstancesFilter.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instance-groups/InstanceGroupPage/hooks/useAssociateInstanceToIG.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instance-groups/InstanceGroupPage/hooks/useAssociateInstanceModal.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instances/components/InstancesList.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instances/hooks/useInstanceToolbarActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instances/hooks/useRunHealthCheck.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instance-groups/InstanceGroupPage/hooks/useIGInstanceToolbarActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instance-groups/InstanceGroupPage/hooks/useDisassociateInstanceFromIG.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instance-groups/InstanceGroupPage/hooks/useIGInstanceRowActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instance-groups/InstanceGroupPage/InstanceGroupInstances.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instance-groups/InstanceGroupPage/InstanceGroupInstancesPage/InstanceGroupInstancesPage.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instance-groups/InstanceGroupPage/InstanceGroupTeamAccess.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instance-groups/InstanceGroupPage/InstanceGroupUserAccess.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instance-groups/InstanceGroupForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instance-groups/InstanceGroupAddTeams.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instance-groups/InstanceGroupAddUsers.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instance-groups/InstanceGroupPage/InstanceGroupDetails.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instance-groups/InstanceGroupPage/InstanceGroupJobs.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instance-groups/InstanceGroupPage/hooks/useInstanceGroupJobsColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instance-groups/ContainerGroupForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instance-groups/InstanceGroupPage/InstanceGroupPage.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instances/InstanceForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instances/Instances.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instances/InstancesPage.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instances/hooks/usePeersColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instances/hooks/useSelectAssociatePeers.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instances/InstancePeers.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instances/hooks/useAssociatePeersToInstance.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instances/hooks/useDisassociatePeer.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/instances/InstanceListenerAddresses.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/Inventories.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/hooks/useInventoriesToolbarActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/components/ConstructedInventoryHint.tsx","webpack://@ansible/ansible-ui/./frontend/awx/main/ansibleDocsUrls.ts","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/components/LabelHelp.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/InventoryForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/common/ExecutionEnvironmentDetail.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/inventorySources/InventorySourceDetails.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/InventoryPage/InventoryDetails.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/hooks/useInventoryTypes.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/hooks/useInventorySourceActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/hooks/useDeleteInventorySources.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/hooks/useCancelInventoryUpdate.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/inventorySources/InventorySourcePage.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/types.ts","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/wizard/constants.ts","webpack://@ansible/ansible-ui/./framework/PageForm/Inputs/FormGroupDateTimePicker.tsx","webpack://@ansible/ansible-ui/./framework/PageForm/Inputs/PageFormDateTimePicker.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/components/RuleForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/hooks/useGet24HourTime.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/hooks/ruleHelpers.tsx","webpack://@ansible/ansible-ui/./frontend/common/label-group-wrapper.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/components/ScheduleSummary.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/SchedulePage/TimezoneToggle.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/components/RulesList.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/hooks/useRuleRowActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/wizard/RulesStep.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/wizard/ExceptionsStep.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/hooks/useSelectWorkflowJobTemplate.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/components/PageFormWorkflowJobTemplateSelect.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/components/ScheduleTypeInputs.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/components/ScheduleResourceInputs.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/hooks/useGetTimezones.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/wizard/ScheduleSelectStep.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/hooks/useProcessLabels.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/hooks/useProcessSchedules.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/hooks/useProcessCredentials.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/hooks/useProcessInstanceGroups.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/wizard/ScheduleReviewStep.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/hooks/useGetScheduleUrl.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/hooks/useSetRRuleItemToRuleSet.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/wizard/ScheduleAddWizard.tsx","webpack://@ansible/ansible-ui/./frontend/awx/common/UserDateDetail.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/SchedulePage/ScheduleDetails.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/hooks/useSchedulesColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/hooks/useDeleteSchedules.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/hooks/useSchedulesActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/SchedulePage/SchedulePage.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/InventoryPage/InventoryJobTemplates.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/hooks/useInventoriesHostsColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/InventoryPage/InventoryHosts.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/hooks/useInventoriesHostsToolbarActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/hooks/useInventoriesSourcesToolbarActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/sources/hooks/useDeleteSources.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/sources/hooks/useSourcesColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/InventoryPage/InventorySources.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/groups/hooks/useGroupsFilters.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/hooks/useInventoriesGroupsActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/InventoryPage/InventoryGroups.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/hooks/useInventoriesGroupsColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/groups/GroupPage.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/hooks/useInventoriesGroupActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/inventoryHostsPage/InventoryHostPage.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/groups/GroupCreate.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/groups/GroupEdit.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/inventoryGroup/InventoryGroupForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/sources/component/PageFormInventoryFileSelect.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/sources/InventorySourceSubForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/sources/InventorySourceForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/groups/GroupDetails.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/inventoryHostsPage/InventoryHostJobs.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/hosts/hooks/useHostSelectDialog.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/groups/GroupHosts.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/hooks/useInventoriesGroupsHostsToolbarActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/hosts/hooks/useDisassociateHosts.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/hooks/useInventoriesGroupsHostsActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/hosts/hooks/useHostsEmptyStateActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/groups/hooks/useDisassociateGroups.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/groups/hooks/useGroupsColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/groups/hooks/useGroupSelectDialog.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/groups/GroupRelatedGroups.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/groups/hooks/useRelatedGroupsColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/groups/hooks/useRelatedGroupsToolbarActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/groups/hooks/useRelatedGroupsEmptyStateActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/notifications/ResourceNotifications.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/notifications/hooks/useNotificationFilters.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/notifications/hooks/useNotificationColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/notifications/hooks/useNotificationActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/SchedulesList.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/hooks/useSchedulesFilter.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/hooks/useSchedulesToolbarActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/InventoryPage/InventoryJobs.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/components/RunCommandSteps.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/InventoryRunCommand.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/wizard/ScheduleEditWizard.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/InventoryPage/InventoryTeamAccess.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/InventoryPage/InventoryUserAccess.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/components/InventoryAddUsers.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/inventories/components/InventoryAddTeams.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/JobDetails.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/WorkflowOutputNavigation.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/JobHeader.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/hooks/useDownloadJobOutput.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/JobPage.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/JobOutput/StatusBar.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/JobOutput/JobOutputLoadingRow.tsx","webpack://@ansible/ansible-ui/./frontend/common/Ansi.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/JobOutput/JobEventEllipsis.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/JobOutput/JobOutputRow.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/JobOutput/PageControls.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/JobOutput/useJobOutput.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/JobOutput/util.ts","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/JobOutput/HostEventModal.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/JobOutput/JobOutputEvents.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/JobOutput/useJobOutputChildrenSummary.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/JobOutput/useVirtualized.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/JobOutput/useScrollControls.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/JobOutput/JobOutputToolbar.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/JobOutput/JobStatusBar.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/JobOutput/JobOutput.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/jobs/Jobs.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/TemplatePage/steps/CredentialPasswordsStep.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/TemplatePage/steps/TemplateLaunchReviewStep.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/TemplatePage/RelaunchTemplateWithPasswords.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/management-jobs/ManagementJobPage/ManagementJobPage.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/management-jobs/components/ManagementJobsRetainDataModal.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/management-jobs/ManagementJobsList.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/management-jobs/hooks/useManagementJobRowActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/management-jobs/hooks/useManagementJobPrompt.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/notifiers/hooks/useNotifiersColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/notifiers/hooks/useDeleteNotifiers.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/notifiers/hooks/useNotifiersRowActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/notifiers/hooks/useCopyNotifier.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/notifiers/hooks/useNotificationsWatch.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/notifiers/Notifiers.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/notifiers/hooks/useNotifiersFilters.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/notifiers/hooks/useNotifiersToolbarActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/notifiers/NotifierFormInner.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/notifiers/NotifierFormMessages.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/notifiers/notifierFormMessagesHelpers.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/notifiers/NotifierForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/notifiers/NotificationPage/NotificationDetails.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/notifiers/NotificationPage/NotificationPage.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/notifiers/NotificationPage/NotificationTeamAccess.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/notifiers/NotificationPage/NotificationUserAccess.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/notifiers/components/NotifierAddUsers.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/notifiers/components/NotifierAddTeams.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/organizations/OrganizationForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/organizations/OrganizationPage/OrganizationUserAccess.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/organizations/OrganizationPage/OrganizationDetails.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/organizations/OrganizationPage/OrganizationPage.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/organizations/OrganizationPage/OrganizationTeamsAccess.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/organizations/OrganizationPage/OrganizationExecutionEnvironments.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/organizations/components/OrganizationAddUsers.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/organizations/components/OrganizationAddTeams.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/projects/ProjectPage/ProjectDetails.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/projects/ProjectSubForms/ScmTypeOptions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/projects/ProjectSubForms/ArchiveSubForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/projects/ProjectSubForms/GitSubForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/projects/ProjectSubForms/InsightsSubForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/projects/ProjectSubForms/ManualSubForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/projects/ProjectSubForms/SvnSubForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/projects/ProjectPage/ProjectForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/projects/ProjectPage/ProjectJobTemplates.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/projects/hooks/useCancelProjects.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/projects/hooks/useDeleteProjects.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/projects/hooks/useProjectActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/projects/ProjectPage/ProjectPage.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/projects/Projects.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/projects/hooks/useProjectToolbarActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/projects/ProjectPage/ProjectTeams.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/projects/ProjectPage/ProjectUsers.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/projects/components/AwxProjectAddUsers.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/projects/components/AwxProjectAddTeams.tsx","webpack://@ansible/ansible-ui/./frontend/awx/views/schedules/Schedules.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/teams/TeamForm.tsx","webpack://@ansible/ansible-ui/./frontend/common/access/TeamDetails.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/teams/TeamPage/AwxTeamDetails.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/teams/TeamPage/TeamAccess.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/users/hooks/useSelectUsersAddTeams.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/teams/hooks/useTeamsColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/teams/hooks/useDeleteTeams.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/teams/hooks/useTeamActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/users/hooks/useSelectAndRemoveUsersFromTeam.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/common/useRemoveUserFromResource.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/teams/TeamPage/TeamPage.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/teams/Teams.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/teams/hooks/useTeamToolbarActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/common/AwxRolesWizardSteps/AwxSelectResourceTypeStep.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/common/AwxRolesWizardSteps/AwxSelectResourcesStep.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/common/AwxAddRoles.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/teams/AwxAddTeamRoles.tsx","webpack://@ansible/ansible-ui/./frontend/eda/main/EdaRoutes.tsx","webpack://@ansible/ansible-ui/./frontend/hub/main/HubRoutes.tsx","webpack://@ansible/ansible-ui/./frontend/common/access/components/ResourceAccess.tsx","webpack://@ansible/ansible-ui/./frontend/common/access/hooks/useGetLinkToResourcePage.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/teams/TeamPage/AwxTeamRoles.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/teams/components/TeamMembersAdd.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/components/WebhookSubForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/JobTemplateInputs.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/TemplateForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/TemplatePage/TemplateDetails.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/TemplatePage/steps/TemplateLaunchPromptStep.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/TemplatePage/TemplateLaunchWizard.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/hooks/useLabelPayload.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/TemplatePage/TemplatePage.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/Templates.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowJobTemplateInputs.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowJobTemplateForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowJobTemplatePage/WorkflowJobTemplateDetails.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowJobTemplatePage/WorkflowJobTemplatePage.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowJobTemplatePage/WorkflowJobTemplateTeamAccess.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowJobTemplatePage/WorkflowJobTemplateUserAccess.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowJobTemplateAddTeams.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowJobTemplateAddUsers.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/hooks/useCreateNodeComponent.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/hooks/useCreateConnector.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/hooks/useHandleCollectNodeProps.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/hooks/useTargetNodeAncestors.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/WorkflowTopology.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/hooks/useDedupeOldNodes.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/WorkflowVisualizer/WorkflowVisualizer.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/TemplatePage/TemplateTeamAccess.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/TemplatePage/TemplateUserAccess.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/JobTemplateAddTeams.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/JobTemplateAddUsers.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/TemplatePage/TemplateJobs.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/hooks/useSurveyColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/hooks/useDeleteSurveyDialog.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/hooks/useDeleteSurvey.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/TemplatePage/TemplateSurvey.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/hooks/useSurveyView.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/hooks/useSurveyToolbarActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/hooks/useManageSurveyQuestions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/common/MultipleChoiceField.tsx","webpack://@ansible/ansible-ui/./frontend/awx/resources/templates/TemplatePage/TemplateSurveyForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/users/UserForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/users/components/AuthenticationType.tsx","webpack://@ansible/ansible-ui/./frontend/common/access/UserDetails.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/users/UserPage/AwxUserDetails.tsx","webpack://@ansible/ansible-ui/./framework/components/DetailInfo.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/organizations/hooks/useRemoveOrganizationsFromUsers.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/organizations/hooks/useSelectOrganizations.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/organizations/hooks/useSelectOrganizationsAddUsers.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/organizations/hooks/useAddOrganizationsToUsers.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/users/UserPage/UserOrganizations.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/users/hooks/useDeleteUsers.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/users/UserPage/UserPage.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/users/UserPage/UserRoles.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/teams/hooks/useRemoveTeamsFromUsers.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/teams/hooks/useSelectTeams.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/teams/hooks/useSelectTeamsAddUsers.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/teams/hooks/useAddTeamsToUsers.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/users/UserPage/UserTeams.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/users/hooks/useUserTokensColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/users/hooks/useDeleteUserTokens.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/users/UserPage/UserTokens.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/users/hooks/useUserTokensFilters.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/users/UserPage/UserTokenDetails.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/users/Users.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/organizations/hooks/useSelectOrganizationsRemoveUsers.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/teams/hooks/useSelectTeamsRemoveUsers.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/users/components/AddRolesToUser.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/users/UserPage/UserTokenPage.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/applications/components/PageFormApplicationSelect.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/applications/hooks/useApplicationsColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/applications/hooks/useApplicationsFilters.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/users/UserTokenForm.tsx","webpack://@ansible/ansible-ui/./frontend/awx/access/users/UserPage/UserTokenSecretsModal.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/workflow-approvals/components/WorkflowApprovalTimeRemaining.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/workflow-approvals/components/WorkflowApprovalStatusCell.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/workflow-approvals/hooks/useWorkflowApprovalsColumns.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/workflow-approvals/WorkflowApprovalPage/WorkflowApprovalDetails.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/workflow-approvals/hooks/useApproveWorkflowApprovals.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/workflow-approvals/hooks/useDeleteWorkflowApprovals.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/workflow-approvals/hooks/useDenyWorkflowApprovals.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/workflow-approvals/hooks/useWorkflowApprovalsRowActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/workflow-approvals/WorkflowApprovalPage/WorkflowApprovalPage.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/workflow-approvals/WorkflowApprovals.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/workflow-approvals/hooks/useWorkflowApprovalsFilters.tsx","webpack://@ansible/ansible-ui/./frontend/awx/administration/workflow-approvals/hooks/useWorkflowApprovalToolbarActions.tsx","webpack://@ansible/ansible-ui/./frontend/awx/main/AwxApp.tsx","webpack://@ansible/ansible-ui/./frontend/awx/main/useAwxNavigation.tsx","webpack://@ansible/ansible-ui/./frontend/awx/main/routes/useAwxInventoryRoutes.tsx","webpack://@ansible/ansible-ui/./frontend/awx/main/routes/useAwxHostRoutes.tsx","webpack://@ansible/ansible-ui/./frontend/awx/main/routes/useAwxProjectRoutes.tsx","webpack://@ansible/ansible-ui/./frontend/awx/main/routes/useAwxCredentialRoutes.tsx","webpack://@ansible/ansible-ui/./frontend/awx/main/routes/useAwxTemplateRoutes.tsx","webpack://@ansible/ansible-ui/./frontend/awx/main/routes/useAwxWorkflowApprovalRoutes.tsx","webpack://@ansible/ansible-ui/./frontend/awx/main/routes/useAwxSchedulesRoutes.tsx","webpack://@ansible/ansible-ui/./frontend/awx/main/routes/useAwxJobsRoutes.tsx","webpack://@ansible/ansible-ui/./frontend/awx/main/routes/useAwxActivityStreamRoutes.tsx","webpack://@ansible/ansible-ui/./frontend/awx/main/routes/useAwxOrganizationsRoutes.tsx","webpack://@ansible/ansible-ui/./frontend/awx/main/routes/useAwxTeamsRoutes.tsx","webpack://@ansible/ansible-ui/./frontend/awx/main/routes/useAwxUsersRoutes.tsx","webpack://@ansible/ansible-ui/./frontend/awx/main/routes/useAwxNotificationsRoutes.tsx","webpack://@ansible/ansible-ui/./frontend/awx/main/routes/useAwxManagementJobsRoutes.tsx","webpack://@ansible/ansible-ui/./frontend/awx/main/routes/useAwxInstanceGroupsRoutes.tsx","webpack://@ansible/ansible-ui/./frontend/awx/main/routes/useAwxInstancesRoutes.tsx","webpack://@ansible/ansible-ui/./frontend/awx/main/routes/useAwxExecutionEnironmentRoutes.tsx","webpack://@ansible/ansible-ui/./frontend/awx/main/routes/useAwxCredentialTypesRoutes.tsx","webpack://@ansible/ansible-ui/./frontend/common/SocialAuthLogin.tsx","webpack://@ansible/ansible-ui/./frontend/common/AnsibleLogin/AnsibleLogin.tsx","webpack://@ansible/ansible-ui/./frontend/awx/main/AwxLogin.tsx","webpack://@ansible/ansible-ui/./frontend/awx/main/AwxMain.tsx"],"sourcesContent":["import { ButtonVariant } from '@patternfly/react-core';\nimport { ComponentClass } from 'react';\n\nexport const enum PageActionType {\n  Button,\n  Link,\n  Switch,\n  Dropdown,\n  Seperator,\n}\n\nexport const enum PageActionSelection {\n  /** Action that works without any selection context. i.e. create button in the toolbar */\n  None,\n\n  /** Action that works in the context of a single selection. i.e. row action or details page action */\n  Single,\n\n  /** Action that works in the context of multiple selection. i.e. bulk action in table toolbar */\n  Multiple,\n}\n\nexport type IPageAction<T extends object> =\n  | IPageActionButton\n  | IPageActionButtonSingle<T>\n  | IPageActionButtonMultiple<T>\n  | IPageActionLink\n  | IPageActionLinkSingle<T>\n  | IPageActionSwitch\n  | IPageActionSwitchSingle<T>\n  | IPageActionDropdown<T>\n  | IPageActionDropdownSingle<T>\n  | IPageActionDropdownMultiple<T>\n  | IPageActionSeperator;\n\ninterface IPageActionCommon {\n  icon?: ComponentClass;\n  label: string;\n  tooltip?: string;\n  isDanger?: boolean;\n  ouiaId?: string;\n  isPinned?: boolean;\n}\n\ninterface IPageActionNoneCommon extends IPageActionCommon {\n  selection: PageActionSelection.None;\n  isHidden?: () => boolean;\n  isDisabled?: string | (() => string | undefined);\n}\n\ninterface IPageActionSingleCommon<T extends object> extends IPageActionCommon {\n  selection: PageActionSelection.Single;\n  isHidden?: (item: T) => boolean;\n  isDisabled?: string | ((item: T) => string | undefined);\n}\n\ninterface IPageActionMultipleCommon<T extends object> extends IPageActionCommon {\n  selection: PageActionSelection.Multiple;\n  isDisabled?: string | ((items: T[]) => string | undefined);\n}\n\nexport interface IPageActionButton extends IPageActionNoneCommon {\n  type: PageActionType.Button;\n  selection: PageActionSelection.None;\n  variant?: ButtonVariant;\n  onClick: () => unknown;\n}\n\nexport interface IPageActionButtonSingle<T extends object> extends IPageActionSingleCommon<T> {\n  type: PageActionType.Button;\n  selection: PageActionSelection.Single;\n  variant?: ButtonVariant;\n  onClick: (item: T) => unknown;\n}\n\nexport interface IPageActionButtonMultiple<T extends object> extends IPageActionMultipleCommon<T> {\n  type: PageActionType.Button;\n  selection: PageActionSelection.Multiple;\n  variant?: ButtonVariant;\n  onClick: (items: T[]) => unknown;\n}\n\nexport interface IPageActionLink extends IPageActionNoneCommon {\n  type: PageActionType.Link;\n  href: string;\n  variant?: ButtonVariant;\n}\n\nexport interface IPageActionLinkSingle<T extends object> extends IPageActionSingleCommon<T> {\n  type: PageActionType.Link;\n  href: (item: T) => string;\n  variant?: ButtonVariant;\n}\n\nexport interface IPageActionSwitch extends IPageActionNoneCommon {\n  type: PageActionType.Switch;\n  onToggle: (enable: boolean) => unknown;\n  isSwitchOn: () => boolean;\n  showPinnedLabel?: boolean;\n  labelOff?: string;\n  isReversed?: boolean;\n  ariaLabel: (isEnabled: boolean) => string;\n}\n\nexport interface IPageActionSwitchSingle<T extends object> extends IPageActionSingleCommon<T> {\n  type: PageActionType.Switch;\n  onToggle: (item: T, enable: boolean) => unknown;\n  isSwitchOn: (item: T) => boolean;\n  showPinnedLabel?: boolean;\n  labelOff?: string;\n  isReversed?: boolean;\n  ariaLabel: (isEnabled: boolean) => string;\n}\n\nexport interface IPageActionDropdown<T extends object> extends IPageActionNoneCommon {\n  type: PageActionType.Dropdown;\n  actions: IPageAction<T>[];\n  variant?: ButtonVariant;\n}\n\nexport interface IPageActionDropdownSingle<T extends object> extends IPageActionSingleCommon<T> {\n  type: PageActionType.Dropdown;\n  actions: IPageAction<T>[];\n  variant?: ButtonVariant;\n}\n\nexport interface IPageActionDropdownMultiple<T extends object>\n  extends IPageActionMultipleCommon<T> {\n  type: PageActionType.Dropdown;\n  actions: IPageAction<T>[];\n  variant?: ButtonVariant;\n}\n\nexport interface IPageActionSeperator {\n  type: PageActionType.Seperator;\n}\n","import xl2Breakpoint from '@patternfly/react-tokens/dist/esm/global_breakpoint_2xl';\nimport lgBreakpoint from '@patternfly/react-tokens/dist/esm/global_breakpoint_lg';\nimport mdBreakpoint from '@patternfly/react-tokens/dist/esm/global_breakpoint_md';\nimport smBreakpoint from '@patternfly/react-tokens/dist/esm/global_breakpoint_sm';\nimport xlBreakpoint from '@patternfly/react-tokens/dist/esm/global_breakpoint_xl';\nimport xsBreakpoint from '@patternfly/react-tokens/dist/esm/global_breakpoint_xs';\nimport { useCallback, useEffect, useState } from 'react';\n\nconst breakpoints: Record<string, number> = {\n  xs: Number(xsBreakpoint.value.replace('px', '')),\n  sm: Number(smBreakpoint.value.replace('px', '')),\n  md: Number(mdBreakpoint.value.replace('px', '')),\n  lg: Number(lgBreakpoint.value.replace('px', '')),\n  xl: Number(xlBreakpoint.value.replace('px', '')),\n  xxl: Number(xl2Breakpoint.value.replace('px', '')),\n};\n\nexport type WindowSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';\n\nexport function useWindowSize(): WindowSize {\n  const [windowSize, setWindowSize] = useState<WindowSize>(() => {\n    if (window.innerWidth <= breakpoints.sm) return 'xs';\n    else if (window.innerWidth <= breakpoints.md) return 'sm';\n    else if (window.innerWidth <= breakpoints.lg) return 'md';\n    else if (window.innerWidth <= breakpoints.xl) return 'lg';\n    else if (window.innerWidth <= breakpoints.xxl) return 'xl';\n    else return 'xxl';\n  });\n  const handleResize = useCallback(() => {\n    if (window.innerWidth <= breakpoints.sm) setWindowSize('xs');\n    else if (window.innerWidth <= breakpoints.md) setWindowSize('sm');\n    else if (window.innerWidth <= breakpoints.lg) setWindowSize('md');\n    else if (window.innerWidth <= breakpoints.xl) setWindowSize('lg');\n    else if (window.innerWidth <= breakpoints.xxl) setWindowSize('xl');\n    else setWindowSize('xxl');\n  }, []);\n\n  useEffect(() => {\n    const handler = handleResize;\n    window.addEventListener('resize', handler);\n    return () => window.removeEventListener('resize', handler);\n  }, [handleResize]);\n\n  useEffect(() => handleResize(), [handleResize]);\n\n  return windowSize;\n}\n\n/** Returns true if the window size is equal to or larger than the indicated size. */\nexport function useBreakpoint(size: WindowSize): boolean {\n  const windowSize = useWindowSize();\n  switch (size) {\n    case 'xs':\n      return true;\n    case 'sm':\n      switch (windowSize) {\n        case 'sm':\n        case 'md':\n        case 'lg':\n        case 'xl':\n        case 'xxl':\n          return true;\n        default:\n          return false;\n      }\n    case 'md':\n      switch (windowSize) {\n        case 'md':\n        case 'lg':\n        case 'xl':\n        case 'xxl':\n          return true;\n        default:\n          return false;\n      }\n    case 'lg':\n      switch (windowSize) {\n        case 'lg':\n        case 'xl':\n        case 'xxl':\n          return true;\n        default:\n          return false;\n      }\n    case 'xl':\n      switch (windowSize) {\n        case 'xl':\n        case 'xxl':\n          return true;\n        default:\n          return false;\n      }\n    case 'xxl':\n      switch (windowSize) {\n        case 'xxl':\n          return true;\n        default:\n          return false;\n      }\n  }\n}\n\nexport function useOrientation(): 'landscape' | 'portrait' {\n  const [orientation, setOrientation] = useState<'landscape' | 'portrait'>(() =>\n    window.innerWidth > window.innerHeight ? 'landscape' : 'portrait'\n  );\n  const handleResize = useCallback(() => {\n    setOrientation(window.innerWidth > window.innerHeight ? 'landscape' : 'portrait');\n  }, []);\n\n  useEffect(() => {\n    const handler = handleResize;\n    window.addEventListener('resize', handler);\n    return () => window.removeEventListener('resize', handler);\n  }, [handleResize]);\n\n  useEffect(() => handleResize(), [handleResize]);\n\n  return orientation;\n}\n","export enum PFColorE {\n  Default = 'default',\n  Green = 'green',\n  Success = 'success',\n  Blue = 'blue',\n  Info = 'info',\n  Red = 'red',\n  Danger = 'danger',\n  Yellow = 'yellow',\n  Orange = 'orange',\n  Warning = 'warning',\n  Grey = 'grey',\n  Disabled = 'disabled',\n}\n\nexport type PFColor =\n  | 'default'\n  | 'green'\n  | 'success'\n  | 'blue'\n  | 'info'\n  | 'red'\n  | 'danger'\n  | 'yellow'\n  | 'orange'\n  | 'warning'\n  | 'grey'\n  | 'disabled';\n\nexport function getPatternflyColor(color: PFColor) {\n  switch (color) {\n    case 'default':\n      return undefined;\n    case 'green':\n    case 'success':\n      return pfSuccess;\n    case 'red':\n    case 'danger':\n      return pfDanger;\n    case 'yellow':\n    case 'orange':\n    case 'warning':\n      return pfWarning;\n    case 'blue':\n    case 'info':\n      return pfInfo;\n    case 'grey':\n    case 'disabled':\n      return pfDisabled;\n  }\n}\n\nexport const pfSuccess = 'var(--pf-v5-global--success-color--100)';\nexport const pfDanger = 'var(--pf-v5-global--danger-color--100)';\nexport const pfWarning = 'var(--pf-v5-global--warning-color--100)';\nexport const pfInfo = 'var(--pf-v5-global--info-color--100)';\nexport const pfDisabled = 'var(--pf-v5-global--disabled-color--100)';\nexport const pfLink = 'var(--pf-v5-global--link--Color)';\nexport const pfUnreachable = 'var(--pf-v5-global--danger-color--100)';\n\nexport enum LabelColorE {\n  blue = 'blue',\n  cyan = 'cyan',\n  green = 'green',\n  orange = 'orange',\n  purple = 'purple',\n  red = 'red',\n  grey = 'grey',\n}\n\nexport type LabelColor = 'blue' | 'cyan' | 'green' | 'orange' | 'purple' | 'red' | 'grey';\n","import { useId } from 'react';\n\nexport function useID(props: { id?: string; label?: string; name?: string }) {\n  const generatedId = useId();\n  return getID(props) || generatedId;\n}\n\nexport function getID(\n  props: { id?: string; label?: string; name?: string; title?: string } | string\n) {\n  if (typeof props === 'string') {\n    return props.toLowerCase().replace(/ /g, '-').replace(/_/g, '-').replace(/\\./g, '-');\n  }\n\n  if (props.id) {\n    return props.id;\n  }\n\n  if (props.name) {\n    return props.name.toLowerCase().replace(/ /g, '-').replace(/_/g, '-').replace(/\\./g, '-');\n  }\n\n  if (props.title) {\n    return props.title.toLowerCase().replace(/ /g, '-').replace(/_/g, '-').replace(/\\./g, '-');\n  }\n\n  if (props.label) {\n    return props.label.toLowerCase().replace(/ /g, '-').replace(/_/g, '-').replace(/\\./g, '-');\n  }\n}\n","import { createContext, Dispatch, ReactNode, SetStateAction, useContext, useState } from 'react';\n\nexport interface IFrameworkTranslations {\n  by: string;\n  cancelText: string;\n  canceledText: string;\n  cardView: string;\n  clearAllFilters: string;\n  clickToRefresh: string;\n  closeText: string;\n  confirmText: string;\n  countMore: string;\n  documentation: string;\n  errorText: string;\n  filter: string;\n  listView: string;\n  manageColumns: string;\n  moreInformation: string;\n  noItemsFound: string;\n  noResultsFound: string;\n  noResultsMatchCriteria: string;\n  noSelection: string;\n  noSelections: string;\n  noneSelectedText: string;\n  ofText: string;\n  pendingText: string;\n  pleaseFixValidationErrors: string;\n  processingText: string;\n  selectNone: string;\n  selectedText: string;\n  showLess: string;\n  sort: string;\n  submitText: string;\n  submittingText: string;\n  successText: string;\n  tableView: string;\n  unknownError: string;\n  validating: string;\n}\n\nconst defaultTranslations: IFrameworkTranslations = {\n  by: 'by',\n  cancelText: 'Cancel',\n  canceledText: 'Canceled',\n  cardView: 'Card view',\n  clearAllFilters: 'Clear all filters',\n  clickToRefresh: 'Click to refresh',\n  closeText: 'Close',\n  confirmText: 'Confirm',\n  countMore: '{count} more',\n  documentation: 'Documentation',\n  errorText: 'Error',\n  filter: 'Filter',\n  listView: 'List view',\n  manageColumns: 'Manage columns',\n  moreInformation: 'More information',\n  noItemsFound: 'No items found',\n  noResultsFound: 'No results found',\n  noResultsMatchCriteria: 'No results match this filter criteria. Clear all filters and try again.',\n  noSelection: 'No selection',\n  noSelections: 'No selections',\n  noneSelectedText: 'None - Please make a selection below.',\n  ofText: 'of',\n  pendingText: 'Pending',\n  pleaseFixValidationErrors: 'Please fix validation errors.',\n  processingText: 'Processing',\n  selectNone: 'Select none',\n  selectedText: 'Selected',\n  showLess: 'Show less',\n  sort: 'Sort',\n  submitText: 'Submit',\n  submittingText: 'Submitting',\n  successText: 'Success',\n  tableView: 'Table view',\n  unknownError: 'Unknown error',\n  validating: 'Validating...',\n};\n\nconst FrameworkTranslationsContext = createContext<\n  [\n    translations: IFrameworkTranslations,\n    setTranslations: Dispatch<SetStateAction<IFrameworkTranslations>>,\n  ]\n>([defaultTranslations, () => alert('Use FrameworkTranslationsProvider')]);\n\nexport function FrameworkTranslationsProvider(props: { children: ReactNode }) {\n  const state = useState<IFrameworkTranslations>(defaultTranslations);\n  return (\n    <FrameworkTranslationsContext.Provider value={state}>\n      {props.children}\n    </FrameworkTranslationsContext.Provider>\n  );\n}\n\nexport function useFrameworkTranslations() {\n  return useContext(FrameworkTranslationsContext);\n}\n","import { useCallback } from 'react';\nimport { useFrameworkTranslations } from '../useFrameworkTranslations';\nimport { IPageAction, PageActionSelection } from './PageAction';\n\nexport function isPageActionHidden<T extends object>(\n  action: IPageAction<T>,\n  selectedItem: T | undefined\n): boolean {\n  if ('selection' in action) {\n    switch (action.selection) {\n      case PageActionSelection.None:\n        if (action.isHidden) {\n          return action.isHidden();\n        }\n        break;\n\n      case PageActionSelection.Single:\n        if (action.isHidden) {\n          if (!selectedItem) return true;\n          return action.isHidden(selectedItem);\n        }\n        break;\n    }\n  }\n  return false;\n}\n\nexport function usePageActionDisabled<T extends object>() {\n  const [translations] = useFrameworkTranslations();\n  return useCallback(\n    (\n      action: IPageAction<T>,\n      selectedItem: T | undefined,\n      selectedItems?: T[] | undefined\n    ): string | undefined => {\n      if ('selection' in action) {\n        switch (action.selection) {\n          case PageActionSelection.None:\n            if (typeof action.isDisabled === 'string') {\n              return action.isDisabled;\n            }\n            if (action.isDisabled) {\n              return action.isDisabled();\n            }\n            break;\n\n          case PageActionSelection.Single:\n            if (typeof action.isDisabled === 'string') {\n              return action.isDisabled;\n            }\n            if (action.isDisabled) {\n              if (!selectedItem) return translations.noSelection;\n              return action.isDisabled(selectedItem);\n            }\n            break;\n\n          case PageActionSelection.Multiple:\n            if (typeof action.isDisabled === 'string') {\n              return action.isDisabled;\n            }\n            if (action.isDisabled) {\n              if (!selectedItems) return translations.noSelections;\n              return action.isDisabled(selectedItems);\n            }\n            break;\n        }\n      }\n    },\n    [translations.noSelection, translations.noSelections]\n  );\n}\n","import { Switch, Tooltip } from '@patternfly/react-core';\nimport { ComponentClass, Fragment, FunctionComponent, useId } from 'react';\nimport { IPageActionSwitch, IPageActionSwitchSingle, PageActionSelection } from './PageAction';\nimport { usePageActionDisabled } from './PageActionUtils';\n\nexport function PageActionSwitch<T extends object>(props: {\n  action: IPageActionSwitch | IPageActionSwitchSingle<T>;\n  wrapper?: ComponentClass | FunctionComponent;\n  selectedItem?: T;\n  iconOnly?: boolean;\n}) {\n  const { action, wrapper, selectedItem, iconOnly } = props;\n\n  const isPageActionDisabled = usePageActionDisabled<T>();\n  const isDisabled = isPageActionDisabled(action, selectedItem);\n\n  const Wrapper = wrapper ?? Fragment;\n\n  const isChecked = selectedItem ? action.isSwitchOn(selectedItem) : false;\n\n  const tooltip = isDisabled\n    ? isDisabled\n    : action.tooltip\n      ? action.tooltip\n      : iconOnly\n        ? isChecked\n          ? action.label\n          : action.labelOff ?? action.label\n        : undefined;\n\n  const id = useId();\n\n  let label: string | undefined = action.label;\n  if (iconOnly && action.showPinnedLabel !== true) {\n    label = undefined;\n  }\n\n  let labelOff: string | undefined = action.labelOff;\n  if (iconOnly && action.showPinnedLabel !== true) {\n    labelOff = undefined;\n  }\n\n  return (\n    <Wrapper>\n      <div\n        data-cy=\"toggle-switch\"\n        style={{ marginLeft: iconOnly ? 16 : undefined, marginRight: iconOnly ? 16 : undefined }}\n      >\n        <Tooltip content={tooltip} trigger={tooltip ? undefined : 'manual'}>\n          <Switch\n            id={id}\n            aria-label={action.ariaLabel(isChecked)}\n            label={label}\n            labelOff={labelOff}\n            isChecked={isChecked}\n            hasCheckIcon={true}\n            isDisabled={isDisabled ? true : false}\n            onChange={() => {\n              switch (action.selection) {\n                case PageActionSelection.None:\n                  action.onToggle(!isChecked);\n                  break;\n                case PageActionSelection.Single:\n                  if (selectedItem) {\n                    void action.onToggle(selectedItem, !isChecked);\n                  }\n                  break;\n              }\n            }}\n            isReversed={action?.isReversed !== undefined ? action.isReversed : iconOnly}\n          />\n        </Tooltip>\n      </div>\n    </Wrapper>\n  );\n}\n","import {\n  Button,\n  ButtonVariant,\n  Divider,\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  DropdownPopperProps,\n  Icon,\n  MenuToggle,\n  MenuToggleElement,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { CircleIcon, EllipsisVIcon, CaretDownIcon } from '@patternfly/react-icons';\nimport { ComponentClass, FunctionComponent, useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\nimport { PFColorE, getPatternflyColor } from '../components/pfcolors';\nimport { getID } from '../hooks/useID';\nimport { IPageAction, PageActionSelection, PageActionType } from './PageAction';\nimport { PageActionSwitch } from './PageActionSwitch';\nimport { isPageActionHidden, usePageActionDisabled } from './PageActionUtils';\n\nconst StyledDropdownItem = styled.div<{ $hasSwitches: boolean; $isDanger: boolean }>`\n  --pf-v5-c-dropdown__menu-item-icon--Width: ${({ $hasSwitches }) =>\n    $hasSwitches ? '40px' : undefined};\n  --pf-v5-c-dropdown__menu-item-icon--MarginRight: ${({ $hasSwitches }) =>\n    $hasSwitches ? '16px' : undefined};\n  --pf-v5-c-dropdown__menu-item--Color: ${({ $isDanger }) =>\n    $isDanger ? 'var(--pf-v5-global--danger-color--100)' : undefined};\n`;\n\nconst ActionSwitchDiv = styled.div`\n  margin-left: 16px;\n  margin-right: 16px;\n  margin-bottom: 16px;\n`;\n\ninterface PageActionDropdownProps<T extends object> {\n  actions: IPageAction<T>[];\n  icon?: ComponentClass | FunctionComponent;\n  iconOnly?: boolean;\n  isDisabled?: string | undefined;\n  label?: string;\n  onOpen?: (label: string, open: boolean) => void;\n  position?: DropdownPopperProps['position'];\n  selectedItem?: T;\n  selectedItems?: T[];\n  tooltip?: string;\n  variant?: ButtonVariant;\n}\n\nexport function PageActionDropdown<T extends object>(props: PageActionDropdownProps<T>) {\n  const {\n    icon,\n    iconOnly,\n    isDisabled,\n    label,\n    onOpen,\n    position,\n    selectedItem,\n    selectedItems,\n    tooltip,\n    variant,\n  } = props;\n\n  let { actions } = props;\n\n  actions = actions.filter((action) => !isPageActionHidden(action, selectedItem));\n  actions = filterActionSeperators(actions);\n\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const hasBulkActions = useMemo(\n    () =>\n      !actions.every(\n        (action) => !('selection' in action) || action.selection !== PageActionSelection.Multiple\n      ),\n    [actions]\n  );\n  const hasIcons = useMemo(\n    () =>\n      actions.find(\n        (action) => action.type !== PageActionType.Seperator && action.icon !== undefined\n      ) !== undefined,\n    [actions]\n  );\n  const hasSwitches = useMemo(\n    () =>\n      actions.find(\n        (action) =>\n          action.type !== PageActionType.Seperator && action.type === PageActionType.Switch\n      ) !== undefined,\n    [actions]\n  );\n\n  useEffect(() => {\n    onOpen?.(label ?? 'default', dropdownOpen);\n  }, [dropdownOpen, label, onOpen, props]);\n\n  const id = getID(props.label ?? 'actions-dropdown');\n\n  if (actions.length === 0) return <></>;\n  const isPrimary =\n    variant === ButtonVariant.primary || (hasBulkActions && !!selectedItems?.length);\n  /** Turn primary button to secondary if there are items selected */\n  const isSecondary =\n    variant === ButtonVariant.primary && !hasBulkActions && !!selectedItems?.length;\n  const isKebab = Boolean(!label && !icon);\n  const CustomIcon = icon;\n\n  let tooltipContent;\n  if (isDisabled) {\n    tooltipContent = isDisabled;\n  } else if (tooltip) {\n    tooltipContent = tooltip;\n  } else if (iconOnly) {\n    tooltipContent = label;\n  } else {\n    tooltipContent = undefined;\n  }\n\n  const dropdownMenuLabel: string | JSX.Element | undefined =\n    iconOnly && CustomIcon ? (\n      <Icon>\n        <CustomIcon />\n      </Icon>\n    ) : (\n      label\n    );\n\n  const disabledMenuToggle = (\n    <Button\n      data-cy={id}\n      icon={\n        CustomIcon ? (\n          <Icon>\n            <CustomIcon />\n          </Icon>\n        ) : undefined\n      }\n      style={{\n        backgroundColor: '#f0f0f0',\n      }}\n      isAriaDisabled\n    >\n      {dropdownMenuLabel}\n      <span style={{ paddingLeft: '16px' }}>\n        <CaretDownIcon aria-hidden />\n      </span>\n    </Button>\n  );\n\n  return (\n    <Tooltip content={tooltipContent} trigger={tooltipContent ? undefined : 'manual'}>\n      {isDisabled ? (\n        disabledMenuToggle\n      ) : (\n        <Dropdown\n          isOpen={dropdownOpen}\n          onSelect={() => setDropdownOpen(false)}\n          onOpenChange={(isOpen) => setDropdownOpen(isOpen)}\n          popperProps={{\n            appendTo: () => document.body,\n            preventOverflow: true,\n            enableFlip: true,\n            position: position,\n          }}\n          toggle={(toggleRef: React.Ref<MenuToggleElement>) => (\n            <MenuToggle\n              ref={toggleRef}\n              data-cy={id}\n              id={isKebab ? 'toggle-kebab' : 'toggle-dropdown'}\n              className={isKebab ? 'toggle-kebab' : 'toggle-dropdown'}\n              isDisabled={!!isDisabled}\n              aria-label={isKebab ? 'kebab dropdown toggle' : 'dropdown toggle'}\n              variant={isSecondary ? 'secondary' : isPrimary ? 'primary' : 'plain'}\n              onClick={() => setDropdownOpen(!dropdownOpen)}\n              isExpanded={dropdownOpen}\n              style={isPrimary && !label ? { color: 'var(--pf-v5-global--Color--light-100)' } : {}}\n              icon={\n                CustomIcon ? (\n                  <Icon>\n                    <CustomIcon />\n                  </Icon>\n                ) : undefined\n              }\n            >\n              {dropdownMenuLabel ?? <EllipsisVIcon />}\n            </MenuToggle>\n          )}\n        >\n          <DropdownList>\n            {actions.map((action, index) => (\n              <PageDropdownActionItem\n                key={'label' in action ? action.label : `action-${index}`}\n                action={action}\n                selectedItems={selectedItems ?? []}\n                selectedItem={selectedItem}\n                hasIcons={hasIcons}\n                hasSwitches={hasSwitches}\n                index={index}\n              />\n            ))}\n          </DropdownList>\n        </Dropdown>\n      )}\n    </Tooltip>\n  );\n}\n\nfunction PageDropdownActionItem<T extends object>(props: {\n  action: IPageAction<T>;\n  selectedItems: T[];\n  selectedItem?: T;\n  hasIcons: boolean;\n  hasSwitches: boolean;\n  index: number;\n}): JSX.Element {\n  const { action, selectedItems, selectedItem, hasIcons, hasSwitches, index } = props;\n  const { t } = useTranslation();\n  const isPageActionDisabled = usePageActionDisabled<T>();\n  const isDisabled = isPageActionDisabled(action, selectedItem, selectedItems);\n\n  switch (action.type) {\n    case PageActionType.Button: {\n      let CustomIcon: ComponentClass | FunctionComponent | undefined = action.icon;\n      if (!CustomIcon && hasIcons) CustomIcon = TransparentIcon;\n      let tooltip;\n\n      if (isDisabled) {\n        tooltip = isDisabled;\n      } else if (action.tooltip) {\n        tooltip = action.tooltip;\n      } else if (action.icon) {\n        tooltip = action.label;\n      } else {\n        tooltip = undefined;\n      }\n\n      let isButtonDisabled = !!isDisabled;\n      if (action.selection === PageActionSelection.Multiple && !selectedItems.length) {\n        tooltip = t(`Select at least one item from the list`);\n        isButtonDisabled = true;\n      }\n\n      return (\n        <Tooltip key={action.label} content={tooltip} trigger={tooltip ? undefined : 'manual'}>\n          <StyledDropdownItem $hasSwitches={hasSwitches} $isDanger={Boolean(action.isDanger)}>\n            <DropdownItem\n              id={getID(action)}\n              data-cy={getID(action)?.split('.').join('-')}\n              isAriaDisabled={isButtonDisabled}\n              onClick={() => {\n                switch (action.selection) {\n                  case PageActionSelection.None:\n                    action.onClick();\n                    break;\n                  case PageActionSelection.Single:\n                    if (selectedItem) action.onClick(selectedItem);\n                    break;\n                  case PageActionSelection.Multiple:\n                    if (selectedItems) action.onClick(selectedItems);\n                    break;\n                }\n              }}\n              style={{\n                color:\n                  action.isDanger && !isDisabled ? getPatternflyColor(PFColorE.Danger) : undefined,\n              }}\n            >\n              {CustomIcon ? (\n                <Icon\n                  size=\"lg\"\n                  iconSize=\"md\"\n                  style={{\n                    paddingRight: '.5rem',\n                  }}\n                >\n                  <CustomIcon />\n                </Icon>\n              ) : undefined}\n              {action.label}\n            </DropdownItem>\n          </StyledDropdownItem>\n        </Tooltip>\n      );\n    }\n\n    case PageActionType.Link: {\n      let CustomIcon: ComponentClass | FunctionComponent | undefined = action.icon;\n      if (!CustomIcon && hasIcons) CustomIcon = TransparentIcon;\n      const tooltip = isDisabled ? isDisabled : action.tooltip;\n      let to: string;\n\n      switch (action.selection) {\n        case PageActionSelection.None:\n          to = action.href;\n          break;\n        case PageActionSelection.Single:\n          if (selectedItem) {\n            to = action.href(selectedItem);\n          } else to = '';\n          break;\n        default:\n          to = '';\n          break;\n      }\n\n      return (\n        <Tooltip key={action.label} content={tooltip} trigger={tooltip ? undefined : 'manual'}>\n          <DropdownItem\n            to={to}\n            isAriaDisabled={Boolean(isDisabled)}\n            data-cy={getID(action)?.split('.').join('-')}\n            style={{\n              color:\n                action.isDanger && !isDisabled ? getPatternflyColor(PFColorE.Danger) : undefined,\n            }}\n          >\n            {CustomIcon ? (\n              <Icon\n                size=\"lg\"\n                iconSize=\"md\"\n                style={{\n                  paddingRight: '.5rem',\n                }}\n              >\n                <CustomIcon />\n              </Icon>\n            ) : undefined}\n            {action.label}\n          </DropdownItem>\n        </Tooltip>\n      );\n    }\n\n    case PageActionType.Switch: {\n      return (\n        <ActionSwitchDiv>\n          <PageActionSwitch action={action} selectedItem={selectedItem} />\n        </ActionSwitchDiv>\n      );\n    }\n\n    case PageActionType.Dropdown: {\n      const tooltip = action.label;\n      return (\n        <PageActionDropdown<T>\n          key={action.label}\n          label={action.label}\n          actions={action.actions}\n          selectedItem={selectedItem}\n          selectedItems={selectedItems}\n          isDisabled={isDisabled}\n          tooltip={tooltip}\n          // variant={action.variant}\n        />\n      );\n    }\n\n    case PageActionType.Seperator:\n      return <Divider component=\"li\" key={`separator-${index}`} />;\n  }\n}\n\nconst TransparentIcon = () => <CircleIcon style={{ opacity: 0 }} />;\n\nexport function filterActionSeperators<T extends object>(actions: IPageAction<T>[]) {\n  let filteredActions = [...actions];\n\n  // Remove seperators at beginning of actions\n  while (filteredActions.length > 0 && filteredActions[0].type === PageActionType.Seperator) {\n    filteredActions.shift();\n  }\n\n  // Remove seperators at end of actions\n  while (\n    filteredActions.length > 0 &&\n    filteredActions[filteredActions.length - 1].type === PageActionType.Seperator\n  ) {\n    filteredActions.pop();\n  }\n\n  // Remove two seperators side by side\n  filteredActions = collapseAdjacentSeperators(filteredActions);\n\n  return filteredActions;\n}\n\nfunction collapseAdjacentSeperators<T extends object>(actions: IPageAction<T>[]): IPageAction<T>[] {\n  const result: IPageAction<T>[] = [];\n  let previousAction: IPageAction<T> | undefined;\n  for (const action of actions) {\n    if (action.type === PageActionType.Seperator) {\n      if (!previousAction || previousAction.type !== PageActionType.Seperator) {\n        result.push(action);\n      }\n    } else {\n      result.push(action);\n    }\n    previousAction = action;\n  }\n  return result;\n}\n","import { Button, ButtonVariant, Tooltip } from '@patternfly/react-core';\nimport { ComponentClass, Fragment, FunctionComponent } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useID } from '../hooks/useID';\nimport {\n  IPageActionButton,\n  IPageActionButtonMultiple,\n  IPageActionButtonSingle,\n  IPageActionLink,\n  IPageActionLinkSingle,\n  PageActionSelection,\n  PageActionType,\n} from './PageAction';\nimport { usePageActionDisabled } from './PageActionUtils';\nimport { useTranslation } from 'react-i18next';\n\nexport function PageActionButton<T extends object>(props: {\n  action:\n    | IPageActionButton\n    | IPageActionButtonSingle<T>\n    | IPageActionButtonMultiple<T>\n    | IPageActionLink\n    | IPageActionLinkSingle<T>;\n\n  /** Turn primary buttons to secondary if there are items selected */\n  isSecondary?: boolean;\n\n  wrapper?: ComponentClass | FunctionComponent;\n\n  iconOnly?: boolean;\n\n  selectedItem?: T;\n  selectedItems?: T[];\n\n  isLink?: boolean;\n}) {\n  const { action, isSecondary, wrapper, iconOnly, selectedItem, selectedItems } = props;\n\n  const isPageActionDisabled = usePageActionDisabled<T>();\n  const isDisabled = isPageActionDisabled(action, selectedItem, selectedItems);\n\n  const Wrapper = wrapper ?? Fragment;\n  const Icon = action.icon;\n\n  let tooltip;\n  const { t } = useTranslation();\n\n  if (isDisabled) {\n    tooltip = isDisabled;\n  } else if (action.tooltip) {\n    tooltip = action.tooltip;\n  } else if (iconOnly) {\n    tooltip = action.label;\n  } else {\n    tooltip = undefined;\n  }\n\n  let isButtonDisabled = !!isDisabled;\n  if (\n    action.selection === PageActionSelection.Multiple &&\n    (!selectedItems || !selectedItems.length)\n  ) {\n    tooltip = t(`Select at least one item from the list`);\n    isButtonDisabled = true;\n  }\n\n  let variant = action.variant ?? ButtonVariant.secondary;\n  if (isSecondary && [ButtonVariant.primary, ButtonVariant.danger].includes(variant)) {\n    variant = ButtonVariant.secondary;\n  }\n  if (variant === ButtonVariant.primary && action.isDanger) {\n    variant = ButtonVariant.danger;\n  }\n  if (iconOnly) {\n    variant = ButtonVariant.plain;\n  }\n\n  let to: string;\n  if (action.type === PageActionType.Link) {\n    switch (action.selection) {\n      case PageActionSelection.None:\n        to = action.href;\n        break;\n      case PageActionSelection.Single:\n        if (selectedItem) {\n          to = action.href(selectedItem);\n        } else to = '';\n        break;\n      default:\n        to = '';\n        break;\n    }\n  }\n\n  const id = useID(action);\n  const content = iconOnly && Icon ? <Icon /> : action.label;\n\n  return (\n    <Wrapper>\n      <Tooltip content={tooltip} trigger={tooltip ? undefined : 'manual'}>\n        <Button\n          id={id}\n          data-cy={id}\n          variant={variant}\n          isDanger={action.isDanger}\n          icon={Icon ? <Icon /> : undefined}\n          isAriaDisabled={isButtonDisabled}\n          onClick={() => {\n            if (action.type !== PageActionType.Link) {\n              switch (action.selection) {\n                case PageActionSelection.None:\n                  action.onClick();\n                  break;\n                case PageActionSelection.Single:\n                  if (selectedItem) action.onClick(selectedItem);\n                  break;\n                case PageActionSelection.Multiple:\n                  if (selectedItems) action.onClick(selectedItems);\n                  break;\n              }\n            }\n          }}\n          aria-label={iconOnly ? action.label : ''}\n          ouiaId={id}\n          component={\n            action.type === PageActionType.Link ? (p) => <Link {...p} to={to} /> : undefined\n          }\n        >\n          {content}\n        </Button>\n      </Tooltip>\n    </Wrapper>\n  );\n}\n","import { Split } from '@patternfly/react-core';\nimport { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { ComponentClass, FunctionComponent } from 'react';\nimport { IPageAction, PageActionType } from './PageAction';\nimport { PageActionButton } from './PageActionButton';\nimport { PageActionDropdown } from './PageActionDropdown';\nimport { PageActionSwitch } from './PageActionSwitch';\nimport { usePageActionDisabled } from './PageActionUtils';\n\ninterface PageActionsPinnedProps<T extends object> {\n  actions: IPageAction<T>[];\n  selectedItem?: T;\n  selectedItems?: T[];\n  wrapper?: ComponentClass | FunctionComponent;\n\n  /**\n   * indicates to only show the icon for the action\n   * Example: Table rows only show the icon but toolbars and details page actions show label\n   */\n  iconOnly?: boolean;\n\n  /** Called when a dropdown is opened, allowing the parent to handle the z-index needed */\n  onOpen?: (label: string, open: boolean) => void;\n}\n\n/** Pinned actions are actions that show up outside the dropdown at specific breakpoints */\nexport function PageActionsPinned<T extends object>(props: PageActionsPinnedProps<T>) {\n  const { actions, selectedItems, selectedItem, wrapper, iconOnly, onOpen } = props;\n  if (actions.length === 0) return <></>;\n  return (\n    <Split hasGutter={!iconOnly} style={{ alignItems: 'baseline' }}>\n      {actions.map((action, index) => (\n        <PageActionPinned<T>\n          key={index}\n          action={action}\n          selectedItem={selectedItem}\n          selectedItems={selectedItems}\n          wrapper={wrapper}\n          iconOnly={iconOnly}\n          onOpen={onOpen}\n        />\n      ))}\n    </Split>\n  );\n}\n\ninterface PageActionPinnedProps<T extends object> {\n  action: IPageAction<T>;\n  selectedItem?: T;\n  selectedItems?: T[];\n  wrapper?: ComponentClass | FunctionComponent;\n  iconOnly?: boolean;\n\n  /** Called when a dropdown is opened, allowing the parent to handle the z-index needed */\n  onOpen?: (label: string, open: boolean) => void;\n}\n\nexport function PageActionPinned<T extends object>(props: PageActionPinnedProps<T>): JSX.Element {\n  const { action, selectedItems, selectedItem, wrapper, onOpen } = props;\n  const isPageActionDisabled = usePageActionDisabled<T>();\n\n  switch (action.type) {\n    case PageActionType.Seperator:\n      return <></>;\n\n    case PageActionType.Button:\n      return (\n        <PageActionButton\n          action={action}\n          selectedItem={selectedItem}\n          selectedItems={selectedItems}\n          iconOnly={props.iconOnly}\n          wrapper={wrapper}\n        />\n      );\n\n    case PageActionType.Link:\n      return (\n        <PageActionButton\n          action={action}\n          selectedItem={selectedItem}\n          selectedItems={selectedItems}\n          iconOnly={props.iconOnly}\n          wrapper={wrapper}\n          isLink\n        />\n      );\n\n    case PageActionType.Switch:\n      return (\n        <PageActionSwitch\n          action={action}\n          selectedItem={selectedItem}\n          wrapper={wrapper}\n          iconOnly={props.iconOnly}\n        />\n      );\n\n    case PageActionType.Dropdown: {\n      const isDisabled = isPageActionDisabled(action, selectedItem, selectedItems);\n      let tooltip;\n\n      if (isDisabled) {\n        tooltip = isDisabled;\n      } else if (action.tooltip) {\n        tooltip = action.tooltip;\n      } else {\n        tooltip = action.label;\n      }\n\n      return (\n        <PageActionDropdown<T>\n          icon={action.icon}\n          label={action.label}\n          actions={action.actions}\n          selectedItem={selectedItem}\n          selectedItems={selectedItems}\n          iconOnly={props.iconOnly}\n          position={DropdownPosition.right}\n          tooltip={tooltip}\n          isDisabled={isDisabled}\n          variant={action.variant}\n          onOpen={onOpen}\n        />\n      );\n    }\n  }\n}\n","import { ButtonVariant, Flex, FlexItem } from '@patternfly/react-core';\nimport { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport {\n  ComponentClass,\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { WindowSize, useBreakpoint } from '../components/useBreakPoint';\nimport { IPageAction } from './PageAction';\nimport { PageActionDropdown } from './PageActionDropdown';\nimport { isPageActionHidden } from './PageActionUtils';\nimport { PageActionsPinned } from './PageActionsPinned';\n\ninterface PageActionProps<T extends object> {\n  /** The array of PageActions */\n  actions: IPageAction<T>[];\n\n  /** The currently selected item for single selection actions */\n  selectedItem?: T;\n\n  /** The currently selected items for multiple selection actions */\n  selectedItems?: T[];\n\n  /** The wrapper for each item\n   * @example Wrapping each button in a ToolbarItem\n   */\n  wrapper?: ComponentClass | FunctionComponent;\n\n  /** When to collapse the primary and secondary items into the dropdown menu */\n  collapse?: WindowSize | 'always' | 'never';\n\n  /** The position for the dropdown */\n  position?: DropdownPosition;\n\n  /** Indicates if only to show the icon when not collapsed */\n  iconOnly?: boolean;\n\n  /** Called when a dropdown is opened, allowing the parent to handle the z-index needed */\n  onOpen?: (open: boolean) => void;\n\n  variant?: ButtonVariant;\n}\n\n/**\n * Page actions represent actions used in table rows, toolbars, and page headers.\n * The PageActions component controls the collapsing of the actions at given breakpoints.\n */\nexport function PageActions<T extends object>(props: PageActionProps<T>) {\n  const { actions, selectedItem, iconOnly, onOpen } = props;\n\n  const collapseBreakpoint = useBreakpoint(\n    props.collapse !== 'never' && props.collapse !== 'always' ? props.collapse ?? 'lg' : 'lg'\n  );\n  const collapseButtons =\n    props.collapse !== 'never' && (props.collapse === 'always' || !collapseBreakpoint);\n\n  /** Actions that are visible */\n  const visibleActions = useMemo(\n    () => actions.filter((action) => !isPageActionHidden(action, selectedItem)),\n    [actions, selectedItem]\n  );\n\n  /** Actions that show up outside the dropdown */\n  const pinnedActions: IPageAction<T>[] = useMemo(() => {\n    if (collapseButtons) return [];\n    return visibleActions?.filter(isPageActionPinned);\n  }, [collapseButtons, visibleActions]);\n\n  /** Actions that are not pinned and show up inside the dropdown */\n  const dropdownActions: IPageAction<T>[] = useMemo(() => {\n    if (collapseButtons) return visibleActions;\n    return visibleActions?.filter((action) => !isPageActionPinned(action)) ?? [];\n  }, [collapseButtons, visibleActions]);\n\n  // Here we track if any dropdowns are open and if any are, then call onOpen\n  // onOpen is needed at a higher level to set zIndex of the open dropdown\n  const [openLabels, setOpenLabels] = useState<Record<string, boolean>>({});\n  useEffect(() => {\n    if (Object.values(openLabels).find((v) => v)) onOpen?.(true);\n    else onOpen?.(false);\n  }, [onOpen, openLabels]);\n  const handleOnOpen = useCallback((label: string, open: boolean) => {\n    setOpenLabels((labels) => {\n      if (labels[label] !== open) {\n        labels = { ...labels };\n        labels[label] = open;\n      }\n      return labels;\n    });\n  }, []);\n\n  return (\n    <Flex\n      flexWrap={{ default: 'nowrap' }}\n      spaceItems={{ default: iconOnly ? 'spaceItemsNone' : 'spaceItemsMd' }}\n      justifyContent={{ default: 'justifyContentFlexEnd' }}\n    >\n      {pinnedActions !== undefined && pinnedActions.length > 0 && (\n        <FlexItem>\n          <PageActionsPinned {...props} actions={pinnedActions} onOpen={handleOnOpen} />\n        </FlexItem>\n      )}\n      {dropdownActions.length > 0 && (\n        <FlexItem>\n          <PageActionDropdown {...props} actions={dropdownActions} onOpen={handleOnOpen} />\n        </FlexItem>\n      )}\n    </Flex>\n  );\n}\n\nfunction isPageActionPinned<T extends object>(action: IPageAction<T>) {\n  return 'isPinned' in action && action.isPinned;\n}\n","import { Alert, AlertActionCloseButton, AlertGroup, AlertProps } from '@patternfly/react-core';\nimport { ReactNode, createContext, useContext, useState } from 'react';\n\nexport interface IPageAlertToaster {\n  addAlert: (alert: AlertProps) => void;\n  removeAlert: (alert: AlertProps) => void;\n  replaceAlert: (oldAlert: AlertProps, newAlert: AlertProps) => void;\n  removeAlerts: (filter?: (alert: AlertProps) => boolean) => void;\n}\n\nexport const PageAlertToasterContext = createContext<IPageAlertToaster>({\n  addAlert: () => null,\n  removeAlert: () => null,\n  replaceAlert: () => null,\n  removeAlerts: () => null,\n});\nexport function usePageAlertToaster(): IPageAlertToaster {\n  return useContext(PageAlertToasterContext);\n}\n\nexport function PageAlertToasterProvider(props: { children: ReactNode }) {\n  const [toasterAlerts, setToasterAlerts] = useState<AlertProps[]>([]);\n  const [pageAlertToaster] = useState<IPageAlertToaster>(() => {\n    function removeAlerts(filter?: (alert: AlertProps) => boolean) {\n      setToasterAlerts((alerts) => (filter ? alerts.filter(filter) : []));\n    }\n    function removeAlert(alert: AlertProps) {\n      setToasterAlerts((alerts) => alerts.filter((a) => a !== alert));\n    }\n    function addAlert(alert: AlertProps) {\n      if (Number.isInteger(alert.timeout)) {\n        setTimeout(() => removeAlert(alert), alert.timeout as number);\n        delete alert.timeout;\n      }\n      setToasterAlerts((alerts) => {\n        const alertIndex = alerts.findIndex((a) => a === alert);\n        if (alertIndex !== -1) {\n          const newAlerts = [...alerts];\n          newAlerts[alertIndex] = alert;\n          return newAlerts;\n        } else {\n          return [...alerts, alert];\n        }\n      });\n    }\n    function replaceAlert(oldAlert: AlertProps, alert: AlertProps) {\n      setToasterAlerts((alerts) => {\n        const oldAlertIndex = alerts.findIndex((a) => a === oldAlert);\n        if (oldAlertIndex !== -1) {\n          if (Number.isInteger(alert.timeout)) {\n            setTimeout(() => removeAlert(alert), alert.timeout as number);\n            delete alert.timeout;\n          }\n          const newAlerts = [...alerts];\n          newAlerts[oldAlertIndex] = alert;\n          return newAlerts;\n        }\n        return alerts;\n      });\n    }\n    return { addAlert, removeAlert, removeAlerts, replaceAlert };\n  });\n  return (\n    <PageAlertToasterContext.Provider value={pageAlertToaster}>\n      <AlertGroup data-cy=\"alert-toaster\" isToast isLiveRegion>\n        {toasterAlerts.map((alertProps, index) => (\n          <Alert\n            {...alertProps}\n            key={alertProps.key ?? alertProps.id ?? index}\n            actionClose={\n              <AlertActionCloseButton onClose={() => pageAlertToaster.removeAlert(alertProps)} />\n            }\n          />\n        ))}\n      </AlertGroup>\n      {props.children}\n    </PageAlertToasterContext.Provider>\n  );\n}\n\nexport function errorToAlertProps(err: unknown): AlertProps {\n  if (err instanceof Error) {\n    return {\n      title: err.message,\n      variant: 'danger',\n      timeout: 2000,\n    };\n  } else {\n    return {\n      title: 'Unknown',\n      variant: 'danger',\n      timeout: 2000,\n    };\n  }\n}\n","import { Component, ErrorInfo, ReactNode } from 'react';\n\ninterface Props {\n  message: string;\n  children?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n}\n\nexport class ErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false,\n  };\n\n  public static getDerivedStateFromError(_: Error): State {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    // eslint-disable-next-line no-console\n    console.error('Uncaught error:', error, errorInfo);\n  }\n\n  public render() {\n    if (this.state.hasError) {\n      return <h1>{this.props.message}</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n","export function BytesCell(props: { bytes: number; decimals?: number }) {\n  const { bytes } = props;\n  if (bytes === 0) return <>0</>;\n  if (!+bytes) return <></>;\n\n  const k = 1024;\n  const decimals = props.decimals ? props.decimals : 0;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return <>{`${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`}</>;\n}\n","import { AlertProps } from '@patternfly/react-core';\nimport { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { usePageAlertToaster } from '../PageAlertToaster';\n\ntype TimeoutType = AlertProps['timeout'];\n\ntype UseClipboardResult = {\n  writeToClipboard: (text: string) => void;\n  copySuccess: boolean;\n};\n/**\n * A custom React hook to interact with the Clipboard API.\n *\n * @returns {UseClipboardResult} An object with the following properties:\n * - writeToClipboard: A function that takes a string and attempts to write it\n * to the clipboard.\n * - copySuccess: A boolean indicating if the last copy attempt was\n * successful.\n */\nexport function useClipboard(timeout: TimeoutType = true): UseClipboardResult {\n  const { t } = useTranslation();\n  const [copySuccess, setCopySuccess] = useState<boolean>(false);\n  const alertToaster = usePageAlertToaster();\n\n  const alertSuccess: AlertProps = {\n    variant: 'success',\n    title: t('Copied to clipboard'),\n    timeout: timeout,\n  };\n\n  const alertError: AlertProps = {\n    variant: 'danger',\n    title: t('Failed to copy to clipboard'),\n  };\n\n  const alertNavigatorWarning: AlertProps = {\n    variant: 'warning',\n    title: t('Clipboard is not supported in this browser.'),\n  };\n\n  const writeToClipboard = (text: string) => {\n    const copyToClipboardAsync = async () => {\n      if (!navigator.clipboard) {\n        alertToaster.addAlert(alertNavigatorWarning);\n        return;\n      }\n      try {\n        await navigator.clipboard.writeText(text);\n        alertToaster.addAlert(alertSuccess);\n        setCopySuccess(true);\n      } catch (err) {\n        alertToaster.removeAlert(alertSuccess);\n        alertToaster.addAlert(alertError);\n      }\n    };\n\n    copyToClipboardAsync().catch(() => {\n      alertToaster.removeAlert(alertSuccess);\n      alertToaster.addAlert(alertError);\n    });\n  };\n\n  return { copySuccess, writeToClipboard };\n}\n","import { ClipboardCopy, Truncate } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { useClipboard } from '../hooks/useClipboard';\n\nexport function CopyCell(props: { text?: string; minWidth?: number }) {\n  const { writeToClipboard } = useClipboard();\n  const { t } = useTranslation();\n\n  if (!props.text) return <></>;\n  return (\n    <ClipboardCopy\n      hoverTip={t('Copy to clipboard')}\n      clickTip={t('Successfully copied to clipboard!')}\n      variant=\"inline-compact\"\n      textAriaLabel={t('Copyable input')}\n      toggleAriaLabel={t('Show content')}\n      style={{ display: 'flex', flexWrap: 'nowrap', borderRadius: 4 }}\n      onCopy={() => {\n        writeToClipboard(props.text ?? '');\n      }}\n    >\n      <Truncate content={props.text} style={{ minWidth: props.minWidth }} />\n    </ClipboardCopy>\n  );\n}\n","/* eslint-disable i18next/no-literal-string */\nimport {\n  ReactNode,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { SWRConfig } from 'swr';\n\nexport interface IPageSettings {\n  refreshInterval?: number;\n  theme?: 'system' | 'light' | 'dark';\n  activeTheme?: 'light' | 'dark';\n  tableLayout?: 'compact' | 'comfortable';\n  formColumns?: 'single' | 'multiple';\n  formLayout?: 'vertical' | 'horizontal';\n  dateFormat?: 'since' | 'date-time';\n  dataEditorFormat?: 'yaml' | 'json';\n}\n\nexport const PageSettingsContext = createContext<\n  [IPageSettings, (settings: IPageSettings) => void]\n>([{}, () => null]);\n\nexport function usePageSettings() {\n  const [settings] = useContext(PageSettingsContext);\n  return settings;\n}\n\nexport function PageSettingsProvider(props: {\n  children?: ReactNode;\n  defaultRefreshInterval: number;\n}) {\n  const [settings, setSettingsState] = useState<IPageSettings>(() => {\n    const preferencesStorage = localStorage.getItem('user-preferences');\n    let settings: IPageSettings = {};\n    if (preferencesStorage) {\n      try {\n        settings = JSON.parse(preferencesStorage) as IPageSettings;\n      } catch (e) {\n        // do nothing\n      }\n    }\n    // defaults\n    settings = {\n      refreshInterval: props.defaultRefreshInterval,\n      theme: 'system',\n      tableLayout: 'comfortable',\n      formColumns: 'multiple',\n      formLayout: 'vertical',\n      dateFormat: 'date-time',\n      dataEditorFormat: 'yaml',\n      ...settings,\n    };\n    return settings;\n  });\n\n  const setSettings = useCallback((settings: IPageSettings) => {\n    localStorage.setItem('user-preferences', JSON.stringify(settings));\n    setSettingsState(settings);\n  }, []);\n\n  const activeTheme = useMemo(() => {\n    return settings.theme !== 'light' && settings.theme !== 'dark'\n      ? window.matchMedia('(prefers-color-scheme: dark)').matches\n        ? 'dark'\n        : 'light'\n      : settings.theme;\n  }, [settings.theme]);\n\n  useEffect(() => {\n    setSettingsState((settings) => {\n      if (settings.activeTheme === activeTheme) return settings;\n      return { ...settings, activeTheme };\n    });\n    if (activeTheme === 'dark') {\n      document.documentElement.classList.add('pf-v5-theme-dark');\n    } else {\n      document.documentElement.classList.remove('pf-v5-theme-dark');\n    }\n  }, [activeTheme]);\n\n  return (\n    <SWRConfig\n      value={{ refreshInterval: settings.refreshInterval ? settings.refreshInterval * 1000 : 0 }}\n    >\n      <PageSettingsContext.Provider value={[settings, setSettings]}>\n        {props.children}\n      </PageSettingsContext.Provider>\n    </SWRConfig>\n  );\n}\n","// TODO: Import/adapt this from AWX using the new transaltion library\n\nexport function formatDateString(dateObj: string | Date | undefined): string {\n  if (!dateObj) {\n    return '';\n  }\n\n  if (typeof dateObj === 'string') {\n    dateObj = new Date(dateObj);\n  }\n  return dateObj.toLocaleString();\n}\n","import { Button, Split, SplitItem } from '@patternfly/react-core';\nimport { DateTime } from 'luxon';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\nimport { usePageSettings } from '../PageSettings/PageSettingsProvider';\nimport { useFrameworkTranslations } from '../useFrameworkTranslations';\nimport { formatDateString } from '../utils/formatDateString';\n\nexport function DateCell(props: { value: number | string }) {\n  const date = new Date(props.value);\n  return (\n    <Split hasGutter>\n      <SplitItem>{date.toLocaleDateString()}</SplitItem>\n      <SplitItem>{date.toLocaleTimeString()}</SplitItem>\n    </Split>\n  );\n}\n\nconst DateCellSpan = styled.span`\n  white-space: nowrap;\n`;\n\nexport function DateTimeCell(props: {\n  value: string | number | undefined | null;\n  author?: string;\n  onClick?: () => void;\n}) {\n  const { t } = useTranslation();\n  const [translations] = useFrameworkTranslations();\n  const { author, onClick } = props;\n  const [dateTime, setDateTime] = useState<string | null>(null);\n  const settings = usePageSettings();\n  const format = settings.dateFormat ? settings.dateFormat : 'date-time';\n\n  const updateTime = useCallback(\n    (value: string | number | undefined | null, format?: 'since' | 'date-time') => {\n      let date: DateTime;\n      if (typeof value === 'number') {\n        date = DateTime.fromMillis(value);\n      } else {\n        date = DateTime.fromISO(value as string);\n      }\n      switch (format) {\n        case 'since': {\n          if (DateTime.now().toMillis() - date.toMillis() < 60 * 1000) {\n            setDateTime(t('Less than a minute ago'));\n          } else {\n            setDateTime(date.toRelative());\n          }\n          break;\n        }\n        default:\n          setDateTime(formatDateString(date.toJSDate()));\n          break;\n      }\n    },\n    [t]\n  );\n\n  useEffect(() => {\n    updateTime(props.value, format);\n    if (format === 'since') {\n      const timeout = setInterval(() => updateTime(props.value, format), 1000);\n      return () => clearTimeout(timeout);\n    }\n  }, [format, props.value, updateTime]);\n\n  if (!props.value) return <></>;\n\n  return (\n    <DateCellSpan className=\"date-time\">\n      {dateTime}\n      {author && <span>&nbsp;{translations.by}&nbsp;</span>}\n      {onClick ? (\n        <Button variant=\"link\" isInline onClick={onClick}>\n          {author}\n        </Button>\n      ) : (\n        <span>{author}</span>\n      )}\n    </DateCellSpan>\n  );\n}\n","/* eslint-disable i18next/no-literal-string */\nimport { Split, SplitItem } from '@patternfly/react-core';\nimport { useEffect, useMemo, useState } from 'react';\n\nexport function ElapsedTimeCell(props: { start?: number | string; finish?: number | string }) {\n  const start = useMemo(() => new Date(props.start ?? 0).valueOf(), [props.start]);\n  const finish = useMemo(() => new Date(props.finish ?? 0).valueOf(), [props.finish]);\n\n  const [elapsed, setElapsed] = useState(Math.max(0, finish - start.valueOf()));\n\n  useEffect(() => {\n    const timeout = setInterval(() => {\n      if (start) {\n        if (!props.finish) setElapsed(Math.max(0, Date.now() - start));\n        else setElapsed(Math.max(0, finish - start));\n      }\n    }, 1000);\n    return () => clearTimeout(timeout);\n  }, [start, finish, props.finish]);\n\n  const totalSeconds = Math.floor(elapsed / 1000);\n  const seconds = Math.floor(totalSeconds % 60);\n  const minutes = Math.floor((totalSeconds / 60) % 60);\n  const hours = Math.floor((totalSeconds / 60 / 60) % 24);\n  const days = Math.floor(totalSeconds / 60 / 60 / 24);\n\n  if (!start) return <></>;\n  return (\n    <Split>\n      {days !== 0 && (\n        <SplitItem>\n          {days}\n          {'d'}&nbsp;\n        </SplitItem>\n      )}\n      {hours !== 0 && (\n        <SplitItem>\n          {hours}\n          {'h'}&nbsp;\n        </SplitItem>\n      )}\n      {minutes !== 0 && (\n        <SplitItem>\n          {minutes}\n          {'m'}&nbsp;\n        </SplitItem>\n      )}\n      {\n        <SplitItem>\n          {seconds}\n          {'s'}\n        </SplitItem>\n      }\n    </Split>\n  );\n}\n","import { Label, LabelGroup } from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\n\ntype LabelWithLink = { name: string; link: string };\n\ntype LabelsWithLinksProps = {\n  labels?: never;\n  labelsWithLinks: LabelWithLink[];\n  numLabels?: number;\n  noWrap?: boolean;\n};\n\ntype LabelsProps = {\n  labels: string[];\n  labelsWithLinks?: never;\n  numLabels?: number;\n  noWrap?: boolean;\n};\n\nexport function LabelsCell(props: LabelsProps | LabelsWithLinksProps) {\n  return (\n    <LabelGroup\n      numLabels={props.numLabels ?? 999}\n      style={props.noWrap ? { flexWrap: 'nowrap' } : undefined}\n    >\n      {props.labels\n        ? props.labels.map((label) => <Label key={label}>{label}</Label>)\n        : props.labelsWithLinks.map((labelWithLink) => (\n            <Label color=\"blue\" key={labelWithLink.name}>\n              <Link to={labelWithLink.link}>{labelWithLink.name}</Link>\n            </Label>\n          ))}\n    </LabelGroup>\n  );\n}\n","import { Children, cloneElement, isValidElement, ReactNode } from 'react';\nimport { getPatternflyColor, PFColor } from './pfcolors';\n\nexport function IconWrapper(props: {\n  children: ReactNode;\n  color?: PFColor;\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  padRight?: boolean;\n  padLeft?: boolean;\n}) {\n  const newProps: {\n    color?: string;\n    size?: string;\n    marginRight?: number;\n  } = {};\n\n  if (props.color) {\n    newProps.color = getPatternflyColor(props.color);\n  }\n\n  if (props.size) {\n    newProps.size = props.size;\n  }\n\n  let paddingRight = 0;\n  if (props.padRight) {\n    switch (props.size) {\n      case 'sm':\n        paddingRight = 6;\n        break;\n      case 'md':\n        paddingRight = 6;\n        break;\n      case 'lg':\n        paddingRight = 8;\n        break;\n      case 'xl':\n        paddingRight = 12;\n        break;\n    }\n  }\n\n  let paddingLeft = 0;\n  if (props.padLeft) {\n    switch (props.size) {\n      case 'sm':\n        paddingLeft = 6;\n        break;\n      case 'md':\n        paddingLeft = 6;\n        break;\n      case 'lg':\n        paddingLeft = 8;\n        break;\n      case 'xl':\n        paddingLeft = 12;\n        break;\n    }\n  }\n  const newChildren = Children.toArray(props.children).map((child) => {\n    if (isValidElement(child)) {\n      return cloneElement(child, newProps);\n    } else {\n      return child;\n    }\n  });\n\n  return <div style={{ paddingRight, paddingLeft }}>{newChildren}</div>;\n}\n","import { Flex, FlexItem } from '@patternfly/react-core';\nimport { ReactNode } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { IconWrapper } from '../components/IconWrapper';\nimport { PFColor, getPatternflyColor } from '../components/pfcolors';\n\nexport interface TextCellProps {\n  icon?: ReactNode;\n  iconSize?: 'sm' | 'md' | 'lg';\n  iconAlign?: 'left' | 'right';\n  text?: string | null;\n  to?: string;\n  onClick?: () => void;\n  color?: PFColor;\n  iconColor?: PFColor;\n  maxWidth?: number;\n  disableLinks?: boolean;\n}\nexport function TextCell(props: TextCellProps) {\n  const navigate = useNavigate();\n  return (\n    <Flex\n      spaceItems={{ default: 'spaceItemsNone' }}\n      flexWrap={{ default: 'nowrap' }}\n      alignItems={{ default: 'alignItemsBaseline' }}\n    >\n      {props.icon &&\n        (props?.iconAlign === undefined || (props.iconAlign && props.iconAlign !== 'right')) && (\n          <FlexItem alignSelf={{ default: 'alignSelfCenter' }}>\n            <IconWrapper\n              size={props.iconSize ?? 'sm'}\n              color={props.iconColor ?? props.color}\n              padRight\n            >\n              {props.icon}\n            </IconWrapper>\n          </FlexItem>\n        )}\n      {props.text && (\n        <FlexItem style={{ maxWidth: '100%' }}>\n          <div\n            style={{\n              maxWidth: props.maxWidth ?? '100%',\n              whiteSpace: 'nowrap',\n              textOverflow: 'ellipsis',\n              overflow: 'hidden',\n              color: props.color ? getPatternflyColor(props.color) : undefined,\n            }}\n          >\n            {!props.disableLinks && (props.to || props.onClick) ? (\n              <a\n                style={{\n                  color: props.color ? getPatternflyColor(props.color) : undefined,\n                }}\n                href={props.to}\n                onClick={(e) => {\n                  e.preventDefault();\n                  if (props.onClick) {\n                    props.onClick();\n                  } else {\n                    if (!props.to) return;\n                    navigate(props.to);\n                  }\n                }}\n              >\n                {props.text}\n              </a>\n            ) : (\n              <>{props.text}</>\n            )}\n          </div>\n        </FlexItem>\n      )}\n      {props.icon && props.iconAlign === 'right' && (\n        <FlexItem alignSelf={{ default: 'alignSelfCenter' }}>\n          <IconWrapper\n            size={props.iconSize ?? 'sm'}\n            padLeft={true}\n            color={props.iconColor ?? props.color}\n          >\n            {props.icon}\n          </IconWrapper>\n        </FlexItem>\n      )}\n    </Flex>\n  );\n}\n","import useResizeObserver from '@react-hook/resize-observer';\nimport { ReactNode, useCallback, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\n\nexport interface PageContainerSize {\n  width: number;\n  height: number;\n}\n\nexport function PageChartContainer(props: {\n  children: (size: PageContainerSize) => ReactNode;\n  className?: string;\n  height?: number;\n}) {\n  const ref = useRef<HTMLDivElement>(null);\n  const [containerSize, setContainerSize] = useState<PageContainerSize>({\n    width: ref.current?.clientWidth ?? 0,\n    height: ref.current?.clientWidth ?? 0,\n  });\n  const updateSize = useCallback(\n    () =>\n      setContainerSize((containerSize) => {\n        const newContainerSize = {\n          width: ref.current?.clientWidth ?? 0,\n          height: ref.current?.clientHeight ?? 0,\n        };\n        if (\n          newContainerSize.width !== containerSize.width ||\n          newContainerSize.height !== containerSize.height\n        ) {\n          return newContainerSize;\n        }\n        return containerSize;\n      }),\n    []\n  );\n  useEffect(() => updateSize(), [ref, updateSize]);\n  useResizeObserver(ref, () => updateSize());\n  return (\n    <ChartContainerDiv ref={ref} className={props.className} style={{ height: props.height }}>\n      <PropsDiv>{props.children(containerSize)}</PropsDiv>\n    </ChartContainerDiv>\n  );\n}\n\nconst ChartContainerDiv = styled.div`\n  width: 100%;\n  height: 100%;\n  flex-grow: 1;\n  align-self: stretch;\n  justify-self: stretch;\n  position: relative;\n`;\n\nconst PropsDiv = styled.div`\n  position: absolute;\n`;\n","import useResizeObserver from '@react-hook/resize-observer';\nimport { CSSProperties, ReactNode, useCallback, useEffect, useRef, useState } from 'react';\nimport './Scrollable.css';\n\nexport function Scrollable(props: {\n  children?: ReactNode;\n  className?: string;\n  borderTop?: boolean;\n  borderBottom?: boolean;\n  style?: CSSProperties;\n}) {\n  const divEl = useRef<HTMLDivElement>(null);\n  const [topShadow, setTopShadow] = useState(false);\n  const [bottomShadow, setBottomShadow] = useState(false);\n  const update = useCallback(() => {\n    if (!divEl.current) return;\n    setTopShadow(divEl.current.scrollTop > 0);\n    const scrollBottom =\n      divEl.current.scrollHeight - divEl.current.scrollTop - divEl.current.clientHeight - 1;\n    setBottomShadow(scrollBottom > 0.1);\n  }, []);\n  useEffect(() => update(), [update, props.children]);\n  useResizeObserver(divEl, () => update());\n\n  const innerClassNames = ['scrollable-inner'];\n  if (props.borderTop) innerClassNames.push('border-top');\n  if (props.borderBottom) innerClassNames.push('border-bottom');\n  const innerClassName = innerClassNames.join(' ');\n\n  return (\n    <div className={`scrollable-outer ${props.className}`} style={props.style}>\n      <div className={innerClassName} ref={divEl} onScroll={update}>\n        {props.children}\n      </div>\n      {topShadow && <div className=\"scrollable-shadow-top\" />}\n      {bottomShadow && <div className={`scrollable-shadow-bottom`} />}\n    </div>\n  );\n}\n","/* eslint-disable i18next/no-literal-string */\nimport { PageSection } from '@patternfly/react-core';\nimport useResizeObserver from '@react-hook/resize-observer';\nimport { ReactNode, createContext, useLayoutEffect, useRef, useState } from 'react';\nimport { Scrollable } from '../components/Scrollable';\n\nexport const PageDashboardContext = createContext({ columns: 1 });\n\nconst Divisor = 1662 / 24;\n\nexport function PageDashboard(props: { children?: ReactNode }) {\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [columns, setColumns] = useState(1);\n\n  useLayoutEffect(() => {\n    setColumns(Math.max(1, Math.floor((ref.current?.clientWidth ?? 0) / Divisor)));\n  }, []);\n\n  useResizeObserver(ref, (entry) => {\n    setColumns(Math.max(1, Math.floor((entry.contentRect.width ?? 0) / Divisor)));\n  });\n\n  return (\n    <PageDashboardContext.Provider value={{ columns }}>\n      <Scrollable>\n        <PageSection isWidthLimited>\n          <div\n            ref={ref}\n            style={{ display: 'grid', gap: 16, gridTemplateColumns: `repeat(${columns}, 1fr)` }}\n          >\n            {props.children}\n          </div>\n        </PageSection>\n      </Scrollable>\n    </PageDashboardContext.Provider>\n  );\n}\n","import styled from 'styled-components';\n\n/**\n * A styled button component that represents an icon button.\n *\n * @component\n * @example\n * ```tsx\n * import { IconButton } from './IconButton';\n *\n * function App() {\n *   return (\n *     <IconButton onClick={() => console.log('Button clicked')} type='button'>\n *       <Icon size=\"md\">\n *         <DownloadIcon />\n *       </Icon>\n *     </IconButton>\n *   );\n * }\n * ```\n */\nexport const IconButton = styled.button`\n  background: none;\n  border: none;\n  padding: 0;\n  margin: 0;\n  cursor: pointer;\n  color: inherit;\n  opacity: 0.6;\n  &:hover {\n    opacity: 1;\n  }\n`;\n","import { Button, Icon, Popover, Stack, StackItem } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { ReactNode } from 'react';\nimport styled from 'styled-components';\nimport { useFrameworkTranslations } from '../useFrameworkTranslations';\nimport { IconButton } from './IconButton';\n\nexport function Help(props: {\n  title?: string;\n  help?: string | string[] | ReactNode;\n  docLink?: string;\n}) {\n  const { help, title, docLink } = props;\n  const [translations] = useFrameworkTranslations();\n  if (!help) return <></>;\n  return (\n    <Popover\n      headerContent={title}\n      bodyContent={\n        <Stack hasGutter>\n          {Array.isArray(help) ? (\n            help.map((help, index) => <StackItem key={index}>{help}</StackItem>)\n          ) : (\n            <StackItem>{help}</StackItem>\n          )}\n          {docLink && (\n            <StackItem>\n              <Button\n                icon={<ExternalLinkAltIcon />}\n                variant=\"link\"\n                onClick={() => window.open(docLink, '_blank')}\n                isInline\n                type=\"button\"\n              >\n                {translations.documentation}\n              </Button>\n            </StackItem>\n          )}\n        </Stack>\n      }\n    >\n      <IconButtonStyled type=\"button\">\n        <Icon size=\"sm\">\n          <OutlinedQuestionCircleIcon />\n        </Icon>\n      </IconButtonStyled>\n    </Popover>\n  );\n}\n\nconst IconButtonStyled = styled(IconButton)`\n  margin-left: 4px;\n`;\n","import {\n  Button,\n  Card,\n  CardFooter,\n  CardHeader,\n  Flex,\n  FlexItem,\n  Text,\n  Title,\n} from '@patternfly/react-core';\nimport { AngleRightIcon } from '@patternfly/react-icons';\nimport { CSSProperties, ReactNode, useContext, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Help } from '../components/Help';\nimport { useID } from '../hooks/useID';\nimport { PageDashboardContext } from './PageDashboard';\n\nexport type PageDashboardCardWidth = 'xxs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';\nexport type PageDashboardCardHeight = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';\n\nconst heightUnit = 90;\n\nexport function PageDashboardCard(props: {\n  id?: string;\n  supertitle?: string;\n  title?: string;\n  subtitle?: string;\n  description?: string;\n  linkText?: string;\n  to?: string;\n  children?: ReactNode;\n  footerActionButton?: {\n    icon?: ReactNode;\n    title: string;\n    onClick: () => void;\n  };\n\n  /**\n   * Cards are in a grid layout with 12 columns.\n   * The width picks columns such that cards line up.\n   */\n  width?: PageDashboardCardWidth;\n\n  /**\n   * Cards are in a grid layout with rows.\n   * The height not only sets the minimum height, but also the rows that the card spans.\n   * This is needed for wrapping of different size cards in the grid layout.\n   */\n  height?: PageDashboardCardHeight;\n\n  /**\n   * Max height limits the cards height.\n   * Cards should have a scrollable area when this is enabled.\n   */\n  maxHeight?: PageDashboardCardHeight;\n\n  style?: CSSProperties;\n  help?: string;\n  helpTitle?: string;\n  helpDocLink?: string;\n  headerControls?: ReactNode;\n\n  isCompact?: boolean;\n\n  canCollapse?: boolean;\n}) {\n  const id = useID(props);\n\n  const dashboardContext = useContext(PageDashboardContext);\n\n  let colSpan = {\n    xxs: 3,\n    xs: 4,\n    sm: 6,\n    md: 8,\n    lg: 12,\n    xl: 16,\n    xxl: 24,\n  }[props.width || 'md'];\n  if (colSpan > dashboardContext.columns) {\n    colSpan = dashboardContext.columns;\n  }\n\n  const [isCollapsed, setCollapsedState] = useState(\n    localStorage.getItem('db-' + id + '-collapsed') === 'true'\n  );\n  const setCollapsed = (collapsed: boolean) => {\n    setCollapsedState(collapsed);\n    localStorage.setItem('db-' + id + '-collapsed', collapsed ? 'true' : 'false');\n  };\n\n  let heightSpan = {\n    xs: 2,\n    sm: 3,\n    md: 4,\n    lg: 6,\n    xl: 8,\n    xxl: 12,\n    none: undefined,\n  }[props.height || 'none'];\n\n  if (isCollapsed) heightSpan = undefined;\n\n  const height = heightSpan ? heightUnit * heightSpan + 16 * (heightSpan - 1) : undefined;\n\n  let rowSpan = {\n    xs: 2,\n    sm: 3,\n    md: 4,\n    lg: 6,\n    xl: 8,\n    xxl: 12,\n    none: heightSpan,\n  }[props.height || 'none'];\n\n  if (isCollapsed) rowSpan = undefined;\n\n  const minHeight = rowSpan ? heightUnit * rowSpan + 16 * (rowSpan - 1) : undefined;\n\n  return (\n    <Card\n      id={id}\n      isFlat\n      isRounded\n      style={{\n        transition: 'box-shadow 0.25s',\n        gridColumn: `span ${colSpan}`,\n        gridRow: rowSpan ? `span ${rowSpan}` : undefined,\n        minHeight,\n        maxHeight: height,\n        maxWidth: '100%',\n        ...props.style,\n      }}\n      isCompact={props.isCompact}\n      className=\"page-dashboard-card\"\n      data-cy={id}\n    >\n      {(props.title || props.linkText) && (\n        <CardHeader>\n          <Flex\n            spaceItems={{ default: 'spaceItemsLg' }}\n            alignItems={{ default: 'alignItemsCenter' }}\n            justifyContent={{ default: 'justifyContentFlexEnd' }}\n          >\n            <FlexItem grow={{ default: 'grow' }}>\n              {props.supertitle && (\n                <Text data-cy=\"card-main\" component=\"small\" style={{ opacity: 0.8 }}>\n                  {props.supertitle}\n                </Text>\n              )}\n              <div>\n                <Title\n                  data-cy=\"card-title\"\n                  headingLevel=\"h3\"\n                  size=\"xl\"\n                  style={{ display: 'inline-block', verticalAlign: '-0.15em', lineHeight: '1.2' }}\n                >\n                  {props.title}\n                </Title>\n                <Help help={props.help} title={props.helpTitle} docLink={props.helpDocLink} />\n              </div>\n              {props.subtitle && (\n                <Text data-cy=\"card-subtitle\" component=\"small\" style={{ opacity: 0.8 }}>\n                  {props.subtitle}\n                </Text>\n              )}\n            </FlexItem>\n            {props.headerControls && <FlexItem>{props.headerControls}</FlexItem>}\n            <FlexItem>\n              <Text data-cy=\"card-link-text\" component=\"small\">\n                {props.linkText && <Link to={props.to as string}>{props.linkText}</Link>}\n              </Text>\n            </FlexItem>\n            {props.canCollapse && (\n              <FlexItem>\n                <AngleRightIcon\n                  style={{\n                    transform: isCollapsed ? 'rotate(0deg)' : 'rotate(90deg)',\n                    transition: 'transform',\n                  }}\n                  onClick={() => setCollapsed(!isCollapsed)}\n                />\n              </FlexItem>\n            )}\n          </Flex>\n          {props.description && !isCollapsed && (\n            <span style={{ opacity: 0.8, paddingTop: 6 }}>{props.description}</span>\n          )}\n        </CardHeader>\n      )}\n      {!isCollapsed && props.children}\n      {!isCollapsed && props.footerActionButton && (\n        <CardFooter style={{ textAlign: 'end' }}>\n          <Button\n            variant=\"link\"\n            icon={props.footerActionButton.icon ? props.footerActionButton.icon : null}\n            onClick={() => {\n              void props.footerActionButton?.onClick();\n            }}\n          >\n            {props.footerActionButton.title}\n          </Button>\n        </CardFooter>\n      )}\n    </Card>\n  );\n}\n","import { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport function PageChartLegend(props: {\n  id: string;\n  legend: { label: string; count?: number; color: string; link?: string }[];\n  horizontal?: boolean;\n  showLegendCount?: boolean;\n  allowZero?: boolean;\n}) {\n  if (props.horizontal) {\n    return (\n      <PageChartLegendHorizontalStyle>\n        {props.legend.map((item, index) => {\n          if (item.count === 0 && props.allowZero !== true) return <Fragment key={index} />;\n          return (\n            <PageChartLegendHorizontalItemStyle key={index}>\n              <PageChartLegendColor\n                id={`${props.id}-${item.label.toLowerCase().replace(/ /g, '-')}-count`}\n                color={item.color}\n              />\n              {props.showLegendCount === false ? null : <PageChartLegendCount count={item.count} />}\n              <PageChartLegendLabel label={item.label} link={item.link} />\n            </PageChartLegendHorizontalItemStyle>\n          );\n        })}\n      </PageChartLegendHorizontalStyle>\n    );\n  }\n  return (\n    <PageChartLegendVerticalStyle>\n      {props.legend.map((item, index) => {\n        if (item.count === 0 && props.allowZero !== true) return <Fragment key={index} />;\n        return (\n          <Fragment key={index}>\n            <PageChartLegendColor color={item.color} />\n            {props.showLegendCount === false ? null : (\n              <PageChartLegendCount\n                id={`${props.id}-${item.label.toLowerCase().replace(/ /g, '-')}-count`}\n                count={item.count}\n              />\n            )}\n            <PageChartLegendLabel label={item.label} link={item.link} />\n          </Fragment>\n        );\n      })}\n    </PageChartLegendVerticalStyle>\n  );\n}\n\nfunction PageChartLegendColor(props: { id?: string; color: string }) {\n  return <PageChartLegendColorStyle id={props.id} style={{ backgroundColor: props.color }} />;\n}\n\nfunction PageChartLegendCount(props: { id?: string; count?: number }) {\n  return <PageChartLegendCountStyle id={props.id}>{props.count}</PageChartLegendCountStyle>;\n}\n\nfunction PageChartLegendLabel(props: { label: string; link?: string }) {\n  return (\n    <PageChartLegendLabelStyle>\n      {props.link ? (\n        <Link to={props.link} style={{ textDecoration: 'none' }}>\n          {props.label}\n        </Link>\n      ) : (\n        props.label\n      )}\n    </PageChartLegendLabelStyle>\n  );\n}\n\nconst PageChartLegendHorizontalStyle = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  gap: 20px;\n`;\n\nconst PageChartLegendHorizontalItemStyle = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  gap: 6px;\n`;\n\nconst PageChartLegendVerticalStyle = styled.div`\n  display: grid;\n  grid-template-columns: auto auto auto;\n  row-gap: 6px;\n  column-gap: 6px;\n  align-items: center;\n`;\n\nconst PageChartLegendColorStyle = styled.div`\n  width: 10px;\n  height: 10px;\n  border-radius: 2px;\n  margin-right: 4px;\n`;\n\nconst PageChartLegendCountStyle = styled.div`\n  font-size: small;\n  line-height: 1em;\n  text-align: center;\n`;\n\nconst PageChartLegendLabelStyle = styled.div`\n  font-size: small;\n  line-height: 1em;\n`;\n","import {\n  Chart,\n  ChartArea,\n  ChartAxis,\n  ChartCursorContainerProps,\n  ChartLegendTooltip,\n  ChartLine,\n  ChartScatter,\n  ChartStack,\n  ChartVoronoiContainerProps,\n  createContainer,\n} from '@patternfly/react-charts';\nimport { useMemo } from 'react';\nimport { PageChartContainer } from './PageChartContainer';\nimport { PageChartLegend } from './PageChartLegend';\nimport './PageDashboardChart.css';\n\nconst CursorVoronoiContainer = createContainer('voronoi', 'cursor') as React.FunctionComponent<\n  ChartVoronoiContainerProps & ChartCursorContainerProps\n>;\n\nexport function PageDashboardChart(props: {\n  id?: string;\n  groups: {\n    label?: string;\n    color: string;\n    values: {\n      label: string;\n      value: number;\n    }[];\n    link?: string;\n  }[];\n  // prevent y axis to show float values\n  onlyIntegerTicks?: boolean;\n  // minimal shown value\n  minDomain?: number | { x?: number; y?: number };\n  // label for x ax\n  yLabel?: string;\n  // label for y ax\n  xLabel?: string;\n  // prevents filtering of zero values\n  allowZero?: boolean;\n  /** variant of the chart */\n  variant?: 'stackedAreaChart' | 'lineChart';\n  /** additional padding if needed for chart */\n  padding?: {\n    top?: number;\n    bottom?: number;\n    left?: number;\n    right: number;\n  };\n  /** show item count in legend */\n  showLegendCount?: boolean;\n\n  height?: number;\n}) {\n  const { allowZero, xLabel, yLabel, minDomain, onlyIntegerTicks } = props;\n  let { groups } = props;\n  groups = allowZero\n    ? groups\n    : groups.filter((group) => {\n        for (const value of group.values) {\n          if (value.value !== 0) return true;\n        }\n        return false;\n      });\n  const legendData = groups\n    .filter((group) => !!group.label)\n    .map((group, index) => {\n      return {\n        childName: `${index}`, // Sync tooltip legend with the series associated with given chart name\n        name: group.label,\n        symbol: { fill: group.color, type: 'square' },\n      };\n    });\n\n  const legend = groups\n    .filter((group) => !!group.label)\n    .map((group) => ({\n      label: group.label!,\n      count: group.values.reduce((acc, value) => acc + value.value, 0),\n      color: group.color,\n      link: group.link,\n    }));\n\n  const maxDomainY = useMemo(() => {\n    const maxValues: Record<string, number> = {};\n    for (const group of groups) {\n      for (const entry of group.values) {\n        maxValues[entry.label] = (maxValues[entry.label] ?? 0) + entry.value;\n      }\n    }\n    return Object.values(maxValues).reduce((max, value) => (value > max ? value : max), 0);\n  }, [groups]);\n\n  const padding = {\n    top: (props.padding?.top ?? 4) + 16,\n    bottom: (props.padding?.bottom ?? 32) + 16,\n    left: (props.padding?.left ?? 12) + Math.round(maxDomainY).toString().length * 9.5 + 16,\n    right: (props.padding?.right ?? 0) + 16,\n  };\n\n  return (\n    <div\n      style={{\n        height: props.height,\n        display: 'flex',\n        flexGrow: 1,\n        minHeight: '100%',\n      }}\n    >\n      {yLabel && (\n        <YAxisLabel label={yLabel} paddingTop={padding.top} paddingBottom={padding.bottom} />\n      )}\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          flexGrow: 1,\n          gap: 16,\n        }}\n      >\n        <div style={{ height: '100%', margin: -16 }}>\n          <PageChartContainer className=\"page-chart\">\n            {(size) => (\n              <Chart\n                padding={padding}\n                colorScale={groups.map((group) => group.color)}\n                height={size.height}\n                width={size.width}\n                minDomain={minDomain}\n                maxDomain={{ y: maxDomainY }}\n                containerComponent={\n                  <CursorVoronoiContainer\n                    cursorDimension=\"x\"\n                    labels={(point: { datum: { y: string | number } }) => point.datum.y.toString()}\n                    labelComponent={\n                      <ChartLegendTooltip\n                        // title={(datum: { x: number | string }) => datum.x}\n                        legendData={legendData}\n                        cornerRadius={8}\n                      />\n                    }\n                    mouseFollowTooltips\n                    voronoiDimension=\"x\"\n                    voronoiPadding={50}\n                  />\n                }\n              >\n                <ChartAxis fixLabelOverlap />\n                <ChartAxis\n                  dependentAxis\n                  showGrid\n                  tickFormat={\n                    onlyIntegerTicks === false\n                      ? undefined\n                      : (t: number) => (Number.isInteger(t) ? t : '')\n                  }\n                />\n                {props.variant === 'lineChart' &&\n                  groups.map((group, index) => (\n                    <ChartLine\n                      key={index}\n                      name={index.toString()}\n                      style={{ data: { strokeWidth: 3, stroke: group.color } }}\n                      data={group.values.map((value) => ({ x: value.label, y: value.value }))}\n                      interpolation=\"monotoneX\"\n                    />\n                  ))}\n                {props.variant === 'lineChart' &&\n                  groups.map((group, index) => (\n                    <ChartScatter\n                      key={'scatter-' + index}\n                      name={'scatter-' + index}\n                      data={group.values.map((value) => ({ x: value.label, y: value.value }))}\n                      size={({ active }) => (active ? 6 : 3)}\n                      style={{ data: { fill: group.color } }}\n                    />\n                  ))}\n                {(!props.variant || props.variant === 'stackedAreaChart') && (\n                  <ChartStack>\n                    {groups.map((group, index) => (\n                      <ChartArea\n                        key={index}\n                        name={index.toString()}\n                        data={group.values.map((value) => ({ x: value.label, y: value.value }))}\n                        interpolation=\"monotoneX\"\n                        style={{ data: { strokeWidth: 2 } }}\n                      />\n                    ))}\n                  </ChartStack>\n                )}\n                {(!props.variant || props.variant === 'stackedAreaChart') && (\n                  <ChartStack>\n                    {groups.map((group, index) => (\n                      <ChartScatter\n                        key={'scatter-' + index}\n                        name={'scatter-' + index}\n                        data={group.values.map((value) => ({\n                          x: value.label,\n                          y: value.value,\n                        }))}\n                        size={({ active }) => (active ? 6 : 3)}\n                      />\n                    ))}\n                  </ChartStack>\n                )}\n              </Chart>\n            )}\n          </PageChartContainer>\n        </div>\n        {xLabel && (\n          <XAxisLabel label={xLabel} paddingLeft={padding.left} paddingRight={padding.right} />\n        )}\n        <PageChartLegend\n          id={props.id ?? 'chart'}\n          legend={legend}\n          horizontal\n          showLegendCount={props.showLegendCount}\n          allowZero={props.allowZero}\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction XAxisLabel(props: { label: string; paddingLeft?: number; paddingRight?: number }) {\n  return (\n    <span\n      style={{\n        maxHeight: '1em',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingLeft: props.paddingLeft,\n        paddingRight: props.paddingRight,\n      }}\n    >\n      {props.label}\n    </span>\n  );\n}\n\nfunction YAxisLabel(props: {\n  label: string;\n  paddingLeft?: number;\n  paddingBottom?: number;\n  paddingTop?: number;\n}) {\n  return (\n    <div\n      style={{\n        maxWidth: '1em',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingLeft: props.paddingLeft,\n        paddingBottom: props.paddingBottom,\n        paddingTop: props.paddingTop,\n        marginRight: 16,\n      }}\n    >\n      <span style={{ transform: 'rotate(-90deg)', whiteSpace: 'nowrap' }}>{props.label}</span>\n    </div>\n  );\n}\n","import { Popover } from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\nimport { ReactNode } from 'react';\nimport styled from 'styled-components';\nimport { useFrameworkTranslations } from '../useFrameworkTranslations';\n\nconst PopoverButton = styled.button`\n  padding: var(--pf-v5-global--spacer--xs);\n  margin: -(var(--pf-v5-global--spacer--xs));\n  font-size: var(--pf-v5-global--FontSize--sm);\n  --pf-v5-c-form__group-label-help--Color: var(--pf-v5-global--Color--200);\n  --pf-v5-c-form__group-label-help--hover--Color: var(--pf-v5-global--Color--100);\n`;\n\nfunction StandardPopover(props: {\n  ariaLabel?: string;\n  content: ReactNode;\n  header: ReactNode;\n  id?: string;\n  maxWidth?: string;\n}) {\n  const { ariaLabel = '', content, header, id = '', maxWidth = '', ...rest } = props;\n  const [translations] = useFrameworkTranslations();\n  if (!content) {\n    return null;\n  }\n  return (\n    <Popover\n      bodyContent={content}\n      headerContent={header}\n      hideOnOutsideClick\n      id={id}\n      data-cy={id}\n      maxWidth={maxWidth}\n      {...rest}\n    >\n      <PopoverButton\n        aria-label={ariaLabel ?? translations.moreInformation}\n        aria-haspopup=\"true\"\n        className=\"pf-v5-c-form__group-label-help\"\n        onClick={(e) => e.preventDefault()}\n        type=\"button\"\n      >\n        <HelpIcon />\n      </PopoverButton>\n    </Popover>\n  );\n}\n\nexport { StandardPopover };\n","import {\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n} from '@patternfly/react-core';\nimport { ReactNode } from 'react';\nimport styled from 'styled-components';\nimport { StandardPopover } from '../components/StandardPopover';\nimport { useID } from '../hooks/useID';\n\nexport function PageDetail(props: {\n  id?: string;\n  label?: string;\n  children?: ReactNode;\n  helpText?: string | ReactNode;\n  isEmpty?: boolean;\n  fullWidth?: boolean;\n}) {\n  const id = useID(props);\n  const { label, children, helpText, isEmpty } = props;\n  if (children === null || typeof children === 'undefined' || children === '') {\n    return <></>;\n  }\n  if (isEmpty) {\n    return <></>;\n  }\n  return (\n    <DescriptionListGroup style={{ gridColumn: props.fullWidth ? 'span 3' : undefined }}>\n      {label && (\n        <DescriptionListTerm data-cy={`label-${id}`}>\n          {label}\n          {helpText ? <StandardPopover header={label} content={helpText} /> : null}\n        </DescriptionListTerm>\n      )}\n      <DescriptionListDescriptionStyled id={id} data-cy={id}>\n        {children}\n      </DescriptionListDescriptionStyled>\n    </DescriptionListGroup>\n  );\n}\n\nconst DescriptionListDescriptionStyled = styled(DescriptionListDescription)`\n  opacity: 0.8;\n`;\n","import { Alert, DescriptionList, PageSection } from '@patternfly/react-core';\nimport { ReactNode } from 'react';\nimport styled from 'styled-components';\nimport { usePageSettings } from '../PageSettings/PageSettingsProvider';\nimport { Scrollable } from '../components/Scrollable';\n\nexport function PageDetails(props: {\n  children?: ReactNode;\n  disablePadding?: boolean;\n  numberOfColumns?: 'multiple' | 'single' | 'two';\n  labelOrientation?: 'horizontal' | 'vertical';\n  alertPrompts?: string[];\n  isCompact?: boolean;\n  disableScroll?: boolean;\n}) {\n  const { disablePadding, alertPrompts } = props;\n  const settings = usePageSettings();\n  const orientation = props.labelOrientation ?? settings.formLayout;\n  const numberOfColumns = props.numberOfColumns ? props.numberOfColumns : settings.formColumns;\n  const isCompact = props.isCompact;\n\n  let component = (\n    <PageSectionStyled variant=\"light\" padding={{ default: 'noPadding' }}>\n      {alertPrompts &&\n        alertPrompts.length > 0 &&\n        alertPrompts.map((alertPrompt, i) => (\n          <Alert\n            style={{ margin: 12 }}\n            isInline\n            title={alertPrompt}\n            variant=\"warning\"\n            key={i}\n            data-cy={alertPrompt}\n          ></Alert>\n        ))}\n      <DescriptionList\n        orientation={{\n          sm: orientation,\n          md: orientation,\n          lg: orientation,\n          xl: orientation,\n          '2xl': orientation,\n        }}\n        columnModifier={\n          numberOfColumns === 'multiple'\n            ? {\n                default: '1Col',\n                sm: '1Col',\n                md: '2Col',\n                lg: '2Col',\n                xl: '3Col',\n                '2xl': '3Col',\n              }\n            : numberOfColumns === 'two'\n              ? {\n                  default: '1Col',\n                  sm: '1Col',\n                  md: '2Col',\n                  lg: '2Col',\n                  xl: '3Col',\n                  '2xl': '2Col',\n                }\n              : undefined\n        }\n        style={{ maxWidth: 1200, padding: disablePadding ? undefined : 24 }}\n        isCompact={isCompact}\n      >\n        {props.children}\n      </DescriptionList>\n    </PageSectionStyled>\n  );\n  if (!props.disableScroll) {\n    component = <Scrollable>{component}</Scrollable>;\n  }\n  return component;\n}\n\nconst PageSectionStyled = styled(PageSection)`\n  background-color: transparent;\n`;\n","export enum PageTableViewTypeE {\n  Table = 'table',\n  List = 'list',\n  Cards = 'cards',\n}\n\nexport type PageTableViewType = 'table' | 'list' | 'cards';\n","import { ReactNode, useMemo } from 'react';\nimport { DateTimeCell } from '../PageCells/DateTimeCell';\nimport { LabelsCell } from '../PageCells/LabelsCell';\nimport { TextCell } from '../PageCells/TextCell';\nimport { PageTableViewTypeE } from '../PageToolbar/PageTableViewType';\n\n/** Column options for controlling how the column displays in a table. */\nexport enum ColumnTableOption {\n  /** Description uses the column in an expendable row with full width. */\n  description = 'description',\n\n  /** Expanded uses the column in the expendable row. */\n  expanded = 'expanded',\n\n  /** Hidden hides the column in the table. */\n  hidden = 'hidden',\n}\n\n/** Column options for controlling how the column displays in a list. */\nexport enum ColumnListOption {\n  /** Name indicates the column should show up as the name for the item in the list. */\n  name = 'name',\n\n  /** Subtitle indicates the column should show up as the subtitle under the name in the list. */\n  subtitle = 'subtitle',\n\n  /** Description indicates the column should be used as the description on the list. */\n  description = 'description',\n\n  /** Hidden hides the column in the list. */\n  hidden = 'hidden',\n\n  /** Primary places the column in the first(left) column in the list. */\n  primary = 'primary',\n\n  /** Secondary places the column in the second(right) column in the list. */\n  secondary = 'secondary',\n}\n\n/** Column options for controlling how the column displays in a card. */\nexport enum ColumnCardOption {\n  /** Name indicates the column should show up as the name for the item in the card. */\n  name = 'name',\n\n  /** Subtitle indicates the column should show up as the subtitle under the name in the card. */\n  subtitle = 'subtitle',\n\n  /** Description indicates the column should be used as the description on the card. */\n  description = 'description',\n\n  /** Hidden hides the column in the card. */\n  hidden = 'hidden',\n}\n\n/** Column options for controlling how the column displays in a card. */\nexport enum ColumnModalOption {\n  /** Hidden hides the column in modals. */\n  hidden = 'hidden',\n}\n\n/** Column options for controlling how the column displays in a dashboard. */\nexport enum ColumnDashboardOption {\n  /** Hidden hides the column in modals. */\n  hidden = 'hidden',\n}\n\n/** Column options for setting column priority. This is used to determine the order in which\n * the column is displayed when generating a details page (PageDetailsFromColumns). */\nexport enum ColumnPriority {\n  /** Last: The column data will be displayed last in PageDetailsFromColumns */\n  last = 'last',\n}\n\n/** Table column common properties to all columns. */\ninterface ITableColumnCommon<T extends object> {\n  /** Id of the column. Used to track the column in sorting and user options. */\n  id?: string;\n\n  /** Header for the column in the table. */\n  header: string;\n\n  /** This is the help text that will appear on the details view when that details view uses <PageDetailsFromColumns> */\n  helpText?: string;\n\n  /** MinWidth for the column. */\n  minWidth?: number;\n\n  /** MaxWidth for the column. */\n  maxWidth?: number;\n\n  /** Makes the column take up the full width */\n  fullWidth?: boolean;\n\n  /** Indicates the key for the sorting. This key is usually handled by the view to so the sorting. */\n  sort?: string;\n\n  /** Indicates the default sort direction for the column.\n   * Defaults to 'asc'.\n   * Dates need to default to 'desc'. Should be handled if using the DateTime column type.\n   * TODO - add helper function to get default sort for a column type\n   */\n  defaultSortDirection?: 'asc' | 'desc';\n\n  /** Indicates that the column is the default sorted column. */\n  defaultSort?: boolean;\n\n  /** Icon for the column. */\n  // TODO need to validate that this is working in all cases and document caveats\n  icon?: (item: T) => ReactNode;\n\n  /** Table column options for controlling how the column displays in a table. */\n  table?: keyof typeof ColumnTableOption;\n\n  /** Table column options for controlling how the column displays in a list. */\n  list?: keyof typeof ColumnListOption;\n\n  /** Table column options for controlling how the column displays in a card. */\n  card?: keyof typeof ColumnCardOption;\n\n  /** Table column options for controlling how the column displays in a modal. */\n  modal?: keyof typeof ColumnModalOption;\n\n  /** Table column options for controlling how the column displays in a dashboard. */\n  dashboard?: keyof typeof ColumnDashboardOption;\n\n  /** Table column options for controlling the order in which the column's data is displayed in a details page. */\n  priority?: keyof typeof ColumnPriority;\n}\n\n/** Column that renders using a render function that returns a ReactNode. */\nexport interface ITableColumnTypeReactNode<T extends object> extends ITableColumnCommon<T> {\n  type?: undefined;\n  /** if value returns undefined, this column will be hidden from expanded rows, cards, and lists. */\n  value?: CellFn<T, string | string[] | number | boolean | undefined | null>;\n  cell: CellFn<T, ReactNode | undefined>;\n}\n\nexport interface ITableColumnTypeText<T extends object> extends ITableColumnCommon<T> {\n  type: 'text';\n  /** if value returns undefined, this column will be hidden from expanded rows, cards, and lists. */\n  value: CellFn<T, string | null | undefined>;\n  to?: (item: T) => string | undefined;\n}\n\n// TODO - default ITableColumnTypeDateTime columns maxWidth. - this will need a helper function called from the table getColumnWidth(column)\n// TODO - default option table, card, list to 'description' and modal to 'hidden'. - this will need a helper function\nexport interface ITableColumnTypeDescription<T extends object> extends ITableColumnCommon<T> {\n  type: 'description';\n  /** if value returns undefined, this column will be hidden from expanded rows, cards, and lists. */\n  value: CellFn<T, string | undefined | null>;\n}\n\n// TODO - default option table, card, list to 'count' and modal to 'hidden'.\nexport interface ITableColumnTypeCount<T extends object> extends ITableColumnCommon<T> {\n  type: 'count';\n  /** if value returns undefined, this column will be hidden from expanded rows, cards, and lists. */\n  value: CellFn<T, number | undefined>;\n  // TODO options for formatting number. i.e. should number be error/warning color if not 0?\n}\n\n/** Table column that shows a count. In a card, this shows up in a count section at the bottom of the card. */\nexport interface ITableColumnTypeLabels<T extends object> extends ITableColumnCommon<T> {\n  type: 'labels';\n  /** if value returns undefined, this column will be hidden from expanded rows, cards, and lists. */\n  value: CellFn<T, string[] | undefined>;\n  // TODO add use option indicating how many labels to show by default\n}\n\n// TODO - default ITableColumnTypeDateTime columns to sort 'desc'.\nexport interface ITableColumnTypeDateTime<T extends object> extends ITableColumnCommon<T> {\n  type: 'datetime';\n  /** if value returns undefined, this column will be hidden from expanded rows, cards, and lists. */\n  value: CellFn<T, number | string | undefined>;\n  // TODO add format to datetime & allow user to change\n}\n\n/** Table column used for rendering columns in tables, lists, and cards. */\nexport type ITableColumn<T extends object> =\n  | ITableColumnTypeReactNode<T>\n  | ITableColumnTypeText<T>\n  | ITableColumnTypeDescription<T>\n  | ITableColumnTypeDateTime<T>\n  | ITableColumnTypeLabels<T>\n  | ITableColumnTypeCount<T>;\n\n/** Table column cell formats the cell contents based on column settings. */\nexport function TableColumnCell<T extends object>(props: {\n  item: T;\n  column?: ITableColumn<T>;\n}): JSX.Element {\n  const { item, column } = props;\n  if (!column) return <></>;\n  switch (column.type) {\n    case 'text':\n      return <TextCell text={column.value(item)} to={column.to?.(item)} />;\n    case 'description':\n      return <div style={{ minWidth: 200, whiteSpace: 'normal' }}>{column.value(item)}</div>;\n    case 'datetime':\n      return <DateTimeCell value={column.value(item)} />;\n    case 'count':\n      // TODO - handle format from column options\n      return <>{column.value(item) ?? '-'}</>;\n    case 'labels':\n      return <LabelsCell labels={column.value(item) ?? []} />;\n    default:\n      return <>{column.cell(item)}</>;\n  }\n}\n\n/** Hook to return only the columns that should be visible in the table. */\nexport function useVisibleTableColumns<T extends object>(columns: ITableColumn<T>[]) {\n  return useMemo(\n    () =>\n      columns.filter((column) => {\n        if (column.table === ColumnTableOption.hidden) return false;\n        if (column.table === ColumnTableOption.description) return false;\n        if (column.table === ColumnTableOption.expanded) return false;\n        return true;\n      }),\n    [columns]\n  );\n}\n\n/** Hook to return only the columns that should be visible in the list. */\nexport function useVisibleListColumns<T extends object>(columns: ITableColumn<T>[]) {\n  return useMemo(\n    () => columns.filter((column) => column.list !== ColumnListOption.hidden),\n    [columns]\n  );\n}\n\n/** Hook to return only the columns that should be visible in the cards. */\nexport function useVisibleCardColumns<T extends object>(columns: ITableColumn<T>[]) {\n  return useMemo(\n    () => columns.filter((column) => column.card !== ColumnCardOption.hidden),\n    [columns]\n  );\n}\n\n/** Hook to return only the columns that should be visible in a modal. */\nexport function useVisibleModalColumns<T extends object>(columns: ITableColumn<T>[]) {\n  return useMemo(\n    () => columns.filter((column) => column.modal !== ColumnModalOption.hidden),\n    [columns]\n  );\n}\n\n/** Hook to return only the columns that should be visible in a dashboard. */\nexport function useDashboardColumns<T extends object>(columns: ITableColumn<T>[]) {\n  columns = useMemo(\n    () => columns.filter((column) => column.dashboard !== ColumnDashboardOption.hidden),\n    [columns]\n  );\n  columns = useColumnsWithoutSort(columns);\n  columns = useColumnsWithoutExpandedRow(columns);\n  return columns;\n}\n\n/** Hook to return only the columns that should be visible in the table view type. */\nexport function useVisibleColumns<T extends object>(\n  columns: ITableColumn<T>[],\n  viewType: PageTableViewTypeE\n) {\n  const visibleTableColumns = useVisibleTableColumns(columns);\n  const visibleListColumns = useVisibleListColumns(columns);\n  const visibleCardColumns = useVisibleCardColumns(columns);\n  switch (viewType) {\n    case PageTableViewTypeE.Table:\n      return visibleTableColumns;\n    case PageTableViewTypeE.List:\n      return visibleListColumns;\n    case PageTableViewTypeE.Cards:\n      return visibleCardColumns;\n  }\n}\n\n/** Hook to return only the columns that should be visible in a table expanded row as description. */\nexport function useDescriptionColumns<T extends object>(columns: ITableColumn<T>[]) {\n  return useMemo(\n    () =>\n      columns.filter((column) => {\n        if (column.table === ColumnTableOption.hidden) return false;\n        if (column.table === ColumnTableOption.description) return true;\n        return false;\n      }),\n    [columns]\n  );\n}\n\n/** Hook to return only the columns that should be visible in a table expanded row. */\nexport function useExpandedColumns<T extends object>(columns: ITableColumn<T>[]) {\n  return useMemo(\n    () =>\n      columns.filter((column) => {\n        if (column.table === ColumnTableOption.hidden) return false;\n        if (column.table === ColumnTableOption.expanded) return true;\n        return false;\n      }),\n    [columns]\n  );\n}\n\ntype CellFn<T extends object, R> = (item: T) => R;\n\n/** Hook to disable sorting on all columns. */\nexport function useColumnsWithoutSort<T extends object>(columns: ITableColumn<T>[]) {\n  return useMemo(() => columns.map((column) => ({ ...column, sort: undefined })), [columns]);\n}\n\n/** Hook to disable sorting on all columns. */\nexport function useColumnsWithoutExpandedRow<T extends object>(columns: ITableColumn<T>[]) {\n  return useMemo(\n    () =>\n      columns.map((column) => ({\n        ...column,\n        table: column.table === ColumnTableOption.expanded ? undefined : column.table,\n      })),\n    [columns]\n  );\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/* eslint-disable @typescript-eslint/no-empty-function */\nimport { ReactNode, useMemo } from 'react';\nimport { ColumnPriority, ITableColumn, TableColumnCell } from '../PageTable/PageTableColumn';\nimport { PageDetail } from './PageDetail';\n\nexport function PageDetailsFromColumns<T extends object>(props: {\n  item: T | undefined;\n  columns: ITableColumn<T>[];\n  /** Custom page details */\n  children?: ReactNode;\n}) {\n  const { item, columns, children } = props;\n\n  const columnsWithValue = useMemo(\n    () =>\n      columns.filter((column) => {\n        if (!item) return false;\n        if ('value' in column && column.value) {\n          const itemValue = column.value(item);\n          if (\n            itemValue === undefined ||\n            itemValue === null ||\n            (typeof itemValue === 'string' && itemValue.trim().length === 0)\n          )\n            return false;\n        }\n        return true;\n      }),\n    [columns, item]\n  );\n\n  /**\n   * Columns are displayed based on priority. Columns with ColumnPriority.last appear last.\n   * Custom details are received as an optional 'children' prop and placed in the correct position.\n   */\n  const firstColumns = useMemo(\n    () => columnsWithValue.filter((column) => column.priority !== ColumnPriority.last),\n    [columnsWithValue]\n  );\n  const lastColumns = useMemo(\n    () => columnsWithValue.filter((column) => column.priority === ColumnPriority.last),\n    [columnsWithValue]\n  );\n  if (!item) return null;\n  if (!columnsWithValue.length) return null;\n  return (\n    <>\n      {firstColumns.map((column) => {\n        return (\n          <PageDetail\n            key={column.id ?? column.header}\n            helpText={column.helpText}\n            label={column.header}\n          >\n            <TableColumnCell column={column} item={item} />\n          </PageDetail>\n        );\n      })}\n      {children ? children : null}\n      {lastColumns.map((column) => {\n        return (\n          <PageDetail key={column.id ?? column.header} label={column.header}>\n            <TableColumnCell column={column} item={item} />\n          </PageDetail>\n        );\n      })}\n    </>\n  );\n}\n","import { ErrorOutput, FieldErrorDetail, GenericErrorDetail } from './typesErrorAdapter';\n\nexport const genericErrorAdapter = (error: unknown): ErrorOutput => {\n  const errorDetailKeys: string[] = ['json'];\n  const genericErrorKeys: string[] = ['non_field_errors'];\n\n  const genericErrors: GenericErrorDetail[] = [];\n  const fieldErrors: FieldErrorDetail[] = [];\n\n  switch (typeof error) {\n    case 'string':\n      genericErrors.push({ message: error });\n      break;\n    case 'object':\n      if (error === null) break;\n\n      if (Array.isArray(error)) {\n        for (const value of error) {\n          if (typeof value === 'string') {\n            genericErrors.push({ message: value });\n          }\n        }\n        break;\n      }\n\n      for (const errorDetailsKey of errorDetailKeys) {\n        if (\n          errorDetailsKey in error &&\n          typeof (error as Record<string, unknown>)[errorDetailsKey] === 'object' &&\n          (error as Record<string, unknown>)[errorDetailsKey] !== null\n        ) {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          for (const name in (error as Record<string, any>)[errorDetailsKey]) {\n            const value = (\n              (error as Record<string, unknown>)[errorDetailsKey] as Record<string, unknown>\n            )[name];\n            if (genericErrorKeys.includes(name)) {\n              if (typeof value === 'string') {\n                genericErrors.push({ message: value });\n              } else if (Array.isArray(value)) {\n                for (const message of value) {\n                  if (typeof message === 'string') {\n                    genericErrors.push({ message });\n                  }\n                }\n              }\n            } else {\n              if (typeof value === 'string') {\n                fieldErrors.push({ name, message: value });\n              } else if (Array.isArray(value)) {\n                for (const message of value) {\n                  if (typeof message === 'string') {\n                    fieldErrors.push({ name, message });\n                  }\n                }\n              }\n            }\n          }\n        } else if (error instanceof Error) {\n          genericErrors.push({ message: error.message });\n        }\n      }\n      break;\n  }\n\n  return { genericErrors, fieldErrors };\n};\n","import {\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  DropdownToggleCheckbox,\n} from '@patternfly/react-core/deprecated';\nimport { useCallback, useMemo, useState } from 'react';\nimport { useFrameworkTranslations } from '../useFrameworkTranslations';\nimport { useBreakpoint } from './useBreakPoint';\n\nexport interface BulkSelectorProps<T> {\n  itemCount?: number;\n  pageItems?: T[];\n  selectedItems?: T[];\n  selectItems?: (items: T[]) => void;\n  unselectAll?: () => void;\n  keyFn: (item: T) => string | number;\n  selectNoneText?: string;\n  /** Optional: Max selections permitted in a table. The bulk selector is disabled based on this value.\n   */\n  maxSelections?: number;\n}\n\nexport function BulkSelector<T extends object>(props: BulkSelectorProps<T>) {\n  const [isOpen, setIsOpen] = useState(false);\n  const isSmallOrLarger = useBreakpoint('sm');\n  const [translations] = useFrameworkTranslations();\n\n  const { pageItems, selectedItems, selectItems, unselectAll, maxSelections } = props;\n\n  const allPageItemsSelected =\n    props.itemCount !== undefined &&\n    props.itemCount > 0 &&\n    pageItems &&\n    pageItems.length > 0 &&\n    (pageItems ?? []).every((item) => selectedItems?.includes(item));\n\n  const onToggleCheckbox = useCallback(() => {\n    if (allPageItemsSelected) {\n      unselectAll?.();\n    } else {\n      selectItems?.(pageItems ?? []);\n    }\n  }, [allPageItemsSelected, unselectAll, selectItems, pageItems]);\n\n  const toggleText = useMemo(() => {\n    if (isSmallOrLarger) {\n      if (selectedItems && selectedItems.length > 0) {\n        return `${selectedItems.length} selected`;\n      }\n      return '';\n    } else {\n      if (selectedItems && selectedItems.length > 0) {\n        return `${selectedItems.length}`;\n      }\n      return '';\n    }\n  }, [isSmallOrLarger, selectedItems]);\n\n  const unselectedPageItems = useMemo(\n    () => pageItems?.filter((item) => !selectedItems?.includes(item)),\n    [pageItems, selectedItems]\n  );\n\n  /** Disable bulk selection if max number of allowed selections has been specified and\n   * bulk selection on the page will cause the number of selections to exceed the max allowed\n   * selections.\n   */\n  const disableBulkSelector = useMemo(\n    () =>\n      Boolean(\n        maxSelections &&\n          selectedItems &&\n          unselectedPageItems &&\n          !allPageItemsSelected &&\n          selectedItems?.length + unselectedPageItems.length > maxSelections\n      ),\n    [allPageItemsSelected, maxSelections, selectedItems, unselectedPageItems]\n  );\n\n  const toggle = useMemo(() => {\n    const selectedCount = selectedItems ? selectedItems.length : 0;\n    return (\n      <DropdownToggle\n        splitButtonItems={[\n          <DropdownToggleCheckbox\n            id=\"select-all\"\n            ouiaId={'select-all'}\n            key=\"select-all\"\n            data-cy=\"select-all\"\n            aria-label=\"Select all\"\n            isChecked={allPageItemsSelected ? true : selectedCount > 0 ? null : false}\n            onChange={onToggleCheckbox}\n          >\n            {toggleText}\n          </DropdownToggleCheckbox>,\n        ]}\n        onToggle={(_event, isOpen) => setIsOpen(isOpen)}\n        isDisabled={disableBulkSelector}\n      />\n    );\n  }, [selectedItems, allPageItemsSelected, onToggleCheckbox, toggleText, disableBulkSelector]);\n\n  const selectNoneDropdownItem = useMemo(() => {\n    return (\n      <DropdownItem\n        id=\"select-none\"\n        ouiaId={'select-none'}\n        key=\"select-none\"\n        onClick={() => {\n          unselectAll?.();\n          setIsOpen(false);\n        }}\n      >\n        {props.selectNoneText ?? translations.selectNone}\n      </DropdownItem>\n    );\n  }, [props.selectNoneText, translations.selectNone, unselectAll]);\n\n  const selectPageDropdownItem = useMemo(() => {\n    return (\n      <DropdownItem\n        id=\"select-page\"\n        ouiaId={'select-page'}\n        key=\"select-page\"\n        onClick={() => {\n          selectItems?.(pageItems ?? []);\n          setIsOpen(false);\n        }}\n      >\n        {`Select ${pageItems?.length ?? 0} page items`}\n      </DropdownItem>\n    );\n  }, [selectItems, pageItems]);\n\n  const dropdownItems = useMemo(() => {\n    const hasSelectedItems = selectedItems && selectedItems.length > 0;\n\n    if (hasSelectedItems) {\n      return [selectNoneDropdownItem, selectPageDropdownItem];\n    } else {\n      return [selectPageDropdownItem];\n    }\n  }, [selectNoneDropdownItem, selectPageDropdownItem, selectedItems]);\n\n  return (\n    // Negative margin is needed to align the bulk select with table checkboxes\n    <div style={{ marginLeft: -8 }}>\n      <Dropdown\n        isOpen={isOpen}\n        toggle={toggle}\n        dropdownItems={dropdownItems}\n        // ZIndex 400 is needed for PF table stick headers\n        style={{ zIndex: 400 }}\n      />\n    </div>\n  );\n}\n","import { useCallback, useEffect, useState } from 'react';\n\nexport function useOverridableState<T extends string | boolean | number | undefined>(\n  value: T,\n  setValue?: (value: T) => void\n): [T, (value: T) => void] {\n  const [valueState, setValueState] = useState<T>(() => value);\n  useEffect(() => setValueState(value), [value]);\n\n  const setValueFn = useCallback<(value: T) => void>(\n    (value: T) => {\n      if (setValue) {\n        setValue(value);\n      } else {\n        setValueState(value);\n      }\n    },\n    [setValue]\n  );\n\n  return [valueState, setValueFn];\n}\n","import {\n  Bullseye,\n  Chip,\n  ChipGroup,\n  Divider,\n  MenuFooter,\n  MenuSearch,\n  MenuSearchInput,\n  MenuToggle,\n  MenuToggleElement,\n  SearchInput,\n  Select,\n  SelectGroup,\n  SelectList,\n  SelectOption,\n  Spinner,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { TimesIcon } from '@patternfly/react-icons';\nimport { ReactNode, Ref, useCallback, useEffect, useMemo, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\nimport { Scrollable } from '../components/Scrollable';\nimport { useOverridableState } from '../components/useOverridableState';\nimport { getID } from '../hooks/useID';\nimport { PageSelectOption } from './PageSelectOption';\n\nexport interface PageMultiSelectProps<ValueT> {\n  /** The ID of the select. */\n  id?: string;\n\n  /** The icon to show in the select. */\n  icon?: ReactNode;\n\n  /** The placeholder to show when no values are selected. */\n  placeholder: ReactNode;\n\n  // TODO isDisabled should be a string\n  /** Disables the toggle to open and close the menu */\n  isDisabled?: string;\n\n  /** The selected values. */\n  values: ValueT[] | undefined | null;\n\n  /** The function to set the selected values. */\n  onSelect: (setter: (currentValues: ValueT[] | undefined) => ValueT[] | undefined) => void;\n\n  /** The options to select from. */\n  options: PageSelectOption<ValueT>[];\n\n  /** The variant of the select. */\n  variant?: 'chips' | 'count';\n\n  /** The footer to show at the bottom of the dropdown. */\n  footer?: ReactNode;\n\n  /**\n   * Indicates if the select is open.\n   * Handled by the component if not provided.\n   */\n  open?: boolean;\n\n  /**\n   * The function to set the open state.\n   * Handled by the component if not provided.\n   */\n  setOpen?: (open: boolean) => void;\n\n  /**\n   * The search value to filter the options.\n   * Handled by the component if not provided.\n   */\n  searchValue?: string;\n\n  /**\n   * The function to set the search value.\n   * Handled by the component if not provided.\n   */\n  setSearchValue?: (searchValue: string) => void;\n\n  /**\n   * Indicates if the select is loading.\n   * This is a helper to show a loading spinner in the dropdown.\n   * Used by `PageAsyncSingleSelect`.\n   */\n  isLoading?: boolean;\n\n  /**\n   * Whether to disable the clear selection button.\n   *\n   * User by the toolbar since clearing the select is part of the toolbar filter chips already.\n   */\n  disableClearSelection?: boolean;\n\n  disableClearChips?: boolean;\n\n  maxChipSize?: string;\n\n  disableSortOptions?: boolean;\n\n  queryLabel?: (value: ValueT) => ReactNode;\n\n  compareOptionValues?: (a: ValueT, b: ValueT) => boolean;\n}\n\n/**\n * Select dropdown component for multiple selection of options.\n *\n * @param props The props of the component. See `PageMultiSelectProps`.\n *\n * This is a wrapper over PatternFly's `Select` component,\n * simplifying the API and adding some features:\n * - `values`, `onSelect`, and `options` are typed.\n * - `options` can be an array of strings, numbers or objects with `label` and `value` properties.\n *\n * This component also adds a search input and footer to the dropdown.\n *\n * Typeahead is supported by the component opening and searching when the user types.\n *\n * Used by:\n * - `PageAsyncMultiSelect`\n * - `PageFormMultiSelect`\n * - `PageFormAsyncMultiSelect` via PageAsyncMultiSelect\n * - `IFilterMultiSelect`\n * - `IFilterAsyncMultiSelect` via PageAsyncMultiSelect\n *\n * @example\n * return (\n *   <PageMultiSelect\n *     placeholder=\"Select options\"\n *     values={values}\n *     onSelect={setValues}\n *     options={[\n *       { label: 'Option 1', value: 1 },\n *       { label: 'Option 2', value: 2 }\n *     ]}\n *   />\n * )\n */\nexport function PageMultiSelect<\n  /** The type of the value of the select and of the options values. */\n  ValueT,\n>(props: PageMultiSelectProps<ValueT>) {\n  const { t } = useTranslation();\n  const {\n    id,\n    icon,\n    placeholder,\n    values,\n    onSelect,\n    options,\n    variant,\n    disableClearSelection,\n    maxChipSize,\n    queryLabel,\n    compareOptionValues,\n  } = props;\n  const [open, setOpen] = useOverridableState(props.open ?? false, props.setOpen);\n  const [searchValue, setSearchValue] = useOverridableState(\n    props.searchValue ?? '',\n    props.setSearchValue\n  );\n\n  const selectListRef = useRef<HTMLDivElement>(null);\n\n  const selectedOptions = useMemo(() => {\n    const selectedOptions: PageSelectOption<ValueT>[] = [];\n    for (const value of values ?? []) {\n      const option = options.find((option) =>\n        compareOptionValues ? compareOptionValues(option.value, value) : option.value === value\n      );\n      if (option) {\n        selectedOptions.push(option);\n      } else if (queryLabel) {\n        if (value !== undefined) {\n          selectedOptions.push({ label: queryLabel(value) as string, value });\n        }\n      }\n    }\n    return selectedOptions;\n  }, [options, queryLabel, values, compareOptionValues]);\n\n  const Toggle = (toggleRef: Ref<MenuToggleElement>) => {\n    return (\n      <Tooltip content={props.isDisabled} trigger={props.isDisabled ? undefined : 'manual'}>\n        <MenuToggle\n          id={id}\n          ref={toggleRef}\n          onClick={() => setOpen(!open)}\n          isExpanded={open}\n          onKeyDown={(event) => {\n            switch (event.key) {\n              case 'Tab':\n              case 'Enter':\n              case 'Shift':\n                break;\n              default:\n                setOpen(true);\n                setTimeout(() => {\n                  if (searchRef.current) {\n                    searchRef.current.focus();\n                    searchRef.current.value = event.key;\n                  }\n                }, 1);\n                break;\n            }\n          }}\n          data-cy={id}\n          icon={icon}\n          isDisabled={!!props.isDisabled}\n          isFullWidth\n          style={{ paddingTop: 2, paddingBottom: 4, minHeight: 36 }}\n        >\n          {selectedOptions.length > 0 ? (\n            <>\n              {variant === 'count' ? (\n                <Chip\n                  isReadOnly={disableClearSelection}\n                  onClick={() => onSelect(() => [])}\n                  style={{ marginTop: -4, marginBottom: -4 }}\n                >\n                  {selectedOptions.length}\n                </Chip>\n              ) : (\n                <>\n                  <ChipGroup numChips={99}>\n                    {selectedOptions.map((option) => (\n                      <Chip\n                        key={option.label}\n                        isReadOnly={props.disableClearChips}\n                        textMaxWidth={maxChipSize}\n                        style={{ marginTop: -2, marginBottom: -2 }}\n                        onClick={() =>\n                          onSelect((previousValues) =>\n                            previousValues?.filter((v) => v !== option.value)\n                          )\n                        }\n                      >\n                        {option.label}\n                      </Chip>\n                    ))}\n                  </ChipGroup>\n                  {!disableClearSelection && (\n                    <TimesIcon\n                      role=\"button\"\n                      aria-hidden\n                      onClick={() => onSelect(() => [])}\n                      style={{ verticalAlign: 'middle', marginLeft: 8 }}\n                    />\n                  )}\n                </>\n              )}\n            </>\n          ) : (\n            <span style={{ opacity: 0.7 }}>{placeholder}</span>\n          )}\n        </MenuToggle>\n      </Tooltip>\n    );\n  };\n\n  const selected = useMemo(() => selectedOptions.map((option) => option.label), [selectedOptions]);\n\n  const onSelectHandler = useCallback(\n    (_: unknown, itemId: string | number | undefined) => {\n      onSelect((previousValues: ValueT[] | undefined) => {\n        const newSelectedOption = options.find((option) => {\n          if (option.key !== undefined) return option.key === itemId;\n          else return option.label === itemId;\n        });\n        if (newSelectedOption) {\n          if (\n            previousValues?.find((value) =>\n              compareOptionValues\n                ? compareOptionValues(value, newSelectedOption.value)\n                : value === newSelectedOption.value\n            ) !== undefined\n          ) {\n            previousValues = previousValues.filter((value) =>\n              compareOptionValues\n                ? !compareOptionValues(value, newSelectedOption.value)\n                : value !== newSelectedOption.value\n            );\n          } else {\n            previousValues = previousValues ? [...previousValues] : [];\n            previousValues.push(newSelectedOption.value);\n          }\n        }\n        return previousValues;\n      });\n    },\n    [onSelect, options, compareOptionValues]\n  );\n\n  const searchRef = useRef<HTMLInputElement>(null);\n  useEffect(() => {\n    if (!open) {\n      setSearchValue('');\n    }\n  }, [open, setSearchValue]);\n\n  const visibleOptions = useMemo(() => {\n    const newOptions = options.filter((option) => {\n      if (searchValue === '') return true;\n      else return option.label.toLowerCase().includes(searchValue.toLowerCase());\n    });\n    if (!props.disableSortOptions) {\n      newOptions.sort((a, b) => a.label.toLowerCase().localeCompare(b.label.toLowerCase()));\n    }\n    return newOptions;\n  }, [options, props.disableSortOptions, searchValue]);\n\n  const groups = useMemo(() => {\n    const hasGroups = options.some((option) => !!option.group);\n    if (hasGroups) {\n      const groups: Record<string, PageSelectOption<ValueT>[]> = {};\n      for (const option of visibleOptions) {\n        const group = option.group ?? '';\n        if (!groups[group]) groups[group] = [];\n        groups[group].push(option);\n      }\n      return groups;\n    }\n  }, [options, visibleOptions]);\n\n  return (\n    <Select\n      id={`${id}-select`}\n      selected={selected}\n      onSelect={onSelectHandler}\n      isOpen={open}\n      onOpenChange={setOpen}\n      toggle={Toggle}\n      popperProps={{ appendTo: () => document.body, preventOverflow: true, enableFlip: true }}\n      innerRef={selectListRef}\n    >\n      <MenuSearch>\n        <MenuSearchInput data-cy=\"search-input\">\n          <SearchInput\n            id={`${id}-search`}\n            ref={searchRef}\n            value={searchValue}\n            onChange={(_, value: string) => setSearchValue(value)}\n            onClear={(event) => {\n              event.stopPropagation();\n              setSearchValue('');\n            }}\n            resultsCount={\n              visibleOptions.length !== options.length\n                ? `${visibleOptions.length} / ${options.length}`\n                : undefined\n            }\n            onKeyDown={(event) => {\n              switch (event.key) {\n                case 'ArrowDown':\n                case 'Tab': {\n                  event.preventDefault();\n                  event.stopPropagation();\n                  const firstElement = selectListRef?.current?.querySelector(\n                    'li button:not(:disabled),li input:not(:disabled)'\n                  );\n                  firstElement && (firstElement as HTMLElement).focus();\n                  break;\n                }\n              }\n            }}\n          />\n        </MenuSearchInput>\n      </MenuSearch>\n      <Divider />\n      {visibleOptions.length === 0 ? (\n        <>\n          {props.isLoading ? (\n            <Bullseye style={{ padding: 16 }}>\n              <Spinner size=\"lg\" />\n            </Bullseye>\n          ) : (\n            <SelectOption isDisabled key=\"no result\">\n              {t('No results found')}\n            </SelectOption>\n          )}\n        </>\n      ) : (\n        <ScrollableStyled>\n          {groups ? (\n            <>\n              {Object.keys(groups).map((groupName) => (\n                <SelectGroup label={groupName} key={groupName}>\n                  <PageMultiSelectList\n                    searchRef={searchRef}\n                    options={visibleOptions}\n                    selectedOptions={selectedOptions}\n                  />\n                </SelectGroup>\n              ))}\n            </>\n          ) : (\n            <PageMultiSelectList\n              searchRef={searchRef}\n              options={visibleOptions}\n              selectedOptions={selectedOptions}\n            />\n          )}\n        </ScrollableStyled>\n      )}\n      {props.footer && <MenuFooter>{props.footer}</MenuFooter>}\n    </Select>\n  );\n}\n\nfunction PageMultiSelectList(props: {\n  searchRef: React.RefObject<HTMLInputElement>;\n  options: PageSelectOption<unknown>[];\n  selectedOptions: PageSelectOption<unknown>[];\n}) {\n  return (\n    <SelectList\n      onKeyDown={(event) => {\n        switch (event.key) {\n          case 'Tab':\n            event.preventDefault();\n            event.stopPropagation();\n            props.searchRef.current?.focus();\n            break;\n        }\n      }}\n    >\n      {props.options.map((option) => {\n        const optionId = getID(option);\n        return (\n          <SelectOption\n            id={optionId}\n            icon={option.icon}\n            key={option.key !== undefined ? option.key : option.label}\n            value={option.key !== undefined ? option.key : option.label}\n            description={\n              option.description ? (\n                <div style={{ maxWidth: 300 }}>{option.description}</div>\n              ) : undefined\n            }\n            hasCheckbox\n            isSelected={props.selectedOptions.includes(option)}\n            data-cy={optionId}\n          >\n            {option.label}\n          </SelectOption>\n        );\n      })}\n    </SelectList>\n  );\n}\n\nconst ScrollableStyled = styled(Scrollable)`\n  max-height: 40vh;\n`;\n","import {\n  ActionList,\n  ActionListItem,\n  Button,\n  Flex,\n  FlexItem,\n  Stack,\n  debounce,\n} from '@patternfly/react-core';\nimport { SyncAltIcon } from '@patternfly/react-icons';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\nimport { SetRequired } from 'type-fest';\nimport { PageAsyncSelectOptionsFn } from './PageAsyncSelectOptions';\nimport { PageMultiSelect, PageMultiSelectProps } from './PageMultiSelect';\nimport { PageSelectOption } from './PageSelectOption';\n\nexport interface PageAsyncMultiSelectProps<ValueT>\n  extends SetRequired<Omit<PageMultiSelectProps<ValueT>, 'options'>, 'queryLabel'> {\n  /** The function to query for options. */\n  queryOptions: PageAsyncSelectOptionsFn<ValueT>;\n\n  /** The placeholder to show while querying. */\n  queryPlaceholder?: string;\n\n  /** The text to show if the query fails. */\n  queryErrorText?: string | ((error: Error) => string);\n\n  onBrowse?: () => void;\n\n  compareOptionValues?: (a: ValueT, b: ValueT) => boolean;\n}\n\n/**\n * `PageAsyncMultiSelect` wraps the `PageMultiSelect` component to support asynchronously loading options from an async source such as an API.\n *\n * @param props The props for the component. See `PageMultiSelectProps` for details.\n *\n * @example\n * return (\n *   <PageAsyncMultiSelect\n *     placeholder=\"Select options\"\n *     values={values}\n *     onSelect={setValues}\n *     queryOptions={async (page:number) => ({\n *       total: 1,\n *       options: [{ label: 'Option 1', value: 1 }]\n *     })}\n *   />\n * )\n */\nexport function PageAsyncMultiSelect<\n  /** The type of the value of the select and of the options values. */\n  ValueT,\n>(props: PageAsyncMultiSelectProps<ValueT>) {\n  const { t } = useTranslation();\n\n  const [loading, setLoading] = useState(false);\n  const [allLoaded, setAllLoaded] = useState(false);\n  const [loadingError, setLoadingError] = useState<Error>();\n  const [total, setTotal] = useState(0);\n  const [options, setOptions] = useState<PageSelectOption<ValueT>[] | null>();\n  const [open, setOpen] = useState(false);\n\n  const nextRef = useRef<number | string | undefined>();\n  const [searchValue, setSearchValue] = useState<string>('');\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const setSearch = useCallback(\n    debounce((search: string) => setSearchValue(search), 200),\n    []\n  );\n\n  const queryOptions = useRef(props.queryOptions).current;\n\n  const activeAbortController = useRef<AbortController | null>(null);\n  const queryHandler = useCallback(() => {\n    if (activeAbortController.current) {\n      activeAbortController.current.abort();\n    }\n    const abortController = new AbortController();\n    activeAbortController.current = abortController;\n    setLoading(() => {\n      setAllLoaded(false);\n      setLoadingError(undefined);\n      setOptions((prevOptions) => {\n        if (prevOptions) {\n          return prevOptions;\n        } else {\n          return undefined;\n        }\n      });\n      void queryOptions({\n        next: nextRef.current!,\n        signal: abortController.signal,\n        search: searchValue,\n      })\n        .then((result) => {\n          if (abortController.signal.aborted) return;\n          nextRef.current = result.next;\n          if (!result.remaining) {\n            setAllLoaded(true);\n          }\n          setOptions((prevOptions) => {\n            if (abortController.signal.aborted) return prevOptions;\n            let newOptions: PageSelectOption<ValueT>[] = [\n              ...(prevOptions ?? []),\n              ...result.options,\n            ];\n            const uniqueValues = new Set<ValueT>();\n            newOptions = newOptions.filter((option) => {\n              if (uniqueValues.has(option.value)) return false;\n              uniqueValues.add(option.value);\n              return true;\n            });\n            newOptions.sort((a, b) => {\n              const lhs = a.label.toLowerCase();\n              const rhs = b.label.toLowerCase();\n              if (lhs < rhs) return -1;\n              if (lhs > rhs) return 1;\n              return 0;\n            });\n            setTotal(result.remaining + newOptions.length);\n            return newOptions;\n          });\n        })\n        .catch((err) => {\n          if (abortController.signal.aborted) return;\n          setLoadingError(err instanceof Error ? err : new Error(t('Unknown error')));\n        })\n        .finally(() => {\n          if (abortController.signal.aborted) return;\n          setLoading(false);\n        });\n      return true;\n    });\n    return () => abortController.abort();\n  }, [queryOptions, searchValue, t]);\n\n  const onLoadMore = useCallback(\n    (e: React.MouseEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      queryHandler();\n    },\n    [queryHandler]\n  );\n\n  const onReset = useCallback(\n    (e: React.MouseEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      setTotal(0);\n      setOptions([]);\n      nextRef.current = undefined;\n      queryHandler();\n    },\n    [queryHandler]\n  );\n\n  useEffect(() => {\n    if (open) {\n      setTotal(0);\n      setOptions([]);\n      nextRef.current = undefined;\n      queryHandler();\n    }\n  }, [open, queryHandler]);\n\n  const footer = (\n    <Stack hasGutter>\n      <Flex>\n        <FlexItem grow={{ default: 'grow' }}>\n          <ActionList>\n            {props.onBrowse && (\n              <ActionListItem>\n                <Button\n                  id=\"browse\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    setOpen(false);\n                    props.onBrowse?.();\n                  }}\n                >\n                  {t('Browse')}\n                </Button>\n              </ActionListItem>\n            )}\n            {!allLoaded && (\n              <ActionListItem>\n                <Button\n                  id=\"load-more\"\n                  isLoading={loading}\n                  onClick={onLoadMore}\n                  isDisabled={loading}\n                >\n                  {loading ? t('Loading...') : t('Load more')}\n                </Button>\n              </ActionListItem>\n            )}\n          </ActionList>\n        </FlexItem>\n        {!allLoaded && total !== 0 && (\n          <FlexItem>\n            {t('Loaded {{count}} of {{total}}', {\n              count: options?.length ?? 0,\n              total: total,\n            })}\n          </FlexItem>\n        )}\n      </Flex>\n      {props.footer}\n    </Stack>\n  );\n\n  if (loadingError) {\n    return (\n      <ButtonFullWidth\n        id={props.id}\n        variant=\"secondary\"\n        isDanger\n        icon={<SyncAltIcon />}\n        iconPosition=\"right\"\n        onClick={onReset}\n      >\n        {typeof props.queryErrorText === 'function'\n          ? props.queryErrorText(loadingError)\n          : props.queryErrorText ?? t('Error loading options')}\n      </ButtonFullWidth>\n    );\n  }\n\n  return (\n    <PageMultiSelect\n      id={props.id}\n      icon={props.icon}\n      placeholder={props.placeholder}\n      options={options ?? []}\n      values={props.values}\n      onSelect={props.onSelect}\n      variant={props.variant}\n      footer={footer}\n      open={open}\n      setOpen={setOpen}\n      searchValue={searchValue}\n      setSearchValue={setSearch}\n      isLoading={loading}\n      disableClearSelection={props.disableClearSelection}\n      disableClearChips={props.disableClearChips}\n      queryLabel={props.queryLabel}\n      compareOptionValues={props.compareOptionValues}\n    />\n  );\n}\n\nconst ButtonFullWidth = styled(Button)`\n  width: 100%;\n  text-align: left;\n`;\n","import {\n  Bullseye,\n  Button,\n  Divider,\n  Flex,\n  Icon,\n  MenuFooter,\n  MenuSearch,\n  MenuSearchInput,\n  MenuToggle,\n  MenuToggleElement,\n  SearchInput,\n  Select,\n  SelectGroup,\n  SelectList,\n  SelectOption,\n  Spinner,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { TimesIcon } from '@patternfly/react-icons';\nimport {\n  ReactNode,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\nimport { Scrollable } from '../components/Scrollable';\nimport { useOverridableState } from '../components/useOverridableState';\nimport { getID } from '../hooks/useID';\nimport { PageSelectOption } from './PageSelectOption';\n\nexport interface PageSingleSelectProps<ValueT> {\n  /** The ID of the select component. */\n  id?: string;\n\n  /** The icon to show in the select. */\n  icon?: ReactNode;\n\n  /** The placeholder to show when no value is selected. */\n  placeholder: ReactNode;\n\n  /** The selected value. */\n  value: ValueT | undefined | null;\n\n  /** The function to set the selected value. */\n  onSelect: (value: ValueT | null) => void;\n\n  /** The options to select from. */\n  options: PageSelectOption<ValueT>[];\n\n  /** The footer to show at the bottom of the dropdown. */\n  footer?: ReactNode;\n\n  /**\n   * Whether the select required an option to be selected.\n   *\n   * If true, the select will autoselect the first option,\n   * else the select will contain a clear button.\n   */\n  isRequired?: boolean;\n\n  /** Indicates if the select is disabled */\n  isDisabled?: string;\n\n  /**\n   * Indicates if the select is open.\n   * Handled by the component if not provided.\n   */\n  open?: boolean;\n\n  /**\n   * The function to set the open state.\n   * Handled by the component if not provided.\n   */\n  setOpen?: (open: boolean) => void;\n\n  /**\n   * The search value to filter the options.\n   * Handled by the component if not provided.\n   */\n  searchValue?: string;\n\n  /**\n   * The function to set the search value.\n   * Handled by the component if not provided.\n   */\n  setSearchValue?: (searchValue: string) => void;\n\n  /**\n   * Indicates if the select is loading.\n   * This is a helper to show a loading spinner in the dropdown.\n   * Used by `PageAsyncSingleSelect`.\n   */\n  isLoading?: boolean;\n\n  /**\n   * Function to load the label for a selected value.\n   * This is used when the selected value option is not present in the options.\n   * Used by `PageAsyncSingleSelect`.\n   */\n  queryLabel?: (value: ValueT) => ReactNode;\n\n  toggle?: (toggleRef: React.Ref<MenuToggleElement>) => ReactNode;\n\n  disableAutoSelect?: boolean;\n\n  disableSortOptions?: boolean;\n}\n\n/**\n * Select dropdown component for single selection of options.\n *\n * @param props The props of the component. See `PageSingleSelectProps`.\n *\n * This is a wrapper over PatternFly's `Select` component,\n * simplifying the API and adding some features:\n * - `value`, `onSelect`, and `options` are typed.\n * - `options` can be an array of strings, numbers or objects with `label` and `value` properties.\n *\n * This component also adds a search input and footer to the dropdown.\n *\n * Typeahead is supported by the component opening and searching when the user types.\n *\n * Used by:\n * - `PageAsyncSingleSelect`\n * - `PageFormSingleSelect`\n * - `PageFormAsyncSingleSelect` via PageAsyncSingleSelect\n * - `IFilterSingleSelect`\n * - `IFilterAsyncSingleSelect` via PageAsyncSingleSelect\n *\n * @example\n * return (\n *   <PageSingleSelect\n *     placeholder=\"Select option\"\n *     value={value}\n *     onSelect={setValue}\n *     options={[\n *       { label: 'Option 1', value: 1 },\n *       { label: 'Option 2', value: 2 }\n *     ]}\n *   />\n * )\n */\nexport function PageSingleSelect<\n  /** The type of the value of the select and of the options values. */\n  ValueT,\n>(props: PageSingleSelectProps<ValueT>) {\n  const { t } = useTranslation();\n  const { id, icon, value, onSelect, options, placeholder, queryLabel } = props;\n\n  const [open, setOpen] = useOverridableState(props.open ?? false, props.setOpen);\n  useEffect(() => {\n    if (open) {\n      setTimeout(() => searchRef.current?.focus(), 1);\n    }\n  }, [open]);\n\n  const [searchValue, setSearchValue] = useOverridableState(\n    props.searchValue ?? '',\n    props.setSearchValue\n  );\n\n  const selectListRef = useRef<HTMLDivElement>(null);\n\n  const selectedOption = useMemo(\n    () => options.find((option) => value === option.value),\n    [options, value]\n  );\n\n  const selectedLabel = useMemo(() => {\n    let selectedLabel: ReactNode = selectedOption?.label;\n    if (!selectedLabel && value !== undefined && value !== '' && value !== null) {\n      selectedLabel = queryLabel?.(value);\n    }\n    return selectedLabel;\n  }, [queryLabel, selectedOption?.label, value]);\n\n  const Toggle = (toggleRef: React.Ref<MenuToggleElement>) => (\n    <Tooltip content={props.isDisabled} trigger={props.isDisabled ? undefined : 'manual'}>\n      <Flex flexWrap={{ default: 'nowrap' }}>\n        <MenuToggle\n          id={id}\n          data-cy={id}\n          ref={toggleRef}\n          icon={icon ?? selectedOption?.icon}\n          onClick={() => setOpen(!open)}\n          isExpanded={open}\n          isDisabled={!!props.isDisabled}\n          style={{\n            // add style to allow for tooltip to show on disabled\n            pointerEvents: props.isDisabled ? 'unset' : undefined,\n            cursor: props.isDisabled ? 'not-allowed' : undefined,\n          }}\n          onKeyDown={(event) => {\n            switch (event.key) {\n              case 'Tab':\n              case 'Shift':\n                break;\n              default:\n                event.preventDefault();\n                if (event.key.length === 1) {\n                  setSearchValue(event.key);\n                }\n                setOpen(true);\n                setTimeout(() => {\n                  if (searchRef.current) {\n                    if (event.key.length === 1) {\n                      searchRef.current.value = event.key + searchRef.current.value;\n                    }\n                  }\n                }, 1);\n                break;\n            }\n          }}\n          isFullWidth\n        >\n          {selectedLabel ? selectedLabel : <span style={{ opacity: 0.7 }}>{placeholder}</span>}\n        </MenuToggle>\n        {!props.isRequired && selectedLabel && (\n          <Button\n            variant=\"control\"\n            data-cy=\"reset\"\n            onClick={() => {\n              setOpen(false);\n              onSelect(null);\n              if (toggleRef !== null && 'current' in toggleRef) {\n                toggleRef.current?.focus();\n              }\n            }}\n          >\n            <Icon size=\"md\" style={{ opacity: 0.7 }}>\n              <TimesIcon aria-hidden style={{ padding: 0, margin: 0 }} />\n            </Icon>\n          </Button>\n        )}\n      </Flex>\n    </Tooltip>\n  );\n\n  const onSelectHandler = useCallback(\n    (_: unknown, itemId: string | number | undefined) => {\n      const newSelectedOption: PageSelectOption<ValueT> | undefined = options.find((option) => {\n        if (option.key !== undefined) return option.key === itemId;\n        else return option.label === itemId;\n      });\n      if (newSelectedOption) {\n        onSelect(newSelectedOption.value);\n        setOpen(false);\n      }\n    },\n    [onSelect, options, setOpen]\n  );\n\n  const searchRef = useRef<HTMLInputElement>(null);\n  useEffect(() => {\n    if (!open) {\n      setSearchValue('');\n    }\n  }, [open, setSearchValue]);\n\n  useEffect(() => {\n    if (!props.disableAutoSelect && props.isRequired && !selectedOption && options.length === 1) {\n      onSelect(options[0].value);\n    }\n  }, [onSelect, options, props.disableAutoSelect, props.isRequired, selectedOption]);\n\n  const visibleOptions = useMemo(() => {\n    let visibleOptions = options;\n    if (!props.setSearchValue) {\n      visibleOptions = visibleOptions.filter((option) => {\n        if (searchValue === '') return true;\n        else return option.label.toLowerCase().includes(searchValue.toLowerCase());\n      });\n    }\n    if (!props.disableSortOptions) {\n      visibleOptions = visibleOptions.sort((a, b) => {\n        const lhs = a.label.toLowerCase();\n        const rhs = b.label.toLowerCase();\n        if (lhs < rhs) return -1;\n        if (lhs > rhs) return 1;\n        return 0;\n      });\n    }\n    return visibleOptions;\n  }, [options, props.disableSortOptions, props.setSearchValue, searchValue]);\n\n  const groups = useMemo(() => {\n    const hasGroups = options.some((option) => !!option.group);\n    if (hasGroups) {\n      const groups: Record<string, PageSelectOption<ValueT>[]> = {};\n      for (const option of visibleOptions) {\n        const group = option.group ?? '';\n        if (!groups[group]) groups[group] = [];\n        groups[group].push(option);\n      }\n      return groups;\n    }\n  }, [options, visibleOptions]);\n\n  return (\n    <PageSingleSelectContext.Provider value={{ open, setOpen }}>\n      <Select\n        id={`${id}-select`}\n        selected={selectedOption}\n        onSelect={onSelectHandler}\n        isOpen={open}\n        onOpenChange={setOpen}\n        toggle={props.toggle ?? Toggle}\n        popperProps={{ appendTo: () => document.body, preventOverflow: true, enableFlip: true }}\n        shouldFocusToggleOnSelect\n        innerRef={selectListRef}\n      >\n        <MenuSearch>\n          <MenuSearchInput data-cy=\"search-input\">\n            <SearchInput\n              id={`${id}-search`}\n              ref={searchRef}\n              value={searchValue}\n              onChange={(_, value: string) => setSearchValue(value)}\n              onClear={(event) => {\n                event.stopPropagation();\n                setSearchValue('');\n              }}\n              resultsCount={\n                visibleOptions.length !== options.length\n                  ? `${visibleOptions.length} / ${options.length}`\n                  : undefined\n              }\n              onKeyDown={(event) => {\n                switch (event.key) {\n                  case 'ArrowDown':\n                  case 'Tab': {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    const firstElement = selectListRef?.current?.querySelector(\n                      'li button:not(:disabled),li input:not(:disabled)'\n                    );\n                    firstElement && (firstElement as HTMLElement).focus();\n                    break;\n                  }\n                }\n              }}\n            />\n          </MenuSearchInput>\n        </MenuSearch>\n        <Divider />\n        {visibleOptions.length === 0 ? (\n          <>\n            {props.isLoading ? (\n              <Bullseye style={{ padding: 16 }}>\n                <Spinner size=\"lg\" />\n              </Bullseye>\n            ) : (\n              <SelectOption isDisabled key=\"no result\">\n                {t('No results found')}\n              </SelectOption>\n            )}\n          </>\n        ) : (\n          <ScrollableStyled>\n            {groups ? (\n              <>\n                {Object.keys(groups).map((groupName) => (\n                  <SelectGroup label={groupName} key={groupName}>\n                    <PageSingleSelectList searchRef={searchRef} options={groups[groupName]} />\n                  </SelectGroup>\n                ))}\n              </>\n            ) : (\n              <PageSingleSelectList searchRef={searchRef} options={visibleOptions} />\n            )}\n          </ScrollableStyled>\n        )}\n        {props.footer && <MenuFooter>{props.footer}</MenuFooter>}\n      </Select>\n    </PageSingleSelectContext.Provider>\n  );\n}\n\nexport function PageSingleSelectList(props: {\n  searchRef: React.RefObject<HTMLInputElement>;\n  options: PageSelectOption<unknown>[];\n}) {\n  return (\n    <SelectList\n      onKeyDown={(event) => {\n        switch (event.key) {\n          case 'Tab':\n            event.preventDefault();\n            event.stopPropagation();\n            props.searchRef.current?.focus();\n            break;\n        }\n      }}\n    >\n      {props.options.map((option) => {\n        const optionId = getID(option);\n        return (\n          <SelectOption\n            id={optionId}\n            icon={option.icon}\n            key={option.key !== undefined ? option.key : option.label}\n            value={option.key !== undefined ? option.key : option.label}\n            description={option.description}\n            data-cy={optionId}\n          >\n            {option.label}\n          </SelectOption>\n        );\n      })}\n    </SelectList>\n  );\n}\n\nconst ScrollableStyled = styled(Scrollable)`\n  max-height: 40vh;\n`;\n\nexport const PageSingleSelectContext = createContext<{\n  open: boolean;\n  setOpen: (open: boolean) => void;\n}>({\n  open: false,\n  setOpen: () => {},\n});\n\nexport function usePageSingleSelectContext() {\n  return useContext(PageSingleSelectContext);\n}\n","import { ActionList, ActionListItem, Button, Flex, FlexItem, Stack } from '@patternfly/react-core';\nimport { SyncAltIcon } from '@patternfly/react-icons';\nimport debounce from 'debounce';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\nimport { SetRequired } from 'type-fest';\nimport { PageAsyncQueryErrorText, PageAsyncSelectOptionsFn } from './PageAsyncSelectOptions';\nimport { PageSelectOption } from './PageSelectOption';\nimport { PageSingleSelect, PageSingleSelectProps } from './PageSingleSelect';\n\nexport interface PageAsyncSingleSelectProps<ValueT>\n  extends SetRequired<Omit<PageSingleSelectProps<ValueT>, 'options'>, 'queryLabel'> {\n  /** The function to query for options. */\n  queryOptions: PageAsyncSelectOptionsFn<ValueT>;\n\n  /** The placeholder to show while querying. */\n  queryPlaceholder?: string;\n\n  /** The text to show if the query fails. */\n  queryErrorText?: PageAsyncQueryErrorText;\n\n  onBrowse?: () => void;\n\n  writeInOption?: (query: string) => PageSelectOption<ValueT>;\n}\n\n/**\n * `PageAsyncSingleSelect` wraps the `PageSingleSelect` component to support asynchronously loading options from an async source such as an API.\n *\n * @param props The props for the component. See `PageSingleSelectProps` for details.\n *\n * @example\n * return (\n *   <PageAsyncSingleSelect\n *     placeholder=\"Select option\"\n *     value={value}\n *     onSelect={setValue}\n *     queryOptions={async (options) => ({\n *       total: 1,\n *       options: [{ label: 'Option 1', value: 1 }]\n *     })}\n *   />\n * )\n */\nexport function PageAsyncSingleSelect<\n  /** The type of the value of the select and of the options values. */\n  ValueT,\n>(props: PageAsyncSingleSelectProps<ValueT>) {\n  const { t } = useTranslation();\n\n  const { queryOptions, writeInOption } = props;\n  const [loading, setLoading] = useState(false);\n  const [allLoaded, setAllLoaded] = useState(false);\n  const [loadingError, setLoadingError] = useState<Error>();\n  const [total, setTotal] = useState(0);\n  const [options, setOptions] = useState<PageSelectOption<ValueT>[] | null>();\n  const [open, setOpen] = useState(false);\n\n  const nextRef = useRef<number | string | undefined>();\n  const [searchValue, setSearchValue] = useState<string>('');\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const setSearch = useCallback(\n    debounce((search: string) => setSearchValue(search), 200),\n    []\n  );\n\n  const onSelect = useRef(props.onSelect).current;\n\n  const activeAbortController = useRef<AbortController | null>(null);\n  const queryHandler = useCallback(() => {\n    if (activeAbortController.current) {\n      activeAbortController.current.abort();\n    }\n    const abortController = new AbortController();\n    activeAbortController.current = abortController;\n    setLoading(() => {\n      setAllLoaded(false);\n      setLoadingError(undefined);\n      setOptions((prevOptions) => {\n        if (prevOptions) {\n          return prevOptions;\n        } else {\n          return undefined;\n        }\n      });\n      void queryOptions({\n        next: nextRef.current!,\n        signal: abortController.signal,\n        search: searchValue,\n      })\n        .then((result) => {\n          if (abortController.signal.aborted) return;\n          nextRef.current = result.next;\n          if (!result.remaining) {\n            setAllLoaded(true);\n          }\n          setOptions((prevOptions) => {\n            let newOptions: PageSelectOption<ValueT>[] = [\n              ...(prevOptions ?? []),\n              ...result.options,\n            ];\n            const uniqueValues = new Set<ValueT>();\n            newOptions = newOptions.filter((option) => {\n              if (uniqueValues.has(option.value)) return false;\n              uniqueValues.add(option.value);\n              return true;\n            });\n            newOptions.sort((a, b) => {\n              const lhs = a.label.toLowerCase();\n              const rhs = b.label.toLowerCase();\n              if (lhs < rhs) return -1;\n              if (lhs > rhs) return 1;\n              return 0;\n            });\n            if (!searchValue && result.remaining === 0 && newOptions.length === 1) {\n              onSelect(newOptions[0].value);\n            }\n            setTotal(result.remaining + newOptions.length);\n            if (writeInOption && result.remaining + newOptions.length === 0) {\n              newOptions.push(writeInOption(searchValue));\n            }\n            return newOptions;\n          });\n        })\n        .catch((err) => {\n          if (abortController.signal.aborted) return;\n          setLoadingError(err instanceof Error ? err : new Error(t('Unknown error')));\n        })\n        .finally(() => {\n          if (abortController.signal.aborted) return;\n          setLoading(false);\n        });\n      return true;\n    });\n    return () => abortController.abort();\n  }, [onSelect, queryOptions, searchValue, t, writeInOption]);\n\n  const onLoadMore = useCallback(\n    (e: React.MouseEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      queryHandler();\n    },\n    [queryHandler]\n  );\n\n  const onReset = useCallback(\n    (e: React.MouseEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      setTotal(0);\n      setOptions([]);\n      setOpen(true);\n      nextRef.current = undefined;\n      queryHandler();\n    },\n    [queryHandler]\n  );\n\n  useEffect(() => {\n    if (open) {\n      setTotal(0);\n      setOptions([]);\n      nextRef.current = undefined;\n      queryHandler();\n    }\n  }, [open, queryHandler]);\n\n  useEffect(() => {\n    if (loadingError) {\n      setOpen(false);\n    }\n  }, [loadingError]);\n\n  const footer = (\n    <Stack hasGutter>\n      <Flex>\n        <FlexItem grow={{ default: 'grow' }}>\n          <ActionList>\n            {!allLoaded && (\n              <ActionListItem>\n                <Button\n                  id=\"load-more\"\n                  isLoading={loading}\n                  onClick={onLoadMore}\n                  isDisabled={loading}\n                >\n                  {loading ? t('Loading...') : t('Load more')}\n                </Button>\n              </ActionListItem>\n            )}\n            {props.onBrowse && (\n              <ActionListItem>\n                <Button\n                  id=\"browse\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    setOpen(false);\n                    props.onBrowse?.();\n                  }}\n                  variant=\"secondary\"\n                >\n                  {t('Browse')}\n                </Button>\n              </ActionListItem>\n            )}\n          </ActionList>\n        </FlexItem>\n        {!allLoaded && total !== 0 && (\n          <FlexItem>\n            {t('Loaded {{count}} of {{total}}', {\n              count: options?.length ?? 0,\n              total: total,\n            })}\n          </FlexItem>\n        )}\n      </Flex>\n      {props.footer}\n    </Stack>\n  );\n\n  return (\n    <PageSingleSelect\n      id={props.id}\n      icon={props.icon}\n      placeholder={props.placeholder}\n      options={options ?? []}\n      value={props.value}\n      onSelect={props.onSelect}\n      isDisabled={props.isDisabled}\n      footer={footer}\n      open={open}\n      setOpen={setOpen}\n      searchValue={searchValue}\n      setSearchValue={setSearch}\n      isLoading={loading}\n      queryLabel={props.queryLabel}\n      disableAutoSelect\n      isRequired={props.isRequired}\n      toggle={\n        loadingError\n          ? (toggleRef) => (\n              <ButtonFullWidth\n                ref={toggleRef}\n                id={props.id}\n                variant=\"secondary\"\n                isDanger\n                icon={<SyncAltIcon />}\n                onClick={onReset}\n              >\n                {typeof props.queryErrorText === 'function'\n                  ? props.queryErrorText(loadingError)\n                  : props.queryErrorText ?? t('Error loading options')}\n              </ButtonFullWidth>\n            )\n          : undefined\n      }\n    />\n  );\n}\n\nconst ButtonFullWidth = styled(Button)`\n  width: 100%;\n  text-align: left;\n`;\n","import { Button, DatePicker, ToolbarItem, isValidDate } from '@patternfly/react-core';\nimport { TimesCircleIcon } from '@patternfly/react-icons';\nimport { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageSingleSelect } from '../../PageInputs/PageSingleSelect';\nimport { ToolbarFilterType } from '../PageToolbarFilter';\nimport { ToolbarFilterCommon } from './ToolbarFilterCommon';\n\nexport interface IToolbarDateRangeFilter extends ToolbarFilterCommon {\n  type: ToolbarFilterType.DateRange;\n  options: IToolbarDateFilterOption[];\n  isRequired?: boolean;\n  defaultValue?: string;\n  isPinned?: true;\n}\n\ninterface IToolbarDateFilterOption {\n  label: string;\n  description?: string;\n  value: string;\n  isCustom?: boolean;\n}\n\nexport enum DateRangeFilterPresets {\n  LastHour = 'lastHour',\n  Last24Hours = 'last24hours',\n  LastWeek = 'last7days',\n  LastMonth = 'last30days',\n}\n\nexport interface IToolbarDateRangeFilterProps {\n  id?: string;\n  label?: string;\n  placeholder: string;\n  filterValues?: string[] | undefined;\n  setFilterValues: (setter: (prevValues: string[] | undefined) => string[]) => void;\n  options: IToolbarDateFilterOption[];\n  isRequired?: boolean;\n  defaultValue?: string;\n}\n\nexport function ToolbarDateRangeFilter(props: IToolbarDateRangeFilterProps) {\n  const { filterValues, setFilterValues, placeholder, isRequired, defaultValue } = props;\n\n  const selectedValue = filterValues && filterValues.length > 0 ? filterValues[0] : undefined;\n  const selectedOption = props.options.find((option) => option.value === selectedValue);\n\n  if (isRequired && !selectedOption) {\n    setFilterValues(() => [defaultValue ?? props.options[0].value]);\n  }\n\n  function onSelectChange(value: string | null) {\n    if (value === null) return;\n    const option = props.options.find((option) => option.value === value);\n    if (option) {\n      setFilterValues(() => [value]);\n    }\n  }\n\n  const [from, setFrom] = useState<string | undefined>(() => {\n    if (filterValues && filterValues.length > 1) return filterValues[1];\n    return undefined;\n  });\n\n  const [to, setTo] = useState<string | undefined>(() => {\n    if (filterValues && filterValues.length > 2) return filterValues[2];\n    return undefined;\n  });\n\n  useEffect(() => {\n    if (selectedOption && selectedOption.isCustom) {\n      const newValues = [selectedOption.value];\n      if (from) {\n        newValues.push(from);\n        if (to) {\n          newValues.push(to);\n        }\n      }\n      setFilterValues(() => newValues);\n    }\n  }, [selectedOption, from, to, setFilterValues]);\n\n  return (\n    <ToolbarItem>\n      <PageSingleSelect\n        value={selectedOption?.value ?? ''}\n        onSelect={onSelectChange}\n        options={props.options}\n        placeholder={placeholder}\n        disableSortOptions\n      />\n      {selectedOption && selectedOption.isCustom && (\n        <DateRange to={to} setTo={setTo} from={from} setFrom={setFrom} />\n      )}\n    </ToolbarItem>\n  );\n}\n\nexport function DateRange(props: {\n  to?: string;\n  setTo: (value?: string) => void;\n  from?: string;\n  setFrom: (value?: string) => void;\n}) {\n  const { to, setTo, from, setFrom } = props;\n  const { t } = useTranslation();\n\n  const onFromChange = (_event: unknown, from: string) => {\n    setFrom(from);\n  };\n\n  const onToChange = (_event: unknown, to: string) => {\n    setTo(to);\n  };\n\n  const fromDate = from ? new Date(from) : undefined;\n\n  const toValidator = (date: Date) =>\n    fromDate\n      ? isValidDate(fromDate) && date >= fromDate\n        ? ''\n        : t('The \"to\" date must be after the \"from\" date')\n      : '';\n\n  return (\n    <>\n      <DatePicker\n        value={from}\n        onChange={onFromChange}\n        aria-label=\"Start date\"\n        placeholder=\"YYYY-MM-DD\"\n        data-cy=\"toolbar-date-picker\"\n      />\n      <div style={{ alignSelf: 'baseline', padding: 6 }}>{t('to')}</div>\n      <DatePicker\n        value={to}\n        onChange={onToChange}\n        isDisabled={!fromDate || !isValidDate(fromDate)}\n        rangeStart={fromDate}\n        validators={[toValidator]}\n        aria-label=\"End date\"\n        placeholder={t('now')}\n        invalidFormatText={t('Invalid date format')}\n      />\n      {to !== undefined && (\n        <Button\n          variant=\"control\"\n          style={{ alignSelf: 'flex-start' }}\n          onClick={() => setTo(undefined)}\n        >\n          <TimesCircleIcon />\n        </Button>\n      )}\n    </>\n  );\n}\n","import {\n  Button,\n  InputGroup,\n  InputGroupItem,\n  TextInputGroup,\n  TextInputGroupMain,\n  TextInputGroupUtilities,\n} from '@patternfly/react-core';\nimport { ArrowRightIcon, TimesIcon } from '@patternfly/react-icons';\nimport debounce from 'debounce';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ToolbarFilterType } from '../PageToolbarFilter';\nimport { ToolbarFilterCommon } from './ToolbarFilterCommon';\n\n/** Filter for filtering by user text input with single value. */\nexport interface IToolbarSingleTextFilter extends ToolbarFilterCommon {\n  type: ToolbarFilterType.SingleText;\n\n  /** The placeholder text for the filter, indicating what kind of filter caprison it uses. */\n  comparison: 'contains' | 'startsWith' | 'endsWith' | 'equals';\n}\n\n/** Filter for filtering by user text input with multiple values. */\nexport interface IToolbarMultiTextFilter extends ToolbarFilterCommon {\n  /** Filter for filtering by user text input. */\n  type: ToolbarFilterType.MultiText;\n\n  /** The placeholder text for the filter, indicating what kind of filter caprison it uses. */\n  comparison: 'contains' | 'startsWith' | 'endsWith' | 'equals';\n}\n\nexport function ToolbarTextMultiFilter(props: {\n  id?: string;\n  addFilter: (value: string) => void;\n  placeholder?: string;\n\n  /** The placeholder text for the filter, indicating what kind of filter caprison it uses. */\n  comparison: 'contains' | 'startsWith' | 'endsWith' | 'equals';\n}) {\n  const { t } = useTranslation();\n  const [value, setValue] = useState('');\n  let placeholder = props.placeholder;\n  if (!placeholder) {\n    switch (props.comparison) {\n      case 'contains':\n        placeholder = t('contains');\n        break;\n      case 'startsWith':\n        placeholder = t('starts with');\n        break;\n      case 'endsWith':\n        placeholder = t('ends with');\n        break;\n      case 'equals':\n        placeholder = t('equals');\n        break;\n    }\n  }\n\n  return (\n    <InputGroup>\n      <InputGroupItem>\n        <TextInputGroup data-cy={'text-input'} style={{ minWidth: 220 }}>\n          <TextInputGroupMain\n            id={props.id}\n            value={value}\n            onChange={(e, v) => {\n              if (typeof e === 'string') setValue(e);\n              else setValue(v);\n            }}\n            onKeyUp={(event) => {\n              if (value && event.key === 'Enter') {\n                props.addFilter(value);\n                setValue('');\n              }\n            }}\n            placeholder={placeholder}\n          />\n          {value !== '' && (\n            <TextInputGroupUtilities>\n              <Button\n                variant=\"plain\"\n                aria-label=\"clear filter\"\n                onClick={() => setValue('')}\n                style={{ opacity: value ? undefined : 0 }}\n                tabIndex={-1}\n              >\n                <TimesIcon />\n              </Button>\n            </TextInputGroupUtilities>\n          )}\n        </TextInputGroup>\n      </InputGroupItem>\n\n      <InputGroupItem>\n        <Button\n          variant={value ? 'primary' : 'control'}\n          data-cy=\"apply-filter\"\n          aria-label=\"apply filter\"\n          onClick={() => {\n            props.addFilter(value);\n            setValue('');\n          }}\n          tabIndex={-1}\n          isDisabled={!value}\n        >\n          <ArrowRightIcon />\n        </Button>\n      </InputGroupItem>\n    </InputGroup>\n  );\n}\n\nexport function ToolbarSingleTextFilter(props: {\n  id?: string;\n  placeholder?: string;\n\n  /** The placeholder text for the filter, indicating what kind of filter caprison it uses. */\n  comparison: 'contains' | 'startsWith' | 'endsWith' | 'equals';\n  setValue: (value: string) => void;\n  value: string;\n  hasKey: boolean;\n}) {\n  const { t } = useTranslation();\n  const [value, setValue] = useState(props.value ?? '');\n  let placeholder = props.placeholder ?? '';\n  if (!placeholder) {\n    switch (props.comparison) {\n      case 'contains':\n        placeholder = t('contains');\n        break;\n      case 'startsWith':\n        placeholder = t('starts with');\n        break;\n      case 'endsWith':\n        placeholder = t('ends with');\n        break;\n      case 'equals':\n        placeholder = t('equals');\n        break;\n    }\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const setValueDebounced = useCallback(\n    debounce((value: string) => props.setValue(value), 200),\n    []\n  );\n\n  useEffect(() => {\n    if (!props.hasKey) {\n      setValue('');\n    }\n  }, [props.hasKey]);\n\n  return (\n    <InputGroup>\n      <InputGroupItem>\n        <TextInputGroup data-cy={'text-input'} style={{ minWidth: 220 }}>\n          <TextInputGroupMain\n            id={props.id}\n            value={value}\n            onChange={(e, v) => {\n              if (typeof e === 'string') {\n                setValue(e);\n                setValueDebounced(e);\n              } else {\n                setValue(v);\n                setValueDebounced(v);\n              }\n            }}\n            placeholder={placeholder}\n          />\n          {value !== '' && (\n            <TextInputGroupUtilities>\n              <Button\n                variant=\"plain\"\n                aria-label=\"clear filter\"\n                onClick={() => {\n                  setValue('');\n                  props.setValue('');\n                }}\n                style={{ opacity: value ? undefined : 0 }}\n                tabIndex={-1}\n              >\n                <TimesIcon />\n              </Button>\n            </TextInputGroupUtilities>\n          )}\n        </TextInputGroup>\n      </InputGroupItem>\n    </InputGroup>\n  );\n}\n","import { ToolbarToggleGroup, ToolbarToggleGroupProps } from '@patternfly/react-core';\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport { SetRequired } from 'type-fest';\n\nexport function PageToolbarToggleGroup(props: SetRequired<ToolbarToggleGroupProps, 'id'>) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const onToggle = (_event: React.MouseEvent) => {\n    setIsExpanded(!isExpanded);\n  };\n  const { activeGroup, setActiveGroup } = useContext(PageToolbarToggleGroupContext);\n\n  useEffect(() => {\n    if (isExpanded) {\n      setActiveGroup(props.id);\n    }\n  }, [isExpanded, setActiveGroup, props.id]);\n\n  useEffect(() => {\n    if (activeGroup !== props.id) {\n      setIsExpanded(false);\n    }\n  }, [activeGroup, props.id]);\n\n  return <ToolbarToggleGroup {...props} isExpanded={isExpanded} onToggle={onToggle} />;\n}\n\ninterface PageToolbarToggleGroupContextProps {\n  activeGroup: string;\n  setActiveGroup: (group: string) => void;\n}\n\n// context that will clost other open groups when a new one is opened\n// Path: framework/PageToolbar/PageToolbarToggleGroup.tsx\nexport const PageToolbarToggleGroupContext = createContext<PageToolbarToggleGroupContextProps>({\n  activeGroup: '',\n  setActiveGroup: () => {},\n});\n","import { Button, ToolbarFilter, ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport { Dispatch, SetStateAction, useCallback, useState } from 'react';\nimport { PageAsyncMultiSelect } from '../PageInputs/PageAsyncMultiSelect';\nimport { PageAsyncSingleSelect } from '../PageInputs/PageAsyncSingleSelect';\nimport { PageMultiSelect } from '../PageInputs/PageMultiSelect';\nimport { PageSingleSelect, PageSingleSelectContext } from '../PageInputs/PageSingleSelect';\nimport { useBreakpoint } from '../components/useBreakPoint';\nimport { useFrameworkTranslations } from '../useFrameworkTranslations';\nimport { IToolbarAsyncMultiSelectFilter } from './PageToolbarFilters/ToolbarAsyncMultiSelectFilter';\nimport { IToolbarAsyncSingleSelectFilter } from './PageToolbarFilters/ToolbarAsyncSingleSelectFilter';\nimport {\n  IToolbarDateRangeFilter,\n  ToolbarDateRangeFilter,\n} from './PageToolbarFilters/ToolbarDateRangeFilter';\nimport { IToolbarMultiSelectFilter } from './PageToolbarFilters/ToolbarMultiSelectFilter';\nimport { IToolbarSingleSelectFilter } from './PageToolbarFilters/ToolbarSingleSelectFilter';\nimport {\n  IToolbarMultiTextFilter,\n  IToolbarSingleTextFilter,\n  ToolbarSingleTextFilter,\n  ToolbarTextMultiFilter,\n} from './PageToolbarFilters/ToolbarTextFilter';\nimport { PageToolbarToggleGroup } from './PageToolbarToggleGroup';\n\n/** Represents the types of filters that can be used in the toolbar */\nexport enum ToolbarFilterType {\n  SingleText,\n  MultiText,\n  SingleSelect,\n  MultiSelect,\n  DateRange,\n  AsyncSingleSelect,\n  AsyncMultiSelect,\n}\n\n/** An IToolbarFilter represents a filter that can be used in the toolbar */\nexport type IToolbarFilter =\n  | IToolbarSingleTextFilter\n  | IToolbarMultiTextFilter\n  | IToolbarDateRangeFilter\n  | IToolbarSingleSelectFilter\n  | IToolbarMultiSelectFilter\n  | IToolbarAsyncSingleSelectFilter\n  | IToolbarAsyncMultiSelectFilter;\n\n/** Represents the state of the toolbar filters. i.e. What is currently selected for filters. */\nexport type IFilterState = Record<string, string[] | undefined>;\n\n/** The props for the PageToolbarFilters component */\nexport type PageToolbarFiltersProps = {\n  toolbarFilters?: IToolbarFilter[];\n  filterState: IFilterState;\n  setFilterState: Dispatch<SetStateAction<IFilterState>>;\n\n  /**\n   * Limits the filters so that only one filter can be set to an OR operation.\n   *\n   * Example: AWX can either have an OR on type or status but not both.\n   * So once one has 2 selections, the other becomes a single select.\n   */\n  limitFiltersToOneOrOperation?: boolean;\n};\n\n/** A ToolbarItem that renders the toolbar filters passed in as props */\nfunction FiltersToolbarItem(props: PageToolbarFiltersProps) {\n  const { toolbarFilters, filterState, setFilterState } = props;\n\n  const [selectedFilterKey, setSeletedFilterKey] = useState<string | null>(() =>\n    toolbarFilters ? (toolbarFilters?.length > 0 ? toolbarFilters[0].key : '') : ''\n  );\n\n  const selectedFilter = toolbarFilters?.find((filter) => filter.key === selectedFilterKey);\n\n  if (!selectedFilter) return <></>;\n  if (!toolbarFilters) return <></>;\n  if (toolbarFilters.length === 0) return <></>;\n\n  let showLabel = toolbarFilters.length === 1;\n  if (toolbarFilters.length >= 1) {\n    if (\n      toolbarFilters[0].type === ToolbarFilterType.SingleSelect &&\n      toolbarFilters[0].isPinned &&\n      (filterState[toolbarFilters[0].key] === undefined ||\n        filterState[toolbarFilters[0].key]?.length === 0)\n    ) {\n      // Do not show the label if the pinned filter does not have a value\n      showLabel = false;\n    }\n  }\n\n  return (\n    <>\n      {toolbarFilters.length === 1 ? (\n        <ToolbarItem>\n          {showLabel && (\n            <div style={{ marginTop: 6, marginRight: 6, whiteSpace: 'nowrap' }}>\n              {toolbarFilters[0].label}\n            </div>\n          )}\n          <ToolbarFilterComponent\n            id=\"filter-input\"\n            filter={selectedFilter}\n            filterState={filterState}\n            setFilterState={setFilterState}\n            data-cy={selectedFilter}\n            limitFiltersToOneOrOperation={props.limitFiltersToOneOrOperation}\n          />\n        </ToolbarItem>\n      ) : (\n        <ToolbarItem>\n          <PageSingleSelect\n            id=\"filter\"\n            value={selectedFilterKey}\n            onSelect={setSeletedFilterKey}\n            icon={<FilterIcon />}\n            options={toolbarFilters.map((filter) => ({\n              label: filter.label,\n              value: filter.key,\n            }))}\n            placeholder=\"\"\n            data-cy={selectedFilter}\n            disableSortOptions\n            isRequired\n          />\n          <ToolbarFilterComponent\n            id=\"filter-input\"\n            filter={selectedFilter}\n            filterState={filterState}\n            setFilterState={setFilterState}\n            data-cy={selectedFilter}\n            limitFiltersToOneOrOperation={props.limitFiltersToOneOrOperation}\n          />\n        </ToolbarItem>\n      )}\n    </>\n  );\n}\n\n/** A ToolbarToggleGroup that renders the toolbar filters passed in as props */\nexport function PageToolbarFilters(props: PageToolbarFiltersProps) {\n  const { toolbarFilters, setFilterState, filterState } = props;\n\n  const [translations] = useFrameworkTranslations();\n\n  // When the screen is small, show the filter label in the expanded filter section\n  const showFilterLabel = !useBreakpoint('md');\n\n  if (!toolbarFilters) return <></>;\n  if (toolbarFilters.length === 0) return <></>;\n\n  // Grouped filters are filters that can be switched between using a filter selector\n  const groupedFilters = toolbarFilters.filter((filter) => {\n    return !filter.isPinned;\n  });\n\n  // Pinned filters are filters that are shown outside of the filter selector\n  const pinnedFilters = toolbarFilters.filter((filter) => {\n    return !!filter.isPinned;\n  });\n\n  return (\n    <PageToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"md\" id=\"filters\">\n      <ToolbarGroup variant=\"button-group\" style={{ flexWrap: 'wrap', gap: 8 }}>\n        {showFilterLabel && <ToolbarItem variant=\"label\">{translations.filter}</ToolbarItem>}\n        <FiltersToolbarItem\n          toolbarFilters={groupedFilters}\n          setFilterState={setFilterState}\n          filterState={filterState}\n          limitFiltersToOneOrOperation={props.limitFiltersToOneOrOperation}\n        />\n        {pinnedFilters?.map((filter) => (\n          <FiltersToolbarItem\n            key={filter.key}\n            toolbarFilters={[filter]}\n            setFilterState={setFilterState}\n            filterState={filterState}\n            limitFiltersToOneOrOperation={props.limitFiltersToOneOrOperation}\n          />\n        ))}\n\n        {toolbarFilters?.map((filter) => {\n          // Render the filter chips\n          const values = filterState?.[filter.key] || [];\n\n          // If the filter is pinned and is a single select filter, don't render the chip\n          // this is because the value of the single select filter is already shown in the filter component\n          if (filter.isPinned && filter.type === ToolbarFilterType.SingleSelect) return null;\n          if (filter.isPinned && filter.type === ToolbarFilterType.DateRange) return null;\n\n          return (\n            <ToolbarFilter\n              key={filter.label}\n              categoryName={filter.label}\n              chips={[\n                ...values.map((value) => {\n                  switch (filter.type) {\n                    case ToolbarFilterType.SingleSelect:\n                    case ToolbarFilterType.MultiSelect:\n                    case ToolbarFilterType.DateRange:\n                      return (\n                        filter.options?.find((o) => {\n                          return o.value === value;\n                        })?.label ?? value\n                      );\n                    case ToolbarFilterType.AsyncSingleSelect:\n                    case ToolbarFilterType.AsyncMultiSelect:\n                      return { key: value, node: filter.queryLabel(value) };\n                    default:\n                      return value;\n                  }\n                }),\n              ]}\n              deleteChip={(_group, value) => {\n                setFilterState?.((filters) => {\n                  const newState = { ...filters };\n                  value = typeof value === 'string' ? value : value.key;\n                  switch (filter.type) {\n                    case ToolbarFilterType.SingleSelect:\n                    case ToolbarFilterType.MultiSelect:\n                    case ToolbarFilterType.DateRange:\n                      // The value is a label, we need to get the real value from the option\n                      value = filter.options.find((o) => o.label === value)?.value ?? value;\n                      break;\n                  }\n                  let values = filters[filter.key];\n                  if (values) {\n                    values = values.filter((v) => v !== value);\n                    if (values.length === 0) {\n                      delete newState[filter.key];\n                    } else {\n                      newState[filter.key] = values;\n                    }\n                  }\n                  return newState;\n                });\n              }}\n              deleteChipGroup={() => {\n                setFilterState?.((filters) => {\n                  const newState = { ...filters };\n                  delete newState[filter.key];\n                  return newState;\n                });\n              }}\n              // We hide this item because this is only used for the filter chips\n              showToolbarItem={false}\n            >\n              <></>\n            </ToolbarFilter>\n          );\n        })}\n      </ToolbarGroup>\n    </PageToolbarToggleGroup>\n  );\n}\n\n/** The ToolbarFilter component takes in a IToolbarFilter and renders the proper subcomponent for that filter type. */\nfunction ToolbarFilterComponent(props: {\n  id?: string;\n  filter: IToolbarFilter;\n  filterState: IFilterState;\n  setFilterState: Dispatch<SetStateAction<IFilterState>>;\n  limitFiltersToOneOrOperation?: boolean;\n}): JSX.Element {\n  const { filter, filterState, setFilterState } = props;\n\n  const filterValues = filterState?.[filter.key];\n\n  const setFilterValues = useCallback(\n    (setter: (prevValues: string[] | undefined) => string[] | undefined) => {\n      setFilterState((filters) => {\n        const newFilters = { ...filters };\n        const filterValues = newFilters[filter.key] ?? [];\n        newFilters[filter.key] = setter(filterValues);\n        return newFilters;\n      });\n    },\n    [filter.key, setFilterState]\n  );\n\n  const addFilter = useCallback(\n    (value: string) => {\n      setFilterState((filters) => {\n        const newFilters = { ...filters };\n        const filterValues = newFilters[filter.key] ?? [];\n        newFilters[filter.key] = [...filterValues, value];\n        return newFilters;\n      });\n    },\n    [filter.key, setFilterState]\n  );\n\n  let isHasOrFilter = false;\n  if (filterState) {\n    for (const key in filterState) {\n      if (key === filter.key) continue;\n      const filterValues = filterState[key];\n      if (filterValues && filterValues?.length >= 2) {\n        isHasOrFilter = true;\n        break;\n      }\n    }\n  }\n\n  switch (filter.type) {\n    case ToolbarFilterType.SingleText:\n      return (\n        <ToolbarSingleTextFilter\n          key={filter.key}\n          id={props.id ?? filter.key}\n          placeholder={filter.placeholder}\n          comparison={filter.comparison}\n          setValue={(value) => setFilterValues(() => (value ? [value] : []))}\n          value={filterValues && filterValues?.length > 0 ? filterValues[0] : ''}\n          hasKey={!!filterState?.[filter.key]}\n        />\n      );\n\n    case ToolbarFilterType.MultiText:\n      if (isHasOrFilter && props.limitFiltersToOneOrOperation) {\n        return (\n          <ToolbarSingleTextFilter\n            key={filter.key}\n            id={props.id ?? filter.key}\n            placeholder={filter.placeholder}\n            comparison={filter.comparison}\n            setValue={(value) => setFilterValues(() => (value ? [value] : []))}\n            value={filterValues && filterValues?.length > 0 ? filterValues[0] : ''}\n            hasKey={!!filterState?.[filter.key]}\n          />\n        );\n      }\n      return (\n        <ToolbarTextMultiFilter\n          key={filter.key}\n          id={props.id ?? filter.key}\n          addFilter={addFilter}\n          placeholder={filter.placeholder}\n          comparison={filter.comparison}\n        />\n      );\n\n    case ToolbarFilterType.SingleSelect:\n      return (\n        <PageSingleSelect\n          key={filter.key}\n          id={props.id ?? filter.key}\n          placeholder={filter.placeholder}\n          value={filterValues && filterValues?.length > 0 ? filterValues[0] : ''}\n          onSelect={(item) => setFilterValues(() => [item!])}\n          options={filter.options}\n          isRequired={filter.isRequired || !filter.isPinned}\n          disableSortOptions={filter.disableSortOptions}\n        />\n      );\n\n    case ToolbarFilterType.AsyncSingleSelect:\n      return (\n        <PageAsyncSingleSelect<string>\n          key={filter.key}\n          id={props.id ?? filter.key}\n          value={filterValues && filterValues?.length > 0 ? filterValues[0] : ''}\n          onSelect={(item) => setFilterValues(() => [item!])}\n          placeholder={filter.placeholder || ''}\n          queryOptions={filter.queryOptions}\n          queryErrorText={filter.queryErrorText}\n          queryPlaceholder={filter.queryPlaceholder}\n          isRequired={filter.isRequired}\n          footer={\n            filter.openBrowse ? (\n              <PageSingleSelectContext.Consumer>\n                {(context) => (\n                  <Button\n                    variant=\"link\"\n                    onClick={() => {\n                      // close the menu before opening browse modal\n                      context.setOpen(false);\n                      filter.openBrowse?.(\n                        (selection) => setFilterValues(() => [selection]),\n                        filterValues && filterValues.length > 0 ? filterValues[0] : undefined\n                      );\n                    }}\n                  >\n                    Browse\n                  </Button>\n                )}\n              </PageSingleSelectContext.Consumer>\n            ) : undefined\n          }\n          queryLabel={filter.queryLabel}\n          disableSortOptions={filter.disableSortOptions}\n        />\n      );\n\n    case ToolbarFilterType.AsyncMultiSelect:\n      if (isHasOrFilter && props.limitFiltersToOneOrOperation) {\n        return (\n          <PageAsyncSingleSelect<string>\n            key={filter.key}\n            id={props.id ?? filter.key}\n            value={filterValues && filterValues?.length > 0 ? filterValues[0] : ''}\n            onSelect={(item) => setFilterValues(() => [item!])}\n            placeholder={filter.placeholder || ''}\n            queryOptions={filter.queryOptions}\n            queryErrorText={filter.queryErrorText}\n            queryPlaceholder={filter.queryPlaceholder}\n            isRequired={filter.isRequired}\n            footer={\n              filter.openBrowse ? (\n                <Button\n                  variant=\"link\"\n                  onClick={() => {\n                    filter.openBrowse?.(\n                      (selection) => setFilterValues(() => [selection.length ? selection[0] : '']),\n                      filterValues && filterValues.length > 0 ? filterValues : undefined\n                    );\n                  }}\n                >\n                  Browse\n                </Button>\n              ) : undefined\n            }\n            queryLabel={filter.queryLabel}\n            disableSortOptions={filter.disableSortOptions}\n          />\n        );\n      }\n      return (\n        <PageAsyncMultiSelect<string>\n          key={filter.key}\n          id={props.id ?? filter.key}\n          values={filterValues}\n          onSelect={setFilterValues}\n          placeholder={filter.placeholder || ''}\n          queryOptions={filter.queryOptions}\n          queryErrorText={filter.queryErrorText}\n          queryPlaceholder={filter.queryPlaceholder}\n          footer={\n            filter.openBrowse ? (\n              <Button\n                variant=\"link\"\n                onClick={() => {\n                  filter.openBrowse?.(\n                    (selection) => setFilterValues(() => selection),\n                    filterValues\n                  );\n                }}\n              >\n                Browse\n              </Button>\n            ) : undefined\n          }\n          variant=\"count\"\n          disableClearSelection\n          queryLabel={filter.queryLabel}\n          disableSortOptions={filter.disableSortOptions}\n        />\n      );\n\n    case ToolbarFilterType.MultiSelect:\n      if (isHasOrFilter && props.limitFiltersToOneOrOperation) {\n        return (\n          <PageSingleSelect\n            key={filter.key}\n            id={props.id ?? filter.key}\n            placeholder={filter.placeholder}\n            value={filterValues && filterValues?.length > 0 ? filterValues[0] : ''}\n            onSelect={(item) => setFilterValues(() => [item!])}\n            options={filter.options}\n            disableSortOptions={filter.disableSortOptions}\n          />\n        );\n      }\n      return (\n        <PageMultiSelect<string>\n          key={filter.key}\n          id={props.id ?? filter.key}\n          placeholder={filter.placeholder}\n          values={filterValues}\n          onSelect={setFilterValues}\n          options={filter.options}\n          variant=\"count\"\n          disableClearSelection\n          disableSortOptions={filter.disableSortOptions}\n        />\n      );\n\n    case ToolbarFilterType.DateRange:\n      return (\n        <ToolbarDateRangeFilter\n          key={filter.key}\n          id={props.id ?? filter.key}\n          label={filter.label}\n          placeholder={filter.placeholder ?? ''}\n          filterValues={filterValues}\n          setFilterValues={setFilterValues}\n          options={filter.options}\n          isRequired={filter.isRequired}\n          defaultValue={filter.defaultValue}\n        />\n      );\n  }\n}\n","import { Button, Split, ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport {\n  SortAlphaDownAltIcon,\n  SortAlphaUpIcon,\n  SortAmountDownIcon,\n  SortAmountUpIcon,\n  SortNumericDownAltIcon,\n  SortNumericUpIcon,\n} from '@patternfly/react-icons';\nimport { useCallback, useMemo } from 'react';\nimport { PageSingleSelect } from '../PageInputs/PageSingleSelect';\nimport { ITableColumn } from '../PageTable/PageTableColumn';\nimport { useFrameworkTranslations } from '../useFrameworkTranslations';\nimport { PageToolbarToggleGroup } from './PageToolbarToggleGroup';\n\nexport type PageToolbarSortProps = {\n  sort?: string;\n  setSort?: (sort: string) => void;\n  sortDirection?: 'asc' | 'desc';\n  setSortDirection?: (sortDirection: 'asc' | 'desc') => void;\n  sortOptions?: PageTableSortOption[];\n};\n\nexport interface PageTableSortOption {\n  label: string;\n  value: string;\n  type?: 'text' | 'number' | undefined;\n  defaultDirection?: 'asc' | 'desc';\n}\n\nexport function PageToolbarSort(props: PageToolbarSortProps) {\n  const { sort, setSort, sortDirection, setSortDirection, sortOptions } = props;\n\n  const sortOption = sortOptions?.find((sortOption) => sortOption.value === sort);\n  const sortType = sortOption ? sortOption.type : undefined;\n\n  const [translations] = useFrameworkTranslations();\n\n  const sortDirectionIcon = useMemo(() => {\n    switch (sortType) {\n      case 'text':\n        switch (sortDirection) {\n          case 'asc':\n            return <SortAlphaUpIcon />;\n          case 'desc':\n            return <SortAlphaDownAltIcon />;\n        }\n        break;\n      case 'number':\n        switch (sortDirection) {\n          case 'asc':\n            return <SortNumericUpIcon />;\n          case 'desc':\n            return <SortNumericDownAltIcon />;\n        }\n        break;\n      default:\n        switch (sortDirection) {\n          case 'asc':\n            return <SortAmountUpIcon />;\n          case 'desc':\n            return <SortAmountDownIcon />;\n        }\n        break;\n    }\n    return <></>;\n  }, [sortDirection, sortType]);\n\n  if (!sortOptions || sortOptions.length <= 0) return <></>;\n\n  return (\n    <PageToolbarToggleGroup breakpoint=\"2xl\" toggleIcon={sortDirectionIcon} id=\"sort\">\n      <ToolbarGroup variant=\"filter-group\" style={{ flexWrap: 'wrap', gap: 8 }}>\n        <ToolbarItem variant=\"label\">{translations.sort}</ToolbarItem>\n        <ToolbarItem>\n          <Split>\n            <ToolbarSortSelect\n              sortOptions={sortOptions}\n              sort={sort}\n              setSort={setSort}\n              setSortDirection={setSortDirection}\n            />\n            <Button\n              variant=\"control\"\n              icon={sortDirectionIcon}\n              onClick={() => {\n                if (sortDirection === 'asc') setSortDirection?.('desc');\n                else setSortDirection?.('asc');\n              }}\n            />\n          </Split>\n        </ToolbarItem>\n      </ToolbarGroup>\n    </PageToolbarToggleGroup>\n  );\n}\n\nfunction ToolbarSortSelect(props: {\n  sort?: string;\n  setSort?: (sort: string) => void;\n  setSortDirection?: (sortDirection: 'asc' | 'desc') => void;\n  sortOptions: PageTableSortOption[];\n}) {\n  const { sortOptions, sort, setSort, setSortDirection } = props;\n  const onSelect = useCallback(\n    (value: string | undefined | null) => {\n      if (value) {\n        const sortOption = sortOptions.find((option) => option.value === value);\n        if (sortOption && sort !== value && sortOption.defaultDirection) {\n          setSortDirection?.(sortOption.defaultDirection);\n        }\n        setSort?.(value);\n      }\n    },\n    [sortOptions, setSort, setSortDirection, sort]\n  );\n  return (\n    <PageSingleSelect\n      id=\"toolbar-sort-select-expand\"\n      placeholder=\"\"\n      value={sort}\n      onSelect={onSelect}\n      options={sortOptions.map((option) => ({\n        label: option.label,\n        value: option.value,\n      }))}\n      isRequired\n    />\n  );\n}\n\nexport function usePageToolbarSortOptionsFromColumns<T extends object>(\n  tableColumns: ITableColumn<T>[]\n) {\n  const sortOptions = useMemo(() => {\n    const sortOptions: PageTableSortOption[] = [];\n    for (const column of tableColumns) {\n      if (column.sort) {\n        if (column.defaultSort) {\n          // Assumes the default sort is a text column\n          sortOptions.push({\n            label: column.header,\n            value: column.sort,\n            type: 'text',\n            defaultDirection: column.defaultSortDirection,\n          });\n          continue;\n        }\n\n        switch (column.type) {\n          case 'count':\n            sortOptions.push({\n              label: column.header,\n              value: column.sort,\n              type: 'number',\n              defaultDirection: column.defaultSortDirection,\n            });\n            break;\n          case 'text':\n            sortOptions.push({\n              label: column.header,\n              value: column.sort,\n              type: 'text',\n              defaultDirection: column.defaultSortDirection,\n            });\n            break;\n          default:\n            sortOptions.push({\n              label: column.header,\n              value: column.sort,\n              defaultDirection: column.defaultSortDirection,\n            });\n            break;\n        }\n      }\n    }\n    return sortOptions;\n  }, [tableColumns]);\n  return sortOptions;\n}\n","import {\n  Button,\n  Split,\n  ToggleGroup,\n  ToggleGroupItem,\n  ToolbarGroup,\n  ToolbarItem,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { ColumnsIcon, ListIcon, TableIcon, ThLargeIcon } from '@patternfly/react-icons';\nimport { useFrameworkTranslations } from '../useFrameworkTranslations';\nimport { PageTableViewType, PageTableViewTypeE } from './PageTableViewType';\nimport { PageToolbarToggleGroup } from './PageToolbarToggleGroup';\n\nexport type PageToolbarViewProps = {\n  disableTableView?: boolean;\n  disableCardView?: boolean;\n  disableListView?: boolean;\n  openColumnModal?: () => void;\n  viewType: PageTableViewType;\n  setViewType: (viewType: PageTableViewType) => void;\n};\n\nexport function PageToolbarView(props: PageToolbarViewProps) {\n  const { viewType, setViewType, openColumnModal } = props;\n\n  const [translations] = useFrameworkTranslations();\n\n  let viewTypeCount = 0;\n  if (!props.disableTableView) viewTypeCount++;\n  if (!props.disableCardView) viewTypeCount++;\n  if (!props.disableListView) viewTypeCount++;\n\n  let icon = <TableIcon />;\n  if (viewType === PageTableViewTypeE.Cards) icon = <ThLargeIcon />;\n  if (viewType === PageTableViewTypeE.List) icon = <ListIcon />;\n\n  return (\n    <PageToolbarToggleGroup breakpoint=\"md\" toggleIcon={icon} id=\"view\">\n      <ToolbarGroup variant=\"button-group\" style={{ justifyContent: 'end', marginRight: 0 }}>\n        <ToolbarItem>\n          <Split hasGutter>\n            {openColumnModal && (\n              <Tooltip content={translations.manageColumns}>\n                <Button variant=\"plain\" icon={<ColumnsIcon />} onClick={openColumnModal} />\n              </Tooltip>\n            )}\n            {viewTypeCount > 1 && (\n              <ToggleGroup data-cy={'table-view-toggle'} aria-label=\"table view toggle\">\n                {[\n                  !props.disableTableView && PageTableViewTypeE.Table,\n                  !props.disableListView && PageTableViewTypeE.List,\n                  !props.disableCardView && PageTableViewTypeE.Cards,\n                ]\n                  .filter((i) => i)\n                  .map((vt) => {\n                    switch (vt) {\n                      case PageTableViewTypeE.Cards:\n                        return (\n                          <ToggleGroupItem\n                            icon={<ThLargeIcon />}\n                            isSelected={viewType === PageTableViewTypeE.Cards}\n                            onClick={() => setViewType?.(PageTableViewTypeE.Cards)}\n                            aria-label=\"card view\"\n                            data-cy={'card-view'}\n                            key={'card-view'}\n                          />\n                        );\n                      case PageTableViewTypeE.List:\n                        return (\n                          <ToggleGroupItem\n                            icon={<ListIcon />}\n                            isSelected={viewType === PageTableViewTypeE.List}\n                            onClick={() => setViewType?.(PageTableViewTypeE.List)}\n                            aria-label=\"list view\"\n                            data-cy={'list-view'}\n                            key={'list-view'}\n                          />\n                        );\n                      case PageTableViewTypeE.Table:\n                        return (\n                          <ToggleGroupItem\n                            icon={<TableIcon />}\n                            isSelected={viewType === PageTableViewTypeE.Table}\n                            onClick={() => setViewType?.(PageTableViewTypeE.Table)}\n                            aria-label=\"table view\"\n                            data-cy={'table-view'}\n                            key={'table-view'}\n                          />\n                        );\n                    }\n                  })}\n              </ToggleGroup>\n            )}\n          </Split>\n        </ToolbarItem>\n      </ToolbarGroup>\n    </PageToolbarToggleGroup>\n  );\n}\n","import {\n  OnPerPageSelect,\n  OnSetPage,\n  ToolbarContent as PFToolbarContent,\n  Pagination,\n  PaginationVariant,\n  PerPageOptions,\n  Skeleton,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport React, { Dispatch, Fragment, SetStateAction, useCallback, useState } from 'react';\nimport styled from 'styled-components';\nimport { IPageAction, PageActionSelection } from '../PageActions/PageAction';\nimport { PageActions } from '../PageActions/PageActions';\nimport { BulkSelector } from '../components/BulkSelector';\nimport { useBreakpoint } from '../components/useBreakPoint';\nimport { PageTableViewType } from './PageTableViewType';\nimport './PageToolbar.css';\nimport { IFilterState, IToolbarFilter, PageToolbarFilters } from './PageToolbarFilter';\nimport { PageTableSortOption, PageToolbarSort } from './PageToolbarSort';\nimport { PageToolbarToggleGroupContext } from './PageToolbarToggleGroup';\nimport { PageToolbarView } from './PageToolbarView';\n\nconst FlexGrowDiv = styled.div`\n  display: flex;\n  flex-grow: 1;\n  justify-content: end;\n  flex-wrap: wrap;\n`;\n\nconst ToolbarContent = styled(PFToolbarContent)`\n  & > .pf-v5-c-toolbar__content-section {\n    row-gap: 16px;\n    justify-content: end;\n  }\n`;\n\nexport type PageToolbarProps<T extends object> = {\n  localStorageKey?: string;\n\n  openColumnModal?: () => void;\n  keyFn: (item: T) => string | number;\n\n  itemCount?: number;\n\n  toolbarActions?: IPageAction<T>[];\n\n  toolbarFilters?: IToolbarFilter[];\n  filterState?: IFilterState;\n  setFilterState?: Dispatch<SetStateAction<IFilterState>>;\n  clearAllFilters?: () => void;\n\n  page?: number;\n  perPage?: number;\n  setPage?: (page: number) => void;\n  setPerPage?: (perPage: number) => void;\n  perPageOptions?: PerPageOptions[];\n\n  isSelected?: (item: T) => boolean;\n  selectedItems?: T[];\n  selectItem?: (item: T) => void;\n  unselectItem?: (item: T) => void;\n  selectItems?: (items: T[]) => void;\n  unselectAll?: () => void;\n  onSelect?: (item: T) => void;\n  showSelect?: boolean;\n\n  sort?: string;\n  setSort?: (sort: string) => void;\n  sortDirection?: 'asc' | 'desc';\n  setSortDirection?: (sortDirection: 'asc' | 'desc') => void;\n\n  viewType?: PageTableViewType;\n  setViewType?: (viewType: PageTableViewType) => void;\n\n  disableTableView?: boolean;\n  disableListView?: boolean;\n  disableCardView?: boolean;\n  disablePagination?: boolean;\n  autoHidePagination?: boolean;\n  sortOptions?: PageTableSortOption[];\n  /** Optional: Max selections permitted in a table. The bulk selector within the toolbar is disabled based on this value.\n   */\n  maxSelections?: number;\n\n  toolbarContent?: React.ReactNode;\n\n  /**\n   * Limits the filters so that only one filter can be set to an OR operation.\n   *\n   * Example: AWX can either have an OR on type or status but not both.\n   * So once one has 2 selections, the other becomes a single select.\n   */\n  limitFiltersToOneOrOperation?: boolean;\n};\n\nexport function PageToolbar<T extends object>(props: PageToolbarProps<T>) {\n  const {\n    itemCount,\n    page,\n    perPage,\n    setPage,\n    setPerPage,\n    toolbarFilters,\n    selectedItems,\n    filterState,\n    setFilterState,\n    openColumnModal,\n    sort,\n    setSort,\n    sortDirection,\n    setSortDirection,\n    sortOptions,\n    clearAllFilters: clearAllFiltersProp,\n    perPageOptions,\n  } = props;\n\n  const clearAllFilters = useCallback(() => {\n    if (clearAllFiltersProp) {\n      clearAllFiltersProp();\n    } else if (setFilterState) {\n      setFilterState({});\n    }\n  }, [setFilterState, clearAllFiltersProp]);\n\n  const isMdOrLarger = useBreakpoint('md');\n  const isXxlOrLarger = useBreakpoint('xxl');\n\n  const { viewType, setViewType } = props;\n  let { toolbarActions } = props;\n  toolbarActions = toolbarActions ?? [];\n\n  const [activeGroup, setActiveGroup] = useState('');\n\n  const onSetPage = useCallback<OnSetPage>(\n    (_event, page) => (setPage ? setPage(page) : null),\n    [setPage]\n  );\n  const onPerPageSelect = useCallback<OnPerPageSelect>(\n    (_event, perPage) => (setPerPage ? setPerPage(perPage) : null),\n    [setPerPage]\n  );\n\n  const showSearchAndFilters = toolbarFilters !== undefined;\n  const showToolbarActions = toolbarActions !== undefined && toolbarActions.length > 0;\n\n  const showSelect =\n    props.showSelect === true ||\n    (selectedItems !== undefined &&\n      toolbarActions &&\n      toolbarActions.find(\n        (toolbarAction) =>\n          'selection' in toolbarAction && toolbarAction.selection === PageActionSelection.Multiple\n      ));\n\n  const showToolbar = showSelect || showSearchAndFilters || showToolbarActions;\n  if (!showToolbar) {\n    return <Fragment />;\n  }\n\n  if (itemCount === undefined) {\n    return (\n      <Toolbar\n        className=\"page-table-toolbar border-bottom\"\n        style={{\n          paddingBottom: isMdOrLarger ? undefined : 8,\n          paddingTop: isMdOrLarger ? undefined : 8,\n        }}\n      >\n        <ToolbarContent>\n          <ToolbarItem style={{ width: '100%' }}>\n            <Skeleton height=\"36px\" />\n          </ToolbarItem>\n        </ToolbarContent>\n      </Toolbar>\n    );\n  }\n\n  return (\n    <PageToolbarToggleGroupContext.Provider value={{ activeGroup, setActiveGroup }}>\n      <Toolbar\n        ouiaId=\"page-toolbar\"\n        data-cy=\"page-toolbar\"\n        clearAllFilters={clearAllFilters}\n        className=\"page-table-toolbar border-bottom\"\n        style={{\n          paddingBottom: isMdOrLarger ? undefined : 8,\n          paddingTop: isMdOrLarger ? undefined : 8,\n        }}\n        inset={{\n          default: 'insetMd',\n          sm: 'insetMd',\n          md: 'insetMd',\n          lg: 'insetMd',\n          xl: 'insetLg',\n          '2xl': 'insetLg',\n        }}\n      >\n        <ToolbarContent style={{ paddingRight: isXxlOrLarger ? 12 : 4 }}>\n          {/* Selection */}\n          {showSelect && (\n            <ToolbarGroup>\n              <ToolbarItem variant=\"bulk-select\">\n                <BulkSelector {...props} />\n              </ToolbarItem>\n            </ToolbarGroup>\n          )}\n\n          {/* Filters */}\n          {filterState && setFilterState && (\n            <PageToolbarFilters\n              toolbarFilters={toolbarFilters}\n              filterState={filterState}\n              setFilterState={setFilterState}\n              limitFiltersToOneOrOperation={props.limitFiltersToOneOrOperation}\n            />\n          )}\n\n          {props.toolbarContent}\n\n          {/* Actions */}\n          <ToolbarGroup variant=\"button-group\">\n            <PageActions\n              actions={toolbarActions}\n              selectedItems={selectedItems}\n              wrapper={ToolbarItem}\n            />\n          </ToolbarGroup>\n\n          {/* The flex below is needed to make the toolbar wrap elements properly */}\n          <FlexGrowDiv>\n            {/* Sort */}\n            <PageToolbarSort\n              sort={sort}\n              setSort={setSort}\n              sortDirection={sortDirection}\n              setSortDirection={setSortDirection}\n              sortOptions={sortOptions}\n            />\n\n            {/* View */}\n            {viewType && setViewType && (\n              <PageToolbarView\n                disableTableView={props.disableTableView}\n                disableListView={props.disableListView}\n                disableCardView={props.disableCardView}\n                viewType={viewType}\n                setViewType={setViewType}\n                openColumnModal={openColumnModal}\n              />\n            )}\n\n            {/* Pagination */}\n            {!props.disablePagination && !props.autoHidePagination && isXxlOrLarger && (\n              <ToolbarItem\n                visibility={{ default: 'hidden', '2xl': 'visible' }}\n                style={{ marginLeft: 24, alignSelf: 'center' }}\n              >\n                <Pagination\n                  variant={PaginationVariant.top}\n                  isCompact\n                  itemCount={itemCount}\n                  perPage={perPage}\n                  page={page}\n                  onSetPage={onSetPage}\n                  onPerPageSelect={onPerPageSelect}\n                  perPageOptions={perPageOptions}\n                  style={{ marginTop: -8, marginBottom: -8 }}\n                />\n              </ToolbarItem>\n            )}\n          </FlexGrowDiv>\n        </ToolbarContent>\n      </Toolbar>\n    </PageToolbarToggleGroupContext.Provider>\n  );\n}\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateFooter,\n  EmptyStateHeader,\n  EmptyStateIcon,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\n\nexport function EmptyStateError(props: { titleProp?: string; message?: string }) {\n  const { t } = useTranslation();\n  const title = t('Something went wrong');\n  const description = t('Please refresh the page by using the button below.');\n  const button = t('Refresh');\n  const { titleProp, message } = props;\n  return (\n    <EmptyState isFullHeight>\n      <EmptyStateHeader\n        titleText={<>{titleProp || title}</>}\n        icon={\n          <EmptyStateIcon\n            icon={ExclamationCircleIcon}\n            color=\"var(--pf-v5-global--danger-color--100)\"\n          />\n        }\n        headingLevel=\"h2\"\n      />\n      <EmptyStateBody>{message}</EmptyStateBody>\n      <EmptyStateFooter>\n        <EmptyStateBody>{description}</EmptyStateBody>\n        <Button variant=\"primary\" onClick={() => window.location.reload()}>\n          {button}\n        </Button>\n      </EmptyStateFooter>\n    </EmptyState>\n  );\n}\n","import {\n  EmptyState,\n  EmptyStateActions,\n  EmptyStateBody,\n  EmptyStateFooter,\n  EmptyStateHeader,\n  EmptyStateIcon,\n  EmptyStateVariant,\n} from '@patternfly/react-core';\nimport React, { ComponentClass, ReactElement, ReactNode } from 'react';\n\nexport function EmptyStateCustom(props: {\n  title: string;\n  description: ReactNode;\n  icon?: ComponentClass;\n  button?: ReactElement;\n  footNote?: string;\n  image?: ReactElement;\n  variant?: 'xs' | 'sm' | 'lg' | 'xl' | 'full' | undefined;\n  style?: React.CSSProperties;\n}) {\n  const { title, description, icon, button, footNote, image, variant, style } = props;\n  return (\n    <EmptyState variant={variant || EmptyStateVariant.full} style={style} isFullHeight>\n      {icon && <EmptyStateIcon icon={icon} />}\n      <EmptyStateHeader titleText={<>{title}</>} headingLevel=\"h4\" data-cy=\"empty-state-title\" />\n      <EmptyStateBody data-cy={props.description}>{description}</EmptyStateBody>\n      <EmptyStateFooter>\n        {button && <EmptyStateActions>{button}</EmptyStateActions>}\n        {image && (\n          <>\n            {' '}\n            <br /> <EmptyStateBody>{image}</EmptyStateBody>\n          </>\n        )}\n        {footNote && <EmptyStateBody>{footNote}</EmptyStateBody>}\n      </EmptyStateFooter>\n    </EmptyState>\n  );\n}\n","import { CubesIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { ReactElement, ReactNode, ComponentClass } from 'react';\nimport { EmptyStateCustom } from './EmptyStateCustom';\n\nexport function EmptyStateNoData(props: {\n  button?: ReactElement;\n  title: string;\n  description: ReactNode;\n  variant?: 'xs' | 'sm' | 'lg' | 'xl' | 'full' | undefined;\n  icon?: ComponentClass;\n}) {\n  const { button, description, title, variant, icon: Icon } = props;\n  return (\n    <EmptyStateCustom\n      icon={Icon ?? (button ? PlusCircleIcon : CubesIcon)}\n      title={title}\n      description={description}\n      button={button}\n      variant={variant}\n    />\n  );\n}\n","import { createContext, ReactNode, useCallback, useContext, useMemo, useState } from 'react';\n\nconst PageDialogContext = createContext({\n  dialogs: [] as ReactNode[],\n  clearDialogs: () => {},\n  pushDialog: (_dialog: ReactNode) => {},\n  popDialog: () => {},\n});\n\nexport function PageDialogProvider(props: { children: ReactNode }) {\n  const [dialogs, setDialogs] = useState<ReactNode[]>([]);\n  const clearDialogs = useCallback(\n    () => setDialogs((current) => (current.length ? [] : current)),\n    [setDialogs]\n  );\n  const pushDialog = useCallback(\n    (dialog: ReactNode) => setDialogs((dialogs) => [...dialogs, dialog]),\n    [setDialogs]\n  );\n  const popDialog = useCallback(() => setDialogs((dialogs) => dialogs.slice(0, -1)), [setDialogs]);\n  const value = useMemo(\n    () => ({ dialogs, clearDialogs, pushDialog, popDialog }),\n    [clearDialogs, dialogs, popDialog, pushDialog]\n  );\n  return (\n    <PageDialogContext.Provider value={value}>\n      {dialogs.length > 0 && dialogs[dialogs.length - 1]}\n      {props.children}\n    </PageDialogContext.Provider>\n  );\n}\n\nexport function usePageDialogs() {\n  return useContext(PageDialogContext);\n}\n\n/*\n * @deprecated Use usePageDialogs instead\n */\nexport function usePageDialog(): [\n  dialog: ReactNode | undefined,\n  setDialog: (dialog: ReactNode | undefined) => void,\n] {\n  const { dialogs, clearDialogs, pushDialog } = usePageDialogs();\n  const dialog = useMemo(\n    () => (dialogs.length > 0 ? dialogs[dialogs.length - 1] : undefined),\n    [dialogs]\n  );\n  const setDialog = useCallback(\n    (dialog: ReactNode | undefined) => {\n      clearDialogs();\n      if (dialog !== undefined) {\n        pushDialog(dialog);\n      }\n    },\n    [clearDialogs, pushDialog]\n  );\n  return useMemo(() => [dialog, setDialog] as const, [dialog, setDialog]);\n}\n","import debounce from 'debounce';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nexport function useTableItems<T extends object>(\n  items: T[],\n  keyFn: (item: T) => string | number,\n  defaults?: { search?: string | null }\n) {\n  const {\n    selectedItems,\n    selectItem,\n    unselectItem,\n    isSelected,\n    selectItems,\n    unselectAll,\n    allSelected,\n  } = useSelected(items, keyFn);\n  const { sorted, sort, setSort } = useSorted(items);\n  const { filtered, setFilterFn } = useFiltered(sorted, keyFn);\n  const { searched, search, setSearch, setSearchFn } = useSearched(\n    filtered,\n    keyFn,\n    defaults?.search\n  );\n  const { paged, page, setPage, perPage, setPerPage } = usePaged(searched);\n  const selectPage = useCallback(() => selectItems(paged), [paged, selectItems]);\n  const selectAll = useCallback(() => selectItems(searched), [searched, selectItems]);\n  return useMemo(\n    () => ({\n      allSelected,\n      filtered,\n      isSelected,\n      page,\n      paged,\n      perPage,\n      search,\n      searched,\n      selectAll,\n      selectItem,\n      selectPage,\n      selectedItems,\n      setFilterFn,\n      setPage,\n      setPerPage,\n      setSearch,\n      setSearchFn,\n      setSort,\n      sort,\n      sorted,\n      unselectAll,\n      unselectItem,\n    }),\n    [\n      allSelected,\n      filtered,\n      isSelected,\n      page,\n      paged,\n      perPage,\n      search,\n      searched,\n      selectAll,\n      selectItem,\n      selectPage,\n      selectedItems,\n      setFilterFn,\n      setPage,\n      setPerPage,\n      setSearch,\n      setSearchFn,\n      setSort,\n      sort,\n      sorted,\n      unselectAll,\n      unselectItem,\n    ]\n  );\n}\n\nexport interface ISelected<T extends object> {\n  selectedItems: T[];\n  selectItem: (item: T) => void;\n  selectItems: (items: T[]) => void;\n  unselectItem: (item: T) => void;\n  unselectItems: (items: T[]) => void;\n  isSelected: (item: T) => boolean;\n  selectAll: () => void;\n  unselectAll: () => void;\n  allSelected: boolean;\n  keyFn: (item: T) => string | number;\n}\n\n/** Hook to track selection from a list of items. */\nexport function useSelected<T extends object>(\n  /** The items in which selections are being tracked. Used to update the selected items when an item changes.  */\n  items: T[],\n\n  /** A function that returns a unique key for each item, used to track selection. */\n  keyFn: (item: T) => string | number,\n\n  /** The default items that should be initially selected. */\n  defaultSelection?: T[]\n): ISelected<T> {\n  const [selectedMap, setSelectedMap] = useState<Record<string | number, T>>(() => {\n    if (defaultSelection) {\n      return defaultSelection.reduce<Record<string | number, T>>((selectedMap, item) => {\n        selectedMap[`item-${keyFn(item)}`] = item;\n        return selectedMap;\n      }, {});\n    } else {\n      return {};\n    }\n  });\n\n  useEffect(() => {\n    setSelectedMap((selectedMap) => {\n      let changed = false;\n      items.forEach((item) => {\n        const key = `item-${keyFn(item)}`;\n        if (selectedMap[key] && selectedMap[key] !== item) {\n          changed = true;\n          selectedMap[key] = item;\n        }\n      });\n      return changed ? { ...selectedMap } : selectedMap;\n    });\n  }, [items, keyFn]);\n\n  const selectItem = useCallback(\n    (item: T) => {\n      setSelectedMap((selectedMap) => {\n        const itemKey = `item-${keyFn(item)}`;\n        const existing = selectedMap[itemKey];\n        if (existing !== item) {\n          selectedMap = { ...selectedMap };\n          selectedMap[itemKey] = item;\n        }\n        return selectedMap;\n      });\n    },\n    [keyFn]\n  );\n\n  const unselectItem = useCallback(\n    (item: T) => {\n      setSelectedMap((selectedMap) => {\n        const itemKey = `item-${keyFn(item)}`;\n        const existing = selectedMap[itemKey];\n        if (existing) {\n          selectedMap = { ...selectedMap };\n          delete selectedMap[itemKey];\n        }\n        return selectedMap;\n      });\n    },\n    [keyFn]\n  );\n\n  const isSelected = useCallback(\n    (item: T) => {\n      const itemKey = `item-${keyFn(item)}`;\n      return selectedMap[itemKey] !== undefined;\n    },\n    [keyFn, selectedMap]\n  );\n\n  const selectItems = useCallback(\n    (items: T[]) => {\n      setSelectedMap((selectedMap) => {\n        selectedMap = { ...selectedMap };\n        for (const item of items) {\n          const itemKey = `item-${keyFn(item)}`;\n          selectedMap[itemKey] = item;\n        }\n        return selectedMap;\n      });\n    },\n    [keyFn]\n  );\n\n  // By using a ref, we can ensure that the items used in the selectAll function are the same as the items\n  // without having to create a new selectAll function every time the items change.\n  const itemsRef = useRef<T[]>(items);\n  useEffect(() => {\n    itemsRef.current = items;\n  }, [items]);\n  const selectAll = useCallback(() => selectItems(itemsRef.current), [selectItems]);\n  const unselectItems = useCallback(\n    (items: T[]) => {\n      for (const item of items) {\n        unselectItem(item);\n      }\n    },\n    [unselectItem]\n  );\n\n  const unselectAll = useCallback(() => {\n    setSelectedMap((selectedMap) => {\n      if (Object.keys(selectedMap).length > 0) {\n        return {};\n      }\n      return selectedMap;\n    });\n  }, []);\n\n  const selectedItems = useMemo(() => Object.values(selectedMap), [selectedMap]);\n  const allSelected = useMemo(\n    () => selectedItems.length === items.length,\n    [items.length, selectedItems.length]\n  );\n\n  return useMemo(\n    () => ({\n      selectedItems,\n      selectItem,\n      unselectItem,\n      isSelected,\n      selectItems,\n      selectAll,\n      unselectAll,\n      allSelected,\n      keyFn,\n      unselectItems,\n    }),\n    [\n      allSelected,\n      isSelected,\n      keyFn,\n      selectAll,\n      selectItem,\n      selectItems,\n      selectedItems,\n      unselectAll,\n      unselectItem,\n      unselectItems,\n    ]\n  );\n}\n\nexport function useSelectedInMemory<T extends object>(\n  items: T[] | undefined,\n  keyFn: (item: T) => string | number\n) {\n  const [selectedMap, setSelectedMap] = useState<Record<string | number, T>>({});\n\n  useEffect(() => {\n    setSelectedMap((selectedMap) => {\n      let changed = false;\n\n      const itemsKeys = !items\n        ? {}\n        : items.reduce(\n            (itemsKeys, item) => {\n              const key = keyFn(item);\n              itemsKeys[key] = item;\n              if (selectedMap[key] && selectedMap[key] !== item) {\n                changed = true;\n                selectedMap[key] = item;\n              }\n              return itemsKeys;\n            },\n            {} as Record<string | number, T>\n          );\n\n      const removeKeyMap: Record<string | number, true> = {};\n      for (const key in selectedMap) {\n        if (!itemsKeys[key]) {\n          removeKeyMap[key] = true;\n        }\n      }\n\n      const removeKeys = Object.keys(removeKeyMap);\n      if (removeKeys.length) {\n        changed = true;\n        for (const key of removeKeys) {\n          delete selectedMap[key];\n        }\n      }\n\n      return changed ? { ...selectedMap } : selectedMap;\n    });\n  }, [items, keyFn]);\n\n  const selectItem = useCallback(\n    (item: T) => {\n      setSelectedMap((selectedMap) => {\n        const itemKey = keyFn(item);\n        const existing = selectedMap[itemKey];\n        if (existing !== item) {\n          selectedMap = { ...selectedMap };\n          selectedMap[itemKey] = item;\n        }\n        return selectedMap;\n      });\n    },\n    [keyFn]\n  );\n\n  const unselectItem = useCallback(\n    (item: T) => {\n      setSelectedMap((selectedMap) => {\n        const itemKey = keyFn(item);\n        const existing = selectedMap[itemKey];\n        if (existing) {\n          selectedMap = { ...selectedMap };\n          delete selectedMap[itemKey];\n        }\n        return selectedMap;\n      });\n    },\n    [keyFn]\n  );\n\n  const unselectItems = useCallback(\n    (items: T[]) => {\n      for (const item of items) {\n        unselectItem(item);\n      }\n    },\n    [unselectItem]\n  );\n\n  const isSelected = useCallback(\n    (item: T) => {\n      const itemKey = keyFn(item);\n      return selectedMap[itemKey] !== undefined;\n    },\n    [keyFn, selectedMap]\n  );\n\n  const selectItems = useCallback(\n    (items: T[]) => {\n      setSelectedMap((selectedMap) => {\n        selectedMap = { ...selectedMap };\n        for (const item of items) {\n          const itemKey = keyFn(item);\n          selectedMap[itemKey] = item;\n        }\n        return selectedMap;\n      });\n    },\n    [keyFn]\n  );\n\n  const selectAll = useCallback(() => {\n    selectItems(items ?? []);\n  }, [items, selectItems]);\n\n  const unselectAll = useCallback(() => {\n    setSelectedMap((selectedMap) => {\n      if (Object.keys(selectedMap).length > 0) {\n        return {};\n      }\n      return selectedMap;\n    });\n  }, []);\n\n  const selectedItems = useMemo(() => Object.values(selectedMap), [selectedMap]);\n  const allSelected = useMemo(\n    () => (selectedItems.length === items?.length ? true : false),\n    [items, selectedItems.length]\n  );\n\n  return useMemo(\n    () => ({\n      selectedItems,\n      selectItem,\n      unselectItem,\n      isSelected,\n      selectItems,\n      selectAll,\n      unselectAll,\n      allSelected,\n      keyFn,\n      unselectItems,\n    }),\n    [\n      allSelected,\n      isSelected,\n      keyFn,\n      selectAll,\n      selectItem,\n      selectItems,\n      selectedItems,\n      unselectAll,\n      unselectItem,\n      unselectItems,\n    ]\n  );\n}\n\nexport interface ISort<T extends object> {\n  id: string;\n  sortFn: (l: T, r: T) => number;\n  direction: 'asc' | 'desc';\n}\nexport function useSorted<T extends object>(items: T[] | undefined) {\n  const [sort, setSort] = useState<ISort<T>>();\n\n  const { direction, sortFn } = sort ?? {};\n\n  const sorted = useMemo(() => {\n    if (!items) return [];\n    if (sortFn) {\n      if (direction === 'asc') {\n        return [...items.sort(sortFn)];\n      } else {\n        return [...items.sort(sortFn).reverse()];\n      }\n    } else {\n      return items;\n    }\n  }, [direction, items, sortFn]);\n\n  return useMemo(() => ({ sorted, sort, setSort }), [sort, sorted]);\n}\n\nexport function useFiltered<T extends object>(items: T[], keyFn: (item: T) => string | number) {\n  const filterMapRef = useRef<{ map: Record<string | number, { item: T; passes: boolean }> }>({\n    map: {},\n  });\n  const [filterFn, setFilterFnState] = useState<(item: T) => boolean>();\n  const setFilterFn = useCallback(\n    (filterFn: ((item: T) => boolean) | undefined) => setFilterFnState(() => filterFn),\n    []\n  );\n  const [filtered, setFiltered] = useState<T[]>([]);\n\n  useEffect(() => {\n    filterMapRef.current.map = {};\n  }, [filterFn]);\n\n  const cachedFilterFn = useCallback(\n    (item: T) => {\n      const key = keyFn(item);\n      let cached = filterMapRef.current.map[key];\n      if (!cached) {\n        cached = { item, passes: filterFn ? filterFn(item) : true };\n        filterMapRef.current.map[key] = cached;\n      } else if (cached.item !== item) {\n        cached.item = item;\n        cached.passes = filterFn ? filterFn(item) : true;\n      }\n      return cached.passes;\n    },\n    [filterFn, keyFn]\n  );\n\n  useEffect(() => {\n    if (filterFn) {\n      setFiltered(items.filter(cachedFilterFn));\n    } else {\n      setFiltered(items);\n    }\n  }, [items, filterFn, cachedFilterFn]);\n\n  return useMemo(\n    function memoFiltered() {\n      return { filtered, setFilterFn };\n    },\n    [filtered, setFilterFn]\n  );\n}\n\nfunction useSearched<T extends object>(\n  items: T[],\n  keyFn: (item: T) => string | number,\n  defaultSearch?: string | null\n) {\n  const searchMapRef = useRef<{ map: Record<string | number, { item: T; score: number }> }>({\n    map: {},\n  });\n  const [searchFn, setSearchFnState] = useState<(item: T, search: string) => number>();\n  const setSearchFn = useCallback(\n    (searchFn: (item: T, search: string) => number) => setSearchFnState(() => searchFn),\n    []\n  );\n  const [searched, setSearched] = useState<T[]>([]);\n  const [search, setSearchState] = useState(defaultSearch ?? '');\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const setSearch = useCallback(\n    debounce((search: string) => setSearchState(search), 200),\n    []\n  );\n\n  useEffect(() => {\n    searchMapRef.current.map = {};\n  }, [search, searchFn]);\n\n  const cachedSearchFn = useCallback(\n    (item: T) => {\n      const key = keyFn(item);\n      let cached = searchMapRef.current.map[key];\n      if (!cached) {\n        cached = { item, score: searchFn ? searchFn(item, search) : 0 };\n        searchMapRef.current.map[key] = cached;\n      } else if (cached.item !== item) {\n        cached.item = item;\n        cached.score = searchFn ? searchFn(item, search) : 0;\n      }\n      return cached;\n    },\n    [keyFn, searchFn, search]\n  );\n\n  useEffect(() => {\n    if (searchFn && search) {\n      setSearched(\n        items\n          .map(cachedSearchFn)\n          .filter((cached) => cached.score < 0.5)\n          .sort((l, r) => l.score - r.score)\n          .map((cached) => cached.item)\n      );\n    } else {\n      setSearched(items);\n    }\n  }, [search, items, searchFn, cachedSearchFn]);\n\n  return useMemo(\n    function memoFiltered() {\n      return { searched, search, setSearch, setSearchFn };\n    },\n    [searched, search, setSearch, setSearchFn]\n  );\n}\n\nexport function usePaged<T extends object>(source: T[]) {\n  const [paged, setPaged] = useState<T[]>([]);\n  const [page, setPage] = useState(1);\n  const [perPage, setPerPage] = useState(10);\n  useEffect(() => {\n    setPaged((paged) => {\n      const newPaged = source.slice((page - 1) * perPage, page * perPage);\n      if (paged.length !== newPaged.length) {\n        return newPaged;\n      }\n      let index = 0;\n      for (const item of newPaged) {\n        if (paged[index++] !== item) {\n          return newPaged;\n        }\n      }\n      return paged;\n    });\n  }, [page, perPage, source]);\n  useEffect(() => {\n    if (page > Math.ceil(source.length / perPage)) {\n      setPage(1);\n    }\n  }, [page, perPage, source.length]);\n\n  return useMemo(() => ({ paged, page, setPage, perPage, setPerPage }), [page, paged, perPage]);\n}\n","import styles from '@patternfly/react-styles/css/components/Table/table';\nimport {\n  Table /* data-codemods */,\n  Tbody,\n  TbodyProps,\n  Td,\n  Th,\n  Thead,\n  Tr,\n  TrProps,\n} from '@patternfly/react-table';\nimport React, { ReactNode, useCallback, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ntype ReorderItemsProps<T extends object> = {\n  /** Array of columns */\n  columns: {\n    header: string;\n    cell: (item: T, setItem: (item: T) => void) => ReactNode | string;\n  }[];\n\n  items: T[];\n  setItems: (items: T[]) => void;\n\n  isSelected: (items: T) => boolean;\n  selectItem: (items: T) => void;\n  unselectItem: (items: T) => void;\n  allSelected: boolean;\n  selectAll: () => void;\n  unselectAll: () => void;\n\n  /** A function that gets a unique key for each item */\n  keyFn: (item: T) => string | number;\n\n  /** Setting to hide column headers */\n  hideColumnHeaders?: boolean;\n\n  /** Setting to include a column of checkboxes to enable selection of rows */\n  isSelectableWithCheckbox?: boolean;\n};\n\n/**\n * Component to reorder items in a list by dragging items to a desired position.\n * [Optionally allows selecting items from the list using checkboxes.]\n */\nexport function ReorderItems<T extends object>(props: ReorderItemsProps<T>) {\n  const { t } = useTranslation();\n\n  const {\n    columns,\n    keyFn,\n    items,\n    setItems,\n    isSelected,\n    selectItem,\n    unselectItem,\n    allSelected,\n    selectAll,\n    unselectAll,\n    hideColumnHeaders,\n    isSelectableWithCheckbox,\n  } = props;\n\n  const [itemStartIndex, setStartItemIndex] = useState<number | null>(null);\n  const [draggedItemId, setDraggedItemId] = useState<string | null>(null);\n  const [isDragging, setIsDragging] = useState(false);\n\n  const bodyRef = useRef<HTMLTableSectionElement>(null);\n\n  const isValidDrop = (evt: React.DragEvent<HTMLTableSectionElement | HTMLTableRowElement>) => {\n    if (bodyRef.current) {\n      const ulRect = bodyRef.current.getBoundingClientRect();\n      return (\n        evt.clientX > ulRect.x &&\n        evt.clientX < ulRect.x + ulRect.width &&\n        evt.clientY > ulRect.y &&\n        evt.clientY < ulRect.y + ulRect.height\n      );\n    }\n    return false;\n  };\n\n  const onDrop: TrProps['onDrop'] = (evt) => {\n    if (!isValidDrop(evt)) {\n      onDragCancel();\n    }\n  };\n\n  const onDragCancel = () => {\n    if (bodyRef.current) {\n      Array.from(bodyRef.current.children).forEach((el) => {\n        el.classList.remove(styles.modifiers.ghostRow);\n        el.setAttribute('aria-pressed', 'false');\n      });\n    }\n    setDraggedItemId(null);\n    setStartItemIndex(null);\n    setIsDragging(false);\n  };\n\n  const onDragOver: TbodyProps['onDragOver'] = (evt) => {\n    evt.preventDefault();\n\n    const curListItem = (evt.target as HTMLTableSectionElement).closest('tr');\n    if (\n      !curListItem ||\n      !(bodyRef.current && bodyRef.current.contains(curListItem)) ||\n      curListItem.id === draggedItemId\n    ) {\n      return null;\n    } else {\n      const dragId = curListItem.id;\n      const newDraggedItemIndex = Array.from(bodyRef.current.children).findIndex(\n        (item) => item.id === dragId\n      );\n      if (newDraggedItemIndex !== itemStartIndex && draggedItemId) {\n        const tempItemOrder = moveItem([...items], draggedItemId, newDraggedItemIndex);\n        setItems(tempItemOrder);\n      }\n    }\n    return null;\n  };\n\n  const moveItem = (arr: T[], itemId: string, toIndex: number) => {\n    const fromIndex = arr.findIndex((item) => keyFn(item) === itemId);\n\n    if (fromIndex === toIndex) {\n      return arr;\n    }\n    const temp = arr.splice(fromIndex, 1);\n    arr.splice(toIndex, 0, temp[0]);\n\n    return arr;\n  };\n\n  const onDragLeave: TbodyProps['onDragLeave'] = (evt) => {\n    if (!isValidDrop(evt)) {\n      setStartItemIndex(null);\n    }\n  };\n\n  const onDragEnd: TrProps['onDragEnd'] = (evt) => {\n    const target = evt.target as HTMLTableRowElement;\n    target.classList.remove(styles.modifiers.ghostRow);\n    target.setAttribute('aria-pressed', 'false');\n    setDraggedItemId(null);\n    setStartItemIndex(null);\n    setIsDragging(false);\n  };\n\n  const onDragStart: TrProps['onDragStart'] = (evt) => {\n    if (bodyRef.current) {\n      evt.dataTransfer.effectAllowed = 'move';\n      const newDraggedItemId = evt.currentTarget.id;\n\n      const originalStartIndex = Array.from(bodyRef.current.children).findIndex(\n        (item) => item.id === evt.currentTarget.id\n      );\n      evt.currentTarget.setAttribute('aria-pressed', 'true');\n      setDraggedItemId(newDraggedItemId);\n      setStartItemIndex(originalStartIndex);\n    }\n  };\n\n  const updateItem = useCallback(\n    (item: T) => {\n      const index = items.findIndex((i) => keyFn(i) === keyFn(item));\n      const newItems = [...items];\n      newItems[index] = item;\n      setItems(newItems);\n    },\n    [items, setItems, keyFn]\n  );\n\n  return (\n    <Table\n      aria-label={t(`Table with draggable rows`)}\n      className={isDragging ? styles.modifiers.dragOver : ''}\n      variant=\"compact\"\n      gridBreakPoint=\"\"\n    >\n      {!hideColumnHeaders && (\n        <Thead>\n          <Tr>\n            <Th />\n            {isSelectableWithCheckbox && (\n              <Th\n                select={{\n                  onSelect: (_event, isSelected) => {\n                    isSelected ? selectAll() : unselectAll();\n                  },\n                  isSelected: allSelected,\n                }}\n              />\n            )}\n            {columns.map((column, columnIndex) => (\n              <Th key={columnIndex}>{column.header}</Th>\n            ))}\n          </Tr>\n        </Thead>\n      )}\n      <Tbody ref={bodyRef} onDragOver={onDragOver} onDragLeave={onDragLeave}>\n        {items.map((item, rowIndex) => {\n          const key = keyFn(item);\n          return (\n            <Tr\n              key={key}\n              id={key.toString()}\n              draggable\n              onDrop={onDrop}\n              onDragEnd={onDragEnd}\n              onDragStart={onDragStart}\n            >\n              <Td draggableRow={{ id: `draggable-row-${key.toString()}` }} />\n              {isSelectableWithCheckbox && (\n                <Td\n                  select={{\n                    rowIndex,\n                    variant: 'checkbox',\n                    onSelect: (_event, select) => {\n                      select ? selectItem(item) : unselectItem(item);\n                    },\n                    isSelected: isSelected(item),\n                  }}\n                />\n              )}\n              {columns.map((column) => (\n                <Td key={column.header}>{column.cell(item, updateItem)}</Td>\n              ))}\n            </Tr>\n          );\n        })}\n      </Tbody>\n    </Table>\n  );\n}\n","import { Button, Divider, Modal, ModalBoxBody, ModalVariant } from '@patternfly/react-core';\nimport { ReactNode, useCallback, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { usePageDialog } from '../PageDialogs/PageDialog';\nimport { useSelected } from '../PageTable/useTableItems';\nimport { ReorderItems } from './ReorderItems';\n\ninterface IManageItemColumn<ItemT extends object> {\n  header: string;\n  cell: (item: ItemT, setItem: (item: ItemT) => void) => ReactNode;\n}\n\nexport interface ManageItemsProps<ItemT extends object> {\n  /** The id of the modal - used to save the user's preferences */\n  id: string;\n\n  title: string;\n\n  description?: string;\n\n  /** A function that gets a unique key for each item */\n  keyFn: (item: ItemT) => string | number;\n\n  /** The items to manage */\n  items: ItemT[];\n\n  /** The columns to display in the modal for managing the items */\n  columns: IManageItemColumn<ItemT>[];\n\n  // ToDo: This will be needed for table column management\n  /** A function that determines if an item can be reordered */\n  // canReorderItem?: (item: ItemT) => boolean;\n\n  // ToDo: This will be needed for table column management\n  /** A function that determines if an item can be disabled */\n  // canDisableItem?: (item: ItemT) => boolean;\n\n  /** Setting to hide column headers */\n  hideColumnHeaders?: boolean;\n\n  /** Variant controls the size of the modal */\n  variant?: ModalVariant;\n\n  /** Callback to save the manages state to localstorage format. */\n  saveFn?: (items: ItemT) => unknown;\n\n  /** Callback to load the manages state from localstorage format. */\n  loadFn?: (items: ItemT, data: unknown) => void;\n\n  /** Setting to include a column of checkboxes to enable selection of rows */\n  hideSelection?: boolean;\n\n  /** A function that gets called after the user clicks the apply button. */\n  onSubmit?: (items: ItemT[]) => void;\n}\n\n/**\n * This hook is used to manage items.\n * - Reordering\n * - Enabling/Disabling\n * - Display type\n */\nexport function useManageItems<ItemT extends object>(options: ManageItemsProps<ItemT>) {\n  const [_, setDialog] = usePageDialog();\n  const [keyFn] = useState(() => options.keyFn);\n  const [saveFn] = useState(() => options.saveFn);\n  const [loadFn] = useState(() => options.loadFn);\n\n  // This is the order/enabled/state that is stored in localstorage\n  const [itemsState, setItemsState] = useState<IManagedItemState[] | undefined>(() => {\n    try {\n      const value = localStorage.getItem(options.id);\n      if (typeof value === 'string') {\n        const data: unknown = JSON.parse(value);\n        if (\n          Array.isArray(data) &&\n          data.every((i) => typeof i === 'object') &&\n          data.every((i) => 'key' in i && 'enabled' in i)\n        ) {\n          return data as IManagedItemState[];\n        }\n      }\n    } catch {\n      // Do nothing\n    }\n    return undefined;\n  });\n\n  const items = useMemo(() => {\n    if (!itemsState) {\n      return options.items;\n    } else {\n      return options.items\n        .map((item) => {\n          if (loadFn) {\n            const itemState = itemsState.find((i) => i.key === keyFn(item));\n            if (itemState && itemState.state) {\n              loadFn(item, itemState.state);\n            }\n          }\n          return item;\n        })\n        .sort((a, b) => {\n          const aIndex = itemsState.findIndex((i) => i.key === keyFn(a));\n          const bIndex = itemsState.findIndex((i) => i.key === keyFn(b));\n          if (aIndex === -1 && bIndex === -1) return 0;\n          if (aIndex === -1) return 1;\n          if (bIndex === -1) return -1;\n          return aIndex - bIndex;\n        });\n    }\n  }, [itemsState, keyFn, loadFn, options.items]);\n\n  const selectedItems = useMemo(() => {\n    if (itemsState) {\n      return items.filter((item) => {\n        const itemState = itemsState.find((i) => i.key === keyFn(item));\n        return itemState ? itemState.enabled : true;\n      });\n    } else {\n      return items;\n    }\n  }, [items, itemsState, keyFn]);\n\n  const onApplyChanges = useCallback(\n    (orderedItems: ItemT[], selectedItems: ItemT[]) => {\n      const managedItemsState: IManagedItemState[] = orderedItems.map((item) => ({\n        key: keyFn(item),\n        enabled: selectedItems.includes(item),\n        state: saveFn ? saveFn(item) : undefined,\n      }));\n      setItemsState(managedItemsState);\n      localStorage.setItem(options.id, JSON.stringify(managedItemsState));\n      options.onSubmit ? options.onSubmit(orderedItems) : undefined;\n    },\n    [keyFn, options, saveFn]\n  );\n\n  const openManageItems = () =>\n    setDialog(\n      <ManageItemsModal\n        {...options}\n        keyFn={keyFn}\n        items={items}\n        defaultSelectedItems={selectedItems}\n        onApplyChanges={onApplyChanges}\n      />\n    );\n\n  return { openManageItems, managedItems: selectedItems };\n}\n\nexport function ManageItemsModal<ItemT extends object>(\n  props: ManageItemsProps<ItemT> & {\n    defaultSelectedItems?: ItemT[];\n    onApplyChanges: (items: ItemT[], selectedItems: ItemT[]) => void;\n  }\n) {\n  const { t } = useTranslation();\n  const { title, description, columns, onApplyChanges } = props;\n  const [keyFn] = useState(() => props.keyFn);\n  const [_, setDialog] = usePageDialog();\n  const onClose = () => setDialog(undefined);\n  const [items, setItems] = useState<ItemT[]>(() => props.items);\n  const {\n    selectedItems,\n    isSelected,\n    selectItem,\n    unselectItem,\n    allSelected,\n    selectAll,\n    unselectAll,\n  } = useSelected(items, keyFn, props.defaultSelectedItems);\n\n  const onApply = () => {\n    onApplyChanges(items, selectedItems);\n    setDialog(undefined);\n  };\n\n  return (\n    <Modal\n      title={title}\n      aria-label={title}\n      ouiaId={title}\n      description={<div style={{ marginBottom: 16 }}>{description}</div>}\n      variant={props.variant ?? ModalVariant.medium}\n      isOpen\n      onClose={onClose}\n      actions={[\n        <Button key=\"apply\" variant=\"primary\" onClick={onApply}>{t`Apply`}</Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={onClose}>{t`Cancel`}</Button>,\n      ]}\n      hasNoBodyWrapper\n    >\n      <Divider />\n      <ModalBoxBody style={{ padding: 0 }}>\n        <ReorderItems<ItemT>\n          keyFn={keyFn}\n          items={items}\n          setItems={setItems}\n          columns={columns}\n          isSelected={isSelected}\n          selectItem={selectItem}\n          unselectItem={unselectItem}\n          allSelected={allSelected}\n          selectAll={selectAll}\n          unselectAll={unselectAll}\n          hideColumnHeaders={props.hideColumnHeaders}\n          isSelectableWithCheckbox={props.hideSelection !== true}\n        />\n      </ModalBoxBody>\n      <Divider />\n    </Modal>\n  );\n}\n\ninterface IManagedItemState {\n  key: string | number;\n  enabled: boolean;\n  state?: unknown;\n}\n","import { Skeleton } from '@patternfly/react-core';\nimport { Table /* data-codemods */, Tbody, Td, Tr } from '@patternfly/react-table';\n\nexport function PageLoadingTable() {\n  return (\n    <Table gridBreakPoint=\"\" className=\"page-table\">\n      <Tbody>\n        {new Array(10).fill(0).map((_, index) => (\n          <Tr key={index}>\n            <Td>\n              <Skeleton height=\"27px\" />\n            </Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n}\n","import {\n  OnPerPageSelect,\n  OnSetPage,\n  Pagination,\n  PaginationVariant,\n  PerPageOptions,\n} from '@patternfly/react-core';\nimport { CSSProperties, useCallback } from 'react';\nimport { useBreakpoint } from '../components/useBreakPoint';\n\nexport type PagePaginationProps = {\n  itemCount?: number;\n  page: number;\n  perPage: number;\n  setPage: (page: number) => void;\n  setPerPage: (perPage: number) => void;\n  style?: CSSProperties;\n  topBorder?: boolean;\n  perPageOptions?: PerPageOptions[];\n};\n\nexport function PagePagination(props: PagePaginationProps) {\n  const { setPage, setPerPage } = props;\n  const onSetPage = useCallback<OnSetPage>((_event, page) => setPage(page), [setPage]);\n  const onPerPageSelect = useCallback<OnPerPageSelect>(\n    (_event, perPage) => setPerPage(perPage),\n    [setPerPage]\n  );\n  const compact = !useBreakpoint('md');\n\n  return (\n    <Pagination\n      data-cy=\"pagination\"\n      variant={PaginationVariant.bottom}\n      itemCount={props.itemCount}\n      page={props.page}\n      perPage={props.perPage}\n      onSetPage={onSetPage}\n      onPerPageSelect={onPerPageSelect}\n      perPageOptions={props.perPageOptions}\n      style={{\n        ...props.style,\n        boxShadow: 'none',\n        // ZIndex 400 is needed for PF table stick headers\n        zIndex: 400,\n        // marginTop: -1,\n        paddingTop: compact ? 4 : 6,\n        paddingBottom: compact ? 4 : 6,\n        // borderTop: props.topBorder ? 'thin solid var(--pf-v5-global--BorderColor--100)' : undefined,\n      }}\n      className=\"border-top bg-lighten\"\n    />\n  );\n}\n","import useResizeObserver from '@react-hook/resize-observer';\nimport { ReactNode, useCallback, useLayoutEffect, useRef, useState } from 'react';\n\nexport function PageGrid(props: { size?: number; maxColumns?: number; children?: ReactNode }) {\n  const size = props.size ?? 350;\n  const target = useRef<HTMLDivElement>(null);\n  const [gridTemplateColumns, setGridTemplateColumns] = useState('1fr');\n  const resize = useCallback(\n    (width: number) => {\n      let columns = Math.min(props.maxColumns ?? 12, Math.max(Math.floor(width / size), 1));\n      if (columns < 1) columns = 1;\n      setGridTemplateColumns(() => new Array(columns).fill('1fr').join(' '));\n    },\n    [props.maxColumns, size]\n  );\n  useResizeObserver(target, (entry) => resize(entry.contentRect.width));\n  useLayoutEffect(() => {\n    resize(target.current?.clientWidth ?? 0);\n  }, [resize]);\n  // const isMd = !useBreakpoint('lg');\n  // const isXS = !useBreakpoint('xs');\n  const gap = 16;\n  // if (isMd) gap = 16;\n  // if (isXS) gap = 8;\n  return (\n    <div ref={target} style={{ display: 'grid', gridAutoRows: '1fr', gridTemplateColumns, gap }}>\n      {props.children}\n    </div>\n  );\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/* eslint-disable @typescript-eslint/no-empty-function */\nimport {\n  Alert,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  Checkbox,\n  DescriptionList,\n  FlexItem,\n  Label,\n  LabelGroup,\n  Popover,\n  Text,\n  Truncate,\n} from '@patternfly/react-core';\nimport { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { ReactNode, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { IPageAction } from '../PageActions/PageAction';\nimport { PageActions } from '../PageActions/PageActions';\nimport { PageDetail } from '../PageDetails/PageDetail';\nimport { IconWrapper } from '../components/IconWrapper';\nimport { LabelColor } from '../components/pfcolors';\nimport {\n  ITableColumn,\n  ITableColumnTypeCount,\n  ITableColumnTypeLabels,\n  TableColumnCell,\n} from './PageTableColumn';\n\nexport const Small = styled.small`\n  opacity: 0.7;\n`;\nexport interface IPageTableCard {\n  id: string | number;\n  icon?: ReactNode;\n  title: ReactNode;\n  iconAboveTitle?: boolean;\n  subtitle?: ReactNode;\n  cardBody: ReactNode;\n  labels?: {\n    label: string;\n    color?: LabelColor;\n    icon?: ReactNode;\n    variant?: 'outline' | 'filled' | undefined;\n  }[]; // TODO - disable/enable auto generated filters\n  badge?: string;\n  badgeColor?: LabelColor;\n  badgeTooltip?: string;\n  badgeTooltipTitle?: string;\n  alertTitle?: string;\n  alertContent?: ReactNode;\n  alertVariant?: 'success' | 'danger' | 'warning' | 'info' | 'custom';\n}\n\nconst CardHeaderDiv = styled.div`\n  display: flex;\n  flex-wrap: nowrap;\n  max-width: 100%;\n`;\n\nconst CardIconDiv = styled.div`\n  margin-bottom: 16px;\n`;\n\nconst CardTopDiv = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  gap: 16px;\n  max-width: 100%;\n`;\n\nconst CardDiv = styled.div`\n  max-width: 100%;\n`;\n\nconst CardFooterDiv = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: end;\n  gap: 16px;\n`;\n\nconst CardFooterLabelsDiv = styled.div`\n  flex-grow: 1;\n`;\n\nexport const PageDetailDiv = styled.div`\n  display: flex;\n  gap: 16px;\n  margin-top: 8px;\n  flex-wrap: wrap;\n`;\n\nexport const ColumnsDiv = styled.div`\n  display: flex;\n  gap: 6px;\n  align-items: baseline;\n`;\n\nexport function PageTableCard<T extends object>(props: {\n  item: T;\n  itemToCardFn: (item: T) => IPageTableCard;\n  isSelected?: (item: T) => boolean;\n  selectItem?: (item: T) => void;\n  unselectItem?: (item: T) => void;\n  itemActions?: IPageAction<T>[];\n  showSelect?: boolean;\n  defaultCardSubtitle?: ReactNode;\n}) {\n  const {\n    item,\n    itemToCardFn,\n    isSelected,\n    selectItem,\n    unselectItem,\n    itemActions,\n    showSelect,\n    defaultCardSubtitle,\n  } = props;\n\n  const card = useMemo(() => itemToCardFn(item), [item, itemToCardFn]);\n\n  const isItemSelected = !!isSelected?.(item);\n\n  const onSelectClick = useCallback(() => {\n    if (isSelected?.(item)) {\n      unselectItem?.(item);\n    } else {\n      selectItem?.(item);\n    }\n  }, [isSelected, item, selectItem, unselectItem]);\n\n  const showDropdown = itemActions !== undefined && itemActions.length > 0;\n  const showActions = showSelect || showDropdown;\n\n  return (\n    <Card\n      id={card.id as string}\n      ouiaId={card.id as string}\n      key={card.id ?? card.title}\n      isFlat\n      isLarge\n      isRounded\n      isSelectable={isItemSelected}\n      isSelected={isItemSelected}\n      style={{\n        transition: 'box-shadow 0.25s',\n        cursor: 'default',\n        maxWidth: '100%',\n      }}\n    >\n      <CardHeader\n        {...(showActions && {\n          actions: {\n            actions: (\n              <>\n                {itemActions && itemActions.length && (\n                  <PageActions\n                    actions={itemActions}\n                    position={DropdownPosition.right}\n                    selectedItem={item}\n                    iconOnly\n                    collapse=\"always\"\n                  />\n                )}\n                {showSelect && (\n                  <Checkbox\n                    isChecked={isSelected?.(item)}\n                    onChange={onSelectClick}\n                    // aria-label=\"card checkbox example\"\n                    id=\"check-1\"\n                    // name=\"check1\"\n                  />\n                )}\n              </>\n            ),\n            hasNoOffset: false,\n            className: undefined,\n          },\n        })}\n        style={{ display: 'flex', flexWrap: 'nowrap', maxWidth: '100%' }}\n      >\n        <CardHeaderDiv>\n          <CardTopDiv>\n            {card.iconAboveTitle\n              ? null\n              : card.icon && <IconWrapper size=\"xl\">{card.icon}</IconWrapper>}\n            <CardDiv>\n              {card.iconAboveTitle ? (\n                <CardIconDiv>\n                  {card.icon && <IconWrapper size=\"xl\">{card.icon}</IconWrapper>}\n                </CardIconDiv>\n              ) : null}\n              <CardTitle>\n                <Truncate content={card.title as string} />\n              </CardTitle>\n              {card.subtitle ? (\n                <Text component=\"small\" style={{ opacity: 0.7 }}>\n                  {card.subtitle}\n                </Text>\n              ) : (\n                defaultCardSubtitle && (\n                  <Text component=\"small\" style={{ opacity: 0.7 }}>\n                    {defaultCardSubtitle}\n                  </Text>\n                )\n              )}\n            </CardDiv>\n          </CardTopDiv>\n          {card.badge && card.badgeTooltip && (\n            <FlexItem>\n              {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */}\n              <div onClick={(e) => e.stopPropagation()}>\n                <Popover headerContent={card.badgeTooltipTitle} bodyContent={card.badgeTooltip}>\n                  <Label color={card.badgeColor}>{card.badge}</Label>\n                </Popover>\n              </div>\n            </FlexItem>\n          )}\n          {card.badge && !card.badgeTooltip && (\n            <FlexItem>\n              <Label color={card.badgeColor}>{card.badge}</Label>\n            </FlexItem>\n          )}\n        </CardHeaderDiv>\n      </CardHeader>\n      {card.cardBody}\n      {card.labels && (\n        <CardFooter>\n          <CardFooterDiv>\n            <CardFooterLabelsDiv>\n              {card.labels && (\n                <LabelGroup numLabels={999}>\n                  {card.labels.map((item) => (\n                    <Label\n                      key={item.label}\n                      color={item.color}\n                      icon={item.icon}\n                      variant={item.variant}\n                    >\n                      <Truncate content={item.label} style={{ minWidth: 0 }} />\n                    </Label>\n                  ))}\n                </LabelGroup>\n              )}\n            </CardFooterLabelsDiv>\n          </CardFooterDiv>\n        </CardFooter>\n      )}\n      {card.alertTitle && (\n        <Alert title={card.alertTitle} isInline variant={card.alertVariant}>\n          {card.alertContent}\n        </Alert>\n      )}\n    </Card>\n  );\n}\n\nexport function useColumnsToTableCardFn<T extends object>(\n  columns: ITableColumn<T>[],\n  keyFn: (item: T) => string | number\n): (item: T) => IPageTableCard {\n  const data = useMemo(() => {\n    let nameColumn: ITableColumn<T> | undefined;\n    let subtitleColumn: ITableColumn<T> | undefined;\n    let descriptionColumn: ITableColumn<T> | undefined;\n    const countColumns: ITableColumnTypeCount<T>[] = [];\n    let labelColumn: ITableColumnTypeLabels<T> | undefined;\n    const cardColumns: ITableColumn<T>[] = [];\n\n    for (const column of columns) {\n      if (column.card === 'hidden') continue;\n      switch (column.type) {\n        case 'description':\n          if (!descriptionColumn) descriptionColumn = column;\n          break;\n        case 'labels':\n          if (!labelColumn) labelColumn = column;\n          break;\n        case 'count':\n          countColumns.push(column);\n          break;\n        default:\n          switch (column.card) {\n            case 'name':\n              nameColumn = column;\n              break;\n            case 'subtitle':\n              subtitleColumn = column;\n              break;\n            case 'description':\n              descriptionColumn = column;\n              break;\n            default:\n              cardColumns.push(column);\n              break;\n          }\n          break;\n      }\n    }\n    return {\n      nameColumn,\n      subtitleColumn,\n      descriptionColumn,\n      countColumns,\n      cardColumns,\n      labelColumn,\n    };\n  }, [columns]);\n\n  const { nameColumn, subtitleColumn, descriptionColumn, countColumns, cardColumns, labelColumn } =\n    data;\n\n  return useMemo<(item: T) => IPageTableCard>(() => {\n    return (item: T) => {\n      let hasDescription = !!descriptionColumn;\n      if (descriptionColumn?.value && !descriptionColumn.value(item)) {\n        hasDescription = false;\n      }\n\n      const visibleCardColumns = cardColumns.filter(\n        (column) => !column.value || column.value(item)\n      );\n\n      const pageTableCard: IPageTableCard = {\n        id: keyFn(item),\n        icon: nameColumn?.icon?.(item),\n        title: <TableColumnCell column={nameColumn} item={item} />,\n        subtitle: subtitleColumn && (!subtitleColumn.value || subtitleColumn.value(item)) && (\n          <TableColumnCell column={subtitleColumn} item={item} />\n        ),\n        cardBody: (\n          <CardBody>\n            <DescriptionList isCompact>\n              {hasDescription && descriptionColumn && (\n                <PageDetail key={descriptionColumn.id ?? descriptionColumn.header}>\n                  {descriptionColumn.type === 'description' ? (\n                    <div>{descriptionColumn.value(item)}</div>\n                  ) : (\n                    <TableColumnCell column={descriptionColumn} item={item} />\n                  )}\n                </PageDetail>\n              )}\n              {visibleCardColumns.map((column) => (\n                <PageDetail key={column.id ?? column.header} label={column.header}>\n                  <TableColumnCell column={column} item={item} />\n                </PageDetail>\n              ))}\n              {countColumns.length > 0 && (\n                <PageDetail key=\"count-columns\">\n                  <PageDetailDiv>\n                    {countColumns.map((column, i) => (\n                      <ColumnsDiv key={i}>\n                        <TableColumnCell column={column} item={item} />\n                        <Small>{column.header}</Small>\n                      </ColumnsDiv>\n                    ))}\n                  </PageDetailDiv>\n                </PageDetail>\n              )}\n            </DescriptionList>\n          </CardBody>\n        ),\n        labels: labelColumn && labelColumn.value(item)?.map((label) => ({ label })),\n      };\n      if (!hasDescription && visibleCardColumns.length === 0 && countColumns.length === 0) {\n        pageTableCard.cardBody = undefined;\n      }\n      return pageTableCard;\n    };\n  }, [\n    cardColumns,\n    countColumns,\n    descriptionColumn,\n    labelColumn,\n    nameColumn,\n    subtitleColumn,\n    keyFn,\n  ]);\n}\n","import { PageSection } from '@patternfly/react-core';\nimport { useMemo } from 'react';\nimport { PageGrid } from '../components/PageGrid';\nimport { PageTableProps } from './PageTable';\nimport { PageTableCard, useColumnsToTableCardFn } from './PageTableCard';\n\nexport type PageTableCardsProps<T extends object> = PageTableProps<T>;\n\nexport function PageTableCards<T extends object>(props: PageTableCardsProps<T>) {\n  const {\n    keyFn,\n    pageItems: items,\n    tableColumns,\n    isSelected,\n    selectItem,\n    unselectItem,\n    rowActions,\n    showSelect,\n    defaultSubtitle: defaultCardSubtitle,\n  } = props;\n\n  const itemToCardFn = useColumnsToTableCardFn(tableColumns, keyFn);\n\n  const catalogCards = useMemo(() => {\n    return (\n      <PageGrid size={400}>\n        {items?.map((item) => (\n          <PageTableCard<T>\n            key={keyFn(item)}\n            item={item}\n            itemToCardFn={itemToCardFn}\n            isSelected={isSelected}\n            selectItem={selectItem}\n            unselectItem={unselectItem}\n            itemActions={rowActions}\n            showSelect={showSelect}\n            defaultCardSubtitle={defaultCardSubtitle}\n          />\n        ))}\n      </PageGrid>\n    );\n  }, [\n    items,\n    keyFn,\n    itemToCardFn,\n    isSelected,\n    selectItem,\n    unselectItem,\n    rowActions,\n    showSelect,\n    defaultCardSubtitle,\n  ]);\n\n  return <PageSection style={{ flexGrow: 1 }}>{catalogCards}</PageSection>;\n}\n","import {\n  DataList,\n  DataListAction,\n  DataListCell,\n  DataListCheck,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Flex,\n  Stack,\n  Text,\n  Title,\n} from '@patternfly/react-core';\nimport { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { ReactNode, useCallback, useMemo } from 'react';\nimport { IPageAction } from '../PageActions/PageAction';\nimport { PageActions } from '../PageActions/PageActions';\nimport { IconWrapper } from '../components/IconWrapper';\nimport { PageTableProps } from './PageTable';\nimport {\n  ITableColumn,\n  ITableColumnTypeCount,\n  ITableColumnTypeLabels,\n  TableColumnCell,\n} from './PageTableColumn';\n\nexport type PageTableListProps<T extends object> = PageTableProps<T>;\n\nexport function PageTableList<T extends object>(props: PageTableListProps<T>) {\n  const {\n    keyFn,\n    pageItems,\n    tableColumns,\n    isSelected,\n    selectItem,\n    unselectItem,\n    rowActions,\n    defaultSubtitle: defaultCardSubtitle,\n    showSelect,\n  } = props;\n\n  const columnsToDataList = useColumnsToDataList(\n    tableColumns,\n    keyFn,\n    isSelected,\n    selectItem,\n    unselectItem,\n    rowActions,\n    defaultCardSubtitle,\n    showSelect\n  );\n\n  return (\n    <DataList aria-label=\"TODO\" style={{ marginTop: -1, maxWidth: '100%', overflow: 'hidden' }}>\n      {pageItems?.map(columnsToDataList)}\n    </DataList>\n  );\n}\n\nexport function useColumnsToDataList<T extends object>(\n  tableColumns: ITableColumn<T>[],\n  keyFn: (item: T) => string | number,\n  isSelected?: (item: T) => boolean,\n  selectItem?: (item: T) => void,\n  unselectItem?: (item: T) => void,\n  rowActions?: IPageAction<T>[],\n  defaultCardSubtitle?: ReactNode,\n  showSelect?: boolean\n): (item: T) => ReactNode {\n  const data = useMemo(() => {\n    let nameColumn: ITableColumn<T> | undefined;\n    let subtitleColumn: ITableColumn<T> | undefined;\n    let descriptionColumn: ITableColumn<T> | undefined;\n    const countColumns: ITableColumnTypeCount<T>[] = [];\n    let labelColumn: ITableColumnTypeLabels<T> | undefined;\n    const primaryColumns: ITableColumn<T>[] = [];\n    const secondaryColumns: ITableColumn<T>[] = [];\n\n    for (const column of tableColumns) {\n      if (column.list === 'hidden') continue;\n      switch (column.type) {\n        case 'description':\n          if (!descriptionColumn) descriptionColumn = column;\n          break;\n        case 'labels':\n          if (!labelColumn) labelColumn = column;\n          break;\n        case 'count':\n          countColumns.push(column);\n          break;\n        default:\n          switch (column.list) {\n            case 'name':\n              nameColumn = column;\n              break;\n            case 'subtitle':\n              subtitleColumn = column;\n              break;\n            case 'description':\n              descriptionColumn = column;\n              break;\n            case 'secondary':\n              secondaryColumns.push(column);\n              break;\n            default:\n              primaryColumns.push(column);\n              break;\n          }\n          break;\n      }\n    }\n    return {\n      nameColumn,\n      subtitleColumn,\n      descriptionColumn,\n      countColumns,\n      primaryColumns,\n      secondaryColumns,\n      labelColumn,\n    };\n  }, [tableColumns]);\n\n  const onSelectClick = useCallback(\n    (item: T) => {\n      if (isSelected?.(item)) {\n        unselectItem?.(item);\n      } else {\n        selectItem?.(item);\n      }\n    },\n    [isSelected, selectItem, unselectItem]\n  );\n\n  const {\n    nameColumn,\n    subtitleColumn,\n    descriptionColumn,\n    countColumns,\n    primaryColumns,\n    secondaryColumns,\n    labelColumn,\n  } = data;\n\n  return useCallback(\n    (item: T) => {\n      const key = keyFn(item);\n      const isItemSelected = isSelected?.(item);\n      return (\n        <DataListItem key={key} aria-labelledby={`data-list-${key}`} isExpanded={isItemSelected}>\n          <DataListItemRow>\n            {showSelect && (\n              <DataListCheck\n                aria-labelledby={`data-list-check-${key}`}\n                name={`data-list-check-${key}`}\n                isChecked={isSelected?.(item)}\n                onClick={() => onSelectClick(item)}\n                data-cy={'data-list-check'}\n              />\n            )}\n            <DataListItemCells\n              dataListCells={[\n                <DataListCell key=\"primary\" width={5}>\n                  <Flex>\n                    <Stack hasGutter>\n                      <Flex alignItems={{ default: 'alignItemsCenter' }}>\n                        {nameColumn?.icon && (\n                          <IconWrapper size=\"xl\">{nameColumn?.icon(item)}</IconWrapper>\n                        )}\n                        <Stack>\n                          <Title\n                            headingLevel=\"h2\"\n                            style={{ marginTop: -4, fontWeight: 'bold' }}\n                            data-cy={'data-list-name'}\n                          >\n                            <span id={`data-list-${key}`}>\n                              <TableColumnCell column={nameColumn} item={item} />\n                            </span>\n                          </Title>\n                          {subtitleColumn ? (\n                            <Text component=\"small\" style={{ opacity: 0.7 }}>\n                              <TableColumnCell column={subtitleColumn} item={item} />\n                            </Text>\n                          ) : (\n                            defaultCardSubtitle && (\n                              <Text component=\"small\" style={{ opacity: 0.7 }}>\n                                {defaultCardSubtitle}\n                              </Text>\n                            )\n                          )}\n                        </Stack>\n                      </Flex>\n                      {(descriptionColumn ||\n                        primaryColumns.length > 0 ||\n                        countColumns.length > 0 ||\n                        labelColumn) && (\n                        <DescriptionList isCompact>\n                          {descriptionColumn &&\n                            (!descriptionColumn.value || descriptionColumn.value(item)) && (\n                              <DescriptionListGroup key={descriptionColumn.header}>\n                                <DescriptionListDescription>\n                                  <TableColumnCell column={descriptionColumn} item={item} />\n                                </DescriptionListDescription>\n                              </DescriptionListGroup>\n                            )}\n                          {primaryColumns.map((column) => {\n                            if (column.value && !column.value(item)) return <></>;\n                            return (\n                              <DescriptionListGroup key={column.header}>\n                                <DescriptionListTerm style={{ whiteSpace: 'nowrap', opacity: 0.6 }}>\n                                  {column.header}\n                                </DescriptionListTerm>\n                                <DescriptionListDescription>\n                                  <TableColumnCell column={column} item={item} />\n                                </DescriptionListDescription>\n                              </DescriptionListGroup>\n                            );\n                          })}\n                          {countColumns.length > 0 && (\n                            <DescriptionListGroup key=\"counts\">\n                              <DescriptionListDescription>\n                                <div\n                                  style={{\n                                    display: 'flex',\n                                    gap: 16,\n                                    marginTop: 8,\n                                    flexWrap: 'wrap',\n                                  }}\n                                >\n                                  {countColumns.map((column, i) => (\n                                    <div\n                                      key={i}\n                                      style={{ display: 'flex', gap: 6, alignItems: 'baseline' }}\n                                    >\n                                      <TableColumnCell column={column} item={item} />\n                                      <small style={{ opacity: 0.7 }}>{column.header}</small>\n                                    </div>\n                                  ))}\n                                </div>\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                          )}\n                          {labelColumn && (\n                            <DescriptionListGroup key={labelColumn.header}>\n                              <DescriptionListDescription>\n                                <TableColumnCell column={labelColumn} item={item} />\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                          )}\n                        </DescriptionList>\n                      )}\n                    </Stack>\n                  </Flex>\n                </DataListCell>,\n                secondaryColumns.length > 0 ? (\n                  <DataListCell key=\"secondary\">\n                    <DescriptionList isCompact>\n                      {secondaryColumns.map((column) => {\n                        if (column.value && !column.value(item)) return <></>;\n                        return (\n                          <DescriptionListGroup key={column.header}>\n                            <DescriptionListTerm style={{ whiteSpace: 'nowrap', opacity: 0.6 }}>\n                              {column.header}\n                            </DescriptionListTerm>\n                            <DescriptionListDescription>\n                              <TableColumnCell column={column} item={item} />\n                            </DescriptionListDescription>\n                          </DescriptionListGroup>\n                        );\n                      })}\n                    </DescriptionList>\n                  </DataListCell>\n                ) : null,\n              ]}\n            />\n            {rowActions && (\n              <DataListAction\n                aria-labelledby=\"check-action-item1 check-action-action1\"\n                id=\"check-action-action1\"\n                aria-label=\"Actions\"\n                isPlainButtonAction\n                style={{ whiteSpace: 'nowrap' }}\n                data-cy={'data-list-action'}\n              >\n                <PageActions\n                  actions={rowActions}\n                  position={DropdownPosition.right}\n                  selectedItem={item}\n                  iconOnly\n                  collapse=\"always\"\n                />\n              </DataListAction>\n            )}\n          </DataListItemRow>\n        </DataListItem>\n      );\n    },\n    [\n      keyFn,\n      isSelected,\n      showSelect,\n      nameColumn,\n      subtitleColumn,\n      defaultCardSubtitle,\n      primaryColumns,\n      descriptionColumn,\n      countColumns,\n      labelColumn,\n      secondaryColumns,\n      rowActions,\n      onSelectClick,\n    ]\n  );\n}\n","import {\n  Button,\n  EmptyState,\n  EmptyStateActions,\n  EmptyStateBody,\n  EmptyStateFooter,\n  EmptyStateHeader,\n  EmptyStateIcon,\n  Flex,\n  PageSection,\n  PerPageOptions,\n  Stack,\n} from '@patternfly/react-core';\nimport { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport {\n  CollapseColumn,\n  SortByDirection,\n  Table /* data-codemods */,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport { ThSortType } from '@patternfly/react-table/dist/esm/components/Table/base/types';\nimport useResizeObserver from '@react-hook/resize-observer';\nimport {\n  Dispatch,\n  Fragment,\n  MouseEvent,\n  ReactNode,\n  SetStateAction,\n  UIEvent,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport styled from 'styled-components';\nimport { IPageAction, PageActionSelection } from '../PageActions/PageAction';\nimport { PageActions } from '../PageActions/PageActions';\nimport { PageDetails } from '../PageDetails/PageDetails';\nimport { PageDetailsFromColumns } from '../PageDetails/PageDetailsFromColumns';\nimport { usePageSettings } from '../PageSettings/PageSettingsProvider';\nimport { PageTableViewType, PageTableViewTypeE } from '../PageToolbar/PageTableViewType';\nimport { PageToolbar } from '../PageToolbar/PageToolbar';\nimport { IFilterState, IToolbarFilter } from '../PageToolbar/PageToolbarFilter';\nimport { usePageToolbarSortOptionsFromColumns } from '../PageToolbar/PageToolbarSort';\nimport { EmptyStateError } from '../components/EmptyStateError';\nimport { EmptyStateNoData } from '../components/EmptyStateNoData';\nimport { Scrollable } from '../components/Scrollable';\nimport { useManageColumns } from '../components/useManageColumns';\nimport { getID } from '../hooks/useID';\nimport { useFrameworkTranslations } from '../useFrameworkTranslations';\nimport { PageLoadingTable } from './PageLoadingTable';\nimport { PagePagination } from './PagePagination';\nimport { PageTableCards } from './PageTableCards';\nimport {\n  ITableColumn,\n  TableColumnCell,\n  useDescriptionColumns,\n  useExpandedColumns,\n  useVisibleTableColumns,\n} from './PageTableColumn';\nimport { PageTableList } from './PageTableList';\n\nconst ScrollDiv = styled.div`\n  flex: 1;\n`;\n\nexport type PageTableProps<T extends object> = {\n  id?: string;\n\n  keyFn: (item: T) => string | number;\n\n  itemCount?: number;\n\n  /** The current page of items to show. If undefined, then the table shows a loading state. */\n  pageItems: T[] | undefined;\n\n  toolbarActions?: IPageAction<T>[];\n  tableColumns: ITableColumn<T>[];\n  rowActions?: IPageAction<T>[];\n\n  toolbarFilters?: IToolbarFilter[];\n  filterState?: IFilterState;\n  setFilterState?: Dispatch<SetStateAction<IFilterState>>;\n  clearAllFilters?: () => void;\n  page: number;\n  perPage: number;\n  setPage: (page: number) => void;\n  setPerPage: (perPage: number) => void;\n  perPageOptions?: PerPageOptions[];\n  sort?: string;\n  setSort?: (sort: string) => void;\n  sortDirection?: 'asc' | 'desc';\n  setSortDirection?: (sortDirection: 'asc' | 'desc') => void;\n  compact?: boolean;\n  borderless?: boolean;\n\n  /** Auto hide the pagination at the bottom of the table if there are less items than in a page. */\n  autoHidePagination?: boolean;\n\n  isSelected?: (item: T) => boolean;\n  isSelectMultiple?: boolean;\n  selectedItems?: T[];\n  selectItem?: (item: T) => void;\n  unselectItem?: (item: T) => void;\n  selectItems?: (items: T[]) => void;\n  unselectAll?: () => void;\n\n  /**\n   * Callback where if defined, enables single selection of items in the table.\n   */\n  // TODO rename to onSingleSelect\n  onSelect?: (item: T) => void;\n\n  // TODO make error state a react component? <TableError /> What to do if not provided? - reuse CommonEmptyStates\n  // TODO make empty state a react component? <TableEmpty /> What to do if not provided? - reuse CommonEmptyStates\n\n  errorStateTitle: string;\n  error?: Error;\n\n  emptyStateTitle: string;\n  emptyStateDescription?: string | null;\n  emptyStateIcon?: React.ComponentClass;\n  emptyStateNoDataIcon?: React.ComponentClass;\n  emptyStateActions?: IPageAction<T>[];\n  emptyStateButtonIcon?: React.ReactNode;\n  emptyStateButtonText?: string | null;\n  emptyStateButtonClick?: () => void;\n  emptyStateVariant?: 'default' | 'light' | 'dark' | 'darker';\n\n  /**\n   * Enables multi-selection of items even though there are no actions that are bulk actions.\n   * This is used in the bulk select dialog where the selected items are used outside the table.\n   */\n  // TODO rename to showMultiSelect\n  showSelect?: boolean;\n\n  disableTableView?: boolean;\n  disableListView?: boolean;\n  disableCardView?: boolean;\n\n  // TODO remember user setting so that when they return to this table it uses their last setting\n  defaultTableView?: PageTableViewType;\n\n  // hides table - useful for Analytics, where there is preview mode which shows toolbar and chart (as topContent props), but no table\n  hideTable?: boolean;\n\n  /**\n   * Disables the padding that shows up on large screens around the table.\n   * Used in modals and other places.\n   */\n  // TODO - There is a request to add a user setting to allow users to turn off padding.\n  disableBodyPadding?: boolean;\n  disablePagination?: boolean;\n  /**\n   * Default subtitle is used in list and card views as the default subtitle if there is no subtitle column.\n   * Example is team card that has the work 'team' under the team name. Makes the card feel polished.\n   */\n  defaultSubtitle?: ReactNode;\n\n  /**\n   * A render function that if defined, enables expanded row content.\n   * Columns that are marked as expanded content will enable the expanded row\n   * and will add to the content returned from the expandedRow render function.\n   */\n  expandedRow?: (item: T) => ReactNode;\n\n  disableLastRowBorder?: boolean;\n\n  /** Optional: Max selections permitted in a table. If this number of selections has been made,\n   * the checkboxes on the rest of the rows are disabled until an item is unselected.\n   */\n  maxSelections?: number;\n\n  /**\n   * This will render content between PageToolbar and table header. Set\n   * scrollOutsideTable to true, if you want proper scrolling in table.\n   */\n  topContent?: React.ReactNode;\n\n  toolbarContent?: React.ReactNode;\n\n  /**\n   * If topContent is set and this variable is set to true, topContent will be scrolled with table.\n   */\n  scrollTopContent?: boolean;\n\n  /**\n   * Limits the filters so that only one filter can be set to an OR operation.\n   *\n   * Example: AWX can either have an OR on type or status but not both.\n   * So once one has 2 selections, the other becomes a single select.\n   * Example: (Status is pending or success) and type is inventory.\n   */\n  limitFiltersToOneOrOperation?: boolean;\n\n  defaultExpandedRows?: boolean;\n};\n\n/**\n * The PageTable component is used for adding a table to a page.\n *\n * See the [Table Guide](docs/guides/PageTableGuide.md).\n *\n * @example\n * ```tsx\n * <Page>\n *   <PageLayout>\n *     <PageHeader ... />\n *     <PageTable ... />\n *   </PageLayout>\n * </Page>\n * ```\n */\nexport function PageTable<T extends object>(props: PageTableProps<T>) {\n  const { id, toolbarActions, filterState, error, itemCount } = props;\n\n  const showSelect =\n    props.showSelect ||\n    toolbarActions?.find(\n      (action) => 'selection' in action && action.selection === PageActionSelection.Multiple\n    ) !== undefined;\n\n  const hasTableViewType = !props.disableTableView;\n  const hasListViewType = !props.disableListView;\n  // const hasCardViewType = !props.disableCardView;\n\n  const [viewType, setViewTypeState] = useState<PageTableViewType>(() => {\n    const value = props.id ? localStorage.getItem(props.id + '-view') : undefined;\n    switch (value) {\n      case 'table':\n        return PageTableViewTypeE.Table;\n      case 'list':\n        return PageTableViewTypeE.List;\n      case 'cards':\n        return PageTableViewTypeE.Cards;\n    }\n    return (\n      props.defaultTableView ??\n      (hasTableViewType\n        ? PageTableViewTypeE.Table\n        : hasListViewType\n          ? PageTableViewTypeE.List\n          : PageTableViewTypeE.Cards)\n    );\n  });\n  const setViewType = useCallback(\n    (viewType: PageTableViewType) => {\n      setViewTypeState(viewType);\n      if (props.id) {\n        localStorage.setItem(props.id + '-view', viewType);\n      }\n    },\n    [props.id]\n  );\n\n  const { openColumnManagement, managedColumns } = useManageColumns<T>(\n    (id ?? '') + '-columns',\n    props.tableColumns,\n    viewType !== PageTableViewTypeE.Table,\n    viewType !== PageTableViewTypeE.List,\n    viewType !== PageTableViewTypeE.Cards\n  );\n\n  const sortOptions = usePageToolbarSortOptionsFromColumns(props.tableColumns);\n  if (error) {\n    return <EmptyStateError titleProp={props.errorStateTitle} message={error.message} />;\n  }\n\n  if (itemCount === 0 && Object.keys(filterState ?? {}).length === 0) {\n    return (\n      <EmptyStateNoData\n        title={props.emptyStateTitle}\n        description={props.emptyStateDescription}\n        icon={props.emptyStateNoDataIcon}\n        button={\n          (props.emptyStateButtonClick && (\n            <Button\n              data-cy={\n                props.emptyStateButtonText\n                  ? convertString(props.emptyStateButtonText)\n                  : 'create-resource'\n              }\n              variant=\"primary\"\n              onClick={props.emptyStateButtonClick}\n              icon={props.emptyStateButtonIcon ? props.emptyStateButtonIcon : null}\n            >\n              {props.emptyStateButtonText}\n            </Button>\n          )) ||\n          (props.emptyStateActions && (\n            <Flex justifyContent={{ default: 'justifyContentCenter' }}>\n              <PageActions actions={props.emptyStateActions} />\n            </Flex>\n          ))\n        }\n      />\n    );\n  }\n\n  let topContent = props.topContent;\n  if (topContent) {\n    topContent = (\n      <PageSection\n        variant=\"light\"\n        padding={{ default: 'noPadding' }}\n        style={{\n          borderBottom: 'thin solid var(--pf-v5-global--BorderColor--100)',\n        }}\n      >\n        {props.topContent}\n      </PageSection>\n    );\n  }\n\n  return (\n    <>\n      <PageToolbar\n        {...props}\n        openColumnModal={props.id ? openColumnManagement : undefined}\n        showSelect={showSelect}\n        viewType={viewType}\n        setViewType={setViewType}\n        sortOptions={sortOptions}\n        limitFiltersToOneOrOperation={props.limitFiltersToOneOrOperation}\n      />\n      {viewType === PageTableViewTypeE.Table && (\n        <>\n          {props.scrollTopContent ? (\n            <Scrollable>\n              {topContent}\n              {!props.hideTable && <PageTableView {...props} tableColumns={managedColumns} />}\n            </Scrollable>\n          ) : (\n            <>\n              {topContent}\n              {!props.hideTable && <PageTableView {...props} tableColumns={managedColumns} />}\n            </>\n          )}\n        </>\n      )}\n      {viewType === PageTableViewTypeE.List && (\n        <>\n          {props.scrollTopContent ? (\n            <Scrollable>\n              {topContent}\n              <PageSection padding={{ default: 'noPadding' }}>\n                {!props.hideTable && (\n                  <PageTableList {...props} showSelect={showSelect} tableColumns={managedColumns} />\n                )}\n              </PageSection>\n            </Scrollable>\n          ) : (\n            <>\n              {topContent}\n              <Scrollable>\n                <PageSection padding={{ default: 'noPadding' }}>\n                  {!props.hideTable && (\n                    <PageTableList\n                      {...props}\n                      showSelect={showSelect}\n                      tableColumns={managedColumns}\n                    />\n                  )}\n                </PageSection>\n              </Scrollable>\n            </>\n          )}\n        </>\n      )}\n      {viewType === PageTableViewTypeE.Cards && (\n        <>\n          {props.scrollTopContent ? (\n            <Scrollable>\n              {topContent}\n              {!props.hideTable && (\n                <PageTableCards {...props} showSelect={showSelect} tableColumns={managedColumns} />\n              )}\n            </Scrollable>\n          ) : (\n            <>\n              {topContent}\n              <Scrollable>\n                {!props.hideTable && (\n                  <PageTableCards\n                    {...props}\n                    showSelect={showSelect}\n                    tableColumns={managedColumns}\n                  />\n                )}\n              </Scrollable>\n            </>\n          )}\n        </>\n      )}\n      {!props.disablePagination &&\n        (!props.autoHidePagination || (props.itemCount ?? 0) > props.perPage) && (\n          <PagePagination {...props} topBorder={!props.autoHidePagination} />\n        )}\n    </>\n  );\n}\n\nfunction PageTableView<T extends object>(props: PageTableProps<T>) {\n  const {\n    pageItems,\n    selectItem,\n    unselectItem,\n    isSelected,\n    isSelectMultiple,\n    keyFn,\n    rowActions,\n    toolbarActions,\n    itemCount,\n    clearAllFilters,\n    onSelect,\n    unselectAll,\n    maxSelections,\n  } = props;\n\n  const tableColumns = useVisibleTableColumns(props.tableColumns);\n\n  const descriptionColumns = useDescriptionColumns(props.tableColumns);\n  const expandedRowColumns = useExpandedColumns(props.tableColumns);\n  const expandedRow = useMemo(() => {\n    const expandedRowFunctions: ((item: T) => ReactNode)[] = [];\n\n    if (descriptionColumns.length) {\n      for (const descriptionColumn of descriptionColumns) {\n        if ('value' in descriptionColumn) {\n          expandedRowFunctions.push((item) => {\n            const value = descriptionColumn.value?.(item);\n            if (value) {\n              return <div key={descriptionColumn.id ?? descriptionColumn.header}>{value}</div>;\n            }\n          });\n        } else {\n          expandedRowFunctions.push((item) => descriptionColumn.cell(item));\n        }\n      }\n    }\n\n    if (expandedRowColumns.length) {\n      expandedRowFunctions.push((item) => {\n        const hasColumnWithValues = expandedRowColumns.some(\n          (column) => column.value?.(item) !== undefined\n        );\n        if (!hasColumnWithValues) return null;\n        return (\n          <PageDetails\n            disablePadding\n            numberOfColumns=\"multiple\"\n            labelOrientation=\"vertical\"\n            isCompact\n            disableScroll\n          >\n            <PageDetailsFromColumns key={keyFn(item)} item={item} columns={expandedRowColumns} />\n          </PageDetails>\n        );\n      });\n    }\n\n    if (props.expandedRow) {\n      expandedRowFunctions.push(props.expandedRow);\n    }\n\n    if (expandedRowFunctions.length === 0) return undefined;\n\n    const newExpandedRow = (item: T) => {\n      const expandedRowContent = expandedRowFunctions\n        .map((fn) => fn(item))\n        .filter((content) => content !== null && content !== undefined);\n      if (expandedRowContent.length === 0) return null;\n      return <Stack hasGutter>{expandedRowFunctions.map((fn) => fn(item))}</Stack>;\n    };\n\n    return newExpandedRow;\n  }, [descriptionColumns, expandedRowColumns, keyFn, props.expandedRow]);\n\n  const [translations] = useFrameworkTranslations();\n  const showSelect =\n    props.showSelect ||\n    toolbarActions?.find(\n      (action) => 'selection' in action && action.selection === PageActionSelection.Multiple\n    ) !== undefined;\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [scroll, setScroll] = useState<{\n    left: number;\n    right: number;\n    top: number;\n    bottom: number;\n  }>({\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n  });\n  const updateScroll = useCallback((div: HTMLDivElement | null) => {\n    if (!div) return;\n    setScroll({\n      top: div.scrollTop,\n      bottom: div.scrollHeight - div.clientHeight - div.scrollTop,\n      left: div.scrollLeft,\n      right: div.scrollWidth - div.clientWidth - div.scrollLeft,\n    });\n  }, []);\n  const onScroll = useCallback(\n    (event: UIEvent<HTMLDivElement>) => updateScroll(event.currentTarget),\n    [updateScroll]\n  );\n  useResizeObserver(containerRef, () => updateScroll(containerRef.current));\n  useEffect(() => updateScroll(containerRef.current), [updateScroll]);\n\n  const settings = usePageSettings();\n\n  let returnElement: JSX.Element;\n  if (props.itemCount === undefined || pageItems === undefined) {\n    returnElement = <PageLoadingTable />;\n  } else {\n    returnElement = (\n      <>\n        <Table\n          aria-label=\"Simple table\"\n          ouiaId=\"simple-table\"\n          variant={\n            props.compact ? 'compact' : settings.tableLayout === 'compact' ? 'compact' : undefined\n          }\n          borders={!props.borderless}\n          gridBreakPoint=\"\"\n          isStickyHeader\n          className=\"page-table\"\n        >\n          <TableHead\n            {...props}\n            showSelect={showSelect}\n            scrollLeft={scroll.left > 0}\n            scrollRight={scroll.right > 1}\n            tableColumns={tableColumns}\n            onSelect={onSelect}\n            expandedRow={expandedRow}\n          />\n          <Tbody>\n            {pageItems.map((item, rowIndex) => (\n              <TableRow<T>\n                key={keyFn ? keyFn(item) : rowIndex}\n                columns={tableColumns}\n                item={item}\n                isItemSelected={isSelected?.(item)}\n                isSelectMultiple={isSelectMultiple}\n                selectItem={selectItem}\n                unselectItem={unselectItem}\n                rowActions={rowActions}\n                rowIndex={rowIndex}\n                showSelect={showSelect}\n                scrollLeft={scroll.left > 0}\n                scrollRight={scroll.right > 1}\n                unselectAll={unselectAll}\n                onSelect={onSelect}\n                expandedRow={expandedRow}\n                isLastRow={rowIndex === pageItems.length - 1}\n                disableLastRowBorder={props.disableLastRowBorder}\n                maxSelections={maxSelections}\n                selectedItems={props.selectedItems}\n                defaultExpandedRows={props.defaultExpandedRows}\n              />\n            ))}\n          </Tbody>\n        </Table>\n        {itemCount === 0 && (\n          <EmptyState isFullHeight>\n            <EmptyStateHeader\n              titleText={<>{translations.noResultsFound}</>}\n              icon={<EmptyStateIcon icon={props.emptyStateIcon ?? SearchIcon} />}\n              headingLevel=\"h2\"\n            />\n            <EmptyStateBody>{translations.noResultsMatchCriteria}</EmptyStateBody>\n            <EmptyStateFooter>\n              {clearAllFilters && (\n                <EmptyStateActions>\n                  <Button variant=\"primary\" onClick={clearAllFilters}>\n                    {translations.clearAllFilters}\n                  </Button>\n                </EmptyStateActions>\n              )}\n            </EmptyStateFooter>\n          </EmptyState>\n        )}\n      </>\n    );\n  }\n\n  if (!props.scrollTopContent) {\n    returnElement = (\n      <ScrollDiv\n        className=\"pf-v5-c-scroll-inner-wrapper\"\n        ref={containerRef}\n        onScroll={onScroll}\n        style={{\n          backgroundColor: 'var(--pf-v5-global--BackgroundColor--100)',\n        }}\n      >\n        {returnElement}\n      </ScrollDiv>\n    );\n  }\n\n  return returnElement;\n}\n\nfunction TableHead<T extends object>(props: {\n  tableColumns: ITableColumn<T>[];\n  rowActions?: IPageAction<T>[];\n  sort?: string;\n  setSort?: (sort: string) => void;\n  sortDirection?: 'asc' | 'desc';\n  setSortDirection?: (sortDirection: 'asc' | 'desc') => void;\n  showSelect?: boolean;\n  scrollLeft?: boolean;\n  scrollRight?: boolean;\n  onSelect?: (item: T) => void;\n  expandedRow?: (item: T) => ReactNode;\n}) {\n  const {\n    tableColumns: columns,\n    rowActions: itemActions,\n    sort,\n    setSort,\n    sortDirection,\n    setSortDirection,\n    showSelect,\n    onSelect,\n    expandedRow,\n  } = props;\n\n  const getColumnSort = useCallback<\n    (columnIndex: number, column: ITableColumn<T>) => ThSortType | undefined\n  >(\n    (columnIndex: number, column: ITableColumn<T>) => {\n      if (!column.sort) return undefined;\n      return {\n        onSort: (_event: MouseEvent, _columnIndex: number, sortByDirection: SortByDirection) => {\n          if (column.sort) {\n            setSort?.(column.sort);\n            setSortDirection?.(sortByDirection);\n          }\n        },\n        sortBy: {\n          index: column.sort === sort ? columnIndex : undefined,\n          direction: column.sort === sort ? sortDirection : undefined,\n          defaultDirection: column.defaultSortDirection,\n        },\n        columnIndex,\n      };\n    },\n    [setSort, setSortDirection, sort, sortDirection]\n  );\n\n  return (\n    <Thead>\n      <Tr className=\"bg-lighten\">\n        {expandedRow && <Th style={{ padding: 0 }} className=\"bg-lighten\" />}\n        {(showSelect || onSelect) && (\n          <Th\n            isStickyColumn\n            stickyMinWidth=\"0px\"\n            hasRightBorder={props.scrollLeft}\n            data-cy={'selections-column-header'}\n            className={props.scrollLeft ? 'bg-lighten-2' : 'bg-lighten'}\n          >\n            &nbsp;\n          </Th>\n        )}\n        {columns.map((column, index) => {\n          return (\n            <Th\n              key={column.header}\n              sort={getColumnSort(index, column)}\n              modifier=\"nowrap\"\n              style={{\n                minWidth:\n                  column.minWidth === 0\n                    ? '1%'\n                    : column.minWidth !== undefined\n                      ? column.minWidth\n                      : undefined,\n                maxWidth: column.maxWidth !== undefined ? column.maxWidth : undefined,\n                width: column.fullWidth ? '100%' : undefined,\n              }}\n              data-cy={getID(column.header + '-column-header')}\n              className=\"bg-lighten\"\n            >\n              {column.header}\n            </Th>\n          );\n        })}\n        {itemActions !== undefined && (\n          <Td\n            isActionCell\n            isStickyColumn\n            stickyMinWidth=\"0px\"\n            style={{\n              right: 0,\n              padding: 0,\n              paddingRight: 0,\n              zIndex: 302,\n            }}\n            className={props.scrollRight ? 'pf-m-border-left bg-lighten-2' : 'bg-lighten'}\n            data-cy={'action-column-header'}\n          >\n            &nbsp;\n          </Td>\n        )}\n      </Tr>\n    </Thead>\n  );\n}\n\nfunction TableRow<T extends object>(props: {\n  columns: ITableColumn<T>[];\n  item: T;\n  isItemSelected?: boolean;\n  isSelectMultiple?: boolean;\n  selectItem?: (item: T) => void;\n  unselectItem?: (item: T) => void;\n  rowActions?: IPageAction<T>[];\n  rowIndex: number;\n  showSelect: boolean;\n  scrollLeft?: boolean;\n  scrollRight?: boolean;\n  onSelect?: (item: T) => void;\n  unselectAll?: () => void;\n  expandedRow?: (item: T) => ReactNode;\n  isLastRow?: boolean;\n  disableLastRowBorder?: boolean;\n  maxSelections?: number;\n  selectedItems?: T[];\n  defaultExpandedRows?: boolean;\n}) {\n  const {\n    columns,\n    unselectAll,\n    selectItem,\n    unselectItem,\n    isItemSelected,\n    isSelectMultiple,\n    item,\n    rowActions,\n    rowIndex,\n    showSelect,\n    onSelect,\n    expandedRow,\n    disableLastRowBorder,\n    maxSelections,\n    selectedItems,\n  } = props;\n  const expandedRowContent = expandedRow?.(item);\n  const [expanded, setExpanded] = useState(!!props.defaultExpandedRows && !!expandedRowContent);\n  const settings = usePageSettings();\n  const disableRow = useCallback(\n    (item: T) => {\n      if (selectedItems?.length === maxSelections) {\n        // disable checkboxes for remaining rows\n        return !selectedItems?.includes(item);\n      }\n      return false;\n    },\n    [maxSelections, selectedItems]\n  );\n\n  return (\n    <>\n      <Tr\n        style={{\n          boxShadow: 'unset',\n          borderBottom: expanded || (props.isLastRow && disableLastRowBorder) ? 'unset' : undefined,\n          cursor: onSelect ? 'pointer' : 'default',\n        }}\n        data-cy={\n          'id' in item && (typeof item.id === 'string' || typeof item.id === 'number')\n            ? `row-id-${item.id.toString()}`\n            : `row-${rowIndex}`\n        }\n        className={isItemSelected ? 'selected' : undefined}\n        onClick={() => {\n          if (!onSelect) return;\n          if (!isSelectMultiple) {\n            unselectAll?.();\n          }\n          if (isSelectMultiple && isItemSelected) {\n            unselectItem?.(item);\n          } else {\n            selectItem?.(item);\n          }\n          onSelect(item);\n        }}\n      >\n        {expandedRow && (\n          <Td\n            expand={\n              expandedRowContent\n                ? {\n                    rowIndex,\n                    isExpanded: expanded,\n                    onToggle: () => setExpanded((expanded) => !expanded),\n                  }\n                : undefined\n            }\n            style={{ paddingLeft: expandedRowContent ? 8 : 4 }}\n            data-cy={'expand-column-cell'}\n          />\n        )}\n        {showSelect && (\n          <Th\n            select={\n              isItemSelected !== undefined\n                ? {\n                    onSelect: (_event, isSelecting) => {\n                      if (isSelecting) {\n                        selectItem?.(item);\n                      } else {\n                        unselectItem?.(item);\n                      }\n                    },\n                    isSelected: isItemSelected,\n                    isDisabled: maxSelections && selectedItems ? disableRow(item) : false,\n                  }\n                : undefined\n            }\n            isStickyColumn={props.scrollLeft}\n            stickyMinWidth=\"0px\"\n            hasRightBorder={props.scrollLeft}\n            data-cy={'checkbox-column-cell'}\n            className={props.scrollLeft ? 'bg-lighten' : undefined}\n          />\n        )}\n        {onSelect && (\n          <Td\n            select={{\n              rowIndex,\n              isSelected: isItemSelected ?? false,\n              variant: isSelectMultiple ? 'checkbox' : 'radio',\n              isDisabled: maxSelections && selectedItems ? disableRow(item) : false,\n            }}\n            isStickyColumn={props.scrollLeft}\n            stickyMinWidth=\"0px\"\n            hasRightBorder={props.scrollLeft}\n            data-cy={'checkbox-column-cell'}\n            className={props.scrollLeft ? 'bg-lighten' : undefined}\n          />\n        )}\n        <TableCells\n          columns={columns}\n          item={item}\n          rowActions={rowActions}\n          scrollLeft={props.scrollLeft}\n          scrollRight={props.scrollRight}\n        />\n      </Tr>\n      {expandedRow && expanded && expandedRowContent && (\n        <Tr\n          isExpanded={expanded}\n          style={{ boxShadow: 'unset' }}\n          className={isItemSelected ? 'selected' : undefined}\n        >\n          <Td />\n          {showSelect && (\n            <Th\n              isStickyColumn={props.scrollLeft}\n              stickyMinWidth=\"0px\"\n              hasRightBorder={props.scrollLeft}\n              className={props.scrollLeft ? 'bg-lighten' : undefined}\n            />\n          )}\n          {onSelect && <Td isStickyColumn stickyMinWidth=\"0px\" hasRightBorder={props.scrollLeft} />}\n          <Td\n            colSpan={columns.length}\n            style={{ paddingBottom: settings.tableLayout === 'compact' ? 12 : 24, paddingTop: 0 }}\n          >\n            <CollapseColumn>{expandedRowContent}</CollapseColumn>\n          </Td>\n          {rowActions !== undefined && rowActions.length > 0 && (\n            <Td\n              isActionCell\n              isStickyColumn={props.scrollRight}\n              stickyMinWidth=\"0px\"\n              style={{ right: 0, padding: 0, paddingRight: 0 }}\n              className={props.scrollRight ? 'pf-m-border-left bg-lighten' : undefined}\n            >\n              &nbsp;\n            </Td>\n          )}\n        </Tr>\n      )}\n    </>\n  );\n}\n\nfunction TableCells<T extends object>(props: {\n  columns: ITableColumn<T>[];\n  item: T;\n  rowActions?: IPageAction<T>[];\n  scrollLeft?: boolean;\n  scrollRight?: boolean;\n}) {\n  const { columns, item, rowActions } = props;\n  const [actionsExpanded, setActionsExpanded] = useState(false);\n\n  return (\n    <Fragment>\n      {columns.map((column) => {\n        return (\n          <Td\n            key={column.header}\n            dataLabel={column.header}\n            modifier=\"nowrap\"\n            style={{ width: column.minWidth === 0 ? '0%' : undefined }}\n            data-cy={getID(column.header + '-column-cell')}\n          >\n            <TableColumnCell item={item} column={column} />\n          </Td>\n        );\n      })}\n      {rowActions !== undefined && rowActions.length > 0 && (\n        <Td\n          isActionCell\n          isStickyColumn={props.scrollRight}\n          stickyMinWidth=\"0px\"\n          style={{\n            right: 0,\n            padding: 0,\n            paddingRight: 8,\n            zIndex: actionsExpanded ? 400 : undefined, // ZIndex 400 is needed for PF table stick headers\n          }}\n          data-cy={'actions-column-cell'}\n          className={props.scrollRight ? 'pf-m-border-left bg-lighten' : undefined}\n        >\n          <PageActions\n            actions={rowActions}\n            selectedItem={item}\n            position={DropdownPosition.right}\n            iconOnly\n            onOpen={setActionsExpanded}\n          />\n        </Td>\n      )}\n    </Fragment>\n  );\n}\n\nfunction convertString(s: string) {\n  return s.toLowerCase().split(' ').join('-');\n}\n","import { ReactNode, useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageSingleSelect } from '../PageInputs/PageSingleSelect';\nimport { ColumnTableOption, ITableColumn } from '../PageTable/PageTableColumn';\nimport { useManageItems } from './useManagedItems';\n\nexport function useManageColumns<T extends object>(\n  id: string,\n  tableColumns: ITableColumn<T>[],\n  disableTableView?: boolean,\n  disableListView?: boolean,\n  disableCardView?: boolean\n) {\n  const { t } = useTranslation();\n  const columns = useMemo(() => {\n    const columns: {\n      header: string;\n      cell: (column: ITableColumn<T>, setColumn: (column: ITableColumn<T>) => void) => ReactNode;\n    }[] = [{ header: t('Name'), cell: (column: ITableColumn<T>) => column.header }];\n\n    if (!disableTableView) {\n      columns.push({\n        header: t('Table'),\n        cell: (column: ITableColumn<T>, setColumn: (column: ITableColumn<T>) => void) => (\n          <PageSingleSelect<keyof typeof ColumnTableOption | ''>\n            value={column.table ?? ''}\n            onSelect={(value: keyof typeof ColumnTableOption | '' | null) => {\n              switch (value) {\n                case '':\n                  setColumn({ ...column, table: undefined });\n                  break;\n                case ColumnTableOption.description:\n                case ColumnTableOption.expanded:\n                case ColumnTableOption.hidden:\n                  setColumn({ ...column, table: value });\n                  break;\n              }\n            }}\n            placeholder={t('Column')}\n            options={[\n              {\n                value: '',\n                label: t('Column'),\n                description: t('Show the column in the table.'),\n              },\n              {\n                value: ColumnTableOption.description,\n                label: t('Description'),\n                description: t(\n                  'Show the column when the item is expanded as a full width description.'\n                ),\n              },\n              {\n                value: ColumnTableOption.expanded,\n                label: t('Expanded'),\n                description: t('Show the column when the item is expanded as a detail.'),\n              },\n              {\n                value: ColumnTableOption.hidden,\n                label: t('Hidden'),\n                description: t('Hide the column.'),\n              },\n            ]}\n            isRequired\n          />\n        ),\n      });\n    }\n\n    if (!disableListView) {\n      columns.push({\n        header: t('List'),\n        cell: (column: ITableColumn<T>, setColumn: (column: ITableColumn<T>) => void) => (\n          <PageSingleSelect\n            value={column.list ?? ''}\n            onSelect={(value) => {\n              switch (value) {\n                case '':\n                  setColumn({ ...column, list: undefined });\n                  break;\n                case 'name':\n                case 'subtitle':\n                case 'description':\n                case 'primary':\n                case 'secondary':\n                case 'hidden':\n                  setColumn({ ...column, list: value });\n                  break;\n              }\n            }}\n            options={[\n              {\n                value: 'name',\n                label: t('Name'),\n                description: t('Show the column as the name of the list item.'),\n              },\n              {\n                value: 'subtitle',\n                label: t('Subtitle'),\n                description: t('Show the column as the subtitle under the name on the list.'),\n              },\n              {\n                value: 'description',\n                label: t('Description'),\n                description: t('Show the column as the list item description.'),\n              },\n              {\n                value: 'primary',\n                label: t('Left side'),\n                description: t('Show the column on the left side of the list.'),\n              },\n              {\n                value: 'secondary',\n                label: t('Right side'),\n                description: t('Show the column on the right side of the list.'),\n              },\n              {\n                value: 'hidden',\n                label: t('Hidden'),\n                description: t('Hide the column on the list.'),\n              },\n            ]}\n            placeholder={t('Left side')}\n            isRequired\n          />\n        ),\n      });\n    }\n\n    if (!disableCardView) {\n      columns.push({\n        header: t('Card'),\n        cell: (column: ITableColumn<T>, setColumn: (column: ITableColumn<T>) => void) => (\n          <PageSingleSelect\n            value={column.card ?? ''}\n            onSelect={(value) => {\n              switch (value) {\n                case '':\n                  setColumn({ ...column, card: undefined });\n                  break;\n                case 'name':\n                case 'subtitle':\n                case 'description':\n                case 'hidden':\n                  setColumn({ ...column, card: value });\n                  break;\n              }\n            }}\n            placeholder={t('Detail')}\n            options={[\n              {\n                value: 'name',\n                label: t('Name'),\n                description: t('Show the column as the name on the card.'),\n              },\n              {\n                value: 'subtitle',\n                label: t('Subtitle'),\n                description: t('Show the column as the subtitle under the name on the card.'),\n              },\n              {\n                value: 'description',\n                label: t('Description'),\n                description: t('Show the column as the card description.'),\n              },\n              {\n                value: '',\n                label: t('Detail'),\n                description: t('Show the column one of the details on the card.'),\n              },\n              {\n                value: 'hidden',\n                label: t('Hidden'),\n                description: t('Hide the column on the card.'),\n              },\n            ]}\n            isRequired\n          />\n        ),\n      });\n    }\n\n    return columns;\n  }, [disableCardView, disableListView, disableTableView, t]);\n\n  const loadColumn = useCallback((column: ITableColumn<T>, data: unknown) => {\n    if (typeof data === 'object' && data !== null) {\n      if ('table' in data && typeof data.table === 'string') {\n        column.table = data.table as ColumnTableOption;\n      } else {\n        column.table = undefined;\n      }\n      if ('list' in data && typeof data.list === 'string') {\n        column.list = data.list as\n          | 'name'\n          | 'subtitle'\n          | 'description'\n          | 'hidden'\n          | 'primary'\n          | 'secondary';\n      } else {\n        column.list = undefined;\n      }\n      if ('card' in data && typeof data.card === 'string') {\n        column.card = data.card as 'name' | 'subtitle' | 'description' | 'hidden';\n      } else {\n        column.card = undefined;\n      }\n    }\n  }, []);\n\n  const saveColumn = useCallback((column: ITableColumn<T>) => {\n    const { table, list, card } = column;\n    return { table, list, card };\n  }, []);\n\n  const { openManageItems: openColumnManagement, managedItems: managedColumns } = useManageItems<\n    ITableColumn<T>\n  >({\n    id: id,\n    title: t('Manage Columns'),\n    description: t('Manage the order, placement, and format of columns.'),\n    items: tableColumns,\n    keyFn: (tableColumn) => tableColumn.id ?? tableColumn.header,\n    columns,\n    loadFn: loadColumn,\n    saveFn: saveColumn,\n    hideSelection: true,\n  });\n\n  return {\n    openColumnManagement,\n    managedColumns,\n  };\n}\n","import { useEffect, useRef } from 'react';\n\nexport function useAbortController() {\n  const abortControllerRef = useRef(new AbortController());\n  useEffect(() => {\n    const abortController = abortControllerRef.current;\n    return () => abortController.abort();\n  }, []);\n  return abortControllerRef.current;\n}\n","import {\n  Button,\n  Modal,\n  ModalBoxBody,\n  ModalVariant,\n  Progress,\n  ProgressSize,\n  ProgressVariant,\n} from '@patternfly/react-core';\nimport { CheckCircleIcon, ExclamationCircleIcon, PendingIcon } from '@patternfly/react-icons';\nimport pLimit from 'p-limit';\nimport { ReactNode, useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { genericErrorAdapter } from '../PageForm/genericErrorAdapter';\nimport { ErrorAdapter } from '../PageForm/typesErrorAdapter';\nimport { PageTable } from '../PageTable/PageTable';\nimport { ITableColumn, useVisibleModalColumns } from '../PageTable/PageTableColumn';\nimport { usePaged } from '../PageTable/useTableItems';\nimport { pfDanger, pfInfo, pfSuccess } from '../components/pfcolors';\nimport { useAbortController } from '../hooks/useAbortController';\nimport { useFrameworkTranslations } from '../useFrameworkTranslations';\nimport { usePageDialog } from './PageDialog';\n\nexport interface BulkActionDialogProps<T extends object> {\n  /** The title of the model.\n   * @link https://www.patternfly.org/v4/components/modal/design-guidelines#confirmation-dialogs\n   */\n  title: string;\n\n  /** Optional description that appears below the title. */\n  description?: ReactNode | string;\n\n  /** The items to confirm for the bulk action. */\n  items: T[];\n\n  /** A function that gets a unique key for each item. */\n  keyFn: (item: T) => string | number;\n\n  /** The columns to display when processing the actions. */\n  actionColumns: ITableColumn<T>[];\n\n  /** The action function to perform on each item. */\n  actionFn: (item: T, signal: AbortSignal) => Promise<unknown>;\n\n  /** Callback when all the actions are complete. Returns the successful items. */\n  onComplete?: (successfulItems: T[]) => void;\n\n  /** Callback called when the dialog closes. */\n  onClose?: (\n    status: 'success' | 'failures' | 'canceled',\n    successfulItems: T[],\n    failedItems: T[],\n    canceledItems: T[]\n  ) => void;\n\n  /** The text to show for each item when the action is happening.\n   * @example Deleting jobs...\n   */\n  processingText?: string;\n\n  /** Indicates if this is a destructive operation */\n  isDanger?: boolean;\n\n  /** Error adapter used to parse the error message */\n  errorAdapter?: ErrorAdapter;\n}\n\n/**\n * BulkActionDialog is a generic dialog for process bulk actions.\n *\n * It processes the actions in parallel up to 5 concurrently.\n * The easiest way to use the BulkActionDialog is then useBulkActionDialog hook.\n *\n * @param {string} title - The title of the model.\n * @param {T[]} items - The items to confirm for the bulk action.\n * @param {function} keyFn - A function that gets a unique key for each item.\n * @param {Array(ITableColumn<T>)} actionColumns - The columns to display when processing the actions.\n * @param {function} actionFn - The action function to perform on each item\n * @param {function=} onComplete - Callback when all the actions are complete. Returns the successful items.\n * @param {function=} onClose - Callback called when the dialog closes.\n * @param {string=} processingText - The text to show for each item when the action is happening.\n * @param {boolean=} isDanger - Indicates if this is a destructive operation.\n * @param {ErrorAdapter} [errorAdapter] - Optional adapter for error handling.\n */\nexport function BulkActionDialog<T extends object>(props: BulkActionDialogProps<T>) {\n  const {\n    title,\n    items,\n    keyFn,\n    actionColumns,\n    actionFn,\n    onComplete,\n    onClose,\n    processingText,\n    isDanger,\n    errorAdapter = genericErrorAdapter,\n    description,\n  } = props;\n  const { t } = useTranslation();\n  const [translations] = useFrameworkTranslations();\n  const [isProcessing, setProcessing] = useState(true);\n  const [isCanceled, setCanceled] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState('');\n  const [statuses, setStatuses] = useState<Record<string | number, string | null | undefined>>();\n  const abortController = useAbortController();\n  const [_, setDialog] = usePageDialog();\n\n  const onCancelClicked = useCallback(() => {\n    setCanceled(true);\n    abortController.abort();\n    setProcessing(false);\n    setStatuses((statuses) => {\n      const newStatuses = { ...statuses };\n      for (const item of items) {\n        const key = keyFn(item);\n        if (newStatuses[key] === undefined) {\n          newStatuses[key] = t('Cancelled');\n        }\n      }\n      return newStatuses;\n    });\n  }, [abortController, items, keyFn, t]);\n\n  const onCloseClicked = useCallback(() => {\n    setDialog(undefined);\n    onClose?.(\n      isCanceled ? 'canceled' : error ? 'failures' : 'success',\n      items.filter((item) => statuses?.[keyFn(item)] === null),\n      items.filter((item) => statuses?.[keyFn(item)] !== null),\n      items.filter((item) => statuses?.[keyFn(item)] === undefined)\n    );\n  }, [error, isCanceled, items, keyFn, onClose, setDialog, statuses]);\n\n  useEffect(() => {\n    async function process() {\n      const limit = pLimit(5);\n      let progress = 0;\n      const successfulItems: T[] = [];\n      await Promise.all(\n        items.map((item: T) =>\n          limit(async () => {\n            if (abortController.signal.aborted) return;\n            const key = keyFn(item);\n            try {\n              await actionFn(item, abortController.signal);\n              if (!abortController.signal.aborted) {\n                setStatuses((statuses) => ({ ...(statuses ?? {}), [key]: null }));\n              }\n              successfulItems.push(item);\n            } catch (err) {\n              const { genericErrors, fieldErrors } = errorAdapter(err);\n              const parsedErrors = [...genericErrors, ...fieldErrors.filter((e) => e.message)];\n              if (!abortController.signal.aborted) {\n                if (err instanceof Error) {\n                  const message =\n                    typeof parsedErrors[0].message === 'string' && parsedErrors.length === 1\n                      ? parsedErrors[0].message\n                      : t(`Unknown error`);\n                  setStatuses((statuses) => ({\n                    ...(statuses ?? {}),\n                    [key]: message,\n                  }));\n                } else {\n                  setStatuses((statuses) => ({\n                    ...(statuses ?? {}),\n                    [key]: t(`Unknown error`),\n                  }));\n                }\n                setError(translations.errorText);\n              }\n            } finally {\n              if (!abortController.signal.aborted) {\n                setProgress(++progress);\n              }\n            }\n          })\n        )\n      );\n      if (!abortController.signal.aborted) {\n        setProcessing(false);\n      }\n      onComplete?.(successfulItems);\n    }\n    void process();\n  }, [\n    abortController,\n    actionFn,\n    items,\n    keyFn,\n    onComplete,\n    translations.errorText,\n    t,\n    errorAdapter,\n  ]);\n\n  const pagination = usePaged(items);\n\n  const modalColumns = useVisibleModalColumns(actionColumns);\n\n  return (\n    <Modal\n      titleIconVariant={isDanger ? 'warning' : undefined}\n      title={title}\n      ouiaId={title}\n      aria-label={title}\n      description={description}\n      variant={ModalVariant.medium}\n      isOpen\n      onClose={() => {\n        onCancelClicked();\n        onCloseClicked();\n      }}\n      actions={\n        isProcessing\n          ? [\n              <Button key=\"cancel\" variant=\"link\" onClick={onCancelClicked}>\n                {translations.cancelText}\n              </Button>,\n            ]\n          : [\n              <Button key=\"close\" variant=\"secondary\" onClick={onCloseClicked}>\n                {translations.closeText}\n              </Button>,\n            ]\n      }\n      hasNoBodyWrapper\n    >\n      <ModalBoxBody style={{ paddingBottom: 0, paddingLeft: 0, paddingRight: 0 }}>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            maxHeight: 560,\n            overflow: 'hidden',\n            borderTop: 'thin solid var(--pf-v5-global--BorderColor--100)',\n          }}\n        >\n          <PageTable<T>\n            key=\"status\"\n            pageItems={[...pagination.paged]}\n            itemCount={items.length}\n            tableColumns={[\n              ...modalColumns,\n              {\n                header: t(`Status`),\n                cell: (item) => {\n                  const key = keyFn(item);\n                  const status = statuses?.[key];\n                  if (status === undefined) {\n                    return (\n                      <span style={{ color: pfInfo }}>\n                        {<PendingIcon />}&nbsp; {translations.pendingText}\n                      </span>\n                    );\n                  }\n                  if (status === null) {\n                    return (\n                      <span style={{ color: pfSuccess }}>\n                        {<CheckCircleIcon />}&nbsp; {translations.successText}\n                      </span>\n                    );\n                  }\n                  return (\n                    <span style={{ color: pfDanger }}>\n                      {<ExclamationCircleIcon />}&nbsp; {statuses?.[key]}\n                    </span>\n                  );\n                },\n              },\n            ]}\n            keyFn={keyFn}\n            // pagination={pagination}\n            compact\n            errorStateTitle=\"\"\n            emptyStateTitle={t('No items')}\n            autoHidePagination={true}\n            disableBodyPadding\n            {...pagination}\n          />\n        </div>\n      </ModalBoxBody>\n      <ModalBoxBody style={{ paddingTop: 0 }}>\n        <Progress\n          data-cy=\"progress\"\n          value={(progress / items.length) * 100}\n          title={\n            abortController.signal.aborted\n              ? translations.canceledText\n              : error\n                ? translations.errorText\n                : !isProcessing\n                  ? translations.successText\n                  : processingText ?? translations.processingText\n          }\n          size={ProgressSize.lg}\n          variant={\n            error || isCanceled\n              ? ProgressVariant.danger\n              : progress === items.length\n                ? ProgressVariant.success\n                : undefined\n          }\n        />\n      </ModalBoxBody>\n    </Modal>\n  );\n}\n\n/**\n * useBulkActionDialog - react hook to open a BulkActionDialog\n *\n * @template T - The type of the items on which the bulk action will be performed.\n * @param {ErrorAdapter} [defaultErrorAdapter = genericErrorAdapter] - Optional default adapter for error handling.\n * @returns {(props: BulkActionDialogProps<T>) => void} - A function to set the properties of the BulkActionDialog.\n * @example\n * const openBulkActionDialog = useBulkActionDialog()\n * openBulkActionDialog(...) // Pass BulkActionDialogProps\n */\nexport function useBulkActionDialog<T extends object>(\n  defaultErrorAdapter: ErrorAdapter = genericErrorAdapter\n) {\n  const [_, setDialog] = usePageDialog();\n  const [props, setProps] = useState<BulkActionDialogProps<T>>();\n  useEffect(() => {\n    if (props) {\n      const onCloseHandler = (\n        status: 'success' | 'failures' | 'canceled',\n        successfulItems: T[],\n        failedItems: T[],\n        canceledItems: T[]\n      ) => {\n        setProps(undefined);\n        props.onClose?.(status, successfulItems, failedItems, canceledItems);\n      };\n      setDialog(\n        <BulkActionDialog<T>\n          {...props}\n          errorAdapter={props.errorAdapter ?? defaultErrorAdapter}\n          onClose={onCloseHandler}\n        />\n      );\n    } else {\n      setDialog(undefined);\n    }\n  }, [props, setDialog, defaultErrorAdapter]);\n  return setProps;\n}\n","/* istanbul ignore file */\n\nexport function compareUnknowns(a: unknown, b: unknown) {\n  /* istanbul ignore next */\n  if (a === undefined && b === undefined) return 0;\n  /* istanbul ignore next */\n  if (a === undefined) return 1;\n  /* istanbul ignore next */\n  if (b === undefined) return -1;\n\n  /* istanbul ignore else */\n  if (typeof a === 'string') {\n    /* istanbul ignore else */\n    if (typeof b === 'string') {\n      return compareStrings(a, b);\n    } else if (typeof b === 'number') {\n      return compareStrings(a, b.toString());\n    }\n  } else if (typeof a === 'number') {\n    /* istanbul ignore else */\n    if (typeof b === 'number') {\n      return compareNumbers(a, b);\n    } else if (typeof b === 'string') {\n      return compareStrings(a.toString(), b);\n    }\n  }\n  /* istanbul ignore next */\n  return 0;\n}\n\n/* istanbul ignore next */\nexport function compareStrings(a: string | undefined | null, b: string | undefined | null) {\n  if (a === undefined && b === undefined) return 0;\n  if (a === undefined || a === null) return 1;\n  if (b === undefined || b === null) return -1;\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n\n/* istanbul ignore next */\nexport function compareNumbers(a: number | undefined | null, b: number | undefined | null) {\n  if (a === undefined && b === undefined) return 0;\n  if (a === undefined || a === null) return 1;\n  if (b === undefined || b === null) return -1;\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n","import {\n  Alert,\n  Button,\n  Checkbox,\n  Icon,\n  Modal,\n  ModalBoxBody,\n  ModalVariant,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport { genericErrorAdapter } from '../PageForm/genericErrorAdapter';\nimport { ErrorAdapter } from '../PageForm/typesErrorAdapter';\nimport { PageTable } from '../PageTable/PageTable';\nimport { ITableColumn, useVisibleModalColumns } from '../PageTable/PageTableColumn';\nimport { usePaged } from '../PageTable/useTableItems';\nimport { useFrameworkTranslations } from '../useFrameworkTranslations';\nimport { compareStrings } from '../utils/compare';\nimport { BulkActionDialogProps, useBulkActionDialog } from './BulkActionDialog';\nimport { usePageDialog } from './PageDialog';\n\nconst ModalBodyDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  max-height: 560px;\n  overflow: hidden;\n  border-top: thin solid var(--pf-v5-global--BorderColor--100);\n`;\nconst ConfirmBoxDiv = styled.div`\n  margin-left: 32px;\n  height: 64px;\n  display: flex;\n  align-items: center;\n`;\n\nexport interface BulkConfirmationDialog<T extends object> {\n  /** The title of the model.\n   * @link https://www.patternfly.org/v4/components/modal/design-guidelines#confirmation-dialogs\n   */\n  title: string;\n\n  /** The prompt/description that shows up under the confirmation title. */\n  prompt?: string;\n\n  /** Alert prompts that shows up under the confirmation title. */\n  alertPrompts?: string[];\n\n  /** The items to confirm for the bulk action. */\n  items: T[];\n\n  /** A function that determines that whether an action cannot be performed on a selected item\n   * (so that this item can be identified in the confirmation dialog) and returns a tooltip\n   * that can be displayed with the non-actionable row */\n  isItemNonActionable?: (item: T) => string | undefined;\n\n  /** A function that gets a unique key for each item. */\n  keyFn: (item: T) => string | number;\n\n  /** The columns to display for confirmation. */\n  confirmationColumns: ITableColumn<T>[];\n\n  /** Callback called when the user confirms. */\n  onConfirm: () => void;\n\n  /** Callback called when the dialog closes. */\n  onClose?: () => void;\n\n  /** The prompt to show for the user to confirm the bulk action. */\n  confirmText: string;\n\n  /** The button text to perform the action. */\n  actionButtonText: string;\n\n  /** Indicates if this is a destructive operation */\n  isDanger?: boolean;\n\n  /** Error adapter to be passed down to the useBulkActionDialog */\n  errorAdapter?: ErrorAdapter;\n}\n\nfunction BulkConfirmationDialog<T extends object>(props: BulkConfirmationDialog<T>) {\n  const {\n    title,\n    items,\n    keyFn,\n    prompt,\n    alertPrompts,\n    confirmationColumns,\n    isItemNonActionable,\n    onConfirm,\n    onClose,\n    confirmText,\n    actionButtonText,\n    isDanger,\n  } = props;\n  const [_, setDialog] = usePageDialog();\n  const [translations] = useFrameworkTranslations();\n  const onCloseClicked = useCallback(() => {\n    setDialog(undefined);\n    onClose?.();\n  }, [onClose, setDialog]);\n\n  // Non-actionable rows appear first\n  const sortedItems = useMemo<T[]>(() => {\n    if (isItemNonActionable && items.some(isItemNonActionable)) {\n      return items.sort((l, r) => compareStrings(isItemNonActionable(l), isItemNonActionable(r)));\n    }\n    return items;\n  }, [items, isItemNonActionable]);\n\n  const pagination = usePaged(sortedItems);\n  const [confirmed, setConfirmed] = useState(!confirmText);\n  /**\n   * If there are non-actionable rows, the first column will contain exclamation icons\n   * to identify the non-actionable rows.\n   */\n  const columnsForConfirmation: ITableColumn<T>[] = useMemo<ITableColumn<T>[]>(() => {\n    if (isItemNonActionable && items.some(isItemNonActionable)) {\n      return [\n        {\n          header: '',\n          cell: (item: T) =>\n            isItemNonActionable(item) ? (\n              <Tooltip\n                content={isItemNonActionable(item)}\n                trigger={isItemNonActionable(item) ? undefined : 'manual'}\n              >\n                <Icon status=\"warning\">\n                  <ExclamationTriangleIcon />\n                </Icon>\n              </Tooltip>\n            ) : null,\n        },\n        ...confirmationColumns,\n      ];\n    }\n    return confirmationColumns;\n  }, [confirmationColumns, isItemNonActionable, items]);\n\n  const actionableItems = useMemo<T[]>(() => {\n    if (isItemNonActionable) {\n      return items.filter((item) => !isItemNonActionable(item));\n    }\n    return items;\n  }, [isItemNonActionable, items]);\n\n  const modalColumns = useVisibleModalColumns(columnsForConfirmation);\n\n  return (\n    <Modal\n      titleIconVariant={isDanger ? 'warning' : undefined}\n      title={title}\n      aria-label={title}\n      ouiaId={title}\n      description={prompt}\n      variant={ModalVariant.medium}\n      isOpen\n      onClose={onCloseClicked}\n      actions={[\n        <Button\n          id=\"submit\"\n          key=\"submit\"\n          ouiaId=\"submit\"\n          variant={isDanger ? 'danger' : 'primary'}\n          onClick={() => {\n            onCloseClicked();\n            onConfirm();\n          }}\n          isAriaDisabled={!confirmed}\n        >\n          {actionButtonText}\n        </Button>,\n        <Button id=\"cancel\" key=\"cancel\" variant=\"link\" onClick={onClose}>\n          {translations.cancelText}\n        </Button>,\n      ]}\n      hasNoBodyWrapper\n    >\n      {items.length > 0 && (\n        <ModalBoxBody style={{ paddingLeft: 0, paddingRight: 0 }}>\n          <ModalBodyDiv>\n            {alertPrompts &&\n              alertPrompts.length > 0 &&\n              alertPrompts.map((alertPrompt, i) => (\n                <Alert\n                  data-cy=\"alert-toaster\"\n                  isInline\n                  title={alertPrompt}\n                  variant=\"warning\"\n                  key={i}\n                ></Alert>\n              ))}\n            <PageTable<T>\n              key=\"items\"\n              pageItems={pagination.paged}\n              itemCount={items.length}\n              tableColumns={modalColumns}\n              keyFn={keyFn}\n              // pagination={pagination}\n              compact\n              errorStateTitle=\"Error\"\n              emptyStateTitle=\"No items\"\n              autoHidePagination={true}\n              disableBodyPadding\n              {...pagination}\n            />\n          </ModalBodyDiv>\n          {confirmText && actionableItems.length > 0 && (\n            <ConfirmBoxDiv>\n              <Checkbox\n                id=\"confirm\"\n                ouiaId=\"confirm\"\n                label={confirmText}\n                isChecked={confirmed}\n                onChange={(_event, val) => setConfirmed(val)}\n              />\n            </ConfirmBoxDiv>\n          )}\n        </ModalBoxBody>\n      )}\n    </Modal>\n  );\n}\n\nfunction useBulkConfirmationDialog<T extends object>() {\n  const [_, setDialog] = usePageDialog();\n  const [props, setProps] = useState<BulkConfirmationDialog<T>>();\n  useEffect(() => {\n    if (props) {\n      const onCloseHandler = () => {\n        setProps(undefined);\n        props.onClose?.();\n      };\n      setDialog(<BulkConfirmationDialog<T> {...props} onClose={onCloseHandler} />);\n    } else {\n      setDialog(undefined);\n    }\n  }, [props, setDialog]);\n  return setProps;\n}\n\n/**\n * useBulkConfirmation is a custom React hook that combines the use of BulkConfirmationDialog and BulkActionDialog.\n * It provides a single function to handle the entire flow of confirming and executing bulk actions.\n *\n * @template T - The type of items for bulk action.\n * @param {ErrorAdapter} [errorAdapter = genericErrorAdapter] - Default error adapter for error handling.\n * @returns {(options: BulkConfirmationDialog<T> & BulkActionDialogProps<T>) => void} - A function to initiate the bulk confirmation and action process.\n */\nexport function useBulkConfirmation<T extends object>(\n  errorAdapter: ErrorAdapter = genericErrorAdapter\n) {\n  const bulkConfirmationDialog = useBulkConfirmationDialog<T>();\n  const bulkActionDialog = useBulkActionDialog<T>();\n  return useCallback(\n    (\n      options: Omit<BulkConfirmationDialog<T>, 'onConfirm' | 'onClose'> &\n        Omit<BulkActionDialogProps<T>, 'onClose'>\n    ) => {\n      const bulkActionOptions = { ...options, errorAdapter };\n      if (options.isItemNonActionable && options.isItemNonActionable !== undefined) {\n        bulkActionOptions.items = options.items.filter(\n          (item) => options.isItemNonActionable !== undefined && !options.isItemNonActionable(item)\n        );\n      }\n      return bulkConfirmationDialog({\n        ...options,\n        onConfirm: () => bulkActionDialog(bulkActionOptions),\n      });\n    },\n    [bulkActionDialog, bulkConfirmationDialog, errorAdapter]\n  );\n}\n","import { Label, LabelGroup, Skeleton, Split, SplitItem } from '@patternfly/react-core';\nimport { IToolbarFilter } from '../PageToolbar/PageToolbarFilter';\nimport { IView } from '../useView';\nimport { ITableColumn, TableColumnCell } from './PageTableColumn';\nimport { ISelected } from './useTableItems';\nimport { useFrameworkTranslations } from '../useFrameworkTranslations';\nimport { PageTable } from './PageTable';\n\nexport type PageMultiSelectListProps<T extends object> = {\n  labelForSelectedItems?: string;\n  view: IView & ISelected<T> & { itemCount?: number; pageItems: T[] | undefined; error?: Error };\n  tableColumns: ITableColumn<T>[];\n  toolbarFilters: IToolbarFilter[];\n  // onSelect: (items: T[]) => void;\n  emptyStateTitle?: string;\n  errorStateTitle?: string;\n  defaultSort?: string;\n  maxSelections?: number;\n  isCompact?: boolean;\n};\n\nexport function PageMultiSelectList<T extends object>(props: PageMultiSelectListProps<T>) {\n  const { view, tableColumns, toolbarFilters, maxSelections, labelForSelectedItems, isCompact } =\n    props;\n  const [translations] = useFrameworkTranslations();\n\n  if (view.itemCount === undefined && view.error === undefined) {\n    return <Skeleton height=\"80px\" />;\n  }\n\n  return (\n    <>\n      <Split hasGutter>\n        <SplitItem style={{ fontWeight: 'bold', whiteSpace: 'nowrap' }}>\n          {labelForSelectedItems ?? translations.selectedText}\n        </SplitItem>\n        {view.selectedItems.length > 0 ? (\n          <LabelGroup>\n            {view.selectedItems.map((item, i) => {\n              if (tableColumns && tableColumns.length > 0) {\n                return (\n                  <Label key={i} onClose={() => view.unselectItem(item)}>\n                    <TableColumnCell\n                      item={item}\n                      column={\n                        tableColumns.find(\n                          (column) => column.card === 'name' || column.list === 'name'\n                        ) ?? tableColumns[0]\n                      }\n                    />\n                  </Label>\n                );\n              }\n              return <></>;\n            })}\n          </LabelGroup>\n        ) : (\n          <SplitItem style={{ fontStyle: 'italic' }}>{translations.noneSelectedText}</SplitItem>\n        )}\n      </Split>\n      <PageTable<T>\n        tableColumns={tableColumns}\n        toolbarFilters={toolbarFilters}\n        {...view}\n        emptyStateTitle={props.emptyStateTitle ?? translations.noItemsFound}\n        errorStateTitle={props.errorStateTitle ?? translations.errorText}\n        showSelect\n        disableCardView\n        disableListView\n        compact={isCompact}\n        disableBodyPadding\n        maxSelections={maxSelections}\n      />\n    </>\n  );\n}\n","import { Button, Modal, ModalBoxBody, ModalVariant } from '@patternfly/react-core';\nimport { useCallback } from 'react';\nimport { ITableColumn, useVisibleModalColumns } from '../PageTable/PageTableColumn';\nimport { ISelected } from '../PageTable/useTableItems';\nimport { IToolbarFilter } from '../PageToolbar/PageToolbarFilter';\nimport { useFrameworkTranslations } from '../useFrameworkTranslations';\nimport { IView } from '../useView';\nimport { usePageDialog } from './PageDialog';\nimport { PageMultiSelectList } from '../PageTable/PageMultiSelectList';\n\nexport type MultiSelectDialogProps<T extends object> = {\n  title: string;\n  description?: string;\n  view: IView & ISelected<T> & { itemCount?: number; pageItems: T[] | undefined };\n  tableColumns: ITableColumn<T>[];\n  toolbarFilters: IToolbarFilter[];\n  onSelect: (items: T[]) => void;\n  confirmText?: string;\n  cancelText?: string;\n  emptyStateTitle?: string;\n  errorStateTitle?: string;\n  defaultSort?: string;\n  maxSelections?: number;\n  allowZeroSelections?: boolean;\n  onClose?: () => void;\n};\n\nexport function MultiSelectDialog<T extends object>(props: MultiSelectDialogProps<T>) {\n  const {\n    title,\n    description,\n    view,\n    tableColumns,\n    toolbarFilters,\n    emptyStateTitle,\n    errorStateTitle,\n    confirmText,\n    cancelText,\n    onSelect,\n    maxSelections,\n    allowZeroSelections,\n  } = props;\n  const [_, setDialog] = usePageDialog();\n  let onClose = useCallback(() => setDialog(undefined), [setDialog]);\n  if (props.onClose) {\n    onClose = props.onClose;\n  }\n  const [translations] = useFrameworkTranslations();\n  const modalColumns = useVisibleModalColumns(tableColumns);\n  return (\n    <Modal\n      title={title}\n      aria-label={title}\n      ouiaId={title}\n      description={description}\n      isOpen\n      onClose={onClose}\n      variant={ModalVariant.medium}\n      tabIndex={0}\n      actions={[\n        <Button\n          key=\"submit\"\n          variant=\"primary\"\n          id=\"submit\"\n          onClick={() => {\n            onClose();\n            onSelect(view.selectedItems);\n          }}\n          isAriaDisabled={view.selectedItems.length === 0 && !allowZeroSelections}\n        >\n          {confirmText ?? translations.confirmText}\n        </Button>,\n        <Button id=\"cancel\" key=\"cancel\" variant=\"link\" onClick={onClose}>\n          {cancelText ?? translations.cancelText}\n        </Button>,\n      ]}\n      hasNoBodyWrapper\n    >\n      <ModalBoxBody style={{ overflow: 'hidden' }}>\n        <PageMultiSelectList\n          view={view}\n          tableColumns={modalColumns}\n          toolbarFilters={toolbarFilters}\n          emptyStateTitle={emptyStateTitle}\n          errorStateTitle={errorStateTitle}\n          maxSelections={maxSelections}\n          isCompact\n        />\n      </ModalBoxBody>\n    </Modal>\n  );\n}\n","import {\n  Button,\n  EmptyState,\n  EmptyStateActions,\n  EmptyStateBody,\n  EmptyStateFooter,\n  EmptyStateHeader,\n  EmptyStateIcon,\n  Stack,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useNavigate } from 'react-router-dom';\n\nexport function PageNotFound() {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  return (\n    <EmptyState isFullHeight>\n      <EmptyStateHeader\n        titleText={<>{t('Page not found')}</>}\n        icon={<EmptyStateIcon icon={ExclamationCircleIcon} />}\n        headingLevel=\"h2\"\n      />\n      <EmptyStateBody>{t('We could not find that page.')}</EmptyStateBody>\n      <EmptyStateFooter>\n        <EmptyStateActions>\n          <Stack hasGutter>\n            <Button onClick={() => navigate(-1)}>{t('Return to previous page')}</Button>\n            <Button component={(props) => <Link to=\"/\" {...props} />}>\n              {t('Return to dashboard')}\n            </Button>\n          </Stack>\n        </EmptyStateActions>\n      </EmptyStateFooter>\n    </EmptyState>\n  );\n}\n","import { Alert } from '@patternfly/react-core';\nimport React, { ReactNode } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ntype ErrorType = string | ReactNode | (string | ReactNode)[] | null;\n\ninterface ErrorAlertProps {\n  error: ErrorType;\n  isMd: boolean;\n  onCancel?: () => void;\n}\n\ninterface ErrorContentProps {\n  error: ErrorType;\n}\n\nconst ErrorContent: React.FC<ErrorContentProps> = ({ error }) => {\n  if (typeof error === 'string') {\n    return null;\n  }\n\n  if (Array.isArray(error) && error.length > 1) {\n    return (\n      <ul>\n        {error.map((err, index) => (\n          <li key={index}>{err}</li>\n        ))}\n      </ul>\n    );\n  }\n\n  if (React.isValidElement(error)) {\n    return <>{error}</>;\n  }\n\n  return null;\n};\n\nexport function ErrorAlert({ error, isMd, onCancel }: ErrorAlertProps) {\n  const { t } = useTranslation();\n\n  if (!error) {\n    return null;\n  }\n\n  const paddingLeft = '24px';\n  const isExpandable = Array.isArray(error) && error.length > 1;\n  const style = isMd && onCancel ? { paddingLeft } : undefined;\n\n  const getTitle = () => {\n    if (typeof error === 'string') {\n      return error;\n    }\n\n    if (Array.isArray(error) && error.length > 0) {\n      return error.length > 1 ? t('Errors') : String(error[0]);\n    }\n\n    return t('Error');\n  };\n\n  const title = getTitle();\n\n  return (\n    <Alert variant=\"danger\" title={title} isInline style={style} isExpandable={isExpandable}>\n      <ErrorContent error={error} />\n    </Alert>\n  );\n}\n","import { ReactNode, CSSProperties } from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { useForm, useFormState } from 'react-hook-form';\n\nexport function PageFormSubmitButton(props: { children: ReactNode; style?: CSSProperties }) {\n  const { isSubmitting, errors } = useFormState();\n  const { clearErrors } = useForm();\n  // const { t } = useTranslation();\n  const hasErrors = errors && Object.keys(errors).length > 0;\n  return (\n    // Tooltip around buttons does not yet work in PF5\n    // <Tooltip content={t('Please fix errors')} trigger={hasErrors ? undefined : 'manual'}>\n    <Button\n      onClick={() => {\n        if (hasErrors) {\n          clearErrors();\n        }\n      }}\n      data-cy={'Submit'}\n      type=\"submit\"\n      isDisabled={isSubmitting}\n      isLoading={isSubmitting}\n      isDanger={hasErrors}\n      variant={hasErrors ? 'secondary' : undefined}\n      style={props.style}\n    >\n      {props.children}\n    </Button>\n    // </Tooltip>\n  );\n}\n\nexport function PageFormCancelButton(props: { onCancel: () => void; children: ReactNode }) {\n  return (\n    <Button data-cy={'Cancel'} type=\"button\" variant=\"link\" onClick={props.onCancel}>\n      {props.children}\n    </Button>\n  );\n}\n","import {\n  ActionGroup,\n  Form,\n  Grid,\n  gridItemSpanValueShape,\n  PageSection,\n} from '@patternfly/react-core';\nimport { ReactNode, useContext, useState } from 'react';\nimport {\n  DefaultValues,\n  ErrorOption,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  Path,\n  useForm,\n} from 'react-hook-form';\nimport styled from 'styled-components';\nimport { Scrollable } from '../components/Scrollable';\nimport { useBreakpoint } from '../components/useBreakPoint';\nimport { PageSettingsContext } from '../PageSettings/PageSettingsProvider';\nimport { useFrameworkTranslations } from '../useFrameworkTranslations';\nimport { ErrorAlert } from './ErrorAlert';\nimport { genericErrorAdapter } from './genericErrorAdapter';\nimport { PageFormCancelButton, PageFormSubmitButton } from './PageFormButtons';\nimport { ErrorAdapter } from './typesErrorAdapter';\n\nconst FormContainer = styled(PageSection)`\n  margin-block-end: var(--pf-v5-global--spacer--xl);\n`;\n\nconst FormActionGroup = styled(ActionGroup)`\n  && {\n    margin-block-start: unset;\n  }\n`;\n\nexport interface PageFormProps<T extends object> {\n  children?: ReactNode;\n  submitText?: string;\n  onSubmit: PageFormSubmitHandler<T>;\n  cancelText?: string;\n  onCancel?: () => void;\n  defaultValue?: DefaultValues<T>;\n  isVertical?: boolean;\n  singleColumn?: boolean;\n  disablePadding?: boolean;\n  disableGrid?: boolean;\n  autoComplete?: 'on' | 'off';\n  footer?: ReactNode;\n  errorAdapter?: ErrorAdapter;\n  disableSubmitOnEnter?: boolean;\n  isWizard?: boolean;\n  additionalActions?: ReactNode;\n}\n\nexport function useFormErrors<T extends object>(\n  defaultValue: DefaultValues<T> | undefined,\n  errorAdapter: ErrorAdapter,\n  isWizard = false\n) {\n  const form = useForm<T>({\n    defaultValues: defaultValue ?? ({} as DefaultValues<T>),\n  });\n  const { handleSubmit, setError: setFieldError } = form;\n  const [error, setError] = useState<(string | ReactNode)[] | string | null>(null);\n\n  const handleSubmitError = (err: unknown) => {\n    const { genericErrors, fieldErrors } = errorAdapter(err);\n\n    // Handle generic errors\n    if (genericErrors.length > 0) {\n      const parsedGenericErrorMessages = genericErrors.map((genericError) => genericError.message);\n      setError(parsedGenericErrorMessages);\n      // This is necessary to handle the wizard case where the error is not associated with a field\n      // then the step itself should be marked as invalid\n      if (isWizard) {\n        setFieldError('root', { message: parsedGenericErrorMessages.join(' ') });\n      }\n    } else {\n      setError(null);\n    }\n\n    // Handle field errors\n    if (fieldErrors.length > 0) {\n      fieldErrors.forEach((fieldError) => {\n        setFieldError(fieldError.name as unknown as Path<T>, {\n          message: typeof fieldError.message === 'string' ? fieldError.message : undefined,\n        });\n      });\n    }\n  };\n\n  return { form, handleSubmit, error, setError, handleSubmitError, setFieldError };\n}\n\nexport function PageForm<T extends object>(props: PageFormProps<T>) {\n  const { errorAdapter = genericErrorAdapter, isWizard = false } = props;\n\n  const { form, handleSubmit, error, setError, handleSubmitError, setFieldError } =\n    useFormErrors<T>(props.defaultValue, errorAdapter, isWizard);\n  const [settings] = useContext(PageSettingsContext);\n  const [frameworkTranslations] = useFrameworkTranslations();\n  const isMd = useBreakpoint('md');\n  const isHorizontal = props.isVertical ? false : settings.formLayout === 'horizontal';\n  const multipleColumns = props.singleColumn ? false : settings.formColumns === 'multiple';\n\n  let children = props.children;\n  if (props.disableGrid !== true) {\n    children = (\n      <PageFormGrid isVertical={props.isVertical} singleColumn={props.singleColumn}>\n        {props.children}\n      </PageFormGrid>\n    );\n  }\n\n  return (\n    <FormProvider {...form}>\n      <Form\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' && props.disableSubmitOnEnter) {\n            event.preventDefault();\n          }\n        }}\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        onSubmit={handleSubmit(async (data) => {\n          setError(null);\n          try {\n            await props.onSubmit(data, (error) => setError(error), setFieldError);\n          } catch (err) {\n            handleSubmitError(err);\n          }\n        })}\n        isHorizontal={isHorizontal}\n        autoComplete={props.autoComplete}\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          flexGrow: 1,\n          height: '100%',\n          maxHeight: '100%',\n          overflow: 'hidden',\n          gap: 0,\n        }}\n      >\n        {error && <ErrorAlert error={error} isMd={isMd} onCancel={props.onCancel} />}\n        <Scrollable>\n          <FormContainer\n            variant=\"light\"\n            isFilled\n            isWidthLimited\n            padding={{ default: props.disablePadding ? 'noPadding' : 'padding' }}\n            style={{ maxWidth: multipleColumns ? undefined : 880 }} // This is the PF limitMaxWidth for forms\n          >\n            {children}\n          </FormContainer>\n        </Scrollable>\n        {props.footer ? (\n          props.footer\n        ) : (\n          <PageSection variant=\"light\" isFilled={false} className=\"bg-lighten border-top\">\n            <FormActionGroup>\n              <PageFormSubmitButton>{props.submitText}</PageFormSubmitButton>\n              {props.additionalActions}\n              {props.onCancel && (\n                <PageFormCancelButton onCancel={props.onCancel}>\n                  {props.cancelText ?? frameworkTranslations.cancelText}\n                </PageFormCancelButton>\n              )}\n            </FormActionGroup>\n          </PageSection>\n        )}\n      </Form>\n    </FormProvider>\n  );\n}\n\nexport type PageFormSubmitHandler<T extends FieldValues> = (\n  data: T,\n  setError: (error: string) => void,\n  setFieldError: (fieldName: FieldPath<T>, error: ErrorOption) => void\n) => Promise<unknown>;\n\nexport function PageFormGrid(props: {\n  children?: ReactNode;\n  isVertical?: boolean;\n  singleColumn?: boolean;\n  className?: string;\n}) {\n  const [settings] = useContext(PageSettingsContext);\n  const isHorizontal = props.isVertical ? false : settings.formLayout === 'horizontal';\n  const multipleColumns = props.singleColumn ? false : settings.formColumns === 'multiple';\n\n  const sm: gridItemSpanValueShape | undefined = multipleColumns ? (isHorizontal ? 12 : 12) : 12;\n  const md: gridItemSpanValueShape | undefined = multipleColumns ? (isHorizontal ? 12 : 6) : 12;\n  const lg: gridItemSpanValueShape | undefined = multipleColumns ? (isHorizontal ? 6 : 6) : 12;\n  const xl: gridItemSpanValueShape | undefined = multipleColumns ? (isHorizontal ? 6 : 6) : 12;\n  const xl2: gridItemSpanValueShape | undefined = multipleColumns ? (isHorizontal ? 4 : 4) : 12;\n\n  const Component = (\n    <Grid hasGutter span={12} sm={sm} md={md} lg={lg} xl={xl} xl2={xl2} className={props.className}>\n      {props.children}\n    </Grid>\n  );\n\n  return Component;\n}\n","export function capitalizeFirstLetter(text: string) {\n  return text ? text.charAt(0).toUpperCase() + text.slice(1) : '';\n}\n\nexport const toTitleCase = (string: string) => {\n  if (!string) {\n    return '';\n  }\n  return string\n    .toLowerCase()\n    .split('_')\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n};\n","import { t } from 'i18next';\nimport { capitalizeFirstLetter } from '../../utils/strings';\n\nexport function useRequiredValidationRule(label?: string, isRequired?: boolean) {\n  return typeof label === 'string' && isRequired === true\n    ? {\n        value: true,\n        message: t('{{label}} is required.', {\n          label: fixSpecialCases(capitalizeFirstLetter(label.toLocaleLowerCase())),\n        }),\n      }\n    : undefined;\n}\n\nfunction fixSpecialCases(label: string) {\n  const names = ['Red Hat'];\n  for (const name of names) {\n    label = label.replace(capitalizeFirstLetter(name.toLocaleLowerCase()), name);\n  }\n  return label;\n}\n","import { Checkbox, CheckboxProps } from '@patternfly/react-core';\nimport { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { ReactNode } from 'react';\nimport {\n  Controller,\n  FieldPath,\n  FieldValues,\n  PathValue,\n  Validate,\n  useFormContext,\n} from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { PageActionSelection, PageActionType } from '../../PageActions/PageAction';\nimport { PageActions } from '../../PageActions/PageActions';\nimport { Help } from '../../components/Help';\nimport { PFColorE, getPatternflyColor } from '../../components/pfcolors';\nimport { useRequiredValidationRule } from './validation-hooks';\n\nexport type PageFormCheckboxProps<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  id?: string;\n  name: TFieldName;\n  validate?: Validate<boolean, TFieldValues> | Record<string, Validate<boolean, TFieldValues>>;\n  labelHelpTitle?: string;\n  labelHelp?: string | string[] | ReactNode;\n  label?: string;\n  defaultValue?: boolean;\n  enableReset?: boolean;\n  className?: string;\n} & Pick<CheckboxProps, 'description' | 'readOnly' | 'isDisabled' | 'isRequired'>;\n\n/** PatternFly Checkbox wrapper for use with react-hook-form */\nexport function PageFormCheckbox<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: PageFormCheckboxProps<TFieldValues, TFieldName>) {\n  const { name, readOnly, validate } = props;\n  const {\n    control,\n    setValue,\n    formState: { isSubmitting },\n  } = useFormContext<TFieldValues>();\n\n  const { t } = useTranslation();\n\n  const required = useRequiredValidationRule(props.label, props.isRequired);\n\n  return (\n    <Controller<TFieldValues, TFieldName>\n      name={name}\n      control={control}\n      defaultValue={props.defaultValue as unknown as PathValue<TFieldValues, TFieldName>}\n      shouldUnregister\n      render={({ field: { onChange, value }, fieldState: { error } }) => {\n        const helperTextInvalid = error?.message;\n        return (\n          <>\n            <Checkbox\n              name={name}\n              id={props.id ?? name.split('.').join('-')}\n              data-cy={props.id ?? name.split('.').join('-')}\n              aria-label={props.label}\n              className={props.className}\n              label={\n                <div style={{ display: 'flex' }}>\n                  <div>\n                    {props.label}\n                    {props.labelHelp && (\n                      <Help title={props.labelHelpTitle} help={props.labelHelp} />\n                    )}\n                  </div>\n                  <div style={{ marginTop: -6, marginBottom: -6 }}>\n                    <PageActions\n                      actions={[\n                        {\n                          label: t('Reset to default'),\n                          type: PageActionType.Button,\n                          selection: PageActionSelection.None,\n                          onClick: () => {\n                            setValue(\n                              name as FieldPath<TFieldValues>,\n                              props.defaultValue as unknown as PathValue<\n                                TFieldValues,\n                                FieldPath<TFieldValues>\n                              >\n                            );\n                          },\n                          isHidden: () => !props.enableReset || value === props.defaultValue,\n                        },\n                      ]}\n                      position={DropdownPosition.right}\n                    />\n                  </div>\n                </div>\n              }\n              isChecked={!!value}\n              onChange={onChange}\n              readOnly={readOnly || isSubmitting}\n              isDisabled={props.isDisabled}\n              isRequired={props.isRequired}\n              description={\n                helperTextInvalid ? (\n                  <span style={{ color: getPatternflyColor(PFColorE.Danger) }}>\n                    {helperTextInvalid}\n                  </span>\n                ) : (\n                  props.description\n                )\n              }\n            />\n          </>\n        );\n      }}\n      rules={{ required, validate }}\n    />\n  );\n}\n","import useResizeObserver from '@react-hook/resize-observer';\nimport * as monaco from 'monaco-editor';\nimport { configureMonacoYaml } from 'monaco-yaml';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { usePageSettings } from '../PageSettings/PageSettingsProvider';\nimport { useID } from '../hooks/useID';\nimport './DataEditor.css';\n\nexport type DataEditorLanguages = 'json' | 'yaml' | 'markdown';\n\n/**\n * DataEditor is a wrapper over Monaco editor for editing JSON or YAML data.\n */\nexport function DataEditor(props: {\n  id?: string;\n  name: string;\n  language: DataEditorLanguages;\n  value: string;\n  onChange: (value: string) => void;\n  setError: (error?: string) => void;\n  isReadOnly?: boolean;\n  className?: string;\n  lineNumbers?: boolean;\n}) {\n  const id = useID(props);\n  const { language, value, onChange, setError, isReadOnly } = props;\n\n  const [ready, setReady] = useState(false);\n\n  // The outter div is used to contain the inner div that is absolutely positioned to fill the outer div\n  const outerDivEl = useRef<HTMLDivElement>(null);\n  const innerDivEl = useRef<HTMLDivElement>(null);\n\n  // When content changes, we need to update the height of the outer div to match the content\n  const updateEditorHeight = useCallback((value: string) => {\n    if (!outerDivEl.current) return;\n    outerDivEl.current.style.minHeight = `${EditorLineHeight + EditorPadding}` + 'px';\n    const visibleLines = value.split('\\n').length;\n    outerDivEl.current.style.height = `${visibleLines * EditorLineHeight + EditorPadding}` + 'px';\n  }, []);\n\n  // Create editor\n  const editorRef = useRef<{ editor?: monaco.editor.IStandaloneCodeEditor }>({});\n  useEffect(() => {\n    if (innerDivEl.current) {\n      const editor = monaco.editor.create(innerDivEl.current, {\n        lineNumbers: props.lineNumbers ? 'on' : 'off',\n        lineDecorationsWidth: props.lineNumbers ? undefined : 0,\n        theme: 'data-editor-dark',\n        padding: { top: EditorPaddingTop, bottom: EditorPaddingBottom },\n        fontSize: 14,\n        fontFamily: 'RedHatMono',\n        scrollBeyondLastLine: false,\n        minimap: { enabled: false },\n        // renderLineHighlight: 'none',\n        renderLineHighlightOnlyWhenFocus: true,\n        scrollbar: {\n          alwaysConsumeMouseWheel: false,\n        },\n      });\n      editorRef.current.editor = editor;\n      return () => editor.dispose();\n    }\n  }, [props.lineNumbers]);\n\n  // Hook up editor change event to call onChange\n  useEffect(() => {\n    const editor = editorRef?.current?.editor;\n    if (!editor) return;\n\n    const model = editor.getModel();\n    if (!model) return;\n\n    const didChangeContentDisposable = model.onDidChangeContent(() => {\n      const value = editor.getValue() ?? '';\n      onChange(value);\n      updateEditorHeight(value);\n    });\n    return () => didChangeContentDisposable.dispose();\n  }, [onChange, updateEditorHeight]);\n\n  // Set editor value to change on value change\n  useEffect(() => {\n    const editor = editorRef?.current?.editor;\n    if (!editor) return;\n    if (editor.getValue() === value) return;\n    editor.setValue(value);\n    updateEditorHeight(value);\n  }, [value, updateEditorHeight]);\n\n  // Editor is read-only\n  useEffect(() => {\n    const editor = editorRef?.current?.editor;\n    if (!editor) return;\n    editor.updateOptions({ readOnly: isReadOnly });\n  }, [isReadOnly]);\n\n  // Hook up editor language change event which hooks up the form errors\n  const [hasError, setHasError] = useState(false);\n  useEffect(() => {\n    const editor = editorRef?.current?.editor;\n    if (!editor) return;\n\n    const model = editor.getModel();\n    if (!model) return;\n\n    monaco.editor.setModelLanguage(model, language);\n\n    const didChangeMarkersDisposable = monaco.editor.onDidChangeMarkers(() => {\n      const markers = monaco.editor.getModelMarkers({\n        owner: model.getLanguageId(),\n        resource: model.uri,\n      });\n      setHasError(markers.length > 0);\n      setError(markers.length > 0 ? markers.map((marker) => marker.message).join('\\n') : undefined);\n    });\n\n    return () => didChangeMarkersDisposable.dispose();\n  }, [language, setError]);\n\n  // Update editor size when container size changes\n  useResizeObserver(innerDivEl, () => {\n    const editor = editorRef?.current?.editor;\n    if (!editor) return;\n    editor.layout();\n    setReady(true);\n  });\n\n  // Update editor theme when settings change\n  const settings = usePageSettings();\n  useEffect(() => {\n    const editor = editorRef?.current?.editor;\n    if (!editor) return;\n    editor.updateOptions({\n      theme: settings.activeTheme === 'dark' ? 'data-editor-dark' : 'data-editor-light',\n    });\n  }, [settings.activeTheme]);\n\n  return (\n    <OuterDiv\n      className={props.className}\n      aria-invalid={hasError ? 'true' : undefined}\n      ref={outerDivEl}\n    >\n      <InnerDiv\n        id={id}\n        data-cy={id}\n        ref={innerDivEl}\n        className=\"data-editor\"\n        aria-disabled={ready ? 'false' : 'true'}\n      />\n    </OuterDiv>\n  );\n}\n\n// The outer div is used to contain an inner div that is absolutely positioned to fill the outer div\nconst OuterDiv = styled.div`\n  position: relative;\n  min-height: 33px;\n`;\n\n// The inner div is used to contain the editor and is absolutely positioned to fill the outer div\nconst InnerDiv = styled.div`\n  position: absolute;\n  inset: 0;\n`;\n\n// Editor constants\nconst EditorLineHeight = 21;\nconst EditorPaddingTop = 6;\nconst EditorPaddingBottom = 6;\nconst EditorPadding = EditorPaddingTop + EditorPaddingBottom;\n\n// workers are singletons at a global level\n// this solves the problem of creating multiple workers for the same language\n// when multiple editors are created\nlet editorWorkerService: Worker;\nlet jsonWorker: Worker;\nlet yamlWorker: Worker;\nfunction getWorker(moduleId: string, label: string) {\n  switch (label) {\n    case 'editorWorkerService':\n      if (!editorWorkerService) {\n        editorWorkerService = new Worker(\n          new URL('../../node_modules/monaco-editor/esm/vs/editor/editor.worker', import.meta.url),\n          { type: 'module' }\n        );\n      }\n      return editorWorkerService;\n    case 'json':\n      if (!jsonWorker) {\n        jsonWorker = new Worker(\n          new URL(\n            '../../node_modules/monaco-editor/esm/vs/language/json/json.worker',\n            import.meta.url\n          ),\n          { type: 'module' }\n        );\n      }\n      return jsonWorker;\n    case 'yaml':\n      if (!yamlWorker) {\n        yamlWorker = new Worker(\n          new URL('../../node_modules/monaco-yaml/yaml.worker', import.meta.url),\n          { type: 'module' }\n        );\n      }\n      return yamlWorker;\n    default:\n      throw new Error(`Unknown label ${label}`);\n  }\n}\nwindow.MonacoEnvironment = { getWorker };\n\n// Set up Monaco editor json language support\nmonaco.languages.json.jsonDefaults.setDiagnosticsOptions({ validate: true });\n\n// Set up Monaco editor yaml language support\nconfigureMonacoYaml(monaco, {\n  validate: true,\n  format: true,\n  schemas: [\n    {\n      uri: '',\n      fileMatch: [],\n      schema: {\n        type: 'object',\n        properties: {},\n        additionalProperties: true,\n      },\n    },\n  ],\n});\n\n// Set up Monaco editor dark theme\nmonaco.editor.defineTheme('data-editor-dark', {\n  base: 'vs-dark',\n  inherit: true,\n  colors: {\n    'editor.background': '#00000000',\n    'minimap.background': '#00000000',\n    'scrollbarSlider.background': '#FFFFFF22',\n    'editor.outline': '#00000000',\n    'editor.lineHighlightBorder': '#00000000',\n    'editor.lineHighlightBackground': '#00000000',\n    'editorLineNumber.foreground': '#FFFFFF88',\n    'editorBracketMatch.border': '#00000000',\n    'editorBracketMatch.background': '#FFFFFF00',\n  },\n  rules: [{ token: '', background: '#222222' }],\n});\n\n// Set up Monaco editor light theme\nmonaco.editor.defineTheme('data-editor-light', {\n  base: 'vs',\n  inherit: true,\n  colors: {\n    'editor.background': '#FFFFFF00',\n    'minimap.background': '#FFFFFF00',\n    'scrollbarSlider.background': '#FFFFFF22',\n    'editor.outline': '#00000000',\n    'editor.lineHighlightBorder': '#ffffff00',\n    'editor.lineHighlightBackground': '#ffffff00',\n    'editorLineNumber.foreground': '#00000088',\n    'editorBracketMatch.border': '#ffffff00',\n    'editorBracketMatch.background': '#00000000',\n  },\n  rules: [],\n});\n","import { AlertProps } from '@patternfly/react-core';\nimport { ReactNode, useCallback } from 'react';\nimport { Accept, useDropzone } from 'react-dropzone';\nimport { useTranslation } from 'react-i18next';\nimport { usePageAlertToaster } from '..';\n\nexport function DropZone(props: {\n  children?: ReactNode;\n  onDrop: (contents: string) => void;\n  isDisabled?: boolean;\n  inputRef?: React.RefObject<HTMLInputElement>;\n  accept?: Accept;\n}) {\n  const { t } = useTranslation();\n  const alertToaster = usePageAlertToaster();\n  const { onDrop: onLoad } = props;\n  const onDrop = useCallback(\n    (files: File[]) => {\n      if (!files || files.length === 0) return;\n      const file = files[0];\n      const reader = new FileReader();\n      reader.onload = () => {\n        const contents = reader.result;\n        if (typeof contents === 'string') {\n          const alert: AlertProps = {\n            variant: 'success',\n            title: t('File uploaded'),\n            timeout: true,\n          };\n          alertToaster.addAlert(alert);\n          onLoad(contents);\n        }\n      };\n      reader.onerror = () => {\n        const alert: AlertProps = {\n          variant: 'danger',\n          title: t('Failed to upload file'),\n          children: t('Unable to upload'),\n        };\n        alertToaster.addAlert(alert);\n      };\n      reader.readAsText(file);\n    },\n    [t, alertToaster, onLoad]\n  );\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop,\n    noClick: true,\n    accept: props.accept ?? {\n      'application/json': ['.json'],\n      'text/yaml': ['.yaml', '.yml'],\n    },\n  });\n\n  return (\n    <div\n      id=\"code-editor-dropzone\"\n      {...getRootProps({ disabled: true })}\n      style={{ width: '100%', height: '100%' }}\n    >\n      <input id=\"code-editor-dropzone-input\" {...getInputProps()} ref={props.inputRef} />\n      {props.children}\n    </div>\n  );\n}\n","import { Icon } from '@patternfly/react-core';\nimport { AngleDownIcon } from '@patternfly/react-icons';\nimport { t } from 'i18next';\n\nexport function ExpandIcon(props: {\n  isExpanded: boolean;\n  setExpanded: (expanded: boolean) => void;\n  direction?: 'left' | 'right';\n  size?: 'sm' | 'md' | 'lg';\n}) {\n  return (\n    <Icon size={props.size ?? 'md'}>\n      <AngleDownIcon\n        data-cy=\"expandable\"\n        style={{\n          transform: props.isExpanded\n            ? 'rotate(0deg)'\n            : props.direction === 'left'\n              ? 'rotate(90deg)'\n              : 'rotate(-90deg)',\n          transition: 'transform 0.2s',\n          alignSelf: 'center',\n        }}\n        onClick={() => props.setExpanded(!props.isExpanded)}\n        aria-label={props.isExpanded ? t('Collapse') : t('Expand')}\n      />\n    </Icon>\n  );\n}\n","export function downloadTextFile(name: string, content: string, extension: string = 'txt') {\n  const file = new Blob(content.split('/n'), { type: 'text/plain' });\n\n  const element = document.createElement('a');\n  element.href = URL.createObjectURL(file);\n  element.download = name + '.' + extension;\n\n  document.body.appendChild(element);\n  element.click();\n  document.body.removeChild(element);\n}\n\nexport function downloadCvsFile(name: string, content: string[]) {\n  const file = new Blob(content, { type: 'text/csv' });\n\n  const element = document.createElement('a');\n  element.href = URL.createObjectURL(file);\n  element.download = name + '.csv';\n\n  document.body.appendChild(element);\n  element.click();\n  document.body.removeChild(element);\n}\n","import { FormGroup, FormHelperText, HelperText, HelperTextItem } from '@patternfly/react-core';\nimport { ReactNode } from 'react';\nimport { Help } from '../../components/Help';\n\nexport interface PageFormGroupProps {\n  fieldId?: string;\n\n  icon?: ReactNode;\n  label?: string;\n  labelHelp?: string | string[] | ReactNode;\n  labelHelpTitle?: string;\n  isRequired?: boolean;\n\n  additionalControls?: ReactNode;\n\n  children?: ReactNode;\n\n  helperText?: string;\n  helperTextInvalid?: string | string[] | false;\n}\n\n/** Wrapper over the PatternFly FormGroup making it optional based on if label is given. */\nexport function PageFormGroup(props: PageFormGroupProps) {\n  const { children, helperText, helperTextInvalid, isRequired, labelHelp, labelHelpTitle, label } =\n    props;\n\n  return (\n    <FormGroup\n      id={`${props.fieldId}-form-group`}\n      fieldId={props.fieldId}\n      label={\n        <>\n          {props.icon}\n          {label}\n        </>\n      }\n      labelIcon={labelHelp ? <Help title={labelHelpTitle} help={labelHelp} /> : undefined}\n      labelInfo={props.additionalControls}\n      isRequired={isRequired}\n      data-cy={`${props.fieldId}-form-group`}\n    >\n      {children}\n      {(helperText || helperTextInvalid) && (\n        <FormHelperText>\n          <HelperText>\n            <HelperTextItem variant={helperTextInvalid ? 'error' : undefined}>\n              {helperTextInvalid ? helperTextInvalid : helperText}\n            </HelperTextItem>\n          </HelperText>\n        </FormHelperText>\n      )}\n    </FormGroup>\n  );\n}\n","import { Flex, FlexItem, Icon, ToggleGroup, ToggleGroupItem } from '@patternfly/react-core';\nimport { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { CopyIcon, DownloadIcon, UploadIcon } from '@patternfly/react-icons';\nimport isDeepEqual from 'fast-deep-equal';\nimport getValue from 'get-value';\nimport jsyaml, { YAMLException } from 'js-yaml';\nimport { ReactNode, useCallback, useLayoutEffect, useRef, useState } from 'react';\nimport {\n  Controller,\n  FieldPath,\n  FieldPathByValue,\n  FieldValues,\n  PathValue,\n  Validate,\n  useFormContext,\n} from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport {\n  PageActionSelection,\n  PageActionType,\n  PageActions,\n  usePageAlertToaster,\n  usePageSettings,\n} from '../..';\nimport { DataEditor, DataEditorLanguages } from '../../components/DataEditor';\nimport { DropZone } from '../../components/DropZone';\nimport { IconButton } from '../../components/IconButton';\nimport { ExpandIcon } from '../../components/icons/ExpandIcon';\nimport { useClipboard } from '../../hooks/useClipboard';\nimport { useID } from '../../hooks/useID';\nimport { downloadTextFile } from '../../utils/download-file';\nimport { PageFormGroup } from './PageFormGroup';\nimport { useRequiredValidationRule } from './validation-hooks';\n\nexport type PageFormDataEditorInputProps<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPathByValue<\n    TFieldValues,\n    object | string | undefined | null\n  > = FieldPathByValue<TFieldValues, object | string | undefined | null>,\n> = {\n  // Standard form group props\n  id?: string;\n  name: TFieldName;\n  label: string;\n  labelHelp?: string | string[] | ReactNode;\n  labelHelpTitle?: string;\n  helperText?: string | undefined;\n  additionalControls?: ReactNode;\n\n  format: DataEditorLanguages | 'object';\n\n  // Features - Enable all by default and only turn them off if needed\n  disableCopy?: boolean;\n  disableUpload?: boolean;\n  disableDownload?: boolean;\n  disableExpand?: boolean;\n\n  /** If the editor is expandable, it will be collapsed by default. */\n  defaultCollapsed?: boolean;\n\n  // Validation\n  isRequired?: boolean;\n  validate?: Validate<string, TFieldValues> | Record<string, Validate<string, TFieldValues>>;\n\n  /** Indicates that the field is read-only. */\n  isReadOnly?: boolean;\n\n  /** Defaults empty value to array for json */\n  isArray?: boolean;\n\n  defaultValue?: string | object;\n\n  enableUndo?: boolean;\n  enableReset?: boolean;\n};\n\nexport function PageFormDataEditor<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPathByValue<\n    TFieldValues,\n    object | string | undefined | null\n  > = FieldPathByValue<TFieldValues, object | string | undefined | null>,\n>(props: PageFormDataEditorInputProps<TFieldValues, TFieldName>) {\n  const { t } = useTranslation();\n  const {\n    name,\n    format: valueFormat,\n    disableCopy,\n    disableUpload,\n    disableDownload,\n    disableExpand,\n    validate,\n    isArray,\n  } = props;\n  const id = useID(props);\n  const {\n    formState: { isSubmitting, isValidating },\n    setError,\n    getValues,\n    clearErrors,\n    control,\n  } = useFormContext<TFieldValues>();\n  const settings = usePageSettings();\n  const defaultLanguage = settings.dataEditorFormat ?? 'yaml';\n  const [language, setLanguage] = useState<DataEditorLanguages>(defaultLanguage); // TODO settings.defaultCodeLanguage\n  const [isExpanded, setExpanded] = useState(!props.defaultCollapsed);\n\n  // Here we store the value the data editor is working with\n  const [dataEditorValue, setDataEditorValue] = useState<string>(() => {\n    const value = getValues(name);\n    if (typeof value === 'string') return value as string;\n    else return objectToString(value, defaultLanguage);\n  });\n\n  const alertToaster = usePageAlertToaster();\n  const { writeToClipboard } = useClipboard();\n\n  const handleCopy = useCallback(\n    () => writeToClipboard(objectToString(valueToObject(getValues(name), isArray), language)),\n    [getValues, isArray, language, name, writeToClipboard]\n  );\n\n  const onDrop = useCallback(\n    (contents: string) => {\n      setDataEditorValue(objectToString(valueToObject(contents, isArray), language));\n    },\n    [isArray, language]\n  );\n\n  const dropZoneInputRef = useRef<HTMLInputElement>(null);\n  const handleUpload = useCallback(() => dropZoneInputRef.current?.click(), []);\n\n  const handleDownload = useCallback(() => {\n    const fileName = name || 'data';\n    const extension = language === 'json' ? 'json' : 'yaml';\n    downloadTextFile(\n      fileName,\n      objectToString(valueToObject(getValues(name), isArray), language),\n      extension\n    );\n    alertToaster.addAlert({ variant: 'success', title: t('File downloaded'), timeout: true });\n  }, [alertToaster, getValues, isArray, language, name, t]);\n\n  useLayoutEffect(() => {\n    const value = objectToString(valueToObject(getValues(name), isArray), language);\n    setDataEditorValue(value);\n  }, [getValues, isArray, language, name]);\n\n  const {\n    setValue,\n    formState: { defaultValues },\n  } = useFormContext<TFieldValues>();\n\n  const required = useRequiredValidationRule(props.label, props.isRequired);\n\n  const undoValue = getValue(defaultValues as object, props.name) as PathValue<\n    TFieldValues,\n    TFieldName\n  >;\n\n  return (\n    <Controller<TFieldValues, TFieldName>\n      name={name}\n      control={control}\n      shouldUnregister\n      render={({ field: { value, name, onChange }, fieldState: { error } }) => {\n        function handleChange(stringValue: string) {\n          try {\n            const valueAsObject = valueToObject(stringValue, isArray);\n            switch (valueFormat) {\n              case 'object':\n                onChange(valueAsObject);\n                return;\n              default:\n                onChange(objectToString(valueAsObject, valueFormat));\n                break;\n            }\n\n            clearErrors(name);\n          } catch (err) {\n            if (err instanceof Error) {\n              setError(name, { message: err.message });\n            }\n          }\n        }\n        return (\n          <PageFormGroup\n            fieldId={id}\n            icon={\n              !disableExpand && <ExpandIcon isExpanded={isExpanded} setExpanded={setExpanded} />\n            }\n            label={props.label}\n            labelHelpTitle={props.labelHelpTitle ?? props.label}\n            labelHelp={props.labelHelp}\n            additionalControls={\n              <DataEditorActions\n                handleCopy={!disableCopy && handleCopy}\n                handleUpload={!disableUpload && handleUpload}\n                handleDownload={!disableDownload && handleDownload}\n                language={language}\n                setLanguage={setLanguage}\n              >\n                {props.additionalControls}\n              </DataEditorActions>\n            }\n            helperText={props.helperText}\n            helperTextInvalid={!(validate && isValidating) && error?.message?.split('\\n')}\n            isRequired={props.isRequired}\n          >\n            {isExpanded && (\n              <div style={{ display: 'flex' }}>\n                <DropZone\n                  onDrop={onDrop}\n                  isDisabled={isSubmitting || props.isReadOnly}\n                  inputRef={dropZoneInputRef}\n                >\n                  <DataEditor\n                    data-cy={id}\n                    id={id}\n                    name={name}\n                    language={language}\n                    value={dataEditorValue}\n                    onChange={handleChange}\n                    setError={(error) => {\n                      if (!error) clearErrors(name);\n                      else setError(name, { message: error });\n                    }}\n                    isReadOnly={props.isReadOnly || isSubmitting}\n                    className={\n                      props.isReadOnly\n                        ? `pf-v5-c-form-control pf-m-disabled`\n                        : `pf-v5-c-form-control`\n                    }\n                  />\n                </DropZone>\n                <PageActions\n                  actions={[\n                    {\n                      label: t('Undo changes'),\n                      type: PageActionType.Button,\n                      selection: PageActionSelection.None,\n                      onClick: () => {\n                        setValue(\n                          props.name,\n                          undoValue as unknown as PathValue<TFieldValues, TFieldName>\n                        );\n                        setDataEditorValue('');\n                        setTimeout(() => {\n                          setDataEditorValue(\n                            objectToString(valueToObject(undoValue, isArray), language)\n                          );\n                        }, 0);\n                      },\n                      isHidden: () => !props.enableUndo || isDeepEqual(value, undoValue),\n                    },\n                    {\n                      label: t('Reset to default'),\n                      type: PageActionType.Button,\n                      selection: PageActionSelection.None,\n                      onClick: () => {\n                        setValue(\n                          props.name as FieldPath<TFieldValues>,\n                          props.defaultValue as unknown as PathValue<\n                            TFieldValues,\n                            FieldPath<TFieldValues>\n                          >\n                        );\n                        setDataEditorValue('');\n                        setTimeout(() => {\n                          setDataEditorValue(\n                            objectToString(valueToObject(props.defaultValue, isArray), language)\n                          );\n                        }, 0);\n                      },\n                      isHidden: () => !props.enableReset || isDeepEqual(value, props.defaultValue),\n                    },\n                  ]}\n                  // variant={ButtonVariant.control}\n                  position={DropdownPosition.right}\n                />\n              </div>\n            )}\n            {!isExpanded && <div className=\"pf-v5-c-form-control\" />}\n          </PageFormGroup>\n        );\n      }}\n      rules={{ required, validate: props.validate }}\n    />\n  );\n}\n\nexport function DataEditorButtons(props: {\n  handleCopy: (() => void) | false;\n  handleDownload: (() => void) | false;\n  handleUpload: (() => void) | false;\n  children?: ReactNode;\n}) {\n  const { t } = useTranslation();\n  const { handleCopy, handleDownload, handleUpload } = props;\n  if (!handleCopy && !handleDownload && !handleUpload) return <></>;\n  return (\n    <Flex spaceItems={{ default: 'spaceItemsMd' }}>\n      {handleCopy && (\n        <FlexItem>\n          <IconButton\n            id=\"copy-button\"\n            data-cy=\"copy-button\"\n            aria-label={t('Copy to clipboard')}\n            type=\"button\"\n            onClick={handleCopy}\n          >\n            <Icon size=\"md\">\n              <CopyIcon />\n            </Icon>\n          </IconButton>\n        </FlexItem>\n      )}\n      {handleUpload && (\n        <FlexItem>\n          <IconButton\n            id=\"upload-button\"\n            data-cy=\"upload-button\"\n            aria-label={t('Upload from file')}\n            type=\"button\"\n            onClick={handleUpload}\n          >\n            <Icon size=\"md\">\n              <UploadIcon />\n            </Icon>\n          </IconButton>\n        </FlexItem>\n      )}\n      {handleDownload && (\n        <FlexItem>\n          <IconButton\n            id=\"download-button\"\n            data-cy=\"download-button\"\n            aria-label={t('Download file')}\n            type=\"button\"\n            onClick={handleDownload}\n          >\n            <Icon size=\"md\">\n              <DownloadIcon />\n            </Icon>\n          </IconButton>\n        </FlexItem>\n      )}\n    </Flex>\n  );\n}\n\nexport function DataEditorActions(props: {\n  handleCopy: (() => void) | false;\n  handleDownload: (() => void) | false;\n  handleUpload: (() => void) | false;\n  language: string;\n  setLanguage: (language: DataEditorLanguages) => void;\n  children?: ReactNode;\n}) {\n  const { t } = useTranslation();\n  const { handleCopy, handleDownload, handleUpload, language, setLanguage } = props;\n  return (\n    <Flex spaceItems={{ default: 'spaceItemsLg' }}>\n      <FlexItem>{props.children}</FlexItem>\n      <DataEditorButtons\n        handleCopy={handleCopy}\n        handleDownload={handleDownload}\n        handleUpload={handleUpload}\n      />\n      <FlexItem align={{ default: 'alignRight' }}>\n        <ToggleGroup isCompact>\n          <ToggleGroupItem\n            id=\"toggle-yaml\"\n            data-cy=\"toggle-yaml\"\n            aria-label={t('Toggle to YAML')}\n            isSelected={language === 'yaml'}\n            text=\"YAML\"\n            type=\"button\"\n            onChange={() => setLanguage('yaml')}\n          />\n          <ToggleGroupItem\n            id=\"toggle-json\"\n            data-cy=\"toggle-json\"\n            aria-label={t('Toggle to JSON')}\n            isSelected={language === 'json'}\n            text=\"JSON\"\n            type=\"button\"\n            onChange={() => setLanguage('json')}\n          />\n        </ToggleGroup>\n      </FlexItem>\n    </Flex>\n  );\n}\n\nexport function valueToObject(\n  value: string | object | undefined | null,\n  isArray?: boolean\n): object {\n  if (value === undefined || value === null) {\n    return isArray ? [] : {};\n  }\n\n  if (typeof value === 'string') {\n    try {\n      value = JSON.parse(value) as object;\n    } catch {\n      try {\n        value = jsyaml.load(value as string) as object;\n      } catch (err) {\n        if (err instanceof Error || err instanceof YAMLException) {\n          return new Error(err.message);\n        }\n        return {};\n      }\n    }\n  }\n\n  if (isArray) {\n    if (Array.isArray(value)) {\n      return value as object;\n    } else {\n      return [];\n    }\n  } else {\n    if (Array.isArray(value)) {\n      return {};\n    } else {\n      return value;\n    }\n  }\n}\n\nexport function objectToString(obj: object, language: DataEditorLanguages): string {\n  if (obj === null || obj === undefined) {\n    return '';\n  }\n\n  switch (language) {\n    case 'json':\n      return JSON.stringify(obj, null, 2);\n    case 'yaml': {\n      const yaml = jsyaml.dump(obj).trimEnd();\n      switch (yaml) {\n        case 'null':\n        case '{}':\n        case '[]':\n          return '';\n        default:\n          return yaml;\n      }\n    }\n    default:\n      return '';\n  }\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport {\n  DropdownPosition,\n  Select,\n  SelectOption,\n  SelectOptionObject,\n} from '@patternfly/react-core/deprecated';\nimport getValue from 'get-value';\nimport { ChangeEvent, ReactNode, useCallback, useState } from 'react';\nimport {\n  Controller,\n  FieldPath,\n  FieldPathValue,\n  FieldValues,\n  PathValue,\n  Validate,\n  useFormContext,\n} from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { PageActionSelection, PageActionType } from '../../PageActions/PageAction';\nimport { PageActions } from '../../PageActions/PageActions';\nimport { PageSelectOption } from '../../PageInputs/PageSelectOption';\nimport { getID, useID } from '../../hooks/useID';\nimport { useFrameworkTranslations } from '../../useFrameworkTranslations';\nimport { PageFormGroup } from './PageFormGroup';\nimport { useRequiredValidationRule } from './validation-hooks';\n\nexport type PageFormSelectProps<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n  TSelection = unknown,\n> = {\n  /**\n   * The id attribute specifies a unique id for an HTML element. The value of the id attribute must be unique within the HTML document.\n   *\n   * It is also used by JavaScript to access and manipulate the element with the specific id.\n   */\n  id?: string;\n\n  /**\n   * The name attribute specifies the name of an <input> element.\n   *\n   * The name attribute is used to reference elements in a JavaScript, or to reference form data after a form is submitted.\n   */\n  name: TFieldName;\n\n  /**\n   * The <label> tag defines a label for several elements.\n   *\n   * Proper use of labels with the elements will benefit:\n   * - Screen reader users (will read out loud the label, when the user is focused on the element)\n   * - Users who have difficulty clicking on very small regions (such as checkboxes) - because when a user clicks the text within the <label> element, it toggles the input (this increases the hit area).\n   */\n  label?: string;\n\n  labelHelpTitle?: string;\n  labelHelp?: string | string[] | ReactNode;\n\n  // Additional label information displayed after the label.\n  additionalControls?: ReactNode;\n\n  /**\n   * The placeholder attribute specifies a short hint that describes the expected value of an input field (e.g. a sample value or a short description of the expected format).\n   *\n   * The short hint is displayed in the input field before the user enters a value.\n   *\n   * Note: The placeholder attribute works with the following input types: text, search, url, tel, email, and password.\n   */\n  placeholderText?: string;\n\n  options: PageSelectOption<TSelection>[];\n\n  footer?: ReactNode;\n\n  helperText?: string;\n\n  /**\n   * When present, it specifies that the <input> element should be disabled.\n   *\n   * A disabled input element is unusable and un-clickable.\n   *\n   * The disabled attribute can be set to keep a user from using the <input> element until some other condition has been met (like selecting a checkbox, etc.). Then, a JavaScript could remove the disabled value, and make the <input> element usable.\n   */\n  isDisabled?: boolean;\n\n  /**\n   * When present, it specifies that an input field is read-only.\n   *\n   * A read-only input field cannot be modified (however, a user can tab to it, highlight it, and copy the text from it).\n   *\n   * The readonly attribute can be set to keep a user from changing the value until some other conditions have been met (like selecting a checkbox, etc.). Then, a JavaScript can remove the readonly value, and make the input field editable.\n   */\n  isReadOnly?: boolean;\n\n  /**\n   * When present, it specifies that an input field must be filled out before submitting the form.\n   *\n   * Note: The required attribute works with the following input types: text, search, url, tel, email, password, date pickers, number, checkbox, radio, and file.\n   */\n  isRequired?: boolean;\n  fieldNameToResetOnFieldChange?: TFieldName;\n  onChange?: (option?: TSelection) => void;\n\n  validate?:\n    | Validate<FieldPathValue<TFieldValues, TFieldName>, TFieldValues>\n    | Record<string, Validate<FieldPathValue<TFieldValues, TFieldName>, TFieldValues>>;\n\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n\n  enableReset?: boolean;\n  enableUndo?: boolean;\n};\n\nexport function PageFormSelect<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n  TSelection = unknown,\n>(props: PageFormSelectProps<TFieldValues, TFieldName, TSelection>) {\n  const {\n    name,\n    label,\n    labelHelpTitle,\n    labelHelp,\n    additionalControls,\n    placeholderText,\n    options,\n    footer,\n    helperText,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    validate,\n    fieldNameToResetOnFieldChange,\n  } = props;\n\n  const id = useID(props);\n\n  const { t } = useTranslation();\n\n  const {\n    control,\n    setValue,\n    formState: { isSubmitting, isValidating, defaultValues },\n    resetField,\n  } = useFormContext<TFieldValues>();\n\n  const [open, setOpen] = useState(false);\n  const onToggle = useCallback(() => setOpen(!open), [open]);\n\n  const [translations] = useFrameworkTranslations();\n  const required = useRequiredValidationRule(props.label, props.isRequired);\n\n  const undoValue = getValue(defaultValues as object, props.name) as PathValue<\n    TFieldValues,\n    TFieldName\n  >;\n\n  return (\n    <Controller<TFieldValues, TFieldName>\n      name={name}\n      control={control}\n      defaultValue={props.defaultValue}\n      shouldUnregister\n      render={({ field: { onChange, value }, fieldState: { error } }) => {\n        if (value === '') {\n          if (options.length === 1 && isRequired) {\n            onChange(options[0].value);\n          }\n        }\n        const onSelectHandler = (\n          _event: React.MouseEvent<Element, MouseEvent> | ChangeEvent<Element>,\n          label: string | SelectOptionObject\n        ) => {\n          const option = options.find((option) => option.label === label.toString())?.value;\n          onChange(option);\n          fieldNameToResetOnFieldChange ? resetField(fieldNameToResetOnFieldChange) : undefined;\n          if (props.onChange) {\n            props.onChange(option);\n          }\n          setOpen(false);\n        };\n\n        const helperTextInvalid = error?.message\n          ? validate && isValidating\n            ? translations.validating\n            : error?.message\n          : undefined;\n\n        const selected = options.find((option) => option.value === value);\n\n        return (\n          <PageFormGroup\n            fieldId={id}\n            label={label}\n            labelHelpTitle={labelHelpTitle ?? label}\n            labelHelp={labelHelp}\n            additionalControls={additionalControls}\n            helperText={helperText}\n            helperTextInvalid={helperTextInvalid}\n            isRequired={isRequired}\n          >\n            <div style={{ display: 'flex' }}>\n              <Select\n                id={id}\n                itemID={id}\n                placeholderText={placeholderText}\n                variant=\"single\"\n                aria-describedby={`${id}-form-group`}\n                selections={selected?.label}\n                onSelect={onSelectHandler}\n                isOpen={open}\n                onToggle={onToggle}\n                onClear={\n                  isRequired\n                    ? undefined\n                    : () => {\n                        onChange(null);\n                        setOpen(false);\n                      }\n                }\n                maxHeight={280}\n                validated={helperTextInvalid ? 'error' : undefined}\n                isDisabled={isDisabled || isReadOnly || isSubmitting}\n                hasPlaceholderStyle\n                footer={footer}\n                ouiaId=\"menu-select\"\n                data-cy={id}\n              >\n                {options.map((option) => {\n                  const optionId = getID(option);\n                  return (\n                    <SelectOption\n                      id={optionId}\n                      key={option.label}\n                      value={option.label}\n                      label={option.label}\n                      description={option.description}\n                      data-cy={optionId}\n                    >\n                      {option.label}\n                    </SelectOption>\n                  );\n                })}\n              </Select>\n              <PageActions\n                actions={[\n                  {\n                    label: t('Undo changes'),\n                    type: PageActionType.Button,\n                    selection: PageActionSelection.None,\n                    onClick: () => {\n                      setValue(\n                        props.name,\n                        undoValue as unknown as PathValue<TFieldValues, TFieldName>\n                      );\n                    },\n                    isHidden: () => !props.enableUndo || value === undoValue,\n                  },\n                  {\n                    label: t('Reset to default'),\n                    type: PageActionType.Button,\n                    selection: PageActionSelection.None,\n                    onClick: () => {\n                      setValue(\n                        props.name as FieldPath<TFieldValues>,\n                        props.defaultValue as unknown as PathValue<\n                          TFieldValues,\n                          FieldPath<TFieldValues>\n                        >\n                      );\n                    },\n                    isHidden: () => !props.enableReset || value === props.defaultValue,\n                  },\n                ]}\n                variant={ButtonVariant.control}\n                position={DropdownPosition.right}\n              />\n            </div>\n          </PageFormGroup>\n        );\n      }}\n      rules={{\n        required,\n        validate,\n      }}\n    />\n  );\n}\n","import { Switch } from '@patternfly/react-core';\nimport { ReactElement, ReactNode } from 'react';\nimport {\n  Controller,\n  FieldPath,\n  FieldValues,\n  Validate,\n  ValidationRule,\n  useFormContext,\n} from 'react-hook-form';\nimport { useID } from '../../hooks/useID';\nimport { PageFormGroup } from './PageFormGroup';\n\nexport type PageFormSwitchProps<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  id?: string;\n  name: TFieldName;\n  label?: string;\n  labelHelpTitle?: string;\n  labelHelp?: string | string[] | ReactNode;\n  isRequired?: boolean;\n  additionalControls?: ReactElement;\n  helperText?: string;\n  pattern?: ValidationRule<RegExp>;\n  validate?: Validate<string, TFieldValues> | Record<string, Validate<string, TFieldValues>>;\n  autoFocus?: boolean;\n  labelOn?: string;\n  labelOff?: string;\n};\n\nexport function PageFormSwitch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: PageFormSwitchProps<TFieldValues, TFieldName>) {\n  const {\n    name,\n    helperText,\n    validate,\n    additionalControls,\n    label,\n    labelHelp,\n    labelHelpTitle,\n    labelOn,\n    labelOff,\n  } = props;\n  const {\n    control,\n    formState: { isSubmitting, isValidating },\n  } = useFormContext<TFieldValues>();\n  const id = useID(props);\n  return (\n    <Controller<TFieldValues, TFieldName>\n      name={name}\n      control={control}\n      shouldUnregister\n      render={({ field: { onChange, value }, fieldState: { error } }) => {\n        const helperTextInvalid = !(validate && isValidating) ? error?.message : undefined;\n        return (\n          <PageFormGroup\n            fieldId={id}\n            data-cy={id + '-form-group'}\n            label={label}\n            labelHelpTitle={labelHelpTitle ?? label}\n            labelHelp={labelHelp}\n            helperText={helperText}\n            helperTextInvalid={helperTextInvalid}\n            additionalControls={additionalControls}\n          >\n            <Switch\n              data-cy={id + '-toggle'}\n              aria-label={label}\n              isChecked={value}\n              onChange={(e) => onChange(e)}\n              isDisabled={isSubmitting}\n              label={labelOn}\n              labelOff={labelOff}\n            />\n          </PageFormGroup>\n        );\n      }}\n    />\n  );\n}\n","import { Button, InputGroup, InputGroupItem, TextArea } from '@patternfly/react-core';\nimport { EyeIcon, EyeSlashIcon, SearchIcon } from '@patternfly/react-icons';\nimport { useState } from 'react';\nimport { Controller, FieldPath, FieldValues, PathValue, useFormContext } from 'react-hook-form';\nimport { useID } from '../../hooks/useID';\nimport { useFrameworkTranslations } from '../../useFrameworkTranslations';\nimport { capitalizeFirstLetter } from '../../utils/strings';\nimport { PageFormGroup } from './PageFormGroup';\nimport { PageFormTextInputProps } from './PageFormTextInput';\nimport { useRequiredValidationRule } from './validation-hooks';\n\nexport function PageFormTextArea<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n  TSelection extends FieldValues = FieldValues,\n>(\n  props: PageFormTextInputProps<TFieldValues, TFieldName, TSelection> & {\n    disableAutoResize?: boolean;\n  }\n) {\n  const {\n    type,\n    name,\n    label,\n    labelHelpTitle,\n    labelHelp,\n    additionalControls,\n    placeholder,\n    button,\n    helperText,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    validate,\n    minLength,\n    maxLength,\n    min,\n    max,\n    pattern,\n    selectTitle,\n    selectOpen,\n    selectValue,\n    autoFocus,\n    autoComplete,\n    disableAutoResize,\n  } = props;\n\n  const id = useID(props);\n\n  const {\n    control,\n    setValue,\n    formState: { isSubmitting, isValidating },\n  } = useFormContext<TFieldValues>();\n\n  const [showSecret, setShowSecret] = useState(false);\n\n  const [translations] = useFrameworkTranslations();\n  const required = useRequiredValidationRule(props.label, props.isRequired);\n\n  return (\n    <Controller<TFieldValues, TFieldName>\n      name={name}\n      control={control}\n      shouldUnregister\n      render={({ field: { onChange, value, name }, fieldState: { error } }) => {\n        const helperTextInvalid = error?.message\n          ? validate && isValidating\n            ? translations.validating\n            : error?.message\n          : undefined;\n\n        function onChangeHandler(value: string) {\n          onChange(value.trimStart());\n        }\n        return (\n          <PageFormGroup\n            fieldId={id}\n            label={label}\n            labelHelpTitle={labelHelpTitle ?? label}\n            labelHelp={labelHelp}\n            additionalControls={additionalControls}\n            helperText={helperText}\n            helperTextInvalid={helperTextInvalid}\n            isRequired={isRequired}\n          >\n            <InputGroup>\n              <InputGroupItem isFill>\n                <TextArea\n                  id={id}\n                  placeholder={placeholder}\n                  onChange={(_event, value: string) => onChangeHandler(value)}\n                  value={value ?? ''}\n                  aria-describedby={id ? `${id}-form-group` : undefined}\n                  validated={helperTextInvalid ? 'error' : undefined}\n                  type={type === 'password' ? (showSecret ? 'text' : 'password') : type}\n                  readOnlyVariant={isReadOnly ? 'default' : undefined}\n                  isDisabled={isDisabled}\n                  autoFocus={autoFocus}\n                  autoComplete={autoComplete || 'off'}\n                  data-cy={id}\n                  autoResize={disableAutoResize === undefined ? true : !disableAutoResize}\n                />\n              </InputGroupItem>\n              {type === 'password' && (\n                <Button\n                  variant=\"control\"\n                  onClick={() => setShowSecret(!showSecret)}\n                  isDisabled={isDisabled || isReadOnly}\n                >\n                  {showSecret ? <EyeIcon /> : <EyeSlashIcon />}\n                </Button>\n              )}\n              {selectTitle && (\n                <Button\n                  ouiaId={`lookup-${name}-button`}\n                  variant=\"control\"\n                  onClick={() =>\n                    selectOpen?.((item: TSelection) => {\n                      if (selectValue) {\n                        const value = selectValue(item);\n                        setValue(name, value as unknown as PathValue<TFieldValues, TFieldName>, {\n                          shouldValidate: true,\n                        });\n                      }\n                    }, selectTitle)\n                  }\n                  aria-label=\"Options menu\"\n                  isDisabled={isDisabled || isSubmitting}\n                >\n                  <SearchIcon />\n                </Button>\n              )}\n              {button && button}\n            </InputGroup>\n          </PageFormGroup>\n        );\n      }}\n      rules={{\n        required,\n        validate,\n\n        minLength:\n          typeof label === 'string' && typeof minLength === 'number'\n            ? {\n                value: minLength,\n                message: `${capitalizeFirstLetter(\n                  label.toLocaleLowerCase()\n                )} must be at least ${minLength} characters.`,\n              }\n            : minLength,\n\n        maxLength:\n          typeof label === 'string' && typeof maxLength === 'number'\n            ? {\n                value: maxLength,\n                message: `${capitalizeFirstLetter(\n                  label.toLocaleLowerCase()\n                )} cannot be greater than ${maxLength} characters.`,\n              }\n            : maxLength,\n\n        min:\n          typeof label === 'string' && (typeof min === 'number' || typeof min === 'string')\n            ? {\n                value: min,\n                message: `${capitalizeFirstLetter(\n                  label.toLocaleLowerCase()\n                )} must be less than ${min}.`,\n              }\n            : minLength,\n\n        max:\n          typeof label === 'string' && (typeof max === 'number' || typeof max === 'string')\n            ? {\n                value: max,\n                message: `${capitalizeFirstLetter(\n                  label.toLocaleLowerCase()\n                )} cannot be greater than ${max}.`,\n              }\n            : minLength,\n\n        pattern,\n      }}\n    />\n  );\n}\n","import {\n  Button,\n  ButtonVariant,\n  InputGroup,\n  InputGroupItem,\n  TextInput,\n} from '@patternfly/react-core';\nimport { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { EyeIcon, EyeSlashIcon, SearchIcon } from '@patternfly/react-icons';\nimport getValue from 'get-value';\nimport { ReactNode, useState } from 'react';\nimport {\n  Controller,\n  FieldPath,\n  FieldPathValue,\n  FieldValues,\n  PathValue,\n  Validate,\n  ValidationRule,\n  useFormContext,\n} from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { PageActionSelection, PageActionType } from '../../PageActions/PageAction';\nimport { PageActions } from '../../PageActions/PageActions';\nimport { useID } from '../../hooks/useID';\nimport { useFrameworkTranslations } from '../../useFrameworkTranslations';\nimport { capitalizeFirstLetter } from '../../utils/strings';\nimport { PageFormGroup } from './PageFormGroup';\nimport { useRequiredValidationRule } from './validation-hooks';\n\nexport type PageFormTextInputProps<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n  TSelection extends FieldValues = FieldValues,\n> = {\n  /**\n   * The id attribute specifies a unique id for an HTML element. The value of the id attribute must be unique within the HTML document.\n   *\n   * It is also used by JavaScript to access and manipulate the element with the specific id.\n   */\n  id?: string;\n\n  /**\n   * The name attribute specifies the name of an <input> element.\n   *\n   * The name attribute is used to reference elements in a JavaScript, or to reference form data after a form is submitted.\n   */\n  name: TFieldName;\n\n  /**\n   * The type attribute specifies the type of <input> element to display.\n   *\n   * If the type attribute is not specified, the default type is \"text\".\n   */\n  type?:\n    | 'text'\n    | 'date'\n    | 'datetime-local'\n    | 'email'\n    | 'month'\n    | 'number'\n    | 'password'\n    | 'search'\n    | 'tel'\n    | 'time'\n    | 'url';\n\n  /**\n   * The <label> tag defines a label for several elements.\n   *\n   * Proper use of labels with the elements will benefit:\n   * - Screen reader users (will read out loud the label, when the user is focused on the element)\n   * - Users who have difficulty clicking on very small regions (such as checkboxes) - because when a user clicks the text within the <label> element, it toggles the input (this increases the hit area).\n   */\n  label?: string;\n\n  labelHelpTitle?: string;\n  labelHelp?: string | string[] | ReactNode;\n\n  // Additional label information displayed after the label.\n  additionalControls?: ReactNode;\n\n  /**\n   * The placeholder attribute specifies a short hint that describes the expected value of an input field (e.g. a sample value or a short description of the expected format).\n   *\n   * The short hint is displayed in the input field before the user enters a value.\n   *\n   * Note: The placeholder attribute works with the following input types: text, search, url, tel, email, and password.\n   */\n  placeholder?: string;\n\n  /**\n   * When specified the input will be rendered with a button to the right of the input using a InputGroup.\n   *\n   * An input group groups multiple related controls or inputs together so they appear as one control.\n   */\n  button?: ReactNode;\n\n  helperText?: string;\n\n  /**\n   * When present, it specifies that the <input> element should be disabled.\n   *\n   * A disabled input element is unusable and un-clickable.\n   *\n   * The disabled attribute can be set to keep a user from using the <input> element until some other condition has been met (like selecting a checkbox, etc.). Then, a JavaScript could remove the disabled value, and make the <input> element usable.\n   */\n  isDisabled?: boolean;\n\n  /**\n   * When present, it specifies that an input field is read-only.\n   *\n   * A read-only input field cannot be modified (however, a user can tab to it, highlight it, and copy the text from it).\n   *\n   * The readonly attribute can be set to keep a user from changing the value until some other conditions have been met (like selecting a checkbox, etc.). Then, a JavaScript can remove the readonly value, and make the input field editable.\n   */\n  isReadOnly?: boolean;\n\n  /**\n   * When present, it specifies that an input field must be filled out before submitting the form.\n   *\n   * Note: The required attribute works with the following input types: text, search, url, tel, email, password, date pickers, number, checkbox, radio, and file.\n   */\n  isRequired?: boolean;\n\n  /**\n   * You can pass a callback function as the argument to validate, or you can pass an object of callback functions to validate all of them. This function will be executed on its own without depending on other validation rules included in the required attribute.\n   */\n  validate?: Validate<string, TFieldValues> | Record<string, Validate<string, TFieldValues>>;\n\n  /**\n   * The minlength attribute specifies the minimum number of characters required in an input field.\n   *\n   * Note: The minlength attribute can be used with input type: text, search, url, tel, email, and password.\n   */\n  minLength?: number | ValidationRule<number>;\n\n  /**\n   * The maxlength attribute specifies the maximum number of characters allowed in the <input> element.\n   */\n  maxLength?: number | ValidationRule<number>;\n\n  /**\n   * The min attribute specifies the minimum value for an <input> element.\n   *\n   * Tip: Use the min attribute together with the max attribute to create a range of legal values.\n   *\n   * Note: The max and min attributes works with the following input types: number, range, date, datetime-local, month, time and week.\n   */\n  min?: number | string;\n\n  /**\n   * The max attribute specifies the maximum value for an <input> element.\n   *\n   * Tip: Use the max attribute together with the min attribute to create a range of legal values.\n   *\n   * Note: The max and min attributes works with the following input types: number, range, date, datetime-local, month, time and week.\n   */\n  max?: number | string;\n\n  /**\n   * The regex pattern for the input.\n   *\n   * Note: A RegExp object with the /g flag keeps track of the lastIndex where a match occurred.\n   */\n  pattern?: ValidationRule<RegExp>;\n\n  // TODO remove these as UXD direction is not to use them\n  selectTitle?: string;\n  selectValue?: (selection: TSelection) => FieldPathValue<TSelection, FieldPath<TSelection>>;\n  selectOpen?: (callback: (selection: TSelection) => void, title: string) => void;\n\n  /**\n   * When present, it specifies that an <input> element should automatically get focus when the page loads.\n   */\n  autoFocus?: boolean;\n\n  /**\n   * The autocomplete attribute specifies whether or not an input field should have autocomplete enabled.\n   *\n   * Autocomplete allows the browser to predict the value. When a user starts to type in a field, the browser should display options to fill in the field, based on earlier typed values.\n   *\n   * Note: The autocomplete attribute works with the following input types: text, search, url, tel, email, password, datepickers, range, and color.\n   */\n  autoComplete?: string;\n\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n\n  enableUndo?: boolean;\n  enableReset?: boolean;\n};\n\n/**\n * TextInput component that is used to render a text input field in a PageForm.\n *\n * It leverages `react-hook-form` to register itself to the parent form and to perform validation.\n */\nexport function PageFormTextInput<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n  TSelection extends FieldValues = FieldValues,\n>(props: PageFormTextInputProps<TFieldValues, TFieldName, TSelection>) {\n  const {\n    type,\n    name,\n    label,\n    labelHelpTitle,\n    labelHelp,\n    additionalControls,\n    placeholder,\n    button,\n    helperText,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    validate,\n    minLength,\n    maxLength,\n    min,\n    max,\n    pattern,\n    selectTitle,\n    selectOpen,\n    selectValue,\n    autoFocus,\n    autoComplete,\n  } = props;\n\n  const id = useID(props);\n  const { t } = useTranslation();\n\n  const {\n    control,\n    setValue,\n    formState: { isSubmitting, isValidating, defaultValues },\n  } = useFormContext<TFieldValues>();\n\n  const [showSecret, setShowSecret] = useState(false);\n\n  const [translations] = useFrameworkTranslations();\n  const required = useRequiredValidationRule(props.label, props.isRequired);\n\n  const undoValue = getValue(defaultValues as object, props.name) as PathValue<\n    TFieldValues,\n    TFieldName\n  >;\n\n  return (\n    <Controller<TFieldValues, TFieldName>\n      name={name}\n      control={control}\n      shouldUnregister\n      defaultValue={props.defaultValue}\n      render={({ field: { onChange, value, name }, fieldState: { error } }) => {\n        const helperTextInvalid = error?.message\n          ? validate && isValidating\n            ? translations.validating\n            : error?.message\n          : undefined;\n\n        let parsedValue: string = value;\n        switch (type) {\n          case 'datetime-local':\n            if (value) {\n              const utcDate = new Date(value);\n              const localDate = new Date(utcDate.getTime() - utcDate.getTimezoneOffset() * 60000);\n              parsedValue = localDate.toISOString().slice(0, 16);\n            }\n            break;\n        }\n\n        function onChangeHandler(value: string) {\n          switch (props.type) {\n            case 'datetime-local': {\n              onChange(new Date(value).toISOString());\n              break;\n            }\n            case 'number': {\n              let numberValue = Number(value);\n              if (value === '' || isNaN(numberValue)) {\n                setValue(name, null as PathValue<TFieldValues, TFieldName>);\n                onChange(null);\n                return;\n              }\n\n              if (max !== undefined && numberValue > Number(max)) {\n                numberValue = Number(max);\n              }\n\n              if (min !== undefined && numberValue < Number(min)) {\n                numberValue = Number(min);\n              }\n              setValue(name, numberValue as unknown as PathValue<TFieldValues, TFieldName>);\n              onChange(numberValue);\n              break;\n            }\n            default:\n              onChange(value.trimStart());\n          }\n        }\n\n        return (\n          <PageFormGroup\n            fieldId={id}\n            label={label}\n            labelHelpTitle={labelHelpTitle ?? label}\n            labelHelp={labelHelp}\n            additionalControls={additionalControls}\n            helperText={helperText}\n            helperTextInvalid={helperTextInvalid}\n            isRequired={isRequired}\n          >\n            <InputGroup>\n              <InputGroupItem isFill>\n                <TextInput\n                  id={id}\n                  placeholder={placeholder}\n                  onChange={(_event, value: string) => onChangeHandler(value)}\n                  value={parsedValue ?? ''}\n                  aria-describedby={id ? `${id}-form-group` : undefined}\n                  validated={helperTextInvalid ? 'error' : undefined}\n                  type={type === 'password' ? (showSecret ? 'text' : 'password') : type}\n                  readOnlyVariant={isReadOnly ? 'default' : undefined}\n                  isDisabled={isDisabled}\n                  autoFocus={autoFocus}\n                  autoComplete={autoComplete || 'off'}\n                  data-cy={id}\n                />\n              </InputGroupItem>\n              {type === 'password' && (\n                <Button\n                  variant=\"control\"\n                  onClick={() => setShowSecret(!showSecret)}\n                  isDisabled={isDisabled || isReadOnly}\n                >\n                  {showSecret ? <EyeIcon /> : <EyeSlashIcon />}\n                </Button>\n              )}\n              {selectTitle && (\n                <Button\n                  ouiaId={`lookup-${name}-button`}\n                  variant=\"control\"\n                  onClick={() =>\n                    selectOpen?.((item: TSelection) => {\n                      if (selectValue) {\n                        const value = selectValue(item);\n                        setValue(name, value as unknown as PathValue<TFieldValues, TFieldName>, {\n                          shouldValidate: true,\n                        });\n                      }\n                    }, selectTitle)\n                  }\n                  aria-label=\"Options menu\"\n                  isDisabled={isDisabled || isSubmitting}\n                >\n                  <SearchIcon data-cy=\"lookup-button\" />\n                </Button>\n              )}\n              {button}\n              <PageActions\n                actions={[\n                  {\n                    label: t('Undo changes'),\n                    type: PageActionType.Button,\n                    selection: PageActionSelection.None,\n                    onClick: () => {\n                      setValue(\n                        props.name,\n                        undoValue as unknown as PathValue<TFieldValues, TFieldName>\n                      );\n                    },\n                    isHidden: () => !props.enableUndo || value === undoValue,\n                  },\n                  {\n                    label: t('Reset to default'),\n                    type: PageActionType.Button,\n                    selection: PageActionSelection.None,\n                    onClick: () => {\n                      setValue(\n                        props.name as FieldPath<TFieldValues>,\n                        props.defaultValue as unknown as PathValue<\n                          TFieldValues,\n                          FieldPath<TFieldValues>\n                        >\n                      );\n                    },\n                    isHidden: () => !props.enableReset || value === props.defaultValue,\n                  },\n                ]}\n                variant={ButtonVariant.control}\n                position={DropdownPosition.right}\n              />\n            </InputGroup>\n          </PageFormGroup>\n        );\n      }}\n      rules={{\n        required,\n        validate,\n\n        minLength:\n          typeof label === 'string' && typeof minLength === 'number'\n            ? {\n                value: minLength,\n                message: `${capitalizeFirstLetter(\n                  label.toLocaleLowerCase()\n                )} must be at least ${minLength} characters.`,\n              }\n            : minLength,\n\n        maxLength:\n          typeof label === 'string' && typeof maxLength === 'number'\n            ? {\n                value: maxLength,\n                message: `${capitalizeFirstLetter(\n                  label.toLocaleLowerCase()\n                )} cannot be greater than ${maxLength} characters.`,\n              }\n            : maxLength,\n\n        min:\n          typeof label === 'string' && (typeof min === 'number' || typeof min === 'string')\n            ? {\n                value: min,\n                message: `${capitalizeFirstLetter(\n                  label.toLocaleLowerCase()\n                )} must be greater or equal to ${min}.`,\n              }\n            : minLength,\n\n        max:\n          typeof label === 'string' && (typeof max === 'number' || typeof max === 'string')\n            ? {\n                value: max,\n                message: `${capitalizeFirstLetter(\n                  label.toLocaleLowerCase()\n                )} cannot be greater than ${max}.`,\n              }\n            : max,\n\n        pattern,\n      }}\n    />\n  );\n}\n","import { ReactNode, createContext, useCallback, useContext, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useBreakpoint } from '../components/useBreakPoint';\n\ninterface PageNavSideBarState {\n  isOpen: boolean;\n  setState: (state: Partial<PageNavSideBarState>) => void;\n}\n\nexport const PageNavSideBarContext = createContext<PageNavSideBarState>({\n  isOpen: false,\n  setState: () => ({}),\n});\n\nexport function usePageNavSideBar() {\n  return useContext(PageNavSideBarContext);\n}\n\nexport function PageNavSideBarProvider(props: { children: ReactNode }) {\n  const isXl = useBreakpoint('xl');\n  const [isOpen, setOpen] = useState(() => isXl);\n  const setState = useCallback((state: Partial<PageNavSideBarState>) => {\n    if (state.isOpen !== undefined) {\n      setOpen(state.isOpen);\n    }\n  }, []);\n  useEffect(() => setState({ isOpen: isXl }), [isXl, setState]);\n  return (\n    <PageNavSideBarContext.Provider value={{ isOpen, setState }}>\n      {props.children}\n    </PageNavSideBarContext.Provider>\n  );\n}\n\nexport function usePageNavBarClick() {\n  const navigate = useNavigate();\n  const isXl = useBreakpoint('xl');\n  const navBar = usePageNavSideBar();\n  const onClick = useCallback(\n    (path: string) => {\n      navigate(path);\n      if (!isXl) navBar.setState({ isOpen: !navBar.isOpen });\n    },\n    [navigate, isXl, navBar]\n  );\n  return onClick;\n}\n","import { ReactNode, createContext, useCallback, useContext, useMemo, useState } from 'react';\nimport { PageNavigationItem } from './PageNavigationItem';\n\nconst PageNavigationContext = createContext<\n  [{ [key: string]: string }, (navigation: PageNavigationItem[]) => void]\n>([{}, () => {}]);\n\n/** Hook to get the PageNavigationContext which provides route information for navigation. */\nexport function usePageNavigationRoutes() {\n  return useContext(PageNavigationContext)[0];\n}\n\nexport function usePageNavigationRoutesContext() {\n  return useContext(PageNavigationContext);\n}\n\n/** Provider for the PageNavigationContext which provides route information for navigation. */\nexport function PageNavigationRoutesProvider(props: { children: ReactNode }) {\n  // const routes = useMemo(() => createNavigateToRoutes('', props.navigation), [props.navigation]);\n  const [routes, setRoutes] = useState<{ [key: string]: string }>({});\n  const setNavigation = useCallback((navigation: PageNavigationItem[]) => {\n    setRoutes(createNavigateToRoutes('', navigation));\n  }, []);\n  const value = useMemo<[{ [key: string]: string }, (navigation: PageNavigationItem[]) => void]>(\n    () => [routes, setNavigation],\n    [routes, setNavigation]\n  );\n  return (\n    <PageNavigationContext.Provider value={value}>{props.children}</PageNavigationContext.Provider>\n  );\n}\n\nfunction createNavigateToRoutes(base: string, navigation: PageNavigationItem[]) {\n  const routes: { [key: string]: string } = {};\n  navigation.forEach((item) => {\n    const itemPath = (base + '/' + item.path).replace('//', '/');\n    if ('id' in item && typeof item.id === 'string') {\n      routes[item.id] = itemPath;\n    }\n    if ('children' in item) {\n      Object.assign(routes, createNavigateToRoutes(itemPath, item.children));\n    }\n  });\n  return routes;\n}\n","import {\n  Drawer,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerPanelContent,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateHeader,\n  EmptyStateVariant,\n  NotificationDrawer,\n  NotificationDrawerBody,\n  NotificationDrawerGroup,\n  NotificationDrawerGroupList,\n  NotificationDrawerHeader,\n  NotificationDrawerList,\n  NotificationDrawerListItem,\n  NotificationDrawerListItemBody,\n  NotificationDrawerListItemHeader,\n} from '@patternfly/react-core';\nimport {\n  Dispatch,\n  ReactNode,\n  SetStateAction,\n  createContext,\n  useContext,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\n\ninterface IPageNotifications {\n  notificationsDrawerOpen: boolean;\n  setNotificationsDrawerOpen: Dispatch<SetStateAction<boolean>>;\n  notificationGroups: Record<string, IPageNotificationGroup>;\n  setNotificationGroups: Dispatch<SetStateAction<Record<string, IPageNotificationGroup>>>;\n}\n\nexport interface IPageNotificationGroup {\n  title: string;\n  notifications: IPageNotification[];\n}\n\nexport interface IPageNotification {\n  title: string;\n  description?: string | undefined;\n  timestamp?: string;\n  variant?: 'success' | 'danger' | 'warning' | 'info';\n  to: string;\n}\n\nexport const PageNotificationsContext = createContext<IPageNotifications>({\n  notificationsDrawerOpen: false,\n  setNotificationsDrawerOpen: () => {\n    throw new Error('PageNotificationsContext not implemented');\n  },\n  notificationGroups: {},\n  setNotificationGroups: () => {\n    throw new Error('PageNotificationsContext not implemented');\n  },\n});\n\nexport function usePageNotifications() {\n  return useContext(PageNotificationsContext);\n}\n\nexport function PageNotificationsProvider(props: { children: ReactNode }) {\n  const [notificationsDrawerOpen, setNotificationsDrawerOpen] = useState(false);\n  const [notificationGroups, setNotificationGroups] = useState<\n    Record<string, IPageNotificationGroup>\n  >({});\n  return (\n    <PageNotificationsContext.Provider\n      value={{\n        notificationGroups,\n        setNotificationGroups,\n        notificationsDrawerOpen,\n        setNotificationsDrawerOpen,\n      }}\n    >\n      {props.children}\n    </PageNotificationsContext.Provider>\n  );\n}\n\nexport function PageNotificationsDrawer(props: { children: ReactNode }) {\n  const { t } = useTranslation();\n\n  const { notificationsDrawerOpen, setNotificationsDrawerOpen } = usePageNotifications();\n  const drawerRef = useRef<HTMLSpanElement>(null);\n\n  function onCloseClick() {\n    setNotificationsDrawerOpen(false);\n    drawerRef.current?.focus();\n  }\n\n  const { notificationGroups } = usePageNotifications();\n\n  return (\n    <Drawer isExpanded={notificationsDrawerOpen} onExpand={() => setNotificationsDrawerOpen(true)}>\n      <DrawerContent\n        panelContent={\n          <DrawerPanelContent>\n            <NotificationDrawer data-cy=\"notifications-drawer\">\n              <NotificationDrawerHeader title={t('Notifications')}>\n                <DrawerCloseButton onClick={onCloseClick} />\n              </NotificationDrawerHeader>\n              <NotificationDrawerBody>\n                <NotificationDrawerGroupList>\n                  {Object.values(notificationGroups).map((group, index) => (\n                    <PageNotificationGroup key={index} group={group} />\n                  ))}\n                </NotificationDrawerGroupList>\n              </NotificationDrawerBody>\n            </NotificationDrawer>\n          </DrawerPanelContent>\n        }\n      >\n        <DrawerContentBodyStyled>{props.children}</DrawerContentBodyStyled>\n      </DrawerContent>\n    </Drawer>\n  );\n}\n\nconst DrawerContentBodyStyled = styled(DrawerContentBody)`\n  max-height: 100%;\n`;\n\nfunction PageNotificationGroup(props: { group: IPageNotificationGroup }) {\n  const { t } = useTranslation();\n  const [isExpanded, setIsExpanded] = useState(true);\n  return (\n    <NotificationDrawerGroup\n      title={props.group.title}\n      isExpanded={isExpanded}\n      count={props.group.notifications.length}\n      onExpand={(_, expand) => setIsExpanded(expand)}\n    >\n      <NotificationDrawerList isHidden={!isExpanded}>\n        {props.group.notifications.map((notification, index) => (\n          <PageNotification key={index} notification={notification} />\n        ))}\n        {props.group.notifications.length === 0 && (\n          <EmptyState variant={EmptyStateVariant.full}>\n            <EmptyStateHeader headingLevel=\"h2\" titleText={t('No notifications')} />\n            <EmptyStateBody>{t('There are currently no notifications.')}</EmptyStateBody>\n          </EmptyState>\n        )}\n      </NotificationDrawerList>\n    </NotificationDrawerGroup>\n  );\n}\n\nfunction PageNotification(props: { notification: IPageNotification }) {\n  const notificationVariant =\n    props.notification.variant === 'info' ? undefined : props.notification.variant;\n  const navigate = useNavigate();\n  const { setNotificationsDrawerOpen } = usePageNotifications();\n  const timestamp = props.notification.timestamp\n    ? new Date(props.notification.timestamp)\n    : undefined;\n  const timestampString = timestamp\n    ? `${timestamp.toLocaleDateString()} ${timestamp.toLocaleTimeString()}`\n    : undefined;\n  return (\n    <NotificationDrawerListItem\n      variant={props.notification.variant}\n      onClick={() => {\n        navigate(props.notification.to);\n        setNotificationsDrawerOpen(false);\n      }}\n    >\n      <NotificationDrawerListItemHeader\n        title={props.notification.title}\n        variant={notificationVariant}\n      />\n      <NotificationDrawerListItemBody timestamp={timestampString}>\n        {props.notification.description}\n      </NotificationDrawerListItemBody>\n    </NotificationDrawerListItem>\n  );\n}\n","import { createContext, Dispatch, ReactNode, SetStateAction, useContext, useState } from 'react';\nimport { ICatalogBreadcrumb } from '../PageHeader';\n\nexport type PageBreadcrumbsContext = {\n  /** The tab breadcrumb is used to display the current active tab\n   * in the page breadcrumbs (displayed by the PageHeader component) */\n  tabBreadcrumb?: ICatalogBreadcrumb;\n  setTabBreadcrumb: Dispatch<SetStateAction<ICatalogBreadcrumb | undefined>>;\n};\n\nexport const PageBreadcrumbsContext = createContext<PageBreadcrumbsContext>({\n  tabBreadcrumb: {},\n  setTabBreadcrumb: () => {},\n});\n\nexport function PageBreadcrumbsProvider(props: { children: ReactNode }) {\n  const [tabBreadcrumb, setTabBreadcrumb] = useState<ICatalogBreadcrumb | undefined>();\n  return (\n    <PageBreadcrumbsContext.Provider value={{ tabBreadcrumb, setTabBreadcrumb }}>\n      {props.children}\n    </PageBreadcrumbsContext.Provider>\n  );\n}\n\nexport const usePageBreadcrumbs = (): PageBreadcrumbsContext => useContext(PageBreadcrumbsContext);\n","import './PageFramework.css';\n\nimport { ReactNode } from 'react';\nimport { PageAlertToasterProvider } from './PageAlertToaster';\nimport { PageDialogProvider } from './PageDialogs/PageDialog';\nimport { PageNavSideBarProvider } from './PageNavigation/PageNavSidebar';\nimport { PageNavigationRoutesProvider } from './PageNavigation/PageNavigationRoutesProvider';\nimport { PageNotificationsProvider } from './PageNotifications/PageNotificationsProvider';\nimport { PageSettingsProvider } from './PageSettings/PageSettingsProvider';\nimport { PageBreadcrumbsProvider } from './PageTabs/PageBreadcrumbs';\nimport { FrameworkTranslationsProvider } from './useFrameworkTranslations';\n\n/**\n * The `PageFramework` component bundles up all the context providers in the Ansible UI framework in a convienent component for framework consumers. Examples of internal context providers are translations, navigation, settings, alerts, and dialogs.\n *\n * @example\n * <PageFramework>...</PageFramework>\n */\nexport function PageFramework(props: { children: ReactNode; defaultRefreshInterval: number }) {\n  return (\n    <FrameworkTranslationsProvider>\n      <PageSettingsProvider defaultRefreshInterval={props.defaultRefreshInterval}>\n        <PageNavigationRoutesProvider>\n          <PageDialogProvider>\n            <PageAlertToasterProvider>\n              <PageNavSideBarProvider>\n                <PageNotificationsProvider>\n                  <PageBreadcrumbsProvider>{props.children}</PageBreadcrumbsProvider>\n                </PageNotificationsProvider>\n              </PageNavSideBarProvider>\n            </PageAlertToasterProvider>\n          </PageDialogProvider>\n        </PageNavigationRoutesProvider>\n      </PageSettingsProvider>\n    </FrameworkTranslationsProvider>\n  );\n}\n","import {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  Flex,\n  FlexItem,\n  PageSection,\n  PageSectionVariants,\n  Popover,\n  Skeleton,\n  Stack,\n  StackItem,\n  Title,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { CSSProperties, Fragment, ReactNode, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './PageFramework.css';\nimport { usePageBreadcrumbs } from './PageTabs/PageBreadcrumbs';\nimport { useBreakpoint } from './components/useBreakPoint';\nimport { useFrameworkTranslations } from './useFrameworkTranslations';\n\nexport interface ICatalogBreadcrumb {\n  id?: string;\n  label?: string | null;\n  to?: string;\n  target?: string;\n  component?: React.ElementType;\n  isLoading?: boolean;\n}\n\nfunction Breadcrumbs(props: { breadcrumbs?: ICatalogBreadcrumb[]; style?: CSSProperties }) {\n  const navigate = useNavigate();\n  if (!props.breadcrumbs) return <Fragment />;\n  return (\n    <Breadcrumb style={props.style}>\n      {props.breadcrumbs.map((breadcrumb, index) => {\n        if (!breadcrumb.label) return <Fragment key={index}></Fragment>;\n        return (\n          <BreadcrumbItem\n            data-cy={breadcrumb.label}\n            id={breadcrumb.id}\n            key={index}\n            component={breadcrumb.component}\n            isActive={breadcrumb.to === undefined}\n          >\n            {breadcrumb.to ? (\n              <a\n                href={breadcrumb.to}\n                data-cy={breadcrumb.label}\n                onClick={(e) => {\n                  e.preventDefault();\n                  if (!breadcrumb.to) return;\n                  navigate(breadcrumb.to);\n                }}\n              >\n                {breadcrumb.label}\n              </a>\n            ) : (\n              breadcrumb.label\n            )}\n          </BreadcrumbItem>\n        );\n      })}\n    </Breadcrumb>\n  );\n}\n\nexport interface PageHeaderProps {\n  navigation?: ReactNode;\n  breadcrumbs?: ICatalogBreadcrumb[];\n  title?: string | null;\n  titleHelpTitle?: string;\n  titleHelp?: string | string[];\n  titleDocLink?: string;\n  description?: null | string | string[];\n  controls?: ReactNode;\n  headerActions?: ReactNode;\n  footer?: ReactNode;\n}\n\n/**\n * PageHeader enables the responsive layout of the header.\n *\n * @param {Breadcrumb[]} breadcrumbs - The breadcrumbs for the page.\n * @param {string} title - The title of the page.\n * @param {string} titleHelpTitle - The title of help popover.\n * @param {ReactNode} titleHelp - The content for the help popover.\n * @param {string} description - The description of the page.\n * @param {ReactNode} controls - Support for extra page controls.\n * @param {ReactNode} headerActions - The actions for the page.\n * @param {ReactNode} footer - Extra components to render at the bottom of the header.\n *\n * @example\n * <PageLayout>\n *   <PageHeader\n *     breadcrumbs={[{ label: 'Home', to: '/home' }, { label: 'Page title' }]}\n *     title='Page title'\n *     description='Page description'\n *     headerActions={<TypedActions actions={actions} />}\n *   />\n *   ...\n * </PageLayout>\n */\nexport function PageHeader(props: PageHeaderProps) {\n  const { title, description, controls, headerActions, footer } = props;\n  const isLg = useBreakpoint('lg');\n  const isXl = useBreakpoint('xl');\n  const isMdOrLarger = useBreakpoint('md');\n  const [translations] = useFrameworkTranslations();\n\n  const { tabBreadcrumb } = usePageBreadcrumbs();\n\n  const pageBreadcrumbs = useMemo(() => {\n    const pageBreadcrumbs = [];\n    if (props.breadcrumbs) {\n      pageBreadcrumbs.push(...props.breadcrumbs);\n      if (tabBreadcrumb) pageBreadcrumbs.push(tabBreadcrumb);\n    }\n\n    return pageBreadcrumbs;\n  }, [props.breadcrumbs, tabBreadcrumb]);\n\n  return (\n    <PageSection\n      variant={PageSectionVariants.light}\n      className=\"bg-lighten border-bottom\"\n      style={{\n        paddingTop: pageBreadcrumbs?.length ? (isXl ? 16 : 12) : isXl ? 16 : 12,\n        paddingBottom: isXl ? 16 : 12,\n      }}\n    >\n      <Stack hasGutter>\n        <Flex flexWrap={{ default: 'nowrap' }} alignItems={{ default: 'alignItemsStretch' }}>\n          <FlexItem grow={{ default: 'grow' }}>\n            {pageBreadcrumbs.length > 0 && (\n              <Breadcrumbs\n                breadcrumbs={pageBreadcrumbs?.length ? pageBreadcrumbs : undefined}\n                style={{ paddingBottom: isLg ? 6 : 4 }}\n              />\n            )}\n            {title ? (\n              props.titleHelp ? (\n                <Popover\n                  headerContent={props.titleHelpTitle ?? props.title}\n                  bodyContent={\n                    <Stack hasGutter>\n                      {typeof props.titleHelp === 'string' ? (\n                        <StackItem>{props.titleHelp}</StackItem>\n                      ) : (\n                        props.titleHelp.map((help, index) => (\n                          <StackItem key={index}>{help}</StackItem>\n                        ))\n                      )}\n                      {props.titleDocLink && (\n                        <StackItem>\n                          <Button\n                            icon={<ExternalLinkAltIcon />}\n                            variant=\"link\"\n                            onClick={() => window.open(props.titleDocLink, '_blank')}\n                            isInline\n                          >\n                            {translations.documentation}\n                          </Button>\n                        </StackItem>\n                      )}\n                    </Stack>\n                  }\n                  position=\"bottom-start\"\n                >\n                  <Title data-cy=\"page-title\" headingLevel=\"h1\">\n                    {title}\n                    <Button\n                      variant=\"link\"\n                      style={{\n                        padding: 0,\n                        marginTop: 1,\n                        marginLeft: 8,\n                        verticalAlign: 'top',\n                      }}\n                    >\n                      <OutlinedQuestionCircleIcon />\n                    </Button>\n                  </Title>\n                </Popover>\n              ) : (\n                <Title data-cy=\"page-title\" headingLevel=\"h1\">\n                  {title}\n                </Title>\n              )\n            ) : (\n              <Title headingLevel=\"h1\">\n                <Skeleton width=\"160px\" />\n              </Title>\n            )}\n            {isMdOrLarger && description && (\n              <div data-cy=\"app-description\" style={{ paddingTop: isXl ? 4 : 2, opacity: 0.8 }}>\n                {description}\n              </div>\n            )}\n          </FlexItem>\n          {title && (headerActions || controls) && (\n            <Flex\n              data-cy=\"manage-view\"\n              direction={{ default: 'column' }}\n              spaceItems={{ default: 'spaceItemsSm', xl: 'spaceItemsMd' }}\n              justifyContent={{ default: 'justifyContentCenter' }}\n            >\n              {controls && <FlexItem grow={{ default: 'grow' }}>{controls}</FlexItem>}\n              {headerActions && <FlexItem>{headerActions}</FlexItem>}\n            </Flex>\n          )}\n        </Flex>\n        {footer}\n      </Stack>\n    </PageSection>\n  );\n}\n","import { ReactNode } from 'react';\nimport { ErrorBoundary } from './components/ErrorBoundary';\nimport { useFrameworkTranslations } from './useFrameworkTranslations';\n\n/**\n * The PageLayout is used as the container for the contents of the page.\n * It enables page components to leverage full page layout and scrolling of sub content.\n * An example is a full page table where the page header, toolbar, column headers, and pagination stay fixed, but the rows of the table can scroll.\n *\n * @example\n * <Page>\n *   <PageLayout>\n *     <PageHeader />\n *     ...\n *   </PageLayout>\n * <Page>\n */\nexport function PageLayout(props: { children?: ReactNode }) {\n  const [translations] = useFrameworkTranslations();\n  return (\n    <ErrorBoundary message={translations.errorText}>\n      <div style={{ display: 'flex', flexDirection: 'column', height: '100%', maxHeight: '100%' }}>\n        {props.children}\n      </div>\n    </ErrorBoundary>\n  );\n}\n","import {\n  Masthead,\n  MastheadBrand,\n  MastheadContent,\n  MastheadMain,\n  MastheadToggle,\n  PageToggleButton,\n  Toolbar,\n  ToolbarContent,\n} from '@patternfly/react-core';\nimport { BarsIcon } from '@patternfly/react-icons';\nimport { ReactNode } from 'react';\nimport { Link } from 'react-router-dom';\nimport { usePageNavSideBar } from '../PageNavigation/PageNavSidebar';\nimport { useBreakpoint } from '../components/useBreakPoint';\n\nexport function PageMasthead(props: { brand: ReactNode; children?: ReactNode }) {\n  const isSmallOrLarger = useBreakpoint('sm');\n  return (\n    <Masthead\n      display={{ default: 'inline' }}\n      style={{\n        borderBottom: '1px solid #fff4',\n        paddingRight: 0,\n      }}\n    >\n      <PageMastheadToggle />\n      {isSmallOrLarger && (\n        <MastheadMain>\n          <MastheadBrand component={(props) => <Link {...props} to=\"/\" />}>\n            {props.brand}\n          </MastheadBrand>\n        </MastheadMain>\n      )}\n      <MastheadContent style={{ marginLeft: 0, minHeight: 0 }}>\n        <Toolbar\n          id=\"toolbar\"\n          data-cy=\"toolbar\"\n          inset={{ default: 'insetNone' }}\n          style={{ padding: 0 }}\n        >\n          <ToolbarContent>{props.children}</ToolbarContent>\n        </Toolbar>\n      </MastheadContent>\n    </Masthead>\n  );\n}\n\nexport function PageMastheadToggle() {\n  const navBar = usePageNavSideBar();\n  return (\n    <MastheadToggle onClick={() => navBar.setState({ isOpen: !navBar.isOpen })}>\n      <PageToggleButton data-cy={'nav-toggle'} variant=\"plain\" aria-label=\"Global navigation\">\n        <BarsIcon />\n      </PageToggleButton>\n    </MastheadToggle>\n  );\n}\n","import { NotificationBadge } from '@patternfly/react-core';\nimport { usePageNotifications } from '../PageNotifications/PageNotificationsProvider';\n\nexport function PageNotificationsIcon() {\n  const { setNotificationsDrawerOpen, notificationGroups } = usePageNotifications();\n\n  const count = Object.values(notificationGroups).reduce(\n    (count, group) => count + group.notifications.length,\n    0\n  );\n\n  return (\n    <NotificationBadge\n      data-cy=\"notification-badge\"\n      variant={count === 0 ? 'read' : 'unread'}\n      count={count}\n      onClick={() => setNotificationsDrawerOpen((open) => !open)}\n    />\n  );\n}\n","import { Button } from '@patternfly/react-core';\nimport { MoonIcon, SunIcon } from '@patternfly/react-icons';\nimport { useContext } from 'react';\nimport { PageSettingsContext } from '../PageSettings/PageSettingsProvider';\n\nexport function PageThemeSwitcher() {\n  const [settings, setSettings] = useContext(PageSettingsContext);\n  if (settings.activeTheme === 'dark') {\n    return (\n      <Button\n        data-cy=\"settings-icon\"\n        variant=\"plain\"\n        onClick={() => setSettings({ ...settings, theme: 'light' })}\n      >\n        <MoonIcon />\n      </Button>\n    );\n  }\n  return (\n    <Button\n      data-cy=\"theme-icon\"\n      variant=\"plain\"\n      onClick={() => setSettings({ ...settings, theme: 'dark' })}\n    >\n      <SunIcon />\n    </Button>\n  );\n}\n","import {\n  Flex,\n  FlexItem,\n  Label,\n  Nav,\n  NavExpandable,\n  NavItem,\n  NavList,\n  PageSidebar,\n  PageSidebarBody,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { useState, type CSSProperties } from 'react';\nimport { usePageNavBarClick, usePageNavSideBar } from './PageNavSidebar';\nimport './PageNavigation.css';\nimport { PageNavigationItem } from './PageNavigationItem';\n\n/** Renders a sidebar navigation menu from an arroy of navigation items. */\nexport function PageNavigation(props: { navigation: PageNavigationItem[]; basename?: string }) {\n  const { navigation: navigationItems } = props;\n  const navBar = usePageNavSideBar();\n\n  return (\n    <PageSidebar isSidebarOpen={navBar.isOpen} className=\"bg-lighten\">\n      <PageSidebarBody>\n        <Nav data-cy=\"page-navigation\" className=\"side-nav\">\n          <NavList>\n            <PageNavigationItems baseRoute={props.basename ?? ''} items={navigationItems} />\n          </NavList>\n        </Nav>\n      </PageSidebarBody>\n    </PageSidebar>\n  );\n}\n\nfunction PageNavigationItems(props: { items: PageNavigationItem[]; baseRoute: string }) {\n  return (\n    <>\n      {props.items\n        .filter((item) => {\n          if ('hidden' in item) {\n            return item.hidden !== true;\n          }\n          return true;\n        })\n        .map((item, index) => (\n          <PageNavigationItemComponent\n            key={item.id ?? item.label ?? index}\n            item={item}\n            baseRoute={props.baseRoute}\n          />\n        ))}\n    </>\n  );\n}\n\nfunction PageNavigationItemComponent(props: { item: PageNavigationItem; baseRoute: string }) {\n  const { item } = props;\n  const [isExpanded, setIsExpanded] = useState(\n    () =>\n      localStorage.getItem('default-nav-expanded') === 'true' ||\n      localStorage.getItem((item.id ?? item.label) + '-expanded') === 'true'\n  );\n  const setExpanded = (expanded: boolean) => {\n    setIsExpanded(expanded);\n    localStorage.setItem((item.id ?? item.label) + '-expanded', expanded ? 'true' : 'false');\n  };\n\n  let id: string | undefined;\n  if ('id' in props.item) {\n    id = props.item.id;\n  } else if ('children' in props.item) {\n    const rootChild = props.item.children.find((child) => child.path === '');\n    if (rootChild && 'id' in rootChild) {\n      id = rootChild.id;\n    }\n  }\n\n  const onClickNavItem = usePageNavBarClick();\n  let route = props.baseRoute + '/' + item.path;\n  route = route.replace('//', '/');\n  if (item.path === '/' && 'children' in item) {\n    return <PageNavigationItems items={item.children} baseRoute={''} />;\n  }\n\n  const hasChildNavItems = 'children' in item && item.children?.find((child) => child.label);\n  const subtitleStyle: CSSProperties = { fontSize: 'small', opacity: 0.5, textAlign: 'left' };\n\n  if (!hasChildNavItems && 'label' in item) {\n    let path = (process.env.ROUTE_PREFIX ?? '') + route;\n    path = path.replace('//', '/');\n\n    const isActive = item.href ? false : location.pathname.startsWith(path);\n    return (\n      <NavItem\n        id={id}\n        href={item.href || route}\n        isActive={isActive}\n        className={isActive ? 'bg-lighten' : undefined}\n        onClick={() => (item.href ? window.open(item.href, '_blank') : onClickNavItem(route))}\n        target={item.href ? '_blank' : ''}\n        data-cy={id}\n        style={{ display: 'flex', alignItems: 'stretch', flexDirection: 'column' }}\n      >\n        <Flex>\n          <FlexItem grow={{ default: 'grow' }}>{item.label}</FlexItem>\n          {'badge' in item && item.badge && (\n            <FlexItem>\n              <Label isCompact variant=\"outline\" color={item.badgeColor}>\n                {item.badge}\n              </Label>\n            </FlexItem>\n          )}\n          {'href' in item && item.href && (\n            <span className=\"pf-v5-c-nav__toggle\">\n              <span className=\"pf-v5-c-nav__toggle-icon\">\n                <ExternalLinkAltIcon />\n              </span>\n            </span>\n          )}\n        </Flex>\n        {item.subtitle && <div style={subtitleStyle}>{item.subtitle}</div>}\n      </NavItem>\n    );\n  }\n\n  if (!hasChildNavItems || item.label === undefined) {\n    return null;\n  }\n\n  if (!item.label) {\n    return <PageNavigationItems items={item.children} baseRoute={route} />;\n  }\n\n  return (\n    <NavExpandable\n      title={\n        (\n          <div>\n            <div style={{ textAlign: 'left' }}>{item.label}</div>\n            {item.subtitle && <div style={subtitleStyle}>{item.subtitle}</div>}\n          </div>\n        ) as unknown as string\n      }\n      isExpanded={isExpanded}\n      onExpand={(_e, expanded: boolean) => setExpanded(expanded)}\n    >\n      <PageNavigationItems items={item.children} baseRoute={route} />\n    </NavExpandable>\n  );\n}\n","import { Page } from '@patternfly/react-core';\nimport { ReactNode, useEffect, useMemo } from 'react';\nimport { Outlet, Route, RouteObject, Routes } from 'react-router-dom';\nimport { PageNotFound } from '../PageEmptyStates/PageNotFound';\nimport { PageNotificationsDrawer } from '../PageNotifications/PageNotificationsProvider';\nimport { PageNavigation } from './PageNavigation';\nimport { PageNavigationItem } from './PageNavigationItem';\nimport { usePageNavigationRoutesContext } from './PageNavigationRoutesProvider';\n\nexport function PageApp(props: {\n  /** Component for the masthead of the page. */\n  masthead?: ReactNode;\n\n  /** The navigation items for the page. */\n  navigation: PageNavigationItem[];\n\n  /**\n   * The basename of the app for situations where you can't deploy to the root of the domain, but a sub directory.\n   *\n   * SEE: https://reactrouter.com/en/main/routers/create-browser-router#basename\n   */\n  basename?: string;\n\n  /** The default refresh interval for the page in seconds. */\n  defaultRefreshInterval: number;\n\n  banner?: ReactNode;\n}) {\n  const { navigation, masthead } = props;\n  const navigationItems = useMemo(\n    () => [\n      {\n        path: props.basename ?? '/',\n        element: (\n          <Page\n            header={masthead}\n            sidebar={<PageNavigation navigation={navigation} basename={props.basename} />}\n          >\n            <PageNotificationsDrawer>\n              <div\n                style={{\n                  maxHeight: '100%',\n                  overflow: 'hidden',\n                  height: '100%',\n                  display: 'flex',\n                  flexDirection: 'column',\n                }}\n              >\n                {props.banner}\n                <div style={{ flexGrow: 1, overflow: 'hidden' }}>\n                  <Outlet />\n                </div>\n              </div>\n            </PageNotificationsDrawer>\n          </Page>\n        ),\n        children: navigation.filter(({ href }) => !href),\n      },\n      { path: '*', element: <PageNotFound /> },\n    ],\n    [masthead, navigation, props.banner, props.basename]\n  );\n  const [_, setNavigation] = usePageNavigationRoutesContext();\n  useEffect(() => setNavigation(navigationItems), [navigationItems, setNavigation]);\n\n  return <Routes>{navigationItems.map(NavigationRoute)}</Routes>;\n}\n\nfunction NavigationRoute(route: RouteObject) {\n  return (\n    <Route key={route.path} path={route.path} element={route.element}>\n      {route.children?.map(NavigationRoute)}\n    </Route>\n  );\n}\n","import { useCallback } from 'react';\nimport { usePageNavigationRoutes } from './PageNavigationRoutesProvider';\n\n/** Hook to get the URL for navigation to a page given the page id. */\nexport function useGetPageUrl() {\n  const routes = usePageNavigationRoutes();\n  return useCallback(\n    (\n      id: string,\n      options?: {\n        params?: Record<string, string | number | undefined>;\n        query?: Record<string, string | string[] | number | number[] | undefined>;\n      }\n    ) => {\n      let url = routes[id] ?? '';\n      const params = options?.params;\n      const query = options?.query;\n      if (url) {\n        if (params) {\n          url = Object.keys(params).reduce((acc, key) => {\n            let value = params[key];\n            if (value === undefined) return acc;\n            value = encodeURIComponent(value.toString());\n            const stringToReplace = ':' + key;\n            // search for longest string is necessary, because without it, we can replace substring\n            const regex = new RegExp(stringToReplace + '(?!.*' + stringToReplace + ')', 'g');\n            return acc.replace(regex, value);\n          }, url);\n        }\n        if (query) {\n          url = `${url}?${Object.keys(query)\n            .map((key) => {\n              let value = query[key];\n              if (value === undefined) return '';\n              value = encodeURIComponent(value.toString());\n              return `${key}=${value}`;\n            })\n            .join('&')\n            .replace('/&&/g', '&')}`;\n        }\n      } else {\n        console.error(`Page id ${id} not found`); // eslint-disable-line no-console\n      }\n\n      return url;\n    },\n    [routes]\n  );\n}\n","import { useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useGetPageUrl } from './useGetPageUrl';\n\n/** Hook to get the function to navigate to a page given the page id. */\nexport function usePageNavigate() {\n  const navigate = useNavigate();\n  const getPageUrl = useGetPageUrl();\n  return useCallback(\n    (\n      pageId: string,\n      options?: {\n        params?: Record<string, string | number | undefined>;\n        query?: Record<string, string | string[] | number | number[] | undefined>;\n      }\n    ) => {\n      const url = getPageUrl(pageId, options);\n      if (url) {\n        navigate(url);\n      }\n    },\n    [navigate, getPageUrl]\n  );\n}\n","import { useCallback, useEffect, useState } from 'react';\nimport { useIsMounted } from './useIsMounted';\n\nexport function useWindowLocation() {\n  const isMounted = useIsMounted();\n  const [location, setLocation] = useState<Location | void>(\n    isMounted ? window.location : undefined\n  );\n\n  const setWindowLocation = useCallback(() => {\n    setLocation(window.location);\n  }, []);\n\n  useEffect(() => {\n    if (!isMounted) return;\n    if (!location) {\n      setWindowLocation();\n    }\n    window.addEventListener('popstate', setWindowLocation);\n    return () => {\n      window.removeEventListener('popstate', setWindowLocation);\n    };\n  }, [isMounted, location, setWindowLocation]);\n\n  const push = useCallback(\n    (url?: string | URL | null) => {\n      window.history.replaceState(null, '', url);\n      setWindowLocation();\n    },\n    [setWindowLocation]\n  );\n\n  const update = useCallback(\n    (url?: string | URL | null) => {\n      window.history.replaceState(null, '', url);\n      setWindowLocation();\n    },\n    [setWindowLocation]\n  );\n\n  return { location, push, update };\n}\n","import { useEffect, useRef, useState } from 'react';\n\nexport function useIsMounted() {\n  const [isMounted, setIsMounted] = useState(true);\n  useEffect(\n    () => () => {\n      setIsMounted(false);\n    },\n    []\n  );\n  return isMounted;\n}\n\nexport function useIsMountedRef() {\n  const isMounted = useRef<{ isMounted: boolean }>({ isMounted: true });\n  useEffect(\n    () => () => {\n      isMounted.current.isMounted = false;\n    },\n    []\n  );\n  return isMounted;\n}\n","import { useCallback, useMemo } from 'react';\nimport { useWindowLocation } from './useWindowLocation';\n\n// This hook is used to get and set URLSearchParams in the URL.\n// It does not create a new navigation in navigation history when updating the URLSearchParams.\nexport function useURLSearchParams(): [\n  URLSearchParams,\n  (setSearchParams: URLSearchParams) => void,\n] {\n  const location = useWindowLocation();\n  const pathname = location.location?.pathname || '/';\n  const searchParams = useMemo<URLSearchParams>(() => {\n    /** Cypress component tests add a specPath param that must be ignored */\n    let search = location.location?.search;\n    if (search && search.includes('?specPath=')) {\n      search = search.substring(0, search.indexOf('?specPath='));\n    } else if (search && search.includes('&specPath=')) {\n      search = search.substring(0, search.indexOf('&specPath='));\n    }\n    return new URLSearchParams(search ?? '/');\n  }, [location.location?.search]);\n\n  const setSearchParams = useCallback(\n    (searchParams: URLSearchParams) => {\n      const newSearch = searchParams.toString();\n      if (newSearch) location.update('?' + newSearch);\n      else location.update(pathname); // retain the existing pathname\n    },\n    [location, pathname]\n  );\n  return [searchParams, setSearchParams];\n}\n","import { t } from 'i18next';\nimport {\n  ReactNode,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { useURLSearchParams } from '../components/useURLSearchParams';\nimport type { PageWizardParentStep, PageWizardState, PageWizardStep } from './types';\n\nexport const PageWizardContext = createContext<PageWizardState>({} as PageWizardState);\nexport function usePageWizard() {\n  return useContext(PageWizardContext);\n}\n\nexport function isStepVisible(step: PageWizardStep, values: object) {\n  return !step.hidden || !step.hidden(values) ? step : null;\n}\n\nexport function isPageWizardParentStep(step: PageWizardStep): step is PageWizardParentStep {\n  return (step as PageWizardParentStep)?.substeps !== undefined;\n}\n\nexport function PageWizardProvider<T extends object>(props: {\n  children: ReactNode;\n  steps: PageWizardStep[];\n  defaultValue?: Record<string, object>;\n  onSubmit: (wizardData: T) => Promise<void>;\n}) {\n  const { steps, onSubmit } = props;\n  const [isToggleExpanded, setToggleExpanded] = useState(false);\n  const [activeStep, setActiveStep] = useState<PageWizardStep | null>(null);\n  const [wizardData, setWizardData] = useState<Partial<T>>({});\n  const [stepData, setStepData] = useState<Record<string, object>>(props.defaultValue ?? {});\n  const [stepError, setStepError] = useState<Record<string, object>>({});\n  const [submitError, setSubmitError] = useState<Error>();\n\n  const [_, setSearchParams] = useURLSearchParams();\n  const flattenedSteps = useMemo(() => getFlattenedSteps(steps), [steps]);\n\n  // set initial activeStep\n  useEffect(() => {\n    const visibleSteps = getVisibleSteps(steps, wizardData);\n    if (activeStep || !visibleSteps.length) {\n      return;\n    }\n    if ((visibleSteps[0] as PageWizardParentStep).substeps) {\n      setActiveStep((visibleSteps[0] as PageWizardParentStep).substeps[0]);\n    } else {\n      setActiveStep(visibleSteps[0]);\n    }\n  }, [activeStep, steps, wizardData]);\n\n  const onNext = useCallback(\n    async (formData: object = {}) => {\n      const visibleStepsFlattened = getVisibleStepsFlattened(steps, {\n        ...wizardData,\n        ...formData,\n      });\n\n      if (activeStep === null) {\n        return Promise.resolve();\n      }\n\n      if (!isPageWizardParentStep(activeStep) && activeStep.validate) {\n        await activeStep.validate(formData, wizardData);\n      }\n\n      const isLastStep =\n        activeStep?.id === visibleStepsFlattened[visibleStepsFlattened.length - 1]?.id;\n      if (isLastStep) {\n        try {\n          await onSubmit(wizardData as T);\n        } catch (e) {\n          setSubmitError(e instanceof Error ? e : new Error(t('An error occurred.')));\n        }\n        return;\n      }\n\n      const activeStepIndex = visibleStepsFlattened.findIndex((step) => step.id === activeStep?.id);\n      // If the next step is a parent step, mark its first substep as the next active step\n      const nextStep = isPageWizardParentStep(visibleStepsFlattened[activeStepIndex + 1])\n        ? visibleStepsFlattened[activeStepIndex + 2]\n        : visibleStepsFlattened[activeStepIndex + 1];\n\n      // Clear search params\n      setSearchParams(new URLSearchParams(''));\n      setWizardData((prev: object) => ({ ...prev, ...formData }));\n      setStepData((prev) => ({ ...prev, [activeStep?.id]: formData }));\n      setActiveStep(nextStep);\n      return Promise.resolve();\n    },\n    [activeStep, steps, onSubmit, setSearchParams, wizardData, setSubmitError]\n  );\n\n  const onBack = useCallback(() => {\n    const visibleStepsFlattened = getVisibleSteps(flattenedSteps, wizardData);\n\n    const activeStepIndex = visibleStepsFlattened.findIndex((step) => step.id === activeStep?.id);\n    const previousStep = isPageWizardParentStep(visibleStepsFlattened[activeStepIndex - 1])\n      ? visibleStepsFlattened[activeStepIndex - 2]\n      : visibleStepsFlattened[activeStepIndex - 1];\n    // Clear search params\n    setSearchParams(new URLSearchParams(''));\n    setActiveStep(previousStep);\n  }, [activeStep?.id, flattenedSteps, setSearchParams, wizardData]);\n\n  return (\n    <PageWizardContext.Provider\n      value={{\n        wizardData,\n        setWizardData: setWizardData,\n        stepData,\n        setStepData: setStepData,\n        steps: props.steps,\n        visibleSteps: getVisibleSteps(steps, wizardData),\n        visibleStepsFlattened: getVisibleStepsFlattened(steps, wizardData),\n        activeStep,\n        setActiveStep: setActiveStep,\n        stepError,\n        setStepError: setStepError,\n        submitError,\n        setSubmitError: setSubmitError,\n        isToggleExpanded: isToggleExpanded,\n        setToggleExpanded: setToggleExpanded,\n        onNext,\n        onBack,\n      }}\n    >\n      {props.children}\n    </PageWizardContext.Provider>\n  );\n}\n\nfunction getFlattenedSteps(steps: PageWizardStep[]) {\n  return steps.reduce((acc: PageWizardStep[], step) => {\n    acc.push(step);\n    if (isPageWizardParentStep(step)) {\n      acc.push(...step.substeps);\n    }\n    return acc;\n  }, []);\n}\n\nfunction getVisibleSteps(steps: PageWizardStep[], wizardData: object) {\n  return steps.filter((step) => isStepVisible(step, wizardData));\n}\n\nfunction getVisibleStepsFlattened(steps: PageWizardStep[], wizardData: object) {\n  const visibleSteps = getVisibleSteps(steps, wizardData);\n\n  return visibleSteps.reduce((acc: PageWizardStep[], step) => {\n    acc.push(step);\n    if (isPageWizardParentStep(step)) {\n      acc.push(...step.substeps);\n    }\n    return acc;\n  }, []);\n}\n","import { useTranslation } from 'react-i18next';\nimport { PageFormSubmitButton } from '../PageForm/PageFormButtons';\nimport { isPageWizardParentStep, usePageWizard } from './PageWizardProvider';\n\nexport function PageWizardFooter(props: {\n  onNext?: () => void;\n  onBack: () => void;\n  onCancel: () => void;\n}) {\n  const { t } = useTranslation();\n  const { activeStep, visibleStepsFlattened, setSubmitError } = usePageWizard();\n\n  const isLastStep = activeStep?.id === visibleStepsFlattened[visibleStepsFlattened.length - 1].id;\n  const nextButtonLabel = isLastStep ? t('Finish') : t('Next');\n\n  const isFirstStep = isPageWizardParentStep(visibleStepsFlattened[0])\n    ? activeStep?.id === visibleStepsFlattened[1].id\n    : activeStep?.id === visibleStepsFlattened[0].id;\n  const backClassName = isFirstStep\n    ? 'pf-v5-c-button pf-m-disabled'\n    : 'pf-v5-c-button pf-m-secondary';\n\n  return (\n    <footer className=\"pf-v5-c-wizard__footer border-top bg-lighten\" data-cy=\"wizard-footer\">\n      {activeStep !== null && 'inputs' in activeStep ? (\n        <PageFormSubmitButton style={{ minWidth: 10 }}>{nextButtonLabel}</PageFormSubmitButton>\n      ) : (\n        <button\n          data-cy=\"wizard-next\"\n          className=\"pf-v5-c-button pf-m-primary\"\n          type=\"submit\"\n          onClick={() => {\n            setSubmitError(undefined);\n            props.onNext?.();\n          }}\n        >\n          {nextButtonLabel}\n        </button>\n      )}\n      <button\n        type=\"button\"\n        data-cy=\"wizard-back\"\n        className={backClassName}\n        disabled={isFirstStep}\n        onClick={() => {\n          setSubmitError(undefined);\n          props.onBack?.();\n        }}\n      >\n        {t('Back')}\n      </button>\n      <div data-cy=\"wizard-cancel\" className=\"pf-v5-c-wizard__footer-cancel\">\n        <button className=\"pf-v5-c-button pf-m-link\" type=\"button\" onClick={props.onCancel}>\n          {t('Cancel')}\n        </button>\n      </div>\n    </footer>\n  );\n}\n","import { Alert, PageSection } from '@patternfly/react-core';\nimport { t } from 'i18next';\nimport { useCallback, useEffect } from 'react';\nimport { useFormState } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom';\nimport { PageForm } from '../PageForm/PageForm';\nimport { PageLayout } from '../PageLayout';\nimport { PageWizardFooter } from './PageWizardFooter';\nimport { usePageWizard } from './PageWizardProvider';\nimport type { PageWizardBody } from './types';\n\nexport function PageWizardBody({\n  onCancel,\n  disableGrid,\n  errorAdapter,\n  isVertical,\n  singleColumn,\n}: PageWizardBody) {\n  const navigate = useNavigate();\n  const { activeStep, stepData, onNext, onBack, submitError } = usePageWizard();\n\n  const onClose = useCallback((): void => {\n    if (onCancel) {\n      onCancel();\n    } else {\n      navigate(-1);\n    }\n  }, [navigate, onCancel]);\n\n  return (\n    <PageLayout>\n      <RequestErrorAlert error={submitError} />\n      {activeStep !== null &&\n        ('inputs' in activeStep ? (\n          <PageForm\n            key={activeStep.id}\n            onSubmit={onNext}\n            footer={<PageWizardFooter onBack={onBack} onCancel={onClose} />}\n            defaultValue={stepData[activeStep.id]}\n            errorAdapter={errorAdapter}\n            disableGrid={disableGrid}\n            isVertical={isVertical}\n            singleColumn={singleColumn}\n            isWizard\n          >\n            <StepErrors />\n            {activeStep.inputs}\n          </PageForm>\n        ) : (\n          <div\n            data-cy={`wizard-section-${activeStep.id}`}\n            style={{ display: 'flex', flexDirection: 'column', flexGrow: 1, overflow: 'hidden' }}\n          >\n            <PageSection\n              aria-label={t('Wizard step content')}\n              hasOverflowScroll\n              isFilled\n              variant=\"light\"\n            >\n              {activeStep?.element}\n            </PageSection>\n            <PageWizardFooter onNext={() => void onNext({})} onBack={onBack} onCancel={onClose} />\n          </div>\n        ))}\n    </PageLayout>\n  );\n}\n\nfunction StepErrors() {\n  const { activeStep, setStepError } = usePageWizard();\n  const { errors } = useFormState();\n  const formErrors = JSON.stringify(errors);\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0) {\n      setStepError({});\n    } else if (activeStep) {\n      setStepError({ [activeStep.id]: errors });\n    }\n  }, [errors, activeStep, setStepError, formErrors]);\n\n  return null;\n}\n\nfunction RequestErrorAlert(props: { error?: unknown }) {\n  const { t } = useTranslation();\n  const error = props.error as Error & { json?: Record<string, string> };\n  if (!props.error) return null;\n  if (!(props.error instanceof Error)) {\n    if (typeof props.error === 'string') {\n      return <Alert variant=\"danger\" title={props.error} />;\n    }\n    return <Alert variant=\"danger\" title={t('An error occurred.')} />;\n  }\n  if ('message' in props.error && !error.json) {\n    return <Alert variant=\"danger\" title={props.error.message} />;\n  }\n  if (error.json) {\n    return (\n      <Alert variant=\"danger\" title={error.message} isInline>\n        {Object.values(error.json).map((value: string, index) => (\n          <div key={index}>{value}</div>\n        ))}\n      </Alert>\n    );\n  }\n}\n","import styled from 'styled-components';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '@patternfly/react-core';\nimport { TimesIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\n\nconst WizardHeader = styled.div`\n  background-color: var(--pf-v5-global--BackgroundColor--light-100);\n  color: var(--pf-v5-global--Color--dark-100);\n\n  .pf-v5-c-wizard__close button {\n    color: var(--pf-v5-global--Color--dark-200);\n    &:hover {\n      color: var(--pf-v5-global--Color--dark-100);\n    }\n  }\n`;\n\nexport function PageWizardHeader(props: { title: React.ReactNode; onClose?: () => void }) {\n  const { t } = useTranslation();\n  return (\n    <WizardHeader className={css([styles.wizardHeader, 'border-bottom'])}>\n      <div className={css(styles.wizardTitle)}>\n        <h2 data-cy=\"wizard-title\" className={css(styles.wizardTitleText)}>\n          {props.title}\n        </h2>\n      </div>\n      {props.onClose && (\n        <div className={css(styles.wizardClose)}>\n          <Button\n            data-cy=\"wizard-close\"\n            variant=\"plain\"\n            aria-label={t('Close wizard')}\n            onClick={props.onClose}\n          >\n            <TimesIcon aria-hidden=\"true\" />\n          </Button>\n        </div>\n      )}\n    </WizardHeader>\n  );\n}\n","import { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { isPageWizardParentStep, usePageWizard } from './PageWizardProvider';\nimport { PageWizardParentStep } from './types';\nimport { useCallback } from 'react';\n\nexport function PageWizardNavigation() {\n  const {\n    activeStep,\n    isToggleExpanded,\n    stepError,\n    visibleSteps, // Top-level steps (including parent steps of substeps)\n    visibleStepsFlattened, // Flattened list containing all visible steps including substeps\n  } = usePageWizard();\n  const navClassName = isToggleExpanded\n    ? 'pf-v5-c-wizard__nav pf-m-expanded'\n    : 'pf-v5-c-wizard__nav bg-lighten';\n\n  const goToStepByIndex = useGoToStepByIndex();\n\n  if (!activeStep) return;\n\n  return (\n    <nav className={navClassName} aria-label=\"Steps\" data-cy=\"wizard-nav\">\n      <ol className=\"pf-v5-c-wizard__nav-list\">\n        {visibleSteps.map((step) => {\n          /** Index of current step in flattened list */\n          const index = visibleStepsFlattened.findIndex(\n            (visibleStep) => step.id === visibleStep.id\n          );\n          const activeStepIndex = visibleStepsFlattened.findIndex(\n            (step) => step.id === activeStep.id\n          );\n          const isDisabled = index > activeStepIndex;\n\n          const className =\n            'pf-v5-c-wizard__nav-link' + // eslint-disable-line i18next/no-literal-string\n            (activeStep.id === step.id ||\n            (isPageWizardParentStep(step) &&\n              step.substeps?.some((substep) => substep.id === activeStep.id))\n              ? // eslint-disable-next-line i18next/no-literal-string\n                ' pf-m-current' // If the active step is a substep, highlight its parent step as active using className pf-m-current\n              : '') + // eslint-disable-line i18next/no-literal-string\n            (isDisabled ? ' pf-m-disabled' : ''); // eslint-disable-line i18next/no-literal-string\n\n          return (\n            <li\n              className=\"pf-v5-c-wizard__nav-item\"\n              data-cy={`wizard-nav-item-${step.id}`}\n              key={index}\n            >\n              <button\n                className={className}\n                onClick={() => goToStepByIndex(index)}\n                disabled={isDisabled}\n              >\n                {' '}\n                {step.label}\n                {stepError[step.id] && activeStep.id === step.id && (\n                  <span style={{ marginLeft: '8px' }}>\n                    <ExclamationCircleIcon color=\"#C9190B\" />\n                  </span>\n                )}\n              </button>\n              {\n                /** Nav for substeps */\n                isPageWizardParentStep(step) ? (\n                  <SubstepsNav step={step} activeStepIndex={activeStepIndex} />\n                ) : null\n              }\n            </li>\n          );\n        })}\n      </ol>\n    </nav>\n  );\n}\n\nfunction SubstepsNav(props: { step: PageWizardParentStep; activeStepIndex: number }) {\n  const {\n    activeStep,\n    stepError,\n    visibleStepsFlattened, // Flattened list containing all visible steps including substeps\n  } = usePageWizard();\n  const { step, activeStepIndex } = props;\n  const goToStepByIndex = useGoToStepByIndex();\n\n  if (!activeStep) return;\n  return (\n    <ol className=\"pf-v5-c-wizard__nav-list\">\n      {step.substeps.map((substep) => {\n        /** Index of current step in flattened list */\n        const indexOfSubstep = visibleStepsFlattened.findIndex(\n          (visibleStep) => substep.id === visibleStep.id\n        );\n        const isDisabled = indexOfSubstep > activeStepIndex;\n\n        const className =\n          'pf-v5-c-wizard__nav-link' + // eslint-disable-line i18next/no-literal-string\n          (activeStep.id === substep.id\n            ? // eslint-disable-next-line i18next/no-literal-string\n              ' pf-m-current'\n            : '') +\n          (isDisabled ? ' pf-m-disabled' : ''); // eslint-disable-line i18next/no-literal-string\n\n        return (\n          <li\n            className=\"pf-v5-c-wizard__nav-item\"\n            data-cy={`wizard-nav-item-${substep.id}`}\n            key={substep.id}\n          >\n            <button\n              className={className}\n              onClick={() => goToStepByIndex(indexOfSubstep)}\n              disabled={isDisabled}\n            >\n              {' '}\n              {substep.label}\n              {stepError[substep.id] && activeStep.id === substep.id && (\n                <span style={{ marginLeft: '8px' }}>\n                  <ExclamationCircleIcon color=\"#C9190B\" />\n                </span>\n              )}\n            </button>\n          </li>\n        );\n      })}\n    </ol>\n  );\n}\n\nfunction useGoToStepByIndex() {\n  const { setActiveStep, visibleStepsFlattened } = usePageWizard();\n\n  return useCallback(\n    (index: number) => {\n      const step = visibleStepsFlattened[index];\n      if (step) {\n        if (isPageWizardParentStep(step)) {\n          setActiveStep(step.substeps[0]);\n        } else {\n          setActiveStep(step);\n        }\n      }\n    },\n    [setActiveStep, visibleStepsFlattened]\n  );\n}\n","import { CaretDownIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { usePageWizard } from './PageWizardProvider';\n\nexport function PageWizardToggle() {\n  const { t } = useTranslation();\n  const { activeStep, isToggleExpanded, setToggleExpanded } = usePageWizard();\n  const toggleNavExpanded = useCallback(\n    () => setToggleExpanded((isNavExpanded) => !isNavExpanded),\n    [setToggleExpanded]\n  );\n  return (\n    <button\n      onClick={toggleNavExpanded}\n      className={css(styles.wizardToggle, isToggleExpanded && 'pf-m-expanded')}\n      aria-label={t('Wizard toggle')}\n      aria-expanded={isToggleExpanded}\n      data-cy=\"wizard-toggle\"\n    >\n      <span className={css(styles.wizardToggleList)}>\n        <span className={css(styles.wizardToggleListItem)}>\n          <span className={css(styles.wizardToggleNum)}>{1}</span> {activeStep?.label}\n        </span>\n      </span>\n      <span className={css(styles.wizardToggleIcon)}>\n        <CaretDownIcon aria-hidden=\"true\" />\n      </span>\n    </button>\n  );\n}\n","import '@patternfly/patternfly/components/Wizard/wizard.css';\nimport { ErrorAdapter } from '../PageForm/typesErrorAdapter';\nimport { PageWizardBody } from './PageWizardBody';\nimport { PageWizardHeader } from './PageWizardHeader';\nimport { PageWizardNavigation } from './PageWizardNavigation';\nimport { PageWizardProvider } from './PageWizardProvider';\nimport { PageWizardToggle } from './PageWizardToggle';\nimport type { PageWizardStep } from './types';\n\nexport function PageWizard<T extends object>(props: {\n  steps: PageWizardStep[];\n  defaultValue?: Record<string, object>;\n  onCancel?: () => void;\n  onSubmit: (wizardData: T) => Promise<void>;\n  errorAdapter?: ErrorAdapter;\n  disableGrid?: boolean;\n  title?: string;\n  isVertical?: boolean;\n  singleColumn?: boolean;\n}) {\n  return (\n    <PageWizardProvider<T>\n      steps={props.steps}\n      defaultValue={props.defaultValue}\n      onSubmit={props.onSubmit}\n    >\n      <div\n        className=\"pf-v5-c-wizard\"\n        data-cy=\"wizard\"\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          height: '100%',\n          maxHeight: '100%',\n          overflow: 'hidden',\n        }}\n      >\n        {props.title && <PageWizardHeader title={props.title} onClose={props.onCancel} />}\n        <PageWizardToggle />\n        <div\n          className=\"pf-v5-c-wizard__outer-wrap\"\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            overflow: 'hidden',\n            minHeight: 0,\n          }}\n        >\n          <PageWizardNavigation />\n          <PageWizardBody\n            errorAdapter={props.errorAdapter}\n            onCancel={props.onCancel}\n            disableGrid={props.disableGrid}\n            isVertical={props.isVertical}\n            singleColumn={props.singleColumn}\n          />\n        </div>\n      </div>\n    </PageWizardProvider>\n  );\n}\n","import React from 'react';\nimport { Bullseye, PageSection, Spinner } from '@patternfly/react-core';\n\nexport function LoadingState() {\n  return (\n    <PageSection isFilled variant=\"light\">\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    </PageSection>\n  );\n}\n","import { Divider, PageSection, Skeleton } from '@patternfly/react-core';\nimport { Fragment } from 'react';\nimport { PageHeader } from '../PageHeader';\nimport { LoadingState } from './LoadingState';\n\nexport function LoadingPage(props: { breadcrumbs?: boolean; tabs?: boolean }) {\n  return (\n    <Fragment>\n      <PageHeader\n        breadcrumbs={\n          props.breadcrumbs\n            ? [{ label: (<Skeleton width=\"150px\" />) as unknown as string, isLoading: true }]\n            : undefined\n        }\n        title={(<Skeleton width=\"200px\" />) as unknown as string}\n      />\n      {props.tabs && (\n        <PageSection variant=\"light\" style={{ paddingTop: 8, paddingBottom: 8 }}>\n          <Skeleton width=\"150px\" />\n        </PageSection>\n      )}\n      <Divider />\n      <LoadingState />\n    </Fragment>\n  );\n}\n","import { SyncAltIcon } from '@patternfly/react-icons';\nimport styled, { keyframes } from 'styled-components';\n\nconst Spin = keyframes`\n  from {\n    transform: rotate(0);\n  }\n  to {\n    transform: rotate(1turn);\n  }\n`;\n\nexport const RunningIcon = styled(SyncAltIcon)`\n  animation: ${Spin} 1.75s linear infinite;\n`;\n\nRunningIcon.displayName = 'RunningIcon';\n","import { Dispatch, SetStateAction, useCallback, useEffect, useMemo, useState } from 'react';\nimport { IFilterState } from './PageToolbar/PageToolbarFilter';\nimport { useIsMountedRef } from './components/useIsMounted';\nimport { useURLSearchParams } from './components/useURLSearchParams';\nimport { useWindowLocation } from './components/useWindowLocation';\n\nimport { ITableColumn, IToolbarFilter } from '../framework';\n\n/**\n * The IView interface defines the state for a table.\n *\n * It includes:\n * - pagination\n * - sorting\n * - filters\n */\nexport interface IView {\n  page: number;\n  setPage: (page: number) => void;\n  perPage: number;\n  setPerPage: (perPage: number) => void;\n  sort: string;\n  setSort: (sort: string) => void;\n  sortDirection: 'asc' | 'desc';\n  setSortDirection: (sortDirection: 'asc' | 'desc') => void;\n  filterState: IFilterState;\n  setFilterState: Dispatch<SetStateAction<IFilterState>>;\n  clearAllFilters: () => void;\n}\n\n/**\n * The useView hook manages the state for tables.\n *\n * This includes:\n * - page\n * - perPage\n * - sort\n * - sortDirection\n * - filters\n *\n * It also manages the query string parameters for the table.\n * It will load the default values from the query string if they exist.\n * It will also update the query string when the values change.\n *\n * In most use cases, you will not need to use this hook directly.\n * Instead, you will use a wrapper hook that uses this hook.\n * That wrapper hook will be the hook that knows how to work with the data from the API.\n */\n\nexport interface ViewOptions {\n  /**\n   * The default values to use for the view\n   * - filters\n   * - sort\n   * - sortDirection\n   */\n  defaultValues?: Partial<Pick<IView, 'filterState' | 'sort' | 'sortDirection'>> | undefined;\n\n  /**\n   * Disable the use of query string parameters when using this view\n   * - useful when there are two tables or a table in a modal\n   */\n  disableQueryString?: boolean;\n\n  /**\n   * An array of query string keys to ignore when updating the query string for filters.\n   * This is the opposite of filterQueryStringKeys and only one should be used.\n   *\n   * Example:\n   *   if ignoreQueryStringKeys=['abc'] then clearing filters would not clear 'abc' from the query string\n   *   this would allow pages to have querystring values that are not cleared by filters.\n   */\n  ignoreQueryStringKeys?: string[];\n\n  /**\n   * An array of query string keys that represent the filter state in the query string.\n   * This is the opposite of ignoreQueryStringKeys and only one should be used.\n   *\n   * This is useful when the filters are known up front.\n   * In most of the framework, the filter keys are known up front and can be passed in,\n   * utilizing this option.\n   */\n  filterQueryStringKeys?: string[];\n}\n\nexport type QueryParams = {\n  [key: string]: string | string[];\n};\n\nexport interface ViewExtendedOptions<T extends object> extends ViewOptions {\n  url: string;\n  keyFn: (item: T) => string | number;\n  toolbarFilters?: IToolbarFilter[];\n  tableColumns?: ITableColumn<T>[];\n  disableQueryString?: boolean;\n  queryParams?: QueryParams;\n  sortKey?: string;\n  defaultFilters?: Record<string, string[]>;\n}\n\nexport function useView(options: ViewOptions): IView {\n  const { defaultValues, disableQueryString, ignoreQueryStringKeys, filterQueryStringKeys } =\n    options;\n\n  const mountedRef = useIsMountedRef();\n\n  const [searchParams, setSearchParams] = useURLSearchParams();\n\n  const [page, setPage] = useState(() => {\n    if (!disableQueryString) {\n      const queryPage = searchParams.get('page');\n      if (queryPage) {\n        const page = Number(queryPage);\n        if (Number.isInteger(page)) {\n          return page;\n        }\n      }\n    }\n    return 1;\n  });\n\n  const [perPage, setPerPage] = useState(() => {\n    if (!disableQueryString) {\n      const queryPerPage = searchParams.get('perPage');\n      if (queryPerPage) {\n        const perPage = Number(queryPerPage);\n        if (Number.isInteger(perPage)) {\n          return perPage;\n        }\n      }\n    }\n    const localPerPage = localStorage.getItem('perPage');\n    if (localPerPage) {\n      const perPage = Number(localPerPage);\n      if (Number.isInteger(perPage)) {\n        return perPage;\n      }\n    }\n    return 10;\n  });\n\n  const [sort, setSort] = useState(() => {\n    if (!disableQueryString) {\n      const querySort = searchParams.get('sort');\n      if (querySort) {\n        if (querySort.startsWith('-')) return querySort.slice(1);\n        return querySort;\n      }\n    }\n    return defaultValues?.sort ?? '';\n  });\n\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>(() => {\n    if (!disableQueryString) {\n      const querySort = searchParams.get('sort');\n      if (querySort) {\n        if (querySort.startsWith('-')) return 'desc';\n        return 'asc';\n      }\n    }\n    return defaultValues?.sortDirection ?? 'asc';\n  });\n\n  const [filterState, setFilterState] = useState<IFilterState>(() => {\n    const filters: IFilterState = defaultValues?.filterState ?? {};\n    for (const key of searchParams.keys()) {\n      if (defaultIgnoreQueryStringKeys.includes(key)) continue;\n      const value = searchParams.get(key);\n      if (value) {\n        const values = value.split(',');\n        filters[key] = values;\n      }\n    }\n    return filters;\n  });\n\n  const clearAllFilters = useCallback(() => setFilterState({}), [setFilterState]);\n\n  const location = useWindowLocation();\n\n  useEffect(() => {\n    if (disableQueryString) return;\n    /** Cypress component tests add a specPath param that must be ignored */\n    let search = location.location?.search;\n    if (search && search.includes('?specPath=')) {\n      search = search.substring(0, search.indexOf('?specPath='));\n    } else if (search && search.includes('&specPath=')) {\n      search = search.substring(0, search.indexOf('&specPath='));\n    }\n    const newSearchParams = new URLSearchParams(search ?? '/');\n    newSearchParams.set('page', page.toString());\n    newSearchParams.set('perPage', perPage.toString());\n    newSearchParams.set('sort', sortDirection === 'asc' ? sort : `-${sort}`);\n\n    // Remove all query string keys that are for filters\n    for (const key of searchParams.keys()) {\n      if (defaultIgnoreQueryStringKeys.includes(key)) continue;\n      if (ignoreQueryStringKeys?.includes(key)) continue;\n      if (filterQueryStringKeys) {\n        if (filterQueryStringKeys.includes(key)) {\n          newSearchParams.delete(key);\n        }\n        continue;\n      }\n      newSearchParams.delete(key);\n    }\n\n    // For each filter with value, add it to the query string\n    for (const filter in filterState) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      newSearchParams.set(filter, filterState[filter]!.join(','));\n    }\n\n    setSearchParams(newSearchParams);\n  }, [\n    sort,\n    sortDirection,\n    setSearchParams,\n    disableQueryString,\n    page,\n    perPage,\n    filterState,\n    ignoreQueryStringKeys,\n    filterQueryStringKeys,\n    mountedRef,\n    searchParams,\n    location.location?.search,\n  ]);\n\n  useEffect(() => {\n    localStorage.setItem('perPage', perPage.toString());\n  }, [perPage]);\n\n  return useMemo(\n    () => ({\n      page,\n      setPage,\n      perPage,\n      setPerPage,\n      sort,\n      setSort,\n      sortDirection,\n      setSortDirection,\n      filterState,\n      setFilterState,\n      clearAllFilters,\n    }),\n    [clearAllFilters, filterState, page, perPage, sort, sortDirection]\n  );\n}\n\n/** Ignore these query string keys when updating the query string for filters */\nconst defaultIgnoreQueryStringKeys = ['page', 'perPage', 'sort'];\n","import getValue from 'get-value';\nimport { useEffect, useMemo } from 'react';\nimport { ITableColumn } from './PageTable/PageTableColumn';\nimport {\n  ISelected,\n  useFiltered,\n  usePaged,\n  useSelectedInMemory,\n  useSorted,\n} from './PageTable/useTableItems';\nimport { IToolbarFilter } from './PageToolbar/PageToolbarFilter';\nimport { IView, useView } from './useView';\nimport { compareUnknowns } from './utils/compare';\n\nexport type IInMemoryView<T extends object> = IView &\n  ISelected<T> & {\n    itemCount: number | undefined;\n    pageItems: T[] | undefined;\n    error: Error | undefined;\n  };\n\nexport function useInMemoryView<T extends object>(options: {\n  items: T[] | undefined;\n  tableColumns?: ITableColumn<T>[];\n  toolbarFilters?: IToolbarFilter[];\n  disableQueryString?: boolean;\n  keyFn: (item: T) => string | number;\n  error?: Error;\n}): IInMemoryView<T> {\n  const { items, keyFn, tableColumns, toolbarFilters, disableQueryString } = options;\n  const view = useView({\n    defaultValues: { sort: tableColumns && tableColumns.length ? tableColumns[0].sort : undefined },\n    disableQueryString,\n  });\n  const { page, perPage, sort, sortDirection, filterState } = view;\n\n  const sorted = useSorted(items);\n  const { setSort } = sorted;\n  useEffect(\n    () =>\n      setSort({\n        id: sort,\n        sortFn: (l: T, r: T) => {\n          const lv = getValue(l, sort) as unknown;\n          const rv = getValue(r, sort) as unknown;\n          return compareUnknowns(lv, rv);\n        },\n        direction: sortDirection,\n      }),\n    [sort, sortDirection, setSort]\n  );\n\n  const filtered = useFiltered(sorted.sorted, keyFn);\n  const { setFilterFn } = filtered;\n  useEffect(() => {\n    if (Object.keys(filterState).length === 0) {\n      setFilterFn(undefined);\n    } else {\n      setFilterFn((item: T) => {\n        for (const key in filterState) {\n          const toolbarFilter = toolbarFilters?.find((filter) => filter.key === key);\n          if (toolbarFilter) {\n            const value = getValue(item, toolbarFilter.query) as unknown;\n            if (typeof value === 'string') {\n              const filterValues = filterState[key];\n              if (filterValues && filterValues.length !== 0) {\n                if (!filterValues.includes(value)) {\n                  return false;\n                }\n              }\n            }\n          }\n        }\n        return true;\n      });\n    }\n  }, [filterState, setFilterFn, toolbarFilters]);\n\n  const paged = usePaged(filtered.filtered);\n  const { setPage, setPerPage } = paged;\n  useEffect(() => setPage(page), [page, paged, setPage]);\n  useEffect(() => setPerPage(perPage), [perPage, paged, setPerPage]);\n\n  const selection = useSelectedInMemory(items, keyFn);\n\n  return useMemo(() => {\n    return {\n      itemCount: items ? filtered.filtered.length : undefined,\n      pageItems: items ? paged.paged : undefined,\n      error: options.error,\n      ...view,\n      ...selection,\n    };\n  }, [filtered.filtered.length, items, options.error, paged.paged, selection, view]);\n}\n","import i18n from 'i18next';\nimport detector from 'i18next-browser-languagedetector';\nimport backend from 'i18next-http-backend';\nimport { initReactI18next } from 'react-i18next';\n\nconst params = new URLSearchParams(window.location.search);\nconst pseudolocalizationEnabled = params.get('pseudolocalization') === 'true';\n\nvoid i18n\n  .use({\n    type: 'postProcessor',\n    name: 'pseudolocalization',\n    process: function (value: string | string[]) {\n      if (!pseudolocalizationEnabled) {\n        return value;\n      }\n      if (Array.isArray(value)) {\n        return ['»', ...value, '«'];\n      } else {\n        return `»${value}«`;\n      }\n    },\n  })\n  .use(backend)\n  .use(detector)\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    detection: {\n      lookupQuerystring: 'lang',\n      lookupCookie: 'lang',\n      lookupLocalStorage: 'lang',\n    },\n    fallbackLng: 'en', // use en if detected lng is not available\n    supportedLngs: ['en', 'es', 'fr', 'ja', 'ko', 'nl', 'zh', 'zu'],\n    interpolation: {\n      escapeValue: false, // react already safes from xss => https://www.i18next.com/translation-function/interpolation#unescape\n    },\n    postProcess: ['pseudolocalization'],\n  });\n","import { stringify } from 'yaml';\n\nexport async function createRequestError(response: Response) {\n  const message: string = response.statusText;\n  let details: string | undefined = undefined;\n  let body: string | object | undefined = undefined;\n  let json: object | undefined = undefined;\n\n  const contentType = response.headers.get('content-type');\n  if (contentType?.includes('application/json')) {\n    body = await parseJSON(response);\n  } else if (contentType?.includes('text/plain')) {\n    body = await parseText(response);\n  }\n\n  if (typeof body === 'object' && body !== null) {\n    json = body;\n    details = stringify(body);\n  }\n\n  return new RequestError(message, details, response.status, body, json);\n}\n\nasync function parseText(response: Response): Promise<string | object | undefined> {\n  try {\n    const text = await response.text();\n    return tryParseJSON(text) ?? text;\n  } catch {\n    return undefined;\n  }\n}\n\nasync function parseJSON(response: Response) {\n  try {\n    return (await response.json()) as object;\n  } catch {\n    return undefined;\n  }\n}\n\nfunction tryParseJSON(value: string): Record<string, unknown> | undefined {\n  try {\n    return JSON.parse(value) as Record<string, unknown>;\n  } catch {\n    return undefined;\n  }\n}\n\nexport class RequestError extends Error {\n  public readonly details: string | undefined;\n  public readonly statusCode: number;\n  public readonly body: string | object | undefined;\n  public readonly json: object | undefined;\n\n  constructor(\n    message: string,\n    details: string | undefined,\n    statusCode: number,\n    body: string | object | undefined,\n    json: object | undefined\n  ) {\n    super(message);\n    Object.setPrototypeOf(this, RequestError.prototype);\n    this.name = 'RequestError';\n    this.details = details;\n    this.statusCode = statusCode;\n    this.body = body;\n    this.json = json;\n  }\n}\n\nexport function isRequestError(error: unknown): error is RequestError {\n  return error instanceof RequestError;\n}\n","export function setCookie(cookie: string, value: string) {\n  const date = new Date();\n  date.setTime(date.getTime() + 30 * 24 * 60 * 60 * 1000);\n  const expires = 'expires=' + date.toUTCString();\n  document.cookie = cookie + '=' + value + ';' + expires + ';path=/';\n}\n\nexport function getCookie(cookieName: string): string | undefined {\n  const cookies = document.cookie.split(';').map((cookie) => cookie.trim());\n  for (const cookie of cookies) {\n    if (cookie.startsWith(cookieName + '=')) {\n      return cookie.slice(cookieName.length + 1);\n    }\n  }\n}\n","import { getCookie } from './cookie';\n\nexport function requestCommon(options: {\n  url: string;\n  method: string;\n  body?: unknown;\n  headers?: HeadersInit;\n  signal?: AbortSignal;\n}) {\n  const { url, method, body, signal } = options;\n\n  const headers: HeadersInit = {\n    Accepts: 'application/json',\n    'X-CSRFToken': getCookie('csrftoken') ?? '',\n  };\n  if (body) {\n    headers['Content-Type'] = 'application/json';\n  }\n\n  return fetch(url, {\n    method,\n    body: body ? JSON.stringify(body) : undefined,\n    credentials: 'include',\n    headers: { ...headers, ...options.headers },\n    signal,\n    redirect: 'error',\n  });\n}\n","/* eslint-disable no-console */\nimport { SWRConfiguration } from 'swr';\nimport { createRequestError } from './RequestError';\nimport { requestCommon } from './requestCommon';\n\ninterface Options {\n  method: 'GET' | 'PUT' | 'POST' | 'PATCH' | 'DELETE' | 'OPTIONS';\n  headers?: HeadersInit;\n  json?: unknown;\n  signal?: AbortSignal;\n}\n\nexport async function requestGet<ResponseBody>(\n  url: string,\n  signal?: AbortSignal\n): Promise<ResponseBody> {\n  const options: Options = { signal, method: 'GET' };\n  return requestFactory<ResponseBody>(url, options);\n}\n\nexport async function postRequest<ResponseBody, RequestBody = unknown>(\n  url: string,\n  json: RequestBody,\n  signal?: AbortSignal\n): Promise<ResponseBody> {\n  const options: Options = {\n    method: 'POST',\n    json,\n    signal,\n  };\n  return requestFactory<ResponseBody>(url, options);\n}\n\nexport async function requestPut<ResponseBody, RequestBody = unknown>(\n  url: string,\n  json: RequestBody,\n  signal?: AbortSignal\n): Promise<ResponseBody> {\n  const options: Options = {\n    method: 'PUT',\n    json,\n    signal,\n  };\n  return requestFactory<ResponseBody>(url, options);\n}\n\nexport async function requestPatch<ResponseBody, RequestBody = unknown>(\n  url: string,\n  json: RequestBody\n): Promise<ResponseBody> {\n  const options: Options = {\n    method: 'PATCH',\n    json,\n  };\n  return requestFactory<ResponseBody>(url, options);\n}\n\nexport async function requestDelete<ResponseBody>(\n  url: string,\n  signal: AbortSignal\n): Promise<ResponseBody> {\n  const options: Options = { signal, method: 'DELETE' };\n  return requestFactory<ResponseBody>(url, options);\n}\n\nasync function requestFactory<ResponseBody>(url: string, options: Options) {\n  const method = options.method;\n  const body = options.json;\n  const headers = options.headers;\n  const signal = options.signal;\n\n  const result = await requestCommon({\n    url,\n    method,\n    body,\n    headers,\n    signal,\n  });\n  if (!result.ok) {\n    throw await createRequestError(result);\n  }\n  // There is an AWX endpoint that returns 202 on DELETE, with no body. Workaround.\n  if (method === 'DELETE') {\n    if (result.status === 202 || result.status === 204) {\n      return null as ResponseBody;\n    }\n  }\n\n  // EDA logout returns 204 with no body. Workaround.\n  if (method === 'POST') {\n    if (result.status === 204) {\n      return null as ResponseBody;\n    }\n  }\n  return result.json() as Promise<ResponseBody>;\n}\n\nexport function useFetcher() {\n  return requestGet;\n}\n\nexport function usePostFetcher() {\n  return postRequest;\n}\n\nexport function getItemKey(item: { id: number | string }) {\n  return item?.id.toString();\n}\n\nexport const swrOptions: SWRConfiguration = {\n  dedupingInterval: 0,\n};\n","export function normalizeQueryString(query: Record<string, string | number | boolean> | undefined) {\n  if (query && Object.keys(query).length > 0) {\n    const normalizedQuery = Object.keys(query).reduce<Record<string, string>>(\n      (normalizedQuery, key) => {\n        normalizedQuery[key] = query[key].toString();\n        return normalizedQuery;\n      },\n      {}\n    );\n    return '?' + new URLSearchParams(normalizedQuery).toString();\n  }\n  return '';\n}\n","import { normalizeQueryString } from '../../../common/crud/normalizeQueryString';\n\nconst sortKeys = {\n  '/pulp/api/v3/': 'ordering',\n  '/pulp/api/v3/pulp_container/namespaces/': 'sort',\n  '/v1/imports/': 'order_by',\n  '/v1/roles/': 'order_by',\n  '/_ui/v1/': 'sort',\n  '/_ui/v2/': 'order_by',\n  '/v3/plugin/ansible/search/collection-versions/': 'order_by',\n};\n\nconst pageKeys = {\n  '/v1/imports/': 'page',\n  '/v1/namespaces/': 'page',\n  '/v1/roles/': 'page',\n  '/_ui/v1/': 'offset',\n  '/_ui/v2/': 'page',\n};\n\nexport function url2keys(url: string): { sortKey: string; pageKey: string } {\n  let sortKey = 'sort';\n  Object.entries(sortKeys).forEach(([k, v]) => {\n    if (url.includes(k)) {\n      sortKey = v;\n    }\n  });\n\n  let pageKey = 'offset';\n  Object.entries(pageKeys).forEach(([k, v]) => {\n    if (url.includes(k)) {\n      pageKey = v;\n    }\n  });\n\n  return { pageKey, sortKey };\n}\n\nexport function hubQueryString(url: string, params: Record<string, string | number | boolean>) {\n  const { pageKey, sortKey } = url2keys(url);\n  const newParams: Record<string, string> = {};\n  const limitKey = { page: 'page_size', offset: 'limit' }[pageKey] as string;\n  const limit = (params.page_size || params.limit || 10) as number;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Object.entries(params || {}).forEach(([k, v]: [string, any]) => {\n    if (['page', 'offset'].includes(k) && pageKey !== k) {\n      if (k === 'offset' && pageKey === 'page') {\n        v = 1 + ~~(v / limit);\n      }\n      if (k === 'page' && pageKey === 'offset') {\n        v = (v - 1) * limit;\n      }\n      k = pageKey;\n    }\n\n    if (['page_size', 'limit'].includes(k) && limitKey !== k) {\n      k = limitKey;\n    }\n\n    if (['sort', 'ordering', 'order_by'].includes(k) && sortKey !== k) {\n      k = sortKey;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    newParams[k] = encodeURIComponent(v);\n  });\n\n  return normalizeQueryString(newParams);\n}\n","import { hubQueryString, url2keys } from './query-string';\n\n// used in awx, eda & cypress\nexport function apiTag(strings: TemplateStringsArray, ...values: string[]) {\n  if (strings[0]?.[0] !== '/') {\n    throw new Error(`Invalid URL - must start with a slash`);\n  }\n\n  let url = '';\n  strings.forEach((fragment, index) => {\n    url += fragment;\n    if (index !== strings.length - 1) {\n      url += encodeURIComponent(`${values.shift() ?? ''}`);\n    }\n  });\n\n  return url;\n}\n\nfunction checkParam(url: string, good: string, bad: string) {\n  if (url.includes(`?${bad}=`) || url.includes(`&${bad}=`)) {\n    throw new Error(`Invalid param - use \"${good}\", not \"${bad}\" (url: ${url})`);\n  }\n}\n\ntype SimpleValue = string | number | boolean | null | undefined;\ntype ParamsValue = SimpleValue | Record<string, SimpleValue>;\n\nfunction hubApiTag(strings: TemplateStringsArray, ...values: ParamsValue[]) {\n  if (strings[0]?.[0] !== '/') {\n    throw new Error(`Invalid URL - must start with a slash`);\n  }\n\n  let url = '';\n  strings.forEach((fragment, index) => {\n    url += fragment;\n    if (index !== strings.length - 1) {\n      const next = values.shift();\n      if (next && typeof next === 'object' && (fragment.endsWith('?') || fragment.endsWith('&'))) {\n        // ?${obj} or &${obj} will transform a params object to a query string\n        url += hubQueryString(url, next as Record<string, string | number | boolean>).slice(1);\n      } else {\n        url += encodeURIComponent(`${(next as SimpleValue) ?? ''}`);\n      }\n    }\n  });\n\n  if (url.includes('//')) {\n    throw new Error(`Invalid URL - must not contain a double slash (url: ${url})`);\n  }\n\n  if (!url.includes('/?') && !url.endsWith('/')) {\n    throw new Error(\n      url.includes('?')\n        ? `Invalid URL - missing slash before \"?\" (url: ${url})`\n        : `Invalid URL - must end with a slash (url: ${url})`\n    );\n  }\n\n  if (url.indexOf('?') !== url.lastIndexOf('?')) {\n    throw new Error(`Invalid URL - multiple \"?\" (url: ${url})`);\n  }\n\n  if (url.includes('?')) {\n    const { pageKey, sortKey } = url2keys(url);\n\n    if (pageKey === 'page') {\n      checkParam(url, 'page', 'offset');\n      checkParam(url, 'page_size', 'limit');\n    }\n\n    if (pageKey === 'offset') {\n      checkParam(url, 'offset', 'page');\n      checkParam(url, 'limit', 'page_size');\n    }\n\n    if (sortKey === 'sort') {\n      checkParam(url, sortKey, 'ordering');\n      checkParam(url, sortKey, 'order_by');\n    }\n\n    if (sortKey === 'ordering') {\n      checkParam(url, sortKey, 'sort');\n      checkParam(url, sortKey, 'order_by');\n    }\n\n    if (sortKey === 'order_by') {\n      checkParam(url, sortKey, 'sort');\n      checkParam(url, sortKey, 'ordering');\n    }\n  }\n\n  return url;\n}\n\nexport let hubApiPath = process.env.HUB_API_PREFIX;\n\nexport function setHubApiPath(path: string) {\n  hubApiPath = path;\n}\n\nexport function hubAPI(strings: TemplateStringsArray, ...values: ParamsValue[]) {\n  const base = hubApiPath;\n  if (base && base.endsWith('/')) {\n    throw new Error(`Invalid HUB_API_PREFIX - must NOT end with a slash`);\n  }\n  return base + hubApiTag(strings, ...values);\n}\n\nexport function pulpAPI(strings: TemplateStringsArray, ...values: ParamsValue[]) {\n  const base = hubApiPath;\n  if (base && base.endsWith('/')) {\n    throw new Error(`Invalid HUB_API_PREFIX - must NOT end with a slash`);\n  }\n  return base + '/pulp/api/v3' + hubApiTag(strings, ...values);\n}\n","import { apiTag } from '../../../hub/common/api/formatPath';\n\nexport let awxApiPath = process.env.AWX_API_PREFIX || '/api/v2';\n\nexport function setAwxApiPath(path: string) {\n  awxApiPath = path;\n}\n\nexport function awxAPI(strings: TemplateStringsArray, ...values: string[]) {\n  return awxApiPath + apiTag(strings, ...values);\n}\n","import { ReactNode, createContext, useContext, useEffect, useMemo, useState } from 'react';\nimport useSWR from 'swr';\nimport { requestGet } from '../../common/crud/Data';\nimport { AwxUser } from '../interfaces/User';\nimport { AwxItemsResponse } from './AwxItemsResponse';\nimport { awxAPI } from './api/awx-utils';\n\ninterface ActiveUserState {\n  /** The currently active user, or `null` if there is no active user, or `undefined` if the active user is still being loaded. */\n  activeAwxUser?: AwxUser | null | undefined;\n  refreshActiveAwxUser?: () => void;\n}\n\nexport const AwxActiveUserContext = createContext<ActiveUserState>({});\n\nexport function useAwxActiveUser() {\n  return useContext(AwxActiveUserContext);\n}\n\nexport function AwxActiveUserProvider(props: { children: ReactNode; disabled?: boolean }) {\n  return props?.disabled ? (\n    <AwxActiveUserContext.Provider value={{}}>{props.children}</AwxActiveUserContext.Provider>\n  ) : (\n    <AwxActiveUserProviderInternal>{props?.children}</AwxActiveUserProviderInternal>\n  );\n}\nexport function AwxActiveUserProviderInternal(props: { children: ReactNode }) {\n  const response = useSWR<AwxItemsResponse<AwxUser>>(awxAPI`/me/`, requestGet, {\n    dedupingInterval: 0,\n    refreshInterval: 10 * 1000,\n  });\n\n  const [activeAwxUser, setActiveAwxUser] = useState<AwxUser | undefined | null>(undefined);\n\n  useEffect(() => {\n    setActiveAwxUser((activeUser) => {\n      if (response.error) {\n        return null; //return null to indicate that there is no active user.\n      }\n\n      if (response.data && response.data.results.length > 0) {\n        return response.data.results[0];\n      }\n\n      if (response.isLoading) {\n        return activeUser; // keep the current active user.\n      }\n\n      return null;\n    });\n  }, [response]);\n\n  const mutate = response.mutate;\n  const state = useMemo<ActiveUserState>(() => {\n    return { activeAwxUser, refreshActiveAwxUser: () => void mutate(undefined) };\n  }, [activeAwxUser, mutate]);\n\n  return (\n    <AwxActiveUserContext.Provider value={state}>{props.children}</AwxActiveUserContext.Provider>\n  );\n}\n","var _style, _path, _path2, _path3, _path4, _path5, _path6, _path7, _path8, _path9, _path10, _path11, _circle, _path12, _circle2, _path13, _circle3, _path14;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nvar SvgAwxLogo = function SvgAwxLogo(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlSpace: \"preserve\",\n    id: \"awx-logo_svg__Layer_1\",\n    height: 64,\n    x: 0,\n    y: 0,\n    viewBox: \"0 0 547.21 389.47\"\n  }, props), _style || (_style = /*#__PURE__*/React.createElement(\"style\", null, \".awx-logo_svg__st0{display:none}.awx-logo_svg__st1,.awx-logo_svg__st2{display:inline;fill:#faeda1}.awx-logo_svg__st2{fill:#5d2815}.awx-logo_svg__st3{fill:#faeda1}.awx-logo_svg__st4{fill:#5d2815}.awx-logo_svg__st8{fill:#ff4b4b}.awx-logo_svg__st13{fill:#fff}.awx-logo_svg__st14{fill:#a4ce39}\")), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m416.57 378-46.56-74.5 46.56-74.5h74.77l46.56 74.5-46.56 74.5z\",\n    className: \"awx-logo_svg__st3\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m489.95 231.5 45 72-45 72h-72l-45-72 45-72zm2.78-5h-77.54l-1.47 2.35-45 72-1.66 2.65 1.66 2.65 45 72 1.47 2.35h77.54l1.47-2.35 45-72 1.66-2.65-1.66-2.65-45-72z\",\n    className: \"awx-logo_svg__st4\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m416.57 231-46.56-74.5L416.57 82h74.77l46.56 74.5-46.56 74.5z\",\n    className: \"awx-logo_svg__st3\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m489.95 84.5 45 72-45 72h-72l-45-72 45-72zm2.78-5h-77.54l-1.47 2.35-45 72-1.66 2.65 1.66 2.65 45 72 1.47 2.35h77.54l1.47-2.35 45-72 1.66-2.65-1.66-2.65-45-72z\",\n    className: \"awx-logo_svg__st4\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m176.57 231-46.56-74.5L176.57 82h74.77l46.56 74.5-46.56 74.5z\",\n    className: \"awx-logo_svg__st3\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m249.95 84.5 45 72-45 72h-72l-45-72 45-72zm2.78-5h-77.54l-1.47 2.35-45 72-1.66 2.65 1.66 2.65 45 72 1.47 2.35h77.54l1.47-2.35 45-72 1.66-2.65-1.66-2.65-45-72z\",\n    className: \"awx-logo_svg__st4\"\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M56.57 158 10.01 83.5 56.57 9h74.77l46.56 74.5-46.56 74.5z\",\n    className: \"awx-logo_svg__st3\"\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m129.95 11.5 45 72-45 72h-72l-45-72 45-72zm2.78-5H55.19l-1.47 2.35-45 72-1.66 2.65 1.66 2.65 45 72 1.47 2.35h77.53999999999999l1.47-2.35 45-72 1.66-2.65-1.66-2.65-45-72zM250.95 320.5h40v55h-40z\",\n    className: \"awx-logo_svg__st4\"\n  })), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M430.45 341h-320c-8.25 0-15-6.75-15-15V136c0-8.25 6.75-15 15-15h320c8.25 0 15 6.75 15 15v190c0 8.25-6.75 15-15 15\",\n    style: {\n      fill: \"#2d8cce\"\n    }\n  }), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M318.45 384h-95c-4.12 0-7.5-3.38-7.5-7.5s3.38-7.5 7.5-7.5h95c4.12 0 7.5 3.38 7.5 7.5s-3.37 7.5-7.5 7.5\",\n    className: \"awx-logo_svg__st4\"\n  })), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M280.95 320.02h10v49h-10z\",\n    style: {\n      fill: \"#794532\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M95.95 272.5v54l349 1v-6s-132-4-242-13-107-36-107-36\",\n    style: {\n      fill: \"#026dae\"\n    }\n  }), _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M445.45 326c0 8.25-6.75 15-15 15h-320c-8.25 0-15-6.75-15-15\",\n    className: \"awx-logo_svg__st8\"\n  })), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M444.95 185.5v-54c-5.99-10-13.99-9-29.99-9-46.86 0-97.14-.87-144-1-45.41-.13-90.59.13-136 0-13-.04-34 0-39.01 9v6s132 4 242 13 107 36 107 36\",\n    style: {\n      fill: \"#abdbf7\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M95.77 325.95h50.89l8.17 13.71-47.06.29-9-5z\",\n    style: {\n      fill: \"#cb2d2f\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M445.53 326.13h-60.21l9.26 14.71 38.96.27 8.44-5.45z\",\n    style: {\n      fill: \"#fca2a3\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M430.45 341h-320c-8.25 0-15-6.75-15-15V136c0-8.25 6.75-15 15-15h320c8.25 0 15 6.75 15 15v190c0 8.25-6.75 15-15 15z\",\n    style: {\n      fill: \"none\",\n      stroke: \"#5d2815\",\n      strokeWidth: 5,\n      strokeMiterlimit: 10\n    }\n  }), _path11 || (_path11 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M207.93 188.72h24.16l8.7 46.08 12.73-46.08h24.07l12.76 46.02 8.71-46.02h24.04l-18.15 82.32h-24.94l-14.44-51.83-14.38 51.83h-24.95zM325.79 188.72h28.02l14.57 25.32 14.18-25.32h27.74l-25.62 39.87 28.04 42.45h-28.58l-16.26-26.45-16.26 26.45h-28.41l28.4-42.9zM187.02 257.45h-28.88l-4.01 13.59h-25.97l30.94-82.32h27.75l30.93 82.32h-26.64zm-5.28-17.8-9.09-29.59-8.99 29.59z\",\n    className: \"awx-logo_svg__st13\"\n  })), _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 490.45,\n    cy: 83,\n    r: 11,\n    className: \"awx-logo_svg__st14\"\n  })), _path12 || (_path12 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M490.45 74.5c4.69 0 8.5 3.81 8.5 8.5s-3.81 8.5-8.5 8.5-8.5-3.81-8.5-8.5 3.82-8.5 8.5-8.5m0-5c-7.46 0-13.5 6.04-13.5 13.5s6.04 13.5 13.5 13.5 13.5-6.04 13.5-13.5-6.04-13.5-13.5-13.5\",\n    className: \"awx-logo_svg__st4\"\n  })), _circle2 || (_circle2 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 57.45,\n    cy: 157,\n    r: 11,\n    className: \"awx-logo_svg__st14\"\n  })), _path13 || (_path13 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M57.45 148.5c4.69 0 8.5 3.81 8.5 8.5s-3.81 8.5-8.5 8.5-8.5-3.81-8.5-8.5 3.82-8.5 8.5-8.5m0-5c-7.46 0-13.5 6.04-13.5 13.5s6.04 13.5 13.5 13.5 13.5-6.04 13.5-13.5-6.04-13.5-13.5-13.5\",\n    className: \"awx-logo_svg__st4\"\n  })), _circle3 || (_circle3 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 491.45,\n    cy: 231,\n    r: 11,\n    className: \"awx-logo_svg__st8\"\n  })), _path14 || (_path14 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M491.45 222.5c4.69 0 8.5 3.81 8.5 8.5s-3.81 8.5-8.5 8.5-8.5-3.81-8.5-8.5 3.82-8.5 8.5-8.5m0-5c-7.46 0-13.5 6.04-13.5 13.5s6.04 13.5 13.5 13.5 13.5-6.04 13.5-13.5-6.04-13.5-13.5-13.5\",\n    className: \"awx-logo_svg__st4\"\n  })));\n};\nexport default SvgAwxLogo;","import { Flex, FlexItem } from '@patternfly/react-core';\nimport { Dropdown, DropdownToggle } from '@patternfly/react-core/deprecated';\nimport { ReactNode, useCallback, useState } from 'react';\nimport { useBreakpoint } from '../components/useBreakPoint';\n\nexport function PageMastheadDropdown(props: {\n  id: string;\n  icon: ReactNode;\n  label?: string;\n  children: ReactNode;\n}) {\n  const showLabel = useBreakpoint('md');\n  const [open, setOpen] = useState(false);\n  const onSelect = useCallback(() => setOpen((open) => !open), []);\n  const onToggle = useCallback(() => setOpen((open) => !open), []);\n  const children = Array.isArray(props.children) ? props.children : [props.children];\n\n  return (\n    <Dropdown\n      id={props.id}\n      ouiaId={props.id}\n      onSelect={onSelect}\n      toggle={\n        <DropdownToggle toggleIndicator={null} onToggle={onToggle}>\n          <Flex\n            alignItems={{ default: 'alignItemsCenter' }}\n            flexWrap={{ default: 'nowrap' }}\n            spaceItems={{ default: 'spaceItemsSm' }}\n          >\n            <FlexItem>{props.icon}</FlexItem>\n            {showLabel && props.label && <FlexItem wrap=\"nowrap\">{props.label}</FlexItem>}\n          </Flex>\n        </DropdownToggle>\n      }\n      isOpen={open}\n      isPlain\n      dropdownItems={children}\n      position=\"right\"\n      data-cy={props.id}\n    />\n  );\n}\n","import { AboutModal, TextContent, TextList, TextListItem } from '@patternfly/react-core';\nimport { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { usePageDialog } from '../../framework';\n\nexport interface AnsibleAboutModalProps {\n  brandImageSrc: string;\n  onClose?: () => void;\n}\n\nfunction AnsibleAboutModal(props: AnsibleAboutModalProps) {\n  const [_dialog, setDialog] = usePageDialog();\n  const { t } = useTranslation();\n  return (\n    <AboutModal\n      isOpen\n      onClose={() => {\n        setDialog(undefined);\n        props.onClose?.();\n      }}\n      trademark={t(`Copyright {{fullYear}} Red Hat, Inc.`, { fullYear: new Date().getFullYear() })}\n      brandImageSrc={props.brandImageSrc}\n      brandImageAlt={t('Brand Logo')}\n      productName={process.env.PRODUCT ?? t('AWX')}\n    >\n      <TextContent>\n        <TextList component=\"dl\">\n          <TextListItem component=\"dt\">{t('Version')}</TextListItem>\n          <TextListItem component=\"dd\">{process.env.VERSION}</TextListItem>\n        </TextList>\n      </TextContent>\n    </AboutModal>\n  );\n}\n\nexport function useAnsibleAboutModal() {\n  const [_, setDialog] = usePageDialog();\n  const [props, setProps] = useState<AnsibleAboutModalProps>();\n  useEffect(() => {\n    if (props) {\n      const onCloseHandler = () => {\n        setProps(undefined);\n        props.onClose?.();\n      };\n      setDialog(<AnsibleAboutModal {...props} onClose={onCloseHandler} />);\n    } else {\n      setDialog(undefined);\n    }\n  }, [props, setDialog]);\n  return setProps;\n}\n","import { Button, Tooltip } from '@patternfly/react-core';\nimport { RedoAltIcon } from '@patternfly/react-icons';\nimport { useCallback, useLayoutEffect, useState } from 'react';\nimport { mutate } from 'swr';\n\nexport function PageRefreshIcon() {\n  const [refreshing, setRefreshing] = useState(false);\n  const refresh = useCallback(() => {\n    setRefreshing(true);\n    void mutate((key) => typeof key === 'string').finally(() => {\n      setRefreshing(false);\n    });\n  }, []);\n  const [rotation, setRotation] = useState(0);\n\n  useLayoutEffect(() => {\n    let frame: number;\n    let start: number;\n    function rotate(timestamp: number) {\n      if (start === undefined) {\n        start = timestamp;\n      }\n      const elapsed = timestamp - start;\n      start = timestamp;\n      frame = requestAnimationFrame(rotate);\n      setRotation((rotate) => rotate + elapsed / 3);\n    }\n    function stop(timestamp: number) {\n      if (start === undefined) {\n        start = timestamp;\n      }\n      const elapsed = timestamp - start;\n      start = timestamp;\n\n      frame = requestAnimationFrame(stop);\n      setRotation((rotate) => {\n        if (Math.floor(rotate / 360) !== Math.floor((rotate + elapsed / 3) / 360)) {\n          cancelAnimationFrame(frame);\n          return 0;\n        }\n        return rotate + elapsed / 3;\n      });\n    }\n\n    if (refreshing) {\n      frame = requestAnimationFrame(rotate);\n      return () => cancelAnimationFrame(frame);\n    } else {\n      frame = requestAnimationFrame(stop);\n      return () => cancelAnimationFrame(frame);\n    }\n  }, [refreshing]);\n\n  return (\n    <Tooltip content=\"Refresh\" position=\"bottom\" entryDelay={1000}>\n      <Button id=\"refresh\" data-cy=\"refresh\" onClick={refresh} variant=\"plain\">\n        <RedoAltIcon style={{ transform: `rotateZ(${rotation}deg)` }} />\n      </Button>\n    </Tooltip>\n  );\n}\n","import { useCallback, useEffect, useMemo, useRef } from 'react';\nimport useSWR, { SWRConfiguration } from 'swr';\nimport { createRequestError } from './RequestError';\nimport { normalizeQueryString } from './normalizeQueryString';\nimport { requestCommon } from './requestCommon';\n\nexport function useGet<T>(\n  url: string | undefined,\n  query?: Record<string, string | number | boolean>,\n  swrConfiguration: SWRConfiguration = {}\n) {\n  const getRequest = useGetRequest<T>();\n\n  if (url) {\n    url += normalizeQueryString(query);\n  }\n\n  const response = useSWR<T>(url, getRequest, {\n    dedupingInterval: 0,\n    ...swrConfiguration,\n  });\n  const refresh = useCallback(() => void response.mutate(), [response]);\n  let error = response.error as Error;\n  if (error && !(error instanceof Error)) {\n    error = new Error('Unknown error');\n  }\n\n  return useMemo(\n    () => ({\n      data: response.data,\n      error: response.isLoading ? undefined : error,\n      refresh,\n      isLoading: response.isLoading,\n    }),\n    [response.data, response.isLoading, error, refresh]\n  );\n}\n\n/** Helper function */\nexport function useGetItem<T = unknown>(\n  url: string,\n  id?: string | number,\n  swrOptions?: SWRConfiguration\n) {\n  if (url?.endsWith('/')) {\n    url = url.slice(0, url.length - 1);\n  }\n\n  return useGet<T>(url && id ? `${url}/${id}/` : undefined, undefined, swrOptions);\n}\n\nexport function useGetRequest<ResponseBody>() {\n  const abortControllerRef = useRef<{ abortController?: AbortController }>({});\n  useEffect(() => {\n    const ref = abortControllerRef;\n    return () => ref.current.abortController?.abort();\n  }, []);\n  return async (\n    url: string,\n    query?: Record<string, string | number | boolean>,\n    signal?: AbortSignal\n  ) => {\n    if (url) {\n      url += normalizeQueryString(query);\n    }\n\n    const response: Response = await requestCommon({\n      url,\n      method: 'GET',\n      signal,\n    });\n    if (!response.ok) {\n      throw await createRequestError(response);\n    }\n    return (await response.json()) as ResponseBody;\n  };\n}\n","import { ReactNode, createContext, useContext, useMemo } from 'react';\nimport useSWR from 'swr';\nimport { requestGet } from '../../common/crud/Data';\nimport { Config } from '../interfaces/Config';\nimport { awxAPI } from './api/awx-utils';\n\nconst AwxConfigContext = createContext<{\n  awxConfig?: Config | null | undefined;\n  awxConfigError?: Error;\n  refreshAwxConfig?: () => void;\n}>({});\n\nexport function useAwxConfig() {\n  return useContext(AwxConfigContext).awxConfig;\n}\n\nexport function useAwxConfigState() {\n  return useContext(AwxConfigContext);\n}\n\nexport function AwxConfigProvider(props: { children: ReactNode; disabled?: boolean }) {\n  return props?.disabled ? (\n    <AwxConfigContext.Provider\n      value={{\n        awxConfig: undefined,\n        awxConfigError: undefined,\n        refreshAwxConfig: undefined,\n      }}\n    >\n      {props.children}\n    </AwxConfigContext.Provider>\n  ) : (\n    <AwxConfigProviderInternal>{props?.children}</AwxConfigProviderInternal>\n  );\n}\n\nexport function AwxConfigProviderInternal(props: { children?: ReactNode }) {\n  const response = useSWR<Config>(awxAPI`/config/`, requestGet);\n  const value = useMemo(\n    () => ({\n      awxConfig: response.data,\n      awxConfigError: response.error as Error,\n      refreshAwxConfig: () => response.mutate(undefined),\n    }),\n    [response]\n  );\n  return <AwxConfigContext.Provider value={value}>{props.children}</AwxConfigContext.Provider>;\n}\n","import {\n  createContext,\n  Dispatch,\n  ReactNode,\n  SetStateAction,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\nimport useReactWebSocket, { ReadyState } from 'react-use-websocket';\nimport { WebSocketHook } from 'react-use-websocket/dist/lib/types';\nimport { getCookie } from '../../common/crud/cookie';\n\ninterface Subscriptions {\n  [group: string]: { [event: string]: number };\n}\ntype IWebSocket = WebSocketHook<unknown, MessageEvent<unknown> | null> & {\n  setSubscriptions: Dispatch<SetStateAction<Subscriptions>>;\n};\n\nconst WebSocketContext = createContext<IWebSocket>({\n  sendMessage: () => null,\n  sendJsonMessage: () => null,\n  lastMessage: null,\n  lastJsonMessage: null,\n  readyState: ReadyState.UNINSTANTIATED,\n  getWebSocket: () => null,\n  setSubscriptions: () => null,\n});\n\nfunction useWebSocket() {\n  return useContext(WebSocketContext);\n}\n\nexport function WebSocketProvider(props: { children?: ReactNode }) {\n  const [webSocketUrl, setWebSocketUrl] = useState<string | null>(null);\n  const webSocket = useReactWebSocket(webSocketUrl, { shouldReconnect: () => true });\n  const [subscriptions, setSubscriptions] = useState<Subscriptions>({});\n\n  useEffect(() => {\n    const loc = window.location;\n    let new_uri: string;\n    if (loc.protocol === 'https:') {\n      new_uri = 'wss:';\n    } else {\n      new_uri = 'ws:';\n    }\n    new_uri += '//' + loc.host;\n    new_uri += process.env.AWX_WEBSOCKET_PREFIX;\n    setWebSocketUrl(new_uri);\n  }, []);\n\n  const { sendMessage, readyState } = webSocket;\n\n  useEffect(() => {\n    const csrftoken = getCookie('csrftoken');\n    if (csrftoken && readyState === ReadyState.OPEN) {\n      const groups = Object.keys(subscriptions).reduce<{ [group: string]: string[] }>(\n        (groups, group) => {\n          groups[group] = Object.keys(subscriptions[group]);\n          return groups;\n        },\n        {}\n      );\n      sendMessage(JSON.stringify({ groups, xrftoken: csrftoken }));\n    }\n  }, [sendMessage, subscriptions, readyState]);\n\n  return (\n    <WebSocketContext.Provider value={{ ...webSocket, setSubscriptions }}>\n      {props.children}\n    </WebSocketContext.Provider>\n  );\n}\n\nexport function useAwxWebSocketSubscription(\n  events: { [group: string]: string[] | number[] },\n  onMessage: (message: unknown) => void\n) {\n  const [evts] = useState(() => events);\n  const { sendMessage, lastJsonMessage, lastMessage, readyState, setSubscriptions } =\n    useWebSocket();\n\n  useEffect(() => {\n    setSubscriptions((subscriptions) => {\n      subscriptions = { ...subscriptions };\n      for (const group of Object.keys(evts)) {\n        let subscriptionsEvents = subscriptions[group];\n        if (!subscriptionsEvents) {\n          subscriptionsEvents = {};\n          subscriptions[group] = subscriptionsEvents;\n        }\n        for (const event of evts[group]) {\n          subscriptionsEvents[event] = (subscriptionsEvents[event] ?? 0) + 1;\n        }\n      }\n      return subscriptions;\n    });\n    return () => {\n      setSubscriptions((subscriptions) => {\n        subscriptions = { ...subscriptions };\n        for (const group of Object.keys(evts)) {\n          const subscriptionsEvents = subscriptions[group];\n          if (subscriptionsEvents) {\n            for (const event of evts[group]) {\n              subscriptionsEvents[event] = (subscriptionsEvents[event] ?? 0) - 1;\n              if (subscriptionsEvents[event] === 0) {\n                delete subscriptionsEvents[event];\n              }\n            }\n            if (Object.keys(subscriptionsEvents).length === 0) {\n              delete subscriptions[group];\n            }\n          }\n        }\n        return subscriptions;\n      });\n    };\n  }, [evts, setSubscriptions]);\n\n  useEffect(() => {\n    onMessage(lastJsonMessage);\n  }, [lastJsonMessage, onMessage]);\n\n  return { sendMessage, lastMessage, readyState };\n}\n","import { createContext, useContext } from 'react';\n\nconst DocsVersionContext = createContext<{ version?: string | undefined }>({ version: undefined });\n\nexport function useDocsVersion() {\n  return useContext(DocsVersionContext);\n}\n\nexport function DocsVersionProvider(props: {\n  version: string | undefined;\n  children: React.ReactNode;\n}) {\n  return (\n    <DocsVersionContext.Provider value={{ version: props.version }}>\n      {props.children}\n    </DocsVersionContext.Provider>\n  );\n}\n","import { Config } from '../../interfaces/Config';\nimport { useDocsVersion } from '../useDocsVersion';\n\nexport interface DocPathDictionary {\n  credentialTypes: string;\n  credentials: string;\n  organizations: string;\n  teams: string;\n  users: string;\n  activityStream: string;\n  applications: string;\n  executionEnvironments: string;\n  managementJobs: string;\n  notifiers: string;\n  topology: string;\n  workflows: string;\n  eeMigration: string;\n  jobTemplateSurveys: string;\n  index: string;\n  hosts: string;\n  inventories: string;\n  constructedInventories: string;\n  managePlaybooksSC: string;\n  projects: string;\n  templates: string;\n  workflowVisualizer: string;\n  workflowVisBuild: string;\n  jobs: string;\n  schedules: string;\n}\n\nexport function useGetDocsUrl(\n  config: Config | null | undefined,\n  doc: keyof DocPathDictionary\n): string {\n  const { version } = useDocsVersion() || { version: '2.5' };\n  const licenseType = config?.license_info?.license_type;\n  if (licenseType && licenseType !== 'open') {\n    return `https://docs.redhat.com/en/documentation/red_hat_ansible_automation_platform/${version}/html/${downstreamPaths[doc]}`;\n  } else {\n    return `https://ansible.readthedocs.io/projects/awx/en/latest/${upstreamPaths[doc]}`;\n  }\n}\n\nconst upstreamPaths: DocPathDictionary = {\n  credentialTypes: 'userguide/credential_types.html',\n  credentials: 'userguide/credentials.html',\n  organizations: 'userguide/organizations.html',\n  teams: 'userguide/teams.html',\n  users: 'userguide/users.html',\n  activityStream: 'userguide/main_menu.html#activity-stream',\n  applications: 'userguide/applications_auth.html',\n  executionEnvironments: 'userguide/execution_environments.html',\n  managementJobs: 'userguide/management_jobs.html',\n  notifiers: 'userguide/notifications.html',\n  topology: 'userguide/topology_viewer.html',\n  workflows: 'userguide/workflows.html',\n  eeMigration: 'upgrade-migration-guide/upgrade_to_ees.html',\n  jobTemplateSurveys: 'userguide/job_templates.html#surveys',\n  index: 'userguide/index.html',\n  hosts: 'userguide/hosts.html',\n  inventories: 'userguide/inventories.html',\n  constructedInventories: 'userguide/inventories.html#constructed-inventories',\n  managePlaybooksSC: 'userguide/projects.html#manage-playbooks-using-source-control',\n  projects: 'userguide/projects.html',\n  templates: 'userguide/job_templates.html',\n  workflowVisualizer: 'userguide/workflow_templates.html#ug-wf-editor',\n  workflowVisBuild: 'userguide/workflow_templates.html#converge-node',\n  jobs: 'userguide/jobs.html',\n  schedules: 'userguide/scheduling.html',\n};\n\nconst downstreamPaths: DocPathDictionary = {\n  credentialTypes: 'automation_controller_user_guide/assembly-controller-custom-credentials',\n  credentials: 'automation_controller_user_guide/controller-credentials',\n  organizations: 'automation_controller_user_guide/assembly-controller-organizations',\n  teams: 'automation_controller_user_guide/assembly-controller-teams',\n  users: 'automation_controller_user_guide/assembly-controller-users',\n  activityStream: 'automation_controller_user_guide/assembly-controller-activity-stream',\n  applications: 'automation_controller_user_guide/assembly-controller-applications',\n  executionEnvironments:\n    'automation_controller_user_guide/assembly-controller-execution-environments',\n  managementJobs: 'automation_controller_user_guide/assembly-controller-management-jobs',\n  notifiers: 'automation_controller_user_guide/assembly-controller-notifications',\n  topology: 'automation_controller_user_guide/assembly-controller-topology-viewer',\n  workflows: 'automation_controller_user_guide/assembly-controller-workflows',\n  eeMigration: 'red_hat_ansible_automation_platform_upgrade_and_migration_guide/upgrading-to-ees',\n  jobTemplateSurveys:\n    'automation_controller_user_guide/controller-job-templates#controller-surveys-in-job-templates',\n  index: 'automation_controller_user_guide/index',\n  hosts: 'automation_controller_user_guide/assembly-controller-hosts',\n  inventories: 'automation_controller_user_guide/controller-inventories',\n  constructedInventories:\n    'automation_controller_user_guide/controller-inventories#ref-controller-constructed-inventories',\n  managePlaybooksSC:\n    'automation_controller_user_guide/controller-projects#ref-projects-manage-playbooks-with-source-control',\n  projects: 'automation_controller_user_guide/controller-projects',\n  templates: 'automation_controller_user_guide/controller-job-templates',\n  workflowVisualizer:\n    'automation_controller_user_guide/controller-workflow-job-templates#controller-workflow-visualizer',\n  workflowVisBuild:\n    'automation_controller_user_guide/controller-workflow-job-templates#controller-build-workflow',\n  jobs: 'automation_controller_user_guide/controller-jobs',\n  schedules: 'automation_controller_user_guide/controller-schedules',\n};\n","export enum AwxRoute {\n  Awx = 'awx',\n\n  Overview = 'awx-overview',\n\n  // Views\n  Jobs = 'awx-jobs',\n  JobPage = 'awx-job-page',\n  JobOutput = 'awx-job-output',\n  JobDetails = 'awx-job-details',\n  TemplateLaunchWithPasswordsWizard = 'awx-template-relaunch-with-passwords-wizard',\n\n  Schedules = 'awx-schedules',\n  CreateSchedule = 'awx-create-schedule',\n  EditSchedule = 'awx-edit-schedule',\n\n  ActivityStream = 'awx-activity-stream',\n\n  WorkflowApprovals = 'awx-workflow-approvals',\n  WorkflowApprovalPage = 'awx-workflow-approval-page',\n  WorkflowApprovalDetails = 'awx-workflow-approval-details',\n  WorkflowApprovalWorkflowJobDetails = 'awx-workflow-approval-workflow-job-details',\n\n  // Resources\n  Templates = 'awx-templates',\n  CreateJobTemplate = 'awx-create-job-template',\n  CreateWorkflowJobTemplate = 'awx-create-workflow-job-template',\n  EditJobTemplate = 'awx-edit-template',\n  JobTemplatePage = 'awx-template-page',\n  JobTemplateDetails = 'awx-template-details',\n  JobTemplateScheduleDetails = 'awx-job-template-schedule-details',\n  JobTemplateTeamAccess = 'awx-job-template-team-access',\n  JobTemplateUserAccess = 'awx-job-template-user-access',\n  JobTemplateJobs = 'awx-job-template-jobs',\n  JobTemplateSurvey = 'awx-job-template-survey',\n  AddJobTemplateSurvey = 'awx-add-job-template-survey',\n  EditJobTemplateSurvey = 'awx-edit-job-template-survey',\n  JobTemplateNotifications = 'awx-job-template-notifications',\n  JobTemplateSchedules = 'awx-job-template-schedules',\n  JobTemplateSchedulePage = 'awx-template-schedule-page',\n  JobTemplateScheduleCreate = 'awx-template-schedule-create',\n  JobTemplateScheduleEdit = 'awx-template-schedule-edit',\n  JobTemplateScheduleRules = 'awx-template-schedule-rules',\n  JobTemplateCreateScheduleRules = 'awx-job-template-create-schedule-rules',\n  TemplateLaunchWizard = 'awx-template-launch-wizard',\n  JobTemplateAddTeams = 'awx-template-add-teams',\n  JobTemplateAddUsers = 'awx-template-add-users',\n\n  WorkflowJobTemplatePage = 'awx-workflow-job-template-page',\n  WorkflowJobTemplateDetails = 'awx-workflow-job-template-details',\n  WorkflowJobTemplateTeamAccess = 'awx-workflow-job-template-team-access',\n  WorkflowJobTemplateUserAccess = 'awx-workflow-job-template-user-access',\n  WorkflowJobTemplateSchedules = 'awx-workflow-job-template-schedules',\n  WorkflowJobTemplateSchedulePage = 'awx-workflow-job-template-schedule-page',\n  WorkflowJobTemplateScheduleDetails = 'awx-workflow-job-template-schedule-details',\n  WorkflowJobTemplateScheduleCreate = 'awx-workflow-job-template-schedule-create',\n  WorkflowJobTemplateScheduleEdit = 'awx-workflow-job-template-schedule-edit',\n  WorkflowJobTemplateCreateScheduleRules = 'awx-workflow-job-template-create-schedule-rules',\n  WorkflowJobTemplateJobs = 'awx-workflow-job-template-jobs',\n  WorkflowJobTemplateSurvey = 'awx-workflow-job-template-survey',\n  AddWorkflowJobTemplateSurvey = 'awx-add-workflow-job-template-survey',\n  EditWorkflowJobTemplateSurvey = 'awx-edit-workflow-job-template-survey',\n  WorkflowJobTemplateNotifications = 'awx-workflow-job-template-notifications',\n  EditWorkflowJobTemplate = 'awx-edit-workflow-job-template',\n  WorkflowVisualizer = 'awx-workflow-visualizer',\n  WorkflowJobTemplateLaunchWizard = 'awx-workflow-job-template-launch-wizard',\n  WorkflowJobTemplateAddTeams = 'awx-workflow-job-template-add-teams',\n  WorkflowJobTemplateAddUsers = 'awx-workflow-job-template-add-users',\n\n  Credentials = 'awx-credentials',\n  CreateCredential = 'awx-create-credential',\n  EditCredential = 'awx-edit-credential',\n  CredentialPage = 'awx-credential-page',\n  CredentialDetails = 'awx-credential-details',\n  CredentialJobTemplates = 'awx-credentials-job-templates',\n  CredentialTeamAccess = 'awx-credential-team-access',\n  CredentialUserAccess = 'awx-credential-user-access',\n  CredentialAddUsers = 'awx-credentials-add-users',\n  CredentialAddTeams = 'awx-credentials-add-teams',\n\n  Projects = 'awx-projects',\n  CreateProject = 'awx-create-project',\n  ProjectPage = 'awx-project-page',\n  EditProject = 'awx-edit-project',\n  ProjectDetails = 'awx-project-details',\n  ProjectJobTemplates = 'awx-project-job-templates',\n  ProjectNotifications = 'awx-project-notifications',\n  ProjectScheduleCreate = 'awx-project-schedule-create',\n  ProjectScheduleEdit = 'awx-project-schedule-edit',\n  ProjectSchedules = 'awx-project-schedules',\n  ProjectUsers = 'awx-project-users',\n  ProjectTeams = 'awx-project-teams',\n  ProjectAddUsers = 'awx-project-add-users',\n  ProjectAddTeams = 'awx-project-add-teams',\n\n  ProjectSchedulePage = 'awx-project-schedule-page',\n  ProjectScheduleDetails = 'awx-project-schedule-details',\n\n  Inventories = 'awx-inventories',\n  CreateInventory = 'awx-create-inventory',\n  CreateSmartInventory = 'awx-create-smart-inventory',\n  CreateConstructedInventory = 'awx-create-constructed-inventory',\n  EditInventory = 'awx-edit-inventory',\n  InventoryPage = 'awx-inventory-page',\n  InventoryHostPage = 'awx-inventory-host-page',\n  InventoryDetails = 'awx-inventory-details',\n  InventoryGroups = 'awx-inventory-groups',\n  InventoryGroupCreate = 'awx-inventory-group-create',\n  InventoryGroupPage = 'awx-inventory-group-page',\n  InventoryGroupEdit = 'awx-inventory-group-edit',\n  InventoryGroupDetails = 'awx-inventory-group-details',\n  InventoryGroupRelatedGroups = 'awx-inventory-group-related-groups',\n  InventoryGroupRelatedGroupsCreate = 'awx-inventory-group-related-groups-create',\n  InventoryGroupHost = 'awx-inventory-group-host',\n  InventoryGroupHostAdd = 'awx-inventory-group-host-add',\n  InventoryHosts = 'awx-inventory-hosts',\n  InventoryHostAdd = 'awx-inventory-host-add',\n  InventoryHostEdit = 'awx-inventory-host-edit',\n  InventoryHostDetails = 'awx-inventory-host-details',\n  InventoryHostGroups = 'awx-inventory-host-groups',\n  InventoryHostJobs = 'awx-inventory-host-jobs',\n  InventoryHostFacts = 'awx-inventory-host-facts',\n  InventorySources = 'awx-inventory-sources',\n  InventorySourcesAdd = `awx-inventory-sources-add`,\n  InventorySourcePage = 'awx-inventory-source-page',\n  InventorySourceDetail = 'awx-inventory-source-detail',\n  InventorySourceNotifications = 'awx-inventory-source-notifications',\n  InventoryJobs = 'awx-inventory-jobs',\n  InventoryJobTemplates = 'awx-inventory-job-templates',\n  InventorySourceEdit = 'awx-edit-inventory-source',\n  InventorySourceSchedules = 'awx-inventory-schedules',\n  InventorySourceScheduleCreate = 'awx-inventory-schedule-create',\n  InventorySourceScheduleEdit = 'awx-inventory-schedule-edit',\n  InventorySourceSchedulePage = 'awx-inventory-schedule-page',\n  InventorySourceScheduleDetails = 'awx-inventory-schedule-details',\n  InventoryRunCommand = 'awx-inventory-run-command',\n  InventoryTeamAccess = 'awx-inventory-team-access',\n  InventoryUserAccess = 'awx-inventory-user-access',\n  InventoryAddUsers = 'awx-inventory-add-users',\n  InventoryAddTeams = 'awx-inventory-add-teams',\n\n  Hosts = 'awx-hosts',\n  CreateHost = 'awx-create-host',\n  EditHost = 'awx-edit-host',\n  HostPage = 'awx-host-page',\n  HostDetails = 'awx-host-details',\n  HostFacts = 'awx-host-facts',\n  HostGroups = 'awx-host-groups',\n  HostJobs = 'awx-host-jobs',\n\n  // Access\n  Access = 'awx-access',\n\n  Organizations = 'awx-organizations',\n  CreateOrganization = 'awx-create-organization',\n  EditOrganization = 'awx-edit-organization',\n  OrganizationPage = 'awx-organization-page',\n  OrganizationDetails = 'awx-organization-details',\n  OrganizationUsersAccess = 'awx-organization-users',\n  OrganizationTeamsAccess = 'awx-organization-teams',\n  OrganizationExecutionEnvironments = 'awx-organization-execution-environments',\n  OrganizationNotifications = 'awx-organization-notifications',\n  OrganizationAddUsers = 'awx-organization-add-users',\n  OrganizationAddTeams = 'awx-organization-add-teams',\n\n  Teams = 'awx-teams',\n  CreateTeam = 'awx-create-team',\n  EditTeam = 'awx-edit-team',\n  TeamPage = 'awx-team-page',\n  TeamDetails = 'awx-team-details',\n  TeamMembers = 'awx-team-access',\n  TeamAddMembers = 'awx-team-member-add',\n  TeamRoles = 'awx-team-roles',\n  AddRolesToTeam = 'awx-add-roles-to-team',\n\n  Users = 'awx-users',\n  CreateUser = 'awx-create-user',\n  EditUser = 'awx-edit-user',\n  UserPage = 'awx-user-page',\n  UserDetails = 'awx-user-details',\n  UserOrganizations = 'awx-user-organizations',\n  UserTeams = 'awx-user-teams',\n  UserRoles = 'awx-user-roles',\n  UserTokens = 'awx-user-tokens',\n  CreateUserToken = 'awx-user-token-create',\n  UserTokenPage = 'awx-user-token-page',\n  UserTokenDetails = 'awx-user-token-detail',\n  AddRolesToUser = 'awx-add-roles-to-user',\n\n  Roles = 'awx-roles',\n  CreateRole = 'awx-create-role',\n  EditRole = 'awx-edit-role',\n  RolePage = 'awx-role-page',\n  RoleDetails = 'awx-role-details',\n\n  // Administration\n  Administration = 'awx-administration',\n  Infrastructure = 'awx-infrastructure',\n\n  CredentialTypes = 'awx-credential-types',\n  CredentialTypePage = 'awx-credential-type-page',\n  CredentialTypeDetails = 'awx-credential-type-details',\n  CredentialTypeCredentials = 'awx-credential-type-credentials',\n  CreateCredentialType = 'awx-create-credential-type',\n  EditCredentialType = 'awx-edit-credential-type',\n\n  NotificationTemplates = 'awx-notification-templates',\n  NotificationTemplatePage = 'awx-notification-template-page',\n  NotificationTemplateDetails = 'awx-notification-template-details',\n  NotificationTemplateTeamAccess = 'awx-notification-template-team-access',\n  NotificationTemplateUserAccess = 'awx-notification-template-user-access',\n  NotificationAddUsers = 'awx-notification-add-users',\n  NotificationAddTeams = 'awx-notification-add-teams',\n  EditNotificationTemplate = 'awx-edit-notification-template',\n  AddNotificationTemplate = 'awx-add-notification-template',\n\n  ManagementJobs = 'awx-management-jobs',\n  ManagementJobPage = 'awx-management-job-page',\n  ManagementJobSchedules = 'awx-management-job-schedules',\n  ManagementJobSchedulesDetails = 'awx-management-job-schedules-details',\n  ManagementJobNotifications = 'awx-management-job-notifications',\n\n  ManagementJobSchedulePage = 'awx-management-job-schedule-page',\n  ManagementJobScheduleDetails = 'awx-management-job-schedule-details',\n  ManagementJobScheduleRules = 'awx-management-job-schedule-rules',\n  ManagementJobScheduleEdit = 'awx-management-job-schedule-edit',\n  ManagementJobScheduleCreate = 'awx-management-job-schedule-create',\n\n  CreateInstanceGroup = 'awx-create-instance-group',\n  EditInstanceGroup = 'awx-edit-instance-group',\n  InstanceGroupPage = 'awx-instance-group-page',\n  InstanceGroupDetails = 'awx-instance-group-details',\n  InstanceGroupInstances = 'awx-instance-group-instances',\n  InstanceGroupInstancesPage = 'awx-instance-group-instances-page',\n  InstanceGroupInstanceDetails = 'awx-instance-group-instance-details',\n  InstanceGroupTeamAccess = 'awx-instance-group-team-access',\n  InstanceGroupUserAccess = 'awx-instance-group-user-access',\n  InstanceGroupJobs = 'awx-instance-group-jobs',\n  InstanceGroups = 'awx-instance-groups',\n  InstanceGroupAddTeams = 'awx-instance-group-add-teams',\n  InstanceGroupAddUsers = 'awx-instance-group-add-users',\n\n  CreateContainerGroup = 'awx-create-container-group',\n  ContainerGroupDetails = 'awx-container-group-details',\n  ContainerGroupPage = 'awx-container-group-page',\n  EditContainerGroup = 'awx-container-group-edit',\n\n  Instances = 'awx-instances',\n  AddInstance = 'awx-add-instance',\n  EditInstance = 'awx-edit-instance',\n  InstancePage = 'awx-instance-page',\n  InstanceDetails = 'awx-instance-details',\n  InstancePeers = 'awx-instance-peers',\n  InstanceListenerAddresses = 'awx-instance-listener-addresses',\n\n  ExecutionEnvironments = 'awx-execution-environments',\n  ExecutionEnvironmentPage = 'awx-execution-environments-page',\n  ExecutionEnvironmentDetails = 'awx-execution-environments-details',\n  ExecutionEnvironmentTemplates = 'awx-execution-environments-templates',\n  CreateExecutionEnvironment = 'awx-create-execution-environment',\n  EditExecutionEnvironment = 'awx-edit-execution-environment',\n  ExecutionEnvironmentTeamAccess = 'awx-execution-environment-team-access',\n  ExecutionEnvironmentUserAccess = 'awx-execution-environment-user-access',\n  ExecutionEnvironmentAddUsers = 'awx-execution-environment-add-users',\n  ExecutionEnvironmentAddTeams = 'awx-execution-environment-add-teams',\n\n  TopologyView = 'awx-topology-view',\n\n  // Analytics\n  Analytics = 'awx-analytics',\n  Reports = 'awx-reports',\n  AutomationCalculator = 'awx-automation-calculator',\n  AnalyticsBuilder = 'awx-analytics-builder',\n  HostMetrics = 'awx-host-metrics',\n  SubscriptionUsage = 'awx-subscription-usage',\n\n  // Settings\n  Settings = 'awx-settings',\n  SettingsPreferences = 'awx-settings-preferences',\n  SettingsSystem = 'awx-settings-system',\n  SettingsJobs = 'awx-settings-jobs',\n  SettingsLogging = 'awx-settings-logging',\n  SettingsCustomizeLogin = 'awx-settings-customize-login',\n  SettingsTroubleshooting = 'awx-settings-troubleshooting',\n  SettingsAuthentication = 'awx-settings-authentication',\n  SettingsCategory = 'awx-settings-category',\n\n  Login = 'awx-login',\n}\n","import { Icon, ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { DropdownItem } from '@patternfly/react-core/deprecated';\nimport { ExternalLinkAltIcon, QuestionCircleIcon, UserCircleIcon } from '@patternfly/react-icons';\nimport { useCallback, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageMasthead, useGetPageUrl, usePageNavigate } from '../../../framework';\nimport { PageMastheadDropdown } from '../../../framework/PageMasthead/PageMastheadDropdown';\nimport { PageNotificationsIcon } from '../../../framework/PageMasthead/PageNotificationsIcon';\nimport { PageThemeSwitcher } from '../../../framework/PageMasthead/PageThemeSwitcher';\nimport { usePageNotifications } from '../../../framework/PageNotifications/PageNotificationsProvider';\nimport AwxBrand from '../../assets/awx-logo.svg';\nimport { useAnsibleAboutModal } from '../../common/AboutModal';\nimport { PageRefreshIcon } from '../../common/PageRefreshIcon';\nimport { useGet } from '../../common/crud/useGet';\nimport { AwxItemsResponse } from '../common/AwxItemsResponse';\nimport { awxAPI } from '../common/api/awx-utils';\nimport { useAwxActiveUser } from '../common/useAwxActiveUser';\nimport { useAwxConfig } from '../common/useAwxConfig';\nimport { useAwxWebSocketSubscription } from '../common/useAwxWebSocket';\nimport { useGetDocsUrl } from '../common/util/useGetDocsUrl';\nimport { WorkflowApproval } from '../interfaces/WorkflowApproval';\nimport { AwxRoute } from './AwxRoutes';\n\nexport function AwxMasthead() {\n  const { t } = useTranslation();\n  const openAnsibleAboutModal = useAnsibleAboutModal();\n  const config = useAwxConfig();\n  const pageNavigate = usePageNavigate();\n  const { activeAwxUser, refreshActiveAwxUser } = useAwxActiveUser();\n  useAwxNotifications();\n  const logout = useCallback(async () => {\n    await fetch('/api/logout/');\n    refreshActiveAwxUser?.();\n  }, [refreshActiveAwxUser]);\n  return (\n    <PageMasthead brand={<AwxBrand style={{ height: 60 }} />}>\n      <ToolbarGroup variant=\"icon-button-group\" style={{ flexGrow: 1 }}>\n        <ToolbarItem style={{ marginLeft: 'auto' }}>\n          <PageRefreshIcon />\n        </ToolbarItem>\n        <ToolbarItem>\n          <PageThemeSwitcher />\n        </ToolbarItem>\n        <ToolbarItem>\n          <PageNotificationsIcon />\n        </ToolbarItem>\n        <ToolbarItem>\n          <PageMastheadDropdown id=\"help-menu\" icon={<QuestionCircleIcon />}>\n            <DropdownItem\n              id=\"documentation\"\n              icon={<ExternalLinkAltIcon />}\n              component=\"a\"\n              href={useGetDocsUrl(config, 'index')}\n              target=\"_blank\"\n              data-cy=\"masthead-documentation\"\n            >\n              {t('Documentation')}\n            </DropdownItem>\n            <DropdownItem\n              id=\"about\"\n              onClick={() => openAnsibleAboutModal({ brandImageSrc: '/assets/awx-logo.svg' })}\n              data-cy=\"masthead-about\"\n            >\n              {t('About')}\n            </DropdownItem>\n          </PageMastheadDropdown>\n        </ToolbarItem>\n        <ToolbarItem>\n          <PageMastheadDropdown\n            id=\"account-menu\"\n            icon={\n              <Icon size=\"lg\">\n                <UserCircleIcon />\n              </Icon>\n            }\n            label={activeAwxUser?.username}\n          >\n            <DropdownItem\n              id=\"user-details\"\n              label={t('User details')}\n              onClick={() =>\n                pageNavigate(AwxRoute.UserDetails, { params: { id: activeAwxUser?.id } })\n              }\n            >\n              {t('User details')}\n            </DropdownItem>\n            <DropdownItem id=\"logout\" label={t('Logout')} onClick={() => void logout()}>\n              {t('Logout')}\n            </DropdownItem>\n          </PageMastheadDropdown>\n        </ToolbarItem>\n      </ToolbarGroup>\n    </PageMasthead>\n  );\n}\n\nexport function useAwxNotifications() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n\n  const { data, refresh } = useGet<AwxItemsResponse<WorkflowApproval>>(\n    awxAPI`/workflow_approvals/`,\n    { page_size: 200, status: 'pending' }\n  );\n\n  const handleWebSocketMessage = useCallback(\n    (message?: { group_name?: string; type?: string }) => {\n      switch (message?.group_name) {\n        case 'jobs':\n          switch (message?.type) {\n            case 'workflow_approval':\n              void refresh();\n              break;\n          }\n          break;\n      }\n    },\n    [refresh]\n  );\n\n  useAwxWebSocketSubscription(\n    { control: ['limit_reached_1'], jobs: ['status_changed'] },\n    handleWebSocketMessage as (data: unknown) => void\n  );\n\n  const { setNotificationGroups } = usePageNotifications();\n  useEffect(() => {\n    setNotificationGroups((groups) => {\n      groups['workflow-approvals'] = {\n        title: t('Workflow Approvals'),\n        notifications:\n          data?.results.map((workflow_approval) => ({\n            title: workflow_approval.name,\n            description: workflow_approval.summary_fields.workflow_job?.name,\n            timestamp: workflow_approval.created,\n            variant: 'info',\n            to: getPageUrl(AwxRoute.WorkflowApprovalDetails, {\n              params: { id: workflow_approval.id },\n            }),\n          })) ?? [],\n      };\n      return { ...groups };\n    });\n  }, [data, getPageUrl, setNotificationGroups, t]);\n\n  return data?.count ?? 0;\n}\n","import { useTranslation } from 'react-i18next';\nimport { PageSelectOption } from '../PageInputs/PageSelectOption';\n\nexport interface IPageSettingsOption {\n  name: string;\n  label: string;\n  helpText: string;\n  options: PageSelectOption<string | number>[];\n  defaultValue: string | number;\n}\n\nexport function usePageSettingsOptions(): IPageSettingsOption[] {\n  const { t } = useTranslation();\n  return [\n    {\n      name: 'refreshInterval',\n      label: t('Refresh interval'),\n      helpText: t(\n        'The refresh interval is the time in seconds between automatic refreshes of the data on the page.'\n      ),\n      options: [\n        { label: t('5 seconds'), value: 5 },\n        { label: t('10 seconds'), value: 10 },\n        { label: t('30 seconds'), value: 30 },\n        { label: t('1 minute'), value: 60 },\n        { label: t('5 minutes'), value: 300 },\n        { label: t('Never'), value: 0 },\n      ],\n      defaultValue: 30,\n    },\n    {\n      name: 'theme',\n      label: t('Color theme'),\n      helpText: t('Select the color theme.'),\n      options: [\n        { label: t('System'), value: 'system', description: t('Use the system color theme.') },\n        { label: t('Light'), value: 'light', description: t('Use the light color theme.') },\n        { label: t('Dark'), value: 'dark', description: t('Use the dark color theme.') },\n      ],\n      defaultValue: 'system',\n    },\n    {\n      name: 'tableLayout',\n      label: t('Table layout'),\n      helpText: t('The preferred layout for tables.'),\n      options: [\n        {\n          label: t('Compact'),\n          value: 'compact',\n          description: t('Reduce spacing and make the table more compact.'),\n        },\n        {\n          label: t('Comfortable'),\n          value: 'comfortable',\n          description: t('Increase spacing and make the table more comfortable.'),\n        },\n      ],\n      defaultValue: 'comfortable',\n    },\n    {\n      name: 'formColumns',\n      label: t('Form columns'),\n      helpText: t('Allows displaying forms and details in a single or multiple columns.'),\n      options: [\n        {\n          label: t('Single'),\n          value: 'single',\n          description: t('Display forms and details using a single column.'),\n        },\n        {\n          label: t('Multiple'),\n          value: 'multiple',\n          description: t('Display forms and details using multiple columns.'),\n        },\n      ],\n      defaultValue: 'multiple',\n    },\n\n    {\n      name: 'dateFormat',\n      label: t('Date format'),\n      helpText: t('The preferred date format to display in tables and details.'),\n      options: [\n        {\n          label: t('Relative'),\n          value: 'since',\n          description: t('Show dates as a relative to the current time.'),\n        },\n        {\n          label: t('Date and time'),\n          value: 'date-time',\n          description: t('Show dates as date and time.'),\n        },\n      ],\n      defaultValue: 'date-time',\n    },\n    {\n      name: 'dataEditorFormat',\n      label: t('Preferred data format'),\n      helpText: t('The preferred data format for editing and displaying data.'),\n      options: [\n        { label: t('YAML'), value: 'yaml' },\n        { label: t('JSON'), value: 'json' },\n      ],\n      defaultValue: 'yaml',\n    },\n  ];\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { PencilAltIcon } from '@patternfly/react-icons';\nimport { useContext, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom';\nimport { IPageAction, PageActionSelection, PageActionType } from '../PageActions/PageAction';\nimport { PageActions } from '../PageActions/PageActions';\nimport { PageDetail } from '../PageDetails/PageDetail';\nimport { PageDetails } from '../PageDetails/PageDetails';\nimport { PageHeader } from '../PageHeader';\nimport { PageLayout } from '../PageLayout';\nimport { PageSettingsContext } from './PageSettingsProvider';\nimport { IPageSettingsOption, usePageSettingsOptions } from './usePageSettingOptions';\n\nexport function PageSettingsDetails() {\n  const { t } = useTranslation();\n  const [settings] = useContext(PageSettingsContext);\n  const navigate = useNavigate();\n  const actions = useMemo<IPageAction<object>[]>(\n    () => [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.None,\n        variant: ButtonVariant.primary,\n        icon: PencilAltIcon,\n        label: t('Edit'),\n        onClick: () => navigate('./edit'),\n        isPinned: true,\n      },\n    ],\n    [navigate, t]\n  );\n  const options = usePageSettingsOptions();\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('User Preferences')}\n        headerActions={<PageActions actions={actions} position={DropdownPosition.right} />}\n      />\n      <PageDetails>\n        {options.map((option) => (\n          <PageSettingsDetail\n            key={option.name}\n            option={option}\n            value={(settings as Record<string, string | number>)[option.name]}\n          />\n        ))}\n      </PageDetails>\n    </PageLayout>\n  );\n}\n\nfunction PageSettingsDetail(props: { option: IPageSettingsOption; value: string | number }) {\n  const optionLabel = props.option.options.find((option) => option.value === props.value)?.label;\n  return (\n    <PageDetail\n      label={props.option.label}\n      helpText={props.option.helpText}\n      id={props.option.name.toLowerCase()}\n    >\n      {optionLabel}\n    </PageDetail>\n  );\n}\n","import { t } from 'i18next';\nimport {\n  Controller,\n  FieldPath,\n  FieldPathValue,\n  FieldValues,\n  Validate,\n  useFormContext,\n} from 'react-hook-form';\nimport { PageSingleSelect, PageSingleSelectProps } from '../../PageInputs/PageSingleSelect';\nimport { useID } from '../../hooks/useID';\nimport { useFrameworkTranslations } from '../../useFrameworkTranslations';\nimport { PageFormGroup, PageFormGroupProps } from './PageFormGroup';\nimport { useRequiredValidationRule } from './validation-hooks';\n\nexport type PageFormSingleSelectProps<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n  ValueT = FieldPathValue<TFieldValues, TFieldName>,\n> = {\n  name: TFieldName;\n  validate?:\n    | Validate<FieldPathValue<TFieldValues, TFieldName>, TFieldValues>\n    | Record<string, Validate<FieldPathValue<TFieldValues, TFieldName>, TFieldValues>>;\n  isReadOnly?: boolean;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n} & Pick<\n  PageSingleSelectProps<ValueT>,\n  'id' | 'placeholder' | 'options' | 'footer' | 'isDisabled' | 'isRequired' | 'disableSortOptions'\n> &\n  Pick<\n    PageFormGroupProps,\n    'label' | 'labelHelp' | 'labelHelpTitle' | 'additionalControls' | 'isRequired' | 'helperText'\n  >;\n\nexport function PageFormSingleSelect<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: PageFormSingleSelectProps<TFieldValues, TFieldName>) {\n  const id = useID(props);\n\n  const { control, formState } = useFormContext<TFieldValues>();\n  const { isSubmitting, isValidating } = formState;\n\n  const [translations] = useFrameworkTranslations();\n  const required = useRequiredValidationRule(props.label, props.isRequired);\n\n  return (\n    <Controller<TFieldValues, TFieldName>\n      name={props.name}\n      control={control}\n      shouldUnregister\n      defaultValue={props.defaultValue}\n      render={({ field: { value, onChange }, fieldState: { error } }) => {\n        const helperTextInvalid = error?.message\n          ? props.validate && isValidating\n            ? translations.validating\n            : error?.message\n          : undefined;\n        let isDisabled = props.isDisabled;\n        if (!isDisabled && props.isReadOnly) {\n          isDisabled = t('Readonly');\n        }\n        if (isSubmitting) {\n          isDisabled = t('Submitting');\n        }\n        return (\n          <PageFormGroup\n            fieldId={id}\n            label={props.label}\n            labelHelpTitle={props.labelHelpTitle ?? props.label}\n            labelHelp={props.labelHelp}\n            helperText={props.helperText}\n            helperTextInvalid={helperTextInvalid}\n            isRequired={props.isRequired}\n            additionalControls={props.additionalControls}\n          >\n            <PageSingleSelect\n              id={id}\n              data-cy={id ?? name}\n              placeholder={props.placeholder}\n              options={props.options}\n              aria-describedby={id ? `${id}-form-group` : undefined}\n              value={value}\n              onSelect={onChange}\n              isDisabled={isDisabled}\n              footer={props.footer}\n              isRequired={props.isRequired}\n              disableSortOptions={props.disableSortOptions}\n            />\n          </PageFormGroup>\n        );\n      }}\n      rules={{ required, validate: props.validate }}\n    />\n  );\n}\n","import { useCallback, useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom';\nimport { PageFormSingleSelect } from '../PageForm/Inputs/PageFormSingleSelect';\nimport { PageForm } from '../PageForm/PageForm';\nimport { PageHeader } from '../PageHeader';\nimport { PageLayout } from '../PageLayout';\nimport { IPageSettings, PageSettingsContext } from './PageSettingsProvider';\nimport { usePageSettingsOptions } from './usePageSettingOptions';\n\nexport function PageSettingsForm() {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const [settings, setSettings] = useContext(PageSettingsContext);\n  const onSubmit = useCallback(\n    (settings: IPageSettings) => {\n      setSettings(settings);\n      navigate('..');\n      return Promise.resolve();\n    },\n    [navigate, setSettings]\n  );\n  const onCancel = useCallback(() => navigate('..'), [navigate]);\n  const options = usePageSettingsOptions();\n  return (\n    <PageLayout>\n      <PageHeader title={t('User preferences')} titleHelp={t('Per user preferences.')} />\n      <PageForm<IPageSettings>\n        defaultValue={{\n          ...options.reduce((acc, option) => ({ ...acc, [option.name]: option.defaultValue }), {}),\n          ...settings,\n        }}\n        submitText={t('Save user preferences')}\n        onCancel={onCancel}\n        onSubmit={onSubmit}\n      >\n        {options.map((option) => (\n          <PageFormSingleSelect\n            id={option.name.toLowerCase()}\n            name={option.name}\n            key={option.name}\n            label={option.label}\n            placeholder={t('Select {{label}}', { label: option.label })}\n            options={option.options}\n            labelHelp={option.helpText}\n            isRequired\n            defaultValue={option.defaultValue}\n          />\n        ))}\n      </PageForm>\n    </PageLayout>\n  );\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ITableColumn,\n  TextCell,\n  useGetPageUrl,\n  ColumnModalOption,\n  DateTimeCell,\n} from '../../../../../framework';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { AwxRbacRole } from '../../../interfaces/AwxRbacRole';\n\nexport function useAwxRoleColumns(options?: { disableSort?: boolean; disableLinks?: boolean }) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n\n  return useMemo<ITableColumn<AwxRbacRole>[]>(\n    () => [\n      {\n        header: t('Name'),\n        cell: (role) => (\n          <TextCell\n            to={\n              options?.disableLinks\n                ? undefined\n                : getPageUrl(AwxRoute.RoleDetails, {\n                    params: { id: role.id },\n                  })\n            }\n            text={role.name}\n          />\n        ),\n        sort: options?.disableSort ? undefined : 'name',\n        card: 'name',\n        list: 'name',\n      },\n      {\n        header: t('Description'),\n        type: 'description',\n        value: (role) => role.description,\n        sort: options?.disableSort ? undefined : 'description',\n        card: 'description',\n        list: 'description',\n      },\n      {\n        header: t('Created'),\n        cell: (role) => <DateTimeCell value={role.created} />,\n        sort: options?.disableSort ? undefined : 'created',\n        defaultSortDirection: 'desc',\n        modal: ColumnModalOption.hidden,\n      },\n      {\n        header: t('Editable'),\n        type: 'text',\n        value: (role) => (role.managed ? t('Built-in') : t('Editable')),\n        sort: options?.disableSort ? undefined : 'managed',\n        defaultSortDirection: 'asc',\n        card: 'subtitle',\n        list: 'subtitle',\n        modal: ColumnModalOption.hidden,\n      },\n    ],\n    [t, options?.disableSort, options?.disableLinks, getPageUrl]\n  );\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport type AwxRoleMetadaContentType = {\n  displayName: string;\n  permissions: {\n    [key: string]: string;\n  };\n};\n\nexport enum AwxContentTypes {\n  Credential = 'awx.credential',\n  ExecutionEnvironement = 'awx.executionenvironment',\n  InstanceGroup = 'awx.instancegroup',\n  Inventory = 'awx.inventory',\n  JobTemplate = 'awx.jobtemplate',\n  NotificationTemplate = 'awx.notificationtemplate',\n  Organization = 'shared.organization',\n  Project = 'awx.project',\n  Team = 'shared.team',\n  WorkflowJobTemplate = 'awx.workflowjobtemplate',\n}\n\nexport interface AwxRoleMetadata {\n  content_types: Record<AwxContentTypes, AwxRoleMetadaContentType>;\n}\n\nexport function useAwxRoleMetadata(): AwxRoleMetadata {\n  const { t } = useTranslation();\n\n  return useMemo(\n    () => ({\n      content_types: {\n        'awx.credential': {\n          displayName: t('Credential'),\n          permissions: {\n            'awx.use_credential': t('Use credential'),\n            'awx.change_credential': t('Change credential'),\n            'awx.delete_credential': t('Delete credential'),\n            'awx.view_credential': t('View credential'),\n          },\n        },\n        'awx.executionenvironment': {\n          displayName: t('Execution environment'),\n          permissions: {\n            'awx.change_executionenvironment': t('Change execution environment'),\n            'awx.delete_executionenvironment': t('Delete execution environment'),\n            'awx.view_executionenvironment': t('View execution environment'),\n          },\n        },\n        'awx.instancegroup': {\n          displayName: t('Instance group'),\n          permissions: {\n            'awx.use_instancegroup': t('Use instance group'),\n            'awx.change_instancegroup': t('Change instance group'),\n            'awx.delete_instancegroup': t('Delete instance group'),\n            'awx.view_instancegroup': t('View instance group'),\n          },\n        },\n        'awx.inventory': {\n          displayName: t('Inventory'),\n          permissions: {\n            'awx.use_inventory': t('Use inventory'),\n            'awx.adhoc_inventory': t('Ad hoc inventory'),\n            'awx.update_inventory': t('Update inventory'),\n            'awx.change_inventory': t('Change inventory'),\n            'awx.delete_inventory': t('Delete inventory'),\n            'awx.view_inventory': t('View inventory'),\n          },\n        },\n        'awx.jobtemplate': {\n          displayName: t('Job template'),\n          permissions: {\n            'awx.execute_jobtemplate': t('Execute job template'),\n            'awx.change_jobtemplate': t('Change job template'),\n            'awx.delete_jobtemplate': t('Delete job template'),\n            'awx.view_jobtemplate': t('View job template'),\n          },\n        },\n        'awx.notificationtemplate': {\n          displayName: t('Notification template'),\n          permissions: {\n            'awx.change_notificationtemplate': t('Change notification template'),\n            'awx.delete_notificationtemplate': t('Delete notification template'),\n            'awx.view_notificationtemplate': t('View notification template'),\n          },\n        },\n        'shared.organization': {\n          displayName: t('Organization'),\n          permissions: {\n            'shared.member_organization': t('Member organization'),\n            'shared.audit_organization': t('Audit organization'),\n            'shared.change_organization': t('Change organization'),\n            'shared.delete_organization': t('Delete organization'),\n            'shared.view_organization': t('View organization'),\n            'awx.update_project': t('Update project'),\n            'awx.use_project': t('Use project'),\n            'awx.add_project': t('Add project'),\n            'awx.change_project': t('Change project'),\n            'awx.delete_project': t('Delete project'),\n            'awx.view_project': t('View project'),\n            'shared.member_team': t('Member team'),\n            'shared.add_team': t('Add team'),\n            'shared.change_team': t('Change team'),\n            'shared.delete_team': t('Delete team'),\n            'shared.view_team': t('View team'),\n            'awx.execute_workflowjobtemplate': t('Execute workflow job template'),\n            'awx.approve_workflowjobtemplate': t('Approve workflow job template'),\n            'awx.add_workflowjobtemplate': t('Add workflow job template'),\n            'awx.change_workflowjobtemplate': t('Change workflow job template'),\n            'awx.delete_workflowjobtemplate': t('Delete workflow job template'),\n            'awx.view_workflowjobtemplate': t('Delete workflow job template'),\n            'awx.execute_jobtemplate': t('Execute job template'),\n            'awx.change_jobtemplate': t('Change job template'),\n            'awx.delete_jobtemplate': t('Delete job template'),\n            'awx.view_jobtemplate': t('View job template'),\n            'awx.use_inventory': t('Use inventory'),\n            'awx.adhoc_inventory': t('Ad hoc inventory'),\n            'awx.update_inventory': t('Update inventory'),\n            'awx.add_inventory': t('Add inventory'),\n            'awx.change_inventory': t('Change inventory'),\n            'awx.delete_inventory': t('Delete inventory'),\n            'awx.view_inventory': t('View inventory'),\n            'awx.use_credential': t('Use credential'),\n            'awx.add_credential': t('Add credential'),\n            'awx.change_credential': t('Change credential'),\n            'awx.delete_credential': t('Delete credential'),\n            'awx.view_credential': t('View credential'),\n            'awx.add_notificationtemplate': t('Add notification template'),\n            'awx.change_notificationtemplate': t('Change notification template'),\n            'awx.delete_notificationtemplate': t('Delete notification template'),\n            'awx.view_notificationtemplate': t('View notification template'),\n            'awx.add_executionenvironment': t('Add execution environment'),\n            'awx.change_executionenvironment': t('Change execution environment'),\n            'awx.delete_executionenvironment': t('Delete execution environment'),\n            'awx.view_executionenvironment': t('View execution environment'),\n          },\n        },\n        'awx.project': {\n          displayName: t('Project'),\n          permissions: {\n            'awx.update_project': t('Update project'),\n            'awx.use_project': t('Use project'),\n            'awx.change_project': t('Change project'),\n            'awx.delete_project': t('Delete project'),\n            'awx.view_project': t('View project'),\n          },\n        },\n        'shared.team': {\n          displayName: t('Team'),\n          permissions: {\n            'shared.member_team': t('Member team'),\n            'shared.change_team': t('Change team'),\n            'shared.delete_team': t('Delete team'),\n            'shared.view_team': t('View team'),\n          },\n        },\n        'awx.workflowjobtemplate': {\n          displayName: t('Workflow job template'),\n          permissions: {\n            'awx.execute_workflowjobtemplate': t('Execute workflow job template'),\n            'awx.approve_workflowjobtemplate': t('Approve workflow job template'),\n            'awx.change_workflowjobtemplate': t('Change workflow job template'),\n            'awx.delete_workflowjobtemplate': t('Delete workflow job template'),\n            'awx.view_workflowjobtemplate': t('View workflow job template'),\n          },\n        },\n      },\n    }),\n    [t]\n  );\n}\n","import {\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Label,\n  LabelGroup,\n} from '@patternfly/react-core';\nimport { AwxRbacRole } from '../../../interfaces/AwxRbacRole';\nimport { ContentTypeEnum } from '../../../interfaces/ContentType';\nimport { useAwxRoleMetadata } from '../hooks/useAwxRoleMetadata';\n\nexport function AwxRolePermissions(props: { role: AwxRbacRole }) {\n  const { role } = props;\n  const rolesMetadata = useAwxRoleMetadata();\n\n  return (\n    <DescriptionList\n      isHorizontal\n      horizontalTermWidthModifier={{\n        default: '12ch',\n        sm: '15ch',\n        md: '20ch',\n        lg: '28ch',\n        xl: '30ch',\n        '2xl': '35ch',\n      }}\n      data-cy=\"permissions-description-list\"\n    >\n      <DescriptionListGroup key={role?.content_type}>\n        {role.content_type && (\n          <>\n            <DescriptionListTerm\n              data-cy={role.content_type}\n              style={{ fontWeight: 'normal' }}\n              key={role.content_type}\n            >\n              {rolesMetadata.content_types[role.content_type]?.displayName || role.content_type}\n            </DescriptionListTerm>\n            <DescriptionListDescription>\n              {!!role?.permissions.length && (\n                <LabelGroup numLabels={3}>\n                  {role?.permissions.map((permission: string) => {\n                    return (\n                      <Label key={permission} data-cy={permission}>\n                        {rolesMetadata.content_types[role.content_type as ContentTypeEnum]\n                          ?.permissions[permission] || permission}\n                      </Label>\n                    );\n                  })}\n                </LabelGroup>\n              )}\n            </DescriptionListDescription>\n          </>\n        )}\n      </DescriptionListGroup>\n    </DescriptionList>\n  );\n}\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateHeader,\n  EmptyStateFooter,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon, SyncIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\nimport { RequestError } from '../../common/crud/RequestError';\n\nexport function AwxError(props: { error: Error; handleRefresh?: () => void }) {\n  const { error, handleRefresh } = props;\n  const { t } = useTranslation();\n  return (\n    <EmptyState isFullHeight>\n      <EmptyStateHeader\n        titleText={<>{error?.message}</>}\n        icon={<EmptyStateIcon icon={ExclamationCircleIcon} />}\n        headingLevel=\"h4\"\n      />\n      <EmptyStateFooter>\n        {error instanceof RequestError && error.details && (\n          <EmptyStateBody>{error.details}</EmptyStateBody>\n        )}\n        {handleRefresh && (\n          <Button variant=\"primary\" onClick={handleRefresh} icon={<SyncIcon />}>\n            {t('Refresh')}\n          </Button>\n        )}\n      </EmptyStateFooter>\n    </EmptyState>\n  );\n}\n","import { useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport {\n  PageDetails,\n  PageDetail,\n  PageDetailsFromColumns,\n  LoadingPage,\n} from '../../../../framework';\nimport { useGetItem } from '../../../common/crud/useGet';\nimport { AwxRbacRole } from '../../interfaces/AwxRbacRole';\nimport { useAwxRoleColumns } from './hooks/useAwxRoleColumns';\nimport { AwxRolePermissions } from './components/AwxRolePermissions';\nimport { AwxError } from '../../common/AwxError';\nimport { awxAPI } from '../../common/api/awx-utils';\n\nexport function AwxRoleDetails() {\n  const { t } = useTranslation();\n  const columns = useAwxRoleColumns({ disableLinks: true });\n  const params = useParams<{ id: string }>();\n  const {\n    data: role,\n    error,\n    refresh,\n  } = useGetItem<AwxRbacRole>(awxAPI`/role_definitions/`, params.id);\n\n  if (error) return <AwxError error={error} handleRefresh={refresh} />;\n  if (!role) return <LoadingPage breadcrumbs tabs />;\n\n  return (\n    <>\n      <PageDetails disableScroll>\n        <PageDetailsFromColumns<AwxRbacRole> item={role} columns={columns} />\n      </PageDetails>\n      <PageDetails disableScroll numberOfColumns={'single'}>\n        <PageDetail label={t('Permissions')}>\n          <AwxRolePermissions role={role} />\n        </PageDetail>\n      </PageDetails>\n    </>\n  );\n}\n","import { useEffect, useState } from 'react';\n\nconst PERSISTENT_FILTER_KEY = 'persistent-filter';\n\ninterface IFilter {\n  pageKey: string;\n  qs: string;\n}\n\nexport function usePersistentFilters(pageKey: string) {\n  const [search, setSearch] = useState(window.location.search);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => {\n    if (window.location.search !== search) {\n      setSearch(window.location.search);\n    }\n  });\n\n  useEffect(() => {\n    const filter = {\n      pageKey,\n      qs: window.location.search,\n    };\n    sessionStorage.setItem(PERSISTENT_FILTER_KEY, JSON.stringify(filter));\n  }, [search, pageKey]);\n}\n\nexport function getPersistentFilters(key?: string) {\n  const filterString = sessionStorage.getItem(PERSISTENT_FILTER_KEY);\n  const filter = (filterString ? JSON.parse(filterString) : { qs: '' }) as IFilter;\n\n  if (filter.pageKey === key) {\n    return filter.qs;\n  }\n  return '';\n}\n","import { Tab, TabProps, TabTitleText, Tabs } from '@patternfly/react-core';\nimport { CaretLeftIcon } from '@patternfly/react-icons';\nimport { useEffect } from 'react';\nimport { Outlet, useLocation, useNavigate, useSearchParams } from 'react-router-dom';\nimport { PageLayout, useGetPageUrl, usePageNavigate } from '../../framework';\nimport { usePageBreadcrumbs } from '../../framework/PageTabs/PageBreadcrumbs';\nimport { getPersistentFilters } from './PersistentFilters';\n\nexport function PageRoutedTabs(props: {\n  backTab?: { label: string; page: string; persistentFilterKey: string };\n  tabs: ({ label: string; page: string; dataCy?: string } | false)[];\n  params?: { [key: string]: string | number | undefined };\n  // Use to pass data to tab's component. To access data in that component use useOutletContext()\n  componentParams?: { [key: string]: unknown };\n\n  // url query keys that are shared accross tabs, the rest query strings will dissappear when switching tabs\n  sharedQueryKeys?: string[];\n  isBox?: boolean;\n}) {\n  const pageNavigate = usePageNavigate();\n  const navigate = useNavigate();\n  const getPageUrl = useGetPageUrl();\n  const location = useLocation();\n  const { setTabBreadcrumb } = usePageBreadcrumbs();\n\n  const activeTab = props.tabs.find(\n    (tab) =>\n      tab &&\n      (getPageUrl(tab.page, { params: props.params }) === location.pathname ||\n        location.pathname.includes(getPageUrl(tab.page, { params: props.params })))\n  );\n\n  // Set current active tab to tabBreadcrumb in the PageBreadcrumbContext\n  useEffect(() => {\n    if (activeTab) {\n      setTabBreadcrumb({ label: activeTab.label });\n      return () => setTabBreadcrumb(undefined);\n    } else {\n      setTabBreadcrumb(undefined);\n    }\n  }, [activeTab, setTabBreadcrumb]);\n\n  const [searchParams] = useSearchParams();\n\n  const sharedQueryKeysObj: Record<string, string | number | undefined> = {};\n  if (props.sharedQueryKeys) {\n    for (const key of props.sharedQueryKeys) {\n      sharedQueryKeysObj[key] = searchParams.get(key) || '';\n    }\n  }\n\n  const querystring = getPersistentFilters(props.backTab?.persistentFilterKey);\n  const query = parseQuery(querystring);\n  const onSelect = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>,\n    eventKey: number | string\n  ) => {\n    event.preventDefault();\n    if (eventKey === props.backTab?.page) {\n      navigate(getPageUrl(eventKey.toString(), { params: props.params, query }));\n    } else {\n      pageNavigate(eventKey.toString(), { params: props.params, query: sharedQueryKeysObj });\n    }\n  };\n\n  const tabs = props.tabs\n    .filter((tab) => !!tab)\n    .map((tab) =>\n      tab ? (\n        <Tab\n          key={tab.page}\n          eventKey={tab.page}\n          title={tab.label}\n          href={getPageUrl(tab.page, { params: props.params, query: sharedQueryKeysObj })}\n          data-cy={tab.dataCy}\n        />\n      ) : null\n    ) as unknown as TabsChild;\n\n  return (\n    <>\n      <Tabs\n        onSelect={onSelect}\n        inset={{ default: 'insetSm' }}\n        isBox={props.isBox !== undefined ? props.isBox : true}\n        activeKey={activeTab ? activeTab.page : undefined}\n        style={{\n          backgroundColor: 'var(--pf-v5-c-tabs__link--BackgroundColor)',\n          flexShrink: 0,\n        }}\n      >\n        {props.backTab && (\n          <Tab\n            key={props.backTab.page}\n            eventKey={props.backTab.page}\n            title={\n              <TabTitleText>\n                <CaretLeftIcon />\n                <span style={{ marginLeft: 6 }}>{props.backTab.label}</span>\n              </TabTitleText>\n            }\n            href={getPageUrl(props.backTab.page, { params: props.params, query })}\n            data-cy={props.backTab.label.replace(' ', '-').toLocaleLowerCase()}\n          />\n        )}\n        {tabs}\n      </Tabs>\n\n      {/* This div is needed to flex grow to fill the page space. */}\n      <div style={{ flexGrow: 1, overflow: 'hidden' }}>\n        {/* PageLayout now sets its max height to 100% which is 100% of the div above, which allows it's contents to scroll. */}\n        <PageLayout>\n          <Outlet context={props.componentParams} />\n        </PageLayout>\n      </div>\n    </>\n  );\n}\n\nfunction parseQuery(queryString: string) {\n  const query: Record<string, string> = {};\n  const pairs = (queryString[0] === '?' ? queryString.substr(1) : queryString).split('&');\n  for (let i = 0; i < pairs.length; i++) {\n    const pair = pairs[i].split('=');\n    if (pair.length < 2) continue;\n    const key = decodeURIComponent(pair[0]);\n    const value = decodeURIComponent(pair[1] || '');\n    query[key] = decodeURIComponent(value);\n  }\n  return query;\n}\n\ntype TabElement = React.ReactElement<TabProps, React.JSXElementConstructor<TabProps>>;\ntype TabsChild = TabElement | boolean | null | undefined;\n","import {\n  ErrorOutput,\n  FieldErrorDetail,\n  GenericErrorDetail,\n} from '../../../../framework/PageForm/typesErrorAdapter';\nimport { isRequestError } from '../../../common/crud/RequestError';\n\nexport const awxErrorAdapter = (error: unknown): ErrorOutput => {\n  const genericErrors: GenericErrorDetail[] = [];\n  const fieldErrors: FieldErrorDetail[] = [];\n\n  if (isRequestError(error) && typeof error.json === 'object' && error.json !== null) {\n    const data = error.json;\n\n    if ('detail' in data) {\n      if (Array.isArray(data.detail)) {\n        genericErrors.push({ message: data.detail[0] as string });\n      } else {\n        genericErrors.push({ message: data.detail as string });\n      }\n    } else if ('__all__' in data) {\n      if (Array.isArray(data['__all__'])) {\n        genericErrors.push({ message: data['__all__'][0] as string });\n      } else {\n        genericErrors.push({ message: data['__all__'] as string });\n      }\n    } else if ('inputs' in data) {\n      // handle credential inputs errors\n      const inputs = data['inputs'];\n      if (Array.isArray(inputs)) {\n        inputs.forEach((input) => {\n          if (typeof input === 'string') {\n            genericErrors.push({ message: input });\n          }\n        });\n      } else if (typeof inputs === 'object' && inputs !== null) {\n        Object.entries(inputs).forEach(([key, value]) => {\n          if (typeof value === 'string') {\n            fieldErrors.push({ name: key, message: value });\n          } else if (Array.isArray(value) && value.length > 0) {\n            fieldErrors.push({ name: key, message: value[0] as string });\n          }\n        });\n      }\n    } else if ('module_args' in data) {\n      genericErrors.push({ message: data.module_args as string });\n    }\n\n    // handle API responses {error: 'Cannot assign a Credential of kind `galaxy`.'}\n    else if ('error' in data) {\n      if (Array.isArray(data['error'])) {\n        genericErrors.push({ message: data['error'][0] as string });\n      } else {\n        genericErrors.push({ message: data['error'] as string });\n      }\n    } else {\n      for (const key in data) {\n        let value = (data as Record<string, unknown>)[key];\n        if (typeof value === 'string') {\n          fieldErrors.push({ name: key, message: value });\n        } else if (Array.isArray(value)) {\n          value = value[0];\n          // Convert any value type to string\n          fieldErrors.push({ name: key, message: String(value) });\n        }\n      }\n    }\n  } else if (error instanceof Error) {\n    genericErrors.push({ message: error.message });\n  }\n  return { genericErrors, fieldErrors };\n};\n\n/**\n * Parses the error message and returns a formatted message along with parsed errors.\n * @param {Error} error - The error object to parse.\n * @param {string} [unknownErrorMessage] - Optional. The translated string for unknown errors.\n * @returns {{ message: string; parsedErrors: (GenericErrorDetail | FieldErrorDetail)[] }} An object containing the formatted error message and parsed errors.\n */\nexport function useAwxErrorMessageParser() {\n  return (\n    error: Error,\n    unknownErrorMessage?: string\n  ): { message: string; parsedErrors: (GenericErrorDetail | FieldErrorDetail)[] } => {\n    const { genericErrors, fieldErrors } = awxErrorAdapter(error);\n    const parsedErrors = [\n      ...genericErrors,\n      ...fieldErrors.filter((e) => e.message).map(({ message }) => ({ message })),\n    ];\n    const message =\n      typeof parsedErrors[0]?.message === 'string' && parsedErrors.length === 1\n        ? parsedErrors[0].message\n        : unknownErrorMessage\n          ? unknownErrorMessage\n          : `Unknown error`;\n    return { message, parsedErrors };\n  };\n}\n","import { useBulkConfirmation } from '../../../framework/PageDialogs/BulkConfirmationDialog';\nimport { awxErrorAdapter } from './adapters/awxErrorAdapter';\n\nexport const useAwxBulkConfirmation = <T extends object>() =>\n  useBulkConfirmation<T>(awxErrorAdapter);\n","export function nameKeyFn(item: { name: string }) {\n  return item.name;\n}\n\nexport function idKeyFn(item: { id: number | string }) {\n  return item.id;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ITableColumn, TextCell, compareStrings } from '../../../../../framework';\nimport { requestDelete } from '../../../../common/crud/Data';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { useAwxRoleColumns } from './useAwxRoleColumns';\nimport { AwxRbacRole } from '../../../interfaces/AwxRbacRole';\nimport { useAwxActiveUser } from '../../../common/useAwxActiveUser';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { idKeyFn } from '../../../../common/utils/nameKeyFn';\n\nexport function useDeleteAwxRoles(onComplete: (roles: AwxRbacRole[]) => void) {\n  const { t } = useTranslation();\n  const confirmationColumns = useAwxRoleColumns({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo<ITableColumn<AwxRbacRole>[]>(\n    () => [\n      {\n        header: t('Name'),\n        cell: (role) => <TextCell text={role.name} />,\n        card: 'name',\n        list: 'name',\n      },\n    ],\n    [t]\n  );\n  const { activeAwxUser } = useAwxActiveUser();\n  const bulkAction = useAwxBulkConfirmation<AwxRbacRole>();\n  const cannotDeleteBuiltInRole = (role: AwxRbacRole) =>\n    role.managed ? t('Built-in roles cannot be deleted.') : '';\n  const cannotDeleteRoleDueToPermissions = () =>\n    activeAwxUser?.is_superuser\n      ? ''\n      : t(\n          'You do not have permission to edit this role. Please contact your organization administrator if there is an issue with your access.'\n        );\n\n  const deleteRoles = (roles: AwxRbacRole[]) => {\n    const undeletableBuiltInRoles: AwxRbacRole[] = roles.filter((role) => role.managed);\n    const editableRoles: AwxRbacRole[] = roles.filter((role) => !role.managed);\n    const undeletableRolesDueToPermissions: AwxRbacRole[] = editableRoles.filter(\n      cannotDeleteRoleDueToPermissions\n    );\n\n    bulkAction({\n      title: t('Permanently delete roles', { count: roles.length }),\n      confirmText: t('Yes, I confirm that I want to delete these {{count}} roles.', {\n        count:\n          roles.length - undeletableBuiltInRoles.length - undeletableRolesDueToPermissions.length,\n      }),\n      actionButtonText: t('Delete roles', {\n        count:\n          roles.length - undeletableBuiltInRoles.length - undeletableRolesDueToPermissions.length,\n      }),\n      items: roles.sort((l, r) => compareStrings(l.name, r.name)),\n      alertPrompts:\n        undeletableBuiltInRoles.length || undeletableRolesDueToPermissions.length\n          ? [\n              ...(undeletableBuiltInRoles.length\n                ? [\n                    t(\n                      '{{count}} of the selected roles cannot be deleted because they are built-in.',\n                      {\n                        count: undeletableBuiltInRoles.length,\n                      }\n                    ),\n                  ]\n                : []),\n              ...(undeletableRolesDueToPermissions.length\n                ? [\n                    t(\n                      '{{count}} of the selected roles cannot be deleted due to insufficient permissions.',\n                      {\n                        count: undeletableRolesDueToPermissions.length,\n                      }\n                    ),\n                  ]\n                : []),\n            ]\n          : undefined,\n      isItemNonActionable: (role: AwxRbacRole) =>\n        cannotDeleteBuiltInRole(role)\n          ? cannotDeleteBuiltInRole(role)\n          : cannotDeleteRoleDueToPermissions(),\n      keyFn: idKeyFn,\n      isDanger: true,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: (role, signal) =>\n        requestDelete(awxAPI`/role_definitions/${role.id.toString()}/`, signal),\n    });\n  };\n  return deleteRoles;\n}\n","import { PencilAltIcon, PlusCircleIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  useGetPageUrl,\n} from '../../../../../framework';\nimport { useDeleteAwxRoles } from './useDeleteAwxRoles';\nimport { AwxRbacRole } from '../../../interfaces/AwxRbacRole';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useAwxActiveUser } from '../../../common/useAwxActiveUser';\nimport { ButtonVariant } from '@patternfly/react-core';\n\nexport function useAwxRoleToolbarActions(onComplete: (roles: AwxRbacRole[]) => void) {\n  const { t } = useTranslation();\n  const { activeAwxUser } = useAwxActiveUser();\n  const getPageUrl = useGetPageUrl();\n  const deleteRoles = useDeleteAwxRoles(onComplete);\n\n  return useMemo<IPageAction<AwxRbacRole>[]>(\n    () => [\n      {\n        type: PageActionType.Link,\n        selection: PageActionSelection.None,\n        isPinned: true,\n        icon: PlusCircleIcon,\n        label: t('Create role'),\n        isDisabled: activeAwxUser?.is_superuser\n          ? undefined\n          : t(\n              'You do not have permission to create a role. Please contact your system administrator if there is an issue with your access.'\n            ),\n        href: `${getPageUrl(AwxRoute.CreateRole)}`,\n        variant: ButtonVariant.primary,\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: TrashIcon,\n        label: t('Delete selected roles'),\n        onClick: deleteRoles,\n        isDanger: true,\n      },\n    ],\n    [deleteRoles, getPageUrl, t, activeAwxUser?.is_superuser]\n  );\n}\n\nexport function useAwxRoleRowActions(onComplete: (roles: AwxRbacRole[]) => void) {\n  const { t } = useTranslation();\n  const { activeAwxUser } = useAwxActiveUser();\n  const deleteRoles = useDeleteAwxRoles(onComplete);\n  const getPageUrl = useGetPageUrl();\n\n  return useMemo<IPageAction<AwxRbacRole>[]>(\n    () => [\n      {\n        type: PageActionType.Link,\n        selection: PageActionSelection.Single,\n        icon: PencilAltIcon,\n        isPinned: true,\n        variant: ButtonVariant.primary,\n        label: t('Edit role'),\n        isDisabled: (role) =>\n          role.managed\n            ? t('Built-in roles cannot be edited.')\n            : activeAwxUser?.is_superuser\n              ? undefined\n              : t(\n                  'You do not have permission to edit this role. Please contact your organization administrator if there is an issue with your access.'\n                ),\n        href: (role) => {\n          return getPageUrl(AwxRoute.EditRole, {\n            params: { id: role.id ?? '' },\n          });\n        },\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: TrashIcon,\n        label: t('Delete role'),\n        isDisabled: (role) =>\n          role.managed\n            ? t('Built-in roles cannot be deleted.')\n            : activeAwxUser?.is_superuser\n              ? undefined\n              : t(\n                  'You do not have permission to delete this role. Please contact your organization administrator if there is an issue with your access.'\n                ),\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        onClick: (role) => deleteRoles([role]),\n        isDanger: true,\n      },\n    ],\n    [deleteRoles, getPageUrl, t, activeAwxUser?.is_superuser]\n  );\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageActions,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { PageRoutedTabs } from '../../../common/PageRoutedTabs';\nimport { useGetItem } from '../../../common/crud/useGet';\nimport { AwxError } from '../../common/AwxError';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { AwxRbacRole } from '../../interfaces/AwxRbacRole';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { useAwxRoleRowActions } from './hooks/useAwxRoleRowActions';\n\nexport function AwxRolePage(props: {\n  breadcrumbLabelForPreviousPage?: string;\n  backTabLabel?: string;\n}) {\n  const getPageUrl = useGetPageUrl();\n  const { t } = useTranslation();\n  const params = useParams<{ id: string; resourceType: string }>();\n  const pageNavigate = usePageNavigate();\n  const {\n    data: role,\n    error,\n    refresh,\n  } = useGetItem<AwxRbacRole>(awxAPI`/role_definitions/`, params.id);\n\n  const itemActions = useAwxRoleRowActions(() => {\n    pageNavigate(AwxRoute.Roles);\n  });\n\n  if (error) return <AwxError error={error} handleRefresh={refresh} />;\n  if (!role) return <LoadingPage breadcrumbs tabs />;\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={role?.name}\n        breadcrumbs={[\n          {\n            label: props.breadcrumbLabelForPreviousPage || t('Roles'),\n            to: getPageUrl(AwxRoute.Roles),\n          },\n          { label: role?.name },\n        ]}\n        headerActions={\n          <PageActions<AwxRbacRole>\n            actions={itemActions}\n            position={DropdownPosition.right}\n            selectedItem={role}\n          />\n        }\n      />\n      <PageRoutedTabs\n        backTab={{\n          label: props.backTabLabel || t('Back to Roles'),\n          page: AwxRoute.Roles,\n          persistentFilterKey: 'awx-roles',\n        }}\n        tabs={[{ label: t('Details'), page: AwxRoute.RoleDetails }]}\n        params={{ id: params.id ?? '' }}\n      />\n    </PageLayout>\n  );\n}\n","import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport useSWR from 'swr';\nimport {\n  ISelected,\n  ITableColumn,\n  IToolbarFilter,\n  ToolbarFilterType,\n  useSelected,\n} from '../../../framework';\nimport { DateRangeFilterPresets } from '../../../framework/PageToolbar/PageToolbarFilters/ToolbarDateRangeFilter';\nimport { IView, useView } from '../../../framework/useView';\nimport { getItemKey, swrOptions, useFetcher } from '../../common/crud/Data';\nimport { RequestError } from '../../common/crud/RequestError';\nimport { AwxItemsResponse } from './AwxItemsResponse';\n\nexport type IAwxView<T extends { id: number }> = IView &\n  ISelected<T> & {\n    itemCount: number | undefined;\n    pageItems: T[] | undefined;\n    refresh: () => Promise<void>;\n    selectItemsAndRefresh: (items: T[]) => void;\n    unselectItemsAndRefresh: (items: T[]) => void;\n    limitFiltersToOneOrOperation: true;\n    updateItem: (item: T) => void;\n  };\n\nexport type QueryParams = {\n  [key: string]: string | Array<string>;\n};\n\nexport function getQueryString(queryParams: QueryParams) {\n  return Object.entries(queryParams)\n    .map(([key, value = '']) => {\n      if (Array.isArray(value)) {\n        const listKeyVals = value.map(\n          (subval) => `${encodeURIComponent(key)}=${encodeURIComponent(subval)}`\n        );\n        const queryString = listKeyVals.join('&');\n        return queryString;\n      } else {\n        return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n      }\n    })\n    .join('&');\n}\n\nexport function useAwxView<T extends { id: number }>(options: {\n  /** The base url for the view. */\n  url: string;\n\n  /** The filters for the view. Used to manage the keys used in the browser querystrings which store the filter results. */\n  toolbarFilters?: IToolbarFilter[];\n\n  /** The table columns for the view. Used to determine the default sort. */\n  tableColumns?: ITableColumn<T>[];\n\n  /** Extra querystring params passed to the backed API.  */\n  queryParams?: QueryParams;\n\n  /** Disable the browser querystring updating. Used when a table is in a details page or modal. */\n  disableQueryString?: boolean;\n\n  /** The default items that should be initially selected. */\n  defaultSelection?: T[];\n\n  defaultSort?: string | undefined;\n  defaultSortDirection?: 'asc' | 'desc' | undefined;\n}): IAwxView<T> {\n  let { url } = options;\n  const { toolbarFilters, tableColumns, disableQueryString } = options;\n\n  let defaultSort: string | undefined = options.defaultSort;\n  let defaultSortDirection: 'asc' | 'desc' | undefined = options.defaultSortDirection;\n\n  // If a column is defined with defaultSort:true use that column to set the default sort, otherwise use the first column\n  if (tableColumns && tableColumns.length) {\n    const defaultSortColumn = tableColumns.find((column) => column.defaultSort) ?? tableColumns[0];\n    defaultSort = defaultSortColumn?.sort;\n    defaultSortDirection = defaultSortColumn?.defaultSortDirection;\n  }\n\n  const view = useView({\n    defaultValues: { sort: defaultSort, sortDirection: defaultSortDirection },\n    disableQueryString,\n  });\n  const itemCountRef = useRef<{ itemCount: number | undefined }>({ itemCount: undefined });\n\n  const { page, perPage, sort, sortDirection, filterState } = view;\n\n  let queryString =\n    options?.queryParams && Object.keys(options.queryParams).length\n      ? `?${getQueryString(options.queryParams)}`\n      : '';\n  if (filterState) {\n    for (const key in filterState) {\n      const toolbarFilter = toolbarFilters?.find((filter) => filter.key === key);\n      if (toolbarFilter) {\n        let values = filterState[key];\n        if (values) values = values.filter((value) => value !== null);\n        if (values && values.length > 0) {\n          queryString ? (queryString += '&') : (queryString += '?');\n\n          // Support for Activity Stream needing two values\n          if (toolbarFilter.query === 'object1__in') {\n            if (values.length === 1 && values.some((value) => value !== '')) {\n              queryString += `or__object1__in=${values[0]\n                .split('+')\n                .join(',')}&or__object2__in=${values[0].split('+').join(',')}`;\n            }\n          } else if (toolbarFilter.query === 'search') {\n            queryString += values.map((value) => `${toolbarFilter.query}=${value}`).join('&');\n          } else {\n            if (values.length > 1) {\n              if (toolbarFilter.type === ToolbarFilterType.DateRange) {\n                queryString += `${toolbarFilter.query}__gte=${values[0]}&${toolbarFilter.query}__lte=${values[1]}`;\n              } else {\n                queryString += values\n                  .map((value) => `or__${toolbarFilter.query}=${value}`)\n                  .join('&');\n              }\n            } else {\n              if (toolbarFilter.type === ToolbarFilterType.DateRange) {\n                const date = new Date(Date.now());\n                date.setSeconds(0);\n                date.setMilliseconds(0);\n                switch (values[0] as DateRangeFilterPresets) {\n                  case DateRangeFilterPresets.LastHour:\n                    queryString += `${toolbarFilter.query}__gte=${new Date(\n                      date.getTime() - 60 * 60 * 1000\n                    ).toISOString()}`;\n                    break;\n                  case DateRangeFilterPresets.Last24Hours:\n                    queryString += `${toolbarFilter.query}__gte=${new Date(\n                      date.getTime() - 24 * 60 * 60 * 1000\n                    ).toISOString()}`;\n                    break;\n                  case DateRangeFilterPresets.LastWeek:\n                    queryString += `${toolbarFilter.query}__gte=${new Date(\n                      date.getTime() - 7 * 24 * 60 * 60 * 1000\n                    ).toISOString()}`;\n                    break;\n                  case DateRangeFilterPresets.LastMonth:\n                    queryString += `${toolbarFilter.query}__gte=${new Date(\n                      date.getTime() - 30 * 24 * 60 * 60 * 1000\n                    ).toISOString()}`;\n                    break;\n                }\n              } else {\n                queryString += `${toolbarFilter.query}=${values[0]}`;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  if (sort && !queryString.includes('order_by')) {\n    queryString ? (queryString += '&') : (queryString += '?');\n    if (sortDirection === 'desc') {\n      queryString += `order_by=-${sort}`;\n    } else {\n      queryString += `order_by=${sort}`;\n    }\n  }\n\n  queryString ? (queryString += '&') : (queryString += '?');\n  queryString += `page=${page}`;\n\n  queryString ? (queryString += '&') : (queryString += '?');\n  queryString += `page_size=${perPage}`;\n\n  url += queryString;\n  const fetcher = useFetcher();\n  const response = useSWR<AwxItemsResponse<T>>(url, fetcher, swrOptions);\n  const { data, mutate } = response;\n  const refresh = useCallback(async () => {\n    await mutate().finally(() => {});\n  }, [mutate]);\n\n  useSWR<AwxItemsResponse<T>>(data?.next, fetcher, swrOptions);\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  let error: Error | undefined = response.error;\n  if (error instanceof RequestError) {\n    if (error.statusCode === 404 && view.page > 1) {\n      view.setPage(1);\n      error = undefined;\n    }\n  }\n\n  const selection = useSelected(data?.results ?? [], getItemKey, options.defaultSelection);\n\n  if (data?.count !== undefined) {\n    itemCountRef.current.itemCount = data?.count;\n  }\n\n  const selectItemsAndRefresh = useCallback(\n    (items: T[]) => {\n      selection.selectItems(items);\n      void refresh();\n    },\n    [refresh, selection]\n  );\n\n  const unselectItemsAndRefresh = useCallback(\n    (items: T[]) => {\n      selection.unselectItems(items);\n      void refresh();\n    },\n    [refresh, selection]\n  );\n\n  const [items, setItems] = useState<T[] | undefined>(undefined);\n  useEffect(() => {\n    setItems(data?.results);\n  }, [data?.results]);\n\n  const updateItem = useCallback(\n    (item: T) => {\n      if (!items) return;\n      const index = items?.findIndex((i) => i.id === item.id);\n      if (index !== -1) {\n        const newItems = [...items];\n        newItems[index] = item;\n        setItems(newItems);\n      }\n    },\n    [items]\n  );\n\n  return useMemo(() => {\n    return {\n      refresh,\n      itemCount: itemCountRef.current.itemCount,\n      pageItems: items,\n      error,\n      ...view,\n      ...selection,\n      selectItemsAndRefresh,\n      unselectItemsAndRefresh,\n      limitFiltersToOneOrOperation: true,\n      updateItem,\n    };\n  }, [\n    error,\n    items,\n    refresh,\n    selectItemsAndRefresh,\n    selection,\n    unselectItemsAndRefresh,\n    updateItem,\n    view,\n  ]);\n}\n","import { ExpandableRowContent } from '@patternfly/react-table';\nimport { useGet } from '../../../../common/crud/useGet';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { AwxRbacRole } from '../../../interfaces/AwxRbacRole';\nimport { AwxRolePermissions } from './AwxRolePermissions';\nimport { t } from 'i18next';\n\ninterface AwxRoleExpandedRowProps {\n  role: AwxRbacRole;\n}\n\nexport function AwxRoleExpandedRow(props: AwxRoleExpandedRowProps) {\n  const { role } = props;\n\n  const { data: roleDetails } = useGet<AwxRbacRole>(\n    awxAPI`/role_definitions/${role.id?.toString() ?? ''}/`\n  );\n\n  if (!roleDetails) {\n    return <ExpandableRowContent>{t('Loading...')}</ExpandableRowContent>;\n  }\n\n  return (\n    <ExpandableRowContent>\n      <AwxRolePermissions role={roleDetails} />\n    </ExpandableRowContent>\n  );\n}\n","import { Alert } from '@patternfly/react-core';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IToolbarFilter,\n  PageHeader,\n  PageLayout,\n  PageTable,\n  ToolbarFilterType,\n} from '../../../../framework';\nimport { useAwxView } from '../../common/useAwxView';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { useAwxRoleColumns } from './hooks/useAwxRoleColumns';\nimport { useAwxRoleToolbarActions } from './hooks/useAwxRoleToolbarActions';\nimport { useAwxRoleRowActions } from './hooks/useAwxRoleRowActions';\nimport { AwxRoleExpandedRow } from './components/AwxRoleExpandedRow';\nimport { AwxRbacRole } from '../../interfaces/AwxRbacRole';\n\nexport function AwxRoles() {\n  const { t } = useTranslation();\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Roles')}\n        titleHelpTitle={t('Roles')}\n        titleHelp={t(\n          'A role represents a set of actions that a team or user may perform on a resource or set of resources.'\n        )}\n        description={t(\n          'A role represents a set of actions that a team or user may perform on a resource or set of resources.'\n        )}\n      />\n      <Alert\n        variant=\"info\"\n        title={t('Roles can be assigned to teams and users from the teams and users pages.')}\n        isInline\n        className=\"border-bottom\"\n      />\n      <AwxRolesTable />;\n    </PageLayout>\n  );\n}\n\nexport function AwxRolesTable() {\n  const { t } = useTranslation();\n\n  const tableColumns = useAwxRoleColumns();\n\n  const toolbarFilters = useMemo(() => {\n    const filters: IToolbarFilter[] = [\n      {\n        key: 'name',\n        label: t('Name'),\n        type: ToolbarFilterType.MultiText,\n        query: 'name__icontains',\n        comparison: 'contains',\n      },\n      {\n        key: 'editable',\n        label: t('Editable'),\n        type: ToolbarFilterType.SingleSelect,\n        query: 'managed',\n        options: [\n          { label: t('Editable'), value: 'false' },\n          { label: t('Built-in'), value: 'true' },\n        ],\n        placeholder: t('Filter by editability'),\n      },\n    ];\n    return filters;\n  }, [t]);\n\n  const view = useAwxView<AwxRbacRole>({\n    url: awxAPI`/role_definitions/`,\n    toolbarFilters,\n    tableColumns,\n  });\n\n  const toolbarActions = useAwxRoleToolbarActions(view.unselectItemsAndRefresh);\n  const rowActions = useAwxRoleRowActions(view.unselectItemsAndRefresh);\n\n  return (\n    <PageTable<AwxRbacRole>\n      {...view}\n      tableColumns={tableColumns}\n      toolbarActions={toolbarActions}\n      rowActions={rowActions}\n      toolbarFilters={toolbarFilters}\n      expandedRow={(role) => <AwxRoleExpandedRow role={role} />}\n      errorStateTitle={t('Error loading roles')}\n      emptyStateTitle={t('No roles found')}\n      defaultSubtitle={t('Role')}\n    />\n  );\n}\n","import { PencilAltIcon, PlusCircleIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  useGetPageUrl,\n} from '../../../../../framework';\nimport { useDeleteAwxRoles } from './useDeleteAwxRoles';\nimport { AwxRbacRole } from '../../../interfaces/AwxRbacRole';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useAwxActiveUser } from '../../../common/useAwxActiveUser';\nimport { ButtonVariant } from '@patternfly/react-core';\n\nexport function useAwxRoleToolbarActions(onComplete: (roles: AwxRbacRole[]) => void) {\n  const { t } = useTranslation();\n  const { activeAwxUser } = useAwxActiveUser();\n  const getPageUrl = useGetPageUrl();\n  const deleteRoles = useDeleteAwxRoles(onComplete);\n\n  return useMemo<IPageAction<AwxRbacRole>[]>(\n    () => [\n      {\n        type: PageActionType.Link,\n        selection: PageActionSelection.None,\n        isPinned: true,\n        icon: PlusCircleIcon,\n        label: t('Create role'),\n        isDisabled: activeAwxUser?.is_superuser\n          ? undefined\n          : t(\n              'You do not have permission to create a role. Please contact your system administrator if there is an issue with your access.'\n            ),\n        href: `${getPageUrl(AwxRoute.CreateRole)}`,\n        variant: ButtonVariant.primary,\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: TrashIcon,\n        label: t('Delete roles'),\n        onClick: deleteRoles,\n        isDanger: true,\n      },\n    ],\n    [deleteRoles, getPageUrl, t, activeAwxUser?.is_superuser]\n  );\n}\n\nexport function useEdaRoleRowActions(onComplete: (roles: AwxRbacRole[]) => void) {\n  const { t } = useTranslation();\n  const { activeAwxUser } = useAwxActiveUser();\n  const deleteRoles = useDeleteAwxRoles(onComplete);\n  const getPageUrl = useGetPageUrl();\n\n  return useMemo<IPageAction<AwxRbacRole>[]>(\n    () => [\n      {\n        type: PageActionType.Link,\n        selection: PageActionSelection.Single,\n        icon: PencilAltIcon,\n        isPinned: true,\n        label: t('Edit role'),\n        isDisabled: (role) =>\n          role.managed\n            ? t('Built-in roles cannot be edited.')\n            : activeAwxUser?.is_superuser\n              ? undefined\n              : t(\n                  'You do not have permission to edit this role. Please contact your organization administrator if there is an issue with your access.'\n                ),\n        href: (role) => {\n          return getPageUrl(AwxRoute.EditRole, {\n            params: { id: role.id ?? '' },\n          });\n        },\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: TrashIcon,\n        label: t('Delete role'),\n        isDisabled: (role) =>\n          role.managed\n            ? t('Built-in roles cannot be deleted.')\n            : activeAwxUser?.is_superuser\n              ? undefined\n              : t(\n                  'You do not have permission to delete this role. Please contact your organization administrator if there is an issue with your access.'\n                ),\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        onClick: (role) => deleteRoles([role]),\n        isDanger: true,\n      },\n    ],\n    [deleteRoles, getPageUrl, t, activeAwxUser?.is_superuser]\n  );\n}\n","import { t } from 'i18next';\nimport {\n  Controller,\n  FieldPath,\n  FieldPathValue,\n  FieldValues,\n  Validate,\n  useFormContext,\n} from 'react-hook-form';\nimport { PageMultiSelect, PageMultiSelectProps } from '../../PageInputs/PageMultiSelect';\nimport { useID } from '../../hooks/useID';\nimport { useFrameworkTranslations } from '../../useFrameworkTranslations';\nimport { PageFormGroup, PageFormGroupProps } from './PageFormGroup';\nimport { useRequiredValidationRule } from './validation-hooks';\n\nexport type PageFormMultiSelectProps<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n  ValueT = FieldPathValue<TFieldValues, TFieldName>,\n> = {\n  name: TFieldName;\n  validate?:\n    | Validate<FieldPathValue<TFieldValues, TFieldName>, TFieldValues>\n    | Record<string, Validate<FieldPathValue<TFieldValues, TFieldName>, TFieldValues>>;\n  isReadOnly?: boolean;\n} & Pick<\n  PageMultiSelectProps<ValueT>,\n  'id' | 'placeholder' | 'options' | 'footer' | 'isDisabled' | 'disableSortOptions'\n> &\n  Pick<\n    PageFormGroupProps,\n    'label' | 'labelHelp' | 'labelHelpTitle' | 'additionalControls' | 'isRequired' | 'helperText'\n  >;\n\nexport function PageFormMultiSelect<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: PageFormMultiSelectProps<TFieldValues, TFieldName>) {\n  const id = useID(props);\n\n  const { control, formState } = useFormContext<TFieldValues>();\n  const { isSubmitting, isValidating } = formState;\n\n  const [translations] = useFrameworkTranslations();\n  const required = useRequiredValidationRule(props.label, props.isRequired);\n\n  return (\n    <Controller<TFieldValues, TFieldName>\n      name={props.name}\n      control={control}\n      shouldUnregister\n      render={({ field: { value, onChange }, fieldState: { error } }) => {\n        const helperTextInvalid = error?.message\n          ? props.validate && isValidating\n            ? translations.validating\n            : error?.message\n          : undefined;\n        let isDisabled = props.isDisabled;\n        if (!isDisabled && props.isReadOnly) {\n          isDisabled = t('Readonly');\n        }\n        if (isSubmitting) {\n          isDisabled = t('Submitting');\n        }\n        return (\n          <PageFormGroup\n            fieldId={id}\n            label={props.label}\n            labelHelpTitle={props.labelHelpTitle ?? props.label}\n            labelHelp={props.labelHelp}\n            helperText={props.helperText}\n            helperTextInvalid={helperTextInvalid}\n            isRequired={props.isRequired}\n            additionalControls={props.additionalControls}\n          >\n            <PageMultiSelect\n              id={id}\n              data-cy={id ?? name}\n              placeholder={props.placeholder}\n              options={props.options}\n              aria-describedby={id ? `${id}-form-group` : undefined}\n              values={value}\n              onSelect={(getNewValues) => onChange(getNewValues(value))}\n              isDisabled={isDisabled}\n              footer={props.footer}\n              disableSortOptions={props.disableSortOptions}\n            />\n          </PageFormGroup>\n        );\n      }}\n      rules={{ required, validate: props.validate }}\n    />\n  );\n}\n","import { ReactNode } from 'react';\nimport { useWatch } from 'react-hook-form';\n\n/**\n * A component that conditionally renders its children based on the value of a watched form field.\n *\n * This is used to dynamically drive the visibility of form fields.\n *\n * @template T The type of the watched form field.\n * @param {Object} props The component props.\n * @param {string} props.watch The name of the watched form field.\n * @param {(value: T) => boolean} props.hidden A function that determines whether to hide the children based on the watched form field value.\n * @param {ReactNode} props.children The children to render if not hidden.\n * @returns {JSX.Element} The rendered component.\n */\nexport function PageFormHidden<T>(props: {\n  watch: string;\n  hidden: (value: T) => boolean;\n  children: ReactNode;\n}) {\n  const value = useWatch({ name: props.watch }) as T;\n  const hidden = props.hidden(value);\n  if (hidden) return <></>;\n  return <>{props.children}</>;\n}\n","import { useCallback, useEffect } from 'react';\nimport { useSWRConfig } from 'swr';\n\nexport function useInvalidateCacheOnUnmount() {\n  const { cache } = useSWRConfig();\n  useEffect(() => () => (cache as unknown as { clear: () => void }).clear?.(), [cache]);\n}\n\n/**\n * Custom hook that provides functions to clear the SWR cache.\n * It returns two functions: one to clear all cache, and another to clear cache by a\n * specific key. `clearCacheByKey` is particularly useful for scenarios such as forms\n * when creating a new resource. By clearing the cache using the URL from the main table,\n * it helps to avoid flickering. This is essential especially if it's the first resource\n * being created, as SWR would otherwise provide no results.\n */\nexport function useClearCache() {\n  const { cache } = useSWRConfig();\n\n  const clearAllCache = useCallback(() => {\n    for (const key of cache.keys()) {\n      cache.delete(key);\n    }\n  }, [cache]);\n\n  const clearCacheByKey = useCallback(\n    (key: string) => {\n      for (const cacheKey of cache.keys()) {\n        if (\n          typeof cacheKey === 'string' &&\n          removeQueryString(cacheKey) === removeQueryString(key)\n        ) {\n          cache.delete(cacheKey);\n        }\n      }\n    },\n    [cache]\n  );\n\n  return { clearAllCache, clearCacheByKey };\n}\n\nfunction removeQueryString(url: string) {\n  if (url.includes('?')) {\n    return url.split('?')[0];\n  }\n  return url;\n}\n","import { useClearCache } from '../useInvalidateCache/useInvalidateCache';\nimport { createRequestError } from './RequestError';\nimport { requestCommon } from './requestCommon';\n\n/**\n * Hook for making PATCH API requests\n *\n * - Returns a function that takes a url and body and returns the response body\n * - Throws an RequestError if the response is not ok\n * - Supports aborting the request on unmount\n */\nexport function usePatchRequest<RequestBody, ResponseBody>() {\n  const { clearCacheByKey } = useClearCache();\n  return async (url: string, body: RequestBody, signal?: AbortSignal) => {\n    const response: Response = await requestCommon({\n      url,\n      method: 'PATCH',\n      body,\n      signal,\n    });\n    if (!response.ok) {\n      throw await createRequestError(response);\n    }\n    clearCacheByKey(url);\n    switch (response.status) {\n      case 204:\n        return null as ResponseBody;\n      default:\n        if (response.headers.get('content-type')?.includes('application/json')) {\n          return (await response.json()) as ResponseBody;\n        } else if (response.headers.get('content-type')?.includes('text/plain')) {\n          return (await response.text()) as unknown as ResponseBody;\n        } else {\n          return (await response.blob()) as unknown as ResponseBody;\n        }\n    }\n  };\n}\n","import { useClearCache } from '../useInvalidateCache/useInvalidateCache';\nimport { createRequestError } from './RequestError';\nimport { requestCommon } from './requestCommon';\n\n/**\n * Hook for making POST API requests\n *\n * - Returns a function that takes a url and body and returns the response body\n * - Throws an RequestError if the response is not ok\n * - Supports aborting the request on unmount\n */\nexport function usePostRequest<RequestBody, ResponseBody = RequestBody>() {\n  const { clearCacheByKey } = useClearCache();\n  return async (url: string, body: RequestBody, signal?: AbortSignal) => {\n    const response: Response = await requestCommon({\n      url,\n      method: 'POST',\n      body,\n      signal,\n    });\n    if (!response.ok) {\n      throw await createRequestError(response);\n    }\n    clearCacheByKey(url);\n    switch (response.status) {\n      case 204:\n        return null as ResponseBody;\n      default:\n        if (response.headers.get('content-type')?.includes('application/json')) {\n          return (await response.json()) as ResponseBody;\n        } else if (response.headers.get('content-type')?.includes('text/plain')) {\n          return (await response.text()) as unknown as ResponseBody;\n        } else {\n          return (await response.blob()) as unknown as ResponseBody;\n        }\n    }\n  };\n}\n","import { PageForm, PageFormProps } from '../../../framework';\nimport { awxErrorAdapter } from './adapters/awxErrorAdapter';\n\nexport function AwxPageForm<T extends object>(props: PageFormProps<T>) {\n  return <PageForm<T> {...props} errorAdapter={awxErrorAdapter} />;\n}\n","import { useWatch } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport {\n  PageFormSelect,\n  PageFormSubmitHandler,\n  PageFormTextInput,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { PageFormMultiSelect } from '../../../../framework/PageForm/Inputs/PageFormMultiSelect';\nimport { PageFormHidden } from '../../../../framework/PageForm/Utils/PageFormHidden';\nimport { useGet } from '../../../common/crud/useGet';\nimport { usePatchRequest } from '../../../common/crud/usePatchRequest';\nimport { usePostRequest } from '../../../common/crud/usePostRequest';\nimport { useInvalidateCacheOnUnmount } from '../../../common/useInvalidateCache/useInvalidateCache';\nimport { AwxPageForm } from '../../common/AwxPageForm';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { AwxRbacRole } from '../../interfaces/AwxRbacRole';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { AwxContentTypes, useAwxRoleMetadata } from './hooks/useAwxRoleMetadata';\n\nexport function CreateRole(props: { breadcrumbLabelForPreviousPage?: string }) {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const pageNavigate = usePageNavigate();\n\n  useInvalidateCacheOnUnmount();\n\n  const postRequest = usePostRequest<Partial<AwxRbacRole>, AwxRbacRole>();\n\n  const onSubmit: PageFormSubmitHandler<AwxRbacRole> = async (Role) => {\n    const newRole = await postRequest(awxAPI`/role_definitions/`, Role);\n    pageNavigate(AwxRoute.RoleDetails, { params: { id: newRole.id } });\n  };\n  const onCancel = () => navigate(-1);\n  const getPageUrl = useGetPageUrl();\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Create role')}\n        breadcrumbs={[\n          {\n            label: props.breadcrumbLabelForPreviousPage || t('Roles'),\n            to: getPageUrl(AwxRoute.Roles),\n          },\n          { label: t('Create role') },\n        ]}\n      />\n      <AwxPageForm<AwxRbacRole>\n        submitText={t('Create role')}\n        onSubmit={onSubmit}\n        cancelText={t('Cancel')}\n        onCancel={onCancel}\n      >\n        <AwxRoleInputs />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n\nexport function EditRole(props: { breadcrumbLabelForPreviousPage?: string }) {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const pageNavigate = usePageNavigate();\n  const params = useParams<{ id?: string }>();\n  const id = Number(params.id);\n  const { data: role } = useGet<AwxRbacRole>(awxAPI`/role_definitions/${id.toString()}/`);\n\n  useInvalidateCacheOnUnmount();\n\n  const patchRequest = usePatchRequest<Partial<AwxRbacRole>, AwxRbacRole>();\n\n  const onSubmit: PageFormSubmitHandler<AwxRbacRole> = async (data) => {\n    await patchRequest(awxAPI`/role_definitions/${id.toString()}/`, data);\n    pageNavigate(AwxRoute.RoleDetails, { params: { id } });\n  };\n  const onCancel = () => navigate(-1);\n  const getPageUrl = useGetPageUrl();\n\n  if (Number.isInteger(id)) {\n    if (!role) {\n      return (\n        <PageLayout>\n          <PageHeader\n            breadcrumbs={[\n              {\n                label: props.breadcrumbLabelForPreviousPage || t('Roles'),\n                to: getPageUrl(AwxRoute.Roles),\n              },\n              { label: t('Edit Role') },\n            ]}\n          />\n        </PageLayout>\n      );\n    } else {\n      return (\n        <PageLayout>\n          <PageHeader\n            title={role?.name ? t('Edit {{roleName}}', { roleName: role?.name }) : t('Roles')}\n            breadcrumbs={[\n              { label: t('Roles'), to: getPageUrl(AwxRoute.Roles) },\n              { label: role?.name ? t('Edit {{roleName}}', { roleName: role?.name }) : t('Roles') },\n            ]}\n          />\n          <AwxPageForm<AwxRbacRole>\n            submitText={t('Save role')}\n            onSubmit={onSubmit}\n            cancelText={t('Cancel')}\n            onCancel={onCancel}\n            defaultValue={role}\n          >\n            <AwxRoleInputs disableContentType />\n          </AwxPageForm>\n        </PageLayout>\n      );\n    }\n  }\n}\n\nfunction AwxRoleInputs(props: { disableContentType?: boolean }) {\n  const { t } = useTranslation();\n  const { disableContentType } = props;\n  const awxRoleMetadata = useAwxRoleMetadata();\n  const content_type = useWatch<AwxRbacRole>({ name: 'content_type' });\n  return (\n    <>\n      <PageFormTextInput<AwxRbacRole> name=\"name\" label={t('Name')} isRequired />\n      <PageFormTextInput<AwxRbacRole> name=\"description\" label={t('Description')} />\n      <PageFormSelect\n        name={'content_type'}\n        label={t('Content type')}\n        placeholderText={t('Select a content type')}\n        options={Object.entries(awxRoleMetadata.content_types)\n          .filter(([option]) => option !== 'shared.team')\n          .map(([key, value]) => ({\n            label: value?.displayName,\n            value: key,\n          }))}\n        isDisabled={disableContentType}\n        isRequired\n      />\n      <PageFormHidden watch=\"content_type\" hidden={(content_type: string) => !content_type}>\n        <PageFormMultiSelect\n          name=\"permissions\"\n          label={t('Permissions')}\n          options={Object.entries(\n            awxRoleMetadata.content_types[content_type as AwxContentTypes]?.permissions || {}\n          ).map(([key, value]) => ({\n            label: value,\n            value: key,\n          }))}\n          placeholder={t('Select permissions')}\n          isRequired\n        />\n      </PageFormHidden>\n    </>\n  );\n}\n","import { Button } from '@patternfly/react-core';\nimport { useGetPageUrl } from '../../../framework';\nimport { useNavigate } from 'react-router-dom';\nimport { AwxRoute } from '../main/AwxRoutes';\nimport { HistoryIcon } from '@patternfly/react-icons';\n\ninterface ActivityStreamIconProps {\n  type: string;\n}\nexport const ActivityStreamIcon: React.FC<ActivityStreamIconProps> = ({\n  type,\n}: {\n  type: string;\n}) => {\n  const getPageUrl = useGetPageUrl();\n  const history = useNavigate();\n  return (\n    <Button\n      variant=\"link\"\n      style={{\n        padding: 0,\n        marginTop: 1,\n        marginLeft: 8,\n        verticalAlign: 'top',\n      }}\n      onClick={() =>\n        history(\n          getPageUrl(AwxRoute.ActivityStream, {\n            query: {\n              type: type,\n            },\n          })\n        )\n      }\n    >\n      <HistoryIcon />\n    </Button>\n  );\n};\n","import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { createRequestError } from './RequestError';\nimport { normalizeQueryString } from './normalizeQueryString';\nimport { requestCommon } from './requestCommon';\n\nexport function useOptions<T>(\n  url: string | undefined,\n  query?: Record<string, string | number | boolean>\n) {\n  const getOptions = useOptionsRequest<T>();\n  url += normalizeQueryString(query);\n\n  const [data, setData] = useState<T | undefined>(undefined);\n  const [error, setError] = useState<Error | undefined>(undefined);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Options is using a straight request instead of SWR\n  // because otherwise SWR would cache the response and\n  // and GETS would get the cached response instead of the correct one\n  useEffect(() => {\n    if (!url) return;\n    void getOptions(url)\n      .then((data) => setData(data))\n      .catch((error) => setError(error instanceof Error ? error : new Error('Unknown error')))\n      .finally(() => setIsLoading(false));\n  }, [getOptions, url]);\n\n  return useMemo(() => ({ data, error, isLoading }), [data, error, isLoading]);\n}\n\n/**\n * Hook for making OPTIONS API requests\n *\n * - Returns a function that takes a url and body and returns the response body\n * - Throws an RequestError if the response is not ok\n * - Navigates to the login page if the response is a 401\n * - Supports aborting the request on unmount\n */\nfunction useOptionsRequest<ResponseBody>() {\n  const abortControllerRef = useRef<{ abortController?: AbortController }>({});\n  useEffect(() => {\n    const ref = abortControllerRef;\n    return () => ref.current.abortController?.abort();\n  }, []);\n  return useCallback(async (url: string, signal?: AbortSignal) => {\n    const response: Response = await requestCommon({\n      url,\n      method: 'OPTIONS',\n      signal,\n    });\n    if (!response.ok) {\n      // if (response.status === 401) {\n      //   navigate('/login?navigate-back=true');\n      // }\n      throw await createRequestError(response);\n    }\n    switch (response.status) {\n      case 204:\n        return null as ResponseBody;\n      default:\n        if (response.headers.get('content-type')?.includes('application/json')) {\n          return (await response.json()) as ResponseBody;\n        } else if (response.headers.get('content-type')?.includes('text/plain')) {\n          return (await response.text()) as unknown as ResponseBody;\n        } else {\n          return (await response.blob()) as unknown as ResponseBody;\n        }\n    }\n  }, []);\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useOptions } from '../../../common/crud/useOptions';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { AwxSettingsOptionsAction, AwxSettingsOptionsResponse } from './AwxSettingsForm';\n\nexport interface IAwxSettingsGroup {\n  id: string;\n  name?: string;\n  description?: string;\n  defaultSlugs?: string[];\n  categories: {\n    id: string;\n    name: string;\n    slugs: string[];\n  }[];\n}\n\nexport const awxSettingsExcludeKeys: string[] = [\n  'UI_NEXT',\n  'MAX_UI_JOB_EVENTS',\n  'UI_LIVE_UPDATES_ENABLED',\n  'BULK_JOB_MAX_LAUNCH',\n  'BULK_HOST_MAX_CREATE',\n  'BULK_HOST_MAX_DELETE',\n  'CUSTOM_LOGIN_INFO',\n  'CUSTOM_LOGO',\n];\n\nexport function useAwxSettingsGroupsBase() {\n  const { t } = useTranslation();\n  const groupsBase = useMemo(() => {\n    const awxGroups: IAwxSettingsGroup[] = [\n      {\n        id: 'system',\n        name: t('System Settings'),\n        description: t('System settings plus analytics.'),\n        defaultSlugs: ['system'],\n        categories: [],\n      },\n      {\n        id: 'jobs',\n        name: t('Job Settings'),\n        description: t('Job settings and limits.'),\n        defaultSlugs: ['jobs'],\n        categories: [],\n      },\n      {\n        id: 'logging',\n        name: t('Logging Settings'),\n        description: t('Controller logging settings.'),\n        defaultSlugs: ['logging'],\n        categories: [],\n      },\n      {\n        id: 'debug',\n        name: t('Troubleshooting Settings'),\n        description: t('Debugging and troubleshooting settings.'),\n        defaultSlugs: ['debug'],\n        categories: [],\n      },\n      {\n        id: 'authentication',\n        name: t('Authentication Providers'),\n        defaultSlugs: [\n          'authentication',\n          'azuread-oauth2',\n          'github',\n          'github-org',\n          'github-team',\n          'google-oauth2',\n          'github-enterprise',\n          'github-enterprise-org',\n          'github-enterprise-team',\n          'ldap',\n          'oidc',\n          'radius',\n          'saml',\n          'tacacsplus',\n        ],\n        categories: [],\n      },\n      {\n        id: 'other',\n        name: t('Other'),\n        categories: [],\n      },\n    ];\n    return awxGroups;\n  }, [t]);\n  return groupsBase;\n}\n\nexport function useAwxSettingsGroups() {\n  const groupsBase = useAwxSettingsGroupsBase();\n\n  const optionsResponse = useOptions<AwxSettingsOptionsResponse>(awxAPI`/settings/all/`);\n\n  const options = useMemo(() => {\n    if (!optionsResponse.data?.actions.PUT) return undefined;\n    if (!optionsResponse.data?.actions.GET) return undefined;\n\n    const { actions } = optionsResponse.data;\n    const getKeys = Object.keys(actions.GET);\n    const putKeys = Object.keys(actions.PUT);\n\n    // Settings marked as 'defined_in_file' are read-only in the API\n    // and won't be included in the OPTIONS PUT response,\n    // as they are defined in a deployment file and cannot be modified.\n    // These settings do appear in the GET response.\n    const awxSettingsDefinedInFile = getKeys.filter(\n      (x) => !putKeys.includes(x) && actions.GET[x].defined_in_file\n    );\n\n    return [...putKeys, ...awxSettingsDefinedInFile].reduce<\n      Record<string, AwxSettingsOptionsAction>\n    >((acc, key) => {\n      if (awxSettingsExcludeKeys.includes(key)) return acc;\n      const value = awxSettingsDefinedInFile.includes(key) ? actions.GET[key] : actions.PUT[key];\n      acc[key] = value;\n      return acc;\n    }, {});\n  }, [optionsResponse.data]);\n\n  const groups = useMemo(() => {\n    let groups: IAwxSettingsGroup[] = JSON.parse(JSON.stringify(groupsBase)) as IAwxSettingsGroup[];\n    if (optionsResponse.isLoading) return groupsBase;\n    if (optionsResponse.error) return groupsBase;\n    if (!options) return groupsBase;\n    for (const value of Object.values(options)) {\n      const categoryName = value.category;\n      const slug = value.category_slug;\n\n      let group = groups.find((group) => group.defaultSlugs?.includes(slug));\n      if (!group) {\n        group = groups.find((group) => group.name === 'Other');\n        if (!group) {\n          group = { id: 'other', name: 'Other', categories: [] };\n          groups.push(group);\n        }\n      }\n\n      let category = group.categories.find((category) => category.name === categoryName);\n      if (!category) {\n        category = {\n          id: categoryName.toLowerCase().replace(/ /g, '-'),\n          name: categoryName,\n          slugs: [],\n        };\n        group.categories.push(category);\n      }\n      category.slugs.push(slug);\n    }\n    groups = groups.filter((group) => group.categories.length > 0);\n    groups.forEach((group) =>\n      group.categories.sort((a, b) => {\n        const indexA = group.defaultSlugs?.indexOf(a.slugs[0]) ?? -1;\n        const indexB = group.defaultSlugs?.indexOf(b.slugs[0]) ?? -1;\n        return indexA - indexB;\n      })\n    );\n    return groups;\n  }, [groupsBase, options, optionsResponse.error, optionsResponse.isLoading]);\n\n  return useMemo(\n    () => ({\n      isLoading: optionsResponse.isLoading,\n      error: optionsResponse.error,\n      groups,\n      options: options,\n    }),\n    [groups, optionsResponse.error, optionsResponse.isLoading, options]\n  );\n}\n","import {\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  List,\n  ListItem,\n  PageSection,\n  Split,\n  Title,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageHeader,\n  PageLayout,\n  Scrollable,\n  useGetPageUrl,\n} from '../../../../framework';\nimport { ActivityStreamIcon } from '../../common/ActivityStreamIcon';\nimport { AwxError } from '../../common/AwxError';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { IAwxSettingsGroup, useAwxSettingsGroups } from './useAwxSettingsGroups';\n\nexport function AwxSettings() {\n  const { t } = useTranslation();\n  // const getPageUrl = useGetPageUrl();\n  const { isLoading, error, groups } = useAwxSettingsGroups();\n  if (error) return <AwxError error={error} />;\n  if (isLoading || !groups) return <LoadingPage />;\n\n  // const groupsWithoutAuthentication = groups.filter((group) => group.id !== 'authentication');\n  const authenticationGroup = groups.find((group) => group.id === 'authentication');\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Authentication Methods')}\n        headerActions={<ActivityStreamIcon type={'setting'} />}\n      />\n      <Scrollable>\n        <PageSection isWidthLimited>\n          <Split>\n            <GroupsCards groups={[authenticationGroup!]} />\n          </Split>\n        </PageSection>\n      </Scrollable>\n    </PageLayout>\n  );\n}\n\nfunction GroupsCards(props: { groups: IAwxSettingsGroup[] }) {\n  const getPageUrl = useGetPageUrl();\n  return (\n    <>\n      {props.groups.map((group) => (\n        <Card isRounded isFlat key={group.id}>\n          {group.name && (\n            <CardHeader>\n              <CardTitle>\n                {group.categories.length === 1 ? (\n                  <Title headingLevel=\"h3\">\n                    <Link\n                      to={getPageUrl(AwxRoute.SettingsCategory, {\n                        params: { category: group.categories[0].id },\n                      })}\n                    >\n                      {group.name}\n                    </Link>\n                  </Title>\n                ) : (\n                  <Title headingLevel=\"h3\">{group.name}</Title>\n                )}\n              </CardTitle>\n              {group.description && (\n                <p style={{ opacity: 0.7, fontSize: 'smaller', marginTop: 2 }}>\n                  {group.description}\n                </p>\n              )}\n            </CardHeader>\n          )}\n          {group.categories.length !== 1 && (\n            <CardBody>\n              <List isPlain>\n                {group.categories.map((category) => (\n                  <ListItem key={category.name}>\n                    <Link\n                      to={getPageUrl(AwxRoute.SettingsCategory, {\n                        params: { category: category.id },\n                      })}\n                    >\n                      {category.name}\n                    </Link>\n                  </ListItem>\n                ))}\n              </List>\n            </CardBody>\n          )}\n        </Card>\n      ))}\n    </>\n  );\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { PencilAltIcon } from '@patternfly/react-icons';\nimport { t } from 'i18next';\nimport jsyaml from 'js-yaml';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  IPageAction,\n  LoadingPage,\n  PageActionSelection,\n  PageActionType,\n  PageActions,\n  PageDetail,\n  PageDetails,\n  PageHeader,\n  PageLayout,\n} from '../../../../framework';\nimport { useGet } from '../../../common/crud/useGet';\nimport { AwxError } from '../../common/AwxError';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { AwxSettingsOptionsAction } from './AwxSettingsForm';\nimport { useAwxSettingsGroups, useAwxSettingsGroupsBase } from './useAwxSettingsGroups';\n\nexport function AwxSettingsCategoryDetailsPage(props: { categoryId: string }) {\n  const { isLoading, error, groups, options } = useAwxSettingsGroups();\n  const { categoryId } = props;\n  const group = groups.find((group) =>\n    group.categories.some((category) => category.id === categoryId)\n  );\n  const category = group?.categories.find((category) => category.id === categoryId);\n  const all = useGet<{ results: { url: string; slug: string; name: string }[] }>(\n    awxAPI`/settings/all/`\n  );\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n\n  const categoryOptions = useMemo(() => {\n    const categoryOptions: Record<string, AwxSettingsOptionsAction> = {};\n    if (category && options) {\n      for (const [key, value] of Object.entries(options)) {\n        if (category?.slugs.includes(value.category_slug)) {\n          categoryOptions[key] = value;\n        }\n      }\n    }\n    return categoryOptions;\n  }, [category, options]);\n\n  const groupsBase = useAwxSettingsGroupsBase();\n\n  const actions = useMemo<IPageAction<object>[]>(\n    () => [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.None,\n        variant: ButtonVariant.primary,\n        icon: PencilAltIcon,\n        label: t('Edit'),\n        onClick: () => navigate('./edit', { replace: true }),\n        isPinned: true,\n      },\n    ],\n    [navigate, t]\n  );\n\n  if (error) return <AwxError error={error} />;\n  if (isLoading || !group || !category) return <LoadingPage />;\n  if (all.error) return <AwxError error={all.error} />;\n  if (all.isLoading || !all.data) return <LoadingPage />;\n\n  const title = groupsBase.find((group) => group.id === categoryId)?.name;\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={title ?? category.name}\n        headerActions={<PageActions actions={actions} position={DropdownPosition.right} />}\n      />\n      <AwxSettingsCategoryDetails options={categoryOptions} data={all.data} />\n    </PageLayout>\n  );\n}\n\nexport function AwxSettingsCategoryDetails(props: {\n  options: Record<string, AwxSettingsOptionsAction>;\n  data: Record<string, unknown>;\n}) {\n  return (\n    <PageDetails>\n      {Object.entries(props.options).map(([key, option]) => (\n        <AwxSettingsCategoryDetail key={key} option={option} data={props.data} name={key} />\n      ))}\n    </PageDetails>\n  );\n}\n\nexport function AwxSettingsCategoryDetail(props: {\n  option: AwxSettingsOptionsAction;\n  name: string;\n  data: Record<string, unknown>;\n}) {\n  const option = props.option;\n  switch (option.type) {\n    case 'string':\n    case 'field':\n      return <PageDetail label={option.label}>{props.data[props.name] as string}</PageDetail>;\n    case 'integer':\n      return <PageDetail label={option.label}>{props.data[props.name] as number}</PageDetail>;\n\n    case 'boolean':\n      return (\n        <PageDetail label={option.label}>\n          {props.data[props.name] ? t('Enabled') : t('Disabled')}\n        </PageDetail>\n      );\n\n    case 'list':\n      if ((props.data[props.name] as string[]).length === 0) return null;\n      return (\n        <PageDetail label={option.label}>\n          {(props.data[props.name] as string[]).map((line, index) => {\n            return <div key={index}>{line}</div>;\n          })}\n        </PageDetail>\n      );\n\n    case 'nested object':\n      if (Object.keys(props.data[props.name] as object).length === 0) return null;\n      return (\n        <PageDetail label={option.label} fullWidth>\n          <pre>{jsyaml.dump(props.data[props.name])}</pre>\n        </PageDetail>\n      );\n\n    case 'certificate':\n      return (\n        <div style={{ color: 'red' }}>\n          <PageDetail label={option.label}>{option.type}</PageDetail>\n        </div>\n      );\n\n    case 'choice': {\n      const selected = option.choices.find((choice) => {\n        if (choice[0] === props.data[props.name]) return true;\n        if (!props.data[props.name] && choice[0] === '') return true;\n        return false;\n      });\n      return <PageDetail label={option.label}>{selected?.[1]}</PageDetail>;\n    }\n\n    case 'datetime':\n      if (!props.data[props.name]) return null;\n      return (\n        <PageDetail label={option.label}>\n          {new Date(props.data[props.name] as number).toLocaleDateString()} &nbsp;\n          {new Date(props.data[props.name] as number).toLocaleTimeString()}\n        </PageDetail>\n      );\n\n    default:\n      return <pre style={{ color: 'red' }}>{JSON.stringify(option, null, 2)}</pre>;\n  }\n}\n","import { FormSection, GridItem } from '@patternfly/react-core';\nimport { ReactNode, useMemo, useState } from 'react';\nimport { ExpandIcon } from '../../components/icons/ExpandIcon';\nimport { PageFormGrid } from '../PageForm';\n\n/**\n * Renders a form section with an optional title and children components.\n *\n * This can also be used around an input such as textarea or data editor to ensure the input is rendered in a single column.\n *\n * @param {Object} props - The component props.\n * @param {string} [props.title] - The title of the form section.\n * @param {ReactNode} props.children - The children components to render within the form section.\n * @param {boolean} [props.singleColumn] - Whether to render the children components in a single column.\n * @returns {JSX.Element} - The rendered form section component.\n */\nexport function PageFormSection(props: {\n  title?: string;\n  children: ReactNode;\n  singleColumn?: boolean;\n  isHorizontal?: boolean;\n  canCollapse?: boolean;\n  defaultCollapsed?: boolean;\n}) {\n  const [isCollapsed, setIsCollapsed] = useState(props.defaultCollapsed);\n\n  const sectionClassNames = useMemo(\n    () =>\n      props.isHorizontal\n        ? ['pf-m-12-col', 'pf-v5-c-form', 'pf-m-horizontal']\n        : ['pf-m-12-col', 'pf-v5-c-form'],\n    [props.isHorizontal]\n  );\n  const gridItemClassNames = useMemo(\n    () => (props.isHorizontal ? ['pf-v5-c-form', 'pf-m-horizontal'] : ['pf-v5-c-form']),\n    [props.isHorizontal]\n  );\n  if (!props.title) {\n    return (\n      <GridItem span={12} className={gridItemClassNames.join(' ')}>\n        <PageFormGrid singleColumn={props.singleColumn}>{props.children}</PageFormGrid>\n      </GridItem>\n    );\n  }\n  return (\n    <FormSection\n      title={\n        <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>\n          {props.canCollapse && (\n            <ExpandIcon\n              isExpanded={!isCollapsed}\n              setExpanded={() => setIsCollapsed(!isCollapsed)}\n              // direction=\"left\"\n              size=\"lg\"\n            />\n          )}\n          {props.title}\n        </div>\n      }\n      style={{ marginTop: 16 }}\n      className={sectionClassNames.join(' ')}\n    >\n      <PageFormGrid\n        singleColumn={props.singleColumn}\n        className={isCollapsed ? 'pf-v5-u-display-none' : undefined}\n      >\n        {props.children}\n      </PageFormGrid>\n    </FormSection>\n  );\n}\n","import { FileUpload, FileUploadProps } from '@patternfly/react-core';\nimport { ReactNode, useCallback, useState } from 'react';\nimport { Controller, FieldPathByValue, FieldValues, useFormContext } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { useID } from '../../hooks/useID';\nimport { PageFormGroup, PageFormGroupProps } from './PageFormGroup';\nimport { useRequiredValidationRule } from './validation-hooks';\n\nexport type PageFormFileUploadProps<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPathByValue<TFieldValues, File> = FieldPathByValue<TFieldValues, File>,\n> = {\n  name: TFieldName;\n  placeholder?: string;\n  validate?: (value: File) => string | undefined;\n  onInputChange?: (file: File) => Promise<void>;\n  additionalHelperText?: ReactNode;\n} & PageFormGroupProps &\n  Omit<FileUploadProps, 'id'>;\n\n/** PatternFly Select wrapper for use with react-hook-form */\nexport function PageFormFileUpload<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPathByValue<TFieldValues, File> = FieldPathByValue<TFieldValues, File>,\n>(props: PageFormFileUploadProps<TFieldValues, TFieldName>) {\n  const {\n    label,\n    labelHelpTitle,\n    labelHelp,\n    additionalControls,\n    helperText,\n    isRequired,\n    validate,\n    onInputChange,\n  } = props;\n  const { t } = useTranslation();\n  const {\n    control,\n    formState: { isSubmitting, isValidating },\n  } = useFormContext<TFieldValues>();\n  const [filename, setFilename] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [inputError, setInputError] = useState<Error | undefined>(undefined);\n\n  const handleFileInputChange = useCallback(\n    (_: unknown, file: File) => {\n      setFilename(file.name);\n      if (onInputChange) {\n        onInputChange(file).catch((error: Error) => {\n          setInputError(error);\n        });\n      }\n    },\n    [onInputChange]\n  );\n\n  const handleFileReadStarted = (_fileHandle: File) => {\n    setIsLoading(true);\n  };\n  const id = useID(props);\n  const required = useRequiredValidationRule(props.label, props.isRequired);\n\n  return (\n    <Controller\n      name={props.name}\n      control={control}\n      shouldUnregister\n      render={({ field: { onChange, value }, fieldState: { error } }) => {\n        const helperTextInvalid = error?.message\n          ? validate && isValidating\n            ? t('Validating...')\n            : error?.message\n          : inputError?.message\n            ? inputError.message\n            : undefined;\n        const handleClear = (_event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n          setFilename('');\n          onChange(undefined);\n          if (props.onClearClick) {\n            props.onClearClick(_event);\n          }\n        };\n        const handleFileReadFinished = (_fileHandle: File) => {\n          setIsLoading(false);\n          onChange(_fileHandle);\n        };\n        const handleTextOrDataChange = (value: string) => {\n          if (props.type === 'text') {\n            onChange(value);\n          }\n        };\n        return (\n          <PageFormGroup\n            fieldId={id}\n            label={label}\n            labelHelpTitle={labelHelpTitle ?? label}\n            labelHelp={labelHelp}\n            additionalControls={additionalControls}\n            helperText={helperText}\n            helperTextInvalid={helperTextInvalid}\n            isRequired={isRequired}\n          >\n            {props.icon && props.icon !== undefined ? (\n              <div style={{ display: 'grid', gridTemplateColumns: '10fr 1fr' }}>\n                <FileUpload\n                  dropzoneProps={props.dropzoneProps}\n                  id={id}\n                  data-cy={id}\n                  type={props.type || 'dataURL'}\n                  value={value as string}\n                  hideDefaultPreview={props.hideDefaultPreview}\n                  filename={isLoading ? t('loading...') : filename}\n                  filenamePlaceholder={props.placeholder}\n                  onFileInputChange={handleFileInputChange}\n                  onDataChange={(_event, value: string) => handleTextOrDataChange(value)}\n                  onTextChange={(_event, value: string) => handleTextOrDataChange(value)}\n                  onReadStarted={(_event, _fileHandle: File) => handleFileReadStarted(_fileHandle)}\n                  onReadFinished={(_event, _fileHandle: File) =>\n                    handleFileReadFinished(_fileHandle)\n                  }\n                  onClearClick={handleClear}\n                  // isLoading={isLoading}\n                  allowEditingUploadedText={props.allowEditingUploadedText || false}\n                  // browseButtonText={t('Upload')}\n                  isReadOnly={props.isReadOnly || isSubmitting}\n                  validated={error || inputError ? 'error' : undefined}\n                  isDisabled={props.isDisabled}\n                  isClearButtonDisabled={props.isClearButtonDisabled}\n                />\n                {props.icon}\n                {props.additionalHelperText ? props.additionalHelperText : null}\n              </div>\n            ) : (\n              <>\n                <FileUpload\n                  dropzoneProps={props.dropzoneProps}\n                  id={id}\n                  data-cy={id}\n                  type={props.type || 'dataURL'}\n                  value={value as string}\n                  hideDefaultPreview={props.hideDefaultPreview}\n                  filename={isLoading ? t('loading...') : filename}\n                  filenamePlaceholder={props.placeholder}\n                  onFileInputChange={handleFileInputChange}\n                  onDataChange={(_event, value: string) => handleTextOrDataChange(value)}\n                  onTextChange={(_event, value: string) => handleTextOrDataChange(value)}\n                  onReadStarted={(_event, _fileHandle: File) => handleFileReadStarted(_fileHandle)}\n                  onReadFinished={(_event, _fileHandle: File) =>\n                    handleFileReadFinished(_fileHandle)\n                  }\n                  onClearClick={handleClear}\n                  // isLoading={isLoading}\n                  allowEditingUploadedText={props.allowEditingUploadedText || false}\n                  // browseButtonText={t('Upload')}\n                  isReadOnly={props.isReadOnly || isSubmitting}\n                  validated={error ? 'error' : undefined}\n                />\n                {props.additionalHelperText ? props.additionalHelperText : null}\n              </>\n            )}\n          </PageFormGroup>\n        );\n      }}\n      rules={{ required, validate: props.validate }}\n    />\n  );\n}\n","import { useEffect, useRef } from 'react';\nimport { useClearCache } from '../useInvalidateCache/useInvalidateCache';\nimport { createRequestError } from './RequestError';\nimport { requestCommon } from './requestCommon';\n\n/**\n * Hook for making DELETE API requests\n *\n * - Returns a function that takes a url and body and returns the response body\n * - Throws an RequestError if the response is not ok\n * - Supports aborting the request on unmount\n */\nexport function useDeleteRequest<ResponseBody = unknown>() {\n  const { clearCacheByKey } = useClearCache();\n  const abortControllerRef = useRef<{ abortController?: AbortController }>({});\n  useEffect(() => {\n    const ref = abortControllerRef;\n    return () => ref.current.abortController?.abort();\n  }, []);\n  return async (url: string, signal?: AbortSignal) => {\n    const response: Response = await requestCommon({\n      url,\n      method: 'DELETE',\n      signal: signal,\n    });\n    if (!response.ok) {\n      throw await createRequestError(response);\n    }\n    clearCacheByKey(url);\n    switch (response.status) {\n      case 204:\n        return null as ResponseBody;\n      default:\n        if (response.headers.get('content-type')?.includes('application/json')) {\n          return (await response.json()) as ResponseBody;\n        } else if (response.headers.get('content-type')?.includes('text/plain')) {\n          return (await response.text()) as unknown as ResponseBody;\n        } else {\n          return (await response.blob()) as unknown as ResponseBody;\n        }\n    }\n  };\n}\n","import { useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\nimport { usePageAlertToaster, usePageDialogs } from '../../../../framework';\nimport { useDeleteRequest } from '../../../common/crud/useDeleteRequest';\nimport { awxErrorAdapter } from '../../common/adapters/awxErrorAdapter';\nimport { awxAPI } from '../../common/api/awx-utils';\n\nexport interface RevertAllModalProps {\n  categorySlugs: string[];\n  onComplete: () => void;\n}\n\nexport function useRevertAllSettingsModal() {\n  const { pushDialog, popDialog } = usePageDialogs();\n  const [props, setProps] = useState<RevertAllModalProps>();\n\n  useEffect(() => {\n    if (props) {\n      pushDialog(<RevertAllDialog {...{ ...props, popDialog: popDialog }} />);\n    } else {\n      popDialog();\n    }\n  }, [props, pushDialog, popDialog]);\n\n  return setProps;\n}\n\nexport function RevertAllDialog(\n  props: RevertAllModalProps & {\n    popDialog: () => void;\n  }\n) {\n  const { categorySlugs, onComplete, popDialog } = props;\n  const { t } = useTranslation();\n  const alertToaster = usePageAlertToaster();\n  const deleteRequest = useDeleteRequest();\n\n  const onRevertAll = useCallback(async () => {\n    try {\n      await Promise.all(\n        categorySlugs.map(async (category) => {\n          await deleteRequest(awxAPI`/settings/${category}/`);\n        })\n      ).then(() => {\n        onComplete();\n      });\n    } catch (error) {\n      const { genericErrors, fieldErrors } = awxErrorAdapter(error);\n      alertToaster.addAlert({\n        variant: 'danger',\n        title: t('Failed to revert settings'),\n        children: (\n          <>\n            {genericErrors?.map((err) => err.message)}\n            {fieldErrors?.map((err) => err.message)}\n          </>\n        ),\n      });\n    } finally {\n      popDialog();\n    }\n  }, [t, alertToaster, categorySlugs, deleteRequest, onComplete, popDialog]);\n\n  return (\n    <Modal\n      title={t('Revert settings')}\n      titleIconVariant=\"warning\"\n      data-cy=\"revert-settings-modal\"\n      aria-label={t('Revert settings confirmation dialog')}\n      variant={ModalVariant.small}\n      isOpen\n      onClose={() => popDialog()}\n      actions={[\n        <Button\n          data-cy=\"delete-group-modal-delete-button\"\n          ouiaId=\"delete-group-modal-delete-button\"\n          key=\"delete\"\n          variant=\"danger\"\n          onClick={() => void onRevertAll()}\n          aria-label={t`Confirm revert all`}\n        >\n          {t('Revert all')}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={() => popDialog()}>\n          {t('Cancel')}\n        </Button>,\n      ]}\n    >\n      {t(\n        `This will revert all configuration values on this page to their factory defaults. Are you sure you want to proceed?`\n      )}\n    </Modal>\n  );\n}\n","import { Button, FormGroup } from '@patternfly/react-core';\nimport { t } from 'i18next';\nimport { useCallback, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  PageFormCheckbox,\n  PageFormDataEditor,\n  PageFormSelect,\n  PageFormTextInput,\n} from '../../../../framework';\nimport { PageFormSection } from '../../../../framework/PageForm/Utils/PageFormSection';\nimport { usePatchRequest } from '../../../common/crud/usePatchRequest';\nimport { AwxPageForm } from '../../common/AwxPageForm';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { PageFormFileUpload } from '../../../../framework/PageForm/Inputs/PageFormFileUpload';\nimport { useRevertAllSettingsModal } from './useRevertAllSettingsModal';\n\nexport interface AwxSettingsOptionsResponse {\n  actions: {\n    GET: Record<string, AwxSettingsOptionsAction>;\n    PUT: Record<string, AwxSettingsOptionsAction>;\n  };\n}\n\nexport type AwxSettingsOptionsAction =\n  | IOptionStringAction\n  | IOptionChoiceAction\n  | IOptionIntegerAction\n  | IOptionBooleanAction\n  | IOptionListAction\n  | IOptionObjectAction\n  | IOptionCertificateAction\n  | IOptionDateTimeAction\n  | IOptionFieldAction;\n\ninterface IOptionActionBase {\n  label: string;\n  category: string;\n  category_slug: string;\n  required?: boolean;\n  help_text?: string;\n  hidden?: boolean;\n  defined_in_file?: boolean;\n}\n\ninterface IOptionStringAction extends IOptionActionBase {\n  type: 'string';\n  default?: string;\n}\n\ninterface IOptionFieldAction extends IOptionActionBase {\n  type: 'field';\n  default?: string;\n}\n\ninterface IOptionIntegerAction extends IOptionActionBase {\n  type: 'integer';\n  default?: number;\n  min_value?: number;\n  max_value?: number;\n  unit?: string;\n}\n\ninterface IOptionBooleanAction extends IOptionActionBase {\n  type: 'boolean';\n  default?: boolean;\n}\n\ninterface IOptionListAction extends IOptionActionBase {\n  type: 'list';\n  default?: string;\n}\n\ninterface IOptionObjectAction extends IOptionActionBase {\n  type: 'nested object';\n  default?: string;\n}\n\ninterface IOptionCertificateAction extends IOptionActionBase {\n  type: 'certificate';\n  default?: string;\n}\n\ninterface IOptionChoiceAction extends IOptionActionBase {\n  type: 'choice';\n  default: string;\n  choices: [value: string, display_name: string][];\n}\n\ninterface IOptionDateTimeAction extends IOptionActionBase {\n  type: 'datetime';\n  default?: string;\n}\n\nexport function AwxSettingsForm(props: {\n  options: Record<string, AwxSettingsOptionsAction>;\n  data: object;\n}) {\n  const navigate = useNavigate();\n  const patch = usePatchRequest();\n  const openRevertAllSettingsModal = useRevertAllSettingsModal();\n  const onSubmit = useCallback(\n    async (data: object) => {\n      // Only send the data that is in the options\n      const patchData: Record<string, unknown> = {};\n      for (const [key, value] of Object.entries(data)) {\n        if (Object.keys(props.options).includes(key)) {\n          patchData[key] = value;\n        }\n      }\n      await patch(awxAPI`/settings/all/`, patchData);\n      navigate('..');\n    },\n    [navigate, patch, props.options]\n  );\n\n  // This is used for AWX LDAP settings which need groups\n  const { options, groups } = useMemo(() => {\n    const options: Record<string, AwxSettingsOptionsAction> = {};\n    const groups: { groupName: string; options: Record<string, AwxSettingsOptionsAction> }[] = [];\n    for (const [key, option] of Object.entries(props.options)) {\n      if (\n        key.startsWith('AUTH_LDAP_1') ||\n        key.startsWith('AUTH_LDAP_2') ||\n        key.startsWith('AUTH_LDAP_3') ||\n        key.startsWith('AUTH_LDAP_4') ||\n        key.startsWith('AUTH_LDAP_5')\n      ) {\n        const groupName = key.substring(5, 11).replace(/_/g, ' ');\n        let group = groups.find((group) => group.groupName === groupName);\n        if (!group) {\n          group = { groupName, options: {} };\n          groups.push(group);\n        }\n        group.options[key] = option;\n      } else if (key.startsWith('AUTH_LDAP')) {\n        const groupName = key.substring(5, 9).replace(/_/g, ' ');\n        let group = groups.find((group) => group.groupName === groupName);\n        if (!group) {\n          group = { groupName, options: {} };\n          groups.push(group);\n        }\n        group.options[key] = option;\n      } else {\n        options[key] = option;\n      }\n    }\n    return { options, groups };\n  }, [props.options]);\n\n  const booleanOptions = Object.entries(options)\n    .filter(([, option]) => option.type === 'boolean')\n    .reduce<Record<string, AwxSettingsOptionsAction>>((acc, [key, option]) => {\n      acc[key] = option;\n      return acc;\n    }, {});\n\n  const otherOptions = Object.entries(options)\n    .filter(([, option]) => option.type !== 'boolean')\n    .reduce<Record<string, AwxSettingsOptionsAction>>((acc, [key, option]) => {\n      acc[key] = option;\n      return acc;\n    }, {});\n\n  function getCategorySlugs(config: Record<string, AwxSettingsOptionsAction>): string[] {\n    const slugs = new Set<string>();\n\n    Object.values(config).forEach((item) => {\n      const slug = item?.category_slug;\n      if (slug) {\n        slugs.add(slug);\n      }\n    });\n\n    return Array.from(slugs);\n  }\n\n  return (\n    <AwxPageForm\n      defaultValue={props.data}\n      submitText={t('Save')}\n      onCancel={() => navigate('..')}\n      onSubmit={onSubmit}\n      additionalActions={\n        <Button\n          variant=\"secondary\"\n          onClick={(e) => {\n            e.preventDefault();\n            openRevertAllSettingsModal({\n              categorySlugs: getCategorySlugs(options),\n              onComplete: () => navigate('..'),\n            });\n          }}\n        >\n          {t('Revert all to default')}\n        </Button>\n      }\n    >\n      {Object.entries(otherOptions).map(([key, option]) => {\n        return <OptionActionsFormInput key={key} name={key} option={option} />;\n      })}\n      {Object.keys(booleanOptions).length > 0 && (\n        <FormGroup label={t('Options')} isStack role=\"group\">\n          {Object.entries(booleanOptions).map(([key, option]) => {\n            return <OptionActionsFormInput key={key} name={key} option={option} />;\n          })}\n        </FormGroup>\n      )}\n\n      {groups.map((group) => {\n        return (\n          <PageFormSection\n            key={group.groupName}\n            title={group.groupName}\n            canCollapse\n            defaultCollapsed={group.groupName !== 'LDAP'}\n          >\n            {Object.entries(group.options).map(([key, option]) => {\n              return <OptionActionsFormInput key={key} name={key} option={option} />;\n            })}\n          </PageFormSection>\n        );\n      })}\n    </AwxPageForm>\n  );\n}\n\nexport function OptionActionsFormInput(props: { name: string; option: AwxSettingsOptionsAction }) {\n  const option = props.option;\n  const isReadOnly = props.option.defined_in_file;\n\n  if (props.name.endsWith('SECRET') || props.name.endsWith('PASSWORD')) {\n    return (\n      <PageFormTextInput\n        label={option.label}\n        name={props.name}\n        labelHelpTitle={option.label}\n        labelHelp={option.help_text}\n        isRequired={option.required}\n        type=\"password\"\n      />\n    );\n  }\n\n  if (\n    props.name.includes('SOCIAL_AUTH_SAML_SP_PUBLIC_CERT') ||\n    props.name.includes('SOCIAL_AUTH_SAML_SP_PRIVATE_KEY')\n  ) {\n    return (\n      <PageFormSection singleColumn>\n        <PageFormFileUpload\n          label={option.label}\n          name={props.name}\n          type=\"text\"\n          labelHelpTitle={option.label}\n          labelHelp={option.help_text}\n          isRequired={option.required}\n          allowEditingUploadedText={true}\n          isReadOnly={false}\n        />\n      </PageFormSection>\n    );\n  }\n\n  switch (option.type) {\n    case 'string':\n    case 'field':\n      return (\n        <PageFormTextInput\n          label={option.label}\n          name={props.name}\n          labelHelpTitle={option.label}\n          labelHelp={option.help_text}\n          isRequired={option.required}\n          defaultValue={option.default}\n          enableUndo\n          enableReset\n        />\n      );\n    case 'integer':\n      return (\n        <PageFormTextInput\n          label={option.label}\n          name={props.name}\n          labelHelpTitle={option.label}\n          labelHelp={option.help_text}\n          type=\"number\"\n          isRequired={option.required}\n          min={option.min_value}\n          max={option.max_value}\n          defaultValue={option.default}\n          enableUndo\n          enableReset\n        />\n      );\n    case 'boolean':\n      return (\n        <PageFormSection singleColumn>\n          <PageFormCheckbox\n            label={option.label}\n            name={props.name}\n            labelHelpTitle={option.label}\n            labelHelp={option.help_text}\n            defaultValue={option.default}\n            enableReset\n          />\n        </PageFormSection>\n      );\n    case 'list':\n      return (\n        <PageFormSection singleColumn>\n          <PageFormDataEditor\n            label={option.label}\n            name={props.name}\n            labelHelpTitle={option.label}\n            labelHelp={option.help_text}\n            format=\"object\"\n            isRequired={option.required}\n            isArray\n            defaultValue={option.default}\n            enableUndo={!isReadOnly}\n            enableReset={!isReadOnly}\n            isReadOnly={isReadOnly}\n          />\n        </PageFormSection>\n      );\n    case 'nested object':\n      return (\n        <PageFormSection singleColumn>\n          <PageFormDataEditor\n            label={option.label}\n            name={props.name}\n            labelHelpTitle={option.label}\n            labelHelp={option.help_text}\n            format=\"object\"\n            isRequired={option.required}\n            defaultValue={option.default}\n            enableUndo\n            enableReset\n          />\n        </PageFormSection>\n      );\n    case 'certificate':\n      return (\n        <PageFormSection singleColumn>\n          <PageFormDataEditor\n            label={option.label}\n            name={props.name}\n            labelHelpTitle={option.label}\n            labelHelp={option.help_text}\n            format=\"object\"\n            isRequired={option.required}\n            defaultValue={option.default}\n            enableUndo\n            enableReset\n          />\n        </PageFormSection>\n      );\n    case 'choice':\n      return (\n        <PageFormSelect\n          label={option.label}\n          name={props.name}\n          labelHelpTitle={option.label}\n          labelHelp={option.help_text}\n          options={option.choices.map((choice) => ({ value: choice[0], label: choice[1] }))}\n          isRequired={option.required}\n          defaultValue={option.default}\n          enableUndo\n          enableReset\n        />\n      );\n    case 'datetime':\n      return (\n        <PageFormTextInput\n          label={option.label}\n          name={props.name}\n          labelHelpTitle={option.label}\n          labelHelp={option.help_text}\n          type=\"datetime-local\"\n          isRequired={option.required}\n          defaultValue={option.default}\n          enableUndo\n          enableReset\n        />\n      );\n\n    default:\n      return <pre style={{ color: 'red' }}>{JSON.stringify(option, null, 2)}</pre>;\n  }\n}\n","import { useMemo } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { LoadingPage, PageHeader, PageLayout } from '../../../../framework';\nimport { useGet } from '../../../common/crud/useGet';\nimport { AwxError } from '../../common/AwxError';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { AwxSettingsForm, AwxSettingsOptionsAction } from './AwxSettingsForm';\nimport {\n  awxSettingsExcludeKeys,\n  useAwxSettingsGroups,\n  useAwxSettingsGroupsBase,\n} from './useAwxSettingsGroups';\n\nexport function AwxSettingsCategoryFormRoute() {\n  const { category: categoryId } = useParams<{ category: string }>();\n  return <AwxSettingsCategoryForm categoryId={categoryId ?? ''} />;\n}\n\nexport function AwxSettingsCategoryForm(props: { categoryId: string }) {\n  const { isLoading, error, groups, options } = useAwxSettingsGroups();\n  const { categoryId } = props;\n  const group = groups.find((group) =>\n    group.categories.some((category) => category.id === categoryId)\n  );\n  const category = group?.categories.find((category) => category.id === categoryId);\n  const all = useGet<{ results: { url: string; slug: string; name: string }[] }>(\n    awxAPI`/settings/all/`\n  );\n\n  const categoryOptions = useMemo(() => {\n    const categoryOptions: Record<string, AwxSettingsOptionsAction> = {};\n    if (category && options) {\n      for (const [key, value] of Object.entries(options)) {\n        if (awxSettingsExcludeKeys.includes(key)) continue;\n        if (category?.slugs.includes(value.category_slug)) {\n          categoryOptions[key] = value;\n        }\n      }\n    }\n    return categoryOptions;\n  }, [category, options]);\n\n  const groupsBase = useAwxSettingsGroupsBase();\n\n  if (error) return <AwxError error={error} />;\n  if (isLoading || !group || !category) return <LoadingPage />;\n  if (all.error) return <AwxError error={all.error} />;\n  if (all.isLoading || !all.data) return <LoadingPage />;\n\n  const title = groupsBase.find((group) => group.id === categoryId)?.name;\n\n  return (\n    <PageLayout>\n      <PageHeader title={title ?? category.name} />\n      <AwxSettingsForm options={categoryOptions} data={all.data} />\n    </PageLayout>\n  );\n}\n","import {\n  BuilderImageIcon,\n  CheckCircleIcon,\n  ClockIcon,\n  CubeIcon,\n  DataProcessorIcon,\n  DatabaseIcon,\n  ExclamationCircleIcon,\n  MinusCircleIcon,\n  PlusCircleIcon,\n  QuestionCircleIcon,\n} from '@patternfly/react-icons';\nimport {\n  DEFAULT_DECORATOR_RADIUS,\n  Decorator,\n  DefaultNode,\n  TopologyQuadrant,\n  WithSelectionProps,\n  getDefaultShapeDecoratorCenter,\n} from '@patternfly/react-topology';\nimport { useMemo } from 'react';\nimport { pfDanger, pfDisabled, pfInfo, pfSuccess } from '../../../../../framework';\nimport { CustomNodeProps } from '../types';\n\nfunction getStatusIcon(nodeType: string) {\n  switch (nodeType) {\n    case 'ready':\n      return <CheckCircleIcon style={{ fill: pfSuccess }} />;\n    case 'installed':\n      return <ClockIcon style={{ fill: pfInfo }} />;\n    case 'provisioning':\n      return <PlusCircleIcon style={{ fill: pfDisabled }} />;\n    case 'deprovisioning':\n      return <MinusCircleIcon style={{ fill: pfDisabled }} />;\n    case 'unavailable':\n    case 'deprovision-fail':\n    case 'provision-fail':\n      return <ExclamationCircleIcon style={{ fill: pfDanger }} />;\n    default:\n      return <QuestionCircleIcon style={{ fill: pfDisabled }} />;\n  }\n}\n\nexport function getNodeIcon(nodeType: string) {\n  switch (nodeType) {\n    case 'hybrid':\n      return BuilderImageIcon;\n    case 'execution':\n      return CubeIcon;\n    case 'control':\n      return DatabaseIcon;\n    case 'hop':\n      return DataProcessorIcon;\n    default:\n      return DatabaseIcon;\n  }\n}\n\nexport const MeshNode: React.FC<CustomNodeProps & WithSelectionProps> = ({\n  element,\n  onSelect,\n  selected,\n}: CustomNodeProps) => {\n  const data = element.getData();\n  const Icon = data && getNodeIcon(data.nodeType);\n\n  const statusDecorator = useMemo(() => {\n    const icon = data && getStatusIcon(data.nodeStatus);\n    if (!icon) {\n      return null;\n    }\n    const { x, y } = getDefaultShapeDecoratorCenter(TopologyQuadrant.upperLeft, element);\n\n    const decorator = (\n      <Decorator\n        x={x}\n        y={y}\n        radius={DEFAULT_DECORATOR_RADIUS}\n        showBackground\n        onClick={onSelect}\n        icon={<g>{icon}</g>}\n        ariaLabel={data?.nodeStatus}\n      />\n    );\n\n    return decorator;\n  }, [data, element, onSelect]);\n\n  return (\n    <DefaultNode\n      element={element}\n      onSelect={onSelect}\n      selected={selected}\n      onStatusDecoratorClick={onSelect}\n      truncateLength={20}\n    >\n      <g transform={`translate(13, 13)`}>\n        {Icon && <Icon style={{ color: '#393F44' }} width={25} height={25} />}\n      </g>\n      {statusDecorator}\n    </DefaultNode>\n  );\n};\n","import {\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Panel as PFPanel,\n  PanelMain,\n  PanelMainBody,\n} from '@patternfly/react-core';\nimport {\n  AddCircleOIcon,\n  CheckCircleIcon,\n  ClockIcon,\n  ExclamationCircleIcon,\n  MinusCircleIcon,\n} from '@patternfly/react-icons';\nimport { ReactElement } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\nimport { pfDanger, pfDisabled, pfInfo, pfSuccess } from '../../../../framework';\nimport { getNodeIcon } from './components/MeshNode';\n\nconst Panel = styled(PFPanel)`\n  position: absolute;\n  background: --pf-v5-global--BackgroundColor--100;\n  width: 240px;\n  min-height: 300px;\n  position: absolute;\n  left: 255px;\n  bottom: 60px;\n  border-radius: var(--pf-v5-global--BorderRadius--sm);\n  box-shadow: var(--pf-v5-global--BoxShadow--sm);\n`;\n\nexport const Legend = () => {\n  const { t } = useTranslation();\n  const ControlNodeIcon = getNodeIcon('control');\n  const ExecutionNodeIcon = getNodeIcon('execution');\n  const HybridNodeIcon = getNodeIcon('hybrid');\n  const HopNodeIcon = getNodeIcon('hop');\n\n  const LegendDescription = (props: { label: string; icon: ReactElement }) => {\n    const { label, icon } = props;\n    return (\n      <div>\n        <span style={{ marginRight: '10px' }}>{icon}</span>\n        <span>{label}</span>\n      </div>\n    );\n  };\n\n  return (\n    <Panel data-cy=\"mesh-viz-legend\">\n      <PanelMain tabIndex={0}>\n        <PanelMainBody>\n          <DescriptionList>\n            <DescriptionListGroup>\n              <DescriptionListTerm>{t('Node types')}</DescriptionListTerm>\n              <DescriptionListDescription>\n                <LegendDescription label={t('Control')} icon={<ControlNodeIcon />} />\n              </DescriptionListDescription>\n              <DescriptionListDescription>\n                <LegendDescription label={t('Execution')} icon={<ExecutionNodeIcon />} />\n              </DescriptionListDescription>\n              <DescriptionListDescription>\n                <LegendDescription label={t('Hybrid')} icon={<HybridNodeIcon />} />\n              </DescriptionListDescription>\n              <DescriptionListDescription>\n                <LegendDescription label={t('Hop')} icon={<HopNodeIcon />} />\n              </DescriptionListDescription>\n            </DescriptionListGroup>\n            <DescriptionListGroup>\n              <DescriptionListTerm>{t('Node status')}</DescriptionListTerm>\n              <DescriptionListDescription>\n                <LegendDescription\n                  label={t('Ready')}\n                  icon={<CheckCircleIcon color={pfSuccess} />}\n                />\n              </DescriptionListDescription>\n              <DescriptionListDescription>\n                <LegendDescription\n                  label={t('Provisioning')}\n                  icon={<AddCircleOIcon color={pfDisabled} />}\n                />\n              </DescriptionListDescription>\n              <DescriptionListDescription>\n                <LegendDescription\n                  label={t('Deprovisioning')}\n                  icon={<MinusCircleIcon color={pfDisabled} />}\n                />\n              </DescriptionListDescription>\n              <DescriptionListDescription>\n                <LegendDescription label={t('Installed')} icon={<ClockIcon color={pfInfo} />} />\n              </DescriptionListDescription>\n              <DescriptionListDescription>\n                <LegendDescription\n                  label={t('Error')}\n                  icon={<ExclamationCircleIcon color={pfDanger} />}\n                />\n              </DescriptionListDescription>\n            </DescriptionListGroup>\n            <DescriptionListGroup>\n              <DescriptionListTerm>{t('Link status')}</DescriptionListTerm>\n              <DescriptionListDescription>\n                <LegendDescription\n                  label={t('Established')}\n                  icon={\n                    <svg width=\"20\" height=\"15\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <line x1=\"0\" y1=\"9\" x2=\"20\" y2=\"9\" stroke={pfDisabled} strokeWidth=\"4\" />\n                    </svg>\n                  }\n                />\n              </DescriptionListDescription>\n              <DescriptionListDescription>\n                <LegendDescription\n                  label={t('Adding')}\n                  icon={\n                    <svg width=\"20\" height=\"15\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <line\n                        x1=\"0\"\n                        y1=\"9\"\n                        x2=\"20\"\n                        y2=\"9\"\n                        stroke={pfSuccess}\n                        strokeWidth=\"4\"\n                        strokeDasharray=\"6\"\n                      />\n                    </svg>\n                  }\n                />\n              </DescriptionListDescription>\n              <DescriptionListDescription>\n                <LegendDescription\n                  label={t('Removing')}\n                  icon={\n                    <svg width=\"20\" height=\"15\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <line\n                        x1=\"0\"\n                        y1=\"9\"\n                        x2=\"20\"\n                        y2=\"9\"\n                        stroke={pfDanger}\n                        strokeWidth=\"4\"\n                        strokeDasharray=\"6\"\n                      />\n                    </svg>\n                  }\n                />\n              </DescriptionListDescription>\n            </DescriptionListGroup>\n          </DescriptionList>\n        </PanelMainBody>\n      </PanelMain>\n    </Panel>\n  );\n};\n","import {\n  EmptyState as PFEmptyState,\n  Progress,\n  ProgressMeasureLocation,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport styled from 'styled-components';\n\nimport { TopologyIcon as PFTopologyIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\n\nconst EmptyState = styled(PFEmptyState)`\n  --pf-c-empty-state--m-lg--MaxWidth: none;\n  min-height: 250px;\n`;\n\nconst TopologyIcon = styled(PFTopologyIcon)`\n  font-size: 3em;\n  fill: #6a6e73;\n`;\n\nexport const Loader = ({ className, progress }: { className: string; progress: number }) => {\n  const { t } = useTranslation();\n\n  return (\n    <EmptyState variant=\"full\" className={className} data-cy={className}>\n      <TopologyIcon />\n      <Progress\n        value={progress}\n        measureLocation={ProgressMeasureLocation.inside}\n        aria-label={t`content-loading-in-progress`}\n        style={{ margin: '20px' }}\n      />\n      <TextContent style={{ margin: '20px' }}>\n        <Text component={TextVariants.small} style={{ fontWeight: 'bold', color: 'black' }}>\n          {t`Please wait until the topology view is populated...`}\n        </Text>\n      </TextContent>\n    </EmptyState>\n  );\n};\n","import { ReactNode } from 'react';\nimport styled from 'styled-components';\n\nconst Span = styled.span`\n  text-decoration: underline dotted;\n`;\n\nexport function Dotted(props: { children: ReactNode }) {\n  return <Span>{props.children}</Span>;\n}\n","import { t } from 'i18next';\nimport { DateTimeCell, PageDetail } from '../../framework/';\n\nexport function LastModifiedPageDetail(props: {\n  value: string | number | undefined | null;\n  author?: string;\n  onClick?: () => void;\n}) {\n  return (\n    <PageDetail label={t('Last modified')}>\n      <DateTimeCell value={props.value} author={props?.author} onClick={props?.onClick} />\n    </PageDetail>\n  );\n}\n","import { Label } from '@patternfly/react-core';\nimport {\n  BanIcon,\n  CheckCircleIcon,\n  ClockIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  HourglassStartIcon,\n  InfoCircleIcon,\n  MinusCircleIcon,\n  StopCircleIcon,\n} from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\nimport { RunningIcon, TextCell } from '../../framework';\n\nexport function StatusCell(props: {\n  status?: string;\n  disableLinks?: boolean;\n  to?: string;\n  hideLabel?: boolean;\n}) {\n  const { t } = useTranslation();\n  const status = props.status;\n\n  const label = useLabel(status, t);\n  const color = getColor(status);\n  const Icon = getIcon(status);\n\n  return (\n    <TextCell\n      text={props.hideLabel ? '' : label}\n      color={color}\n      icon={Icon ? <Icon /> : null}\n      to={props.to}\n      disableLinks={props.disableLinks}\n    />\n  );\n}\n\nexport function StatusLabel(props: { status?: string; dataCy?: string }) {\n  const { t } = useTranslation();\n  const status = props.status || 'default';\n  const dataCy = props.dataCy || '';\n\n  const label = useLabel(status, t);\n  const color = getColor(status);\n  const Icon = getIcon(status);\n\n  return (\n    <Label data-cy={dataCy} variant=\"outline\" color={color} icon={Icon ? <Icon /> : null}>\n      {label}\n    </Label>\n  );\n}\n\nfunction useLabel(status: string | undefined, t: (str: string) => string) {\n  if (status === undefined) return t('Unknown');\n  const labels: { [key: string]: string } = {\n    approved: t('Approved'),\n    completed: t('Completed'),\n    canceled: t('Canceled'),\n    changed: t('Changed'),\n    deleting: t('Deleting'),\n    denied: t('Denied'),\n    'deprovision-fail': t('Deprovisioning fail'),\n    deprovisioning: t('Deprovisioning'),\n    disabled: t('Disabled'),\n    error: t('Error'),\n    failed: t('Failed'),\n    healthy: t('Healthy'),\n    installed: t('Installed'),\n    new: t('New'),\n    'never-updated': t('Never updated'),\n    ok: t('OK'),\n    'provion-fail': t('Provisioning fail'),\n    pending: t('Pending'),\n    provisioning: t('Provisioning'),\n    ready: t('Ready'),\n    running: t('Running'),\n    skipped: t('Skipped'),\n    starting: t('Starting'),\n    stopping: t('Stopping'),\n    stopped: t('Stopped'),\n    success: t('Success'),\n    successful: t('Success'),\n    timedOut: t('Timed out'),\n    unavailable: t('Unavailable'),\n    unresponsive: t('Unresponsive'),\n    unknown: t('Unknown'),\n    unreachable: t('Unreachable'),\n    waiting: t('Waiting'),\n    'workers offline': t('Workers offline'),\n  };\n\n  return labels[status] || status;\n}\n\nfunction getColor(status: string | undefined) {\n  switch (status) {\n    case 'approved':\n    case 'completed':\n    case 'healthy':\n    case 'ok':\n    case 'ready':\n    case 'successful':\n    case 'success':\n      return 'green';\n    case 'deleting':\n    case 'denied':\n    case 'deprovision-fail':\n    case 'error':\n    case 'failed':\n    case 'provision-fail':\n    case 'timedOut':\n    case 'unavailable':\n    case 'unreachable':\n      return 'red';\n    case 'installed':\n    case 'new':\n    case 'never-updated':\n    case 'pending':\n    case 'running':\n    case 'skipped':\n      return 'blue';\n    case 'canceled':\n    case 'changed':\n    case 'unknown':\n      return 'orange';\n    case 'stopped':\n      return undefined;\n    case 'deprovisioning':\n    case 'disabled':\n    case 'provisioning':\n    case 'starting':\n    case 'waiting':\n    case 'workers offline':\n    default:\n      return 'grey';\n  }\n}\n\nfunction getIcon(status: string | undefined) {\n  switch (status) {\n    case 'approved':\n    case 'completed':\n    case 'healthy':\n    case 'ok':\n    case 'ready':\n    case 'successful':\n    case 'success':\n      return CheckCircleIcon;\n    case 'denied':\n    case 'new':\n    case 'never-updated':\n      return InfoCircleIcon;\n    case 'deleting':\n    case 'deprovision-fail':\n    case 'error':\n    case 'failed':\n    case 'provision-fail':\n    case 'timedOut':\n    case 'unavailable':\n    case 'unreachable':\n    case 'unresponsive':\n    case 'workers offline':\n      return ExclamationCircleIcon;\n    case 'installed':\n    case 'pending':\n    case 'waiting':\n      return ClockIcon;\n    case 'running':\n      return RunningIcon;\n    case 'canceled':\n    case 'changed':\n    case 'unknown':\n      return ExclamationTriangleIcon;\n    case 'disabled':\n      return BanIcon;\n    case 'deprovisioning':\n    case 'provisioning':\n    case 'skipped':\n      return MinusCircleIcon;\n    case 'starting':\n    case 'stopping':\n      return HourglassStartIcon;\n    case 'stopped':\n      return StopCircleIcon;\n    default:\n      return null;\n  }\n}\n","export const toTitleCase = (string: string) => {\n  if (!string) {\n    return '';\n  }\n  return string\n    .toLowerCase()\n    .split('_')\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n};\n\nexport const arrayToString = (value: Array<string>) => value.join(',');\n\nexport const stringToArray = (value: string) => value.split(',').filter((val) => !!val);\n\nexport const stringIsUUID = (value: string) =>\n  /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/gi.test(\n    value\n  );\n\nexport const truncateString = (str: string, num: number) => {\n  if (str.length <= num) {\n    return str;\n  }\n  return `${str.slice(0, num)}...`;\n};\n","import { Label } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { useGetPageUrl } from '../../../framework';\nimport { Credential } from '../interfaces/Credential';\nimport { SummaryFieldCredential } from '../interfaces/summary-fields/summary-fields';\nimport { AwxRoute } from '../main/AwxRoutes';\nimport { toTitleCase } from './util/strings';\n\nfunction CredentialLabel(props: { credential: Credential | SummaryFieldCredential | undefined }) {\n  const { t } = useTranslation();\n  const { credential, ...rest } = props;\n  const getPageUrl = useGetPageUrl();\n\n  let type;\n  if (!credential) {\n    return null;\n  }\n  if (credential.cloud) {\n    type = t`Cloud`;\n  } else if (credential.kind === 'gpg_public_key') {\n    type = t`GPG Public Key`;\n  } else if (credential.kind === 'aws' || credential.kind === 'ssh') {\n    type = credential.kind.toUpperCase();\n  } else {\n    type = toTitleCase(credential.kind || '');\n  }\n  const vault_id =\n    credential.kind === 'vault' &&\n    (credential as Credential).inputs &&\n    (credential as Credential).inputs?.vault_id\n      ? (credential as Credential).inputs?.vault_id\n      : undefined;\n\n  return (\n    <Label color=\"blue\" {...rest}>\n      <Link to={getPageUrl(AwxRoute.CredentialDetails, { params: { id: credential.id } })}>\n        {/* eslint-disable-next-line i18next/no-literal-string */}\n        <strong>{type}: </strong>\n        {credential.kind === 'vault' && vault_id\n          ? `${credential.name} | ${vault_id.toString()}`\n          : credential.name}\n      </Link>\n    </Label>\n  );\n}\n\nexport { CredentialLabel };\n","import { Label, LabelGroup } from '@patternfly/react-core';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ColumnDashboardOption,\n  ColumnModalOption,\n  ColumnPriority,\n  ColumnTableOption,\n  DateTimeCell,\n  ITableColumn,\n  TextCell,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../framework';\nimport { CredentialLabel } from '../awx/common/CredentialLabel';\nimport { SummaryFieldCredential } from '../awx/interfaces/summary-fields/summary-fields';\nimport { AwxRoute } from '../awx/main/AwxRoutes';\n\nexport function useIdColumn<T extends { id: number }>(isHidden: boolean = true) {\n  const { t } = useTranslation();\n  const column = useMemo<ITableColumn<T>>(\n    () => ({\n      header: t('ID'),\n      cell: (team) => team.id,\n      minWidth: 0,\n      table: isHidden ? ColumnTableOption.hidden : undefined,\n      card: isHidden ? 'hidden' : undefined,\n      list: isHidden ? 'hidden' : undefined,\n      modal: isHidden ? ColumnModalOption.hidden : undefined,\n    }),\n    [isHidden, t]\n  );\n  return column;\n}\n\nexport function useNameColumn<\n  T extends\n    | {\n        name?: string;\n        hostname?: string;\n        id: number;\n        summary_fields?: { user?: { username?: string } };\n      }\n    | {\n        name?: string;\n        hostname?: string;\n        id: number;\n      },\n>(options?: {\n  header?: string;\n  url?: string;\n  onClick?: (item: T) => void;\n  sort?: string;\n  disableSort?: boolean;\n  disableLinks?: boolean;\n  defaultSort?: boolean;\n}) {\n  const { url, onClick, disableSort, disableLinks } = options ?? {};\n  const { t } = useTranslation();\n  const column = useMemo<ITableColumn<T>>(\n    () => ({\n      id: 'name',\n      header: options?.header ?? t('Name'),\n      cell: (item: T) => (\n        <TextCell\n          text={\n            item.name ||\n            item.hostname ||\n            ('summary_fields' in item ? item.summary_fields?.user?.username : undefined)\n          }\n          iconSize=\"sm\"\n          to={disableLinks ? undefined : url?.replace(':id', item.id.toString())}\n          onClick={!disableLinks && onClick ? () => onClick?.(item) : undefined}\n        />\n      ),\n      sort: disableSort ? undefined : options?.sort ?? 'name',\n      card: 'name',\n      list: 'name',\n      defaultSort: options?.defaultSort !== undefined ? options?.defaultSort : true,\n    }),\n    [\n      options?.header,\n      options?.sort,\n      options?.defaultSort,\n      t,\n      disableSort,\n      disableLinks,\n      url,\n      onClick,\n    ]\n  );\n  return column;\n}\n\nexport function useDescriptionColumn<\n  T extends { description?: string | null | undefined },\n>(options?: { tableViewOption?: ColumnTableOption; sortKey?: string; disableSort?: boolean }) {\n  const { t } = useTranslation();\n  const column = useMemo<ITableColumn<T>>(\n    () => ({\n      id: 'description',\n      header: t('Description'),\n      type: 'description',\n      value: (item) => item.description,\n      table:\n        options && 'tableViewOption' in options\n          ? options.tableViewOption\n          : ColumnTableOption.description,\n      list: 'description',\n      card: 'description',\n      modal: ColumnModalOption.hidden,\n      dashboard: ColumnDashboardOption.hidden,\n    }),\n    [t, options]\n  );\n  return column;\n}\n\nexport function useLastRanColumn(options?: {\n  disableSort?: boolean;\n  disableLinks?: boolean;\n  sortKey?: string;\n  hideByDefaultInTableView?: boolean;\n}) {\n  const { t } = useTranslation();\n  const column: ITableColumn<{ last_job_run: string | null }> = useMemo(\n    () => ({\n      header: t('Last ran'),\n      cell: (item) => {\n        if (!item.last_job_run) return <></>;\n        return <DateTimeCell value={item.last_job_run} />;\n      },\n      sort: options?.disableSort ? undefined : options?.sortKey ?? 'last_job_run',\n      defaultSortDirection: 'desc',\n    }),\n    [options?.disableSort, options?.sortKey, t]\n  );\n  return column;\n}\n\nexport function useLabelsColumn() {\n  const { t } = useTranslation();\n  const column: ITableColumn<{\n    summary_fields?: { labels: { count: number; results: { id: number; name: string }[] } };\n  }> = useMemo(\n    () => ({\n      header: t('Labels'),\n      cell: (item) => {\n        if (!item.summary_fields?.labels?.results) return <></>;\n        return (\n          <LabelGroup>\n            {item.summary_fields.labels?.results.map((result) => (\n              <Label key={result.id}>{result.name}</Label>\n            ))}\n          </LabelGroup>\n        );\n      },\n      table: ColumnTableOption.expanded,\n      value: (item) => (item.summary_fields?.labels?.results.length ? true : undefined),\n      card: 'hidden',\n      list: 'hidden',\n      modal: ColumnModalOption.hidden,\n    }),\n    [t]\n  );\n  return column;\n}\n\nexport function useCredentialsColumn() {\n  const { t } = useTranslation();\n  const column: ITableColumn<{\n    summary_fields?: { credentials?: SummaryFieldCredential[] };\n  }> = useMemo(\n    () => ({\n      header: t('Credentials'),\n      cell: (item) => (\n        <LabelGroup>\n          {item.summary_fields?.credentials?.map((credential) => (\n            <CredentialLabel credential={credential} key={credential.id} />\n          ))}\n        </LabelGroup>\n      ),\n      value: (item) => (item.summary_fields?.credentials?.length ? true : undefined),\n      table: ColumnTableOption.expanded,\n      card: 'hidden',\n      list: 'hidden',\n      modal: ColumnModalOption.hidden,\n    }),\n    [t]\n  );\n  return column;\n}\n\nexport function useCreatedColumn(options?: {\n  disableSort?: boolean;\n  disableLinks?: boolean;\n  sort?: string;\n  userDetailsPageId?: string;\n}) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const column: ITableColumn<\n    | {\n        created?: string;\n        created_on?: string;\n        date_joined?: string;\n        pulp_created?: string;\n      }\n    | {\n        created?: string;\n        created_on?: string;\n        date_joined?: string;\n        pulp_created?: string;\n        summary_fields?: { created_by?: { id?: number; username?: string } };\n      }\n  > = useMemo(\n    () => ({\n      id: 'created',\n      header: t('Created'),\n      cell: (item) => {\n        if (!item.created && !item.created_on && !item.date_joined && !item.pulp_created)\n          return <></>;\n        return (\n          <DateTimeCell\n            value={item.created ?? item.created_on ?? item.date_joined ?? item.pulp_created}\n            author={\n              'summary_fields' in item ? item.summary_fields?.created_by?.username : undefined\n            }\n            onClick={\n              options?.disableLinks ||\n              !('summary_fields' in item) ||\n              item.summary_fields?.created_by?.username === '_system'\n                ? undefined\n                : () => {\n                    pageNavigate(options?.userDetailsPageId || AwxRoute.UserDetails, {\n                      params: {\n                        id: item.summary_fields?.created_by?.id,\n                      },\n                    });\n                  }\n            }\n          />\n        );\n      },\n      sort: options?.disableSort ? undefined : options?.sort ?? 'created',\n      defaultSortDirection: 'desc',\n      table: 'hidden',\n      card: 'hidden',\n      list: 'secondary',\n      modal: 'hidden',\n      dashboard: 'hidden',\n      priority: ColumnPriority.last,\n    }),\n    [\n      t,\n      options?.disableSort,\n      options?.sort,\n      options?.disableLinks,\n      options?.userDetailsPageId,\n      pageNavigate,\n    ]\n  );\n  return column;\n}\n\nexport function useModifiedColumn(options?: {\n  disableSort?: boolean;\n  disableLinks?: boolean;\n  sort?: string;\n  userDetailsPageId?: string;\n}) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const column: ITableColumn<\n    | { modified?: string; modified_on?: string }\n    | {\n        modified?: string;\n        modified_on?: string;\n        summary_fields?: { modified_by?: { id?: number; username?: string } };\n      }\n  > = useMemo(\n    () => ({\n      id: 'modified',\n      header: t('Last modified'),\n      cell: (item) => {\n        if (!item.modified && !item.modified_on) return <></>;\n        return (\n          <DateTimeCell\n            value={item.modified ? item.modified : item.modified_on}\n            author={\n              'summary_fields' in item ? item.summary_fields?.modified_by?.username : undefined\n            }\n            onClick={\n              options?.disableLinks ||\n              !('summary_fields' in item) ||\n              item.summary_fields?.modified_by?.username === '_system'\n                ? undefined\n                : () =>\n                    pageNavigate(options?.userDetailsPageId || AwxRoute.UserDetails, {\n                      params: {\n                        id: item.summary_fields?.modified_by?.id,\n                      },\n                    })\n            }\n          />\n        );\n      },\n      sort: options?.disableSort ? undefined : options?.sort ?? 'modified',\n      defaultSortDirection: 'desc',\n      table: 'hidden',\n      card: 'hidden',\n      list: 'secondary',\n      modal: 'hidden',\n      dashboard: 'hidden',\n      priority: ColumnPriority.last,\n    }),\n    [\n      t,\n      options?.disableSort,\n      options?.sort,\n      options?.disableLinks,\n      options?.userDetailsPageId,\n      pageNavigate,\n    ]\n  );\n  return column;\n}\n\nexport function useOrganizationNameColumn(\n  orgDetailsRoute: string,\n  options?: {\n    disableLinks?: boolean;\n    disableSort?: boolean;\n  },\n  defaultValue?: string\n) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const column: ITableColumn<{\n    summary_fields?: {\n      organization?: {\n        id: number;\n        name: string;\n      };\n    };\n  }> = useMemo(\n    () => ({\n      header: t('Organization'),\n      cell: (item) => (\n        <TextCell\n          text={item.summary_fields?.organization?.name ?? defaultValue ?? ''}\n          to={getPageUrl(orgDetailsRoute, {\n            params: { id: item.summary_fields?.organization?.id },\n          })}\n          disableLinks={\n            defaultValue && !item.summary_fields?.organization?.name ? true : options?.disableLinks\n          }\n        />\n      ),\n      value: (item) => item.summary_fields?.organization?.name,\n      sort: options?.disableSort ? undefined : 'organization',\n      dashboard: 'hidden',\n    }),\n    [defaultValue, getPageUrl, options?.disableLinks, options?.disableSort, orgDetailsRoute, t]\n  );\n  return column;\n}\n\nexport function useExecutionEnvColumn<\n  T extends {\n    type?: string;\n    summary_fields?: {\n      execution_environment?: {\n        id: number;\n        name: string;\n      };\n    };\n  },\n>(\n  envDetailsRoute: string,\n  options?: {\n    disableLinks?: boolean;\n    disableSort?: boolean;\n  }\n) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const column: ITableColumn<T> = useMemo(\n    () => ({\n      header: t('Execution Environment'),\n      cell: (item) => {\n        if (item.type !== 'job_template') {\n          return <></>;\n        } else {\n          return (\n            <TextCell\n              text={item.summary_fields?.execution_environment?.name}\n              to={getPageUrl(envDetailsRoute, {\n                params: { id: item.summary_fields?.execution_environment?.id },\n              })}\n              disableLinks={options?.disableLinks}\n            />\n          );\n        }\n      },\n      value: (item) => {\n        if (item.type === 'job_template') {\n          return item.summary_fields?.execution_environment?.name;\n        } else {\n          return undefined;\n        }\n      },\n      sort: options?.disableSort ? undefined : 'execution_environment',\n      table: ColumnTableOption.expanded,\n      card: 'hidden',\n      list: 'hidden',\n      modal: ColumnModalOption.hidden,\n    }),\n    [t, options?.disableSort, options?.disableLinks, getPageUrl, envDetailsRoute]\n  );\n  return column;\n}\n\nexport function useInventoryNameColumn<\n  T extends {\n    summary_fields?: {\n      inventory?: {\n        id: number;\n        name: string;\n        kind: string;\n      };\n    };\n  },\n>(\n  inventoryDetailsRoute: string,\n  options?: {\n    disableLinks?: boolean;\n    disableSort?: boolean;\n    tableViewOption?: ColumnTableOption;\n  }\n) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const column = useMemo<ITableColumn<T>>(\n    () => ({\n      header: t('Inventory'),\n      cell: (item) => (\n        <TextCell\n          text={item.summary_fields?.inventory?.name}\n          to={getPageUrl(inventoryDetailsRoute, {\n            params: {\n              id: item.summary_fields?.inventory?.id,\n              inventory_type: inventoryUrlPaths[item.summary_fields?.inventory?.kind ?? ''],\n            },\n          })}\n          disableLinks={options?.disableLinks}\n        />\n      ),\n      value: (item) => item.summary_fields?.inventory?.name,\n      sort: options?.disableSort ? undefined : 'inventory',\n      table:\n        options && 'tableViewOption' in options\n          ? options.tableViewOption\n          : ColumnTableOption.expanded,\n      card: 'hidden',\n      list: 'hidden',\n      modal: ColumnModalOption.hidden,\n    }),\n    [getPageUrl, options, inventoryDetailsRoute, t]\n  );\n  return column;\n}\n\nexport function useProjectNameColumn(\n  projectDetailsRoute: string,\n  options?: {\n    disableLinks?: boolean;\n    disableSort?: boolean;\n    dashboardOption?: ColumnDashboardOption;\n  }\n) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const column: ITableColumn<{\n    summary_fields?: {\n      project?: {\n        id: number;\n        name: string;\n      };\n    };\n  }> = useMemo(\n    () => ({\n      header: t('Project'),\n      cell: (item) => (\n        <TextCell\n          text={item.summary_fields?.project?.name}\n          to={getPageUrl(projectDetailsRoute, {\n            params: { id: item.summary_fields?.project?.id },\n          })}\n          disableLinks={options?.disableLinks}\n        />\n      ),\n      value: (item) => item.summary_fields?.project?.name,\n      sort: options?.disableSort ? undefined : 'project',\n      table: ColumnTableOption.expanded,\n      card: 'hidden',\n      list: 'hidden',\n      modal: ColumnModalOption.hidden,\n      dashboard: options?.dashboardOption ?? undefined,\n    }),\n    [\n      getPageUrl,\n      options?.dashboardOption,\n      options?.disableLinks,\n      options?.disableSort,\n      projectDetailsRoute,\n      t,\n    ]\n  );\n  return column;\n}\n\nexport function useTypeColumn<T extends object>(options: {\n  header?: string;\n  url?: string;\n  disableSort?: boolean;\n  disableLinks?: boolean;\n  sort?: string;\n  makeReadable: (item: T) => string;\n}) {\n  const { makeReadable } = options ?? {};\n  const { t } = useTranslation();\n  const column: ITableColumn<T> = useMemo(\n    () => ({\n      header: t('Type'),\n      value: (item) => makeReadable(item),\n      type: 'text',\n      card: 'subtitle',\n      list: 'subtitle',\n      sort: options?.disableSort ? undefined : options?.sort,\n    }),\n    [t, makeReadable, options.disableSort, options.sort]\n  );\n  return column;\n}\nexport function useScopeColumn<T extends { scope?: string }>(options?: {\n  header?: string;\n  disableSort?: boolean;\n  disableLinks?: boolean;\n  sort?: string;\n}) {\n  const { t } = useTranslation();\n  const column: ITableColumn<T> = useMemo(\n    () => ({\n      header: t('Scope'),\n      cell: (item: T) => <TextCell text={item.scope} />,\n      sort: options?.disableSort ? undefined : options?.sort ?? 'scope',\n    }),\n    [t, options?.disableSort, options?.sort]\n  );\n  return column;\n}\nexport function useExpiresColumn<T extends { expires?: string }>(options?: {\n  header?: string;\n  disableSort?: boolean;\n  disableLinks?: boolean;\n  sort?: string;\n}) {\n  const { t } = useTranslation();\n  const column: ITableColumn<T> = useMemo(\n    () => ({\n      header: t('Expires'),\n      cell: (item: T) => <DateTimeCell value={item.expires} />,\n      sort: options?.disableSort ? undefined : options?.sort ?? 'expires',\n    }),\n    [t, options?.disableSort, options?.sort]\n  );\n  return column;\n}\n\nconst inventoryUrlPaths: { [key: string]: string } = {\n  '': 'inventory',\n  smart: 'smart_inventory',\n  constructed: 'constructed_inventory',\n};\n\nexport function useAddressColumn<\n  T extends {\n    address: string;\n  },\n>(options?: {\n  header?: string;\n  url?: string;\n  onClick?: (item: T) => void;\n  sort?: string;\n  disableSort?: boolean;\n  disableLinks?: boolean;\n}) {\n  const { onClick, disableSort, disableLinks } = options ?? {};\n  const { t } = useTranslation();\n  const column = useMemo<ITableColumn<T>>(\n    () => ({\n      header: options?.header ?? t('Instance name'),\n      cell: (item: T) => (\n        <TextCell\n          text={item.address}\n          iconSize=\"sm\"\n          onClick={!disableLinks && onClick ? () => onClick?.(item) : undefined}\n        />\n      ),\n      sort: disableSort ? undefined : options?.sort ?? 'name',\n      card: 'name',\n      list: 'name',\n      defaultSort: true,\n    }),\n    [disableLinks, disableSort, options?.sort, onClick, options?.header, t]\n  );\n  return column;\n}\n","import { useTranslation } from 'react-i18next';\n\nexport function useNodeTypeTooltip() {\n  const { t } = useTranslation();\n  return {\n    hybrid: t(\n      'Hybrid is the default node type for control plane nodes, responsible for runtime functions like project updates, management jobs and ansible-runner task operations. Hybrid nodes are also used for automation execution.'\n    ),\n    control: t(\n      'Control nodes run project and inventory updates and system jobs, but not regular jobs. Execution capabilities are disabled on these nodes.'\n    ),\n    execution: t(\n      'Execution nodes run jobs under ansible-runner with podman isolation. This node type is similar to isolated nodes. This is the default node type for execution plane nodes.'\n    ),\n    hop: t(\n      'Similar to a jump host, hop nodes will route traffic to other execution nodes. Hop nodes cannot execute automation.'\n    ),\n  };\n}\n","import { Slider, SliderOnChangeEvent } from '@patternfly/react-core';\nimport { t } from 'i18next';\nimport { useAwxActiveUser } from '../../../common/useAwxActiveUser';\nimport { Instance } from '../../../interfaces/Instance';\nimport { useInstanceActions } from '../hooks/useInstanceActions';\n\nexport function InstanceForksSlider(props: { instance: Instance }) {\n  const { instance } = props;\n  const { instanceForks, handleInstanceForksSlider } = useInstanceActions(String(instance.id));\n  const capacityAvailable = instance.cpu_capacity !== 0 && instance.mem_capacity !== 0;\n  const { activeAwxUser } = useAwxActiveUser();\n\n  return (\n    <>\n      <div data-cy=\"number-forks\">{t(`${instanceForks} forks`)}</div>\n      <Slider\n        areCustomStepsContinuous\n        max={instance.mem_capacity}\n        min={instance.cpu_capacity}\n        value={instanceForks}\n        onChange={(_event: SliderOnChangeEvent, value: number) =>\n          void handleInstanceForksSlider(value)\n        }\n        isDisabled={\n          !(\n            (activeAwxUser?.is_superuser || activeAwxUser?.is_system_auditor) &&\n            instance.enabled &&\n            capacityAvailable\n          )\n        }\n      />\n    </>\n  );\n}\n","import { ReactNode } from 'react';\nimport { getPatternflyColor } from './pfcolors';\n\nexport function Unavailable(props: { children: ReactNode }) {\n  return (\n    <span\n      style={{\n        color: getPatternflyColor('red'),\n      }}\n    >\n      {props.children}\n    </span>\n  );\n}\n","import { Progress, Tooltip } from '@patternfly/react-core';\nimport { useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  BytesCell,\n  ColumnModalOption,\n  ColumnTableOption,\n  ITableColumn,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { Dotted } from '../../../../../framework/components/Dotted';\nimport { capitalizeFirstLetter } from '../../../../../framework/utils/strings';\nimport { useCreatedColumn, useModifiedColumn, useNameColumn } from '../../../../common/columns';\nimport { Instance } from '../../../interfaces/Instance';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useNodeTypeTooltip } from './useNodeTypeTooltip';\nimport { InstanceForksSlider } from '../components/InstanceForksSlider';\nimport { StatusCell } from '../../../../common/Status';\nimport { Unavailable } from '../../../../../framework/components/Unavailable';\nimport { computeForks } from './useInstanceActions';\n\nexport function useInstancesColumns(\n  options?: { disableSort?: boolean; disableLinks?: boolean },\n  onNameClick?: (instance: Instance) => void\n) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n\n  const toolTipMap: {\n    [item: string]: string;\n  } = useNodeTypeTooltip();\n\n  const nameClick = useCallback(\n    (instance: Instance) =>\n      pageNavigate(AwxRoute.InstanceDetails, {\n        params: { id: instance.id },\n      }),\n    [pageNavigate]\n  );\n\n  const makeReadable = useCallback(\n    (instance: Instance) => {\n      return (\n        <Tooltip content={toolTipMap[instance.node_type]}>\n          <Dotted>{`${capitalizeFirstLetter(instance.node_type)}`}</Dotted>\n        </Tooltip>\n      );\n    },\n    [toolTipMap]\n  );\n\n  const nameColumn = useNameColumn<Instance>({\n    ...options,\n    onClick: onNameClick ?? nameClick,\n    header: t('Name'),\n    sort: 'hostname',\n  });\n\n  const createdColumn = useCreatedColumn(options);\n  const modifiedColumn = useModifiedColumn(options);\n\n  const tableColumns = useMemo<ITableColumn<Instance>[]>(\n    () => [\n      nameColumn,\n      {\n        header: t('Status'),\n        cell: (instance) => (\n          <StatusCell status={instance.health_check_pending ? 'running' : instance.node_state} />\n        ),\n        sort: 'errors',\n        modal: 'hidden',\n      },\n      {\n        cell: makeReadable,\n        sort: 'node_type',\n        header: t('Node type'),\n        card: 'subtitle',\n        list: 'subtitle',\n      },\n      {\n        header: t('Capacity adjustment'),\n        cell: (instance: Instance) => {\n          const instanceForks = computeForks(\n            instance.mem_capacity,\n            instance.cpu_capacity,\n            parseFloat(instance.capacity_adjustment)\n          );\n          if (instanceForks > 0) {\n            return <InstanceForksSlider instance={instance} />;\n          } else {\n            return instance.node_type === 'hop' ? (\n              <Tooltip\n                isContentLeftAligned={true}\n                content={t('Cannot adjust capacity for hop nodes.')}\n              >\n                <Dotted>{t('Unavailable')}</Dotted>\n              </Tooltip>\n            ) : (\n              <Tooltip isContentLeftAligned={true} content={t('0 forks. Cannot adjust capacity.')}>\n                <Dotted>{t('Unavailable')}</Dotted>\n              </Tooltip>\n            );\n          }\n        },\n        modal: ColumnModalOption.hidden,\n      },\n      {\n        header: t('Used capacity'),\n        cell: (instance) =>\n          instance.node_type === 'hop' ? undefined : instance.enabled ? (\n            <Progress value={Math.round(100 - instance.percent_capacity_remaining)} />\n          ) : (\n            <Unavailable>{t(`Unavailable`)}</Unavailable>\n          ),\n        list: 'secondary',\n        modal: 'hidden',\n      },\n      {\n        header: t('Running jobs'),\n        cell: (instance) => instance.jobs_running,\n        table: ColumnTableOption.expanded,\n      },\n      {\n        header: t('Total jobs'),\n        cell: (instance) => instance.jobs_total,\n        table: ColumnTableOption.expanded,\n      },\n      {\n        header: t('Memory'),\n        cell: (instance) => instance.memory && <BytesCell bytes={instance.memory} />,\n        sort: 'memory',\n        list: 'secondary',\n        table: ColumnTableOption.expanded,\n      },\n      {\n        header: t('Policy type'),\n        cell: (instance) => (instance.managed_by_policy ? t('Auto') : t('Manual')),\n        table: ColumnTableOption.expanded,\n      },\n      createdColumn,\n      modifiedColumn,\n    ],\n    [t, createdColumn, nameColumn, makeReadable, modifiedColumn]\n  );\n  return tableColumns;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { compareStrings } from '../../../../../framework';\nimport { useNameColumn } from '../../../../common/columns';\nimport { getItemKey, requestPatch } from '../../../../common/crud/Data';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { Instance } from '../../../interfaces/Instance';\nimport { useInstancesColumns } from './useInstancesColumns';\n\nexport function useRemoveInstances(onComplete: (instances: Instance[]) => void) {\n  const tableColumns = useInstancesColumns({ disableLinks: true });\n  const confirmationColumns = useMemo(\n    () => tableColumns.filter((item) => ['Name', 'Node type'].includes(item.header)),\n    [tableColumns]\n  );\n\n  const { t } = useTranslation();\n  const deleteActionNameColumn = useNameColumn({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo(() => [deleteActionNameColumn], [deleteActionNameColumn]);\n  const bulkAction = useAwxBulkConfirmation<Instance>();\n  const removeInstances = (instances: Instance[]) => {\n    bulkAction({\n      title: t('Permanently remove instances', { count: instances.length }),\n      confirmText:\n        instances.length === 1\n          ? t('Yes, I confirm that I want to delete this instance.')\n          : t('Yes, I confirm that I want to delete these {{count}} instances.', {\n              count: instances.length,\n            }),\n      actionButtonText: t('Remove instance', { count: instances.length }),\n      items: instances.sort((l, r) => compareStrings(l.name, r.name)),\n      keyFn: getItemKey,\n      isDanger: true,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: (instances: Instance) =>\n        requestPatch(awxAPI`/instances/${instances.id.toString()}/`, {\n          node_state: 'deprovisioning',\n        }),\n    });\n  };\n  return removeInstances;\n}\n","import { useCallback, useMemo } from 'react';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  usePageAlertToaster,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { Instance } from '../../../interfaces/Instance';\nimport { ButtonVariant, AlertProps } from '@patternfly/react-core';\nimport { HeartbeatIcon, PencilAltIcon } from '@patternfly/react-icons';\nimport { Settings } from '../../../interfaces/Settings';\nimport { useTranslation } from 'react-i18next';\nimport { requestPatch, postRequest } from '../../../../common/crud/Data';\nimport { useGet } from '../../../../common/crud/useGet';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxActiveUser } from '../../../common/useAwxActiveUser';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport {\n  cannotRunHealthCheckDueToManagedInstance,\n  cannotRunHealthCheckDueToNodeType,\n  cannotRunHealthCheckDueToPending,\n  cannotRunHealthCheckDueToPermissions,\n} from './useInstanceActions';\n\nexport function useInstanceRowActions(onComplete: (instances: Instance[]) => void) {\n  const toggleInstanceRowAction: IPageAction<Instance> = useToggleInstanceRowAction(onComplete);\n  const healthCheckRowAction: IPageAction<Instance> = useRunHealthCheckRowAction(onComplete, false);\n  const editInstanceRowAction: IPageAction<Instance> = useEditInstanceRowAction();\n\n  return useMemo<IPageAction<Instance>[]>(\n    () => [toggleInstanceRowAction, healthCheckRowAction, editInstanceRowAction],\n    [toggleInstanceRowAction, healthCheckRowAction, editInstanceRowAction]\n  );\n}\n\nexport function useToggleInstanceRowAction(onComplete: (instances: Instance[]) => void) {\n  const { t } = useTranslation();\n  const { activeAwxUser } = useAwxActiveUser();\n\n  const handleToggleInstance: (instance: Instance, enabled: boolean) => Promise<void> = useCallback(\n    async (instance, enabled) => {\n      await requestPatch(awxAPI`/instances/${instance.id.toString()}/`, { enabled });\n      onComplete([instance]);\n    },\n    [onComplete]\n  );\n  const userAccess = activeAwxUser?.is_superuser || activeAwxUser?.is_system_auditor;\n\n  return useMemo<IPageAction<Instance>>(\n    () => ({\n      type: PageActionType.Switch,\n      ariaLabel: (isEnabled) =>\n        isEnabled ? t('Click to disable instance') : t('Click to enable instance'),\n      selection: PageActionSelection.Single,\n      isPinned: true,\n      onToggle: (instance, enabled) => handleToggleInstance(instance, enabled),\n      isSwitchOn: (instance) => instance.enabled,\n      label: t('Instance enabled'),\n      labelOff: t('Instance disabled'),\n      showPinnedLabel: false,\n      isHidden: (instance) => instance.node_type === 'hop',\n      isDisabled: (_instance) =>\n        !userAccess\n          ? t(\n              'You do not have permission to edit instances. Please contact your organization administrator if there is an issue with your access.'\n            )\n          : undefined,\n    }),\n    [t, handleToggleInstance, userAccess]\n  );\n}\n\nexport function useRunHealthCheckRowAction(\n  onComplete: (instances: Instance[]) => void,\n  isHidden: boolean\n) {\n  const { t } = useTranslation();\n\n  const alertToaster = usePageAlertToaster();\n  const { activeAwxUser } = useAwxActiveUser();\n\n  return useMemo<IPageAction<Instance>>(\n    () => ({\n      type: PageActionType.Button,\n      selection: PageActionSelection.Single,\n      variant: ButtonVariant.secondary,\n      isPinned: true,\n      isDisabled: (instance) =>\n        cannotRunHealthCheckDueToNodeType(instance, t) ||\n        cannotRunHealthCheckDueToPermissions(activeAwxUser, t) ||\n        cannotRunHealthCheckDueToManagedInstance(instance, t) ||\n        cannotRunHealthCheckDueToPending(instance, t),\n      isHidden: () => isHidden,\n      icon: HeartbeatIcon,\n      label: t('Run health check'),\n      onClick: (instance: Instance) => {\n        const alert: AlertProps = {\n          variant: 'success',\n          title: t(`Running health check on ${instance.hostname}.`),\n          timeout: 4000,\n        };\n        postRequest(awxAPI`/instances/${instance.id.toString()}/health_check/`, {})\n          .then(() => {\n            alertToaster.addAlert(alert);\n            onComplete([instance]);\n          })\n          .catch((error) => {\n            alertToaster.addAlert({\n              variant: 'danger',\n              title: t('Failed to perform health check'),\n              children: error instanceof Error && error.message,\n            });\n          });\n      },\n    }),\n    [t, onComplete, alertToaster, activeAwxUser, isHidden]\n  );\n}\n\nexport function useEditInstanceRowAction(options?: { isHidden?: boolean; isPinned?: boolean }) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const { activeAwxUser } = useAwxActiveUser();\n  const { data } = useGet<Settings>(awxAPI`/settings/system/`);\n  const userAccess = activeAwxUser?.is_superuser || activeAwxUser?.is_system_auditor;\n  const isK8s = data?.IS_K8S;\n\n  return useMemo<IPageAction<Instance>>(\n    () => ({\n      type: PageActionType.Button,\n      selection: PageActionSelection.Single,\n      icon: PencilAltIcon,\n      isPinned: options?.isPinned ?? true,\n      isHidden: () => options?.isHidden ?? false,\n      label: t('Edit instance'),\n      onClick: (instance) => pageNavigate(AwxRoute.EditInstance, { params: { id: instance.id } }),\n      isDisabled: (_instance) =>\n        !userAccess || !isK8s\n          ? t(\n              'You do not have permission to edit instances. Please contact your organization administrator if there is an issue with your access.'\n            )\n          : undefined,\n    }),\n    [t, pageNavigate, isK8s, userAccess, options?.isHidden, options?.isPinned]\n  );\n}\n","import { MinusCircleIcon } from '@patternfly/react-icons';\nimport pDebounce from 'p-debounce';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { requestGet, requestPatch } from '../../../../common/crud/Data';\nimport { useGet, useGetItem } from '../../../../common/crud/useGet';\nimport { AwxItemsResponse } from '../../../common/AwxItemsResponse';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxActiveUser } from '../../../common/useAwxActiveUser';\nimport { Instance } from '../../../interfaces/Instance';\nimport { InstanceGroup } from '../../../interfaces/InstanceGroup';\nimport { Settings } from '../../../interfaces/Settings';\nimport { useRemoveInstances } from './useRemoveInstances';\nimport { useEditInstanceRowAction, useRunHealthCheckRowAction } from './useInstanceRowActions';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { TFunction } from 'i18next';\nimport { AwxUser } from '../../../interfaces/User';\n\nexport function useInstanceActions(instanceId: string) {\n  const { refresh, data: instanceRes } = useGetItem<Instance>(awxAPI`/instances/`, instanceId);\n\n  const [instance, setInstance] = useState<Instance>(instanceRes as Instance);\n  const [instanceGroups, setInstanceGroups] = useState<AwxItemsResponse<InstanceGroup>>();\n  const [instanceForks, setInstanceForks] = useState(0);\n\n  useEffect(() => {\n    const fetchInstanceDetails = async () => {\n      const instance = await requestGet<Instance>(awxAPI`/instances/${instanceId}/`);\n      const instanceGroups = await requestGet<AwxItemsResponse<InstanceGroup>>(\n        awxAPI`/instances/${instanceId}/instance_groups/`\n      );\n      setInstance(instance);\n      setInstanceGroups(instanceGroups);\n      setInstanceForks(\n        computeForks(\n          instance.mem_capacity,\n          instance.cpu_capacity,\n          parseFloat(instance.capacity_adjustment)\n        )\n      );\n    };\n\n    void fetchInstanceDetails();\n  }, [instanceId]);\n\n  const handleToggleInstance = async (enabled: boolean) => {\n    await requestPatch<Instance>(awxAPI`/instances/${instance.id.toString()}/`, {\n      enabled,\n    });\n    refresh();\n  };\n\n  function mapBetween(\n    currentVal: number,\n    minAllowed: number,\n    maxAllowed: number,\n    min: number,\n    max: number\n  ) {\n    return ((maxAllowed - minAllowed) * (currentVal - min)) / (max - min) + minAllowed;\n  }\n  const handleInstanceForksSlider = pDebounce(async (value: number) => {\n    const adjustedMin = Math.min(instance.mem_capacity, instance.cpu_capacity);\n    const adjustedMax = Math.max(instance.mem_capacity, instance.cpu_capacity);\n    const computedVal = mapBetween(value, 0, 1, adjustedMin, adjustedMax);\n    const response = await requestPatch<Instance>(awxAPI`/instances/${instance.id.toString()}/`, {\n      capacity_adjustment: computedVal.toFixed(2),\n    });\n    setInstanceForks(\n      computeForks(\n        response.mem_capacity,\n        response.cpu_capacity,\n        parseFloat(response.capacity_adjustment)\n      )\n    );\n    refresh();\n  }, 200);\n\n  return {\n    instanceGroups,\n    instanceForks,\n    handleToggleInstance,\n    handleInstanceForksSlider,\n  };\n}\n\nexport function useInstanceDetailsActions() {\n  const params = useParams<{ id: string }>();\n  const { data: instance, refresh } = useGetItem<Instance>(awxAPI`/instances`, params.id);\n  const { data } = useGet<Settings>(awxAPI`/settings/system/`);\n  const { activeAwxUser } = useAwxActiveUser();\n\n  const isK8s = data?.IS_K8S;\n\n  const isManagedInstance = instance?.managed ?? false;\n\n  const isHidden =\n    isK8s === false ||\n    (!activeAwxUser?.is_superuser && !activeAwxUser?.is_system_auditor) ||\n    isManagedInstance;\n\n  const editInstanceAction = useEditInstanceRowAction({\n    isHidden: isHidden,\n    isPinned: false,\n  });\n  const removeInstanceAction = useRemoveInstanceItemAction(isHidden);\n  const runHealthCheckAction = useRunHealthCheckRowAction(\n    refresh,\n    instance?.node_type !== 'execution'\n  );\n\n  return useMemo<IPageAction<Instance>[]>(\n    () => [editInstanceAction, removeInstanceAction, runHealthCheckAction],\n    [editInstanceAction, removeInstanceAction, runHealthCheckAction]\n  );\n}\n\nexport function useRemoveInstanceItemAction(isHidden: boolean) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const removeInstances = useRemoveInstances((_instances: Instance[]) =>\n    pageNavigate(AwxRoute.Instances)\n  );\n  const { data } = useGet<Settings>(awxAPI`/settings/system/`);\n  const isK8s = data?.IS_K8S;\n  const { activeAwxUser } = useAwxActiveUser();\n\n  return useMemo<IPageAction<Instance>>(\n    () => ({\n      type: PageActionType.Button,\n      isHidden: () => isHidden,\n      isPinned: false,\n      selection: PageActionSelection.Single,\n      icon: MinusCircleIcon,\n      label: t('Remove instance'),\n      onClick: (instance: Instance) => removeInstances([instance]),\n      isDisabled: (instance) => cannotRemoveInstances([instance], t, activeAwxUser, isK8s ?? false),\n      isDanger: true,\n    }),\n    [t, removeInstances, isK8s, activeAwxUser, isHidden]\n  );\n}\n\nexport function cannotRemoveInstances(\n  instances: Instance[],\n  t: TFunction<'translation', undefined>,\n  activeAwxUser: AwxUser | undefined | null,\n  isK8s: boolean\n) {\n  const addEditPrivileges = activeAwxUser?.is_superuser || activeAwxUser?.is_system_auditor;\n  if (instances.length === 0) {\n    return t(`Select at least one item from the list.`);\n  } else if (!isK8s) {\n    return t('Cannot delete instances due to system environment');\n  } else if (!addEditPrivileges) {\n    return t('Cannot delete instances due to insufficient permissions');\n  } else if (instances.find((instance: Instance) => !removeableInstance(instance))) {\n    return t(\n      'Cannot delete due to one or many instances being of type other than execution or hop.'\n    );\n  }\n  return '';\n}\n\nexport function cannotRunHealthCheckDueToPending(\n  instance: Instance,\n  t: TFunction<'translation', undefined>\n) {\n  if (instance.health_check_pending)\n    return t(\n      `Instance has pending health checks. Wait for those to complete before attempting another health check.`\n    );\n  return '';\n}\n\nexport function cannotRunHealthCheckDueToNodeType(\n  instance: Instance,\n  t: TFunction<'translation', undefined>\n) {\n  if (instance.node_type !== 'execution')\n    return t(`Health checks can only be run on execution instances.`);\n  return '';\n}\n\nexport function cannotRunHealthCheckDueToManagedInstance(\n  instance: Instance,\n  t: TFunction<'translation', undefined>\n) {\n  if (instance?.managed) return t(`Health checks cannot be run on a managed instance.`);\n  return '';\n}\n\nexport function cannotRunHealthCheckDueToPermissions(\n  activeAwxUser: AwxUser | null | undefined,\n  t: TFunction<'translation', undefined>\n) {\n  if (!activeAwxUser?.is_superuser && !activeAwxUser?.is_system_auditor)\n    return t(`Health checks cannot be run on instance do not have correct permissions.`);\n  return '';\n}\n\nexport function computeForks(\n  memCapacity: number,\n  cpuCapacity: number,\n  selectedCapacityAdjustment: number\n) {\n  const minCapacity = Math.min(memCapacity, cpuCapacity);\n  const maxCapacity = Math.max(memCapacity, cpuCapacity);\n  return Math.floor(minCapacity + (maxCapacity - minCapacity) * selectedCapacityAdjustment);\n}\n\nfunction removeableInstance(instance: Instance) {\n  if (instance.node_type === 'execution' || instance.node_type === 'hop') {\n    return true;\n  }\n  return false;\n}\n","import {\n  ClipboardCopyButton,\n  CodeBlock,\n  CodeBlockAction,\n  CodeBlockCode,\n  ToggleGroup,\n  ToggleGroupItem,\n} from '@patternfly/react-core';\nimport React, { ReactNode, useLayoutEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport { usePageSettings } from '..';\nimport { objectToString, valueToObject } from '../PageForm/Inputs/PageFormDataEditor';\nimport { DataEditorLanguages } from '../components/DataEditor';\nimport { useClipboard } from '../hooks/useClipboard';\nimport { PageDetail } from './PageDetail';\n\nexport function PageDetailCodeEditor(props: {\n  label?: string;\n  value: string;\n  helpText?: string | ReactNode;\n  toggleLanguage?: boolean;\n  showCopyToClipboard?: boolean;\n  isEmpty?: boolean;\n  fullWidth?: boolean;\n  isArray?: boolean;\n}) {\n  const {\n    value,\n    label,\n    helpText,\n    fullWidth = true,\n    showCopyToClipboard = true,\n    toggleLanguage = true,\n    isArray = false,\n  } = props;\n\n  const { id } = useParams();\n  const { t } = useTranslation();\n  const [copied, setCopied] = useState(false);\n  const settings = usePageSettings();\n  const defaultLanguage = settings.dataEditorFormat ?? 'yaml';\n  const [language, setLanguage] = useState<DataEditorLanguages>(defaultLanguage);\n  const [codeEditorValue, setCodeEditorValue] = useState<string>(value);\n  const { copySuccess, writeToClipboard } = useClipboard();\n\n  const onClick = (event: React.MouseEvent<Element, MouseEvent>, text: string) => {\n    writeToClipboard(text);\n    setCopied(copySuccess);\n  };\n\n  useLayoutEffect(() => {\n    if (toggleLanguage) {\n      const translatedVal = objectToString(valueToObject(value, isArray), language);\n      setCodeEditorValue(translatedVal);\n    }\n  }, [language, toggleLanguage, value, isArray]);\n\n  const actions =\n    showCopyToClipboard || toggleLanguage ? (\n      <React.Fragment>\n        {showCopyToClipboard && (\n          <CodeBlockAction>\n            <ClipboardCopyButton\n              id=\"basic-copy-button\"\n              textId=\"code-content\"\n              aria-label=\"Copy to clipboard\"\n              onClick={(e) => onClick(e, value)}\n              exitDelay={copied ? 1500 : 600}\n              maxWidth=\"110px\"\n              variant=\"plain\"\n              onTooltipHidden={() => setCopied(false)}\n            >\n              {copied ? t('Successfully copied to clipboard!') : t('Copy to clipboard')}\n            </ClipboardCopyButton>\n          </CodeBlockAction>\n        )}\n        {toggleLanguage && (\n          <CodeBlockAction>\n            <ToggleGroup isCompact>\n              <ToggleGroupItem\n                id=\"toggle-yaml\"\n                data-cy=\"toggle-yaml\"\n                aria-label={t('Toggle to YAML')}\n                isSelected={language === 'yaml'}\n                text=\"YAML\"\n                type=\"button\"\n                onChange={() => setLanguage('yaml')}\n              />\n              <ToggleGroupItem\n                id=\"toggle-json\"\n                data-cy=\"toggle-json\"\n                aria-label={t('Toggle to JSON')}\n                isSelected={language === 'json'}\n                text=\"JSON\"\n                type=\"button\"\n                onChange={() => setLanguage('json')}\n              />\n            </ToggleGroup>\n          </CodeBlockAction>\n        )}\n      </React.Fragment>\n    ) : null;\n  return (\n    <PageDetail\n      label={label ?? t('Variables')}\n      helpText={helpText}\n      isEmpty={props?.isEmpty}\n      fullWidth={fullWidth}\n    >\n      <CodeBlock id={id} actions={actions}>\n        <CodeBlockCode data-cy={'code-block-value'}>{codeEditorValue}</CodeBlockCode>\n      </CodeBlock>\n    </PageDetail>\n  );\n}\n","import { PageActionSwitch } from '../../../../../framework/PageActions/PageActionSwitch';\nimport { useAwxActiveUser } from '../../../common/useAwxActiveUser';\nimport { Instance } from '../../../interfaces/Instance';\nimport { useInstanceActions } from '../hooks/useInstanceActions';\nimport {\n  IPageActionSwitchSingle,\n  PageActionSelection,\n  PageActionType,\n} from '../../../../../framework';\nimport { useTranslation } from 'react-i18next';\n\nexport function InstanceSwitch(props: { instance: Instance }) {\n  const { t } = useTranslation();\n  const { instance } = props;\n  const { handleToggleInstance } = useInstanceActions(String(props.instance.id));\n  const { activeAwxUser } = useAwxActiveUser();\n\n  const action: IPageActionSwitchSingle<Instance> = {\n    type: PageActionType.Switch,\n    onToggle: () => {\n      void handleToggleInstance(!instance?.enabled);\n    },\n    isSwitchOn: () => instance?.enabled,\n    isDisabled: (_instance) =>\n      !activeAwxUser?.is_superuser\n        ? t('You do not have permissions to toggle this instance')\n        : undefined,\n    ariaLabel: (isEnabled: boolean) => (isEnabled ? t('Enabled') : t('Disabled')),\n    selection: PageActionSelection.Single,\n    label: '',\n  };\n\n  return <PageActionSwitch action={action} selectedItem={instance} />;\n}\n","import { Button, Label, PageSection, Progress, Skeleton, Tooltip } from '@patternfly/react-core';\nimport { DownloadIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useParams } from 'react-router-dom';\nimport {\n  BytesCell,\n  PageDetail,\n  PageDetails,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { Dotted } from '../../../../framework/components/Dotted';\nimport { LoadingPage } from '../../../../framework/components/LoadingPage';\nimport { formatDateString } from '../../../../framework/utils/formatDateString';\nimport { capitalizeFirstLetter } from '../../../../framework/utils/strings';\nimport { LastModifiedPageDetail } from '../../../common/LastModifiedPageDetail';\nimport { StatusCell } from '../../../common/Status';\nimport { useGetItem } from '../../../common/crud/useGet';\nimport { AwxError } from '../../common/AwxError';\nimport { AwxItemsResponse } from '../../common/AwxItemsResponse';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { Instance } from '../../interfaces/Instance';\nimport { InstanceGroup } from '../../interfaces/InstanceGroup';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { useInstanceActions } from './hooks/useInstanceActions';\nimport { useNodeTypeTooltip } from './hooks/useNodeTypeTooltip';\nimport { InstanceForksSlider } from './components/InstanceForksSlider';\nimport { PageDetailCodeEditor } from '../../../../framework/PageDetails/PageDetailCodeEditor';\nimport { InstanceSwitch } from './components/InstanceSwitch';\nimport { Unavailable } from '../../../../framework/components/Unavailable';\n\nexport function InstanceDetails() {\n  const params = useParams<{ id?: string; instance_id?: string }>();\n  const { id, instance_id } = params;\n  const {\n    error,\n    data: instance,\n    refresh,\n  } = useGetItem<Instance>(awxAPI`/instances`, instance_id ?? id);\n  const { instanceGroups, instanceForks } = useInstanceActions(instance_id ?? (id as string));\n  if (error) return <AwxError error={error} handleRefresh={refresh} />;\n  if (!instance) return <LoadingPage breadcrumbs tabs />;\n  return (\n    <PageLayout>\n      {instance ? (\n        <InstanceDetailsTab\n          instance={instance}\n          instanceGroups={instanceGroups}\n          instanceForks={instanceForks}\n        />\n      ) : (\n        <PageSection variant=\"light\">\n          <Skeleton />\n        </PageSection>\n      )}\n    </PageLayout>\n  );\n}\n\nexport function InstanceDetailsTab(props: {\n  instance: Instance;\n  instanceGroups: AwxItemsResponse<InstanceGroup> | undefined;\n  instanceForks: number;\n  numberOfColumns?: 'multiple' | 'single' | undefined;\n}) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const getPageUrl = useGetPageUrl();\n  const { instance, instanceGroups, instanceForks } = props;\n  const toolTipMap: { [item: string]: string } = useNodeTypeTooltip();\n\n  return (\n    <PageDetails numberOfColumns={props.numberOfColumns} disableScroll>\n      <PageDetail label={t('Name')} data-cy=\"name\">\n        <Button\n          variant=\"link\"\n          isInline\n          onClick={() =>\n            pageNavigate(AwxRoute.InstanceDetails, {\n              params: { id: instance.id },\n            })\n          }\n        >\n          {instance.hostname}\n        </Button>\n      </PageDetail>\n      <PageDetail label={t('Node type')} data-cy=\"node-type\">\n        <Tooltip content={toolTipMap[instance.node_type]}>\n          <Dotted>{`${capitalizeFirstLetter(instance.node_type)}`}</Dotted>\n        </Tooltip>\n      </PageDetail>\n      <PageDetail label={t('Status')} data-cy=\"node-status\">\n        <StatusCell status={instance.health_check_pending ? 'running' : instance.node_state} />\n      </PageDetail>\n      {instanceGroups && instanceGroups.results.length > 0 && (\n        <PageDetail label={t(`Instance groups`)} data-cy=\"instance-groups\">\n          {instanceGroups.results.map((instance) => (\n            <Label color=\"blue\" style={{ marginRight: '10px' }} key={instance.id}>\n              <Link\n                to={getPageUrl(AwxRoute.InstanceGroupDetails, {\n                  params: { id: instance.id },\n                })}\n              >\n                {instance.name}\n              </Link>\n            </Label>\n          ))}\n        </PageDetail>\n      )}\n      {!instance.managed && instance.related?.install_bundle && (\n        <PageDetail label={t`Download bundle`} data-cy=\"download-bundle\">\n          <Button\n            size=\"sm\"\n            aria-label={t`Download Bundle`}\n            component=\"a\"\n            download={`${instance.related?.install_bundle}`}\n            href={`${instance.related?.install_bundle}`}\n            target=\"_blank\"\n            variant=\"secondary\"\n            rel=\"noopener noreferrer\"\n          >\n            <DownloadIcon />\n          </Button>\n        </PageDetail>\n      )}\n      {instance.listener_port && (\n        <PageDetail label={t`Listener port`} data-cy=\"listener-port\">\n          {instance.listener_port}\n        </PageDetail>\n      )}\n      <PageDetail label={t('Used capacity')} data-cy=\"used-capacity\">\n        {instance.enabled ? (\n          <Progress value={Math.round(100 - instance.percent_capacity_remaining)} />\n        ) : (\n          <Unavailable>{t('Unavailable')}</Unavailable>\n        )}\n      </PageDetail>\n      <PageDetail label={t('Running jobs')} data-cy=\"running-jobs\">\n        {instance.jobs_running.toString()}\n      </PageDetail>\n      <PageDetail label={t('Total jobs')} data-cy=\"total-jobs\">\n        {instance.jobs_total.toString()}\n      </PageDetail>\n      <PageDetail label={t('Policy type')} data-cy=\"policy-type\">\n        {instance.managed_by_policy ? t('Auto') : t('Manual')}\n      </PageDetail>\n      <PageDetail label={t('Memory')} data-cy=\"memory\">\n        <BytesCell bytes={instance.memory} />\n      </PageDetail>\n      <PageDetail label={t('Last health check')} data-cy=\"last-health-check\">\n        {formatDateString(instance.last_health_check)}\n      </PageDetail>\n      <PageDetail label={t('Created')} data-cy=\"created\">\n        {formatDateString(instance.created)}\n      </PageDetail>\n      <LastModifiedPageDetail value={instance.modified} data-cy=\"modified\" />\n      <PageDetail\n        label={t('Forks')}\n        data-cy=\"forks\"\n        isEmpty={instance.node_type === 'hop' || instanceForks <= 0}\n      >\n        <InstanceForksSlider instance={instance} />\n      </PageDetail>\n      <PageDetail label={t('Enabled')} data-cy=\"enabled\">\n        <InstanceSwitch instance={instance} />\n      </PageDetail>\n      <PageDetailCodeEditor\n        value={instance.errors}\n        label={t('Errors')}\n        isEmpty={instance.errors === ''}\n        fullWidth={true}\n      />\n    </PageDetails>\n  );\n}\n","import { useCallback } from 'react';\nimport { useVisualizationController } from '@patternfly/react-topology';\nimport { useViewOptions } from '../ViewOptionsProvider';\n\nexport function useCloseSidebar() {\n  const controller = useVisualizationController();\n  const { setSidebarMode } = useViewOptions();\n\n  return useCallback(() => {\n    controller.setState({ ...controller.getState(), selectedIds: [], sourceNode: undefined });\n    setSidebarMode(undefined);\n  }, [controller, setSidebarMode]);\n}\n","import {\n  Edge,\n  EdgeModel,\n  ElementModel,\n  GraphElement,\n  NodeModel,\n  NodeStatus,\n  WithSelectionProps,\n  Node,\n} from '@patternfly/react-topology';\nimport type { Credential } from '../../../interfaces/Credential';\nimport type { Inventory } from '../../../interfaces/Inventory';\nimport type { InventorySource } from '../../../interfaces/InventorySource';\nimport type { JobTemplate } from '../../../interfaces/JobTemplate';\nimport type { LaunchConfiguration } from '../../../interfaces/LaunchConfiguration';\nimport type { Project } from '../../../interfaces/Project';\nimport type { SystemJobTemplate } from '../../../interfaces/SystemJobTemplate';\nimport type { WorkflowApproval } from '../../../interfaces/WorkflowApproval';\nimport type { WorkflowJobTemplate } from '../../../interfaces/WorkflowJobTemplate';\nimport type { WorkflowNode } from '../../../interfaces/WorkflowNode';\nimport { SummaryFieldInventory } from '../../../interfaces/summary-fields/summary-fields';\nimport { InstanceGroup } from '../../../interfaces/InstanceGroup';\n\nexport type GraphNode = Node<NodeModel, GraphNodeData>;\nexport type GraphNodeData = {\n  resource: WorkflowNode;\n  launch_data: PromptFormValues;\n  survey_data: { [key: string]: string | string[] | { name: string }[] };\n};\nexport interface CustomNodeProps extends WithSelectionProps {\n  element: GraphElement<\n    ElementModel,\n    {\n      secondaryLabel?: string;\n      resource: WorkflowNode;\n      badge?: string;\n      badgeTextColor?: string;\n      badgeColor?: string;\n      badgeBorderColor?: string;\n    }\n  >;\n}\n\nexport type GraphEdgeData = {\n  tag: string;\n  tagStatus: EdgeStatus;\n};\nexport interface CustomEdgeProps {\n  element: GraphElement<\n    ElementModel,\n    {\n      tag: string;\n      tagStatus: EdgeStatus;\n    }\n  >;\n}\nexport interface CustomEdgeInnerProps extends Omit<CustomEdgeProps, 'element'> {\n  element: Edge<\n    EdgeModel,\n    {\n      tag: string;\n      tagStatus: EdgeStatus;\n    }\n  >;\n  dragging?: boolean;\n}\n\nexport interface CustomLabelProps {\n  children: React.ReactNode;\n  status: EdgeStatus;\n  xPoint: number;\n  yPoint: number;\n  hoverRef: (node: Element) => (() => void) | undefined;\n}\n\nexport enum JobType {\n  job = 'job',\n  workflow_job = 'workflow_job',\n  project_update = 'project_update',\n  workflow_approval = 'workflow_approval',\n  inventory_update = 'inventory_update',\n  system_job = 'system_job',\n  job_template = 'job_template',\n}\n\nexport enum EdgeStatus {\n  danger = NodeStatus.danger,\n  success = NodeStatus.success,\n  info = NodeStatus.info,\n}\n\nexport interface ControllerState {\n  modified: boolean;\n  RBAC: {\n    edit: boolean;\n    start: boolean;\n  };\n  selectedIds: string[];\n  sourceNode: Node<NodeModel, GraphNodeData> | undefined;\n  workflowTemplate: WorkflowJobTemplate;\n}\n\nexport interface NodeResource {\n  id: number;\n  name: string;\n  description: string;\n  unified_job_type?: UnifiedJobType;\n  timeout?: number;\n  type?: string;\n  inventory?: number;\n  project?: number;\n  ask_inventory_on_launch?: boolean;\n  summary_fields?: { inventory: { kind: string } };\n}\n\nexport interface PromptFormValues {\n  inventory: Partial<Inventory> | SummaryFieldInventory | null;\n  credentials:\n    | Credential[]\n    | {\n        id: number;\n        name: string;\n        credential_type: number;\n        passwords_needed?: string[];\n        vault_id?: string;\n      }[];\n  credential_passwords?: { [key: string]: string };\n  instance_groups: InstanceGroup[];\n  execution_environment: number | null | undefined;\n  diff_mode: boolean;\n  extra_vars: string;\n  forks: number;\n  job_slice_count: number;\n  job_tags: { name: string }[];\n  job_type: string;\n  labels: { name: string; id: number }[];\n  limit: string;\n  scm_branch: string;\n  skip_tags: { name: string }[];\n  timeout: number;\n  verbosity: 0 | 1 | 2 | 3 | 4 | 5;\n  organization?: number | null;\n  original?: {\n    credentials?:\n      | {\n          id: number;\n          name: string;\n          credential_type: number;\n          passwords_needed?: string[];\n          vault_id?: string;\n        }[]\n      | Credential[];\n    instance_groups?: { id: number; name: string }[];\n    labels?: { name: string; id: number }[];\n    launch_config?: LaunchConfiguration;\n  };\n}\n\nexport type AllResources =\n  | InventorySource\n  | JobTemplate\n  | Project\n  | SystemJobTemplate\n  | WorkflowApproval\n  | WorkflowJobTemplate;\n\nexport interface WizardFormValues {\n  approval_description: string;\n  approval_name: string;\n  approval_timeout: number;\n  node_alias: string;\n  node_convergence: 'any' | 'all';\n  node_days_to_keep: number;\n  resource: AllResources | NodeResource | null;\n  node_type: UnifiedJobType;\n  node_status_type?: EdgeStatus;\n  launch_config: LaunchConfiguration | null;\n  prompt: PromptFormValues;\n  inventory?: Inventory;\n  relatedJobTypeApiUrl?: string;\n  survey: { [key: string]: string | string[] };\n}\n\nexport type UnifiedJobType =\n  | 'job'\n  | 'workflow_job'\n  | 'project_update'\n  | 'workflow_approval'\n  | 'inventory_update'\n  | 'system_job';\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { EdgeStatus } from '../types';\nimport { EdgeTerminalType } from '@patternfly/react-topology';\n\nexport function useCreateEdge() {\n  const { t } = useTranslation();\n  return useCallback(\n    (source: string, target: string, tagStatus: EdgeStatus) => {\n      const tag = {\n        [EdgeStatus.success]: t('Run on success'),\n        [EdgeStatus.danger]: t('Run on fail'),\n        [EdgeStatus.info]: t('Run always'),\n      }[tagStatus];\n      const originalStatus = {\n        [EdgeStatus.success]: 'success',\n        [EdgeStatus.danger]: 'failure',\n        [EdgeStatus.info]: 'info',\n      }[tagStatus];\n\n      return {\n        id: `${source}-${target}`,\n        type: 'edge',\n        source,\n        target,\n        visible: true,\n        data: {\n          originalStatus,\n          source,\n          tag,\n          tagStatus,\n          target,\n          endTerminalType: EdgeTerminalType.directional,\n          endTerminalStatus: tagStatus,\n          endTerminalSize: 14,\n        },\n      };\n    },\n    [t]\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { UnifiedJobType } from '../types';\n\nexport function useGetNodeTypeDetail(type?: UnifiedJobType) {\n  const { t } = useTranslation();\n  const typeMapping = {\n    job: t('Job template'),\n    workflow_job: t('Workflow job template'),\n    project_update: t('Project'),\n    inventory_update: t('Inventory source'),\n    workflow_approval: t('Workflow approval'),\n    system_job: t('Management job'),\n  };\n  if (!type) return null;\n  return typeMapping[type];\n}\n","import type { UnifiedJobType } from './types';\n\nexport const GRAPH_ID = 'workflow-visualizer-graph';\n\nexport const CONNECTOR_SOURCE_DROP = 'connector-src-drop';\nexport const CONNECTOR_TARGET_DROP = 'connector-target-drop';\nexport const NODE_DIAMETER = 50;\nexport const START_NODE_ID = 'startNode';\n\nexport const RESOURCE_TYPE: Record<UnifiedJobType, UnifiedJobType> = {\n  job: 'job',\n  workflow_job: 'workflow_job',\n  project_update: 'project_update',\n  workflow_approval: 'workflow_approval',\n  inventory_update: 'inventory_update',\n  system_job: 'system_job',\n};\n","import { Label } from '@patternfly/react-core';\nimport {\n  action,\n  Edge,\n  EdgeModel,\n  GraphElement,\n  Node,\n  NodeModel,\n  NodeStatus,\n  useVisualizationController,\n} from '@patternfly/react-topology';\nimport { useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ITableColumn, TextCell, useBulkConfirmation } from '../../../../../../framework';\nimport { START_NODE_ID } from '../constants';\nimport { EdgeStatus, GraphNode, type GraphEdgeData, type GraphNodeData } from '../types';\nimport { useCreateEdge } from './useCreateEdge';\nimport { useRemoveNode } from './useRemoveNode';\n\ntype resource = {\n  summary_fields: {\n    unified_job_template: {\n      name: string;\n    };\n  };\n};\n\ntype DataType = {\n  resource?: resource;\n};\n\nexport function useRemoveGraphElements() {\n  const { t } = useTranslation();\n  const removeNode = useRemoveNode();\n  const controller = useVisualizationController();\n  const createEdge = useCreateEdge();\n  const handleRemoveNodes = action((nodes: GraphNode[]) => {\n    nodes.forEach((element) => {\n      removeNode(element);\n    });\n\n    controller.setState({ ...controller.getState(), modified: true });\n    controller.getGraph().layout();\n  });\n\n  const nodeNameColumn = useMemo<ITableColumn<Node>>(\n    () => ({\n      header: t('Name'),\n      cell: (item: Node) => {\n        const data = item.getData() as DataType;\n        const resource = data?.resource;\n        const name = resource?.summary_fields?.unified_job_template?.name;\n        return <TextCell text={name || t('DELETED')} iconSize=\"sm\" />;\n      },\n    }),\n    [t]\n  );\n  const nodeIdColumn = useMemo<ITableColumn<Node<NodeModel, GraphNodeData>>>(\n    () => ({\n      header: t('Identifier'),\n      cell: (item: GraphElement<NodeModel, GraphNodeData>) => {\n        const id = item.getData()?.resource.identifier;\n        return <TextCell text={id} iconSize=\"sm\" />;\n      },\n    }),\n    [t]\n  );\n\n  const nodeConfirmationColumns = useMemo<ITableColumn<Node<NodeModel, GraphNodeData>>[]>(\n    () => [nodeNameColumn, nodeIdColumn],\n    [nodeNameColumn, nodeIdColumn]\n  );\n\n  const nodeActionColumns = useMemo(() => [nodeNameColumn], [nodeNameColumn]);\n  const bulkAction = useBulkConfirmation<Node>();\n\n  const removeNodes = useCallback(\n    (nodes: GraphNode[]) => {\n      const hasMultipleNodes = nodes.length > 1;\n      bulkAction({\n        keyFn: (item) => item.getId(),\n        title: hasMultipleNodes ? t('Remove all steps') : t('Remove step'),\n        items: nodes,\n        confirmText: hasMultipleNodes\n          ? t('Yes, I confirm that I want to remove these {{count}} nodes.', {\n              count: nodes.length,\n            })\n          : t('Yes, I confirm that I want to remove this node.'),\n        actionButtonText: hasMultipleNodes\n          ? t('Remove all steps', { count: nodes.length })\n          : t('Remove step'),\n        isDanger: true,\n        confirmationColumns: nodeConfirmationColumns,\n        actionColumns: nodeActionColumns,\n        actionFn: () => {\n          handleRemoveNodes(nodes);\n          return Promise.resolve();\n        },\n      });\n    },\n    [nodeActionColumns, bulkAction, nodeConfirmationColumns, t, handleRemoveNodes]\n  );\n  const sourceColumn = useMemo<ITableColumn<Edge>>(\n    () => ({\n      header: t('Source Node'),\n      cell: (item: Edge) => {\n        const source = item.getSource();\n        return <TextCell text={source.getLabel() || t('DELETED')} iconSize=\"sm\" />;\n      },\n    }),\n    [t]\n  );\n  const targetColumn = useMemo<ITableColumn<Edge<EdgeModel, GraphEdgeData>>>(\n    () => ({\n      header: t('Target Node'),\n      cell: (item: Edge<EdgeModel, GraphEdgeData>) => {\n        const target = item.getTarget();\n        return <TextCell text={target.getLabel()} iconSize=\"sm\" />;\n      },\n    }),\n    [t]\n  );\n  const statusColumn = useMemo<ITableColumn<Edge<EdgeModel, GraphEdgeData>>>(\n    () => ({\n      header: t('Status'),\n      cell: (item: Edge<EdgeModel, GraphEdgeData>) => {\n        const data = item.getData();\n        if (!data) return null;\n        function getStatusColor(tagStatus: string) {\n          switch (tagStatus) {\n            case 'success':\n              return 'green';\n            case 'danger':\n              return 'red';\n            case 'info':\n              return 'blue';\n          }\n        }\n\n        return <Label color={getStatusColor(data.tagStatus)}>{data.tag}</Label>;\n      },\n    }),\n    [t]\n  );\n  const linkConfirmationColumns = useMemo<ITableColumn<Edge<EdgeModel, GraphEdgeData>>[]>(\n    () => [sourceColumn, targetColumn, statusColumn],\n    [sourceColumn, targetColumn, statusColumn]\n  );\n\n  const linkActionColumns = useMemo(\n    () => [sourceColumn, targetColumn],\n    [sourceColumn, targetColumn]\n  );\n  const linkBulkAction = useBulkConfirmation<Edge>();\n\n  const handleRemoveLink = action((element: Edge) => {\n    element.setVisible(false);\n    element.getSource().setState({ modified: true });\n    element.getTarget().setState({ modified: true });\n    element.getSource().setNodeStatus(NodeStatus.default);\n    element.getTarget().setNodeStatus(NodeStatus.default);\n    const controller = element.getController();\n    const model = controller.toModel();\n\n    controller.setState({ ...controller.getState(), modified: true });\n    const childNode = element.getTarget();\n    const childNodeTargets = childNode.getTargetEdges();\n    const visibleChildNodeTargets = childNodeTargets.filter((edge) => edge.isVisible());\n\n    !visibleChildNodeTargets.length &&\n      model.edges?.push(createEdge(START_NODE_ID, element.getTarget().getId(), EdgeStatus.info));\n\n    controller.fromModel(model, true);\n    controller.getGraph().layout();\n  });\n  const removeLink = useCallback(\n    (element: Edge) => {\n      linkBulkAction({\n        keyFn: (item) => item.getId(),\n        title: t('Remove link'),\n        items: [element],\n        confirmText: t('Yes, I confirm that I want to remove this link.'),\n        actionButtonText: t('Remove link'),\n        isDanger: true,\n        confirmationColumns: linkConfirmationColumns,\n        actionColumns: linkActionColumns,\n        actionFn: () => {\n          handleRemoveLink(element);\n          return Promise.resolve();\n        },\n      });\n    },\n    [linkActionColumns, linkBulkAction, linkConfirmationColumns, t, handleRemoveLink]\n  );\n  return { removeNodes, removeLink };\n}\n","import { useCallback } from 'react';\nimport { EdgeModel } from '@patternfly/react-topology';\nimport { useCreateEdge } from './useCreateEdge';\nimport { EdgeStatus, GraphNode } from '../types';\nimport { START_NODE_ID } from '../constants';\n\nexport function useRemoveNode() {\n  const createEdge = useCreateEdge();\n\n  return useCallback(\n    (element: GraphNode) => {\n      const newEdges: EdgeModel[] = [];\n\n      element.setVisible(false);\n      const edgesToParents = element.getTargetEdges();\n      const edgesToChildren = element.getSourceEdges();\n\n      edgesToParents.forEach((parentEdge) => {\n        parentEdge.setVisible(false);\n      });\n\n      // Create new edges from the removed node's parents to its children\n      edgesToChildren.forEach((childEdge) => {\n        childEdge.setVisible(false);\n\n        edgesToParents.forEach((parentEdge) => {\n          parentEdge.getSource().setState({ modified: true });\n\n          const newParentId = parentEdge.getSource().getId();\n          const newChildId = childEdge.getTarget().getId();\n          const newEdgeId = `${newParentId}-${newChildId}`;\n          let { tagStatus } = childEdge.getData() as { tagStatus: EdgeStatus };\n\n          // If the new parent node is the start node,\n          // set the edge status to info/always\n          if (newParentId === START_NODE_ID) {\n            tagStatus = EdgeStatus.info;\n          }\n\n          if (element.getController().getEdgeById(newEdgeId)) {\n            // If the edge already exists, set it to visible\n            element.getController().getEdgeById(newEdgeId)?.setVisible(true);\n          } else {\n            // If the edge does not exist, create a new edge\n            const newEdge = createEdge(newParentId, newChildId, tagStatus);\n            newEdges.push(newEdge);\n          }\n        });\n      });\n\n      const model = element.getController().toModel();\n      if (!model.edges) {\n        model.edges = [];\n      }\n      model.edges = [...model.edges, ...newEdges];\n\n      element.getController().fromModel(model);\n    },\n    [createEdge]\n  );\n}\n","import jsyaml from 'js-yaml';\n\nexport function jsonToYaml(jsonString: string) {\n  if (jsonString.trim() === '') {\n    return '';\n  }\n  const value = JSON.parse(jsonString) as object;\n  if (Object.entries(value).length === 0) {\n    return '';\n  }\n  return jsyaml.dump(value);\n}\nexport function isJsonString(jsonString: unknown) {\n  if (typeof jsonString !== 'string') {\n    return false;\n  }\n  let value;\n  try {\n    value = JSON.parse(jsonString) as object;\n  } catch (e) {\n    return false;\n  }\n\n  return typeof value === 'object' && value !== null;\n}\nexport function yamlToJson(yamlString: string) {\n  const value: object = jsyaml.load(yamlString) as object;\n  if (!value) {\n    return '{}';\n  }\n  if (typeof value !== 'object') {\n    throw new Error('yaml is not in object format');\n  }\n  return JSON.stringify(value, null, 2);\n}\nexport function parseVariableField(variableField: string) {\n  if (variableField === '---' || variableField === '{}') {\n    return {};\n  }\n  if (!isJsonString(variableField)) {\n    variableField = yamlToJson(variableField);\n  }\n\n  return JSON.parse(variableField) as object;\n}\n","import { useCallback, useMemo } from 'react';\nimport useSWRInfinite from 'swr/infinite';\nimport { useGetRequest } from '../../common/crud/useGet';\nimport { normalizeQueryString } from '../../common/crud/normalizeQueryString';\nimport { QueryParams } from './useAwxView';\nimport { AwxItemsResponse } from './AwxItemsResponse';\n\nexport function useAwxGetAllPages<T extends object>(url: string, queryParams?: QueryParams) {\n  const getRequest = useGetRequest<AwxItemsResponse<T>>();\n  const getKey = useCallback(\n    (pageIndex: number, previousPageData: AwxItemsResponse<T>) => {\n      if (previousPageData && !previousPageData.next) return null;\n      return `${url}${normalizeQueryString({\n        ...queryParams,\n        page: pageIndex + 1,\n        page_size: 200,\n      })}`;\n    },\n    [url, queryParams]\n  );\n\n  const { data, error, isLoading, mutate } = useSWRInfinite<AwxItemsResponse<T>, Error>(\n    getKey,\n    getRequest,\n    {\n      initialSize: 200,\n    }\n  );\n\n  const results = useMemo(() => {\n    return data?.reduce((results: T[], page: AwxItemsResponse<T>) => {\n      if (Array.isArray(page.results)) {\n        return [...results, ...page.results];\n      }\n      return results;\n    }, []);\n  }, [data]);\n\n  const refresh = useCallback(() => {\n    void mutate();\n  }, [mutate]);\n  return { results, error, isLoading, refresh };\n}\n","/**\n * Utility function to get arrays containing ids of items to be removed and added\n * based on original and upsdated items\n * @param original original list of items\n * @param current updated list of items\n * @returns object containing 2 lists: ids to be added and ids to be removed\n */\nexport function getAddedAndRemoved<T extends { id: number }>(original: T[], current: T[]) {\n  original = original || [];\n  current = current || [];\n  const added: T[] = [];\n  const removed: T[] = [];\n  original.forEach((orig) => {\n    if (!current.find((cur) => cur.id === orig.id)) {\n      removed.push(orig);\n    }\n  });\n  current.forEach((cur) => {\n    if (!original.find((orig) => orig.id === cur.id)) {\n      added.push(cur);\n    }\n  });\n  return { added, removed };\n}\n","import { action, useVisualizationController } from '@patternfly/react-topology';\nimport { useCallback } from 'react';\nimport { useAbortController } from '../../../../../../framework/hooks/useAbortController';\nimport { parseVariableField } from '../../../../../../framework/utils/codeEditorUtils';\nimport { requestGet } from '../../../../../common/crud/Data';\nimport { useDeleteRequest } from '../../../../../common/crud/useDeleteRequest';\nimport { usePatchRequest } from '../../../../../common/crud/usePatchRequest';\nimport { usePostRequest } from '../../../../../common/crud/usePostRequest';\nimport { AwxItemsResponse } from '../../../../common/AwxItemsResponse';\nimport { awxAPI } from '../../../../common/api/awx-utils';\nimport { useAwxGetAllPages } from '../../../../common/useAwxGetAllPages';\nimport { getAddedAndRemoved } from '../../../../common/util/getAddedAndRemoved';\nimport { InstanceGroup } from '../../../../interfaces/InstanceGroup';\nimport { Label } from '../../../../interfaces/Label';\nimport { Organization } from '../../../../interfaces/Organization';\nimport { WorkflowNode } from '../../../../interfaces/WorkflowNode';\nimport { RESOURCE_TYPE, START_NODE_ID } from '../constants';\nimport { ControllerState, EdgeStatus, GraphNode, GraphNodeData } from '../types';\n\ninterface WorkflowApprovalNode {\n  name: string;\n  description: string;\n  timeout: number;\n}\n\ninterface CreateWorkflowNodePayload {\n  extra_data?: object;\n  inventory?: number;\n  scm_branch?: string;\n  job_type?: string;\n  job_tags?: string;\n  skip_tags?: string;\n  limit?: string;\n  diff_mode?: boolean;\n  verbosity?: number;\n  execution_environment?: number | null;\n  forks?: number;\n  job_slice_count?: number;\n  timeout?: number;\n  unified_job_template: number;\n  all_parents_must_converge: boolean;\n  identifier?: string;\n}\ntype CreatePayloadProperty = keyof CreateWorkflowNodePayload;\n\nexport function useSaveVisualizer(templateId: string) {\n  const controller = useVisualizationController();\n  const abortController = useAbortController();\n  const deleteRequest = useDeleteRequest();\n  const patchWorkflowNode = usePatchRequest<Partial<CreateWorkflowNodePayload>, WorkflowNode>();\n  const patchWorkflowNodeApproval = usePatchRequest<WorkflowApprovalNode, WorkflowApprovalNode>();\n  const postAssociateNode = usePostRequest<{ id: number }>();\n  const postDisassociate = usePostRequest<{ id: number; disassociate: boolean }>();\n  const postWorkflowNode = usePostRequest<Partial<CreateWorkflowNodePayload>, WorkflowNode>();\n  const postWorkflowNodeApproval = usePostRequest<WorkflowApprovalNode, WorkflowApprovalNode>();\n  const processCredentials = useProcessCredentials();\n  const processInstanceGroups = useProcessInstanceGroups();\n  const processLabels = useProcessLabels();\n\n  const { refresh: workflowNodeRefresh } = useAwxGetAllPages<WorkflowNode>(\n    awxAPI`/workflow_job_templates/${templateId ?? ''}/workflow_nodes/`\n  );\n\n  return useCallback(async () => {\n    const graphNodes = controller\n      .getGraph()\n      .getNodes()\n      .filter((node) => node.getId() !== START_NODE_ID) as GraphNode[];\n    const state = controller.getState<ControllerState>();\n    const deletedNodeIds: string[] = [];\n    const associateSuccessNodes: { sourceId: string; targetId: string }[] = [];\n    const associateFailureNodes: { sourceId: string; targetId: string }[] = [];\n    const associateAlwaysNodes: { sourceId: string; targetId: string }[] = [];\n    const disassociateSuccessNodes: { sourceId: string; targetId: string }[] = [];\n    const disassociateFailureNodes: { sourceId: string; targetId: string }[] = [];\n    const disassociateAlwaysNodes: { sourceId: string; targetId: string }[] = [];\n    const newApprovalNodes: GraphNode[] = [];\n    const editedApprovalNodes: GraphNode[] = [];\n    const newNodes: GraphNode[] = [];\n    const editedNodes: GraphNode[] = [];\n\n    function setCreatedNodeId(node: GraphNode, newId: string) {\n      const nodeData = node.getData() as GraphNodeData;\n      action(() => {\n        node.setId(newId.toString());\n        node.setData({\n          ...nodeData,\n          resource: {\n            ...nodeData.resource,\n            always_nodes: [],\n            failure_nodes: [],\n            success_nodes: [],\n          },\n        });\n      })();\n    }\n\n    async function createApprovalNodes(approvalNodes: GraphNode[]) {\n      const promises = approvalNodes.map(async (node) => {\n        const nodeData = node.getData() as GraphNodeData;\n        const nodeTemplate = node.getData()?.resource?.summary_fields?.unified_job_template;\n        const nodeIdentifier = toKeyedObject('identifier', nodeData.resource.identifier);\n\n        if (!nodeTemplate) return;\n\n        const workflowNode = await postWorkflowNode(\n          awxAPI`/workflow_job_templates/${state.workflowTemplate.id.toString()}/workflow_nodes/`,\n          {\n            all_parents_must_converge: nodeData.resource.all_parents_must_converge,\n            ...nodeIdentifier,\n          },\n          abortController.signal\n        );\n\n        if (workflowNode && workflowNode.id) {\n          await postWorkflowNodeApproval(\n            awxAPI`/workflow_job_template_nodes/${workflowNode.id.toString()}/create_approval_template/`,\n            {\n              name: nodeTemplate.name,\n              description: nodeTemplate.description || '',\n              timeout: nodeTemplate.timeout || 0,\n            },\n            abortController.signal\n          );\n          setCreatedNodeId(node, workflowNode.id.toString());\n        }\n      });\n      await Promise.all(promises);\n    }\n\n    async function updateApprovalNodes(approvalNodes: GraphNode[]) {\n      const promises = approvalNodes.map(async (node) => {\n        const nodeData = node.getData() as GraphNodeData;\n        const nodeTemplate = node.getData()?.resource?.summary_fields?.unified_job_template;\n        const nodeIdentifier = toKeyedObject('identifier', nodeData.resource.identifier);\n\n        if (!nodeTemplate) return;\n\n        const workflowNode = await patchWorkflowNode(\n          awxAPI`/workflow_job_template_nodes/${node.getId()}/`,\n          {\n            all_parents_must_converge: nodeData.resource.all_parents_must_converge,\n            ...nodeIdentifier,\n          },\n          abortController.signal\n        );\n\n        if (workflowNode && workflowNode.id) {\n          // wf approval node doesn't exist, create it\n          if (nodeTemplate.id === -1) {\n            await postWorkflowNodeApproval(\n              awxAPI`/workflow_job_template_nodes/${workflowNode.id.toString()}/create_approval_template/`,\n              {\n                name: nodeTemplate.name,\n                description: nodeTemplate.description || '',\n                timeout: nodeTemplate.timeout || 0,\n              },\n              abortController.signal\n            );\n            setCreatedNodeId(node, workflowNode.id.toString());\n          } else {\n            await patchWorkflowNodeApproval(\n              awxAPI`/workflow_approval_templates/${nodeTemplate.id.toString()}/`,\n              {\n                name: nodeTemplate.name,\n                description: nodeTemplate.description || '',\n                timeout: nodeTemplate.timeout || 0,\n              },\n              abortController.signal\n            );\n          }\n        }\n      });\n      await Promise.all(promises);\n    }\n\n    async function createNewNodes(newNodes: GraphNode[]) {\n      const promises = newNodes.map(async (node) => {\n        const createNodePayload: Partial<CreateWorkflowNodePayload> = {};\n        const setValue = <K extends CreatePayloadProperty>(\n          key: K,\n          value: CreateWorkflowNodePayload[K],\n          isPrompt: boolean = false\n        ) => {\n          if (isPrompt) {\n            const prompts = launch_data?.original?.launch_config;\n            const promptMapper = {\n              diff_mode: prompts?.ask_diff_mode_on_launch,\n              extra_data: prompts?.ask_variables_on_launch,\n              execution_environment: prompts?.ask_execution_environment_on_launch,\n              forks: prompts?.ask_forks_on_launch,\n              inventory: prompts?.ask_inventory_on_launch,\n              job_slice_count: prompts?.ask_job_slice_count_on_launch,\n              job_type: prompts?.ask_job_type_on_launch,\n              limit: prompts?.ask_limit_on_launch,\n              scm_branch: prompts?.ask_scm_branch_on_launch,\n              skip_tags: prompts?.ask_skip_tags_on_launch,\n              job_tags: prompts?.ask_tags_on_launch,\n              timeout: prompts?.ask_timeout_on_launch,\n              verbosity: prompts?.ask_verbosity_on_launch,\n            } as Record<K, boolean | undefined>;\n\n            if (!promptMapper[key]) {\n              return;\n            }\n          }\n\n          if (typeof value === 'undefined' || value === null || value === '') {\n            return;\n          }\n\n          createNodePayload[key] = value;\n        };\n        const nodeData = node.getData() as GraphNodeData;\n        const { launch_data, resource, survey_data } = nodeData;\n        const { unified_job_template } = resource.summary_fields;\n\n        if (!unified_job_template) return;\n\n        setValue('all_parents_must_converge', resource.all_parents_must_converge);\n        setValue('identifier', resource?.identifier);\n        setValue('unified_job_template', unified_job_template.id);\n\n        // Prompt values\n        setValue('diff_mode', launch_data?.diff_mode, true);\n        setValue('execution_environment', launch_data?.execution_environment, true);\n        setValue('forks', launch_data?.forks, true);\n        setValue('inventory', launch_data?.inventory?.id, true);\n        setValue('job_slice_count', launch_data?.job_slice_count, true);\n        setValue('job_tags', launch_data?.job_tags?.map((tag) => tag.name).join(','), true);\n        setValue('job_type', launch_data?.job_type, true);\n        setValue('limit', launch_data?.limit, true);\n        setValue('scm_branch', launch_data?.scm_branch, true);\n        setValue('skip_tags', launch_data?.job_tags?.map((tag) => tag.name).join(','), true);\n        setValue('timeout', launch_data?.timeout, true);\n        setValue('verbosity', launch_data?.verbosity, true);\n\n        if (\n          unified_job_template.unified_job_type === RESOURCE_TYPE.system_job &&\n          resource.extra_data?.days\n        ) {\n          setValue('extra_data', { days: resource.extra_data.days });\n        } else if (launch_data?.extra_vars) {\n          setValue('extra_data', parseVariableField(launch_data?.extra_vars), true);\n        }\n        if (survey_data) {\n          setValue('extra_data', {\n            ...parseVariableField(launch_data?.extra_vars ?? '---'),\n            ...survey_data,\n          });\n        }\n\n        const newNode = await postWorkflowNode(\n          awxAPI`/workflow_job_templates/${state.workflowTemplate.id.toString()}/workflow_nodes/`,\n          createNodePayload,\n          abortController.signal\n        );\n\n        if (!newNode.id) return;\n        const newNodeId = newNode.id.toString();\n        await processLabels(newNodeId, launch_data);\n        await processInstanceGroups(newNodeId, launch_data);\n        await processCredentials(newNodeId, launch_data);\n        setCreatedNodeId(node, newNodeId.toString());\n      });\n      await Promise.all(promises);\n    }\n\n    async function updateExistingNodes(editedNodes: GraphNode[]) {\n      await Promise.allSettled(\n        editedNodes.map(async (node) => {\n          const updatedNodePayload: Partial<CreateWorkflowNodePayload> = {};\n          const nodeData = node.getData() as GraphNodeData;\n          const nodeId = node.getId();\n          const { launch_data, survey_data, resource } = nodeData;\n          const { unified_job_template } = resource.summary_fields;\n\n          if (!unified_job_template) return;\n\n          const setValue = <K extends CreatePayloadProperty>(\n            key: K,\n            value: CreateWorkflowNodePayload[K],\n            isPrompt: boolean = false\n          ) => {\n            if (isPrompt) {\n              const prompts = launch_data?.original?.launch_config;\n              const promptMapper = {\n                diff_mode: prompts?.ask_diff_mode_on_launch,\n                execution_environment: prompts?.ask_execution_environment_on_launch,\n                forks: prompts?.ask_forks_on_launch,\n                inventory: prompts?.ask_inventory_on_launch,\n                job_slice_count: prompts?.ask_job_slice_count_on_launch,\n                job_type: prompts?.ask_job_type_on_launch,\n                limit: prompts?.ask_limit_on_launch,\n                scm_branch: prompts?.ask_scm_branch_on_launch,\n                skip_tags: prompts?.ask_skip_tags_on_launch,\n                job_tags: prompts?.ask_tags_on_launch,\n                timeout: prompts?.ask_timeout_on_launch,\n                verbosity: prompts?.ask_verbosity_on_launch,\n              } as Record<K, boolean | undefined>;\n\n              if (!promptMapper[key]) {\n                return;\n              }\n            }\n\n            if (typeof value === 'undefined' || value === null || value === '') {\n              return;\n            }\n\n            updatedNodePayload[key] = value;\n          };\n\n          setValue('all_parents_must_converge', resource.all_parents_must_converge);\n          setValue('identifier', resource.identifier);\n          setValue('unified_job_template', unified_job_template.id);\n\n          // Prompt values\n          setValue('diff_mode', launch_data?.diff_mode, true);\n          setValue('execution_environment', launch_data?.execution_environment, true);\n          setValue('forks', launch_data?.forks, true);\n          setValue('inventory', launch_data?.inventory?.id, true);\n          setValue('job_slice_count', launch_data?.job_slice_count, true);\n          setValue('job_tags', launch_data?.job_tags?.map((tag) => tag).join(','), true);\n          setValue('job_type', launch_data?.job_type, true);\n          setValue('limit', launch_data?.limit, true);\n          setValue('scm_branch', launch_data?.scm_branch, true);\n          setValue('skip_tags', launch_data?.job_tags?.map((tag) => tag).join(','), true);\n          setValue('timeout', launch_data?.timeout, true);\n          setValue('verbosity', launch_data?.verbosity, true);\n\n          if (\n            unified_job_template.unified_job_type === RESOURCE_TYPE.system_job &&\n            resource.extra_data?.days\n          ) {\n            setValue('extra_data', { days: resource.extra_data.days });\n          } else if (launch_data?.extra_vars) {\n            setValue('extra_data', parseVariableField(launch_data?.extra_vars), true);\n          }\n          if (survey_data) {\n            setValue('extra_data', {\n              ...parseVariableField(launch_data?.extra_vars ?? '---'),\n              ...survey_data,\n            });\n          }\n\n          await processLabels(nodeId, launch_data);\n          await processInstanceGroups(nodeId, launch_data);\n          await processCredentials(nodeId, launch_data);\n          await patchWorkflowNode(\n            awxAPI`/workflow_job_template_nodes/${nodeId}/`,\n            updatedNodePayload,\n            abortController.signal\n          );\n        })\n      );\n    }\n\n    function handleNodeDeletion(node: GraphNode) {\n      deletedNodeIds.push(node.getId());\n    }\n\n    function handleNewNode(node: GraphNode) {\n      const nodeData = node.getData() as GraphNodeData;\n\n      if (\n        nodeData.resource.summary_fields?.unified_job_template?.unified_job_type ===\n        RESOURCE_TYPE.workflow_approval\n      ) {\n        newApprovalNodes.push(node);\n      } else {\n        newNodes.push(node);\n      }\n    }\n\n    function handleEditNode(node: GraphNode) {\n      const nodeData = node.getData() as GraphNodeData;\n      if (\n        nodeData.resource.summary_fields?.unified_job_template?.unified_job_type ===\n        RESOURCE_TYPE.workflow_approval\n      ) {\n        editedApprovalNodes.push(node);\n      } else {\n        editedNodes.push(node);\n      }\n    }\n\n    function handleEdgeModification(node: GraphNode) {\n      const nodeData = node.getData() as GraphNodeData;\n      const sourceEdges = node.getSourceEdges();\n      const {\n        resource: { always_nodes = [], failure_nodes = [], success_nodes = [] },\n      } = nodeData;\n\n      if (success_nodes.length > 0) {\n        success_nodes.forEach((successNodeId) => {\n          sourceEdges.forEach((edge) => {\n            const { tagStatus } = edge.getData() as { tagStatus: EdgeStatus };\n            if (successNodeId.toString() === edge.getTarget().getId()) {\n              if (tagStatus !== EdgeStatus.success || !edge.isVisible()) {\n                disassociateSuccessNodes.push({\n                  sourceId: node.getId(),\n                  targetId: successNodeId.toString(),\n                });\n              }\n            }\n          });\n        });\n      }\n      if (failure_nodes.length > 0) {\n        failure_nodes.forEach((failureNodeId) => {\n          sourceEdges.forEach((edge) => {\n            const { tagStatus } = edge.getData() as { tagStatus: EdgeStatus };\n            if (failureNodeId.toString() === edge.getTarget().getId()) {\n              if (tagStatus !== EdgeStatus.danger || !edge.isVisible()) {\n                disassociateFailureNodes.push({\n                  sourceId: node.getId(),\n                  targetId: failureNodeId.toString(),\n                });\n              }\n            }\n          });\n        });\n      }\n\n      if (always_nodes.length > 0) {\n        always_nodes.forEach((alwaysNodeId) => {\n          sourceEdges.forEach((edge) => {\n            const { tagStatus } = edge.getData() as { tagStatus: EdgeStatus };\n            if (alwaysNodeId.toString() === edge.getTarget().getId()) {\n              if (tagStatus !== EdgeStatus.info || !edge.isVisible()) {\n                disassociateAlwaysNodes.push({\n                  sourceId: node.getId(),\n                  targetId: alwaysNodeId.toString(),\n                });\n              }\n            }\n          });\n        });\n      }\n\n      sourceEdges.forEach((edge) => {\n        if (!edge.isVisible()) return;\n\n        const targetId = edge.getTarget().getId();\n        const { tagStatus } = edge.getData() as { tagStatus: EdgeStatus };\n\n        switch (tagStatus) {\n          case EdgeStatus.success:\n            if (!success_nodes?.includes(parseInt(targetId, 10))) {\n              associateSuccessNodes.push({ sourceId: node.getId(), targetId });\n            }\n            break;\n          case EdgeStatus.danger:\n            if (!failure_nodes?.includes(parseInt(targetId, 10))) {\n              associateFailureNodes.push({ sourceId: node.getId(), targetId });\n            }\n            break;\n          case EdgeStatus.info:\n            if (!always_nodes?.includes(parseInt(targetId, 10))) {\n              associateAlwaysNodes.push({ sourceId: node.getId(), targetId });\n            }\n            break;\n          default:\n            break;\n        }\n      });\n    }\n\n    graphNodes.forEach((node) => {\n      const nodeId = node.getId();\n      const nodeState = node.getState<{ modified: boolean }>();\n      const isDeleted = !node.isVisible();\n      const isNewNode = nodeId.includes('unsavedNode');\n      const isEdited = Boolean(nodeState?.modified) && !isDeleted && !isNewNode;\n\n      if (isDeleted && !isNewNode) {\n        handleNodeDeletion(node);\n      }\n      if (isNewNode && !isDeleted) {\n        handleNewNode(node);\n      }\n      if (isEdited && !isDeleted) {\n        handleEditNode(node);\n      }\n    });\n\n    await createApprovalNodes(newApprovalNodes);\n    await createNewNodes(newNodes);\n    await updateApprovalNodes(editedApprovalNodes);\n    await updateExistingNodes(editedNodes);\n    graphNodes.forEach((node) => {\n      const nodeState = node.getState<{ modified: boolean }>();\n      const isDeleted = !node.isVisible();\n      const isEdited = Boolean(nodeState?.modified) && !isDeleted;\n\n      if (isEdited) {\n        handleEdgeModification(node);\n      }\n    });\n\n    await Promise.all(\n      disassociateSuccessNodes.map((node) =>\n        postDisassociate(\n          awxAPI`/workflow_job_template_nodes/${node.sourceId}/success_nodes/`,\n          {\n            id: Number(node.targetId),\n            disassociate: true,\n          },\n          abortController.signal\n        )\n      )\n    );\n    await Promise.all(\n      disassociateFailureNodes.map((node) =>\n        postDisassociate(\n          awxAPI`/workflow_job_template_nodes/${node.sourceId}/failure_nodes/`,\n          {\n            id: Number(node.targetId),\n            disassociate: true,\n          },\n          abortController.signal\n        )\n      )\n    );\n    await Promise.all(\n      disassociateAlwaysNodes.map((node) =>\n        postDisassociate(\n          awxAPI`/workflow_job_template_nodes/${node.sourceId}/always_nodes/`,\n          {\n            id: Number(node.targetId),\n            disassociate: true,\n          },\n          abortController.signal\n        )\n      )\n    );\n    await Promise.all(\n      associateSuccessNodes.map((node) =>\n        postAssociateNode(\n          awxAPI`/workflow_job_template_nodes/${node.sourceId}/success_nodes/`,\n          {\n            id: Number(node.targetId),\n          },\n          abortController.signal\n        )\n      )\n    );\n    await Promise.all(\n      associateFailureNodes.map((node) =>\n        postAssociateNode(\n          awxAPI`/workflow_job_template_nodes/${node.sourceId}/failure_nodes/`,\n          {\n            id: Number(node.targetId),\n          },\n          abortController.signal\n        )\n      )\n    );\n    await Promise.all(\n      associateAlwaysNodes.map((node) =>\n        postAssociateNode(\n          awxAPI`/workflow_job_template_nodes/${node.sourceId}/always_nodes/`,\n          {\n            id: Number(node.targetId),\n          },\n          abortController.signal\n        )\n      )\n    );\n    await Promise.all(\n      deletedNodeIds.map((id) =>\n        deleteRequest(awxAPI`/workflow_job_template_nodes/${id}/`, abortController.signal)\n      )\n    );\n\n    action(() => {\n      workflowNodeRefresh();\n      controller.setState({ ...state, modified: false });\n      controller\n        .getElements()\n        .forEach((element) => element.setState({ ...element.getState(), modified: false }));\n    })();\n  }, [\n    controller,\n    abortController,\n    deleteRequest,\n    patchWorkflowNode,\n    patchWorkflowNodeApproval,\n    postAssociateNode,\n    postDisassociate,\n    postWorkflowNode,\n    postWorkflowNodeApproval,\n    processCredentials,\n    processInstanceGroups,\n    processLabels,\n    workflowNodeRefresh,\n  ]);\n}\n\nexport function toKeyedObject(\n  key: string,\n  value: string | number | undefined | null\n): { [key: string]: string | number } | object {\n  if ((typeof value === 'string' && value !== '') || typeof value === 'number') {\n    return { [key]: value };\n  } else {\n    return {};\n  }\n}\n\nasync function getDefaultOrganization(): Promise<number> {\n  const itemsResponse = await requestGet<AwxItemsResponse<Organization>>(awxAPI`/organizations/`);\n  return itemsResponse.results[0].id || 1;\n}\n\nconst useProcessLabels = () => {\n  const abortController = useAbortController();\n  const postDisassociate = usePostRequest<{ id: number; disassociate: boolean }>();\n  const postAssociateLabel = usePostRequest<{ name: string; organization: number }>();\n\n  return useCallback(\n    async (nodeId: string, launch_data: GraphNodeData['launch_data']) => {\n      const hasLabelsPrompt =\n        launch_data?.original?.launch_config?.ask_labels_on_launch ||\n        launch_data?.labels?.length > 0;\n      const existingLabels = launch_data?.original?.labels;\n\n      if (hasLabelsPrompt) {\n        const defaultOrganization = launch_data.organization ?? (await getDefaultOrganization());\n\n        const { added, removed } = getAddedAndRemoved(\n          launch_data?.original?.labels || [],\n          launch_data?.labels || ([] as Label[])\n        );\n\n        const disassociationPromises = removed.map((label: { id: number }) =>\n          postDisassociate(\n            awxAPI`/workflow_job_template_nodes/${nodeId}/labels/`,\n            {\n              id: label.id,\n              disassociate: true,\n            },\n            abortController.signal\n          )\n        );\n\n        const associationPromises = added.map(\n          (label: { name: string; id?: number; organization?: number }) =>\n            postAssociateLabel(\n              awxAPI`/workflow_job_template_nodes/${nodeId}/labels/`,\n              {\n                name: label.name,\n                organization: label?.organization ?? defaultOrganization,\n              },\n              abortController.signal\n            )\n        );\n\n        await Promise.all([...disassociationPromises, ...associationPromises]);\n      } else if (existingLabels) {\n        const disassociationPromises = existingLabels.map((label: { id: number }) =>\n          postDisassociate(\n            awxAPI`/workflow_job_template_nodes/${nodeId}/labels/`,\n            {\n              id: label.id,\n              disassociate: true,\n            },\n            abortController.signal\n          )\n        );\n        await Promise.all(disassociationPromises);\n      }\n    },\n    [postDisassociate, postAssociateLabel, abortController]\n  );\n};\n\nconst useProcessInstanceGroups = () => {\n  const abortController = useAbortController();\n  const postDisassociate = usePostRequest<{ id: number; disassociate: boolean }>();\n  const postAssociateInstanceGroup = usePostRequest<{ id: number }, InstanceGroup>();\n\n  return useCallback(\n    async (nodeId: string, launch_data: GraphNodeData['launch_data']) => {\n      const hasInstanceGroupsPrompt =\n        launch_data?.original?.launch_config?.ask_instance_groups_on_launch ||\n        launch_data?.instance_groups?.length > 0;\n      const existingInstanceGroups = launch_data?.original?.instance_groups;\n\n      if (hasInstanceGroupsPrompt) {\n        const { added, removed } = getAddedAndRemoved(\n          launch_data?.original?.instance_groups || [],\n          launch_data?.instance_groups ? launch_data.instance_groups : ([] as { id: number }[])\n        );\n\n        const disassociationPromises = removed.map((group: { id: number }) =>\n          postDisassociate(\n            awxAPI`/workflow_job_template_nodes/${nodeId}/instance_groups/`,\n            {\n              id: group.id,\n              disassociate: true,\n            },\n            abortController.signal\n          )\n        );\n\n        const associationPromises = added.map((group) =>\n          postAssociateInstanceGroup(\n            awxAPI`/workflow_job_template_nodes/${nodeId}/instance_groups/`,\n            {\n              id: group.id,\n            },\n            abortController.signal\n          )\n        );\n\n        await Promise.all([...disassociationPromises, ...associationPromises]);\n      } else if (existingInstanceGroups) {\n        const disassociationPromises = existingInstanceGroups.map((group: { id: number }) =>\n          postDisassociate(\n            awxAPI`/workflow_job_template_nodes/${nodeId}/instance_groups/`,\n            {\n              id: group.id,\n              disassociate: true,\n            },\n            abortController.signal\n          )\n        );\n        await Promise.all(disassociationPromises);\n      }\n    },\n    [postDisassociate, postAssociateInstanceGroup, abortController]\n  );\n};\n\nconst useProcessCredentials = () => {\n  const abortController = useAbortController();\n  const postDisassociate = usePostRequest<{ id: number; disassociate: boolean }>();\n  const postAssociateCredential = usePostRequest<{ id: number }, Credential>();\n\n  return useCallback(\n    async (nodeId: string, launch_data: GraphNodeData['launch_data']) => {\n      const promptCredentials = launch_data?.credentials || [];\n      const templateCredentials = launch_data?.original?.launch_config?.defaults?.credentials || [];\n      const nodeCredentials = launch_data?.original?.credentials || [];\n\n      if (launch_data?.credentials) {\n        const { added, removed } = getAddedAndRemovedCredentials(\n          nodeCredentials,\n          promptCredentials,\n          templateCredentials\n        );\n        const disassociationPromises = removed.map((credential: { id: number }) =>\n          postDisassociate(\n            awxAPI`/workflow_job_template_nodes/${nodeId}/credentials/`,\n            {\n              id: credential.id,\n              disassociate: true,\n            },\n            abortController.signal\n          )\n        );\n\n        const associationPromises = added.map((credential) =>\n          postAssociateCredential(\n            awxAPI`/workflow_job_template_nodes/${nodeId}/credentials/`,\n            {\n              id: credential.id,\n            },\n            abortController.signal\n          )\n        );\n\n        await Promise.all([...disassociationPromises, ...associationPromises]);\n      }\n    },\n    [postDisassociate, postAssociateCredential, abortController]\n  );\n};\n\ninterface Credential {\n  id: number;\n  name: string;\n  credential_type: number;\n}\nconst getAddedAndRemovedCredentials = (\n  nodeCredentials: Credential[],\n  promptCredentials: Credential[],\n  templateCredentials: Credential[]\n) => {\n  // Step 1: Get the aggregate credentials from the template and node\n  const aggregateCredentials = [...nodeCredentials, ...templateCredentials];\n\n  // Missing step - vault ids are not being compared\n\n  // Step 2: Add credentials from prompt that are not in the aggregate\n  const added = promptCredentials.filter(\n    (promptCredential) =>\n      !aggregateCredentials.find(\n        (aggregateCredential) => aggregateCredential.id === promptCredential.id\n      )\n  );\n\n  // Step 3: Remove credentials from the aggregate that are not in the prompt\n  const removed = nodeCredentials.filter(\n    (nodeCredential) =>\n      !promptCredentials.find((promptCredential) => promptCredential.id === nodeCredential.id)\n  );\n\n  return { added, removed };\n};\n","import { useTranslation } from 'react-i18next';\n\nexport function useGetTimeoutString(value: number) {\n  const { t } = useTranslation();\n  const timeout = value || 0;\n  const minutes = Math.floor(timeout / 60);\n  const seconds = Math.floor(timeout % 60);\n  return t('{{minutes}} min {{seconds}} sec ', {\n    minutes: minutes.toString(),\n    seconds: seconds.toString(),\n  });\n}\n","import { JobTemplateForm } from '../../interfaces/JobTemplateForm';\nimport { JobTemplate } from '../../interfaces/JobTemplate';\nimport { InstanceGroup } from '../../interfaces/InstanceGroup';\n\nexport function getJobTemplateDefaultValues(\n  t: (string: string) => string,\n  template?: JobTemplate,\n  instanceGroups?: InstanceGroup[]\n): JobTemplateForm | undefined {\n  if (!template) return undefined;\n  return {\n    id: template.id || undefined,\n    allow_simultaneous: template.allow_simultaneous || false,\n    ask_credential_on_launch: template.ask_credential_on_launch || false,\n    ask_diff_mode_on_launch: template.ask_diff_mode_on_launch || false,\n    ask_execution_environment_on_launch: template.ask_execution_environment_on_launch || false,\n    ask_forks_on_launch: template.ask_forks_on_launch || false,\n    ask_instance_groups_on_launch: template.ask_instance_groups_on_launch || false,\n    ask_inventory_on_launch: template.ask_inventory_on_launch || false,\n    ask_job_slice_count_on_launch: template.ask_job_slice_count_on_launch || false,\n    ask_job_type_on_launch: template.ask_job_type_on_launch || false,\n    ask_labels_on_launch: template.ask_labels_on_launch || false,\n    ask_limit_on_launch: template.ask_limit_on_launch || false,\n    ask_scm_branch_on_launch: template.ask_scm_branch_on_launch || false,\n    ask_skip_tags_on_launch: template.ask_skip_tags_on_launch || false,\n    ask_tags_on_launch: template.ask_tags_on_launch || false,\n    ask_timeout_on_launch: template.ask_timeout_on_launch || false,\n    ask_variables_on_launch: template.ask_variables_on_launch || false,\n    ask_verbosity_on_launch: template.ask_verbosity_on_launch || false,\n    become_enabled: template.become_enabled || false,\n    credentials: template.summary_fields?.credentials || [],\n    description: template.description || '',\n    diff_mode: template.diff_mode || false,\n    execution_environment: template.summary_fields?.execution_environment || null,\n    extra_vars: template.extra_vars || '---\\n',\n    forks: template.forks || 0,\n    host_config_key: template.host_config_key || '',\n    instance_groups: instanceGroups || [],\n    inventory: template.summary_fields?.inventory || null,\n    job_slice_count: template.job_slice_count || 1,\n    job_tags: parseStringToTagArray(template.job_tags || '') || [],\n    job_type: template.job_type || 'run',\n    labels: template.summary_fields?.labels?.results || [],\n    limit: template.limit || '',\n    name: template.name || '',\n    organization: template.organization || undefined,\n    playbook: template.playbook || '',\n    prevent_instance_group_fallback: template.prevent_instance_group_fallback || false,\n    project: template.summary_fields?.project,\n    scm_branch: template.scm_branch,\n    skip_tags: parseStringToTagArray(template.skip_tags || '') || [],\n    timeout: template.timeout || 0,\n    use_fact_cache: template.use_fact_cache || false,\n    verbosity: template.verbosity ?? 0,\n    webhook_service: template.webhook_service || undefined,\n    webhook_url: template.related?.webhook_receiver\n      ? `${document.location.origin}${template.related.webhook_receiver}`\n      : t('a new webhook url will be generated on save.').toUpperCase(),\n    webhook_key: t('a new webhook key will be generated on save.').toUpperCase(),\n    webhook_credential: template.webhook_credential,\n\n    isProvisioningCallbackEnabled: Boolean(template.related?.callback),\n    isWebhookEnabled: Boolean(template.related?.webhook_receiver),\n    related: {\n      webhook_receiver: template.related?.webhook_receiver || '',\n      callback: template.related?.callback\n        ? `${document.location.origin}${template.related.callback}`\n        : '',\n      webhook_key: template.related?.webhook_key || '',\n    },\n  };\n}\n\nexport function parseStringToTagArray(str: string) {\n  const string = str || '';\n  if (string.trim().length === 0) return [];\n  return string?.split(',')?.map((tag) => ({ name: tag, label: tag, value: tag }));\n}\n\nexport function stringifyTags(tags: { name: string }[]) {\n  const stringifiedTags = tags.filter((tag) => {\n    if (tag.name !== '') return tag.name;\n  });\n  return stringifiedTags.map((i) => i.name).join(',');\n}\n","import { stringIsUUID } from '../../../../common/util/strings';\nimport type { LaunchConfiguration } from '../../../../interfaces/LaunchConfiguration';\nimport type { AllResources, NodeResource, UnifiedJobType } from '../types';\nimport { RESOURCE_TYPE } from '../constants';\n\nexport function replaceIdentifier(identifier: string, alias: string): string {\n  if (stringIsUUID(identifier) && typeof alias === 'string' && alias !== '') {\n    return alias;\n  }\n  if (!stringIsUUID(identifier) && identifier !== alias) {\n    return alias;\n  }\n  return identifier;\n}\n\nexport function hasDaysToKeep(node: NodeResource | AllResources | null) {\n  if (!node || !('job_type' in node) || !node.job_type) return false;\n  return ['cleanup_jobs', 'cleanup_activitystream'].includes(node.job_type);\n}\n\nexport function getValueBasedOnJobType(\n  nodeType: UnifiedJobType,\n  defaultValue: string,\n  workflowValue: string\n): string {\n  return nodeType === RESOURCE_TYPE.workflow_approval ? workflowValue : defaultValue;\n}\n\nexport function getConvergenceType(convergence: boolean | null | undefined): 'any' | 'all' {\n  if (convergence === undefined || convergence === null) {\n    return 'any';\n  } else {\n    return convergence ? 'all' : 'any';\n  }\n}\n\nexport function getNodeLabel(name: string, alias: string): string {\n  if (!stringIsUUID(alias) && alias !== '') {\n    return alias;\n  }\n  return name;\n}\n\nexport function shouldHideOtherStep(launchData: LaunchConfiguration) {\n  if (Object.keys(launchData).length === 0) return true;\n  return !(\n    launchData.ask_credential_on_launch ||\n    launchData.ask_diff_mode_on_launch ||\n    launchData.ask_execution_environment_on_launch ||\n    launchData.ask_forks_on_launch ||\n    launchData.ask_instance_groups_on_launch ||\n    launchData.ask_inventory_on_launch ||\n    launchData.ask_job_slice_count_on_launch ||\n    launchData.ask_job_type_on_launch ||\n    launchData.ask_labels_on_launch ||\n    launchData.ask_limit_on_launch ||\n    launchData.ask_scm_branch_on_launch ||\n    launchData.ask_skip_tags_on_launch ||\n    launchData.ask_tags_on_launch ||\n    launchData.ask_timeout_on_launch ||\n    launchData.ask_variables_on_launch ||\n    launchData.ask_verbosity_on_launch\n  );\n}\n","import { useCallback } from 'react';\nimport { awxAPI } from '../../../../common/api/awx-utils';\nimport { stringIsUUID } from '../../../../common/util/strings';\nimport { requestGet } from '../../../../../common/crud/Data';\nimport { AwxItemsResponse } from '../../../../common/AwxItemsResponse';\nimport { parseStringToTagArray } from '../../JobTemplateFormHelpers';\nimport type { Credential } from '../../../../interfaces/Credential';\nimport type { InstanceGroup } from '../../../../interfaces/InstanceGroup';\nimport type { Label } from '../../../../interfaces/Label';\nimport type { LaunchConfiguration } from '../../../../interfaces/LaunchConfiguration';\nimport type { Survey } from '../../../../interfaces/Survey';\nimport type { WorkflowNode } from '../../../../interfaces/WorkflowNode';\nimport { EdgeStatus, GraphNode, NodeResource, PromptFormValues, WizardFormValues } from '../types';\nimport { getConvergenceType, getValueBasedOnJobType, shouldHideOtherStep } from '../wizard/helpers';\nimport { jsonToYaml } from '../../../../../../framework/utils/codeEditorUtils';\nimport { RESOURCE_TYPE } from '../constants';\n\ninterface WizardStepState {\n  nodeTypeStep: Partial<WizardFormValues>;\n  nodePromptsStep?: { prompt: Partial<PromptFormValues> };\n}\n\nexport function useNodeTypeStepDefaults(): (node?: GraphNode) => CommonNodeValues {\n  return useCallback((node?: GraphNode) => {\n    if (!node) {\n      return defaultMapper;\n    }\n\n    const nodeData = node?.getData();\n    const { resource } = nodeData || {};\n    const nodeUJT = resource?.summary_fields?.unified_job_template;\n    const nodeType = nodeUJT?.unified_job_type;\n    const nodeIdentifier = stringIsUUID(resource?.identifier || '') ? '' : resource?.identifier;\n    const nodeConvergence = getConvergenceType(resource?.all_parents_must_converge);\n    const nodeDaysToKeep = resource?.extra_data?.days;\n    const approvalTimeout = nodeUJT?.timeout;\n    const approvalName = nodeType ? getValueBasedOnJobType(nodeType, '', nodeUJT?.name ?? '') : '';\n    const approvalDescription = nodeType\n      ? getValueBasedOnJobType(nodeType, '', nodeUJT?.description ?? '')\n      : '';\n\n    return {\n      approval_description: approvalDescription ?? defaultMapper.approval_description,\n      approval_name: approvalName ?? defaultMapper.approval_name,\n      approval_timeout: approvalTimeout ?? defaultMapper.approval_timeout,\n      node_alias: nodeIdentifier ?? defaultMapper.node_alias,\n      node_convergence: nodeConvergence ?? defaultMapper.node_convergence,\n      node_days_to_keep: nodeDaysToKeep ?? defaultMapper.node_days_to_keep,\n      resource: nodeUJT ?? defaultMapper.resource,\n      node_type: nodeType || defaultMapper.node_type,\n    };\n  }, []);\n}\n\ntype CommonNodeValues = Omit<WizardFormValues, 'prompt' | 'launch_config' | 'survey'>;\nconst defaultMapper: CommonNodeValues = {\n  approval_description: '',\n  approval_name: '',\n  approval_timeout: 0,\n  node_alias: '',\n  node_convergence: 'any',\n  node_days_to_keep: 30,\n  resource: null,\n  node_type: RESOURCE_TYPE.job,\n  node_status_type: EdgeStatus.info,\n};\n\nexport function useGetInitialValues(): (node: GraphNode) => Promise<WizardStepState> {\n  const nodeTypeStepDefaults = useNodeTypeStepDefaults();\n  return useCallback(\n    async (node: GraphNode): Promise<WizardStepState> => {\n      const nodeTypeStep = nodeTypeStepDefaults(node);\n      const nodeData = node.getData();\n      const nodeId = node.getId();\n      const isNewNode = nodeId.includes('unsavedNode');\n\n      const launch = await getLaunchData(node);\n      const hidePromptStep = launch ? shouldHideOtherStep(launch) : true;\n      const hideSurveyStep = launch?.survey_enabled === false;\n\n      const nodeCredentials =\n        launch?.ask_credential_on_launch && !isNewNode ? await getCredentialData(nodeId) : [];\n      const nodeLabels =\n        launch?.ask_labels_on_launch && !isNewNode ? await getLabelData(nodeId) : [];\n      const nodeInstanceGroups =\n        launch?.ask_instance_groups_on_launch && !isNewNode\n          ? await getInstanceGroupData(nodeId)\n          : [];\n\n      const prompt = nodeData?.launch_data;\n      const defaults = nodeData?.resource;\n      const original = {\n        credentials: nodeCredentials,\n        instance_groups: nodeInstanceGroups,\n        labels: nodeLabels,\n      };\n\n      let aggregateCredentials;\n\n      const UJT = defaults?.summary_fields?.unified_job_template;\n      if (UJT?.id && UJT?.unified_job_type === RESOURCE_TYPE.job) {\n        const templateCredentials = await getTemplateCredentialData(UJT.id.toString());\n\n        aggregateCredentials = getAggregateCredentials(\n          nodeCredentials,\n          prompt?.credentials,\n          templateCredentials\n        );\n      }\n\n      let extraVarsWithoutSurvey = { ...(defaults?.extra_data || {}) };\n      let surveyValues = nodeData?.resource?.extra_data;\n\n      if (launch?.ask_variables_on_launch && launch.survey_enabled) {\n        const surveySpec = await getSurveySpec(\n          nodeData?.resource?.summary_fields?.unified_job_template\n        );\n        if (surveySpec?.spec) {\n          const { extraVars, surveyData } = extractSurveyDataFromExtraVars(\n            extraVarsWithoutSurvey,\n            surveySpec\n          );\n          extraVarsWithoutSurvey = extraVars;\n          surveyValues = surveyData;\n        }\n      }\n\n      const nodePromptsValues = {\n        credentials: aggregateCredentials ?? (nodeCredentials || []),\n        diff_mode: prompt?.diff_mode ?? (defaults?.diff_mode || false),\n        execution_environment:\n          prompt?.execution_environment ?? (defaults?.execution_environment || null),\n        extra_vars: prompt?.extra_vars ?? jsonToYaml(JSON.stringify(extraVarsWithoutSurvey)),\n        forks: prompt?.forks ?? (defaults?.forks || 0),\n        instance_groups: prompt?.instance_groups ?? (nodeInstanceGroups || []),\n        inventory: prompt?.inventory ?? (nodeData?.resource?.summary_fields?.inventory || null),\n        job_slice_count: prompt?.job_slice_count ?? (defaults?.job_slice_count || 0),\n        job_tags: prompt?.job_tags ?? parseStringToTagArray(defaults?.job_tags || ''),\n        job_type: prompt?.job_type ?? (defaults?.job_type || 'run'),\n        labels: prompt?.labels ?? (nodeLabels || []),\n        limit: prompt?.limit ?? (defaults?.limit || ''),\n        scm_branch: prompt?.scm_branch ?? (defaults?.scm_branch || ''),\n        skip_tags: prompt?.skip_tags ?? parseStringToTagArray(defaults?.skip_tags || ''),\n        timeout: prompt?.timeout ?? (defaults?.timeout || 0),\n        verbosity: prompt?.verbosity ?? (defaults?.verbosity || 0),\n        launch_config: launch,\n        original,\n      };\n\n      return {\n        nodeTypeStep,\n        ...(hidePromptStep ? {} : { nodePromptsStep: { prompt: nodePromptsValues } }),\n        ...(hideSurveyStep ? {} : { survey: { survey: nodeData?.survey_data ?? surveyValues } }),\n      };\n    },\n    [nodeTypeStepDefaults]\n  );\n}\n\nfunction extractSurveyDataFromExtraVars(extraData: WorkflowNode['extra_data'], survey: Survey) {\n  const extraVars: WorkflowNode['extra_data'] = { ...extraData };\n  const surveyData: { [key: string]: string | number | undefined } = {};\n\n  survey.spec.forEach((question) => {\n    const { variable } = question;\n    if (variable in extraData) {\n      surveyData[variable] = extraData[variable];\n      delete extraVars[variable];\n    }\n  });\n\n  return { extraVars, surveyData };\n}\n\nasync function getSurveySpec(template?: NodeResource) {\n  if (!template) return;\n\n  if (template.unified_job_type === RESOURCE_TYPE.job) {\n    return await requestGet<Survey>(awxAPI`/job_templates/${template.id.toString()}/survey_spec/`);\n  }\n  if (template.unified_job_type === RESOURCE_TYPE.workflow_job) {\n    return await requestGet<Survey>(\n      awxAPI`/workflow_job_templates/${template.id.toString()}/survey_spec/`\n    );\n  }\n}\n\nexport async function getLaunchData(node: GraphNode) {\n  const unifiedJobTemplate = node?.getData()?.resource?.summary_fields?.unified_job_template;\n  if (!unifiedJobTemplate) return;\n\n  const { unified_job_type, id } = unifiedJobTemplate;\n\n  if (unified_job_type === RESOURCE_TYPE.workflow_job) {\n    return await requestGet<LaunchConfiguration>(\n      awxAPI`/workflow_job_templates/${id.toString()}/launch/`\n    );\n  } else if (unified_job_type === RESOURCE_TYPE.job) {\n    return await requestGet<LaunchConfiguration>(awxAPI`/job_templates/${id.toString()}/launch/`);\n  }\n}\n\nasync function getRelated<T>(endpoint: string): Promise<T[]> {\n  const itemsResponse = await requestGet<AwxItemsResponse<T>>(endpoint);\n  if (itemsResponse.results.length >= 1) {\n    return itemsResponse.results;\n  }\n  return [];\n}\nasync function getCredentialData(nodeId: string) {\n  return getRelated<Credential>(awxAPI`/workflow_job_template_nodes/${nodeId}/credentials/`);\n}\nasync function getLabelData(nodeId: string) {\n  return getRelated<Label>(awxAPI`/workflow_job_template_nodes/${nodeId}/labels/`);\n}\nasync function getInstanceGroupData(nodeId: string) {\n  return getRelated<InstanceGroup>(awxAPI`/workflow_job_template_nodes/${nodeId}/instance_groups/`);\n}\nasync function getTemplateCredentialData(templateId: string) {\n  return getRelated<Credential>(awxAPI`/job_templates/${templateId}/credentials/`);\n}\n\ntype AggregateCredential =\n  | {\n      id: number;\n      name: string;\n      credential_type: number;\n      passwords_needed?: string[];\n      vault_id?: string;\n    }\n  | Credential;\nfunction getAggregateCredentials(\n  nodeCredentials: AggregateCredential[] = [],\n  promptCredentials: AggregateCredential[] = [],\n  templateCredentials: AggregateCredential[] = []\n) {\n  // Step 1: Get the aggregate credentials from the template and node\n  const aggregateCredentialsMap: Record<number, AggregateCredential> = {};\n  templateCredentials.forEach((templateCredential) => {\n    aggregateCredentialsMap[templateCredential.credential_type] = templateCredential;\n  });\n\n  // Step 2: Override template credential with node credential if their types match\n  nodeCredentials.forEach((nodeCredential) => {\n    const key = nodeCredential.credential_type;\n    if (aggregateCredentialsMap[key]?.id !== nodeCredential.id) {\n      aggregateCredentialsMap[key] = nodeCredential;\n    }\n  });\n\n  // Step 3: Override aggregate credential with prompt credential if their types match\n  promptCredentials.forEach((promptCredential) => {\n    const key = promptCredential.credential_type;\n    if (aggregateCredentialsMap[key]?.id !== promptCredential.id) {\n      aggregateCredentialsMap[key] = promptCredential;\n    }\n  });\n\n  return Object.values(aggregateCredentialsMap);\n}\n","import ReactDOM from 'react-dom';\nimport styled from 'styled-components';\nimport { ReactElement, createContext, useContext, useEffect, useState } from 'react';\nimport {\n  useVisualizationController,\n  observer,\n  NodeModel,\n  Node,\n  Edge,\n  EdgeModel,\n} from '@patternfly/react-topology';\nimport { useRemoveGraphElements } from './hooks';\nimport { ControllerState, GraphEdgeData, GraphNodeData } from './types';\nimport { GRAPH_ID, START_NODE_ID } from './constants';\n\nconst FullPage = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: white;\n  z-index: 1000;\n`;\n\nconst ViewWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  .pf-topology-container {\n    min-height: 0;\n  }\n  .pf-v5-c-toolbar__group {\n    flex: 1;\n    width: 100%;\n    display: flex;\n  }\n`;\nexport interface IViewOptions {\n  toggleFullScreen: () => void;\n  isFullScreen: boolean;\n  isLegendOpen: boolean;\n  toggleLegend: () => void;\n  isEmpty: boolean;\n  isLoading: boolean;\n  sidebarMode: 'add' | 'edit' | 'view' | undefined;\n  selectedIds: string[];\n  setSidebarMode: (value: 'add' | 'edit' | 'view' | undefined) => void;\n  removeNodes: (item: Node<NodeModel, GraphNodeData>[]) => void;\n  removeLink: (item: Edge<EdgeModel, GraphEdgeData>) => void;\n}\n\nexport const ViewOptionsContext = createContext<IViewOptions>({\n  toggleFullScreen: () => {},\n  isFullScreen: false,\n  isLegendOpen: false,\n  toggleLegend: () => {},\n  isEmpty: false,\n  isLoading: true,\n  sidebarMode: undefined,\n  setSidebarMode: () => null,\n  removeNodes: () => null,\n  removeLink: () => null,\n  selectedIds: [],\n});\n\nexport const ViewOptionsProvider = observer((props: { children: ReactElement }) => {\n  const { children } = props;\n  const controller = useVisualizationController();\n  const { selectedIds } = controller.getState<ControllerState>();\n  const nodes = controller\n    .getGraph()\n    .getNodes()\n    .find((n) => n.isVisible() && n.getId() !== START_NODE_ID);\n  const isGraphReady = controller.toModel().graph?.visible;\n  const isGraphSelected = !!selectedIds?.length && selectedIds[0] === GRAPH_ID;\n  const { removeNodes, removeLink } = useRemoveGraphElements();\n  const [isEmpty, setIsEmpty] = useState(false);\n  const [isFullScreen, setIsFullScreen] = useState(false);\n  const [isLegendOpen, setIsLegendOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(isGraphReady ? false : true);\n  const [sidebarMode, setSidebarMode] = useState<'add' | 'edit' | 'view' | undefined>(undefined);\n\n  useEffect(() => {\n    if (isGraphReady) {\n      setIsLoading(false);\n    } else {\n      setIsLoading(true);\n    }\n  }, [isGraphReady]);\n\n  useEffect(() => {\n    if (isLoading) return;\n\n    if (nodes === undefined) {\n      setIsEmpty(true);\n    } else {\n      setIsEmpty(false);\n    }\n  }, [nodes, isLoading]);\n\n  const toggleFullScreen = () => {\n    if (!isFullScreen) {\n      setIsFullScreen(true);\n    } else {\n      setIsFullScreen(false);\n    }\n  };\n\n  const toggleLegend = () => {\n    if (!isLegendOpen) {\n      setIsLegendOpen(true);\n    } else {\n      setIsLegendOpen(false);\n    }\n  };\n\n  useEffect(() => {\n    if (isGraphSelected) {\n      setSidebarMode(undefined);\n    }\n  }, [isGraphSelected]);\n\n  const value = {\n    isFullScreen,\n    toggleFullScreen,\n    isLegendOpen,\n    toggleLegend,\n    isLoading,\n    isEmpty,\n    sidebarMode,\n    selectedIds,\n    setSidebarMode,\n    removeNodes,\n    removeLink,\n  };\n\n  return (\n    <ViewOptionsContext.Provider value={value}>\n      {isFullScreen ? (\n        <AppendBody>\n          <ViewWrapper>\n            <FullPage data-cy=\"full-page-visualizer\">{children}</FullPage>\n          </ViewWrapper>\n        </AppendBody>\n      ) : (\n        <ViewWrapper>{children}</ViewWrapper>\n      )}\n    </ViewOptionsContext.Provider>\n  );\n});\n\nexport const useViewOptions = () => {\n  const context = useContext(ViewOptionsContext);\n  if (!context) {\n    throw new Error('useViewOptions must be used within a ViewOptions');\n  }\n\n  return context;\n};\n\nfunction AppendBody(props: { children: ReactElement }) {\n  const { children } = props;\n  const [el] = useState(document.createElement('div'));\n\n  useEffect(() => {\n    document.body.appendChild(el);\n    return () => {\n      document.body.removeChild(el);\n    };\n  }, [el]);\n\n  return ReactDOM.createPortal(children, el);\n}\n","import { Button } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\nimport { useViewOptions } from '../ViewOptionsProvider';\n\nexport function AddNodeButton(props: { variant?: 'primary' | 'secondary' }) {\n  const { setSidebarMode } = useViewOptions();\n  const { t } = useTranslation();\n  return (\n    <Button\n      data-cy=\"add-node-button\"\n      icon={<PlusCircleIcon />}\n      variant={props.variant || 'secondary'}\n      label={t('Add step')}\n      onClick={() => {\n        setSidebarMode('add');\n      }}\n    >\n      {t('Add step')}\n    </Button>\n  );\n}\n","import { FC, LegacyRef } from 'react';\nimport { useSize, WithContextMenuProps, WithSelectionProps } from '@patternfly/react-topology';\nimport { getPatternflyColor, pfDisabled } from '../../../../../../framework';\nimport type { CustomLabelProps, EdgeStatus } from '../types';\nimport { EllipsisVIcon } from '@patternfly/react-icons';\n\nconst getEdgeStyles = (\n  status: EdgeStatus\n): {\n  fill: string;\n  stroke: string;\n} => {\n  const pfStatusColor = getPatternflyColor(status) || pfDisabled;\n  return {\n    fill: pfStatusColor,\n    stroke: pfStatusColor,\n  };\n};\n\nconst calculateDimensions = (\n  textSize: { width: number; height: number } | null,\n  paddingX: number,\n  paddingY: number\n) => {\n  const width = textSize ? textSize.width + paddingX * 2 : 0;\n  const height = textSize ? textSize.height + paddingY * 2 : 0;\n  return { width, height };\n};\n\nexport const CustomLabel: FC<\n  CustomLabelProps & WithContextMenuProps & WithSelectionProps & { isSourceRootNode: boolean }\n> = ({ children, xPoint, yPoint, status, onContextMenu, hoverRef, isSourceRootNode }) => {\n  const paddingX = 10;\n  const paddingY = 4;\n\n  const [textSize, textRef] = useSize([children]);\n  const { width, height } = calculateDimensions(textSize, paddingX, paddingY);\n\n  const x = xPoint - width / 2;\n  const y = yPoint - height / 2;\n\n  const [iconSize, iconRef] = useSize([EllipsisVIcon, paddingX]);\n  const contextIconRadius = textSize?.height ? `${textSize.height / 2}` : '0';\n  return (\n    <g transform={`translate(${x}, ${y})`} ref={hoverRef as LegacyRef<SVGTextElement>}>\n      {textSize && (\n        <rect\n          style={getEdgeStyles(status)}\n          x={0}\n          y={0}\n          width={isSourceRootNode || !onContextMenu ? textSize.width + 20 : textSize.width + 50}\n          height={height}\n          rx={15}\n          ry={15}\n        />\n      )}\n      <text\n        ref={textRef as LegacyRef<SVGTextElement>}\n        style={{ fill: 'white' }}\n        x={isSourceRootNode || !onContextMenu ? 10 : paddingX}\n        y={height / 2}\n        dy=\"0.35em\"\n      >\n        {children}\n      </text>\n      {!isSourceRootNode && onContextMenu && (\n        <g ref={iconRef} className=\"pf-topology__node__action-icon\">\n          <line\n            className=\"pf-topology__node__separator\"\n            x1={width}\n            x2={width}\n            y1={0}\n            y2={`${height}`}\n          />\n          {iconSize && (\n            <path\n              data-cy=\"edge-context-menu_kebab\"\n              onClick={onContextMenu}\n              d={`M${\n                width + 2\n              },1 h12q${contextIconRadius},0 ${contextIconRadius},${contextIconRadius} v2 q0,${contextIconRadius} -${contextIconRadius},${contextIconRadius} h-${contextIconRadius} z`}\n              style={getEdgeStyles(status)}\n            />\n          )}\n          <g data-cy=\"node-context-menu_kebab\" transform={`translate(${width + 5}, ${height / 4})`}>\n            <EllipsisVIcon style={{ fill: 'white' }} />\n          </g>\n        </g>\n      )}\n    </g>\n  );\n};\n","import { Edge, Point } from '@patternfly/react-topology';\n\nenum Position {\n  Left = 'left',\n  Top = 'top',\n  Right = 'right',\n  Bottom = 'bottom',\n}\nconst HALF_NODE_HEIGHT = 25;\ninterface GetSmoothStepPathParams {\n  source: PathPoint;\n  target: PathPoint;\n  sourcePosition?: Position;\n  targetPosition?: Position;\n  borderRadius?: number;\n  offset?: number;\n}\n\nconst handleDirections = {\n  [Position.Left]: { x: -1, y: 0 },\n  [Position.Right]: { x: 1, y: 0 },\n  [Position.Top]: { x: 0, y: -1 },\n  [Position.Bottom]: { x: 0, y: 1 },\n};\ntype PathPoint = Point | { x: number; y: number };\nexport function useGetPath(edge: Edge) {\n  const sourcePosition = edge.getSource().getPosition();\n  const targetPosition = edge.getTarget().getPosition();\n  const { path, labelCoordinates } = getSmoothStepPath({\n    source: sourcePosition,\n    sourcePosition: Position.Right,\n    target: targetPosition,\n    targetPosition: Position.Right,\n    borderRadius: 15,\n    offset: 25,\n  });\n\n  return { path, centerPoint: labelCoordinates };\n}\nconst getDirection = ({\n  source,\n  sourcePosition = Position.Bottom,\n  target,\n}: {\n  source: PathPoint;\n  sourcePosition: Position;\n  target: PathPoint;\n}): PathPoint => {\n  if (sourcePosition === Position.Left || sourcePosition === Position.Right) {\n    return source.x < target.x ? { x: 1, y: 0 } : { x: -1, y: 0 };\n  }\n  return source.y < target.y ? { x: 0, y: 1 } : { x: 0, y: -1 };\n};\n\nconst distance = (a: PathPoint, b: PathPoint) =>\n  Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\n\nfunction getPoints({\n  source,\n  sourcePosition = Position.Bottom,\n  target,\n  targetPosition = Position.Top,\n  offset,\n}: {\n  source: PathPoint;\n  sourcePosition: Position;\n  target: PathPoint;\n  targetPosition: Position;\n  offset: number;\n}): [PathPoint[], number, number] {\n  const sourceDir: PathPoint = handleDirections[sourcePosition];\n  const targetDir: PathPoint = handleDirections[targetPosition];\n  const sourceGapped: PathPoint = {\n    x: source.x + sourceDir.x * offset,\n    y: source.y + sourceDir.y * offset,\n  };\n  const targetGapped: PathPoint = {\n    x: target.x + targetDir.x * offset,\n    y: target.y + targetDir.y * offset,\n  };\n  const dir = getDirection({\n    source: sourceGapped,\n    sourcePosition,\n    target: targetGapped,\n  });\n  const dirAccessor = dir.x !== 0 ? 'x' : 'y';\n  const currDir = dir[dirAccessor];\n\n  let points: PathPoint[] = [];\n  let centerX, centerY;\n  const sourceGapOffset = { x: 0, y: 0 };\n  const targetGapOffset = { x: 0, y: 0 };\n\n  const [defaultCenterX, defaultCenterY]: [number, number] = getEdgeCenter({\n    source,\n    target,\n  });\n\n  // opposite handle positions, default case\n  if (sourceDir[dirAccessor] * targetDir[dirAccessor] === -1) {\n    centerX = defaultCenterX;\n    centerY = defaultCenterY;\n    //    --->\n    //    |\n    // >---\n    const verticalSplit: PathPoint[] = [\n      { x: centerX, y: sourceGapped.y },\n      { x: centerX, y: targetGapped.y },\n    ];\n    //    |\n    //  ---\n    //  |\n    const horizontalSplit: PathPoint[] = [\n      { x: sourceGapped.x, y: centerY },\n      { x: targetGapped.x, y: centerY },\n    ];\n\n    if (sourceDir[dirAccessor] === currDir) {\n      points = dirAccessor === 'x' ? verticalSplit : horizontalSplit;\n    } else {\n      points = dirAccessor === 'x' ? horizontalSplit : verticalSplit;\n    }\n  } else {\n    // sourceTarget means we take x from source and y from target, targetSource is the opposite\n    const sourceTarget: PathPoint[] = [{ x: sourceGapped.x, y: targetGapped.y }];\n    const targetSource: PathPoint[] = [{ x: targetGapped.x, y: sourceGapped.y }];\n    // this handles edges with same handle positions\n    if (dirAccessor === 'x') {\n      points = sourceDir.x === currDir ? targetSource : sourceTarget;\n    } else {\n      points = sourceDir.y === currDir ? sourceTarget : targetSource;\n    }\n\n    if (sourcePosition === targetPosition) {\n      const diff = Math.abs(source[dirAccessor] - target[dirAccessor]);\n\n      // if an edge goes from right to right for example (sourcePosition === targetPosition) and the distance between source.x and target.x is less than the offset, the added point and the gapped source/target will overlap. This leads to a weird edge path. To avoid this we add a gapOffset to the source/target\n      if (diff <= offset) {\n        const gapOffset = Math.min(offset - 1, offset - diff);\n        if (sourceDir[dirAccessor] === currDir) {\n          sourceGapOffset[dirAccessor] =\n            (sourceGapped[dirAccessor] > source[dirAccessor] ? -1 : 1) * gapOffset;\n        } else {\n          targetGapOffset[dirAccessor] =\n            (targetGapped[dirAccessor] > target[dirAccessor] ? -1 : 1) * gapOffset;\n        }\n      }\n    }\n\n    // these are conditions for handling mixed handle positions like Right -> Bottom for example\n    if (sourcePosition !== targetPosition) {\n      const dirAccessorOpposite = dirAccessor === 'x' ? 'y' : 'x';\n      const isSameDir = sourceDir[dirAccessor] === targetDir[dirAccessorOpposite];\n      const sourceGtTargetOppo =\n        sourceGapped[dirAccessorOpposite] > targetGapped[dirAccessorOpposite];\n      const sourceLtTargetOppo =\n        sourceGapped[dirAccessorOpposite] < targetGapped[dirAccessorOpposite];\n      const flipSourceTarget =\n        (sourceDir[dirAccessor] === 1 &&\n          ((!isSameDir && sourceGtTargetOppo) || (isSameDir && sourceLtTargetOppo))) ||\n        (sourceDir[dirAccessor] !== 1 &&\n          ((!isSameDir && sourceLtTargetOppo) || (isSameDir && sourceGtTargetOppo)));\n\n      if (flipSourceTarget) {\n        points = dirAccessor === 'x' ? sourceTarget : targetSource;\n      }\n    }\n\n    const sourceGapPoint = {\n      x: sourceGapped.x + sourceGapOffset.x,\n      y: sourceGapped.y + sourceGapOffset.y,\n    };\n    const targetGapPoint = {\n      x: targetGapped.x + targetGapOffset.x,\n      y: targetGapped.y + targetGapOffset.y,\n    };\n    const maxXDistance = Math.max(\n      Math.abs(sourceGapPoint.x - points[0].x),\n      Math.abs(targetGapPoint.x - points[0].x)\n    );\n    const maxYDistance = Math.max(\n      Math.abs(sourceGapPoint.y - points[0].y),\n      Math.abs(targetGapPoint.y - points[0].y)\n    );\n\n    // we want to place the label on the longest segment of the edge\n    if (maxXDistance >= maxYDistance) {\n      centerX = (sourceGapPoint.x + targetGapPoint.x) / 2;\n      centerY = points[0].y;\n    } else {\n      centerX = points[0].x;\n      centerY = (sourceGapPoint.y + targetGapPoint.y) / 2;\n    }\n  }\n\n  const pathPoints = [\n    source,\n    { x: sourceGapped.x + sourceGapOffset.x, y: sourceGapped.y + sourceGapOffset.y },\n    ...points,\n    { x: targetGapped.x + targetGapOffset.x, y: targetGapped.y + targetGapOffset.y },\n    target,\n  ];\n\n  return [pathPoints, centerX, centerY];\n}\n\nfunction getBend(a: PathPoint, b: PathPoint, c: PathPoint, size: number): string {\n  const bendSize = Math.min(distance(a, b) / 2, distance(b, c) / 2, size);\n  const { x, y } = b;\n\n  // no bend\n  if ((a.x === x && x === c.x) || (a.y === y && y === c.y)) {\n    return `L${x} ${y}`;\n  }\n\n  // first segment is horizontal\n  if (a.y === y) {\n    const xDir = a.x < c.x ? -1 : 1;\n    const yDir = a.y < c.y ? 1 : -1;\n    return `L ${x + bendSize * xDir},${y}Q ${x},${y} ${x},${y + bendSize * yDir}`;\n  }\n\n  const xDir = a.x < c.x ? 1 : -1;\n  const yDir = a.y < c.y ? -1 : 1;\n  return `L ${x},${y + bendSize * yDir}Q ${x},${y} ${x + bendSize * xDir},${y}`;\n}\n\nfunction getSmoothStepPath({\n  source,\n  target,\n  borderRadius = 5,\n  offset = 20,\n}: GetSmoothStepPathParams): { path: string; labelCoordinates: { x: number; y: number } } {\n  const [points, labelX, labelY] = getPoints({\n    source: { x: source.x, y: source.y + HALF_NODE_HEIGHT },\n    sourcePosition: Position.Right,\n    target: { x: target.x, y: target.y + HALF_NODE_HEIGHT },\n    targetPosition: Position.Left,\n    offset,\n  });\n  const path = points.reduce<string>((res, p, i) => {\n    let segment = '';\n\n    if (i > 0 && i < points.length - 1) {\n      segment = getBend(points[i - 1], p, points[i + 1], borderRadius);\n    } else {\n      segment = `${i === 0 ? 'M' : 'L'}${p.x} ${p.y}`;\n    }\n\n    res += segment;\n\n    return res;\n  }, '');\n\n  return { path, labelCoordinates: { x: labelX, y: labelY } };\n}\n\nfunction getEdgeCenter({\n  source,\n  target,\n}: {\n  source: PathPoint;\n  target: PathPoint;\n}): [number, number] {\n  const xOffset = Math.abs(target.x - source.x) / 2;\n  const centerX = target.x < source.x ? target.x + xOffset : target.x - xOffset;\n\n  const yOffset = Math.abs(target.y - source.y) / 2;\n  const centerY = target.y < source.y ? target.y + yOffset : target.y - yOffset;\n\n  return [centerX, centerY];\n}\n","import { Point } from '@patternfly/react-topology';\ntype BaseEdgeProps = {\n  target: Point;\n  style: string;\n};\nexport const EdgeTerminal = (props: BaseEdgeProps) => {\n  const { target, style } = props;\n  return (\n    <g transform={`translate(${target.x - 14}, ${target.y + 25})`}>\n      <polygon\n        transform={`translate(0.5,0.5) `}\n        points=\" 0,7 0,-7 14,0\"\n        className={`pf-topology-connector-arrow pf-topology__edge pf-topology__edge ${style}`}\n      />\n    </g>\n  );\n};\n","import { FC, LegacyRef } from 'react';\nimport {\n  Layer,\n  StatusModifier,\n  TOP_LAYER,\n  WithContextMenuProps,\n  WithSelectionProps,\n  isEdge,\n  useHover,\n  observer,\n  WithSourceDragProps,\n  WithTargetDragProps,\n} from '@patternfly/react-topology';\nimport { css } from '@patternfly/react-styles';\nimport { CustomLabel } from './CustomLabel';\nimport { type CustomEdgeProps, type CustomEdgeInnerProps } from '../types';\nimport { START_NODE_ID } from '../constants';\nimport { useGetPath } from '../hooks/useGetPath';\nimport { EdgeTerminal } from './EdgeTerminal';\n\nconst CustomEdgeInner: FC<\n  CustomEdgeInnerProps &\n    WithContextMenuProps &\n    WithSelectionProps &\n    WithSourceDragProps &\n    WithTargetDragProps\n> = observer((props) => {\n  const {\n    element: edgeElement,\n    contextMenuOpen,\n    dragging,\n    selected,\n    onSelect,\n    onContextMenu,\n    targetDragRef,\n    sourceDragRef,\n    ...rest\n  } = props;\n  const [hover, hoverRef] = useHover(0);\n  const [tagHover, tagHoverRef] = useHover(0);\n\n  const { path: edgePath, centerPoint } = useGetPath(edgeElement);\n  const isSourceRootNode = edgeElement.getSource().getId() === START_NODE_ID;\n  const data = edgeElement.getData();\n  if (!data) return null;\n  const { tag, tagStatus } = data;\n  const edgeStyles = css(\n    `pf-topology__edge ${StatusModifier[tagStatus]}`,\n    (hover || tagHover) && 'pf-m-hover'\n  );\n  return (\n    <Layer id={dragging ? TOP_LAYER : undefined} {...rest}>\n      <g\n        data-test-id=\"workflow-visualizer-edge\"\n        className={edgeStyles}\n        fillOpacity={0}\n        ref={hoverRef as LegacyRef<SVGTextElement>}\n        onClick={onSelect}\n      >\n        <path className=\"pf-topology__edge__background\" d={edgePath} />\n        <path\n          strokeMiterlimit={25}\n          strokeLinecap=\"round\"\n          d={edgePath}\n          transform=\"translate(0.5,0.5)\"\n          shapeRendering=\"geometricPrecision\"\n          className=\"pf-topology__edge__link\"\n        />\n      </g>\n      {centerPoint ? (\n        <CustomLabel\n          hoverRef={tagHoverRef}\n          xPoint={centerPoint.x}\n          yPoint={centerPoint.y}\n          status={tagStatus}\n          isSourceRootNode={isSourceRootNode}\n          {...props}\n        >\n          {tag}\n        </CustomLabel>\n      ) : null}\n      <EdgeTerminal\n        target={edgeElement.getTarget().getPosition()}\n        style={`pf-topology-connector-arrow pf-topology__edge pf-topology__edge ${edgeStyles}`}\n      />\n    </Layer>\n  );\n});\n\nexport const CustomEdge: FC<CustomEdgeProps & WithContextMenuProps & WithSelectionProps> = ({\n  element,\n  ...rest\n}) => {\n  if (!isEdge(element)) {\n    throw new Error('CustomEdge must be used only on Edge elements');\n  }\n  return <CustomEdgeInner element={element} {...rest} />;\n};\n","import { ElementType, FC } from 'react';\nimport {\n  ClipboardCheckIcon,\n  ClockIcon,\n  CogIcon,\n  HomeIcon,\n  ProcessAutomationIcon,\n  ShareAltIcon,\n  SyncAltIcon,\n  TrashIcon,\n} from '@patternfly/react-icons';\nimport {\n  DefaultNode,\n  WithContextMenuProps,\n  WithCreateConnectorProps,\n  WithSelectionProps,\n  isNode,\n  observer,\n} from '@patternfly/react-topology';\n\nimport { useViewOptions } from '../ViewOptionsProvider';\nimport { START_NODE_ID } from '../constants';\nimport type { CustomNodeProps } from '../types';\nimport type { SVGIconProps } from '@patternfly/react-icons/dist/js/createIcon';\n\nconst NodeIcon: { [key: string]: ElementType<SVGIconProps> } = {\n  inventory_update: ProcessAutomationIcon,\n  job: ClipboardCheckIcon,\n  project_update: SyncAltIcon,\n  system_job: CogIcon,\n  workflow_approval: ClockIcon,\n  workflow_job: ShareAltIcon,\n  deleted_resource: TrashIcon,\n};\n\nexport const CustomNode: FC<\n  CustomNodeProps & WithContextMenuProps & WithSelectionProps & WithCreateConnectorProps\n> = observer(({ element, onSelect, ...rest }) => {\n  const { setSidebarMode } = useViewOptions();\n  const jobType =\n    element.getData()?.resource?.summary_fields?.unified_job_template?.unified_job_type;\n\n  const id = element.getId();\n  const data = element.getData();\n  if (!data && isNode(element)) return null;\n\n  const Icon = NodeIcon[jobType ?? 'deleted_resource'];\n\n  return id !== START_NODE_ID ? (\n    <DefaultNode\n      showLabel\n      element={element}\n      labelClassName={`${id}-node-label`}\n      onSelect={(e) => {\n        if (!jobType) return;\n        setSidebarMode('view');\n        onSelect && onSelect(e);\n      }}\n      truncateLength={20}\n      {...rest}\n      badge={data?.badge}\n      badgeColor={data?.badgeColor}\n      badgeTextColor={data?.badgeTextColor}\n      badgeBorderColor={data?.badgeBorderColor}\n    >\n      <g transform={`translate(13, 13)`}>\n        <Icon style={{ color: '#393F44' }} width={25} height={25} />\n      </g>\n    </DefaultNode>\n  ) : (\n    <DefaultNode\n      {...rest}\n      element={element}\n      labelClassName={`${id}-node-label`}\n      dragging={false}\n      truncateLength={20}\n      badge={data?.badge}\n      badgeColor={data?.badgeColor}\n      badgeTextColor={data?.badgeTextColor}\n      badgeBorderColor={data?.badgeBorderColor}\n    >\n      <g transform={`translate(13, 13)`}>\n        <HomeIcon style={{ color: '#393F44' }} width={25} height={25} />\n      </g>\n    </DefaultNode>\n  );\n});\n","import { ReactElement } from 'react';\nimport {\n  ContextMenuItem,\n  ContextMenuSeparator,\n  Edge,\n  ElementModel,\n  action,\n  useVisualizationController,\n} from '@patternfly/react-topology';\nimport {\n  CheckCircleIcon,\n  CircleIcon,\n  ExclamationCircleIcon,\n  TrashIcon,\n} from '@patternfly/react-icons';\nimport { Icon } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { ControllerState, EdgeStatus } from '../types';\nimport { useViewOptions } from '../ViewOptionsProvider';\ninterface MenuItem {\n  key: string;\n  status?: EdgeStatus;\n  label: string;\n  icon?: ReactElement;\n  isDanger?: boolean;\n  onClick?: (data: {\n    tag: string;\n    tagStatus: EdgeStatus;\n    endTerminalStatus: string;\n    originalStatus: string;\n  }) => void;\n}\n\nexport function useEdgeMenuItems(\n  element: Edge<\n    ElementModel,\n    {\n      tag: string;\n      tagStatus: EdgeStatus;\n      endTerminalStatus: string;\n      originalStatus: string;\n    }\n  >\n): MenuItem[] {\n  const { t } = useTranslation();\n  const { removeLink } = useViewOptions();\n\n  const controller = useVisualizationController();\n  const handleModified = action((modified: boolean) => {\n    if (modified) {\n      element.setState({ modified: true });\n      element.getSource().setState({ modified: true });\n      controller.setState({ ...controller.getState<ControllerState>(), modified: true });\n    } else {\n      element.setState({ modified: false });\n      element.getSource().setState({ modified: false });\n    }\n  });\n  return [\n    {\n      key: 'success',\n      status: EdgeStatus.success,\n      icon: (\n        <Icon status=\"success\">\n          <CheckCircleIcon />\n        </Icon>\n      ),\n      label: t('Run on success'),\n      onClick: (data) => {\n        action(() => {\n          element.setData({\n            ...data,\n            tag: t('Run on success'),\n            tagStatus: EdgeStatus.success,\n            endTerminalStatus: 'success',\n          });\n          handleModified('success' !== data.originalStatus);\n        })();\n      },\n    },\n    {\n      key: 'always',\n      status: EdgeStatus.info,\n      icon: (\n        <Icon status=\"info\">\n          <CircleIcon />\n        </Icon>\n      ),\n      label: t('Run always'),\n      onClick: (data) => {\n        action(() => {\n          element.setData({\n            ...data,\n            tag: t('Run always'),\n            tagStatus: EdgeStatus.info,\n            endTerminalStatus: 'info',\n          });\n          handleModified('info' !== data.originalStatus);\n        })();\n      },\n    },\n    {\n      key: 'fail',\n      status: EdgeStatus.danger,\n      icon: (\n        <Icon status=\"danger\">\n          <ExclamationCircleIcon />\n        </Icon>\n      ),\n      label: t('Run on fail'),\n      onClick: (data) => {\n        action(() => {\n          element.setData({\n            ...data,\n            tag: t('Run on fail'),\n            tagStatus: EdgeStatus.danger,\n            endTerminalStatus: 'fail',\n          });\n          handleModified('danger' !== data.originalStatus);\n        })();\n      },\n    },\n    {\n      key: 'separator',\n      label: '-',\n    },\n    {\n      key: 'remove-link',\n      icon: (\n        <Icon status=\"danger\">\n          <TrashIcon />\n        </Icon>\n      ),\n      isDanger: true,\n      label: t('Remove link'),\n      onClick: () => {\n        removeLink(element);\n      },\n    },\n  ];\n}\n\nexport function EdgeContextMenu(props: {\n  element: Edge<\n    ElementModel,\n    {\n      tag: string;\n      tagStatus: EdgeStatus;\n      endTerminalStatus: string;\n      originalStatus: string;\n    }\n  >;\n}) {\n  const { element } = props;\n  const data = element.getData();\n\n  const items = useEdgeMenuItems(element);\n\n  return items.map((item) => {\n    if (item.label === '-') {\n      return <ContextMenuSeparator component=\"li\" key={`separator:${item.key}`} />;\n    }\n\n    return (\n      <ContextMenuItem\n        data-cy={item.key}\n        key={item.key}\n        icon={item.icon}\n        isDanger={item.isDanger}\n        onClick={() => {\n          item?.onClick && data && item.onClick(data);\n        }}\n      >\n        {item.label}\n      </ContextMenuItem>\n    );\n  });\n}\n","import { ReactElement } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\nimport {\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Icon,\n  Panel as PFPanel,\n  PanelMain,\n  PanelMainBody,\n} from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  CircleIcon,\n  ClipboardCheckIcon,\n  ClockIcon,\n  CogIcon,\n  ExclamationTriangleIcon,\n  ExclamationCircleIcon,\n  ProcessAutomationIcon,\n  ShareAltIcon,\n  SyncAltIcon,\n} from '@patternfly/react-icons';\n\nconst Panel = styled(PFPanel)`\n  position: absolute;\n  background: --pf-v5-global--BackgroundColor--100;\n  width: 240px;\n  min-height: 300px;\n  position: absolute;\n  left: 255px;\n  bottom: 60px;\n  border-radius: var(--pf-v5-global--BorderRadius--sm);\n  box-shadow: var(--pf-v5-global--BoxShadow--sm);\n  z-index: 1;\n`;\n\nexport const Legend = () => {\n  const { t } = useTranslation();\n\n  const LegendDescription = (props: { label: string; icon: ReactElement }) => {\n    const { label, icon } = props;\n    return (\n      <div>\n        <span style={{ marginRight: '10px' }}>{icon}</span>\n        <span>{label}</span>\n      </div>\n    );\n  };\n\n  return (\n    <Panel data-cy=\"workflow-visualizer-legend\">\n      <PanelMain>\n        <PanelMainBody>\n          <DescriptionList>\n            <DescriptionListGroup data-cy=\"legend-node-types\">\n              <DescriptionListTerm>{t('Node types')}</DescriptionListTerm>\n              <DescriptionListDescription>\n                <LegendDescription label={t('Job Template')} icon={<ClipboardCheckIcon />} />\n              </DescriptionListDescription>\n              <DescriptionListDescription>\n                <LegendDescription label={t('Workflow Template')} icon={<ShareAltIcon />} />\n              </DescriptionListDescription>\n              <DescriptionListDescription>\n                <LegendDescription label={t('Project Sync')} icon={<SyncAltIcon />} />\n              </DescriptionListDescription>\n              <DescriptionListDescription>\n                <LegendDescription label={t('Approval Node')} icon={<ClockIcon />} />\n              </DescriptionListDescription>\n              <DescriptionListDescription>\n                <LegendDescription label={t('Inventory Update')} icon={<ProcessAutomationIcon />} />\n              </DescriptionListDescription>\n              <DescriptionListDescription>\n                <LegendDescription label={t('System Job')} icon={<CogIcon />} />\n              </DescriptionListDescription>\n            </DescriptionListGroup>\n            <DescriptionListGroup data-cy=\"legend-node-status-types\">\n              <DescriptionListTerm>{t('Node status types')}</DescriptionListTerm>\n              <DescriptionListDescription>\n                <LegendDescription\n                  label={t('Failed')}\n                  icon={\n                    <Icon status=\"danger\">\n                      <ExclamationCircleIcon />\n                    </Icon>\n                  }\n                />\n              </DescriptionListDescription>\n              <DescriptionListDescription>\n                <LegendDescription\n                  label={t('Warning')}\n                  icon={\n                    <Icon status=\"warning\">\n                      <ExclamationTriangleIcon />\n                    </Icon>\n                  }\n                />\n              </DescriptionListDescription>\n            </DescriptionListGroup>\n            <DescriptionListGroup data-cy=\"legend-run-status-types\">\n              <DescriptionListTerm>{t('Run status types')}</DescriptionListTerm>\n              <DescriptionListDescription>\n                <LegendDescription\n                  label={t('Run on success')}\n                  icon={\n                    <Icon status=\"success\">\n                      <CheckCircleIcon />{' '}\n                    </Icon>\n                  }\n                />\n              </DescriptionListDescription>\n              <DescriptionListDescription>\n                <LegendDescription\n                  label={t('Run on fail')}\n                  icon={\n                    <Icon status=\"danger\">\n                      <ExclamationCircleIcon />\n                    </Icon>\n                  }\n                />\n              </DescriptionListDescription>\n              <DescriptionListDescription>\n                <LegendDescription\n                  label={t('Run always')}\n                  icon={\n                    <Icon status=\"info\">\n                      <CircleIcon />\n                    </Icon>\n                  }\n                />\n              </DescriptionListDescription>\n            </DescriptionListGroup>\n          </DescriptionList>\n        </PanelMainBody>\n      </PanelMain>\n    </Panel>\n  );\n};\n","import { ReactElement } from 'react';\nimport {\n  ContextMenuSeparator,\n  ContextMenuItem,\n  action,\n  useVisualizationController,\n  useVisualizationState,\n  Node,\n  NodeModel,\n} from '@patternfly/react-topology';\nimport { PencilAltIcon, MinusCircleIcon, PlusCircleIcon } from '@patternfly/react-icons';\n\nimport { useTranslation } from 'react-i18next';\nimport { useViewOptions } from '../ViewOptionsProvider';\nimport { GraphNodeData } from '../types';\nimport { START_NODE_ID } from '../constants';\n\ninterface MenuItem {\n  key: string;\n  label: string;\n  icon?: ReactElement;\n  isDanger?: boolean;\n  onClick?: () => void;\n}\n\nexport function useNodeMenuItems(element: Node<NodeModel, GraphNodeData>): MenuItem[] {\n  const { t } = useTranslation();\n  const { selectedIds } = useVisualizationController().getState<{ selectedIds: string[] }>();\n  const { setSidebarMode } = useViewOptions();\n  const [_, setSelectedIds] = useVisualizationState('selectedIds', selectedIds);\n  const { removeNodes } = useViewOptions();\n  const [__, setSourceNode] = useVisualizationState('sourceNode');\n  const id = element.getId();\n\n  return id === START_NODE_ID\n    ? [\n        {\n          key: 'add-node',\n          icon: <PlusCircleIcon />,\n          label: t('Add step'),\n          onClick: () => {\n            setSidebarMode('add');\n          },\n        },\n      ]\n    : [\n        {\n          key: 'edit-node',\n          icon: <PencilAltIcon />,\n          label: t('Edit step'),\n          onClick: () => {\n            action(() => {\n              setSidebarMode('edit');\n              setSelectedIds([id]);\n            })();\n          },\n        },\n        {\n          key: 'add-node-and-link',\n          icon: <PlusCircleIcon />,\n          label: t('Add step and link'),\n          onClick: () => {\n            setSidebarMode('add');\n            setSourceNode(element);\n          },\n        },\n        {\n          key: 'separator',\n          label: '-',\n        },\n        {\n          key: 'remove-node',\n          icon: <MinusCircleIcon />,\n          isDanger: true,\n          label: t('Remove step'),\n          onClick: () => {\n            removeNodes([element]);\n          },\n        },\n      ];\n}\n\nexport function NodeContextMenu(props: { element: Node<NodeModel, GraphNodeData> }) {\n  const { element } = props;\n\n  const items = useNodeMenuItems(element);\n  return items.map((item) => {\n    if (item.label === '-') {\n      return <ContextMenuSeparator component=\"li\" key={`separator:${item.key}`} />;\n    }\n\n    return (\n      <ContextMenuItem\n        data-cy={item.key}\n        key={item.key}\n        icon={item.icon}\n        isDanger={item.isDanger}\n        onClick={() => {\n          item?.onClick && item.onClick();\n        }}\n      >\n        {item.label}\n      </ContextMenuItem>\n    );\n  });\n}\n","import { useTranslation } from 'react-i18next';\n\nexport function useVerbosityString(value: number | undefined) {\n  const { t } = useTranslation();\n\n  switch (value) {\n    case 0:\n      return t('0 (Normal)');\n    case 1:\n      return t('1 (Verbose)');\n    case 2:\n      return t('2 (More Verbose)');\n    case 3:\n      return t('3 (Debug)');\n    case 4:\n      return t('4 (Connection Debug)');\n    case 5:\n      return t('5 (WinRM Debug)');\n    default:\n      return '';\n  }\n}\n","import { useTranslation } from 'react-i18next';\nimport { PageDetail, TextCell, useGetPageUrl } from '../../../../../../framework';\nimport { awxAPI } from '../../../../common/api/awx-utils';\nimport { useOptions } from '../../../../../common/crud/useOptions';\nimport { ActionsResponse, OptionsResponse } from '../../../../interfaces/OptionsResponse';\nimport { InventorySource } from '../../../../interfaces/InventorySource';\nimport { useVerbosityString } from '../../../../common/useVerbosityString';\nimport { AwxRoute } from '../../../../main/AwxRoutes';\n\nexport function InventorySourceDetails({ source }: { source: InventorySource }) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const sourceOptions = useGetSourceOptions();\n  const verbosityString = useVerbosityString(source.verbosity);\n\n  return (\n    <>\n      <PageDetail label={t('Organization')} isEmpty={!source.summary_fields.organization}>\n        <TextCell\n          text={source.summary_fields.organization?.name}\n          to={getPageUrl(AwxRoute.OrganizationDetails, {\n            params: { id: source.summary_fields.organization?.id },\n          })}\n        />\n      </PageDetail>\n      <PageDetail label={t('Inventory')} isEmpty={!source.summary_fields.inventory}>\n        <TextCell\n          text={source.summary_fields.inventory?.name}\n          to={getPageUrl(AwxRoute.InventoryDetails, {\n            params: { id: source.summary_fields.inventory?.id },\n          })}\n        />\n      </PageDetail>\n      <PageDetail label={t('Project')} isEmpty={!source.summary_fields.source_project}>\n        <TextCell\n          text={source.summary_fields.source_project?.name}\n          to={getPageUrl(AwxRoute.ProjectDetails, {\n            params: { id: source.summary_fields.source_project?.id },\n          })}\n        />\n      </PageDetail>\n      <PageDetail label={t`Source`}>{sourceOptions[source.source]}</PageDetail>\n      <PageDetail label={t`Inventory file`}>\n        {source.source_path === '' ? t`/ (project root)` : source.source_path}\n      </PageDetail>\n      <PageDetail label={t`Verbosity`}>{verbosityString}</PageDetail>\n      <PageDetail label={t`Source control branch`}>{source.scm_branch}</PageDetail>\n      <PageDetail\n        label={t('Cache Timeout')}\n      >{`${source?.update_cache_timeout} seconds`}</PageDetail>\n    </>\n  );\n}\n\nfunction useGetSourceOptions() {\n  const { data: sourceOptions } = useOptions<OptionsResponse<ActionsResponse>>(\n    awxAPI`/inventory_sources/`\n  );\n  const sourceMap = sourceOptions?.actions?.GET?.source?.choices?.reduce(\n    (acc, [key, val]) => {\n      acc[key] = val;\n      return acc;\n    },\n    {} as Record<string, string>\n  );\n  return sourceMap ?? {};\n}\n","import { ReactNode } from 'react';\nimport {\n  Button,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Icon,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { ClipboardCheckIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\n\nexport function PromptDetail(props: {\n  children?: ReactNode;\n  isEmpty?: boolean;\n  isOverridden?: boolean;\n  label?: string;\n  overriddenValue?: ReactNode;\n}) {\n  const { t } = useTranslation();\n  const { label, children, isOverridden = false, overriddenValue = '', isEmpty = false } = props;\n\n  if (children === null || typeof children === 'undefined' || children === '') {\n    return <></>;\n  }\n  if (isEmpty) {\n    return <></>;\n  }\n\n  let tooltip = null;\n  if (isOverridden) {\n    const overriddenText = t(`This prompt value has been overridden. The default value was: `);\n    const tooltipContent = (\n      <>\n        {overriddenText} {overriddenValue}\n      </>\n    );\n\n    tooltip = (\n      <Tooltip position=\"right\" content={tooltipContent}>\n        <Icon isInline size=\"lg\" iconSize=\"sm\">\n          <Button aria-label=\"Clipboard\" variant=\"plain\" id=\"tt-ref\">\n            <ClipboardCheckIcon />\n          </Button>\n        </Icon>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <DescriptionListGroup>\n      {label && (\n        <DescriptionListTerm>\n          {label}\n          {tooltip}\n        </DescriptionListTerm>\n      )}\n      <DescriptionListDescription>{children}</DescriptionListDescription>\n    </DescriptionListGroup>\n  );\n}\n","import { CodeBlock, CodeBlockCode } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport { PromptDetail } from './PromptDetail';\n\nexport function NodeCodeEditorDetail({\n  label,\n  nodeExtraVars,\n  templateExtraVars,\n}: {\n  label?: string;\n  nodeExtraVars: string;\n  templateExtraVars: string;\n}) {\n  const { id } = useParams();\n  const { t } = useTranslation();\n\n  const value = nodeExtraVars ?? templateExtraVars;\n  const isMatch = value.trim() === templateExtraVars.trim();\n\n  return (\n    <PromptDetail\n      label={label ?? t('Variables')}\n      isEmpty={!value}\n      isOverridden={!isMatch}\n      overriddenValue={templateExtraVars}\n    >\n      <CodeBlock id={id}>\n        <CodeBlockCode data-cy={'code-block-value'}>{value}</CodeBlockCode>\n      </CodeBlock>\n    </PromptDetail>\n  );\n}\n","import { Label, LabelGroup } from '@patternfly/react-core';\nimport { PromptDetail } from './PromptDetail';\nimport { Label as ILabel } from '../../../../interfaces/Label';\n\ninterface ITag {\n  name: string;\n  value?: string;\n  label?: string;\n}\nexport function NodeTagDetail({\n  label,\n  nodeTags = [],\n  templateTags = [],\n}: {\n  label: string;\n  nodeTags: ITag[];\n  templateTags: ITag[];\n}) {\n  const tags = nodeTags.length > 0 ? nodeTags : templateTags;\n  const isMatch = arraysMatch(tags, templateTags);\n\n  return (\n    <PromptDetail\n      label={label}\n      isEmpty={tags?.length === 0}\n      isOverridden={!isMatch}\n      overriddenValue={templateTags.map((tag) => tag.name).join(', ')}\n    >\n      <LabelGroup>\n        {tags.map((tag) => (\n          <Label key={tag.name}>{tag.name}</Label>\n        ))}\n      </LabelGroup>\n    </PromptDetail>\n  );\n}\nfunction arraysMatch(arr1: ILabel[] | { name: string }[], arr2: ILabel[] | { name: string }[]) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  const idSet1 = new Set(arr1.map((obj) => obj.name));\n  const idSet2 = new Set(arr2.map((obj) => obj.name));\n\n  if (idSet1.size !== idSet2.size) {\n    return false;\n  }\n  for (const item of idSet1) {\n    if (!idSet2.has(item)) {\n      return false;\n    }\n  }\n  return true;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport function useWebhookServiceOptions() {\n  const { t } = useTranslation();\n  return useMemo(\n    () => [\n      { label: t`GitHub`, value: 'github' },\n      { label: t`GitLab`, value: 'gitlab' },\n      { label: t`Bitbucket Data Center`, value: 'bitbucket_dc' },\n    ],\n    [t]\n  );\n}\n\nexport function WebhookService(props: { service: string }) {\n  const { service } = props;\n  const options = useWebhookServiceOptions();\n\n  const selectedService = options.find((option) => option.value === service)?.label;\n\n  if (!selectedService) return;\n\n  return selectedService;\n}\n","import { useTranslation } from 'react-i18next';\nimport {\n  Label,\n  LabelGroup,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n} from '@patternfly/react-core';\nimport { PageDetail, useGetPageUrl, TextCell } from '../../../../../../framework';\nimport { useGet, useGetItem } from '../../../../../common/crud/useGet';\nimport { JobTemplate } from '../../../../interfaces/JobTemplate';\nimport { AwxRoute } from '../../../../main/AwxRoutes';\nimport { jsonToYaml } from '../../../../../../framework/utils/codeEditorUtils';\nimport { AwxItemsResponse } from '../../../../common/AwxItemsResponse';\nimport { useVerbosityString } from '../../../../common/useVerbosityString';\nimport { CredentialLabel } from '../../../../common/CredentialLabel';\nimport { Credential } from '../../../../interfaces/Credential';\nimport { InstanceGroup } from '../../../../interfaces/InstanceGroup';\nimport { Label as ILabel } from '../../../../interfaces/Label';\nimport { parseStringToTagArray } from '../../JobTemplateFormHelpers';\nimport { GraphNodeData, PromptFormValues } from '../types';\nimport { useGetTimeoutString } from '../hooks';\nimport { NodeCodeEditorDetail } from './NodeCodeEditorDetail';\nimport { NodeTagDetail } from './NodeTagDetail';\nimport { PromptDetail } from './PromptDetail';\nimport { WebhookService } from '../../components/WebhookService';\nimport { Link } from 'react-router-dom';\nimport { awxAPI } from '../../../../common/api/awx-utils';\nimport { ExecutionEnvironment } from '../../../../interfaces/ExecutionEnvironment';\n\nfunction useAggregateJobTemplateDetails({\n  template,\n  node,\n}: {\n  template: JobTemplate;\n  node: GraphNodeData;\n}) {\n  const { launch_data: promptValues, survey_data: surveyValues, resource: nodeValues } = node;\n  const { data: nodeLabels } = useGet<AwxItemsResponse<ILabel>>(nodeValues?.related?.labels);\n  const { data: webhookKey } = useGet<{ webhook_key: string }>(template?.related?.webhook_key);\n  const { data: nodeInstanceGroups } = useGet<AwxItemsResponse<InstanceGroup>>(\n    nodeValues?.related?.instance_groups\n  );\n  const { data: templateInstanceGroups } = useGet<AwxItemsResponse<InstanceGroup>>(\n    template?.related?.instance_groups\n  );\n  const { data: nodeCredentials } = useGet<AwxItemsResponse<Credential>>(\n    nodeValues?.related?.credentials\n  );\n  const { data: templateCredentials } = useGet<AwxItemsResponse<Credential>>(\n    template?.related?.credentials\n  );\n\n  const { data: fetchedEE } = useGetItem<ExecutionEnvironment>(\n    awxAPI`/execution_environments/`,\n    String(promptValues?.execution_environment)\n  );\n\n  const credentials =\n    promptValues?.credentials ?? nodeCredentials?.results ?? templateCredentials?.results;\n  const diffMode = promptValues?.diff_mode ?? nodeValues?.diff_mode ?? template.diff_mode;\n  let executionEnvironment: ExecutionEnvironment | undefined;\n\n  if (promptValues?.execution_environment && fetchedEE) {\n    executionEnvironment = fetchedEE;\n  } else {\n    executionEnvironment =\n      nodeValues?.summary_fields?.execution_environment ??\n      template.summary_fields.execution_environment;\n  }\n\n  const forks = Number(promptValues?.forks ?? nodeValues?.forks ?? template.forks);\n  const instanceGroups =\n    promptValues?.instance_groups ?? nodeInstanceGroups?.results ?? templateInstanceGroups?.results;\n  const inventory =\n    promptValues?.inventory ??\n    nodeValues.summary_fields.inventory ??\n    template.summary_fields.inventory;\n  const jobSliceCount =\n    promptValues?.job_slice_count ?? nodeValues?.job_slice_count ?? template.job_slice_count;\n  const jobTags =\n    promptValues?.job_tags ?? parseStringToTagArray(nodeValues?.job_tags || template.job_tags);\n  const jobType = promptValues?.job_type ?? nodeValues?.job_type ?? template.job_type;\n  const labels =\n    promptValues?.labels ?? nodeLabels?.results ?? template.summary_fields.labels?.results;\n  const limit = promptValues?.limit ?? nodeValues?.limit ?? template.limit;\n  const scmBranch = promptValues?.scm_branch ?? nodeValues?.scm_branch ?? template.scm_branch;\n  const skipTags =\n    promptValues?.skip_tags ?? parseStringToTagArray(nodeValues?.skip_tags || template.skip_tags);\n  const timeout = Number(promptValues?.timeout ?? nodeValues?.timeout ?? template.timeout);\n  const timeoutString = useGetTimeoutString(timeout);\n  const templateTimeoutString = useGetTimeoutString(template.timeout);\n  const verbosity = promptValues?.verbosity ?? nodeValues?.verbosity ?? template.verbosity;\n  const verbosityString = useVerbosityString(verbosity);\n  const templateVerbosityString = useVerbosityString(template.verbosity);\n  let variables =\n    promptValues?.extra_vars ??\n    (nodeValues?.extra_data ? jsonToYaml(JSON.stringify(nodeValues.extra_data)) : undefined) ??\n    template.extra_vars;\n\n  if (surveyValues) {\n    const jsonObj: { [key: string]: string } = {};\n\n    if (variables) {\n      const lines = variables.split('\\n');\n      lines.forEach((line) => {\n        const [key, value] = line.split(':').map((part) => part.trim());\n        jsonObj[key] = value;\n      });\n    }\n\n    const mergedData: { [key: string]: string | string[] | { name: string }[] } = {\n      ...jsonObj,\n      ...surveyValues,\n    };\n\n    variables = jsonToYaml(JSON.stringify(mergedData));\n  }\n\n  return {\n    credentials,\n    diffMode,\n    executionEnvironment,\n    forks,\n    instanceGroups,\n    inventory,\n    jobSliceCount,\n    jobTags,\n    jobType,\n    labels,\n    limit,\n    scmBranch,\n    skipTags,\n    templateCredentials,\n    templateInstanceGroups,\n    templateTimeoutString,\n    templateVerbosityString,\n    timeout,\n    timeoutString,\n    variables,\n    verbosity,\n    verbosityString,\n    webhookKey,\n  };\n}\n\nexport function JobTemplateDetails({\n  node,\n  template,\n}: {\n  node: GraphNodeData;\n  template: JobTemplate;\n}) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n\n  const {\n    credentials,\n    diffMode,\n    executionEnvironment,\n    forks,\n    instanceGroups,\n    inventory,\n    jobSliceCount,\n    jobTags,\n    jobType,\n    labels,\n    limit,\n    scmBranch,\n    skipTags,\n    templateCredentials,\n    templateInstanceGroups,\n    templateTimeoutString,\n    templateVerbosityString,\n    timeout,\n    timeoutString,\n    variables,\n    verbosity,\n    verbosityString,\n    webhookKey,\n  } = useAggregateJobTemplateDetails({ template, node });\n\n  return (\n    <>\n      <PromptDetail\n        label={t('Job type')}\n        isEmpty={!jobType}\n        isOverridden={jobType !== template.job_type}\n        overriddenValue={template.job_type}\n      >\n        {jobType}\n      </PromptDetail>\n      <PageDetail label={t('Organization')} isEmpty={!template.summary_fields.organization}>\n        <TextCell\n          text={template.summary_fields.organization?.name}\n          to={getPageUrl(AwxRoute.OrganizationDetails, {\n            params: { id: template.summary_fields.organization?.id },\n          })}\n        />\n      </PageDetail>\n      <PromptDetail\n        label={t('Inventory')}\n        isOverridden={inventory?.id !== template.summary_fields.inventory?.id}\n        overriddenValue={template.summary_fields.inventory?.name}\n        isEmpty={!inventory}\n      >\n        <TextCell\n          text={inventory?.name}\n          to={getPageUrl(AwxRoute.InventoryDetails, {\n            params: { id: inventory?.id },\n          })}\n        />\n      </PromptDetail>\n      <PageDetail label={t('Project')} isEmpty={!template.summary_fields.project}>\n        <TextCell\n          text={template.summary_fields.project?.name}\n          to={getPageUrl(AwxRoute.ProjectDetails, {\n            params: { id: template.summary_fields.project?.id },\n          })}\n        />\n      </PageDetail>\n\n      <PromptDetail\n        isEmpty={!executionEnvironment}\n        label={t('Execution environment')}\n        overriddenValue={template.summary_fields?.execution_environment?.name}\n        isOverridden={\n          executionEnvironment?.id !== template.summary_fields?.execution_environment?.id\n        }\n      >\n        <TextCell\n          text={executionEnvironment?.name}\n          to={getPageUrl(AwxRoute.ExecutionEnvironmentDetails, {\n            params: {\n              id: executionEnvironment?.id,\n            },\n          })}\n        />\n      </PromptDetail>\n      <CredentialsDetail\n        credentials={credentials}\n        templateCredentials={templateCredentials?.results ?? []}\n      />\n      <InstanceGroupsDetail\n        instanceGroups={instanceGroups}\n        templateInstanceGroups={templateInstanceGroups?.results ?? []}\n      />\n      <PageDetail label={t('Playbook')}>{template.playbook}</PageDetail>\n      <PromptDetail\n        label={t('Source control branch')}\n        isEmpty={!scmBranch}\n        isOverridden={scmBranch !== template.scm_branch}\n        overriddenValue={template.scm_branch}\n      >\n        {scmBranch}\n      </PromptDetail>\n      <PromptDetail\n        label={t('Forks')}\n        isEmpty={!forks}\n        isOverridden={forks !== template.forks}\n        overriddenValue={template.forks}\n      >\n        {forks}\n      </PromptDetail>\n      <PromptDetail\n        label={t('Limit')}\n        isEmpty={!limit}\n        isOverridden={limit !== template.limit}\n        overriddenValue={template.limit}\n      >\n        {limit}\n      </PromptDetail>\n      <PromptDetail\n        label={t('Verbosity')}\n        isEmpty={!verbosity}\n        isOverridden={verbosity !== template.verbosity}\n        overriddenValue={templateVerbosityString}\n      >\n        {verbosityString}\n      </PromptDetail>\n      <PromptDetail\n        label={t('Show changes')}\n        isEmpty={!diffMode}\n        isOverridden={diffMode !== template.diff_mode}\n        overriddenValue={template.diff_mode ? t`On` : t`Off`}\n      >\n        {diffMode ? t`On` : t`Off`}\n      </PromptDetail>\n      <PromptDetail\n        label={t('Job slicing')}\n        isEmpty={!jobSliceCount}\n        isOverridden={jobSliceCount !== template.job_slice_count}\n        overriddenValue={template.job_slice_count}\n      >\n        {jobSliceCount}\n      </PromptDetail>\n      <PromptDetail\n        label={t('Timeout')}\n        isEmpty={!timeout}\n        isOverridden={timeout !== template.timeout}\n        overriddenValue={templateTimeoutString}\n      >\n        {timeoutString}\n      </PromptDetail>\n      <PageDetail label={t('Webhook service')} isEmpty={!template.webhook_service}>\n        <WebhookService service={template.webhook_service} />\n      </PageDetail>\n      <PageDetail label={t('Webhook key')} isEmpty={!webhookKey?.webhook_key}>\n        {webhookKey?.webhook_key}\n      </PageDetail>\n      <PageDetail label={t('Webhook url')} isEmpty={!webhookKey?.webhook_key}>\n        {`${window.location.origin}${template.related.webhook_receiver}`}\n      </PageDetail>\n      <PageDetail\n        label={t('Enabled options')}\n        isEmpty={!(template.allow_simultaneous || template.webhook_service)}\n      >\n        <TextList component={TextListVariants.ul}>\n          {template.allow_simultaneous && (\n            <TextListItem component={TextListItemVariants.li}>{t`Concurrent jobs`}</TextListItem>\n          )}\n          {template.webhook_service && (\n            <TextListItem component={TextListItemVariants.li}>{t`Webhooks`}</TextListItem>\n          )}\n        </TextList>\n      </PageDetail>\n      <NodeTagDetail\n        label={t('Labels')}\n        nodeTags={labels}\n        templateTags={template.summary_fields.labels?.results}\n      />\n      <NodeTagDetail\n        label={t('Job tags')}\n        nodeTags={jobTags}\n        templateTags={parseStringToTagArray(template.job_tags || '')}\n      />\n      <NodeTagDetail\n        label={t('Skip tags')}\n        nodeTags={skipTags}\n        templateTags={parseStringToTagArray(template.skip_tags || '')}\n      />\n      <NodeCodeEditorDetail\n        label={t('Variables')}\n        nodeExtraVars={variables}\n        templateExtraVars={template.extra_vars}\n      />\n    </>\n  );\n}\n\nfunction CredentialsDetail({\n  credentials = [],\n  templateCredentials = [],\n}: {\n  credentials: Credential[] | PromptFormValues['credentials'];\n  templateCredentials: Credential[];\n}) {\n  const { t } = useTranslation();\n  const isMatch = arrayIdsMatch(\n    credentials.map(({ id }) => ({ id })),\n    templateCredentials\n  );\n\n  return (\n    <PromptDetail\n      label={t`Credentials`}\n      isEmpty={credentials?.length === 0}\n      isOverridden={!isMatch}\n      overriddenValue={templateCredentials.map((ig) => ig.name).join(', ')}\n    >\n      <LabelGroup>\n        {credentials?.map((credential) => (\n          <CredentialLabel credential={credential as Credential} key={credential.id} />\n        ))}\n      </LabelGroup>\n    </PromptDetail>\n  );\n}\n\nfunction InstanceGroupsDetail({\n  instanceGroups = [],\n  templateInstanceGroups = [],\n}: {\n  instanceGroups: InstanceGroup[];\n  templateInstanceGroups: InstanceGroup[];\n}) {\n  const { t } = useTranslation();\n  const isMatch = arrayIdsMatch(\n    instanceGroups.map(({ id }) => ({\n      id,\n    })),\n    templateInstanceGroups\n  );\n  const getPageUrl = useGetPageUrl();\n  return (\n    <PromptDetail\n      label={t`Instance groups`}\n      isEmpty={instanceGroups?.length === 0}\n      isOverridden={!isMatch}\n      overriddenValue={templateInstanceGroups.map((ig) => ig.name).join(', ')}\n    >\n      <LabelGroup>\n        {instanceGroups?.map((ig) => (\n          <Label color=\"blue\" key={ig.id}>\n            <Link\n              to={getPageUrl(AwxRoute.InstanceGroupDetails, {\n                params: {\n                  id: ig.id,\n                },\n              })}\n            >\n              {ig.name}\n            </Link>\n          </Label>\n        ))}\n      </LabelGroup>\n    </PromptDetail>\n  );\n}\n\nfunction arrayIdsMatch(arr1: { id: number }[], arr2: { id: number }[]) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  const idSet1 = new Set(arr1.map((obj) => obj.id));\n  const idSet2 = new Set(arr2.map((obj) => obj.id));\n\n  if (idSet1.size !== idSet2.size) {\n    return false;\n  }\n  for (const item of idSet1) {\n    if (!idSet2.has(item)) {\n      return false;\n    }\n  }\n  return true;\n}\n","import { ReactNode } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { AwxRoute } from '../../../../main/AwxRoutes';\nimport { PageDetail, useGetPageUrl } from '../../../../../../framework';\nimport { awxAPI } from '../../../../common/api/awx-utils';\nimport { useGet } from '../../../../../common/crud/useGet';\nimport { RESOURCE_TYPE } from '../constants';\nimport { InventorySource } from '../../../../interfaces/InventorySource';\nimport { WorkflowNode } from '../../../../interfaces/WorkflowNode';\nimport { UnifiedJobType } from '../types';\n\nconst ResourceLink: Record<UnifiedJobType, AwxRoute> = {\n  inventory_update: AwxRoute.InventorySourceDetail,\n  job: AwxRoute.JobTemplateDetails,\n  project_update: AwxRoute.ProjectDetails,\n  system_job: AwxRoute.ManagementJobSchedules,\n  workflow_approval: AwxRoute.WorkflowApprovalDetails,\n  workflow_job: AwxRoute.WorkflowJobTemplateDetails,\n};\n\nexport function NodeNameDetail({ nodeData }: { nodeData: WorkflowNode }) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n\n  const { id, name, unified_job_type: type } = nodeData.summary_fields?.unified_job_template || {};\n  let link: ReactNode;\n\n  if (type === RESOURCE_TYPE.inventory_update) {\n    link = <InventorySourceLink id={id?.toString() || ''}>{name}</InventorySourceLink>;\n  } else if (type) {\n    const url = getPageUrl(ResourceLink[type], {\n      params: { id },\n    });\n    link = <Link to={url}>{name}</Link>;\n  }\n\n  return (\n    <PageDetail label={t('Name')}>\n      {type === RESOURCE_TYPE.workflow_approval || type === RESOURCE_TYPE.system_job ? name : link}\n    </PageDetail>\n  );\n}\n\nfunction InventorySourceLink({ id, children }: { id: string; children: ReactNode }) {\n  const getPageUrl = useGetPageUrl();\n  const { data: inventorySource } = useGet<InventorySource>(awxAPI`/inventory_sources/${id}/`);\n\n  const inventoryType = inventorySource?.summary_fields?.inventory.kind || 'inventory';\n  const inventoryId = inventorySource?.inventory;\n\n  const url = getPageUrl(AwxRoute.InventorySourceDetail, {\n    params: {\n      source_id: inventorySource?.id,\n      id: inventoryId,\n      inventory_type: inventoryType,\n    },\n  });\n\n  return <Link to={url}>{children}</Link>;\n}\n","import { ReactNode } from 'react';\nimport { TextCell } from '../../framework';\n\nexport function getScmType(scm_type: string | null | undefined): {\n  text: string;\n  icon?: ReactNode;\n} {\n  switch (scm_type) {\n    case 'git':\n      return {\n        text: 'Git',\n      };\n    case 'svn':\n      return {\n        text: 'Svn',\n      };\n    case '':\n      return {\n        text: 'Manual',\n      };\n    case 'insights':\n      return {\n        text: 'Insights',\n      };\n    case 'archive':\n      return {\n        text: 'Remote archive',\n      };\n    default:\n      return {\n        text: 'Unknown',\n      };\n  }\n}\n\nexport function ScmType(props: { scmType: string | null | undefined }) {\n  const scm = getScmType(props.scmType);\n  return <TextCell icon={scm.icon} iconSize=\"md\" text={scm.text} />;\n}\n","import { useTranslation } from 'react-i18next';\nimport { PageDetail, CopyCell, TextCell, useGetPageUrl } from '../../../../../../framework';\nimport { useAwxConfig } from '../../../../common/useAwxConfig';\nimport { AwxRoute } from '../../../../main/AwxRoutes';\nimport { Project } from '../../../../interfaces/Project';\nimport { ScmType } from '../../../../../common/scm';\n\nexport function ProjectDetails({ project }: { project: Project }) {\n  const { t } = useTranslation();\n  const config = useAwxConfig();\n  const getPageUrl = useGetPageUrl();\n\n  return (\n    <>\n      <PageDetail label={t('Organization')} isEmpty={!project.summary_fields.organization}>\n        <TextCell\n          text={project.summary_fields.organization?.name}\n          to={getPageUrl(AwxRoute.OrganizationDetails, {\n            params: { id: project.summary_fields.organization?.id },\n          })}\n        />\n      </PageDetail>\n      <PageDetail label={t('Source control type')}>\n        <ScmType scmType={project.scm_type} />\n      </PageDetail>\n      {project.scm_revision && (\n        <PageDetail label={t('Source control revision')}>\n          <CopyCell text={project.scm_revision} />\n        </PageDetail>\n      )}\n      <PageDetail label={t('Source control URL')}>{project.scm_url}</PageDetail>\n      <PageDetail label={t('Source control branch')}>{project.scm_branch}</PageDetail>\n      <PageDetail label={t('Source control refspec')}>{project.scm_refspec}</PageDetail>\n      <PageDetail label={t('Cache timeout')}>\n        {`${project.scm_update_cache_timeout} seconds`}\n      </PageDetail>\n      <PageDetail label={t('Project Base Path')}>{config?.project_base_dir}</PageDetail>\n      <PageDetail label={t('Playbook directory')}>{project.local_path}</PageDetail>\n    </>\n  );\n}\n","import { ReactNode } from 'react';\nimport styled from 'styled-components';\nimport { Button, Title } from '@patternfly/react-core';\nimport { TimesIcon } from '@patternfly/react-icons';\n\nconst TopologySideBarHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport function SidebarHeader({\n  onClose,\n  title,\n}: {\n  onClose: () => void;\n  title: string | ReactNode;\n}) {\n  return (\n    <TopologySideBarHeader>\n      <Title headingLevel=\"h2\" style={{ padding: '16px 24px' }}>\n        {title}\n      </Title>\n      <Button variant=\"plain\" onClick={onClose} aria-label=\"Close\">\n        <TimesIcon />\n      </Button>\n    </TopologySideBarHeader>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport {\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n} from '@patternfly/react-core';\nimport { PageDetail, useGetPageUrl, TextCell } from '../../../../../../framework';\nimport { useGet } from '../../../../../common/crud/useGet';\nimport { WorkflowJobTemplate } from '../../../../interfaces/WorkflowJobTemplate';\nimport { AwxRoute } from '../../../../main/AwxRoutes';\nimport { jsonToYaml } from '../../../../../../framework/utils/codeEditorUtils';\nimport { AwxItemsResponse } from '../../../../common/AwxItemsResponse';\nimport { Label as ILabel } from '../../../../interfaces/Label';\nimport { LaunchConfiguration } from '../../../../interfaces/LaunchConfiguration';\nimport { parseStringToTagArray } from '../../JobTemplateFormHelpers';\nimport { GraphNodeData } from '../types';\nimport { NodeCodeEditorDetail } from './NodeCodeEditorDetail';\nimport { NodeTagDetail } from './NodeTagDetail';\nimport { PromptDetail } from './PromptDetail';\nimport { WebhookService } from '../../components/WebhookService';\n\nexport function WorkflowJobTemplateDetails({\n  node,\n  template,\n}: {\n  node: GraphNodeData;\n  template: WorkflowJobTemplate;\n}) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const { data: webhookKey } = useGet<{ webhook_key: string }>(template?.related?.webhook_key);\n  const { data: nodeLabels } = useGet<AwxItemsResponse<ILabel>>(node?.resource?.related?.labels);\n  const { data: launchConfig } = useGet<LaunchConfiguration>(template?.related?.launch);\n\n  const showOptionsField = template.allow_simultaneous || template.webhook_service;\n  const { launch_data: promptValues, resource: nodeValues, survey_data: surveyValues } = node;\n\n  const scmBranch = promptValues?.scm_branch ?? nodeValues?.scm_branch ?? template?.scm_branch;\n  const limit = promptValues?.limit ?? nodeValues?.limit ?? template?.limit;\n  const inventory =\n    promptValues?.inventory ??\n    nodeValues.summary_fields.inventory ??\n    template.summary_fields.inventory;\n  let variables =\n    promptValues?.extra_vars ??\n    (nodeValues?.extra_data ? jsonToYaml(JSON.stringify(nodeValues.extra_data)) : undefined) ??\n    template.extra_vars;\n\n  if (surveyValues) {\n    const jsonObj: { [key: string]: string } = {};\n\n    if (variables) {\n      const lines = variables.split('\\n');\n      lines.forEach((line) => {\n        const [key, value] = line.split(':').map((part) => part.trim());\n        jsonObj[key] = value;\n      });\n    }\n\n    const mergedData: { [key: string]: string | string[] | { name: string }[] } = {\n      ...jsonObj,\n      ...surveyValues,\n    };\n\n    variables = jsonToYaml(JSON.stringify(mergedData));\n  }\n\n  return (\n    <>\n      <PageDetail label={t('Organization')} isEmpty={!template.summary_fields.organization}>\n        <TextCell\n          text={template.summary_fields.organization?.name}\n          to={getPageUrl(AwxRoute.OrganizationDetails, {\n            params: { id: template.summary_fields.organization?.id },\n          })}\n        />\n      </PageDetail>\n      <PromptDetail\n        label={t('Inventory')}\n        isOverridden={inventory?.id !== template.summary_fields.inventory?.id}\n        overriddenValue={template.summary_fields.inventory?.name}\n        isEmpty={!inventory}\n      >\n        <TextCell\n          text={inventory?.name}\n          to={getPageUrl(AwxRoute.InventoryDetails, {\n            params: { id: inventory?.id },\n          })}\n        />\n      </PromptDetail>\n      <PromptDetail\n        label={t('Source control branch')}\n        isEmpty={!scmBranch}\n        isOverridden={scmBranch !== template.scm_branch}\n        overriddenValue={template.scm_branch}\n      >\n        {scmBranch}\n      </PromptDetail>\n      <PromptDetail\n        label={t('Limit')}\n        isEmpty={!limit}\n        isOverridden={limit !== template.limit}\n        overriddenValue={template.limit}\n      >\n        {limit}\n      </PromptDetail>\n      <PageDetail label={t('Webhook service')} isEmpty={!template.webhook_service}>\n        <WebhookService service={template.webhook_service} />\n      </PageDetail>\n      <PageDetail label={t('Webhook key')} isEmpty={!webhookKey?.webhook_key}>\n        {webhookKey?.webhook_key}\n      </PageDetail>\n      <PageDetail label={t('Webhook url')} isEmpty={!webhookKey?.webhook_key}>\n        {`${window.location.origin}${template.related.webhook_receiver}`}\n      </PageDetail>\n      <PageDetail label={t('Enabled options')} isEmpty={!showOptionsField}>\n        <TextList component={TextListVariants.ul}>\n          {template.allow_simultaneous && (\n            <TextListItem component={TextListItemVariants.li}>{t`Concurrent jobs`}</TextListItem>\n          )}\n          {template.webhook_service && (\n            <TextListItem component={TextListItemVariants.li}>{t`Webhooks`}</TextListItem>\n          )}\n        </TextList>\n      </PageDetail>\n      <NodeTagDetail\n        label={t('Labels')}\n        nodeTags={\n          launchConfig?.ask_labels_on_launch\n            ? promptValues?.labels ?? nodeLabels?.results\n            : template.summary_fields.labels?.results\n        }\n        templateTags={template.summary_fields.labels?.results}\n      />\n      <NodeTagDetail\n        label={t('Job tags')}\n        nodeTags={\n          launchConfig?.ask_tags_on_launch\n            ? promptValues?.job_tags ?? parseStringToTagArray(nodeValues?.job_tags || '')\n            : parseStringToTagArray(template.job_tags || '')\n        }\n        templateTags={parseStringToTagArray(template.job_tags || '')}\n      />\n      <NodeTagDetail\n        label={t('Skip tags')}\n        nodeTags={\n          launchConfig?.ask_skip_tags_on_launch\n            ? promptValues?.skip_tags ?? parseStringToTagArray(nodeValues?.skip_tags || '')\n            : parseStringToTagArray(template.skip_tags || '')\n        }\n        templateTags={parseStringToTagArray(template.skip_tags || '')}\n      />\n      <NodeCodeEditorDetail\n        label={t('Variables')}\n        nodeExtraVars={variables}\n        templateExtraVars={template.extra_vars}\n      />\n    </>\n  );\n}\n","import { ElementType } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ActionList, Button, PageSection } from '@patternfly/react-core';\nimport { useVisualizationController } from '@patternfly/react-topology';\nimport {\n  ClipboardCheckIcon,\n  ClockIcon,\n  CogIcon,\n  ProcessAutomationIcon,\n  ShareAltIcon,\n  SyncAltIcon,\n} from '@patternfly/react-icons';\nimport { SVGIconProps } from '@patternfly/react-icons/dist/js/createIcon';\nimport { DateTimeCell, PageDetail, PageDetails, Scrollable } from '../../../../../../framework';\nimport { awxAPI } from '../../../../common/api/awx-utils';\nimport { useGet } from '../../../../../common/crud/useGet';\nimport { LastModifiedPageDetail } from '../../../../../common/LastModifiedPageDetail';\nimport { PageDetailCodeEditor } from '../../../../../../framework/PageDetails/PageDetailCodeEditor';\nimport { jsonToYaml } from '../../../../../../framework/utils/codeEditorUtils';\nimport { Project } from '../../../../interfaces/Project';\nimport { JobTemplate } from '../../../../interfaces/JobTemplate';\nimport { WorkflowJobTemplate } from '../../../../interfaces/WorkflowJobTemplate';\nimport { InventorySource } from '../../../../interfaces/InventorySource';\nimport { SystemJobTemplate } from '../../../../interfaces/SystemJobTemplate';\nimport { WorkflowApproval } from '../../../../interfaces/WorkflowApproval';\nimport { SummaryFieldUnifiedJobTemplate } from '../../../../interfaces/summary-fields/summary-fields';\nimport { ControllerState, GraphNode } from '../types';\nimport { useViewOptions } from '../ViewOptionsProvider';\nimport { useCloseSidebar, useGetNodeTypeDetail, useGetTimeoutString } from '../hooks';\nimport { InventorySourceDetails } from './InventorySourceDetails';\nimport { JobTemplateDetails } from './JobTemplateDetails';\nimport { NodeNameDetail } from './NodeNameDetail';\nimport { ProjectDetails } from './ProjectDetails';\nimport { SidebarHeader } from './SidebarHeader';\nimport { WorkflowJobTemplateDetails } from './WorkflowJobTemplateDetails';\n\ntype RelatedTemplate =\n  | JobTemplate\n  | WorkflowJobTemplate\n  | InventorySource\n  | SystemJobTemplate\n  | WorkflowApproval\n  | Project;\n\nfunction getRelatedResourceUrl(unifiedJobTemplate?: SummaryFieldUnifiedJobTemplate) {\n  if (!unifiedJobTemplate) return '';\n  switch (unifiedJobTemplate?.unified_job_type) {\n    case 'inventory_update':\n      return awxAPI`/inventory_sources/${unifiedJobTemplate?.id.toString()}/`;\n    case 'job':\n      return awxAPI`/job_templates/${unifiedJobTemplate?.id.toString()}/`;\n    case 'project_update':\n      return awxAPI`/projects/${unifiedJobTemplate?.id.toString()}/`;\n    case 'workflow_job':\n      return awxAPI`/workflow_job_templates/${unifiedJobTemplate?.id.toString()}/`;\n    case 'system_job':\n      return awxAPI`/system_job_templates/${unifiedJobTemplate?.id.toString()}/`;\n    case 'workflow_approval':\n      return awxAPI`/workflow_approval_templates/${unifiedJobTemplate?.id.toString()}/`;\n    default:\n      return '';\n  }\n}\n\nexport function WorkflowNodeDetails({ node }: { node: GraphNode }) {\n  const { t } = useTranslation();\n  const nodeData = node.getData();\n  const unifiedJobTemplate = nodeData?.resource?.summary_fields?.unified_job_template;\n  const { data } = useGet<RelatedTemplate>(\n    getRelatedResourceUrl(nodeData?.resource?.summary_fields.unified_job_template)\n  );\n  const timeoutString = useGetTimeoutString(unifiedJobTemplate?.timeout || 0);\n  const nodeTypeDetail = useGetNodeTypeDetail(unifiedJobTemplate?.unified_job_type);\n  const controller = useVisualizationController();\n  const { RBAC } = controller.getState<ControllerState>();\n\n  if (!nodeData) return null;\n\n  let Details;\n  switch (data?.type) {\n    case 'inventory_source':\n      Details = <InventorySourceDetails source={data} />;\n      break;\n    case 'job_template':\n      Details = <JobTemplateDetails node={nodeData} template={data} />;\n      break;\n    case 'project':\n      Details = <ProjectDetails project={data} />;\n      break;\n    case 'workflow_job_template':\n      Details = <WorkflowJobTemplateDetails node={nodeData} template={data} />;\n      break;\n    case 'system_job_template':\n      Details = (\n        <PageDetailCodeEditor\n          label={t('Variables')}\n          value={jsonToYaml(JSON.stringify(nodeData?.resource?.extra_data || {}))}\n        />\n      );\n      break;\n  }\n\n  return (\n    <>\n      <WorkflowNodeDetailsHeader node={node} />\n      <Scrollable borderTop>\n        <PageDetails numberOfColumns=\"single\">\n          <NodeNameDetail nodeData={nodeData?.resource} />\n          <PageDetail label={t('Type')}>{nodeTypeDetail}</PageDetail>\n          <PageDetail isEmpty={!unifiedJobTemplate?.description} label={t('Description')}>\n            {unifiedJobTemplate?.description}\n          </PageDetail>\n          <PageDetail label={t('Convergence')}>\n            {nodeData?.resource?.all_parents_must_converge ? t('All') : t('Any')}\n          </PageDetail>\n\n          <PageDetail\n            label={t('Timeout')}\n            isEmpty={unifiedJobTemplate?.timeout === undefined ? true : false}\n          >\n            {timeoutString}\n          </PageDetail>\n\n          {Details}\n\n          <PageDetail label={t('Created')} isEmpty={!nodeData?.resource?.created}>\n            <DateTimeCell value={nodeData?.resource?.created} />\n          </PageDetail>\n          <LastModifiedPageDetail value={nodeData?.resource?.modified} />\n        </PageDetails>\n      </Scrollable>\n      {RBAC?.edit && <WorkflowNodeDetailsFooter node={node} />}\n    </>\n  );\n}\n\nfunction WorkflowNodeDetailsHeader({ node }: { node: GraphNode }) {\n  const closeSidebar = useCloseSidebar();\n\n  const NodeIcon: { [key: string]: ElementType<SVGIconProps> } = {\n    inventory_update: ProcessAutomationIcon,\n    job: ClipboardCheckIcon,\n    project_update: SyncAltIcon,\n    system_job: CogIcon,\n    workflow_approval: ClockIcon,\n    workflow_job: ShareAltIcon,\n  };\n\n  const nodeData = node.getData();\n  const jobType = nodeData?.resource?.summary_fields.unified_job_template?.unified_job_type;\n  const Icon = jobType ? NodeIcon[jobType] : null;\n\n  return (\n    <SidebarHeader\n      title={\n        <>\n          {Icon && <Icon style={{ marginRight: '8px' }} />}\n          {node.getLabel()}\n        </>\n      }\n      onClose={closeSidebar}\n    />\n  );\n}\n\nfunction WorkflowNodeDetailsFooter({ node }: { node: GraphNode }) {\n  const { t } = useTranslation();\n  const { setSidebarMode } = useViewOptions();\n  const { removeNodes } = useViewOptions();\n  const closeSidebar = useCloseSidebar();\n\n  const handleEdit = () => setSidebarMode('edit');\n  const handleRemove = () => {\n    removeNodes([node]);\n    closeSidebar();\n  };\n\n  return (\n    <PageSection variant=\"light\" isFilled={false} className=\"bg-lighten border-top\">\n      <ActionList data-cy=\"workflow-topology-sidebar-actions\">\n        <Button data-cy=\"edit-node\" variant=\"primary\" onClick={handleEdit}>\n          {t('Edit')}\n        </Button>\n        <Button data-cy=\"remove-node\" variant=\"danger\" onClick={handleRemove}>\n          {t('Remove')}\n        </Button>\n      </ActionList>\n    </PageSection>\n  );\n}\n","import { Chip, ChipGroup } from '@patternfly/react-core';\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n} from '@patternfly/react-core/deprecated';\nimport { ChangeEvent, MouseEvent, ReactNode, useState } from 'react';\nimport { getID, useID } from '../../hooks/useID';\nimport { PageFormGroup } from './PageFormGroup';\n\nexport type FormGroupTypeAheadMultiSelectProps = {\n  id?: string;\n\n  label: string;\n  labelHelp?: string | string[] | ReactNode;\n  labelHelpTitle?: string;\n\n  helperText?: string;\n  helperTextInvalid?: string;\n\n  additionalControls?: ReactNode;\n  isReadOnly?: boolean;\n  placeholderText?: string | ReactNode;\n  options: { value: string | { name: string }; label: string }[];\n  onSelect?: (\n    event: MouseEvent | ChangeEvent,\n    value: string | SelectOptionObject,\n    isPlaceholder?: boolean\n  ) => void;\n  onHandleSelection: (value: string | SelectOptionObject | { name: string }) => void;\n  isSubmitting: boolean;\n  value: Partial<{ name: string }>[];\n  onHandleClear: (chip?: string) => void;\n  isRequired?: boolean;\n};\n\n/** A PatternFly FormGroup with a PatternFly Select */\nexport function FormGroupTypeAheadMultiSelect(props: FormGroupTypeAheadMultiSelectProps) {\n  const {\n    additionalControls,\n    helperText,\n    helperTextInvalid,\n    isReadOnly,\n    isRequired,\n    isSubmitting,\n    label,\n    labelHelp,\n    labelHelpTitle,\n    onHandleClear,\n    onHandleSelection,\n    options,\n    placeholderText,\n    value,\n  } = props;\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const chipGroupComponent = () => {\n    if (!value) {\n      return;\n    }\n    const trimmedValues = value.filter((v) => v.name && v.name.trim() !== '');\n    return (\n      <ChipGroup>\n        {trimmedValues.map((v) => (\n          <Chip\n            key={v.name}\n            onClick={() => {\n              onHandleClear(v.name);\n            }}\n          >\n            {v.name}\n          </Chip>\n        ))}\n      </ChipGroup>\n    );\n  };\n\n  const id = useID(props);\n\n  return (\n    <PageFormGroup\n      fieldId={id}\n      label={label}\n      labelHelp={labelHelp}\n      labelHelpTitle={labelHelpTitle ?? label}\n      helperTextInvalid={helperTextInvalid}\n      isRequired={isRequired}\n      additionalControls={additionalControls}\n      helperText={helperText}\n    >\n      <Select\n        chipGroupComponent={chipGroupComponent()}\n        variant={SelectVariant.typeaheadMulti}\n        isCreatable\n        placeholderText={!value?.length && placeholderText ? placeholderText : undefined}\n        isOpen={isOpen}\n        isCreateOptionOnTop\n        onClear={() => onHandleClear()}\n        id={id}\n        ouiaId=\"menu-select\"\n        selections={value?.length ? value : undefined}\n        onToggle={() => {\n          setIsOpen(!isOpen);\n        }}\n        onSelect={(_, v) => {\n          setIsOpen(!isOpen);\n          onHandleSelection(typeof v === 'string' ? { name: v } : v);\n        }}\n        isDisabled={isReadOnly || isSubmitting}\n      >\n        {options.map((option) => {\n          const optionId = getID(option);\n          return (\n            <SelectOption key={`${option.label}`} value={option.value} data-cy={optionId}>\n              {option.label}\n            </SelectOption>\n          );\n        })}\n      </Select>\n    </PageFormGroup>\n  );\n}\n","import { ReactElement, ReactNode } from 'react';\nimport {\n  Controller,\n  FieldPath,\n  FieldPathValue,\n  FieldValues,\n  Validate,\n  useFormContext,\n} from 'react-hook-form';\nimport { FormGroupTypeAheadMultiSelect } from './FormGroupTypeAheadMultiSelect';\nimport { useRequiredValidationRule } from './validation-hooks';\n\nexport type PageFormCreatableSelectProps<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  id?: string;\n  name: TFieldName;\n  label: string;\n  labelHelp?: string | string[] | ReactNode;\n  labelHelpTitle?: string;\n  additionalControls?: ReactElement;\n  placeholderText?: string;\n  options: { value: string | { name: string }; label: string }[];\n  isReadOnly?: boolean;\n  isRequired?: boolean;\n  validate?:\n    | Validate<FieldPathValue<TFieldValues, TFieldName>, TFieldValues>\n    | Record<string, Validate<FieldPathValue<TFieldValues, TFieldName>, TFieldValues>>;\n};\n\nexport function PageFormCreatableSelect<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: PageFormCreatableSelectProps<TFieldValues, TFieldName>) {\n  const {\n    additionalControls,\n    id,\n    isReadOnly,\n    isRequired,\n    label,\n    labelHelp,\n    labelHelpTitle,\n    name,\n    options,\n    placeholderText,\n    validate,\n  } = props;\n  const {\n    control,\n    formState: { isSubmitting },\n    getValues,\n  } = useFormContext<TFieldValues>();\n  const required = useRequiredValidationRule(props.label, props.isRequired);\n  return (\n    <Controller<TFieldValues, TFieldName>\n      name={props.name}\n      control={control}\n      shouldUnregister\n      render={({ field: { onChange, value }, fieldState: { error } }) => (\n        <FormGroupTypeAheadMultiSelect\n          additionalControls={additionalControls}\n          helperTextInvalid={error?.message}\n          id={id ?? name}\n          isReadOnly={isReadOnly}\n          isSubmitting={isSubmitting}\n          isRequired={isRequired}\n          label={label}\n          labelHelp={labelHelp}\n          labelHelpTitle={labelHelpTitle ?? label}\n          options={options}\n          placeholderText={placeholderText}\n          value={value}\n          onHandleClear={(chip?: string) => {\n            const values: { name: string }[] = getValues(props.name);\n            onChange(!chip ? [] : values.filter((v: { name: string }) => v.name !== chip));\n          }}\n          onHandleSelection={(item) => {\n            let newValue;\n            const selectedItem = item as { name: string };\n            const values: { name: string }[] = getValues(props.name);\n\n            if (values?.find((value) => value.name === selectedItem.name)) {\n              newValue = values.filter((i) => i !== selectedItem);\n            } else {\n              newValue = values?.length ? [...values, selectedItem] : [selectedItem];\n            }\n            return onChange(newValue);\n          }}\n        />\n      )}\n      rules={{ required, validate: validate }}\n    />\n  );\n}\n","import { Button, Modal, ModalVariant } from '@patternfly/react-core';\nimport { useCallback } from 'react';\nimport { PageTable } from '../PageTable/PageTable';\nimport { ITableColumn, useVisibleModalColumns } from '../PageTable/PageTableColumn';\nimport { ISelected } from '../PageTable/useTableItems';\nimport { IToolbarFilter } from '../PageToolbar/PageToolbarFilter';\nimport { useFrameworkTranslations } from '../useFrameworkTranslations';\nimport { IView } from '../useView';\nimport { usePageDialog } from './PageDialog';\n\nexport type SingleSelectDialogProps<T extends object> = {\n  title: string;\n  view: IView & ISelected<T> & { itemCount?: number; pageItems: T[] | undefined };\n  tableColumns: ITableColumn<T>[];\n  toolbarFilters: IToolbarFilter[];\n  onSelect: (item: T) => void;\n  confirmText?: string;\n  cancelText?: string;\n  emptyStateTitle?: string;\n  errorStateTitle?: string;\n  onClose?: () => void;\n};\n\nexport function SingleSelectDialog<T extends object>(props: SingleSelectDialogProps<T>) {\n  const { title, view, tableColumns, toolbarFilters, confirmText, cancelText, onSelect } = props;\n  const [_, setDialog] = usePageDialog();\n  let onClose = useCallback(() => setDialog(undefined), [setDialog]);\n  if (props.onClose) {\n    onClose = props.onClose;\n  }\n\n  const [translations] = useFrameworkTranslations();\n  const modalColumns = useVisibleModalColumns(tableColumns);\n  return (\n    <Modal\n      title={title}\n      aria-label={title}\n      ouiaId={title}\n      isOpen\n      onClose={onClose}\n      variant={ModalVariant.medium}\n      tabIndex={0}\n      actions={[\n        <Button\n          key=\"submit\"\n          variant=\"primary\"\n          id=\"submit\"\n          onClick={() => {\n            onClose();\n            if (view.selectedItems.length > 0) {\n              onSelect(view.selectedItems[0]);\n            }\n          }}\n          isAriaDisabled={view.selectedItems.length === 0}\n        >\n          {confirmText ?? translations.confirmText}\n        </Button>,\n        <Button id=\"cancel\" key=\"cancel\" variant=\"link\" onClick={onClose}>\n          {cancelText ?? translations.cancelText}\n        </Button>,\n      ]}\n      hasNoBodyWrapper\n    >\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          maxHeight: 500,\n          overflow: 'hidden',\n        }}\n      >\n        <PageTable<T>\n          tableColumns={modalColumns}\n          toolbarFilters={toolbarFilters}\n          {...view}\n          emptyStateTitle={props.emptyStateTitle ?? translations.noItemsFound}\n          errorStateTitle={props.errorStateTitle ?? translations.errorText}\n          disableCardView\n          disableListView\n          compact\n          disableBodyPadding\n          onSelect={() => {\n            // do nothing\n          }}\n          autoHidePagination\n        />\n      </div>\n    </Modal>\n  );\n}\n","import { t } from 'i18next';\nimport {\n  Controller,\n  FieldPath,\n  FieldPathValue,\n  FieldValues,\n  Validate,\n  useFormContext,\n} from 'react-hook-form';\nimport {\n  PageAsyncSingleSelect,\n  PageAsyncSingleSelectProps,\n} from '../../PageInputs/PageAsyncSingleSelect';\nimport { useID } from '../../hooks/useID';\nimport { useFrameworkTranslations } from '../../useFrameworkTranslations';\nimport { PageFormGroup, PageFormGroupProps } from './PageFormGroup';\nimport { useRequiredValidationRule } from './validation-hooks';\n\nexport type PageFormAsyncSingleSelectProps<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n  ValueT = FieldPathValue<TFieldValues, TFieldName>,\n> = {\n  name: TFieldName;\n  validate?:\n    | Validate<FieldPathValue<TFieldValues, TFieldName>, TFieldValues>\n    | Record<string, Validate<FieldPathValue<TFieldValues, TFieldName>, TFieldValues>>;\n  isReadOnly?: boolean;\n} & Pick<\n  PageAsyncSingleSelectProps<ValueT>,\n  | 'id'\n  | 'placeholder'\n  | 'footer'\n  | 'isDisabled'\n  | 'isRequired'\n  | 'queryOptions'\n  | 'queryPlaceholder'\n  | 'queryErrorText'\n  | 'onBrowse'\n  | 'queryLabel'\n  | 'writeInOption'\n> &\n  Pick<\n    PageFormGroupProps,\n    'label' | 'labelHelp' | 'labelHelpTitle' | 'additionalControls' | 'isRequired' | 'helperText'\n  >;\n\nexport function PageFormAsyncSingleSelect<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: PageFormAsyncSingleSelectProps<TFieldValues, TFieldName>) {\n  const id = useID(props);\n\n  const { control, formState } = useFormContext<TFieldValues>();\n  const { isSubmitting, isValidating } = formState;\n\n  const [translations] = useFrameworkTranslations();\n  const required = useRequiredValidationRule(props.label, props.isRequired);\n\n  return (\n    <Controller<TFieldValues, TFieldName>\n      name={props.name}\n      control={control}\n      shouldUnregister\n      render={({ field: { value, onChange }, fieldState: { error } }) => {\n        const helperTextInvalid = error?.message\n          ? props.validate && isValidating\n            ? translations.validating\n            : error?.message\n          : undefined;\n        let isDisabled = props.isDisabled;\n        if (!isDisabled && props.isReadOnly) {\n          isDisabled = t('Readonly');\n        }\n        if (isSubmitting) {\n          isDisabled = t('Submitting');\n        }\n        return (\n          <PageFormGroup\n            fieldId={id}\n            label={props.label}\n            labelHelpTitle={props.labelHelpTitle ?? props.label}\n            labelHelp={props.labelHelp}\n            helperText={props.helperText}\n            helperTextInvalid={helperTextInvalid}\n            isRequired={props.isRequired}\n            additionalControls={props.additionalControls}\n          >\n            <PageAsyncSingleSelect\n              id={id}\n              data-cy={id ?? name}\n              placeholder={props.placeholder}\n              queryOptions={props.queryOptions}\n              queryPlaceholder={props.queryPlaceholder}\n              queryErrorText={props.queryErrorText}\n              aria-describedby={id ? `${id}-form-group` : undefined}\n              value={value}\n              onSelect={onChange}\n              isDisabled={isDisabled}\n              footer={props.footer}\n              onBrowse={props.onBrowse}\n              queryLabel={props.queryLabel}\n              disableAutoSelect\n              isRequired={props.isRequired}\n              writeInOption={props.writeInOption}\n            />\n          </PageFormGroup>\n        );\n      }}\n      rules={{\n        required,\n        validate: props.validate,\n      }}\n    />\n  );\n}\n","import { Spinner } from '@patternfly/react-core';\nimport { ReactNode } from 'react';\nimport { RequestError } from './crud/RequestError';\nimport { useGetItem } from './crud/useGet';\n\n/** Asychronously queries a label from a URL */\nexport function AsyncQueryLabel(props: {\n  url: string;\n  id: number | string | undefined;\n  field?: string;\n}): ReactNode {\n  const { data, isLoading, error } = useGetItem<Record<string, unknown>>(props.url, props.id, {\n    refreshInterval: 0, // Disable refresh on querying labels\n  });\n\n  if (props.id === undefined) return null;\n\n  if (isLoading) return <Spinner size=\"md\" />;\n\n  if (error) {\n    if (error.name === 'RequestError') {\n      const requestError = error as RequestError;\n      if (requestError.statusCode === 404) {\n        return props.id.toString();\n      }\n    }\n    return error.message;\n  }\n\n  if (!data) {\n    return props.id.toString();\n  }\n\n  const value = data[props.field ?? 'name'];\n\n  switch (typeof value) {\n    case 'string':\n      return value;\n    case 'number':\n      return value.toString();\n    default:\n      return props.id.toString();\n  }\n}\n","import { useCallback, useMemo } from 'react';\nimport { FieldPath, FieldValues, PathValue, useFormContext, useWatch } from 'react-hook-form';\nimport { ITableColumn, IToolbarFilter, usePageDialog } from '../../../framework';\nimport { SingleSelectDialog } from '../../../framework/PageDialogs/SingleSelectDialog';\nimport { PageFormAsyncSingleSelect } from '../../../framework/PageForm/Inputs/PageFormAsyncSingleSelect';\nimport { PageAsyncSelectOptionsFn } from '../../../framework/PageInputs/PageAsyncSelectOptions';\nimport { useID } from '../../../framework/hooks/useID';\nimport { AsyncQueryLabel } from '../../common/AsyncQueryLabel';\nimport { requestGet } from '../../common/crud/Data';\nimport { AwxItemsResponse } from './AwxItemsResponse';\nimport { QueryParams, useAwxView } from './useAwxView';\n\nexport function PageFormSingleSelectAwxResource<\n  Resource extends { id: number; name: string; description?: string | null | undefined },\n  FormData extends FieldValues = FieldValues,\n  Name extends FieldPath<FormData> = FieldPath<FormData>,\n  Value extends number = PathValue<FormData, Name>,\n>(props: {\n  id?: string;\n  name: Name;\n  label: string;\n  isRequired?: boolean;\n  isDisabled?: string;\n  url: string;\n  toolbarFilters?: IToolbarFilter[];\n  tableColumns: ITableColumn<Resource>[];\n  defaultSelection?: Value[];\n  placeholder: string;\n  queryPlaceholder: string;\n  queryErrorText: string;\n  helperText?: string;\n  additionalControls?: React.ReactNode;\n  labelHelp?: string;\n  queryParams?: QueryParams;\n}) {\n  const id = useID(props);\n\n  const queryOptions = useCallback<PageAsyncSelectOptionsFn<PathValue<FormData, Name>>>(\n    async (options) => {\n      try {\n        const baseUrl = props.url.split('?')[0];\n        const queryString = props.url.split('?')[1];\n        const urlSearchParams = new URLSearchParams(queryString);\n        urlSearchParams.delete('page_size');\n        urlSearchParams.set('page_size', '10');\n        urlSearchParams.delete('order_by');\n        urlSearchParams.set('order_by', 'name');\n        if (props.queryParams) {\n          for (const [key, value] of Object.entries(props.queryParams)) {\n            if (Array.isArray(value)) {\n              for (const subVal of value) {\n                urlSearchParams.set(key, subVal);\n              }\n            } else {\n              urlSearchParams.set(key, value);\n            }\n          }\n        }\n        if (options.next) urlSearchParams.set('name__gt', options.next.toString());\n        if (options.search) urlSearchParams.set('name__icontains', options.search);\n        const response = await requestGet<AwxItemsResponse<Resource>>(\n          baseUrl + '?' + decodeURIComponent(urlSearchParams.toString()),\n          options.signal\n        );\n        return {\n          remaining: response.count - response.results.length,\n          options:\n            response.results?.map((resource) => ({\n              label: resource.name,\n              value: resource.id as PathValue<FormData, Name>,\n              description: resource.description,\n            })) ?? [],\n          next: response.results[response.results.length - 1]?.name,\n        };\n      } catch (error) {\n        return {\n          remaining: 0,\n          options: [],\n          next: 0,\n        };\n      }\n    },\n    [props.url, props.queryParams]\n  );\n\n  const [_, setDialog] = usePageDialog();\n\n  const { setValue } = useFormContext<FormData>();\n  const value = useWatch<FormData>({ name: props.name });\n  const openSelectDialog = useCallback(\n    (onSelect: (resource: Resource) => void) => {\n      setDialog(\n        <SelectResource<Resource>\n          title={props.label}\n          url={props.url}\n          onSelect={onSelect}\n          toolbarFilters={props.toolbarFilters}\n          tableColumns={props.tableColumns}\n          defaultSelection={value ? [{ id: value }] : []}\n          queryParams={props.queryParams}\n        />\n      );\n    },\n    [\n      props.label,\n      props.tableColumns,\n      props.toolbarFilters,\n      props.url,\n      setDialog,\n      value,\n      props.queryParams,\n    ]\n  );\n\n  const queryLabel = useCallback(\n    (value: Value) => (\n      <AsyncQueryLabel url={props.url.split('?')[0]} id={value as unknown as number} />\n    ),\n    [props.url]\n  );\n\n  return (\n    <PageFormAsyncSingleSelect<FormData, Name>\n      id={id}\n      name={props.name}\n      label={props.label}\n      queryOptions={queryOptions}\n      placeholder={props.placeholder}\n      queryPlaceholder={props.queryPlaceholder}\n      queryErrorText={props.queryErrorText}\n      isRequired={props.isRequired}\n      isDisabled={props.isDisabled}\n      helperText={props.helperText}\n      labelHelp={props.labelHelp}\n      onBrowse={() =>\n        openSelectDialog((resource) =>\n          setValue(props.name, resource.id as PathValue<FormData, Name>)\n        )\n      }\n      queryLabel={queryLabel}\n      additionalControls={props.additionalControls}\n    />\n  );\n}\n\nfunction SelectResource<\n  Resource extends { id: number; name: string; description?: string | null | undefined },\n>(props: {\n  title: string;\n  url: string;\n  onSelect: (resource: Resource) => void;\n  defaultSelection?: { id: number }[];\n  toolbarFilters?: IToolbarFilter[];\n  tableColumns: ITableColumn<Resource>[];\n  queryParams?: QueryParams;\n}) {\n  const urlSearchParams = useMemo(() => new URLSearchParams(props.url.split('?')[1]), [props.url]);\n\n  const queryParams = useMemo(() => {\n    const query: QueryParams = {};\n    urlSearchParams.forEach((value, key) => (query[key] = value));\n    return query;\n  }, [urlSearchParams]);\n\n  const view = useAwxView<Resource>({\n    url: props.url.split('?')[0],\n    toolbarFilters: props.toolbarFilters,\n    tableColumns: props.tableColumns,\n    disableQueryString: true,\n    defaultSelection: props.defaultSelection as Resource[],\n    queryParams: props.queryParams ?? queryParams,\n  });\n  return (\n    <SingleSelectDialog<Resource>\n      title={props.title}\n      onSelect={props.onSelect}\n      toolbarFilters={props.toolbarFilters ?? []}\n      tableColumns={props.tableColumns}\n      view={view}\n    />\n  );\n}\n","import { useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ITableColumn, usePageNavigate } from '../../../../../framework';\nimport {\n  useCreatedColumn,\n  useDescriptionColumn,\n  useIdColumn,\n  useModifiedColumn,\n  useNameColumn,\n} from '../../../../common/columns';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { Credential } from '../../../interfaces/Credential';\nimport { CredentialType } from '../../../interfaces/CredentialType';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useAwxGetAllPages } from '../../../common/useAwxGetAllPages';\n\nexport function useCredentialsColumns(options?: { disableSort?: boolean; disableLinks?: boolean }) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const nameClick = useCallback(\n    (credential: Credential) =>\n      pageNavigate(AwxRoute.CredentialDetails, { params: { id: credential.id } }),\n    [pageNavigate]\n  );\n  const idColumn = useIdColumn();\n  const nameColumn = useNameColumn({ ...options, onClick: nameClick });\n  const descriptionColumn = useDescriptionColumn();\n  const createdColumn = useCreatedColumn(options);\n  const modifiedColumn = useModifiedColumn(options);\n\n  const { results: allCredTypes } = useAwxGetAllPages<CredentialType>(awxAPI`/credential_types/`);\n\n  const credentialTypesMap: { [id: number]: string } = useMemo(() => {\n    const credTypes: { [id: number]: string } = {};\n    if (allCredTypes) {\n      for (const credentialType of allCredTypes) {\n        const { id, name } = credentialType;\n        if (id && name) {\n          credTypes[id] = name;\n        }\n      }\n      return credTypes;\n    } else {\n      return {};\n    }\n  }, [allCredTypes]);\n  const tableColumns = useMemo<ITableColumn<Credential>[]>(\n    () => [\n      idColumn,\n      nameColumn,\n      descriptionColumn,\n      {\n        id: 'credential_type',\n        header: t('Credential type'),\n        cell: (credential) => {\n          return credentialTypesMap && credentialTypesMap[credential.credential_type]\n            ? credentialTypesMap[credential.credential_type]\n            : t('Unknown');\n        },\n        card: 'subtitle',\n        list: 'subtitle',\n      },\n      createdColumn,\n      modifiedColumn,\n    ],\n    [idColumn, nameColumn, descriptionColumn, t, createdColumn, modifiedColumn, credentialTypesMap]\n  );\n  return tableColumns;\n}\n","import { useCallback, useMemo, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { IToolbarFilter, ToolbarFilterType } from '../../../framework';\nimport {\n  PageAsyncSelectQueryOptions,\n  PageAsyncSelectQueryResult,\n} from '../../../framework/PageInputs/PageAsyncSelectOptions';\nimport { DateRangeFilterPresets } from '../../../framework/PageToolbar/PageToolbarFilters/ToolbarDateRangeFilter';\nimport { AsyncQueryLabel } from '../../common/AsyncQueryLabel';\nimport { requestGet } from '../../common/crud/Data';\nimport { useOptions } from '../../common/crud/useOptions';\nimport { AwxItemsResponse } from '../common/AwxItemsResponse';\nimport { awxAPI } from '../common/api/awx-utils';\nimport { ActionsResponse, OptionsResponse } from '../interfaces/OptionsResponse';\n\ninterface DynamicToolbarFiltersProps {\n  /** API endpoint for the options that generated the filters */\n  optionsPath: string;\n\n  /** A list of keys to order the filters toolbar */\n  preSortedKeys?: string[];\n\n  /** An object of keys to pre-populate dropdown values. Note: knownAwxFilterKeys adds some keys that require quering specific endpoints */\n  preFilledValueKeys?: Record<string, AsyncKeyOptions>;\n\n  /** Additional filters in addition to the dynamic filters */\n  additionalFilters?: IToolbarFilter[];\n\n  /** Additional filters to remove */\n  removeFilters?: string[];\n}\n\ninterface FilterableFields {\n  key: string;\n  type: string;\n  label: string;\n  query: string;\n  options?: { value: string; label: string }[];\n}\n\nexport function useFilters(actions?: { [key: string]: ActionsResponse }) {\n  return useMemo(() => {\n    if (!actions) {\n      return [];\n    }\n    const filterableFields = Object.entries(actions).reduce<\n      {\n        key: string;\n        type: string;\n        label: string;\n        query: string;\n        options?: { value: string; label: string }[];\n      }[]\n    >((acc, [key, value]) => {\n      if (value.filterable) {\n        acc.push({\n          key,\n          type: value.type,\n          label: value.label,\n          query: key,\n          options: value.choices ? value.choices.map(([value, label]) => ({ value, label })) : [],\n        });\n      }\n      return acc;\n    }, []);\n    return filterableFields;\n  }, [actions]);\n}\n\nfunction craftRequestUrl(\n  queryOptions: PageAsyncSelectQueryOptions,\n  optionsPath: string,\n  labelKey: string,\n  queryKey: string,\n  queryParams?: Record<string, string | string[]>\n) {\n  let url = awxAPI`/${optionsPath}/?page_size=20&order_by=${queryKey}`;\n  if (queryOptions.next) {\n    url += `&${queryKey}__gt=${queryOptions.next}`;\n  }\n  if (queryOptions.search) {\n    url += `&${labelKey}__icontains=${queryOptions.search}`;\n  }\n  if (queryParams) {\n    Object.entries(queryParams).forEach(([key, value]) => {\n      if (Array.isArray(value)) {\n        for (const subVal of value) {\n          url += `&${key}=${subVal}`;\n        }\n      } else {\n        url += `&${key}=${value}`;\n      }\n    });\n  }\n  // decode the returned url\n  const decodedUrl = decodeURIComponent(url);\n  return decodedUrl;\n}\n\nexport function useDynamicToolbarFilters(props: DynamicToolbarFiltersProps) {\n  // useRef to keep the initial props since thay should not change\n  // this is used to prevent the filters from being re-calculated\n  // which would cause the filters to be re-rendered\n  const { optionsPath, preSortedKeys, preFilledValueKeys, additionalFilters, removeFilters } =\n    useRef(props).current;\n  const { t } = useTranslation();\n  const url = awxAPI`/${optionsPath}/`;\n  // decode the returned url\n  const decodedUrl = decodeURIComponent(url);\n  const { data } = useOptions<OptionsResponse<ActionsResponse>>(decodedUrl);\n  const filterableFields = useFilters(data?.actions?.GET);\n  const queryResource = useCallback<\n    (\n      queryOptions: PageAsyncSelectQueryOptions,\n      key: string\n    ) => Promise<PageAsyncSelectQueryResult<string>>\n  >(\n    async (queryOptions: PageAsyncSelectQueryOptions, key: string) => {\n      const knownAwxFilter = knownAwxFilterKeys[key] || preFilledValueKeys?.[key];\n      const labelKey = knownAwxFilter.labelKey || key;\n      const valueKey = knownAwxFilter.valueKey || key;\n      const itemsResponse = await requestGet<\n        AwxItemsResponse<Record<string, string | number | undefined>>\n      >(\n        craftRequestUrl(\n          queryOptions,\n          knownAwxFilter.apiPath,\n          labelKey,\n          valueKey,\n          knownAwxFilter.queryParams\n        ),\n        queryOptions.signal\n      );\n      let next: string = '';\n      if (itemsResponse.results.length > 0) {\n        const value = itemsResponse.results[itemsResponse.results.length - 1][valueKey];\n        next = value?.toString() ?? '';\n      }\n      return {\n        remaining: itemsResponse.count - itemsResponse.results.length,\n        options: itemsResponse.results.map((resource) => {\n          const label = resource[labelKey]?.toString() || '';\n          return { label, value: resource[valueKey]?.toString() || '' };\n        }),\n        next,\n      };\n    },\n    [preFilledValueKeys]\n  );\n  const queryResourceLabel = useCallback(\n    (value: string, key: string) => {\n      const knownAwxFilter = knownAwxFilterKeys[key] || preFilledValueKeys?.[key];\n      if (knownAwxFilter) {\n        return (\n          <AsyncQueryLabel\n            url={awxAPI`/${knownAwxFilter.apiPath}/`}\n            id={value}\n            field={knownAwxFilter.labelKey}\n          />\n        );\n      }\n      return value;\n    },\n    [preFilledValueKeys]\n  );\n\n  const filters: IToolbarFilter[] = useMemo(() => {\n    const getToolbars = (\n      filterableFields: FilterableFields[],\n      preSortedKeys?: string[],\n      preFilledValueKeys?: Record<string, AsyncKeyOptions>,\n      additionalFilters?: IToolbarFilter[],\n      removeFilters?: string[]\n    ): IToolbarFilter[] => {\n      const toolbarFilters: IToolbarFilter[] = [];\n\n      filterableFields.forEach((field) => {\n        // Check if key is in preFilledValueKeys\n        let isPreFilled = preFilledValueKeys && preFilledValueKeys[field.key] ? true : false;\n        if (knownAwxFilterKeys[field.key]) {\n          isPreFilled = true;\n        }\n        // handle fields with options\n        if (field.type === 'choice') {\n          toolbarFilters.push({\n            key: field.key,\n            label: t(field.label),\n            type: ToolbarFilterType.MultiSelect,\n            placeholder: t(`Select {{field}}`, { field: field.label.toLowerCase() }),\n            query: field.query,\n            options: field.options ? field.options : [],\n            disableSortOptions: true,\n          });\n        } else if (field.type === 'boolean') {\n          toolbarFilters.push({\n            key: field.key,\n            label: t(field.label),\n            type: ToolbarFilterType.SingleSelect,\n            placeholder: t(`Filter by {{field}}`, { field: field.label.toLowerCase() }),\n            query: field.query,\n            options: [\n              { label: t('True'), value: 'true' },\n              { label: t('False'), value: 'false' },\n            ],\n            disableSortOptions: true,\n          });\n        } else if (field.type === 'datetime') {\n          // daterange calculations found in useAwxView.tsx\n          toolbarFilters.push({\n            key: field.key,\n            label: t(field.label),\n            type: ToolbarFilterType.DateRange,\n            placeholder: t(`Filter by {{field}}`, { field: field.label.toLowerCase() }),\n            query: field.query,\n            options: [\n              { label: t('Last hour'), value: DateRangeFilterPresets.LastHour },\n              { label: t('Last 24 hours'), value: DateRangeFilterPresets.Last24Hours },\n              { label: t('Last 7 days'), value: DateRangeFilterPresets.LastWeek },\n              { label: t('Last 30 days'), value: DateRangeFilterPresets.LastMonth },\n            ],\n          });\n        } else if (isPreFilled) {\n          // Check if field.key is included in preFilledValueKeys\n          toolbarFilters.push({\n            key: field.key,\n            query: field.query,\n            label: t(field.label),\n            type: ToolbarFilterType.AsyncMultiSelect,\n            queryOptions: (options) => queryResource(options, field.key),\n            placeholder: t(`Select {{field}}`, { field: field.label.toLowerCase() }),\n            queryPlaceholder: t('Loading...'),\n            queryErrorText: t('Failed to load options.'),\n            queryLabel: (value: string) => queryResourceLabel(value, field.key),\n          });\n        } else {\n          toolbarFilters.push({\n            key: field.key,\n            label: t(field.label),\n            type: ToolbarFilterType.MultiText,\n            query: `${field.key}__icontains`,\n            comparison: 'contains',\n            placeholder: t(`Filter by {{field}} ({{fieldType}})`, {\n              field: field.label.toLowerCase(),\n              fieldType: field.type.toLowerCase(),\n            }),\n          });\n        }\n      });\n      // add additional filters if provided\n      if (additionalFilters && toolbarFilters.length > 0) {\n        if (Array.isArray(additionalFilters)) {\n          toolbarFilters.push(...additionalFilters);\n        } else {\n          toolbarFilters.push(additionalFilters);\n        }\n      }\n      // Sort toolbarFilters based on preSortedKeys\n      if (preSortedKeys && preSortedKeys.length > 0) {\n        toolbarFilters.sort((a, b) => {\n          const indexA = preSortedKeys.indexOf(a.key);\n          const indexB = preSortedKeys.indexOf(b.key);\n          if (indexA === -1 && indexB === -1) return 0;\n          if (indexA === -1) return 1;\n          if (indexB === -1) return -1;\n          return indexA - indexB;\n        });\n      }\n      // remove filters if provided\n      if (removeFilters && toolbarFilters.length > 0) {\n        return toolbarFilters.filter((filter) => !removeFilters.includes(filter.key));\n      }\n\n      return toolbarFilters;\n    };\n    return getToolbars(\n      filterableFields,\n      preSortedKeys,\n      preFilledValueKeys,\n      additionalFilters,\n      removeFilters\n    );\n  }, [\n    filterableFields,\n    preSortedKeys,\n    preFilledValueKeys,\n    additionalFilters,\n    removeFilters,\n    t,\n    queryResource,\n    queryResourceLabel,\n  ]);\n\n  return filters;\n}\n\ninterface AsyncKeyOptions {\n  /** The API endpoint for the options that will be loaded asynchronously\n   * @example 'execution_environments'\n   */\n  apiPath: string;\n\n  /**\n   * The key to be used as the label for the resource.\n   * @default 'name'\n   */\n  labelKey?: string;\n\n  /**\n   * The key to be used as the value for the resource.\n   * @default 'id'\n   */\n  valueKey?: string;\n\n  /**\n   * Additional query parameters to be used when fetching the options\n   */\n  queryParams?: Record<string, string | string[]>;\n}\n\n/** A list of known keys that require querying specific endpoints. We pre-fetch these values if available */\nexport const knownAwxFilterKeys: Record<string, AsyncKeyOptions> = {\n  credential_type: { apiPath: 'credential_types', labelKey: 'name', valueKey: 'id' },\n  credential: { apiPath: 'credentials', labelKey: 'name', valueKey: 'id' },\n  default_environment: { apiPath: 'execution_environments', labelKey: 'name', valueKey: 'id' },\n  organization: { apiPath: 'organizations', labelKey: 'name', valueKey: 'id' },\n  project: { apiPath: 'projects', labelKey: 'name', valueKey: 'id' },\n  execution_environment: { apiPath: 'execution_environments', labelKey: 'name', valueKey: 'id' },\n  unified_job_template: { apiPath: 'unified_job_templates', labelKey: 'name', valueKey: 'id' },\n  execution_node: {\n    labelKey: 'hostname',\n    apiPath: 'instances',\n    valueKey: 'id',\n    queryParams: { node_type: 'execution' },\n  },\n  controller_node: {\n    labelKey: 'hostname',\n    valueKey: 'id',\n    apiPath: 'instances',\n    queryParams: { node_type: 'control' },\n  },\n  inventory: { apiPath: 'inventories', labelKey: 'name', valueKey: 'id' },\n  last_job: { apiPath: 'unified_jobs', labelKey: 'id', valueKey: 'id' },\n};\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { IToolbarFilter, ToolbarFilterType } from '../../../framework';\n\nexport function useNameToolbarFilter() {\n  const { t } = useTranslation();\n  return useMemo<IToolbarFilter>(\n    () => ({\n      key: 'name',\n      label: t('Name'),\n      type: ToolbarFilterType.MultiText,\n      query: 'name__icontains',\n      comparison: 'contains',\n    }),\n    [t]\n  );\n}\n\nexport function useKeywordToolbarFilter() {\n  const { t } = useTranslation();\n  return useMemo<IToolbarFilter>(\n    () => ({\n      key: 'keyword',\n      label: t('Keyword'),\n      type: ToolbarFilterType.SingleText,\n      query: 'search',\n      comparison: 'contains',\n    }),\n    [t]\n  );\n}\n\nexport function useInitiatedByToolbarFilter() {\n  const { t } = useTranslation();\n  return useMemo<IToolbarFilter>(\n    () => ({\n      key: 'initiated-by',\n      label: t('Initiated by (username)'),\n      type: ToolbarFilterType.SingleText,\n      query: 'actor__username__icontains',\n      comparison: 'contains',\n    }),\n    [t]\n  );\n}\n\nexport function useDescriptionToolbarFilter() {\n  const { t } = useTranslation();\n  return useMemo<IToolbarFilter>(\n    () => ({\n      key: 'description',\n      label: t('Description'),\n      type: ToolbarFilterType.MultiText,\n      query: 'description__icontains',\n      comparison: 'contains',\n    }),\n    [t]\n  );\n}\n\nexport function useOrganizationToolbarFilter() {\n  const { t } = useTranslation();\n  return useMemo<IToolbarFilter>(\n    () => ({\n      key: 'organization',\n      label: t('Organization'),\n      type: ToolbarFilterType.MultiText,\n      query: 'organization__name__icontains',\n      comparison: 'contains',\n    }),\n    [t]\n  );\n}\n\nexport function useCreatedByToolbarFilter() {\n  const { t } = useTranslation();\n  return useMemo<IToolbarFilter>(\n    () => ({\n      key: 'created-by',\n      label: t('Created by'),\n      type: ToolbarFilterType.MultiText,\n      query: 'created_by__username__icontains',\n      comparison: 'contains',\n    }),\n    [t]\n  );\n}\n\nexport function useModifiedByToolbarFilter() {\n  const { t } = useTranslation();\n  return useMemo<IToolbarFilter>(\n    () => ({\n      key: 'modified-by',\n      label: t('Modified by'),\n      type: ToolbarFilterType.MultiText,\n      query: 'modified_by__username__icontains',\n      comparison: 'contains',\n    }),\n    [t]\n  );\n}\n\nexport function useUsernameToolbarFilter() {\n  const { t } = useTranslation();\n  return useMemo<IToolbarFilter>(\n    () => ({\n      key: 'username',\n      label: t('Username'),\n      type: ToolbarFilterType.MultiText,\n      query: 'username__icontains',\n      comparison: 'contains',\n    }),\n    [t]\n  );\n}\n\nexport function useFirstNameToolbarFilter() {\n  const { t } = useTranslation();\n  return useMemo<IToolbarFilter>(\n    () => ({\n      key: 'firstname',\n      label: t('First name'),\n      type: ToolbarFilterType.MultiText,\n      query: 'first_name__icontains',\n      comparison: 'contains',\n    }),\n    [t]\n  );\n}\n\nexport function useLastNameToolbarFilter() {\n  const { t } = useTranslation();\n  return useMemo<IToolbarFilter>(\n    () => ({\n      key: 'lastname',\n      label: t('Last name'),\n      type: ToolbarFilterType.MultiText,\n      query: 'last_name__icontains',\n      comparison: 'contains',\n    }),\n    [t]\n  );\n}\n\nexport function useEmailToolbarFilter() {\n  const { t } = useTranslation();\n  return useMemo<IToolbarFilter>(\n    () => ({\n      key: 'email',\n      label: t('Email'),\n      type: ToolbarFilterType.MultiText,\n      query: 'email__icontains',\n      comparison: 'contains',\n    }),\n    [t]\n  );\n}\n\nexport function useInventoryTypeToolbarFilter() {\n  const { t } = useTranslation();\n  return useMemo<IToolbarFilter>(\n    () => ({\n      key: 'inventory-type',\n      label: t('Inventory type'),\n      type: ToolbarFilterType.MultiSelect,\n      query: 'kind',\n      options: [\n        { label: t('Inventory'), value: '' },\n        { label: t('Smart inventory'), value: 'smart' },\n        { label: t('Constructed inventory'), value: 'constructed' },\n      ],\n      placeholder: t('Select types'),\n      disableSortOptions: true,\n    }),\n    [t]\n  );\n}\n\nexport function useGroupTypeToolbarFilter() {\n  const { t } = useTranslation();\n  return useMemo<IToolbarFilter>(\n    () => ({\n      key: 'group',\n      label: t('Group type'),\n      type: ToolbarFilterType.MultiSelect,\n      query: 'parents__isnull',\n      options: [{ label: t('Show only root groups'), value: 'true' }],\n      placeholder: t('Filter by group type'),\n    }),\n    [t]\n  );\n}\n\nexport function useImageToolbarFilter() {\n  const { t } = useTranslation();\n  return useMemo<IToolbarFilter>(\n    () => ({\n      key: 'image',\n      label: t('Image'),\n      type: ToolbarFilterType.MultiText,\n      query: 'image__icontains',\n      comparison: 'contains',\n    }),\n    [t]\n  );\n}\n\nexport function useHostnameToolbarFilter() {\n  const { t } = useTranslation();\n  return useMemo<IToolbarFilter>(\n    () => ({\n      key: 'hostname',\n      label: t('Host name'),\n      type: ToolbarFilterType.SingleText,\n      query: 'hostname__icontains',\n      comparison: 'contains',\n    }),\n    [t]\n  );\n}\n\nexport function useAddressToolbarFilter() {\n  const { t } = useTranslation();\n  return useMemo<IToolbarFilter>(\n    () => ({\n      key: 'address',\n      label: t('Instance name'),\n      type: ToolbarFilterType.SingleText,\n      query: 'address__icontains',\n      comparison: 'contains',\n    }),\n    [t]\n  );\n}\n\nexport function useTemplateTypeToolbarFilter() {\n  const { t } = useTranslation();\n  return useMemo<IToolbarFilter>(\n    () => ({\n      key: 'type-templates',\n      label: t('Type'),\n      type: ToolbarFilterType.MultiSelect,\n      query: 'type',\n      options: [\n        { label: t('Job template'), value: 'job_template' },\n        { label: t('Workflow job template'), value: 'workflow_job_template' },\n      ],\n      placeholder: t('Select types'),\n    }),\n    [t]\n  );\n}\n","import { useDynamicToolbarFilters } from '../../../common/useDynamicFilters';\nimport {\n  useCreatedByToolbarFilter,\n  useModifiedByToolbarFilter,\n} from '../../../common/awx-toolbar-filters';\n\nexport function useCredentialsFilters() {\n  const createdByToolbarFilter = useCreatedByToolbarFilter();\n  const modifiedByToolbarFilter = useModifiedByToolbarFilter();\n  const toolBarFilters = useDynamicToolbarFilters({\n    optionsPath: 'credentials',\n    preSortedKeys: ['name', 'credential_type', 'created-by', 'modified-by'],\n    preFilledValueKeys: { name: { apiPath: 'credentials' }, id: { apiPath: 'credentials' } },\n    additionalFilters: [createdByToolbarFilter, modifiedByToolbarFilter],\n  });\n\n  return toolBarFilters;\n}\n","import { t } from 'i18next';\nimport {\n  Controller,\n  FieldPath,\n  FieldPathValue,\n  FieldValues,\n  Validate,\n  useFormContext,\n} from 'react-hook-form';\nimport {\n  PageAsyncMultiSelect,\n  PageAsyncMultiSelectProps,\n} from '../../PageInputs/PageAsyncMultiSelect';\nimport { useID } from '../../hooks/useID';\nimport { useFrameworkTranslations } from '../../useFrameworkTranslations';\nimport { PageFormGroup, PageFormGroupProps } from './PageFormGroup';\nimport { useRequiredValidationRule } from './validation-hooks';\n\nexport type PageFormAsyncMultiSelectProps<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n  ValueT = FieldPathValue<TFieldValues, TFieldName>,\n> = {\n  name: TFieldName;\n  validate?:\n    | Validate<FieldPathValue<TFieldValues, TFieldName>, TFieldValues>\n    | Record<string, Validate<FieldPathValue<TFieldValues, TFieldName>, TFieldValues>>;\n  isReadOnly?: boolean;\n} & Pick<\n  PageAsyncMultiSelectProps<ValueT>,\n  | 'id'\n  | 'placeholder'\n  | 'footer'\n  | 'isDisabled'\n  | 'queryOptions'\n  | 'queryPlaceholder'\n  | 'queryErrorText'\n  | 'disableClearChips'\n  | 'disableClearSelection'\n  | 'onBrowse'\n  | 'queryLabel'\n  | 'compareOptionValues'\n> &\n  Pick<\n    PageFormGroupProps,\n    'label' | 'labelHelp' | 'labelHelpTitle' | 'additionalControls' | 'isRequired' | 'helperText'\n  >;\n\nexport function PageFormAsyncMultiSelect<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: PageFormAsyncMultiSelectProps<TFieldValues, TFieldName>) {\n  const id = useID(props);\n\n  const { control, formState } = useFormContext<TFieldValues>();\n  const { isSubmitting, isValidating } = formState;\n\n  const [translations] = useFrameworkTranslations();\n  const required = useRequiredValidationRule(props.label, props.isRequired);\n\n  return (\n    <Controller<TFieldValues, TFieldName>\n      name={props.name}\n      control={control}\n      shouldUnregister\n      render={({ field: { value, onChange }, fieldState: { error } }) => {\n        const helperTextInvalid = error?.message\n          ? props.validate && isValidating\n            ? translations.validating\n            : error?.message\n          : undefined;\n        let isDisabled = props.isDisabled;\n        if (!isDisabled && props.isReadOnly) {\n          isDisabled = t('Readonly');\n        }\n        if (isSubmitting) {\n          isDisabled = t('Submitting');\n        }\n        return (\n          <PageFormGroup\n            fieldId={id}\n            label={props.label}\n            labelHelpTitle={props.labelHelpTitle ?? props.label}\n            labelHelp={props.labelHelp}\n            helperText={props.helperText}\n            helperTextInvalid={helperTextInvalid}\n            isRequired={props.isRequired}\n            additionalControls={props.additionalControls}\n          >\n            <PageAsyncMultiSelect\n              id={id}\n              data-cy={id ?? name}\n              placeholder={props.placeholder}\n              queryOptions={props.queryOptions}\n              queryPlaceholder={props.queryPlaceholder}\n              queryErrorText={props.queryErrorText}\n              aria-describedby={id ? `${id}-form-group` : undefined}\n              values={value}\n              onSelect={(getNewValues) => onChange(getNewValues(value))}\n              isDisabled={isDisabled}\n              footer={props.footer}\n              disableClearChips={props.disableClearChips}\n              disableClearSelection={props.disableClearSelection}\n              onBrowse={props.onBrowse}\n              queryLabel={props.queryLabel}\n              compareOptionValues={props.compareOptionValues}\n            />\n          </PageFormGroup>\n        );\n      }}\n      rules={{\n        required,\n        validate: props.validate,\n      }}\n    />\n  );\n}\n","import { useCallback, useMemo } from 'react';\nimport { FieldPath, FieldValues, PathValue, useFormContext, useWatch } from 'react-hook-form';\nimport { ITableColumn, IToolbarFilter, MultiSelectDialog, usePageDialog } from '../../../framework';\nimport { PageFormAsyncMultiSelect } from '../../../framework/PageForm/Inputs/PageFormAsyncMultiSelect';\nimport { PageAsyncSelectOptionsFn } from '../../../framework/PageInputs/PageAsyncSelectOptions';\nimport { useID } from '../../../framework/hooks/useID';\nimport { AsyncQueryLabel } from '../../common/AsyncQueryLabel';\nimport { requestGet } from '../../common/crud/Data';\nimport { AwxItemsResponse } from './AwxItemsResponse';\nimport { QueryParams, useAwxView } from './useAwxView';\n\nexport function PageFormMultiSelectAwxResource<\n  Resource extends { id: number; name: string; description?: string | null | undefined },\n  FormData extends FieldValues = FieldValues,\n  Name extends FieldPath<FormData> = FieldPath<FormData>,\n  Value extends Resource = PathValue<FormData, Name>,\n>(props: {\n  id?: string;\n  name: Name;\n  label: string;\n  isRequired?: boolean;\n  isDisabled?: string;\n  url: string;\n  toolbarFilters?: IToolbarFilter[];\n  tableColumns: ITableColumn<Resource>[];\n  defaultSelection?: Value[];\n  placeholder: string;\n  queryPlaceholder: string;\n  queryErrorText: string;\n  helperText?: string;\n  additionalControls?: React.ReactNode;\n  labelHelp?: string;\n  queryParams?: QueryParams;\n  compareOptionValues?: (a: Value, b: Value) => boolean;\n  validate?: (items: Value[]) => Promise<string | undefined>;\n  formatLabel?: (item: Resource) => string;\n}) {\n  const { formatLabel = undefined } = props;\n  const id = useID(props);\n\n  const queryOptions = useCallback<PageAsyncSelectOptionsFn<PathValue<FormData, Name>>>(\n    async (options) => {\n      try {\n        const baseUrl = props.url.split('?')[0];\n        const queryString = props.url.split('?')[1];\n        const urlSearchParams = new URLSearchParams(queryString);\n        urlSearchParams.delete('page_size');\n        urlSearchParams.set('page_size', '10');\n        urlSearchParams.delete('order_by');\n        urlSearchParams.set('order_by', 'name');\n        if (props.queryParams) {\n          for (const [key, value] of Object.entries(props.queryParams)) {\n            if (Array.isArray(value)) {\n              for (const subVal of value) {\n                urlSearchParams.set(key, subVal);\n              }\n            } else {\n              urlSearchParams.set(key, value);\n            }\n          }\n        }\n        if (options.next) urlSearchParams.set('name__gt', options.next.toString());\n        if (options.search) urlSearchParams.set('name__icontains', options.search);\n        const response = await requestGet<AwxItemsResponse<Resource>>(\n          baseUrl + '?' + decodeURIComponent(urlSearchParams.toString()),\n          options.signal\n        );\n        return {\n          remaining: response.count - response.results.length,\n          options:\n            response.results?.map((resource) => ({\n              value: resource as PathValue<FormData, Name>,\n              description: resource.description,\n              label: formatLabel ? formatLabel(resource) : resource.name,\n            })) ?? [],\n          next: response.results[response.results.length - 1]?.name,\n        };\n      } catch (error) {\n        return {\n          remaining: 0,\n          options: [],\n          next: 0,\n        };\n      }\n    },\n    [props.url, props.queryParams, formatLabel]\n  );\n\n  const [_, setDialog] = usePageDialog();\n\n  const { setValue } = useFormContext<FormData>();\n  const value = useWatch<FormData>({ name: props.name }) as Value[];\n  const openSelectDialog = useCallback(\n    (onSelect: (resources: Resource[]) => void) => {\n      setDialog(\n        <SelectResource<Resource>\n          title={props.label}\n          url={props.url}\n          onSelect={onSelect}\n          toolbarFilters={props.toolbarFilters}\n          tableColumns={props.tableColumns}\n          queryParams={props.queryParams}\n          defaultSelection={\n            value && Array.isArray(value)\n              ? value.map((item) => {\n                  return { id: item.id };\n                })\n              : []\n          }\n        />\n      );\n    },\n    [\n      props.label,\n      props.tableColumns,\n      props.toolbarFilters,\n      props.url,\n      setDialog,\n      value,\n      props.queryParams,\n    ]\n  );\n\n  const queryLabel = useCallback(\n    (value: Value) => <AsyncQueryLabel url={props.url.split('?')[0]} id={value.id} />,\n    [props.url]\n  );\n\n  return (\n    <PageFormAsyncMultiSelect<FormData, Name>\n      id={id}\n      name={props.name}\n      label={props.label}\n      queryOptions={queryOptions}\n      placeholder={props.placeholder}\n      queryPlaceholder={props.queryPlaceholder}\n      queryErrorText={props.queryErrorText}\n      isRequired={props.isRequired}\n      isDisabled={props.isDisabled}\n      helperText={props.helperText}\n      labelHelp={props.labelHelp}\n      onBrowse={() =>\n        openSelectDialog((resources: Resource[]) => {\n          if (resources) {\n            setValue(props.name, resources.map((res) => res) as PathValue<FormData, Name>);\n          }\n        })\n      }\n      queryLabel={queryLabel}\n      additionalControls={props.additionalControls}\n      compareOptionValues={props.compareOptionValues}\n      validate={props.validate}\n    />\n  );\n}\n\nfunction SelectResource<\n  Resource extends { id: number; name: string; description?: string | null | undefined },\n>(props: {\n  title: string;\n  url: string;\n  onSelect: (resource: Resource[]) => void;\n  defaultSelection?: { id: number }[];\n  toolbarFilters?: IToolbarFilter[];\n  tableColumns: ITableColumn<Resource>[];\n  queryParams?: QueryParams;\n}) {\n  const urlSearchParams = useMemo(() => new URLSearchParams(props.url.split('?')[1]), [props.url]);\n\n  const queryParams = useMemo(() => {\n    let query: QueryParams = {};\n    urlSearchParams.forEach((value, key) => (query[key] = value));\n    query = { ...query, ...props.queryParams };\n    return query;\n  }, [urlSearchParams, props.queryParams]);\n\n  const view = useAwxView<Resource>({\n    url: props.url.split('?')[0],\n    toolbarFilters: props.toolbarFilters,\n    tableColumns: props.tableColumns,\n    disableQueryString: true,\n    defaultSelection: props.defaultSelection as Resource[],\n    queryParams,\n  });\n  return (\n    <MultiSelectDialog<Resource>\n      title={props.title}\n      onSelect={props.onSelect}\n      toolbarFilters={props.toolbarFilters ?? []}\n      tableColumns={props.tableColumns}\n      view={view}\n    />\n  );\n}\n","import { ReactElement } from 'react';\nimport { FieldPath, FieldValues } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { Credential } from '../../../interfaces/Credential';\nimport { PageFormSingleSelectAwxResource } from '../../../common/PageFormSingleSelectAwxResource';\nimport { useCredentialsColumns } from '../hooks/useCredentialsColumns';\nimport { useCredentialsFilters } from '../hooks/useCredentialsFilters';\nimport { QueryParams } from '../../../common/useAwxView';\nimport { PageFormMultiSelectAwxResource } from '../../../common/PageFormMultiSelectAwxResource';\nimport { useCredentialsValidate } from '../hooks/useCredentialsValidate';\n\nexport function PageFormCredentialSelect<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  additionalControls?: ReactElement;\n  id?: string;\n  isDisabled?: string;\n  isMultiple?: boolean;\n  isRequired?: boolean;\n  label?: string;\n  labelHelp?: string;\n  placeholder?: string;\n  queryParams?: QueryParams;\n  allowDuplicateCredentialTypes?: boolean;\n}) {\n  const { t } = useTranslation();\n\n  const credentialColumns = useCredentialsColumns({ disableLinks: true });\n  const credentialFilters = useCredentialsFilters();\n  const validateCredentials = useCredentialsValidate(!!props?.allowDuplicateCredentialTypes);\n\n  return props.isMultiple ? (\n    <PageFormMultiSelectAwxResource<Credential>\n      name={props.name}\n      id={props.id ? props.id : 'credential'}\n      label={props.label ? props.label : t('Credential')}\n      placeholder={props.placeholder ? props.placeholder : t('Select credentials')}\n      queryPlaceholder={t('Loading credentials...')}\n      queryErrorText={t('Error loading credentials')}\n      isRequired={props.isRequired}\n      isDisabled={props.isDisabled}\n      labelHelp={props.labelHelp}\n      url={awxAPI`/credentials/`}\n      tableColumns={credentialColumns}\n      toolbarFilters={credentialFilters}\n      queryParams={props.queryParams}\n      additionalControls={props.additionalControls}\n      compareOptionValues={(currentCredential: Credential, selectCredential: Credential) =>\n        currentCredential.id === selectCredential.id\n      }\n      validate={validateCredentials}\n      formatLabel={(credential: Credential) => {\n        return `${credential.name} | ${credential.summary_fields.credential_type.name}`;\n      }}\n    />\n  ) : (\n    <PageFormSingleSelectAwxResource<Credential, TFieldValues, TFieldName>\n      name={props.name}\n      id={props.id ? props.id : 'credential'}\n      label={props.label ? props.label : t('Credential')}\n      placeholder={props.placeholder ? props.placeholder : t('Select credential')}\n      queryPlaceholder={t('Loading credentials...')}\n      queryErrorText={t('Error loading credentials')}\n      isRequired={props.isRequired}\n      isDisabled={props.isDisabled}\n      labelHelp={props.labelHelp}\n      url={awxAPI`/credentials/`}\n      tableColumns={credentialColumns}\n      toolbarFilters={credentialFilters}\n      queryParams={props.queryParams}\n      additionalControls={props.additionalControls}\n    />\n  );\n}\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PromptFormValues } from '../../../resources/templates/WorkflowVisualizer/types';\nimport { Credential } from '../../../interfaces/Credential';\nimport { requestGet } from '../../../../common/crud/Data';\nimport { awxAPI } from '../../../common/api/awx-utils';\n\nexport function useCredentialsValidate(allowDuplicateCredentialTypes = false) {\n  const { t } = useTranslation();\n  return useCallback(\n    async (selectedCredentials: PromptFormValues['credentials']) => {\n      const originalCredentials: number[] = [];\n      const newCredentials: Credential[] = [];\n      selectedCredentials?.forEach((credential) =>\n        !('summary_fields' in credential)\n          ? originalCredentials.push(credential.id)\n          : newCredentials.push(credential)\n      );\n      const fullDefaultCredentials: Credential[] = await Promise.all(\n        originalCredentials.map((defCred) =>\n          requestGet<Credential>(awxAPI`/credentials/${defCred.toString()}/`)\n        )\n      );\n      const allCredentials = [...(fullDefaultCredentials || []), ...newCredentials];\n      const vaultIds = allCredentials\n        .filter((credential) => credential.kind === 'vault' && credential.inputs.vault_id)\n        .map((vaultCred) => vaultCred.inputs.vault_id.toString());\n      const otherCredentialTypes = allCredentials\n        .filter((credential) => credential.kind !== 'vault')\n        .map((nonVaultCred) => nonVaultCred.summary_fields.credential_type.name);\n\n      const hasDuplicateVaultIds: boolean =\n        vaultIds.filter(\n          (vaultId, _index, array) => array.indexOf(vaultId) !== array.lastIndexOf(vaultId)\n        ).length > 0;\n      const duplicateCredentialTypes: string[] = [\n        ...new Set(\n          otherCredentialTypes.filter(\n            (cred, _index, array) => array.indexOf(cred) !== array.lastIndexOf(cred)\n          )\n        ),\n      ];\n\n      if (duplicateCredentialTypes.length > 0 && !allowDuplicateCredentialTypes) {\n        return t(\n          `Cannot assign multiple credentials of the same type. Duplicated credential types are: ${duplicateCredentialTypes.join(', ')}`\n        );\n      }\n      if (hasDuplicateVaultIds) {\n        return t(`Cannot assign multiple vault credentials of the same vault id.`);\n      }\n    },\n    [t, allowDuplicateCredentialTypes]\n  );\n}\n","import { useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { usePageNavigate, ITableColumn } from '../../../../../framework';\nimport {\n  useNameColumn,\n  useIdColumn,\n  useDescriptionColumn,\n  useOrganizationNameColumn,\n  useCreatedColumn,\n  useModifiedColumn,\n} from '../../../../common/columns';\nimport { ExecutionEnvironment } from '../../../interfaces/ExecutionEnvironment';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\nexport function useExecutionEnvironmentsColumns(options?: {\n  disableSort?: boolean;\n  disableLinks?: boolean;\n}) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const nameClick = useCallback(\n    (executionEnvironment: ExecutionEnvironment) =>\n      pageNavigate(AwxRoute.ExecutionEnvironmentDetails, {\n        params: { id: executionEnvironment.id },\n      }),\n    [pageNavigate]\n  );\n  const nameColumn = useNameColumn({\n    ...options,\n    onClick: nameClick,\n  });\n  const idColumn = useIdColumn<ExecutionEnvironment>();\n  const descriptionColumn = useDescriptionColumn();\n  const organizationColumn = useOrganizationNameColumn(\n    AwxRoute.OrganizationDetails,\n    options,\n    t('Globally available')\n  );\n  const createdColumn = useCreatedColumn(options);\n  const modifiedColumn = useModifiedColumn(options);\n  const tableColumns = useMemo<ITableColumn<ExecutionEnvironment>[]>(\n    () => [\n      idColumn,\n      nameColumn,\n      descriptionColumn,\n      {\n        header: t('Image'),\n        cell: (executionEnvironment) => executionEnvironment.image,\n        sort: 'image',\n      },\n      organizationColumn,\n      createdColumn,\n      modifiedColumn,\n    ],\n    [idColumn, nameColumn, descriptionColumn, t, organizationColumn, createdColumn, modifiedColumn]\n  );\n  return tableColumns;\n}\n","import { useDynamicToolbarFilters } from '../../../common/useDynamicFilters';\nimport {\n  useCreatedByToolbarFilter,\n  useModifiedByToolbarFilter,\n} from '../../../common/awx-toolbar-filters';\nimport { awxApiPath } from '../../../common/api/awx-utils';\n\nexport function useExecutionEnvironmentsFilters({\n  url,\n}: {\n  url?: string;\n} = {}) {\n  const urlPath = url ? url.replace(awxApiPath, '') : '';\n  const optionsPath = urlPath || 'execution_environments';\n  const createdByToolbarFilter = useCreatedByToolbarFilter();\n  const modifiedByToolbarFilter = useModifiedByToolbarFilter();\n  const toolbarFilters = useDynamicToolbarFilters({\n    optionsPath: optionsPath,\n    preSortedKeys: ['name', 'id', 'image', 'created-by', 'modified-by'],\n    preFilledValueKeys: {\n      id: {\n        apiPath: optionsPath,\n      },\n      name: {\n        apiPath: optionsPath,\n      },\n    },\n    additionalFilters: [createdByToolbarFilter, modifiedByToolbarFilter],\n  });\n  return toolbarFilters;\n}\n","import { ReactElement, ReactNode } from 'react';\nimport { FieldPath, FieldValues, useFormContext } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { PageFormTextInput } from '../../../../../framework/PageForm/Inputs/PageFormTextInput';\nimport { requestGet } from '../../../../common/crud/Data';\nimport { AwxItemsResponse } from '../../../common/AwxItemsResponse';\nimport { PageFormSingleSelectAwxResource } from '../../../common/PageFormSingleSelectAwxResource';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { ExecutionEnvironment } from '../../../interfaces/ExecutionEnvironment';\nimport { useExecutionEnvironmentsColumns } from '../hooks/useExecutionEnvironmentsColumns';\nimport { useExecutionEnvironmentsFilters } from '../hooks/useExecutionEnvironmentsFilters';\nimport { useSelectExecutionEnvironments } from '../hooks/useSelectExecutionEnvironments';\n\n/**\n * A form input for selecting an executionEnvironment.\n *\n * @example\n * ```tsx\n * <PageFormSelectExecutionEnvironment<ExecutionEnvironment> name=\"executionEnvironment\" />\n * ```\n */\nexport function PageFormSelectExecutionEnvironment<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  isRequired?: boolean;\n  isDisabled?: string;\n  helperText?: string;\n  organizationId?: number | null;\n  label?: string;\n  additionalControls?: ReactNode;\n}) {\n  const { t } = useTranslation();\n  const executionEnvironmentColumns = useExecutionEnvironmentsColumns({ disableLinks: true });\n  const executionEnvironmentFilters = useExecutionEnvironmentsFilters();\n  return (\n    <PageFormSingleSelectAwxResource<ExecutionEnvironment, TFieldValues, TFieldName>\n      name={props.name}\n      id=\"executionEnvironment\"\n      label={props.label ?? t('Execution environment')}\n      placeholder={t('Select execution environment')}\n      queryPlaceholder={t('Loading execution environments...')}\n      queryErrorText={t('Error loading execution environments')}\n      isRequired={props.isRequired}\n      isDisabled={props.isDisabled}\n      helperText={props.helperText}\n      url={awxAPI`/execution_environments/`}\n      queryParams={\n        props.organizationId\n          ? {\n              or__organization__id: props.organizationId.toString(),\n              or__organization__isnull: 'True',\n            }\n          : undefined\n      }\n      tableColumns={executionEnvironmentColumns}\n      toolbarFilters={executionEnvironmentFilters}\n      additionalControls={props.additionalControls}\n    />\n  );\n}\n\n/** @deprecated use PageFormSelectExecutionEnvironment instead */\nexport function PageFormExecutionEnvironmentSelect<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  executionEnvironmentPath?: string;\n  executionEnvironmentIdPath?: string;\n  organizationId?: string;\n  additionalControls?: ReactElement;\n  isRequired?: boolean;\n  label?: string;\n  placeholder?: string;\n  isDisabled?: boolean;\n  // tooltip?: string;\n}) {\n  const {\n    name,\n    organizationId,\n    executionEnvironmentIdPath,\n    executionEnvironmentPath,\n    placeholder,\n    ...rest\n  } = props;\n  const { t } = useTranslation();\n  const selectExecutionEnvironment = useSelectExecutionEnvironments(organizationId ?? undefined);\n  const { setValue } = useFormContext();\n  return (\n    // <Tooltip content={props.tooltip} trigger={props.tooltip ? undefined : 'manual'}>\n    <PageFormTextInput<TFieldValues, TFieldName, ExecutionEnvironment>\n      {...rest}\n      label={props.label ?? t('Execution environment')}\n      name={name}\n      id=\"execution-environment-select\"\n      placeholder={placeholder ?? t('Select execution environment')}\n      labelHelpTitle={t('Execution environment')}\n      labelHelp={t('The container image to be used for execution.')}\n      selectTitle={t('Select an execution environment')}\n      selectValue={(executionEnvironment: ExecutionEnvironment) => executionEnvironment.name}\n      selectOpen={selectExecutionEnvironment}\n      validate={async (executionEnvironmentName: string) => {\n        if (!executionEnvironmentName && !props.isRequired) {\n          return undefined;\n        }\n        try {\n          const itemsResponse = await requestGet<AwxItemsResponse<ExecutionEnvironment>>(\n            awxAPI`/execution_environments/?name=${executionEnvironmentName}`\n          );\n          if (itemsResponse.results.length === 0) return t('Execution environment not found.');\n          if (executionEnvironmentPath)\n            setValue(executionEnvironmentPath, itemsResponse.results[0]);\n          if (executionEnvironmentIdPath)\n            setValue(executionEnvironmentIdPath, itemsResponse.results[0].id);\n        } catch (err) {\n          if (err instanceof Error) return err.message;\n          else return 'Unknown error';\n        }\n        return undefined;\n      }}\n      isRequired={props.isRequired}\n    />\n    // </Tooltip>\n  );\n}\n","import { Progress } from '@patternfly/react-core';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ITableColumn, TextCell, useGetPageUrl } from '../../../../../framework';\nimport { useCreatedColumn, useModifiedColumn } from '../../../../common/columns';\nimport { InstanceGroup } from '../../../interfaces/InstanceGroup';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\nexport function useInstanceGroupsColumns(options?: {\n  disableSort?: boolean;\n  disableLinks?: boolean;\n}) {\n  const { t } = useTranslation();\n  const disableLinks = options && options.disableLinks;\n  const getPageUrl = useGetPageUrl();\n  const createdColumn = useCreatedColumn(options);\n  const modifiedColumn = useModifiedColumn(options);\n\n  const tableColumns = useMemo<ITableColumn<InstanceGroup>[]>(\n    () => [\n      {\n        header: t('Name'),\n        cell: (instanceGroup) => (\n          <TextCell\n            to={\n              disableLinks\n                ? undefined\n                : getPageUrl(AwxRoute.InstanceGroupDetails, {\n                    params: {\n                      id: instanceGroup.id,\n                    },\n                  })\n            }\n            text={instanceGroup.name}\n          />\n        ),\n        sort: 'name',\n        card: 'name',\n        list: 'name',\n      },\n      {\n        header: t('Type'),\n        cell: (instanceGroup) => (\n          <TextCell\n            text={instanceGroup.is_container_group ? t('Container group') : t('Instance group')}\n          />\n        ),\n        card: 'subtitle',\n        list: 'subtitle',\n      },\n      {\n        header: t('Running jobs'),\n        cell: (instanceGroup) => instanceGroup.jobs_running,\n      },\n      {\n        header: t('Total jobs'),\n        cell: (instanceGroup) => instanceGroup.jobs_total,\n      },\n      {\n        header: t('Instances'),\n        cell: (instanceGroup) => instanceGroup.instances,\n      },\n      {\n        header: t('Used capacity'),\n        cell: (instanceGroup) => {\n          if (!instanceGroup.is_container_group) {\n            if (instanceGroup.capacity) {\n              return (\n                <Progress value={Math.round(100 - instanceGroup.percent_capacity_remaining)} />\n              );\n            }\n            return <TextCell text={t('Unavailable')} color=\"red\" />;\n          }\n          // Capacity is not displayed for container groups\n          return null;\n        },\n        list: 'secondary',\n      },\n      createdColumn,\n      modifiedColumn,\n    ],\n\n    [t, createdColumn, modifiedColumn, disableLinks, getPageUrl]\n  );\n\n  return tableColumns;\n}\n","import { useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { compareStrings } from '../../../../../framework';\nimport { useNameColumn } from '../../../../common/columns';\nimport { getItemKey, requestDelete, requestGet } from '../../../../common/crud/Data';\nimport { AwxItemsResponse } from '../../../common/AwxItemsResponse';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { InstanceGroup } from '../../../interfaces/InstanceGroup';\nimport { Inventory } from '../../../interfaces/Inventory';\nimport { JobTemplate } from '../../../interfaces/JobTemplate';\nimport { Organization } from '../../../interfaces/Organization';\nimport { WorkflowJobTemplate } from '../../../interfaces/WorkflowJobTemplate';\nimport { useInstanceGroupsColumns } from './useInstanceGroupColumns';\n\nasync function checkIfInstanceGroupIsBeingUsed(instanceGroup: InstanceGroup) {\n  const relatedOrganizationsData = await requestGet<AwxItemsResponse<Organization>>(\n    awxAPI`/organizations/?instance_groups=${instanceGroup.id.toString()}`\n  );\n  const relatedInventoriesData = await requestGet<AwxItemsResponse<Inventory>>(\n    awxAPI`/inventories/?instance_groups=${instanceGroup.id.toString()}`\n  );\n  const relatedTemplatesData = await requestGet<\n    AwxItemsResponse<JobTemplate | WorkflowJobTemplate>\n  >(awxAPI`/unified_job_templates/?instance_groups=${instanceGroup.id.toString()}`);\n\n  return {\n    totalResourceCount:\n      relatedOrganizationsData?.count + relatedTemplatesData?.count + relatedInventoriesData?.count,\n    relatedOrganizationsCount: relatedOrganizationsData?.count ?? 0,\n    relatedInventoriesCount: relatedInventoriesData?.count ?? 0,\n    relatedTemplatesCount: relatedTemplatesData?.count ?? 0,\n  };\n}\n\nexport function useDeleteInstanceGroups(onComplete: (instanceGroups: InstanceGroup[]) => void) {\n  const { t } = useTranslation();\n  const confirmationColumns = useInstanceGroupsColumns({ disableLinks: true, disableSort: true });\n  const deleteActionNameColumn = useNameColumn({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo(() => [deleteActionNameColumn], [deleteActionNameColumn]);\n  const bulkAction = useAwxBulkConfirmation<InstanceGroup>();\n  const cannotDeleteInstanceGroup = (instanceGroup: InstanceGroup) => {\n    return instanceGroup?.summary_fields?.user_capabilities?.delete\n      ? undefined\n      : t('The instance group cannot be deleted due to insufficient permission.');\n  };\n  const buildAlertPrompts = useCallback(\n    async (instanceGroups: InstanceGroup[], undeletableInstanceGroups: InstanceGroup[]) => {\n      let alertPrompts: string[] = [];\n\n      /**\n       * If multiple instance groups are selected for deletion, display a general alert\n       * message that deleting instance groups could impact resources that rely on them\n       */\n      if (instanceGroups.length > 1) {\n        alertPrompts = [\n          t('Deleting instance groups could impact other resources that rely on them.', {\n            count: instanceGroups.length - undeletableInstanceGroups.length,\n          }),\n        ];\n      }\n      // Indicate alert message for instance groups that are undeletable due to insufficient permissions\n      if (undeletableInstanceGroups.length > 0) {\n        alertPrompts.push(\n          t(\n            '{{count}} of the selected instance groups cannot be deleted due to insufficient permission.',\n            {\n              count: undeletableInstanceGroups.length,\n            }\n          )\n        );\n      }\n      /**\n       * If the deletion is invoked on a single instance group, check if it has related\n       * resources and display the count of the related resources in the alert message\n       */\n      if (instanceGroups.length === 1 && !undeletableInstanceGroups.length) {\n        const isInstanceGroupBeingUsed = await checkIfInstanceGroupIsBeingUsed(instanceGroups[0]);\n        if (isInstanceGroupBeingUsed?.totalResourceCount > 0) {\n          let relatedResourceMessage = t(\n            'This instance group is currently being used by other resources: '\n          );\n          if (isInstanceGroupBeingUsed.relatedTemplatesCount > 0) {\n            if (\n              isInstanceGroupBeingUsed.totalResourceCount -\n                isInstanceGroupBeingUsed.relatedTemplatesCount >\n              0\n            ) {\n              relatedResourceMessage += t('{{count}} templates, ', {\n                count: isInstanceGroupBeingUsed.relatedTemplatesCount,\n              });\n            } else {\n              relatedResourceMessage += t('{{count}} templates', {\n                count: isInstanceGroupBeingUsed.relatedTemplatesCount,\n              });\n            }\n          }\n          if (isInstanceGroupBeingUsed.relatedOrganizationsCount > 0) {\n            if (isInstanceGroupBeingUsed.relatedInventoriesCount > 0) {\n              relatedResourceMessage += t('{{count}} organizations, ', {\n                count: isInstanceGroupBeingUsed.relatedOrganizationsCount,\n              });\n            } else {\n              relatedResourceMessage += t('{{count}} organizations', {\n                count: isInstanceGroupBeingUsed.relatedOrganizationsCount,\n              });\n            }\n          }\n          if (isInstanceGroupBeingUsed.relatedInventoriesCount > 0) {\n            relatedResourceMessage += t('{{count}} inventories', {\n              count: isInstanceGroupBeingUsed.relatedInventoriesCount,\n            });\n          }\n          alertPrompts = [relatedResourceMessage];\n        }\n      }\n\n      return alertPrompts;\n    },\n    [t]\n  );\n\n  const deleteInstanceGroups = async (instanceGroups: InstanceGroup[]) => {\n    const undeletableInstanceGroups = instanceGroups.filter(cannotDeleteInstanceGroup);\n    const alertPrompts = await buildAlertPrompts(instanceGroups, undeletableInstanceGroups);\n    const isOnlyContainerGroups = instanceGroups.every((ig) => ig.is_container_group);\n    bulkAction({\n      title: isOnlyContainerGroups\n        ? t('Permanently delete container groups', { count: instanceGroups.length })\n        : t('Permanently delete instance groups', { count: instanceGroups.length }),\n      confirmText: isOnlyContainerGroups\n        ? t('Yes, I confirm that I want to delete these {{count}} container groups.', {\n            count: instanceGroups.length - undeletableInstanceGroups.length,\n          })\n        : t('Yes, I confirm that I want to delete these {{count}} instance groups.', {\n            count: instanceGroups.length - undeletableInstanceGroups.length,\n          }),\n      actionButtonText: isOnlyContainerGroups\n        ? t('Delete container group')\n        : t('Delete instance group', {\n            count: instanceGroups.length - undeletableInstanceGroups.length,\n          }),\n      items: instanceGroups.sort((l, r) => compareStrings(l.name, r.name)),\n      keyFn: getItemKey,\n      isDanger: true,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: (instanceGroup: InstanceGroup, signal) =>\n        requestDelete(awxAPI`/instance_groups/${instanceGroup.id.toString()}/`, signal),\n      alertPrompts,\n      isItemNonActionable: cannotDeleteInstanceGroup,\n    });\n  };\n  return deleteInstanceGroups;\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport { PencilAltIcon, PlusCircleIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { InstanceGroup } from '../../../interfaces/InstanceGroup';\nimport { ActionsResponse, OptionsResponse } from '../../../interfaces/OptionsResponse';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useDeleteInstanceGroups } from './useDeleteInstanceGroups';\nimport { useParams } from 'react-router-dom';\n\nexport function useDisableCreateInstanceGroup() {\n  const { data } = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/instance_groups/`);\n  const { t } = useTranslation();\n  return useMemo(\n    () =>\n      data && data.actions && data.actions['POST']\n        ? undefined\n        : t(\n            'You do not have permission to create an instance group. Please contact your organization administrator if there is an issue with your access.'\n          ),\n    [data, t]\n  );\n}\n\nexport function useInstanceGroupToolbarActions(\n  onComplete: (instanceGroups: InstanceGroup[]) => void\n) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const deleteInstanceGroups = useDeleteInstanceGroups(onComplete);\n  const isCreateActionDisabled = useDisableCreateInstanceGroup();\n\n  return useMemo<IPageAction<InstanceGroup>[]>(\n    () => [\n      {\n        type: PageActionType.Dropdown,\n        icon: PlusCircleIcon,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        selection: PageActionSelection.None,\n        label: t('Create group'),\n        isDisabled: isCreateActionDisabled,\n        actions: [\n          {\n            type: PageActionType.Button,\n            selection: PageActionSelection.None,\n            label: t('Create container group'),\n            onClick: () => pageNavigate(AwxRoute.CreateContainerGroup),\n          },\n          {\n            type: PageActionType.Button,\n            selection: PageActionSelection.None,\n            label: t('Create instance group'),\n            onClick: () => pageNavigate(AwxRoute.CreateInstanceGroup),\n          },\n        ],\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: TrashIcon,\n        label: t('Delete instance groups'),\n        onClick: deleteInstanceGroups,\n        isDanger: true,\n      },\n    ],\n    [deleteInstanceGroups, isCreateActionDisabled, pageNavigate, t]\n  );\n}\n\nexport function useInstanceGroupRowActions(onComplete: (instanceGroups: InstanceGroup[]) => void) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const deleteInstanceGroups = useDeleteInstanceGroups(onComplete);\n  const params = useParams<{ id?: string }>();\n  return useMemo<IPageAction<InstanceGroup>[]>(\n    () => [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: PencilAltIcon,\n        isPinned: true,\n        variant: params.id ? ButtonVariant.primary : ButtonVariant.plain,\n        label: t('Edit instance group'),\n        isDisabled: (instanceGroup) =>\n          instanceGroup.summary_fields?.user_capabilities?.edit\n            ? undefined\n            : t(\n                'You do not have permission to edit this instance group. Please contact your organization administrator if there is an issue with your access.'\n              ),\n        isHidden: (instanceGroup) => instanceGroup.is_container_group,\n        onClick: (instanceGroup) =>\n          pageNavigate(AwxRoute.EditInstanceGroup, { params: { id: instanceGroup.id } }),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: PencilAltIcon,\n        variant: params.id ? ButtonVariant.primary : ButtonVariant.plain,\n        isPinned: true,\n        label: t('Edit container group'),\n        isDisabled: (instanceGroup) =>\n          instanceGroup.summary_fields?.user_capabilities?.edit\n            ? undefined\n            : t(\n                'You do not have permission to edit this container group. Please contact your organization administrator if there is an issue with your access.'\n              ),\n        isHidden: (instanceGroup) => !instanceGroup.is_container_group,\n        onClick: (instanceGroup) =>\n          pageNavigate(AwxRoute.EditContainerGroup, { params: { id: instanceGroup.id } }),\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: TrashIcon,\n        label: t('Delete instance group'),\n        isDisabled: (instanceGroup) =>\n          instanceGroup.summary_fields?.user_capabilities?.delete\n            ? undefined\n            : t(\n                'You do not have permission to delete this instance group. Please contact your organization administrator if there is an issue with your access.'\n              ),\n        isHidden: (instanceGroup) => instanceGroup.is_container_group,\n        onClick: (instanceGroup) => deleteInstanceGroups([instanceGroup]),\n        isDanger: true,\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: TrashIcon,\n        label: t('Delete container group'),\n        isDisabled: (instanceGroup) =>\n          instanceGroup.summary_fields?.user_capabilities?.delete\n            ? undefined\n            : t(\n                'You do not have permission to delete this container group. Please contact your organization administrator if there is an issue with your access.'\n              ),\n        isHidden: (instanceGroup) => !instanceGroup.is_container_group,\n        onClick: (instanceGroup) => deleteInstanceGroups([instanceGroup]),\n        isDanger: true,\n      },\n    ],\n    [deleteInstanceGroups, pageNavigate, t, params.id]\n  );\n}\n","import { CubesIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\nimport { PageHeader, PageLayout, PageTable } from '../../../../framework';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { useAwxView } from '../../common/useAwxView';\nimport { InstanceGroup } from '../../interfaces/InstanceGroup';\nimport {\n  useDisableCreateInstanceGroup,\n  useInstanceGroupRowActions,\n  useInstanceGroupToolbarActions,\n} from './hooks/useInstanceGroupActions';\nimport { useInstanceGroupsColumns } from './hooks/useInstanceGroupColumns';\nimport { ActivityStreamIcon } from '../../common/ActivityStreamIcon';\nimport { useDynamicToolbarFilters } from '../../common/useDynamicFilters';\n\nexport function InstanceGroups() {\n  const { t } = useTranslation();\n  const toolbarFilters = useInstanceGroupsFilters();\n  const tableColumns = useInstanceGroupsColumns();\n  const view = useAwxView({\n    url: awxAPI`/instance_groups/`,\n    toolbarFilters,\n    tableColumns,\n  });\n  const toolbarActions = useInstanceGroupToolbarActions(view.unselectItemsAndRefresh);\n  const rowActions = useInstanceGroupRowActions(view.unselectItemsAndRefresh);\n  const isCreateActionDisabled = useDisableCreateInstanceGroup();\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Instance Groups')}\n        titleHelpTitle={t('Instance Groups')}\n        titleHelp={t(\n          'An instance group provides the ability to group instances in a clustered environment. It defines grouped instances or grouped containers.'\n        )}\n        description={t(\n          'An instance group provides the ability to group instances in a clustered environment.'\n        )}\n        headerActions={<ActivityStreamIcon type={'instance_group'} />}\n      />\n      <PageTable<InstanceGroup>\n        id=\"awx-instance-groups-table\"\n        toolbarFilters={toolbarFilters}\n        toolbarActions={toolbarActions}\n        tableColumns={tableColumns}\n        rowActions={rowActions}\n        errorStateTitle={t('Error loading instance groups')}\n        emptyStateTitle={\n          isCreateActionDisabled\n            ? t('You do not have permission to create an instance group.')\n            : t('No instance groups yet')\n        }\n        emptyStateDescription={\n          isCreateActionDisabled\n            ? t(\n                'Please contact your organization administrator if there is an issue with your access.'\n              )\n            : t('Please create an instance group by using the button below.')\n        }\n        emptyStateIcon={isCreateActionDisabled ? CubesIcon : undefined}\n        emptyStateActions={isCreateActionDisabled ? undefined : toolbarActions.slice(0, 1)}\n        {...view}\n        defaultSubtitle={t('Instance Group')}\n      />\n    </PageLayout>\n  );\n}\n\nexport function useInstanceGroupsFilters() {\n  const toolbarFilters = useDynamicToolbarFilters({\n    optionsPath: 'instance_groups',\n    preSortedKeys: ['name', 'id'],\n    preFilledValueKeys: {\n      name: { apiPath: 'instance_groups' },\n      id: { apiPath: 'instance_groups' },\n    },\n  });\n  return toolbarFilters;\n}\n","import { ReactNode } from 'react';\nimport { FieldPath, FieldValues } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { InstanceGroup } from '../../../interfaces/InstanceGroup';\nimport { PageFormMultiSelectAwxResource } from '../../../common/PageFormMultiSelectAwxResource';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useInstanceGroupsColumns } from '../hooks/useInstanceGroupColumns';\nimport { useInstanceGroupsFilters } from '../InstanceGroups';\n\nexport function PageFormInstanceGroupSelect<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  labelHelp: string;\n  additionalControls?: ReactNode;\n  isRequired?: boolean;\n}) {\n  const { t } = useTranslation();\n  const tableColumns = useInstanceGroupsColumns();\n  const filters = useInstanceGroupsFilters();\n  return (\n    <PageFormMultiSelectAwxResource<InstanceGroup>\n      {...props}\n      name={props.name}\n      tableColumns={tableColumns}\n      toolbarFilters={filters}\n      queryPlaceholder={t('Loading instance groups...')}\n      queryErrorText={t('Error loading instance groups')}\n      url={awxAPI`/instance_groups/`}\n      id=\"instance-group-select\"\n      placeholder={t('Select instance groups')}\n      labelHelp={props.labelHelp}\n      label={t('Instance groups')}\n      isRequired={props.isRequired}\n      compareOptionValues={(originalIG: InstanceGroup, selectedIG: InstanceGroup) =>\n        originalIG.id === selectedIG.id\n      }\n    />\n  );\n}\n","import { ReactElement } from 'react';\nimport { FieldPath, FieldValues } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { PageFormCreatableSelect } from '../../../framework/PageForm/Inputs/PageFormCreatableSelect';\nimport { Label } from '../interfaces/Label';\nimport { awxAPI } from './api/awx-utils';\nimport { useAwxGetAllPages } from './useAwxGetAllPages';\n\n/**\n * Component to select and/or create labels in a form\n */\nexport function PageFormLabelSelect<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  labelHelpTitle: string;\n  labelHelp: string;\n  name: TFieldName;\n  placeholderText?: string;\n  additionalControls?: ReactElement;\n}) {\n  const { labelHelpTitle, labelHelp, name, placeholderText, additionalControls } = props;\n  const { t } = useTranslation();\n\n  const { results, isLoading } = useAwxGetAllPages<Label>(awxAPI`/labels/`, { order_by: 'name' });\n  const options = isLoading ? [{ name: '' }] : results;\n  return (\n    <PageFormCreatableSelect<TFieldValues, TFieldName>\n      labelHelpTitle={labelHelpTitle}\n      labelHelp={labelHelp}\n      name={name}\n      placeholderText={placeholderText ?? t('Select or create labels')}\n      label={t('Labels')}\n      additionalControls={additionalControls ?? undefined}\n      options={\n        options?.map((label) => ({ value: label, label: label.name })) ?? [{ label: '', value: '' }]\n      }\n    />\n  );\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Button, InputGroup, InputGroupItem, Spinner } from '@patternfly/react-core';\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n} from '@patternfly/react-core/deprecated';\nimport { SearchIcon, SyncAltIcon } from '@patternfly/react-icons';\nimport { ReactElement, ReactNode, useCallback, useEffect, useMemo, useState } from 'react';\nimport { Controller, FieldPath, FieldValues, PathValue, useFormContext } from 'react-hook-form';\nimport { getID, useID } from '../../hooks/useID';\nimport { useFrameworkTranslations } from '../../useFrameworkTranslations';\nimport { PageFormGroup } from './PageFormGroup';\nimport { useRequiredValidationRule } from './validation-hooks';\n\nexport interface PageFormAsyncSelectProps<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n  SelectionType = unknown,\n> {\n  id?: string;\n  name: TFieldName;\n  variant?: 'single' | 'typeahead' | 'typeaheadMulti';\n  label: string;\n  labelHelpTitle?: string;\n  labelHelp?: string | string[] | ReactNode;\n  placeholder: string;\n  loadingPlaceholder: string;\n  loadingErrorText: string;\n  additionalControls?: ReactElement;\n  query: (page: number) => Promise<{ total: number; values: SelectionType[] }>;\n  valueToString: (value: SelectionType | undefined) => string;\n  valueToDescription?: (value: SelectionType | undefined) => ReactNode;\n  isRequired?: boolean;\n  isReadOnly?: boolean;\n  openSelectDialog?: (\n    onSelect: (value: SelectionType | null) => void,\n    defaultSelection?: SelectionType\n  ) => void;\n  limit: number;\n}\n\n/** @deprecated Use PageFormAsyncSingleSelect or PageFormAsyncMultiSelect instead. */\nexport function PageFormAsyncSelect<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n  SelectionType = any,\n>(props: PageFormAsyncSelectProps<TFieldValues, TFieldName, SelectionType>) {\n  const {\n    isRequired,\n    label,\n    loadingErrorText,\n    loadingPlaceholder,\n    name,\n    openSelectDialog,\n    placeholder,\n    query,\n    valueToString,\n    valueToDescription,\n    labelHelp,\n    labelHelpTitle,\n    additionalControls,\n  } = props;\n  const id = useID(props);\n\n  const {\n    control,\n    setValue,\n    formState: { isSubmitting },\n  } = useFormContext<TFieldValues>();\n\n  const [loadingError, setLoadingError] = useState<Error>();\n\n  const [frameworkTranslations] = useFrameworkTranslations();\n\n  const queryHandler = useCallback(\n    (page: number) => {\n      setValue(name, undefined as PathValue<TFieldValues, TFieldName>);\n      setLoadingError(undefined);\n      return query(page)\n        .then((result) => {\n          if (result.total === 1 && result.values.length === 1) {\n            setValue(name, result.values[0] as PathValue<TFieldValues, TFieldName>);\n          }\n          return result;\n        })\n        .catch((err) => {\n          err instanceof Error\n            ? setLoadingError(err)\n            : setLoadingError(new Error(frameworkTranslations.unknownError));\n          return { total: 0, values: [] };\n        });\n    },\n    [frameworkTranslations.unknownError, name, query, setValue]\n  );\n  const required = useRequiredValidationRule(props.label, props.isRequired);\n\n  return (\n    <Controller<TFieldValues, TFieldName>\n      name={name}\n      control={control}\n      shouldUnregister\n      render={({ field: { onChange, value }, fieldState: { error } }) => {\n        return (\n          <PageFormGroup\n            fieldId={id}\n            label={label}\n            labelHelp={labelHelp}\n            labelHelpTitle={labelHelpTitle ?? label}\n            helperTextInvalid={loadingError ? loadingErrorText : error?.message}\n            isRequired={isRequired}\n            additionalControls={additionalControls}\n          >\n            <AsyncSelect<SelectionType>\n              id={id}\n              variant={props.variant}\n              query={queryHandler}\n              valueToString={valueToString}\n              valueToDescription={valueToDescription}\n              placeholder={placeholder}\n              loadingPlaceholder={loadingPlaceholder}\n              value={value}\n              onSelect={onChange}\n              isReadOnly={props.isReadOnly || isSubmitting}\n              validated={loadingError?.message || error?.message ? 'error' : undefined}\n              isRequired={isRequired}\n              limit={props.limit}\n              openSelectDialog={openSelectDialog}\n              loadingError={!!loadingError}\n              labeledBy={`${name}-form-group`}\n            />\n          </PageFormGroup>\n        );\n      }}\n      rules={{ required }}\n    />\n  );\n}\n\nexport interface AsyncSelectProps<SelectionType> {\n  id?: string;\n  value: SelectionType | undefined;\n  valueToString: (value: SelectionType | undefined) => string;\n  valueToDescription?: (value: SelectionType | undefined) => ReactNode;\n  onSelect: (value: SelectionType | null) => void;\n  query: (pageSize: number) => Promise<{ total: number; values: SelectionType[] }>;\n  placeholder: string;\n  variant?: 'single' | 'typeahead' | 'typeaheadMulti';\n  loadingPlaceholder: string;\n  labeledBy?: string;\n  isReadOnly?: boolean;\n  helperTextInvalid?: string;\n  validated?: 'success' | 'warning' | 'error' | 'default';\n  showRefreshButton?: boolean;\n  isRequired?: boolean;\n  limit: number;\n  loadingError?: boolean;\n  openSelectDialog?: (\n    onSelect: (value: SelectionType | null) => void,\n    defaultSelection?: SelectionType\n  ) => void;\n}\n\nexport function AsyncSelect<SelectionType>(props: AsyncSelectProps<SelectionType>) {\n  const {\n    id,\n    isReadOnly,\n    labeledBy,\n    loadingError,\n    loadingPlaceholder,\n    onSelect,\n    placeholder,\n    query,\n    validated,\n    variant,\n  } = props;\n\n  const [open, setOpen] = useState(false);\n\n  const [valueToString] = useState(() => props.valueToString);\n  const [valueToDescription] = useState(() => props.valueToDescription);\n\n  const value = useMemo(() => {\n    if (!props.value) return undefined;\n    return new AsyncSelectSelectOptionObject(props.value, valueToString);\n  }, [props.value, valueToString]);\n\n  const [options, setOptions] = useState<SelectOptionObject[] | null>(null);\n  const [useSelectDialog, setUseSelectDialog] = useState(false);\n\n  const [frameworkTranslations] = useFrameworkTranslations();\n\n  const [loading, setLoading] = useState(false);\n  const reload = useCallback(() => {\n    setLoading((loading) => {\n      if (loading) return loading;\n      setOptions([]);\n      query(props.limit)\n        .then((result) => {\n          if (result.total === 1 && result.values.length === 1) {\n            onSelect(result.values[0]);\n          }\n          if (result.total > props.limit) {\n            setUseSelectDialog(true);\n            setOptions([]);\n          } else {\n            setUseSelectDialog(false);\n            setOptions(\n              result.values.map((value) => new AsyncSelectSelectOptionObject(value, valueToString))\n            );\n          }\n        })\n        .catch(() => null)\n        .finally(() => setLoading(false));\n      return true;\n    });\n  }, [onSelect, props.limit, query, valueToString]);\n\n  useEffect(reload, [reload]);\n\n  const onFilter = useCallback(\n    (_: unknown, filterValue: string) =>\n      (options ?? [])\n        .filter((option) => {\n          if (!filterValue) return true;\n          if (option) {\n            return option.toString().toLowerCase().indexOf(filterValue.toLowerCase()) !== -1;\n          }\n          return false;\n        })\n        .map((option) => {\n          const optionId = getID(option.toString());\n          return (\n            <SelectOption\n              key={option.toString()}\n              value={option}\n              description={\n                'option' in option && option.option\n                  ? valueToDescription?.(option.option as SelectionType)\n                  : undefined\n              }\n              data-cy={optionId}\n            >\n              {option.toString()}\n            </SelectOption>\n          );\n        }),\n    [options, valueToDescription]\n  );\n  return (\n    <InputGroup>\n      <InputGroupItem isFill>\n        <Select\n          toggleId={id}\n          ouiaId=\"menu-select\"\n          aria-labelledby={labeledBy}\n          variant={variant ? SelectVariant[`${variant}`] : SelectVariant.single}\n          hasPlaceholderStyle\n          placeholderText={\n            loadingError\n              ? frameworkTranslations.clickToRefresh\n              : loadingPlaceholder\n                ? loading\n                  ? loadingPlaceholder\n                  : placeholder\n                : placeholder\n          }\n          typeAheadAriaLabel={placeholder}\n          data-cy=\"dropdown-menu\"\n          selections={value}\n          onSelect={(_, value) => {\n            if (typeof value === 'object' && 'option' in value && value.option) {\n              onSelect(value.option as SelectionType);\n              setOpen(false);\n            }\n          }}\n          onClear={value && !props.isRequired ? () => onSelect(null) : undefined}\n          isOpen={open}\n          onToggle={(_event, open) => {\n            if (loadingError) {\n              reload();\n              return;\n            }\n            if (open) {\n              if (useSelectDialog && props.openSelectDialog) {\n                props.openSelectDialog(onSelect, props.value);\n              } else {\n                setOpen(true);\n              }\n            } else {\n              setOpen(false);\n            }\n          }}\n          toggleIndicator={\n            loading ? (\n              <Spinner\n                size=\"md\"\n                style={{ margin: -1, marginBottom: -3 }}\n                data-cy=\"loading-spinner\"\n              />\n            ) : loadingError ? (\n              <SyncAltIcon />\n            ) : useSelectDialog ? (\n              <SearchIcon data-cy=\"lookup-button\" />\n            ) : undefined\n          }\n          validated={validated}\n          isDisabled={options === null || loading || isReadOnly}\n          onFilter={onFilter}\n          hasInlineFilter={options !== null && options.length > 10}\n          menuAppendTo=\"parent\"\n          maxHeight={'45vh'}\n          footer={\n            props.openSelectDialog ? (\n              <Button\n                data-cy=\"browse-button\"\n                variant=\"link\"\n                onClick={() => {\n                  setOpen(false);\n                  props.openSelectDialog?.(onSelect, props.value);\n                }}\n              >\n                Browse\n              </Button>\n            ) : undefined\n          }\n        >\n          {(options ?? []).map((option) => (\n            <SelectOption\n              key={option.toString()}\n              value={option}\n              description={\n                'option' in option && option.option\n                  ? valueToDescription?.(option.option as SelectionType)\n                  : undefined\n              }\n            >\n              {option.toString()}\n            </SelectOption>\n          ))}\n        </Select>\n      </InputGroupItem>\n\n      {props.showRefreshButton && loading === false ? (\n        <Button variant=\"control\" onClick={reload}>\n          <SyncAltIcon />\n        </Button>\n      ) : (\n        <></>\n      )}\n      {props.showRefreshButton && loading === true ? (\n        <Button variant=\"control\" isDisabled>\n          <Spinner size=\"md\" style={{ margin: -1, marginBottom: -3 }} />\n        </Button>\n      ) : (\n        <></>\n      )}\n    </InputGroup>\n  );\n}\n\nclass AsyncSelectSelectOptionObject<SelectionType> implements SelectOptionObject {\n  constructor(\n    public option: SelectionType,\n    private asString: (option: SelectionType) => string\n  ) {}\n\n  toString() {\n    return this.asString(this.option);\n  }\n\n  compareTo(selectOption: AsyncSelectSelectOptionObject<SelectionType>) {\n    return this.toString() === selectOption.toString();\n  }\n}\n","import { useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ITableColumn, usePageNavigate } from '../../../../../framework';\nimport { StatusCell } from '../../../../common/Status';\nimport {\n  useCreatedColumn,\n  useDescriptionColumn,\n  useModifiedColumn,\n  useNameColumn,\n  useOrganizationNameColumn,\n} from '../../../../common/columns';\nimport { Inventory } from '../../../interfaces/Inventory';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { type WebSocketInventory } from '../Inventories';\nimport { Tooltip } from '@patternfly/react-core';\n\nexport function useInventoriesColumns(options?: { disableSort?: boolean; disableLinks?: boolean }) {\n  const pageNavigate = usePageNavigate();\n  const { t } = useTranslation();\n\n  const nameClick = useCallback(\n    (inventory: Inventory) => {\n      const kinds: { [key: string]: string } = {\n        '': 'inventory',\n        smart: 'smart_inventory',\n        constructed: 'constructed_inventory',\n      };\n      return pageNavigate(AwxRoute.InventoryDetails, {\n        params: { inventory_type: kinds[inventory.kind], id: inventory.id },\n      });\n    },\n    [pageNavigate]\n  );\n  const nameColumn = useNameColumn({ ...options, onClick: nameClick });\n  const createdColumn = useCreatedColumn(options);\n  const descriptionColumn = useDescriptionColumn();\n  const modifiedColumn = useModifiedColumn(options);\n  const organizationColumn = useOrganizationNameColumn(AwxRoute.OrganizationDetails, options);\n  const typeColumn = useMemo<ITableColumn<Inventory>>(\n    () => ({\n      header: t('Type'),\n      type: 'text',\n      value: (inventory: Inventory) => {\n        switch (inventory.kind) {\n          case 'smart':\n            return t('Smart inventory');\n          case 'constructed':\n            return t('Constructed inventory');\n          default:\n            return t('Inventory');\n        }\n      },\n      card: 'subtitle',\n      list: 'subtitle',\n      dashboard: 'hidden',\n    }),\n    [t]\n  );\n  const statusColumn = useMemo<ITableColumn<Inventory>>(\n    () => ({\n      header: t('Status'),\n      cell: (inventory: Inventory) => {\n        if (inventory.kind !== '') {\n          return null;\n        }\n        let syncStatus = 'disabled';\n        if (inventory.has_inventory_sources) {\n          if (inventory.inventory_sources_with_failures) {\n            syncStatus = 'error';\n          } else {\n            syncStatus = 'successful';\n          }\n          if ('status' in inventory) {\n            syncStatus = (inventory as WebSocketInventory).status;\n          }\n        }\n\n        let tooltip = '';\n        if (inventory.has_inventory_sources) {\n          tooltip = t`No inventory sync failures`;\n        } else {\n          tooltip = t`Not configured for inventory sync.`;\n        }\n\n        if (!tooltip) {\n          return <StatusCell status={syncStatus} />;\n        }\n\n        return (\n          <Tooltip content={tooltip} position=\"top\">\n            <StatusCell status={syncStatus} />\n          </Tooltip>\n        );\n      },\n    }),\n    [t]\n  );\n  const tableColumns = useMemo<ITableColumn<Inventory>[]>(\n    () => [\n      nameColumn,\n      descriptionColumn,\n      statusColumn,\n      typeColumn,\n      organizationColumn,\n      createdColumn,\n      modifiedColumn,\n    ],\n    [\n      nameColumn,\n      descriptionColumn,\n      statusColumn,\n      typeColumn,\n      organizationColumn,\n      createdColumn,\n      modifiedColumn,\n    ]\n  );\n  return tableColumns;\n}\n","import {\n  useCreatedByToolbarFilter,\n  useInventoryTypeToolbarFilter,\n  useModifiedByToolbarFilter,\n} from '../../../common/awx-toolbar-filters';\nimport { useDynamicToolbarFilters } from '../../../common/useDynamicFilters';\n\nexport function useInventoriesFilters() {\n  const inventoryTypeToolbarFilter = useInventoryTypeToolbarFilter();\n  const createdByToolbarFilter = useCreatedByToolbarFilter();\n  const modifiedByToolbarFilter = useModifiedByToolbarFilter();\n\n  const toolbarFilters = useDynamicToolbarFilters({\n    optionsPath: 'inventories',\n    preSortedKeys: ['name', 'id', 'created-by', 'modified-by', 'inventory-type'],\n    preFilledValueKeys: { name: { apiPath: 'inventories' }, id: { apiPath: 'inventories' } },\n    additionalFilters: [\n      createdByToolbarFilter,\n      modifiedByToolbarFilter,\n      inventoryTypeToolbarFilter,\n    ],\n    removeFilters: ['kind'],\n  });\n  return toolbarFilters;\n}\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { usePageDialog } from '../../../../../framework';\nimport { SingleSelectDialog } from '../../../../../framework/PageDialogs/SingleSelectDialog';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxView } from '../../../common/useAwxView';\nimport { Inventory } from '../../../interfaces/Inventory';\nimport { useInventoriesColumns } from './useInventoriesColumns';\nimport { useInventoriesFilters } from './useInventoriesFilters';\n\nfunction SelectInventory(props: { title: string; onSelect: (inventory: Inventory) => void }) {\n  const toolbarFilters = useInventoriesFilters();\n  const tableColumns = useInventoriesColumns({ disableLinks: true });\n  const view = useAwxView<Inventory>({\n    url: awxAPI`/inventories/`,\n    toolbarFilters,\n    tableColumns,\n    disableQueryString: true,\n  });\n  return (\n    <SingleSelectDialog<Inventory>\n      {...props}\n      toolbarFilters={toolbarFilters}\n      tableColumns={tableColumns}\n      view={view}\n    />\n  );\n}\n\nexport function useSelectInventory() {\n  const [_, setDialog] = usePageDialog();\n  const { t } = useTranslation();\n  const openSelectInventory = useCallback(\n    (onSelect: (inventory: Inventory) => void) => {\n      setDialog(<SelectInventory title={t('Select inventory')} onSelect={onSelect} />);\n    },\n    [setDialog, t]\n  );\n  return openSelectInventory;\n}\n","import { ReactElement, ReactNode, useCallback } from 'react';\nimport { FieldPath, FieldValues } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { PageFormAsyncSelect } from '../../../../../framework/PageForm/Inputs/PageFormAsyncSelect';\nimport { requestGet } from '../../../../common/crud/Data';\nimport { AwxItemsResponse } from '../../../common/AwxItemsResponse';\nimport { PageFormSingleSelectAwxResource } from '../../../common/PageFormSingleSelectAwxResource';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { Inventory } from '../../../interfaces/Inventory';\nimport { useInventoriesColumns } from '../hooks/useInventoriesColumns';\nimport { useInventoriesFilters } from '../hooks/useInventoriesFilters';\nimport { useSelectInventory } from '../hooks/useSelectInventory';\n\nexport function PageFormInventorySelect<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  isRequired?: boolean;\n  additionalControls?: ReactElement;\n  labelHelp?: string | string[] | ReactNode;\n}) {\n  const { t } = useTranslation();\n  const openSelectDialog = useSelectInventory();\n  const query = useCallback(async () => {\n    const response = await requestGet<AwxItemsResponse<Inventory>>(\n      awxAPI`/inventories/`.concat(`?page_size=200`)\n    );\n    return Promise.resolve({\n      total: response.count,\n      values: response.results,\n    });\n  }, []);\n  return (\n    <PageFormAsyncSelect<TFieldValues>\n      name={props.name}\n      id=\"inventory\"\n      variant=\"typeahead\"\n      additionalControls={props.additionalControls}\n      label={t('Inventory')}\n      query={query}\n      valueToString={(value) => (value as Inventory)?.name ?? ''}\n      placeholder={t('Select inventory')}\n      labelHelpTitle={t('Inventory')}\n      labelHelp={\n        props.labelHelp ??\n        t('Select the inventory containing the playbook you want this job to execute.')\n      }\n      loadingPlaceholder={t('Loading inventories...')}\n      loadingErrorText={t('Error loading inventories')}\n      isRequired={props.isRequired}\n      limit={200}\n      openSelectDialog={openSelectDialog}\n    />\n  );\n}\n\nexport function PageFormSelectInventory<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  isRequired?: boolean;\n  isDisabled?: string;\n  helperText?: string;\n  labelHelp?: string;\n}) {\n  const { t } = useTranslation();\n  const columns = useInventoriesColumns({ disableLinks: true });\n  const filters = useInventoriesFilters();\n  return (\n    <PageFormSingleSelectAwxResource<Inventory, TFieldValues, TFieldName>\n      name={props.name}\n      id=\"inventory\"\n      label={t('Inventory')}\n      placeholder={t('Select inventory')}\n      queryPlaceholder={t('Loading inventories...')}\n      queryErrorText={t('Error loading inventories')}\n      isRequired={props.isRequired}\n      isDisabled={props.isDisabled}\n      helperText={props.helperText}\n      labelHelp={props.labelHelp}\n      url={awxAPI`/inventories/`}\n      tableColumns={columns}\n      toolbarFilters={filters}\n    />\n  );\n}\n","export function ConditionalField({\n  isHidden = false,\n  children,\n}: {\n  isHidden: boolean;\n  children: React.ReactNode;\n}) {\n  return isHidden ? null : <>{children}</>;\n}\n","import { SetStateAction, useEffect } from 'react';\nimport { useFormContext, useWatch } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport {\n  PageFormDataEditor,\n  PageFormGrid,\n  PageFormSelect,\n  PageFormSwitch,\n  PageFormTextInput,\n} from '../../../../../../framework';\nimport { PageFormCreatableSelect } from '../../../../../../framework/PageForm/Inputs/PageFormCreatableSelect';\nimport { usePageWizard } from '../../../../../../framework/PageWizard/PageWizardProvider';\nimport { PageFormCredentialSelect } from '../../../../access/credentials/components/PageFormCredentialSelect';\nimport { PageFormSelectExecutionEnvironment } from '../../../../administration/execution-environments/components/PageFormSelectExecutionEnvironment';\nimport { PageFormInstanceGroupSelect } from '../../../../administration/instance-groups/components/PageFormInstanceGroupSelect';\nimport { PageFormLabelSelect } from '../../../../common/PageFormLabelSelect';\nimport type { JobTemplate } from '../../../../interfaces/JobTemplate';\nimport type { WorkflowJobTemplate } from '../../../../interfaces/WorkflowJobTemplate';\nimport { PageFormInventorySelect } from '../../../inventories/components/PageFormInventorySelect';\nimport { parseStringToTagArray } from '../../JobTemplateFormHelpers';\nimport { ConditionalField } from '../../TemplatePage/steps/ConditionalField';\nimport { PromptFormValues, WizardFormValues } from '../types';\n\nexport function NodePromptsStep() {\n  const { t } = useTranslation();\n  const { wizardData, setStepData } = usePageWizard() as {\n    wizardData: WizardFormValues;\n    setStepData: React.Dispatch<SetStateAction<Record<string, object>>>;\n  };\n  const { reset } = useFormContext<WizardFormValues>();\n  const promptForm = useWatch<{ prompt: PromptFormValues }>({ name: 'prompt' });\n\n  const { launch_config: config, resource, prompt } = wizardData;\n  const template = resource as JobTemplate | WorkflowJobTemplate;\n  const organizationId = template?.organization ?? null;\n\n  useEffect(() => {\n    setStepData((prev) => ({\n      ...prev,\n      nodePromptsStep: {\n        prompt: promptForm,\n      },\n    }));\n  }, [promptForm, setStepData]);\n\n  useEffect(() => {\n    if (!config || !config?.defaults) return;\n    const { defaults } = config;\n\n    const readOnlyLabels = defaults?.labels?.map((label) => ({\n      ...label,\n      isReadOnly: true,\n    }));\n    const defaultPromptValues = {\n      credentials: prompt?.credentials ?? defaults.credentials,\n      diff_mode: prompt?.diff_mode ?? defaults.diff_mode,\n      execution_environment: prompt?.execution_environment ?? defaults.execution_environment?.id,\n      extra_vars: prompt?.extra_vars ?? defaults.extra_vars,\n      forks: prompt?.forks ?? defaults.forks,\n      instance_groups: prompt?.instance_groups ?? defaults.instance_groups,\n      inventory: prompt?.inventory ?? (defaults.inventory.id ? defaults.inventory : null),\n      job_slice_count: prompt?.job_slice_count ?? defaults.job_slice_count,\n      job_tags: prompt?.job_tags ?? parseStringToTagArray(defaults.job_tags),\n      job_type: prompt?.job_type ?? defaults.job_type,\n      labels: prompt?.labels ?? readOnlyLabels,\n      limit: prompt?.limit ?? defaults.limit,\n      organization: prompt?.organization ?? organizationId,\n      scm_branch: prompt?.scm_branch ?? defaults.scm_branch,\n      skip_tags: prompt?.skip_tags ?? parseStringToTagArray(defaults.skip_tags),\n      timeout: prompt?.timeout ?? defaults.timeout,\n      verbosity: prompt?.verbosity ?? defaults.verbosity,\n      defaults,\n    };\n\n    setStepData((prev) => ({\n      ...prev,\n      nodePromptsStep: {\n        prompt: defaultPromptValues,\n      },\n    }));\n    reset({ prompt: defaultPromptValues });\n  }, [reset, organizationId, setStepData, config, prompt]);\n\n  if (!config || !template) {\n    return null;\n  }\n\n  return (\n    <PageFormGrid isVertical singleColumn>\n      <ConditionalField isHidden={!config.ask_inventory_on_launch}>\n        <PageFormInventorySelect<WizardFormValues> name=\"prompt.inventory\" isRequired />\n      </ConditionalField>\n      <ConditionalField isHidden={!config.ask_credential_on_launch}>\n        <PageFormCredentialSelect<WizardFormValues>\n          name=\"prompt.credentials\"\n          label={t('Credentials')}\n          placeholder={t('Select credentials')}\n          labelHelp={t(\n            'Select credentials for accessing the nodes this job will be ran against. You can only select one credential of each type. For machine credentials (SSH), checking \"Prompt on launch\" without selecting credentials will require you to select a machine credential at run time. If you select credentials and check \"Prompt on launch\", the selected credential(s) become the defaults that can be updated at run time.'\n          )}\n          isMultiple\n        />\n      </ConditionalField>\n      <ConditionalField isHidden={!config.ask_execution_environment_on_launch}>\n        <PageFormSelectExecutionEnvironment<WizardFormValues>\n          name=\"prompt.execution_environment\"\n          organizationId={organizationId}\n        />\n      </ConditionalField>\n      <ConditionalField isHidden={!config.ask_instance_groups_on_launch}>\n        <PageFormInstanceGroupSelect<WizardFormValues>\n          name=\"prompt.instance_groups\"\n          labelHelp={t(`Select the instance groups for this template to run on.`)}\n        />\n      </ConditionalField>\n      <ConditionalField isHidden={!config.ask_job_type_on_launch}>\n        <PageFormSelect<WizardFormValues>\n          isRequired\n          id=\"job_type\"\n          label={t('Job type')}\n          labelHelpTitle={t('Job type')}\n          labelHelp={t('Select a job type for this job template.')}\n          name=\"prompt.job_type\"\n          options={[\n            { label: t('Check'), value: 'check' },\n            { label: t('Run'), value: 'run' },\n          ]}\n          placeholderText={t('Select job type')}\n        />\n      </ConditionalField>\n      <ConditionalField isHidden={!config.ask_scm_branch_on_launch}>\n        <PageFormTextInput<WizardFormValues>\n          name=\"prompt.scm_branch\"\n          placeholder={t('Add a source control branch')}\n          labelHelpTitle={t('Source control branch')}\n          labelHelp={t(\n            'Branch to use in job run. Project default used if blank. Only allowed if project allow_override field is set to true.'\n          )}\n          label={t('Source control branch')}\n        />\n      </ConditionalField>\n      <ConditionalField isHidden={!config.ask_labels_on_launch}>\n        <PageFormLabelSelect<WizardFormValues>\n          labelHelpTitle={t('Labels')}\n          labelHelp={t(\n            `Optional labels that describe this job template, such as 'dev' or 'test'. Labels can be used to group and filter job templates and completed jobs.`\n          )}\n          name=\"prompt.labels\"\n        />\n      </ConditionalField>\n      <ConditionalField isHidden={!config.ask_forks_on_launch}>\n        <PageFormTextInput<WizardFormValues>\n          id=\"forks\"\n          label={t('Forks')}\n          labelHelpTitle={t('Forks')}\n          labelHelp={t(\n            'The number of parallel or simultaneous processes to use while executing the playbook. An empty value, or a value less than 1 will use the Ansible default which is usually 5. The default number of forks can be overwritten with a change to ansible.cfg. Refer to the Ansible documentation for details about the configuration file.'\n          )}\n          name=\"prompt.forks\"\n          type=\"number\"\n          placeholder={t('Add number of forks')}\n          min={0}\n        />\n      </ConditionalField>\n      <ConditionalField isHidden={!config.ask_limit_on_launch}>\n        <PageFormTextInput<WizardFormValues>\n          id=\"limit\"\n          label={t('Limit')}\n          labelHelpTitle={t('Limit')}\n          labelHelp={t(\n            'Provide a host pattern to further constrain the list of hosts that will be managed or affected by the playbook. Multiple patterns are allowed. Refer to Ansible documentation for more information and examples on patterns.'\n          )}\n          name=\"prompt.limit\"\n          placeholder={t('Add a limit to reduce number of hosts.')}\n        />\n      </ConditionalField>\n      <ConditionalField isHidden={!config.ask_verbosity_on_launch}>\n        <PageFormSelect<WizardFormValues>\n          name=\"prompt.verbosity\"\n          label={t('Verbosity')}\n          labelHelpTitle={t('Verbosity')}\n          labelHelp={t(\n            'Control the level of output Ansible will produce as the playbook executes.'\n          )}\n          options={[\n            { label: t`0 (Normal)`, value: 0 },\n            { label: t`1 (Verbose)`, value: 1 },\n            { label: t`2 (More Verbose)`, value: 2 },\n            { label: t`3 (Debug)`, value: 3 },\n            { label: t`4 (Connection Debug)`, value: 4 },\n            { label: t`5 (WinRM Debug)`, value: 5 },\n          ]}\n          placeholderText={t('Select a verbosity value')}\n        />\n      </ConditionalField>\n      <ConditionalField isHidden={!config.ask_job_slice_count_on_launch}>\n        <PageFormTextInput<WizardFormValues>\n          id=\"job_slice_count\"\n          label={t('Job slicing')}\n          labelHelpTitle={t('Job slicing')}\n          labelHelp={t(\n            'Divide the work done by this job template into the specified number of job slices, each running the same tasks against a portion of the inventory.'\n          )}\n          name=\"prompt.job_slice_count\"\n          type=\"number\"\n          placeholder={t('Add number of slices')}\n        />\n      </ConditionalField>\n      <ConditionalField isHidden={!config.ask_timeout_on_launch}>\n        <PageFormTextInput<WizardFormValues>\n          id=\"timeout\"\n          label={t('Timeout')}\n          labelHelpTitle={t('Timeout')}\n          labelHelp={t(\n            'The amount of time (in seconds) to run before the task is canceled and considered failed. A value of 0 means no timeout.'\n          )}\n          name=\"prompt.timeout\"\n          type=\"number\"\n          placeholder={t('Add timeout')}\n        />\n      </ConditionalField>\n      <ConditionalField isHidden={!config.ask_diff_mode_on_launch}>\n        <PageFormSwitch<WizardFormValues>\n          id=\"diff_mode\"\n          label={t('Show changes')}\n          labelHelpTitle={t('Show changes')}\n          labelHelp={t(\n            `If enabled, show the changes made by Ansible tasks, where supported. This is equivalent to Ansible's --diff mode.`\n          )}\n          name=\"prompt.diff_mode\"\n        />\n      </ConditionalField>\n      <ConditionalField isHidden={!config.ask_tags_on_launch}>\n        <PageFormCreatableSelect<WizardFormValues>\n          labelHelpTitle={t('Job tags')}\n          labelHelp={t(\n            'Tags are useful when you have a large playbook, and you want to run a specific part of a play or task. Use commas to separate multiple tags. Refer to the documentation for details on the usage of tags.'\n          )}\n          name=\"prompt.job_tags\"\n          placeholderText={t('Select or create job tags')}\n          label={t('Job tags')}\n          options={parseStringToTagArray(template?.job_tags) || []}\n        />\n      </ConditionalField>\n      <ConditionalField isHidden={!config.ask_skip_tags_on_launch}>\n        <PageFormCreatableSelect<WizardFormValues>\n          labelHelpTitle={t('Job tags')}\n          labelHelp={t(\n            'Skip tags are useful when you have a large playbook, and you want to skip specific parts of a play or task. Use commas to separate multiple tags. Refer to the documentation for details on the usage of tags.'\n          )}\n          name=\"prompt.skip_tags\"\n          placeholderText={t('Select or create skip tags')}\n          label={t('Skip tags')}\n          options={parseStringToTagArray(template?.skip_tags) || []}\n        />\n      </ConditionalField>\n      <ConditionalField isHidden={!config.ask_variables_on_launch}>\n        <PageFormDataEditor<WizardFormValues>\n          labelHelpTitle={t('Variables')}\n          labelHelp={t(`Optional extra variables to be applied to job template`)}\n          label={t('Variables')}\n          name=\"prompt.extra_vars\"\n          format=\"yaml\"\n        />\n      </ConditionalField>\n    </PageFormGrid>\n  );\n}\n","import { Link } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { Label, LabelGroup } from '@patternfly/react-core';\nimport { AwxRoute } from '../../../../main/AwxRoutes';\nimport { PageDetail, useGetPageUrl } from '../../../../../../framework';\nimport { PageDetailCodeEditor } from '../../../../../../framework/PageDetails/PageDetailCodeEditor';\nimport { usePageWizard } from '../../../../../../framework/PageWizard/PageWizardProvider';\nimport { jsonToYaml, yamlToJson } from '../../../../../../framework/utils/codeEditorUtils';\nimport { useGet, useGetItem } from '../../../../../common/crud/useGet';\nimport { CredentialLabel } from '../../../../common/CredentialLabel';\nimport { awxAPI } from '../../../../common/api/awx-utils';\nimport { useVerbosityString } from '../../../../common/useVerbosityString';\nimport type { Credential } from '../../../../interfaces/Credential';\nimport type { JobTemplate } from '../../../../interfaces/JobTemplate';\nimport type { WorkflowJobTemplate } from '../../../../interfaces/WorkflowJobTemplate';\nimport type { WizardFormValues } from '../types';\nimport type { Survey } from '../../../../interfaces/Survey';\nimport { parseStringToTagArray } from '../../JobTemplateFormHelpers';\nimport { ExecutionEnvironment } from '../../../../interfaces/ExecutionEnvironment';\n\ninterface PromptWizardFormValues extends Omit<WizardFormValues, 'resource'> {\n  resource: JobTemplate | WorkflowJobTemplate;\n  survey: { [key: string]: string | string[] };\n}\n\nfunction getSurveySpecUrl(template: JobTemplate | WorkflowJobTemplate) {\n  if (!template) return '';\n  switch (template?.type) {\n    case 'job_template':\n      return awxAPI`/job_templates/${template?.id.toString()}/survey_spec/`;\n    case 'workflow_job_template':\n      return awxAPI`/workflow_job_templates/${template?.id.toString()}/survey_spec/`;\n    default:\n      return '';\n  }\n}\n\nfunction maskPasswords(vars: { [key: string]: string | string[] }, passwordKeys: string[]) {\n  const updated = { ...vars };\n  passwordKeys.forEach((key) => {\n    if (typeof updated[key] !== 'undefined') {\n      updated[key] = '$encrypted$';\n    }\n  });\n  return updated;\n}\n\nfunction processSurvey(\n  extra_vars: string | null,\n  survey: { [key: string]: string | string[] },\n  surveyConfig: Survey | null\n): string {\n  const extraVarsObj = extra_vars ? (JSON.parse(yamlToJson(extra_vars)) as object) : {};\n  const updatedSurvey: { [key: string]: string | string[] } = { ...survey };\n\n  if (surveyConfig?.spec) {\n    const passwordFields = surveyConfig.spec\n      .filter((q) => q.type === 'password')\n      .map((q) => q.variable);\n\n    const maskedSurveyPasswords = maskPasswords(survey, passwordFields);\n    Object.keys(maskedSurveyPasswords).forEach((passwordKey) => {\n      updatedSurvey[passwordKey] = maskedSurveyPasswords[passwordKey];\n    });\n  }\n\n  const mergedData: { [key: string]: string | string[] | { name: string }[] } = {\n    ...extraVarsObj,\n    ...updatedSurvey,\n  };\n\n  return jsonToYaml(JSON.stringify(mergedData));\n}\n\nexport function PromptReviewDetails() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const {\n    wizardData: { prompt, resource: template, survey },\n  } = usePageWizard() as {\n    wizardData: PromptWizardFormValues;\n  };\n\n  const {\n    inventory,\n    credentials,\n    instance_groups,\n    execution_environment,\n    diff_mode,\n    scm_branch,\n    extra_vars,\n    forks,\n    job_slice_count,\n    job_tags,\n    job_type,\n    labels,\n    limit,\n    skip_tags,\n    timeout,\n    verbosity,\n  } = prompt || {};\n\n  const { data: surveyConfig } = useGet<Survey>(getSurveySpecUrl(template));\n  const { data: ee } = useGetItem<ExecutionEnvironment>(\n    awxAPI`/execution_environments/`,\n    String(execution_environment)\n  );\n\n  const jobTags = typeof job_tags === 'string' ? parseStringToTagArray(job_tags) : job_tags;\n  const skipTags = typeof skip_tags === 'string' ? parseStringToTagArray(skip_tags) : skip_tags;\n  const verbosityString = useVerbosityString(Number(verbosity));\n  const inventoryUrlPaths: { [key: string]: string } = {\n    '': 'inventory',\n    smart: 'smart_inventory',\n    constructed: 'constructed_inventory',\n  };\n\n  let extraVarDetails = extra_vars || '{}';\n  if (survey) {\n    extraVarDetails = processSurvey(extra_vars, survey, surveyConfig ?? null);\n  }\n\n  if (!template) return null;\n  const organization = template.summary_fields?.organization;\n\n  return (\n    <>\n      <PageDetail label={t('Job type')}>{job_type}</PageDetail>\n      <PageDetail label={t('Organization')} isEmpty={!organization}>\n        <Link\n          to={getPageUrl(AwxRoute.OrganizationDetails, {\n            params: { id: organization?.id },\n          })}\n        >\n          {organization?.name}\n        </Link>\n      </PageDetail>\n      <PageDetail label={t`Inventory`} isEmpty={!inventory?.id}>\n        <Link\n          to={getPageUrl(AwxRoute.InventoryDetails, {\n            params: {\n              id: inventory?.id?.toString(),\n              inventory_type: inventoryUrlPaths[inventory?.kind ?? ''],\n            },\n          })}\n        >\n          {inventory?.name}\n        </Link>\n      </PageDetail>\n      {template.type === 'job_template' && (\n        <PageDetail label={t`Project`} isEmpty={!template.summary_fields.project}>\n          <Link\n            to={getPageUrl(AwxRoute.ProjectDetails, {\n              params: { id: template.summary_fields?.project?.id },\n            })}\n          >\n            {template.summary_fields.project?.name}\n          </Link>\n        </PageDetail>\n      )}\n      <PageDetail label={t`Execution environment`} isEmpty={isEmpty(execution_environment)}>\n        <Link\n          to={getPageUrl(AwxRoute.ExecutionEnvironmentDetails, {\n            params: { id: execution_environment ? execution_environment.toString() : '' },\n          })}\n        >\n          {ee?.name}\n        </Link>\n      </PageDetail>\n      <PageDetail label={t('Source control branch')}>{scm_branch}</PageDetail>\n      {template.type === 'job_template' && (\n        <PageDetail label={t('Playbook')}>{template?.playbook}</PageDetail>\n      )}\n      <PageDetail label={t('Credentials')} isEmpty={isEmpty(credentials)}>\n        <LabelGroup>\n          {Array.isArray(credentials) && credentials.length > 0\n            ? credentials?.map((credential) => (\n                <CredentialDetail credentialID={credential.id} key={credential.id} />\n              ))\n            : null}\n        </LabelGroup>\n      </PageDetail>\n      <PageDetail\n        label={t`Instance groups`}\n        helpText={t`The instance groups for this job template to run on.`}\n        isEmpty={isEmpty(instance_groups)}\n      >\n        <LabelGroup>\n          {instance_groups?.map((ig) => (\n            <Label color=\"blue\" key={ig.id}>\n              <Link\n                to={getPageUrl(AwxRoute.InstanceGroupDetails, {\n                  params: {\n                    id: ig.id,\n                  },\n                })}\n              >\n                {ig.name}\n              </Link>\n            </Label>\n          ))}\n        </LabelGroup>\n      </PageDetail>\n      <PageDetail label={t('Forks')}>{forks || 0}</PageDetail>\n      <PageDetail label={t('Limit')}>{limit}</PageDetail>\n      <PageDetail label={t('Verbosity')}>{verbosityString}</PageDetail>\n      <PageDetail label={t('Timeout')}>{timeout || 0}</PageDetail>\n      <PageDetail label={t('Show changes')}>{diff_mode ? t`On` : t`Off`}</PageDetail>\n      <PageDetail label={t('Job slicing')}>{job_slice_count}</PageDetail>\n      <PageDetail label={t('Labels')} isEmpty={isEmpty(labels)}>\n        <LabelGroup>\n          {labels?.map((label) => <Label key={label.id}>{label.name}</Label>)}\n        </LabelGroup>\n      </PageDetail>\n      <PageDetail label={t('Job tags')} isEmpty={isEmpty(jobTags)}>\n        <LabelGroup>{jobTags?.map(({ name }) => <Label key={name}>{name}</Label>)}</LabelGroup>\n      </PageDetail>\n      <PageDetail label={t('Skip tags')} isEmpty={isEmpty(skipTags)}>\n        <LabelGroup>{skipTags?.map(({ name }) => <Label key={name}>{name}</Label>)}</LabelGroup>\n      </PageDetail>\n      <PageDetailCodeEditor label={t('Extra vars')} value={extraVarDetails} />\n    </>\n  );\n}\n\nexport function CredentialDetail({ credentialID }: { credentialID: number }) {\n  const { data: credentialData } = useGet<Credential>(\n    awxAPI`/credentials/${credentialID?.toString()}/`\n  );\n  if (!credentialData) return null;\n  return <CredentialLabel credential={credentialData} key={credentialID} />;\n}\n\nfunction isEmpty(value: undefined | null | object[] | object | number): boolean {\n  if (value === undefined || value === null) {\n    return true;\n  }\n  if (Array.isArray(value)) {\n    return value.length === 0;\n  }\n  if (typeof value === 'object') {\n    return Object.keys(value).length === 0 || Object.values(value).every(isEmpty);\n  }\n  return false;\n}\n","import { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { AwxRoute } from '../../../../main/AwxRoutes';\nimport {\n  PageDetail,\n  PageDetails,\n  PageWizardStep,\n  useGetPageUrl,\n} from '../../../../../../framework';\nimport { PageDetailCodeEditor } from '../../../../../../framework/PageDetails/PageDetailCodeEditor';\nimport { usePageWizard } from '../../../../../../framework/PageWizard/PageWizardProvider';\nimport { useGet } from '../../../../../common/crud/useGet';\nimport { jsonToYaml } from '../../../../../../framework/utils/codeEditorUtils';\nimport { awxAPI } from '../../../../common/api/awx-utils';\nimport { WizardFormValues, UnifiedJobType, AllResources, NodeResource } from '../types';\nimport { Survey } from '../../../../interfaces/Survey';\nimport { hasDaysToKeep, getValueBasedOnJobType } from './helpers';\nimport { PromptReviewDetails } from './PromptReviewDetails';\nimport { RESOURCE_TYPE } from '../constants';\nimport { useGetNodeTypeDetail, useGetTimeoutString } from '../hooks';\n\nconst ResourceLink: Record<UnifiedJobType, AwxRoute> = {\n  inventory_update: AwxRoute.InventorySourceDetail,\n  job: AwxRoute.JobTemplateDetails,\n  project_update: AwxRoute.ProjectDetails,\n  system_job: AwxRoute.ManagementJobSchedules,\n  workflow_approval: AwxRoute.WorkflowApprovalDetails,\n  workflow_job: AwxRoute.WorkflowJobTemplateDetails,\n};\n\nfunction getSurveySpecUrl(template: AllResources | NodeResource | null) {\n  if (!template) return '';\n\n  const type = template?.type ?? template?.unified_job_type;\n  switch (type) {\n    case 'job_template':\n    case 'job':\n      return awxAPI`/job_templates/${template?.id.toString()}/survey_spec/`;\n    case 'workflow_job_template':\n    case 'workflow_job':\n      return awxAPI`/workflow_job_templates/${template?.id.toString()}/survey_spec/`;\n    default:\n      return '';\n  }\n}\n\nfunction maskPasswords(vars: { [key: string]: string | string[] }, passwordKeys: string[]) {\n  const updated = { ...vars };\n  passwordKeys.forEach((key) => {\n    if (typeof updated[key] !== 'undefined') {\n      updated[key] = '$encrypted$';\n    }\n  });\n  return updated;\n}\n\nfunction processSurvey(\n  survey: { [key: string]: string | string[] },\n  surveyConfig: Survey | null\n): string {\n  const updatedSurvey: { [key: string]: string | string[] } = { ...survey };\n\n  if (surveyConfig?.spec) {\n    const passwordFields = surveyConfig.spec\n      .filter((q) => q.type === 'password')\n      .map((q) => q.variable);\n\n    const maskedSurveyPasswords = maskPasswords(survey, passwordFields);\n    Object.keys(maskedSurveyPasswords).forEach((passwordKey) => {\n      updatedSurvey[passwordKey] = maskedSurveyPasswords[passwordKey];\n    });\n  }\n\n  return jsonToYaml(JSON.stringify(updatedSurvey));\n}\n\nexport function NodeReviewStep() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n\n  const { wizardData, visibleSteps } = usePageWizard() as {\n    wizardData: WizardFormValues;\n    visibleSteps: PageWizardStep[];\n  };\n  const {\n    approval_name,\n    approval_description,\n    node_type,\n    resource,\n    approval_timeout,\n    node_alias,\n    node_convergence,\n    node_days_to_keep,\n    survey,\n  } = wizardData;\n\n  const { data: surveyConfig } = useGet<Survey>(getSurveySpecUrl(resource ?? null));\n  const hasPromptDetails = Boolean(visibleSteps.find((step) => step.id === 'nodePromptsStep'));\n  const nodeTypeDetail = useGetNodeTypeDetail(node_type);\n  const nameDetail = getValueBasedOnJobType(node_type, resource?.name || '', approval_name);\n  const descriptionDetail = getValueBasedOnJobType(\n    node_type,\n    resource?.description || '',\n    approval_description\n  );\n  const convergenceDetail = node_convergence === 'all' ? t('All') : t('Any');\n  const timeoutString = useGetTimeoutString(approval_timeout);\n  const timeoutDetail = getValueBasedOnJobType(node_type, '', timeoutString);\n  const showDaysToKeep = node_type === RESOURCE_TYPE.system_job && hasDaysToKeep(resource);\n  const extraVarsDetail = showDaysToKeep\n    ? jsonToYaml(JSON.stringify({ days: node_days_to_keep }))\n    : '';\n\n  let resourceDetailsLink = getPageUrl(ResourceLink[node_type], {\n    params: { id: resource?.id },\n  });\n\n  let surveyDetails = '{}';\n  if (survey && surveyConfig) {\n    surveyDetails = processSurvey(survey, surveyConfig ?? null);\n  }\n\n  if (resource && 'type' in resource && resource.type === 'inventory_source') {\n    resourceDetailsLink = getPageUrl(AwxRoute.InventorySourceDetail, {\n      params: {\n        source_id: resource?.id,\n        id: resource?.inventory,\n        inventory_type:\n          resource?.summary_fields?.inventory.kind === ''\n            ? 'inventory'\n            : resource?.summary_fields?.inventory.kind,\n      },\n    });\n  }\n\n  return (\n    <>\n      <PageDetails numberOfColumns=\"single\">\n        <PageDetail label={t('Type')}>{nodeTypeDetail}</PageDetail>\n        <PageDetail label={t('Name')}>\n          <Link to={resourceDetailsLink}>{nameDetail}</Link>\n        </PageDetail>\n        <PageDetail label={t('Description')}>{descriptionDetail}</PageDetail>\n        <PageDetail label={t('Timeout')}>{timeoutDetail}</PageDetail>\n        <PageDetail label={t('Convergence')}>{convergenceDetail}</PageDetail>\n        <PageDetail label={t('Alias')}>{node_alias}</PageDetail>\n        {showDaysToKeep ? (\n          <PageDetailCodeEditor label={t('Extra vars')} value={extraVarsDetail} />\n        ) : null}\n        {hasPromptDetails ? <PromptReviewDetails /> : null}\n        {!hasPromptDetails && survey ? (\n          <PageDetailCodeEditor label={t('Extra vars')} value={surveyDetails} />\n        ) : null}\n      </PageDetails>\n    </>\n  );\n}\n","import { ReactNode } from 'react';\nimport {\n  FieldValues,\n  Path,\n  PathValue,\n  UseFormSetError,\n  useFormContext,\n  useWatch,\n} from 'react-hook-form';\n\n/**\n * A component that watches for changes in a specific field using `useWatch` from `react-hook-form`.\n *\n * @template T The type of the watched field.\n * @param {Object} props The component props.\n * @param {string} props.watch The name of the field to watch.\n * @param {(value: T) => React.ReactNode} props.children A function that returns the ReactNode to render with the watched value.\n * @returns {JSX.Element} The JSX element representing the component.\n *\n * @note You can also use `useWatch` directly in your component.\n *\n * @example\n * <PageFormWatch<File | undefined> watch=\"file\">\n *   {(file) => <div>{file?.name}</div>}\n * </PageFormWatch>\n */\nexport function PageFormWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends Path<TFieldValues> = Path<TFieldValues>,\n  TValue = PathValue<TFieldValues, TFieldName>,\n>(props: {\n  watch: TFieldName;\n  children: (value: TValue, setError: UseFormSetError<TFieldValues>) => ReactNode;\n}) {\n  const value = useWatch<TFieldValues, TFieldName>({ name: props.watch }) as TValue;\n  const { setError } = useFormContext();\n  return <>{props.children(value, setError)}</>;\n}\n","import { useMemo } from 'react';\nimport { ITableColumn, useGetPageUrl } from '../../../../../framework';\nimport { SystemJobTemplate } from '../../../interfaces/SystemJobTemplate';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { TextCell } from '../../../../../framework';\nimport { useTranslation } from 'react-i18next';\n\nexport function useManagementJobColumns(): ITableColumn<SystemJobTemplate>[] {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n\n  const tableColumns = useMemo<ITableColumn<SystemJobTemplate>[]>(\n    () => [\n      {\n        id: 'name',\n        header: t('Name'),\n        cell: (systemJobTemplate: SystemJobTemplate) => (\n          <TextCell\n            text={systemJobTemplate.name}\n            to={getPageUrl(AwxRoute.ManagementJobSchedules, {\n              params: {\n                id: systemJobTemplate.id,\n              },\n            })}\n          />\n        ),\n        sort: 'name',\n        card: 'name',\n        list: 'name',\n      },\n      {\n        header: t('Description'),\n        cell: (systemJobTemplate) => <TextCell text={systemJobTemplate.description} />,\n      },\n    ],\n    [t, getPageUrl]\n  );\n\n  return tableColumns;\n}\n","import {\n  useCreatedByToolbarFilter,\n  useModifiedByToolbarFilter,\n} from '../../../common/awx-toolbar-filters';\nimport { useDynamicToolbarFilters } from '../../../common/useDynamicFilters';\n\nexport function useManagementJobFilters() {\n  const createdByToolbarFilter = useCreatedByToolbarFilter();\n  const modifiedByToolbarFilter = useModifiedByToolbarFilter();\n  const toolbarFilters = useDynamicToolbarFilters({\n    optionsPath: 'system_job_templates',\n    preFilledValueKeys: {\n      name: { apiPath: 'system_job_templates' },\n      id: { apiPath: 'system_job_templates' },\n    },\n    preSortedKeys: ['name', 'id', 'created-by', 'modified-by'],\n    additionalFilters: [createdByToolbarFilter, modifiedByToolbarFilter],\n  });\n  return toolbarFilters;\n}\n","import { useTranslation } from 'react-i18next';\nimport { SingleSelectDialog } from '../../../../../framework/PageDialogs/SingleSelectDialog';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxView } from '../../../common/useAwxView';\nimport { useManagementJobColumns } from './useManagementJobColumns';\nimport { useManagementJobFilters } from './useManagementJobFilters';\nimport { useCallback } from 'react';\nimport { usePageDialog } from '../../../../../framework';\nimport { SystemJobTemplate } from '../../../interfaces/SystemJobTemplate';\n\nfunction SelectManagementJob(props: {\n  title: string;\n  onSelect: (template: SystemJobTemplate) => void;\n}) {\n  const toolbarFilters = useManagementJobFilters();\n  const tableColumns = useManagementJobColumns();\n  const view = useAwxView<SystemJobTemplate>({\n    url: awxAPI`/system_job_templates/`,\n    toolbarFilters,\n    tableColumns,\n    disableQueryString: true,\n  });\n  return (\n    <SingleSelectDialog<SystemJobTemplate>\n      {...props}\n      toolbarFilters={toolbarFilters}\n      tableColumns={tableColumns}\n      view={view}\n    />\n  );\n}\n\nexport function useSelectManagementJobs() {\n  const [_, setDialog] = usePageDialog();\n  const { t } = useTranslation();\n  const openSelectSystemJob = useCallback(\n    (onSelect: (template: SystemJobTemplate) => void) => {\n      setDialog(<SelectManagementJob title={t('Select a system job')} onSelect={onSelect} />);\n    },\n    [setDialog, t]\n  );\n  return openSelectSystemJob;\n}\n","import { useCallback } from 'react';\nimport { FieldPath, FieldPathValue, FieldValues, Path } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { PageFormAsyncSelect } from '../../../../../framework/PageForm/Inputs/PageFormAsyncSelect';\nimport { requestGet } from '../../../../common/crud/Data';\nimport { AwxItemsResponse } from '../../../common/AwxItemsResponse';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { SystemJobTemplate } from '../../../interfaces/SystemJobTemplate';\nimport { useSelectManagementJobs } from '../hooks/useSelectManagementJobs';\n\nexport function PageFormManagementJobsSelect<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  isRequired?: boolean;\n  jobTemplatePath?: string;\n  templateId?: number;\n}) {\n  const { t } = useTranslation();\n  const openSelectDialog = useSelectManagementJobs();\n  const query = useCallback(async () => {\n    const response = await requestGet<AwxItemsResponse<SystemJobTemplate>>(\n      awxAPI`/system_job_templates/`\n    );\n\n    return Promise.resolve({\n      total: response.count,\n      values: response.results as FieldPathValue<TFieldValues, Path<TFieldValues>>[],\n    });\n  }, []);\n\n  return (\n    <PageFormAsyncSelect<TFieldValues>\n      name={props.name}\n      id=\"management-job-template-select\"\n      label={t('Management job template')}\n      query={query}\n      valueToString={(value) => {\n        if (value && typeof value === 'string') {\n          return value;\n        }\n        return (value as SystemJobTemplate)?.name ?? '';\n      }}\n      placeholder={t('Select a management job template')}\n      loadingPlaceholder={t('Loading management job templates...')}\n      loadingErrorText={t('Error loading management job templates')}\n      isRequired={props.isRequired}\n      limit={200}\n      openSelectDialog={openSelectDialog}\n    />\n  );\n}\n","import { useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ITableColumn, usePageNavigate } from '../../../../../framework';\nimport { StatusCell } from '../../../../common/Status';\nimport { useDescriptionColumn, useNameColumn } from '../../../../common/columns';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { InventorySource } from '../../../interfaces/InventorySource';\nimport { ActionsResponse, OptionsResponse } from '../../../interfaces/OptionsResponse';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\nexport function useInventorySourceColumns(options?: {\n  disableSort?: boolean;\n  disableLinks?: boolean;\n}) {\n  const { t } = useTranslation();\n  const { data, error, isLoading } = useOptions<OptionsResponse<ActionsResponse>>(\n    awxAPI`/inventory_sources/`\n  );\n  const pageNavigate = usePageNavigate();\n  const nameClick = useCallback(\n    (inventorySource: InventorySource) => {\n      return pageNavigate(AwxRoute.InventorySourceDetail, {\n        params: {\n          inventory_type: 'inventory',\n          id: inventorySource.inventory.toString(),\n          source_id: inventorySource.id,\n        },\n      });\n    },\n    [pageNavigate]\n  );\n  const sourceChoices: [string, string][] | undefined = data?.actions?.GET?.source?.choices;\n  const nameColumn = useNameColumn({ ...options, onClick: nameClick });\n  const descriptionColumn = useDescriptionColumn();\n  const typeColumn = useMemo<ITableColumn<InventorySource>>(\n    () => ({\n      header: t('Type'),\n      type: 'text',\n      value: (inventorySource: InventorySource) => {\n        if (error || isLoading) return;\n        let value = '';\n        sourceChoices?.find(([scMatch, label]) =>\n          inventorySource.source === scMatch ? (value = label) : null\n        );\n        return value;\n      },\n      card: 'subtitle',\n      list: 'subtitle',\n    }),\n    [t, error, isLoading, sourceChoices]\n  );\n  const statusColumn = useMemo<ITableColumn<InventorySource>>(\n    () => ({\n      header: t('Status'),\n      cell: (inventorySource: InventorySource) => {\n        return <StatusCell status={inventorySource.status} />;\n      },\n    }),\n    [t]\n  );\n  const tableColumns = useMemo<ITableColumn<InventorySource>[]>(\n    () => [nameColumn, descriptionColumn, statusColumn, typeColumn],\n    [nameColumn, descriptionColumn, statusColumn, typeColumn]\n  );\n  return tableColumns;\n}\n","import { useDynamicToolbarFilters } from '../../../common/useDynamicFilters';\n\nexport function useInventorySourceFilters(url?: string) {\n  const toolbarFilters = useDynamicToolbarFilters({\n    optionsPath: url ? url : 'inventory_sources',\n    preFilledValueKeys: {\n      name: {\n        apiPath: url ? url : 'inventory_sources',\n      },\n      id: {\n        apiPath: url ? url : 'inventory_sources',\n      },\n    },\n    preSortedKeys: ['name', 'id', 'description'],\n  });\n  return toolbarFilters;\n}\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { usePageDialog } from '../../../../../framework';\nimport { SingleSelectDialog } from '../../../../../framework/PageDialogs/SingleSelectDialog';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxView } from '../../../common/useAwxView';\nimport { InventorySource } from '../../../interfaces/InventorySource';\nimport { useInventorySourceColumns } from './useInventorySourceColumns';\nimport { useInventorySourceFilters } from './useInventorySourceFilters';\n\nfunction SelectInventorySource(props: {\n  title: string;\n  onSelect: (inventorySource: InventorySource) => void;\n  inventoryId?: number;\n}) {\n  const { title, inventoryId, onSelect } = props;\n  const tableColumns = useInventorySourceColumns({ disableLinks: true });\n  const url = inventoryId\n    ? awxAPI`/inventories/${inventoryId.toString()}/inventory_sources/`\n    : awxAPI`/inventory_sources/`;\n  const toolbarFilters = useInventorySourceFilters(url);\n  const view = useAwxView<InventorySource>({\n    url,\n    toolbarFilters,\n    tableColumns,\n    disableQueryString: true,\n  });\n  return (\n    <SingleSelectDialog<InventorySource>\n      title={title}\n      onSelect={onSelect}\n      toolbarFilters={toolbarFilters}\n      tableColumns={tableColumns}\n      view={view}\n    />\n  );\n}\n\nexport function useSelectInventorySource(inventoryId?: number) {\n  const [_, setDialog] = usePageDialog();\n  const { t } = useTranslation();\n  const openSelectInventory = useCallback(\n    (onSelect: (inventory: InventorySource) => void) => {\n      setDialog(\n        <SelectInventorySource\n          title={t('Select inventory source')}\n          inventoryId={inventoryId}\n          onSelect={onSelect}\n        />\n      );\n    },\n    [setDialog, inventoryId, t]\n  );\n  return openSelectInventory;\n}\n","import { useCallback } from 'react';\nimport { FieldPath, FieldPathValue, FieldValues, Path } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { PageFormAsyncSelect } from '../../../../../framework/PageForm/Inputs/PageFormAsyncSelect';\nimport { requestGet } from '../../../../common/crud/Data';\nimport { AwxItemsResponse } from '../../../common/AwxItemsResponse';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { InventorySource } from '../../../interfaces/InventorySource';\nimport { useSelectInventorySource } from '../hooks/useSelectInventorySource';\n\nexport function PageFormInventorySourceSelect<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: { name: TFieldName; isRequired?: boolean; inventoryId?: number }) {\n  const { name, inventoryId, isRequired = false } = props;\n  const { t } = useTranslation();\n  const openSelectDialog = useSelectInventorySource(inventoryId);\n\n  const query = useCallback(async () => {\n    const response = await requestGet<AwxItemsResponse<InventorySource>>(\n      inventoryId === null || inventoryId === undefined\n        ? awxAPI`/inventory_sources/?page_size=200`\n        : awxAPI`/inventories/${inventoryId.toString()}/inventory_sources/?page_size=200`\n    );\n    return Promise.resolve({\n      total: response.count,\n      values: response.results as FieldPathValue<TFieldValues, Path<TFieldValues>>[],\n    });\n  }, [inventoryId]);\n\n  return (\n    <PageFormAsyncSelect<TFieldValues>\n      name={name}\n      id=\"inventory-source-select\"\n      label={t('Inventory source')}\n      query={query}\n      valueToString={(value) => {\n        return (value as InventorySource)?.name ?? '';\n      }}\n      placeholder={t('Select inventory source')}\n      loadingPlaceholder={t('Loading inventory sources...')}\n      loadingErrorText={t('Error loading inventory sources')}\n      isRequired={isRequired}\n      limit={200}\n      openSelectDialog={openSelectDialog}\n    />\n  );\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ColumnModalOption, CopyCell, ITableColumn } from '../../../../../framework';\nimport {\n  useCreatedColumn,\n  useDescriptionColumn,\n  useModifiedColumn,\n  useOrganizationNameColumn,\n} from '../../../../common/columns';\nimport { ScmType } from '../../../../common/scm';\nimport { Project } from '../../../interfaces/Project';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useExecutionEnvironmentColumn } from './useDefaultEnvironment';\nimport { useLastUsedColumn } from './useLastUsedColumn';\nimport { useProjectNameColumn } from './useProjectNameColumn';\nimport { useProjectStatusColumn } from './useProjectStatusColumn';\n\nexport function useProjectsColumns(options?: { disableSort?: boolean; disableLinks?: boolean }) {\n  const { t } = useTranslation();\n  const nameColumn = useProjectNameColumn({ disableLinks: options?.disableLinks });\n  const descriptionColumn = useDescriptionColumn();\n  const organizationColumn = useOrganizationNameColumn(AwxRoute.OrganizationDetails, options);\n  const createdColumn = useCreatedColumn(options);\n  const modifiedColumn = useModifiedColumn(options);\n  const statusColumn = useProjectStatusColumn({\n    ...options,\n    tooltip: t`Click to view latest project sync job`,\n    tooltipAlt: t`Unable to load latest project sync job`,\n  });\n  const lastUsedColumn = useLastUsedColumn();\n  const defaultEnvironmentColumn = useExecutionEnvironmentColumn();\n  const tableColumns = useMemo<ITableColumn<Project>[]>(\n    () => [\n      nameColumn,\n      descriptionColumn,\n      statusColumn,\n      {\n        header: t('Type'),\n        cell: (project) => <ScmType scmType={project.scm_type} />,\n        modal: ColumnModalOption.hidden,\n        dashboard: ColumnModalOption.hidden,\n      },\n      {\n        header: t('Revision'),\n        cell: (project) =>\n          project.scm_revision ? <CopyCell text={project.scm_revision} /> : t('Sync for revision'),\n        modal: ColumnModalOption.hidden,\n        dashboard: ColumnModalOption.hidden,\n      },\n      organizationColumn,\n      createdColumn,\n      modifiedColumn,\n      lastUsedColumn,\n      defaultEnvironmentColumn,\n    ],\n    [\n      createdColumn,\n      defaultEnvironmentColumn,\n      descriptionColumn,\n      lastUsedColumn,\n      modifiedColumn,\n      nameColumn,\n      organizationColumn,\n      statusColumn,\n      t,\n    ]\n  );\n  return tableColumns;\n}\n","import { Split, SplitItem, Tooltip } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { ITableColumn, useGetPageUrl } from '../../../../../framework';\nimport { IconWrapper } from '../../../../../framework/components/IconWrapper';\nimport { Project } from '../../../interfaces/Project';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\nexport function useProjectNameColumn(options?: { disableLinks?: boolean }) {\n  const { t } = useTranslation();\n  const { disableLinks } = options ?? {};\n  const getPageUrl = useGetPageUrl();\n  const column = useMemo<ITableColumn<Project>>(\n    () => ({\n      header: t('Name'),\n      cell: (project) =>\n        project.custom_virtualenv && !project.default_environment ? (\n          <Split>\n            <SplitItem style={{ marginRight: '8px' }}>\n              <div\n                style={{\n                  maxWidth: '100%',\n                  whiteSpace: 'nowrap',\n                  textOverflow: 'ellipsis',\n                  overflow: 'hidden',\n                }}\n              >\n                {disableLinks ? (\n                  project.name\n                ) : (\n                  <Link to={getPageUrl(AwxRoute.ProjectDetails, { params: { id: project.id } })}>\n                    {project.name}\n                  </Link>\n                )}\n              </div>\n            </SplitItem>\n            <SplitItem>\n              <Tooltip\n                content={t(\n                  `Custom virtual environment {{venvName}} must be replaced by an execution environment.`,\n                  { venvName: project.custom_virtualenv }\n                )}\n                position=\"right\"\n              >\n                <IconWrapper size={'sm'} color={'warning'}>\n                  <ExclamationTriangleIcon />\n                </IconWrapper>\n              </Tooltip>\n            </SplitItem>\n          </Split>\n        ) : (\n          <div\n            style={{\n              maxWidth: '100%',\n              whiteSpace: 'nowrap',\n              textOverflow: 'ellipsis',\n              overflow: 'hidden',\n            }}\n          >\n            {disableLinks ? (\n              project.name\n            ) : (\n              <Link to={getPageUrl(AwxRoute.ProjectDetails, { params: { id: project.id } })}>\n                {project.name}\n              </Link>\n            )}\n          </div>\n        ),\n      sort: 'name',\n      card: 'name',\n      list: 'name',\n      defaultSort: true,\n    }),\n    [t, disableLinks, getPageUrl]\n  );\n  return column;\n}\n","import { Tooltip } from '@patternfly/react-core';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ITableColumn, useGetPageUrl } from '../../../../../framework';\nimport { StatusCell } from '../../../../common/Status';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\nexport function useProjectStatusColumn(options?: {\n  tooltip?: string;\n  tooltipAlt?: string;\n  disableLinks?: boolean;\n  disableSort?: boolean;\n}) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const column: ITableColumn<{\n    type?: string;\n    status?: string;\n    summary_fields?: {\n      last_job?: {\n        id?: number;\n      };\n      current_job?: {\n        id?: number;\n      };\n    };\n  }> = useMemo(\n    () => ({\n      header: t('Status'),\n      cell: (item) =>\n        item.summary_fields?.current_job || item.summary_fields?.last_job ? (\n          <Tooltip content={options?.tooltip ?? ''} position=\"top\">\n            <StatusCell\n              status={item.status}\n              to={getPageUrl(AwxRoute.JobOutput, {\n                params: {\n                  job_type: item.type,\n                  id: item.summary_fields?.current_job?.id ?? item.summary_fields?.last_job?.id,\n                },\n              })}\n              disableLinks={options?.disableLinks}\n            />\n          </Tooltip>\n        ) : (\n          <Tooltip content={options?.tooltipAlt ?? ''} position=\"top\">\n            <StatusCell status={item.status} />\n          </Tooltip>\n        ),\n      sort: options?.disableSort ? undefined : 'status',\n    }),\n    [\n      t,\n      options?.disableSort,\n      options?.tooltip,\n      options?.disableLinks,\n      options?.tooltipAlt,\n      getPageUrl,\n    ]\n  );\n  return column;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ColumnModalOption,\n  ColumnTableOption,\n  DateTimeCell,\n  ITableColumn,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { Project } from '../../../interfaces/Project';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\nexport function useLastUsedColumn() {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const column = useMemo<ITableColumn<Project>>(\n    () => ({\n      header: t('Last used'),\n      value: (project) => (project.last_job_run ? project.last_job_run : undefined),\n      cell: (item) => {\n        if (!item.last_job_run) return <></>;\n        return (\n          <DateTimeCell\n            value={item.last_job_run}\n            author={\n              'summary_fields' in item ? item.summary_fields?.modified_by?.username : undefined\n            }\n            onClick={\n              !('summary_fields' in item)\n                ? undefined\n                : () =>\n                    pageNavigate(AwxRoute.UserDetails, {\n                      params: {\n                        id: item.summary_fields?.modified_by?.id,\n                      },\n                    })\n            }\n          />\n        );\n      },\n      table: ColumnTableOption.expanded,\n      card: 'hidden',\n      list: 'secondary',\n      modal: ColumnModalOption.hidden,\n      dashboard: ColumnModalOption.hidden,\n    }),\n    [pageNavigate, t]\n  );\n  return column;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ColumnModalOption,\n  ColumnTableOption,\n  ITableColumn,\n  TextCell,\n  useGetPageUrl,\n} from '../../../../../framework';\nimport { Project } from '../../../interfaces/Project';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\nexport function useExecutionEnvironmentColumn() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const column = useMemo<ITableColumn<Project>>(\n    () => ({\n      header: t('Default environment'),\n      value: (project) => project.summary_fields?.default_environment?.name,\n      cell: (project) => (\n        <TextCell\n          text={project.summary_fields?.default_environment?.name}\n          to={getPageUrl(AwxRoute.ExecutionEnvironmentDetails, {\n            params: { id: project.summary_fields?.default_environment?.id },\n          })}\n        />\n      ),\n      table: ColumnTableOption.expanded,\n      card: 'hidden',\n      list: 'secondary',\n      modal: ColumnModalOption.hidden,\n      dashboard: ColumnModalOption.hidden,\n    }),\n    [getPageUrl, t]\n  );\n  return column;\n}\n","import {\n  useCreatedByToolbarFilter,\n  useModifiedByToolbarFilter,\n} from '../../../common/awx-toolbar-filters';\nimport { useDynamicToolbarFilters } from '../../../common/useDynamicFilters';\n\nexport function useProjectsFilters() {\n  const createdByToolbarFilter = useCreatedByToolbarFilter();\n  const modifiedByToolbarFilter = useModifiedByToolbarFilter();\n\n  const toolbarFilters = useDynamicToolbarFilters({\n    optionsPath: 'projects',\n    preFilledValueKeys: {\n      name: {\n        apiPath: 'projects',\n      },\n      id: {\n        apiPath: 'projects',\n      },\n    },\n    preSortedKeys: ['name', 'id', 'status', 'scm_type', 'created-by', 'modified-by'],\n    additionalFilters: [createdByToolbarFilter, modifiedByToolbarFilter],\n  });\n  return toolbarFilters;\n}\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { usePageDialog } from '../../../../../framework';\nimport { SingleSelectDialog } from '../../../../../framework/PageDialogs/SingleSelectDialog';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxView } from '../../../common/useAwxView';\nimport { Project } from '../../../interfaces/Project';\nimport { useProjectsColumns } from './useProjectsColumns';\nimport { useProjectsFilters } from './useProjectsFilters';\n\nfunction SelectProject(props: { title: string; onSelect: (project: Project) => void }) {\n  const toolbarFilters = useProjectsFilters();\n  const tableColumns = useProjectsColumns({ disableLinks: true });\n  const view = useAwxView<Project>({\n    url: awxAPI`/projects/`,\n    toolbarFilters,\n    tableColumns,\n    disableQueryString: true,\n  });\n  return (\n    <SingleSelectDialog<Project>\n      {...props}\n      toolbarFilters={toolbarFilters}\n      tableColumns={tableColumns}\n      view={view}\n    />\n  );\n}\n\nexport function useSelectProject() {\n  const [_, setDialog] = usePageDialog();\n  const { t } = useTranslation();\n  const openSelectInventory = useCallback(\n    (onSelect: (project: Project) => void) => {\n      setDialog(<SelectProject title={t('Select project')} onSelect={onSelect} />);\n    },\n    [setDialog, t]\n  );\n  return openSelectInventory;\n}\n","import { useCallback } from 'react';\nimport { FieldPath, FieldPathValue, FieldValues, Path } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { PageFormAsyncSelect } from '../../../../../framework/PageForm/Inputs/PageFormAsyncSelect';\nimport { requestGet } from '../../../../common/crud/Data';\nimport { AwxItemsResponse } from '../../../common/AwxItemsResponse';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { Project } from '../../../interfaces/Project';\nimport { useSelectProject } from '../hooks/useSelectProject';\n\nexport function PageFormProjectSelect<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: { name: TFieldName; isRequired?: boolean; project?: string; projectPath?: string }) {\n  const { t } = useTranslation();\n\n  const openSelectDialog = useSelectProject();\n  const query = useCallback(async () => {\n    const response = await requestGet<AwxItemsResponse<Project>>(\n      awxAPI`/projects/`.concat(`?page_size=200`)\n    );\n    return Promise.resolve({\n      total: response.count,\n      values: response.results as FieldPathValue<TFieldValues, Path<TFieldValues>>[],\n    });\n  }, []);\n\n  return (\n    <PageFormAsyncSelect<TFieldValues, TFieldName>\n      name={props.name}\n      id=\"project\"\n      label={t('Project')}\n      query={query}\n      valueToString={(value) => {\n        if (value && typeof value === 'string') {\n          return value;\n        }\n        return (value as Project)?.name ?? '';\n      }}\n      placeholder={t('Select project')}\n      loadingPlaceholder={t('Loading projects...')}\n      loadingErrorText={t('Error loading projects')}\n      isRequired={props.isRequired}\n      limit={200}\n      openSelectDialog={openSelectDialog}\n    />\n  );\n}\n","import { useCallback } from 'react';\nimport { useGetPageUrl } from '../../../../framework';\nimport { UnifiedJob } from '../../interfaces/UnifiedJob';\nimport { AwxRoute } from '../../main/AwxRoutes';\n\nexport function useGetJobOutputUrl() {\n  const getPageUrl = useGetPageUrl();\n  const getJobOutputUrl = useCallback(\n    (job: UnifiedJob) => {\n      return getPageUrl(AwxRoute.JobOutput, {\n        params: {\n          job_type: jobPaths[job.type],\n          id: job.id,\n        },\n      });\n    },\n    [getPageUrl]\n  );\n  return getJobOutputUrl;\n}\n\nconst jobPaths: { [key: string]: string } = {\n  project_update: 'project',\n  inventory_update: 'inventory',\n  job: 'playbook',\n  ad_hoc_command: 'command',\n  system_job: 'management',\n  workflow_job: 'workflow',\n};\n","import { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\nimport { formatDateString } from '../../../../../framework/utils/formatDateString';\nimport { Tooltip } from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport { StatusCell } from '../../../../common/Status';\nimport { SummaryFieldRecentJob } from '../../../interfaces/summary-fields/summary-fields';\nimport { useGetJobOutputUrl } from '../../../views/jobs/useGetJobOutputUrl';\nimport { UnifiedJob } from '../../../interfaces/UnifiedJob';\n\nconst Wrapper = styled.div`\n  display: inline-flex;\n  flex-wrap: wrap;\n`;\nexport const Sparkline = ({ jobs }: { jobs: SummaryFieldRecentJob[] | undefined }) => {\n  const JOB_TYPE_URL_SEGMENTS: { [char: string]: string } = {\n    job: 'playbook',\n    project_update: 'project',\n    system_job: 'management',\n    inventory_update: 'inventory',\n    ad_hoc_command: 'command',\n    workflow_job: 'workflow',\n  };\n  const { t } = useTranslation();\n  const getJobOutputUrl = useGetJobOutputUrl();\n  const generateTooltip = (job: SummaryFieldRecentJob) => (\n    <>\n      <div>\n        {t`JOB ID:`} {job.id}\n      </div>\n      <div>\n        {t`STATUS:`} {job.status?.toUpperCase()}\n      </div>\n      {job.finished && (\n        <div>\n          {t`FINISHED:`} {formatDateString(job.finished)}\n        </div>\n      )}\n    </>\n  );\n\n  const statusIcons = jobs?.map((job) => {\n    const jobOutputUrl = getJobOutputUrl(job as UnifiedJob);\n    return (\n      <Tooltip position=\"top\" content={generateTooltip(job)} key={job.id}>\n        <Link\n          aria-label={t(`View job ${job.id}`)}\n          to={\n            jobOutputUrl\n              ? jobOutputUrl\n              : `/jobs/${JOB_TYPE_URL_SEGMENTS[job.type]}/${job.id}/output`\n          }\n        >\n          <StatusCell status={job.status} hideLabel={true} />\n        </Link>\n      </Tooltip>\n    );\n  });\n\n  return <Wrapper>{statusIcons}</Wrapper>;\n};\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ColumnModalOption,\n  ColumnTableOption,\n  ITableColumn,\n  TextCell,\n  useGetPageUrl,\n} from '../../../../../framework';\nimport {\n  useCreatedColumn,\n  useCredentialsColumn,\n  useDescriptionColumn,\n  useExecutionEnvColumn,\n  useInventoryNameColumn,\n  useLabelsColumn,\n  useLastRanColumn,\n  useModifiedColumn,\n  useOrganizationNameColumn,\n  useProjectNameColumn,\n  useTypeColumn,\n} from '../../../../common/columns';\nimport { JobTemplate } from '../../../interfaces/JobTemplate';\nimport { WorkflowJobTemplate } from '../../../interfaces/WorkflowJobTemplate';\nimport { SummaryFieldRecentJob } from '../../../interfaces/summary-fields/summary-fields';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { Sparkline } from '../components/Sparkline';\nimport { Split, Tooltip, Icon } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\n\nfunction useActivityColumn() {\n  const { t } = useTranslation();\n  const column: ITableColumn<{\n    summary_fields?: { recent_jobs?: SummaryFieldRecentJob[] | undefined };\n  }> = useMemo(\n    () => ({\n      header: t('Activity'),\n      cell: (item) => <Sparkline jobs={item.summary_fields?.recent_jobs} />,\n      value: (item) =>\n        item.summary_fields?.recent_jobs?.length\n          ? item.summary_fields?.recent_jobs.length\n          : undefined,\n      table: ColumnTableOption.expanded,\n      card: 'hidden',\n      list: 'hidden',\n      modal: ColumnModalOption.hidden,\n    }),\n    [t]\n  );\n  return column;\n}\n\nexport const missingResources = (template: JobTemplate | WorkflowJobTemplate) =>\n  template.type === 'job_template' &&\n  (!template?.summary_fields.project ||\n    (!template?.summary_fields.inventory && !template?.ask_inventory_on_launch));\n\nexport function useTemplateColumns(options?: { disableSort?: boolean; disableLinks?: boolean }) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const makeReadable: (template: JobTemplate | WorkflowJobTemplate) => string = (template) => {\n    if (template.type === 'workflow_job_template') {\n      return t('Workflow job template');\n    }\n    return t('Job template');\n  };\n  const createdColumn = useCreatedColumn(options);\n  const descriptionColumn = useDescriptionColumn();\n  const activityColumn = useActivityColumn();\n  const modifiedColumn = useModifiedColumn(options);\n  const organizationColumn = useOrganizationNameColumn(AwxRoute.OrganizationDetails, options);\n  const inventoryColumn = useInventoryNameColumn(AwxRoute.InventoryDetails, options);\n  const projectColumn = useProjectNameColumn(AwxRoute.ProjectDetails, options);\n  const credentialsColumn = useCredentialsColumn();\n  const labelsColumn = useLabelsColumn();\n  const executionEnvColumn = useExecutionEnvColumn(AwxRoute.ExecutionEnvironments, options);\n\n  const lastRanColumn = useLastRanColumn(options);\n  const typeOfTemplate = useTypeColumn<JobTemplate | WorkflowJobTemplate>({\n    ...options,\n    makeReadable,\n  });\n\n  const tableColumns = useMemo<ITableColumn<JobTemplate | WorkflowJobTemplate>[]>(\n    () => [\n      {\n        header: t('Name'),\n        cell: (template: JobTemplate | WorkflowJobTemplate) => (\n          <Split hasGutter>\n            <TextCell\n              text={template.name}\n              to={getPageUrl(\n                template.type === 'job_template'\n                  ? AwxRoute.JobTemplateDetails\n                  : AwxRoute.WorkflowJobTemplateDetails,\n                { params: { id: template.id } }\n              )}\n            />\n            {missingResources(template) && (\n              <Tooltip content={t`Resources are missing from this template.`} position=\"right\">\n                <Icon status=\"danger\" style={{ paddingTop: '6px' }}>\n                  <ExclamationTriangleIcon />\n                </Icon>\n              </Tooltip>\n            )}\n          </Split>\n        ),\n        card: 'name',\n        list: 'name',\n        sort: 'name',\n      },\n      activityColumn,\n      descriptionColumn,\n      typeOfTemplate,\n      createdColumn,\n      modifiedColumn,\n      organizationColumn,\n      inventoryColumn,\n      executionEnvColumn,\n      projectColumn,\n      credentialsColumn,\n      labelsColumn,\n      lastRanColumn,\n    ],\n    [\n      getPageUrl,\n      t,\n      activityColumn,\n      descriptionColumn,\n      typeOfTemplate,\n      createdColumn,\n      modifiedColumn,\n      organizationColumn,\n      inventoryColumn,\n      executionEnvColumn,\n      projectColumn,\n      credentialsColumn,\n      labelsColumn,\n      lastRanColumn,\n    ]\n  );\n  return tableColumns;\n}\n","import { useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { IToolbarFilter, usePageDialog } from '../../../../../framework';\nimport { SingleSelectDialog } from '../../../../../framework/PageDialogs/SingleSelectDialog';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxView } from '../../../common/useAwxView';\nimport { JobTemplate } from '../../../interfaces/JobTemplate';\nimport { useTemplateColumns } from './useTemplateColumns';\nimport {\n  useCreatedByToolbarFilter,\n  useDescriptionToolbarFilter,\n  useModifiedByToolbarFilter,\n  useNameToolbarFilter,\n} from '../../../common/awx-toolbar-filters';\n\nfunction SelectJobTemplate(props: { title: string; onSelect: (template: JobTemplate) => void }) {\n  const nameToolbarFilter = useNameToolbarFilter();\n  const descriptionToolbarFilter = useDescriptionToolbarFilter();\n  const createdByToolbarFilter = useCreatedByToolbarFilter();\n  const modifiedByToolbarFilter = useModifiedByToolbarFilter();\n  const toolbarFilters = useMemo<IToolbarFilter[]>(\n    () => [\n      nameToolbarFilter,\n      descriptionToolbarFilter,\n      createdByToolbarFilter,\n      modifiedByToolbarFilter,\n    ],\n    [nameToolbarFilter, descriptionToolbarFilter, createdByToolbarFilter, modifiedByToolbarFilter]\n  );\n  const tableColumns = useTemplateColumns({ disableLinks: true });\n  const view = useAwxView<JobTemplate>({\n    url: awxAPI`/job_templates/`,\n    toolbarFilters,\n    tableColumns,\n    disableQueryString: true,\n  });\n  return (\n    <SingleSelectDialog<JobTemplate>\n      {...props}\n      toolbarFilters={toolbarFilters}\n      tableColumns={tableColumns}\n      view={view}\n    />\n  );\n}\n\nexport function useSelectJobTemplate() {\n  const [_, setDialog] = usePageDialog();\n  const { t } = useTranslation();\n  const openSelectTemplate = useCallback(\n    (onSelect: (template: JobTemplate) => void) => {\n      setDialog(<SelectJobTemplate title={t('Select job template')} onSelect={onSelect} />);\n    },\n    [setDialog, t]\n  );\n  return openSelectTemplate;\n}\n","import { useCallback } from 'react';\nimport { FieldPath, FieldPathValue, FieldValues, Path } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { PageFormAsyncSelect } from '../../../../../framework/PageForm/Inputs/PageFormAsyncSelect';\nimport { requestGet } from '../../../../common/crud/Data';\nimport { AwxItemsResponse } from '../../../common/AwxItemsResponse';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { JobTemplate } from '../../../interfaces/JobTemplate';\nimport { useSelectJobTemplate } from '../hooks/useSelectJobTemplate';\n\nexport function PageFormJobTemplateSelect<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  isRequired?: boolean;\n  jobTemplatePath?: string;\n  templateType?: 'job_templates' | 'workflow_job_templates';\n}) {\n  const { t } = useTranslation();\n  const { templateType = 'job_templates' } = props;\n  const openSelectDialog = useSelectJobTemplate();\n  const query = useCallback(async () => {\n    const response = await requestGet<AwxItemsResponse<JobTemplate>>(\n      awxAPI`/${templateType}/`.concat(`?page_size=200`)\n    );\n\n    return Promise.resolve({\n      total: response.count,\n      values: response.results as FieldPathValue<TFieldValues, Path<TFieldValues>>[],\n    });\n  }, [templateType]);\n\n  return (\n    <PageFormAsyncSelect<TFieldValues>\n      name={props.name}\n      id=\"job-template-select\"\n      label={\n        props.templateType === 'workflow_job_templates'\n          ? t('Workflow job template')\n          : t('Job template')\n      }\n      query={query}\n      valueToString={(value) => {\n        if (value && typeof value === 'string') {\n          return value;\n        }\n        return (value as JobTemplate)?.name ?? '';\n      }}\n      placeholder={\n        props.templateType === 'workflow_job_templates'\n          ? t('Select a workflow job template')\n          : t('Select job template')\n      }\n      loadingPlaceholder={\n        props.templateType === 'workflow_job_templates'\n          ? t('Loading workflow job templates...')\n          : t('Loading job templates...')\n      }\n      loadingErrorText={\n        props.templateType === 'workflow_job_templates'\n          ? t('Error loading workflow job templates')\n          : t('Error loading job templates')\n      }\n      isRequired={props.isRequired}\n      limit={200}\n      openSelectDialog={openSelectDialog}\n    />\n  );\n}\n","import {\n  InputGroup,\n  InputGroupItem,\n  InputGroupText,\n  TextInput,\n  Grid,\n  GridItem,\n} from '@patternfly/react-core';\nimport { Dispatch, SetStateAction, useEffect } from 'react';\nimport { Controller, FieldPath, useFormContext, useWatch } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { PageFormSelect, PageFormTextInput, PageWizardStep } from '../../../../../../framework';\nimport { PageFormGroup } from '../../../../../../framework/PageForm/Inputs/PageFormGroup';\nimport { PageFormWatch } from '../../../../../../framework/PageForm/Utils/PageFormWatch';\nimport { usePageWizard } from '../../../../../../framework/PageWizard/PageWizardProvider';\nimport { requestGet } from '../../../../../common/crud/Data';\nimport { useGet } from '../../../../../common/crud/useGet';\nimport { PageFormManagementJobsSelect } from '../../../../administration/management-jobs/components/PageFormManagementJobsSelect';\nimport { AwxItemsResponse } from '../../../../common/AwxItemsResponse';\nimport { awxAPI } from '../../../../common/api/awx-utils';\nimport { useAwxConfig } from '../../../../common/useAwxConfig';\nimport { useGetDocsUrl } from '../../../../common/util/useGetDocsUrl';\nimport type { LaunchConfiguration } from '../../../../interfaces/LaunchConfiguration';\nimport type { SystemJobTemplate } from '../../../../interfaces/SystemJobTemplate';\nimport { PageFormInventorySourceSelect } from '../../../inventories/components/PageFormInventorySourceSelect';\nimport { PageFormProjectSelect } from '../../../projects/components/PageFormProjectSelect';\nimport { parseStringToTagArray } from '../../JobTemplateFormHelpers';\nimport { PageFormJobTemplateSelect } from '../../components/PageFormJobTemplateSelect';\nimport { RESOURCE_TYPE } from '../constants';\nimport type { AllResources, PromptFormValues, UnifiedJobType, WizardFormValues } from '../types';\nimport { shouldHideOtherStep } from './helpers';\n\nexport function NodeTypeStep(props: { hasSourceNode?: boolean }) {\n  const { reset, getValues, setValue, formState, getFieldState, register, control } =\n    useFormContext<WizardFormValues>();\n\n  const { defaultValues } = formState;\n\n  const {\n    setWizardData,\n    setStepData,\n    stepData,\n    steps: allSteps,\n  } = usePageWizard() as {\n    setWizardData: Dispatch<SetStateAction<WizardFormValues>>;\n    setStepData: (\n      data:\n        | Record<'nodeTypeStep', Partial<WizardFormValues>>\n        | Record<'nodePromptsStep', { prompt: PromptFormValues }>\n    ) => void;\n    stepData: {\n      nodeTypeStep?: Partial<WizardFormValues>;\n      nodePromptsStep?: { prompt: PromptFormValues };\n    };\n    wizardData: Partial<WizardFormValues>;\n    visibleSteps: PageWizardStep[];\n    steps: PageWizardStep[];\n  };\n\n  // Register form fields\n  register('node_type');\n  register('resource');\n  register('prompt');\n\n  // Watch form fields\n  const nodeType = useWatch<WizardFormValues>({\n    name: 'node_type',\n    control,\n    defaultValue: defaultValues?.node_type,\n  }) as UnifiedJobType;\n  const nodeResource = useWatch<WizardFormValues>({\n    name: 'resource',\n  }) as AllResources;\n\n  useEffect(() => {\n    const { isDirty, isTouched } = getFieldState('node_type');\n    const currentFormValues = getValues();\n    const isApprovalType = nodeType === RESOURCE_TYPE.workflow_approval;\n\n    setValue('node_type', nodeType, { shouldTouch: true });\n\n    if (isTouched && !isDirty && isApprovalType) {\n      reset(undefined, {\n        keepDefaultValues: true,\n      });\n      setWizardData({ ...currentFormValues, launch_config: null });\n      setStepData({ nodeTypeStep: currentFormValues });\n    }\n  }, [nodeType, getFieldState, setValue, reset, allSteps, setWizardData, setStepData, getValues]);\n\n  useEffect(() => {\n    setValue('resource', null);\n  }, [nodeType, setValue]);\n\n  useEffect(() => {\n    const setLaunchToWizardData = async () => {\n      let launchConfigValue = {} as PromptFormValues;\n      let template = getValues('resource');\n\n      if (!template && nodeResource) {\n        template = nodeResource;\n      }\n\n      if (!template) return;\n      let templateType;\n      if ('type' in template) {\n        templateType = template.type;\n      } else if ('unified_job_type' in template) {\n        templateType = template.unified_job_type;\n      }\n\n      let launchConfigResults = {} as LaunchConfiguration;\n      if (templateType === RESOURCE_TYPE.job || templateType === 'job_template') {\n        launchConfigResults = await requestGet<LaunchConfiguration>(\n          awxAPI`/job_templates/${template.id.toString()}/launch/`\n        );\n      } else if (\n        templateType === RESOURCE_TYPE.workflow_job ||\n        templateType === 'workflow_job_template'\n      ) {\n        launchConfigResults = await requestGet<LaunchConfiguration>(\n          awxAPI`/workflow_job_templates/${template.id.toString()}/launch/`\n        );\n      }\n      const { job_tags, skip_tags, inventory, ...defaults } = launchConfigResults?.defaults || {};\n\n      launchConfigValue = {\n        ...defaults,\n        execution_environment: defaults.execution_environment?.id,\n        inventory: inventory?.id ? inventory : null,\n        job_tags: parseStringToTagArray(job_tags || ''),\n        skip_tags: parseStringToTagArray(skip_tags || ''),\n      };\n\n      const shouldShowPromptStep = !shouldHideOtherStep(launchConfigResults);\n      const shouldShowSurveyStep = launchConfigResults.survey_enabled;\n      if (shouldShowPromptStep || shouldShowSurveyStep) {\n        setWizardData((prev) => ({\n          ...prev,\n          launch_config: launchConfigResults,\n        }));\n\n        if (stepData.nodePromptsStep && nodeResource) {\n          const { isDirty: isNodeTypeDirty } = getFieldState('node_type');\n          if (!isNodeTypeDirty && nodeResource.id === defaultValues?.resource?.id) {\n            setValue('prompt', { ...stepData.nodePromptsStep?.prompt });\n          } else {\n            // If the node type is not dirty and the node resource is not the same as the default value,\n            // and the wizard data is not the same as the default value, then reset the prompt to the default value\n            // else, set the prompt data to the current data.\n            setValue('prompt', launchConfigValue);\n            if ('type' in nodeResource && nodeResource.type !== templateType) {\n              setValue('resource', template);\n            }\n          }\n        }\n      } else {\n        setWizardData((prev) => ({ ...prev, launch_config: null }));\n      }\n    };\n\n    if (nodeType === RESOURCE_TYPE.job || nodeType === RESOURCE_TYPE.workflow_job) {\n      void setLaunchToWizardData();\n    }\n  }, [\n    allSteps,\n    defaultValues,\n    getFieldState,\n    getValues,\n    nodeResource,\n    nodeType,\n    setValue,\n    setWizardData,\n    stepData,\n  ]);\n\n  return (\n    <>\n      <NodeTypeInput />\n      <NodeResourceInput />\n      {props.hasSourceNode && <NodeStatusType />}\n      <ConvergenceInput />\n      <AliasInput />\n    </>\n  );\n}\n\nfunction NodeStatusType() {\n  const { t } = useTranslation();\n  return (\n    <PageFormSelect\n      label={t('Status')}\n      data-cy=\"node-status-type\"\n      name=\"node_status_type\"\n      isRequired\n      options={[\n        {\n          label: t('Always run'),\n          value: 'info',\n          description: t('Execute regardless of the parent node final state.'),\n        },\n        {\n          label: t('Run on success'),\n          value: 'success',\n          description: t('Execute when the parent node results in a successful state.'),\n        },\n        {\n          label: t('Run on fail'),\n          value: 'danger',\n          description: t('Execute when the parent node results in a failure state.'),\n        },\n      ]}\n    />\n  );\n}\nfunction NodeTypeInput() {\n  const { t } = useTranslation();\n  return (\n    <PageFormSelect<WizardFormValues>\n      isRequired\n      label={t('Node type')}\n      name=\"node_type\"\n      data-cy=\"node-type\"\n      options={[\n        { label: t('Job Template'), value: RESOURCE_TYPE.job },\n        { label: t('Workflow Job Template'), value: RESOURCE_TYPE.workflow_job },\n        { label: t('Approval'), value: RESOURCE_TYPE.workflow_approval },\n        { label: t('Project Sync'), value: RESOURCE_TYPE.project_update },\n        { label: t('Inventory Source Sync'), value: RESOURCE_TYPE.inventory_update },\n        { label: t('Management Job'), value: RESOURCE_TYPE.system_job },\n      ]}\n    />\n  );\n}\n\nfunction NodeResourceInput() {\n  const { t } = useTranslation();\n  return (\n    <PageFormWatch watch=\"node_type\">\n      {(nodeType) => {\n        switch (nodeType) {\n          case RESOURCE_TYPE.job:\n            return (\n              <PageFormJobTemplateSelect<WizardFormValues>\n                templateType=\"job_templates\"\n                name=\"resource\"\n                isRequired\n              />\n            );\n          case RESOURCE_TYPE.workflow_job:\n            return (\n              <PageFormJobTemplateSelect<WizardFormValues>\n                templateType=\"workflow_job_templates\"\n                name=\"resource\"\n                isRequired\n              />\n            );\n          case RESOURCE_TYPE.workflow_approval:\n            return (\n              <>\n                <PageFormTextInput<WizardFormValues>\n                  label={t('Name')}\n                  name=\"approval_name\"\n                  id=\"approval_name\"\n                  isRequired\n                />\n                <PageFormTextInput<WizardFormValues>\n                  label={t('Description')}\n                  name=\"approval_description\"\n                  id=\"approval_description\"\n                />\n                <TimeoutInputs />\n              </>\n            );\n          case RESOURCE_TYPE.project_update:\n            return <PageFormProjectSelect<WizardFormValues> name=\"resource\" isRequired />;\n          case RESOURCE_TYPE.inventory_update:\n            return <PageFormInventorySourceSelect<WizardFormValues> name=\"resource\" isRequired />;\n          case RESOURCE_TYPE.system_job:\n            return (\n              <>\n                <PageFormManagementJobsSelect<WizardFormValues> name=\"resource\" isRequired />\n                <SystemJobInputs />\n              </>\n            );\n          default:\n            return;\n        }\n      }}\n    </PageFormWatch>\n  );\n}\n\nfunction SystemJobInputs() {\n  const { t } = useTranslation();\n  const { data } = useGet<AwxItemsResponse<SystemJobTemplate>>(awxAPI`/system_job_templates/`);\n\n  const showDaysToKeep = (systemJobTemplate: SystemJobTemplate) => {\n    const jobType =\n      systemJobTemplate?.job_type ||\n      data?.results.find((result) => systemJobTemplate?.id === result?.id)?.job_type;\n    return ['cleanup_jobs', 'cleanup_activitystream'].includes(jobType || '');\n  };\n\n  return (\n    <PageFormWatch watch=\"resource\">\n      {(systemJobTemplate: SystemJobTemplate) => {\n        if (!showDaysToKeep(systemJobTemplate)) return null;\n\n        return (\n          <PageFormTextInput<WizardFormValues>\n            name=\"node_days_to_keep\"\n            label={t('Days of data to be retained')}\n            placeholder={t('Enter number of days')}\n            type=\"number\"\n            isRequired\n            min={0}\n          />\n        );\n      }}\n    </PageFormWatch>\n  );\n}\n\nfunction TimeoutInputs() {\n  const { t } = useTranslation();\n  const { control } = useFormContext<WizardFormValues>();\n\n  return (\n    <Controller<WizardFormValues, FieldPath<WizardFormValues>>\n      name=\"approval_timeout\"\n      control={control}\n      shouldUnregister\n      render={({ field }) => {\n        const { onChange, value } = field;\n\n        function timeToSeconds(minutes: number, seconds: number) {\n          return minutes * 60 + seconds;\n        }\n\n        function onChangeHandler({ input, unit }: { input: number; unit: 'minutes' | 'seconds' }) {\n          const totalApprovalTimeout = timeToSeconds(\n            unit === 'minutes' ? input : Math.floor(Number(value) / 60),\n            unit === 'seconds' ? input : Math.floor(Number(value) % 60)\n          );\n          onChange(totalApprovalTimeout);\n        }\n\n        return (\n          <PageFormGroup fieldId=\"approval_timeout\" label={t('Timeout')}>\n            <InputGroup>\n              <Grid hasGutter sm={6}>\n                <GridItem>\n                  <InputGroupItem isFill>\n                    <TextInput\n                      placeholder={t('Timeout in minutes')}\n                      onChange={(_event, value: string) =>\n                        onChangeHandler({ input: Number(value), unit: 'minutes' })\n                      }\n                      value={Math.floor(Number(value) / 60)}\n                      aria-describedby=\"approval_timeout_minutes-form-group\"\n                      type=\"number\"\n                      data-cy=\"approval_timeout_minutes\"\n                      min={0}\n                    />\n                    <InputGroupText>{t('minutes')}</InputGroupText>\n                  </InputGroupItem>\n                </GridItem>\n                <GridItem>\n                  <InputGroupItem isFill>\n                    <TextInput\n                      placeholder={t('Timeout in seconds')}\n                      onChange={(_event, value: string) =>\n                        onChangeHandler({ input: Number(value), unit: 'seconds' })\n                      }\n                      value={Math.floor(Number(value) % 60)}\n                      aria-describedby=\"approval_timeout_seconds-form-group\"\n                      type=\"number\"\n                      data-cy=\"approval_timeout_seconds\"\n                      min={0}\n                    />\n                    <InputGroupText>{t('seconds')}</InputGroupText>\n                  </InputGroupItem>\n                </GridItem>\n              </Grid>\n            </InputGroup>\n          </PageFormGroup>\n        );\n      }}\n    />\n  );\n}\n\nfunction ConvergenceInput() {\n  const { t } = useTranslation();\n  const config = useAwxConfig();\n  return (\n    <PageFormSelect<WizardFormValues>\n      isRequired\n      label={t('Convergence')}\n      name=\"node_convergence\"\n      data-cy=\"node-convergence\"\n      labelHelpTitle={t('Convergence')}\n      labelHelp={\n        <>\n          {t('Preconditions for running this node when there are multiple parents')}{' '}\n          <a href={useGetDocsUrl(config, 'workflowVisBuild')}>{t('documentation.')}</a>\n        </>\n      }\n      options={[\n        {\n          label: t('Any'),\n          value: 'any',\n          description: t(\n            'Ensures that at least one parent node met the expected outcome in order to run the child node.'\n          ),\n        },\n        {\n          label: t('All'),\n          value: 'all',\n          description: t(\n            'Ensures that every parent node met the expected outcome in order to run the child node.'\n          ),\n        },\n      ]}\n    />\n  );\n}\n\nfunction AliasInput() {\n  const { t } = useTranslation();\n  const {\n    formState: { defaultValues },\n  } = useFormContext<WizardFormValues>();\n  const isAliasRequired = defaultValues?.node_alias !== '';\n\n  return (\n    <PageFormTextInput<WizardFormValues>\n      label={t('Node alias')}\n      name=\"node_alias\"\n      data-cy=\"node-alias\"\n      labelHelpTitle={t('Node alias')}\n      labelHelp={t(\n        'If specified, this field will be shown on the node instead of the resource name when viewing the workflow'\n      )}\n      isRequired={isAliasRequired}\n    />\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { PageFormSection } from '../../../framework/PageForm/Utils/PageFormSection';\nimport { PageFormSelect, PageFormTextArea, PageFormTextInput } from '../../../framework';\nimport { usePageWizard } from '../../../framework/PageWizard/PageWizardProvider';\nimport { useGet } from '../../common/crud/useGet';\nimport { awxAPI } from './api/awx-utils';\nimport { Spec, Survey } from '../interfaces/Survey';\nimport { PageSelectOption } from '../../../framework/PageInputs/PageSelectOption';\nimport { PageFormMultiSelect } from '../../../framework/PageForm/Inputs/PageFormMultiSelect';\nimport { WizardFormValues } from '../resources/templates/WorkflowVisualizer/types';\nimport { useEffect } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nfunction getJobType(resource: WizardFormValues['resource']) {\n  if (!resource) return;\n\n  if ('type' in resource) {\n    if (resource?.type === 'job_template') {\n      return 'job_templates';\n    } else if (resource?.type === 'workflow_job_template') {\n      return 'workflow_job_templates';\n    }\n  }\n\n  if ('unified_job_type' in resource) {\n    if (resource?.unified_job_type === 'job') {\n      return 'job_templates';\n    } else if (resource?.unified_job_type === 'workflow_job') {\n      return 'workflow_job_templates';\n    }\n  }\n}\n\nexport function SurveyStep({\n  templateId,\n  jobType,\n  singleColumn,\n}: {\n  templateId?: string;\n  jobType?: string;\n  singleColumn?: boolean;\n}) {\n  const { t } = useTranslation();\n  const { wizardData, stepData } = usePageWizard();\n  const { reset } = useFormContext();\n  const { resource } = wizardData as WizardFormValues;\n  const id = resource ? resource?.id?.toString() : templateId ? templateId : '';\n\n  jobType = jobType ?? getJobType(resource);\n\n  const { data: survey_spec } = useGet<Survey>(\n    awxAPI`/${jobType ?? 'job_templates'}/${id}/survey_spec/`\n  );\n\n  useEffect(() => {\n    const survey: { [key: string]: string | string[] | number } = {};\n    const surveyStep = stepData.survey as {\n      survey: {\n        [key: string]: string | number | string[];\n      };\n    };\n\n    survey_spec?.spec?.forEach((obj: Spec) => {\n      const surveyVariable = surveyStep?.survey?.[obj?.variable];\n\n      if (surveyVariable) {\n        survey[obj.variable] = surveyVariable;\n        return;\n      }\n      if (obj.default === '') {\n        return;\n      }\n      if (obj.type === 'multiselect') {\n        const specDefault = obj.default as string;\n        survey[obj.variable] = specDefault.split('\\n');\n        return;\n      }\n      survey[obj.variable] = obj.default;\n    });\n\n    reset({ survey });\n  }, [survey_spec, reset, stepData]);\n\n  const getChoices = (name: string): PageSelectOption<string>[] => {\n    const choices: PageSelectOption<string>[] = [];\n    survey_spec?.spec.forEach((element: Spec) => {\n      if (\n        (element.type === 'multiplechoice' || element.type === 'multiselect') &&\n        Array.isArray(element.choices)\n      ) {\n        if (element.question_name === name) {\n          element.choices?.forEach((choice: string) => {\n            choices.push({ value: choice, label: t(choice) });\n          });\n        }\n      }\n    });\n    return choices;\n  };\n\n  return (\n    <PageFormSection singleColumn={singleColumn}>\n      {survey_spec?.spec.map((element, index) =>\n        element.type === 'text' ? (\n          <PageFormTextInput\n            key={index}\n            name={`survey.${element.variable}`}\n            label={t(element.question_name)}\n            labelHelp={element.question_description}\n            labelHelpTitle=\"\"\n            isRequired={element.required}\n            type=\"text\"\n            maxLength={element.max}\n            minLength={element.min}\n          />\n        ) : element.type === 'integer' ? (\n          <PageFormTextInput\n            key={index}\n            name={`survey.${element.variable}`}\n            label={t(element.question_name)}\n            labelHelp={element.question_description}\n            labelHelpTitle=\"\"\n            isRequired={element.required}\n            type=\"number\"\n            max={element.max}\n            min={element.min}\n          />\n        ) : element.type === 'float' ? (\n          <PageFormTextInput\n            key={index}\n            name={`survey.${element.variable}`}\n            label={t(element.question_name)}\n            labelHelp={element.question_description}\n            labelHelpTitle=\"\"\n            isRequired={element.required}\n            type=\"number\"\n            max={element.max}\n            min={element.min}\n          />\n        ) : element.type === 'password' ? (\n          <PageFormTextInput\n            key={index}\n            name={`survey.${element.variable}`}\n            label={t(element.question_name)}\n            labelHelp={element.question_description}\n            labelHelpTitle=\"\"\n            isRequired={element.required}\n            type=\"password\"\n            maxLength={element.max}\n            minLength={element.min}\n          />\n        ) : element.type === 'textarea' ? (\n          <PageFormTextArea\n            key={index}\n            name={`survey.${element.variable}`}\n            label={t(element.question_name)}\n            labelHelp={element.question_description}\n            labelHelpTitle=\"\"\n            isRequired={element.required}\n            maxLength={element.max}\n            minLength={element.min}\n          ></PageFormTextArea>\n        ) : element.type === 'multiplechoice' ? (\n          <PageFormSelect\n            key={index}\n            name={`survey.${element.variable}`}\n            placeholderText={t('Select option')}\n            label={t(element.question_name)}\n            labelHelp={element.question_description}\n            labelHelpTitle=\"\"\n            options={getChoices(element.question_name)}\n            isRequired={element.required}\n          ></PageFormSelect>\n        ) : element.type === 'multiselect' ? (\n          <PageFormMultiSelect\n            key={index}\n            name={`survey.${element.variable}`}\n            placeholder={t('Select option(s)')}\n            label={t(element.question_name)}\n            labelHelp={element.question_description}\n            labelHelpTitle=\"\"\n            options={getChoices(element.question_name)}\n            isRequired={element.required}\n          />\n        ) : undefined\n      )}\n    </PageFormSection>\n  );\n}\n","import { DateTime, Duration } from 'luxon';\n\nexport function formatDateString(dateObj: string, tz?: string) {\n  return tz !== null\n    ? DateTime.fromISO(dateObj, { zone: tz }).toLocaleString(DateTime.DATETIME_SHORT_WITH_SECONDS)\n    : DateTime.fromISO(dateObj).toLocaleString(DateTime.DATETIME_SHORT_WITH_SECONDS);\n}\n\nexport function dateToInputDateTime(dt: string, tz?: string | null) {\n  let dateTime;\n  if (tz) {\n    dateTime = DateTime.fromISO(dt, { zone: tz });\n  } else {\n    dateTime = DateTime.fromISO(dt);\n  }\n  return [dateTime.toFormat('yyyy-LL-dd'), dateTime.toFormat('h:mm a')];\n}\nexport function secondsToHHMMSS(seconds: number): string {\n  return Duration.fromObject({ seconds }).toFormat('hh:mm:ss');\n}\n","import {\n  TopologyControlBar,\n  TopologyView as PFTopologyView,\n  action,\n  createTopologyControlButtons,\n  useVisualizationController,\n  defaultControlButtonsOptions,\n  VisualizationSurface,\n  NodeStatus,\n  observer,\n} from '@patternfly/react-topology';\nimport {\n  ViewOptionsContext,\n  ViewOptionsProvider,\n} from '../../../resources/templates/WorkflowVisualizer/ViewOptionsProvider';\nimport { Legend } from '../../../resources/templates/WorkflowVisualizer/components';\nimport { useWorkflowOutput } from './hooks/useWorkflowOutput';\nimport { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { WorkflowNode } from '../../../interfaces/WorkflowNode';\nimport { useTranslation } from 'react-i18next';\nimport { secondsToHHMMSS } from '../../../../../framework/utils/dateTimeHelpers';\nimport { Job } from '../../../interfaces/Job';\nimport { useGet } from '../../../../common/crud/useGet';\n\nconst TopologyView = styled(PFTopologyView)`\n  .pf-v5-c-divider {\n    display: none;\n  }\n`;\nexport const WorkflowOutputGraph = observer(\n  (props: { job?: Job; reloadJob: () => void; refreshNodeStatus: () => void }) => {\n    const controller = useVisualizationController();\n    const { t } = useTranslation();\n    const model = controller.toModel();\n    const nodes = model.nodes;\n    const message = useWorkflowOutput(props.reloadJob, props.job);\n\n    const nodeId = message?.workflow_node_id?.toString();\n\n    const { data: newNode } = useGet<WorkflowNode>(\n      nodeId ? awxAPI`/workflow_job_nodes/${nodeId}/` : '',\n      undefined,\n      { refreshInterval: 1000 }\n    );\n\n    const node = controller.getNodeById(message?.workflow_node_id?.toString() || '');\n    const { refreshNodeStatus } = props;\n    useEffect(() => {\n      const getElapsedTime = (nodeId: number) => {\n        if (!props.job || !nodeId) return;\n\n        node?.setData({\n          ...node?.getData(),\n          secondaryLabel: newNode\n            ? t(`Elapsed time ${secondsToHHMMSS(newNode?.summary_fields?.job?.elapsed || 0)}`)\n            : '',\n        });\n        return;\n      };\n\n      if (!message?.workflow_node_id || !message?.status || !nodes?.length) {\n        return;\n      }\n\n      if (message?.unified_job_id && message.unified_job_id !== props.job?.id) {\n        if (node) {\n          const { resource } = node.getData() as { resource: WorkflowNode };\n          action(() => {\n            node.setData({\n              ...node.getData(),\n              resource: {\n                ...resource,\n                summary_fields: {\n                  ...resource.summary_fields,\n                  job: {\n                    ...resource.summary_fields.job,\n                    id: message.unified_job_id,\n                    type: message.type,\n                  },\n                },\n              },\n            });\n          })();\n        }\n      }\n\n      if (message.finished) {\n        void getElapsedTime(message.workflow_node_id);\n      }\n\n      action(() => {\n        node?.setNodeStatus(message.status as NodeStatus);\n      })();\n    }, [node, message, props.job, t, nodes, newNode]);\n\n    useEffect(() => {\n      refreshNodeStatus();\n    }, [node, refreshNodeStatus]);\n\n    return (\n      <ViewOptionsProvider>\n        <ViewOptionsContext.Consumer>\n          {({ isLegendOpen, toggleLegend }) => {\n            return (\n              <TopologyView\n                data-cy=\"workflow-visualizer-output-graph\"\n                controlBar={\n                  <TopologyControlBar\n                    controlButtons={createTopologyControlButtons({\n                      ...defaultControlButtonsOptions,\n                      zoomInCallback: action(() => {\n                        controller.getGraph().scaleBy(4 / 3);\n                      }),\n                      zoomOutCallback: action(() => {\n                        controller.getGraph().scaleBy(0.75);\n                      }),\n                      fitToScreenCallback: action(() => {\n                        controller.getGraph().fit(80);\n                      }),\n                      resetViewCallback: action(() => {\n                        controller.getGraph().reset();\n                        controller.getGraph().layout();\n                      }),\n                      legend: true,\n                      legendCallback: toggleLegend,\n                    })}\n                  />\n                }\n                sideBarOpen={false}\n              >\n                {isLegendOpen && <Legend />}\n                <VisualizationSurface />\n              </TopologyView>\n            );\n          }}\n        </ViewOptionsContext.Consumer>\n      </ViewOptionsProvider>\n    );\n  }\n);\n","import { useCallback, useState } from 'react';\nimport { useAwxWebSocketSubscription } from '../../../../common/useAwxWebSocket';\nimport { WorkflowNode } from '../../../../interfaces/WorkflowNode';\nimport { Job } from '../../../../interfaces/Job';\n\nexport type WebSocketMessage = {\n  group_name?: string;\n  type?: string;\n  status?: string;\n  inventory_id?: number;\n  unified_job_id?: number;\n  workflow_node_id?: number;\n  finished?: string;\n};\nexport type WebSocketWorkflowNode = WorkflowNode & { job?: WebSocketMessage };\nexport function useWorkflowOutput(reloadJob: () => void, job?: Job) {\n  const [message, setMessage] = useState<WebSocketMessage>();\n\n  const handleWebSocketMessage = useCallback(\n    (message?: WebSocketMessage) => {\n      if (!message) return;\n      setMessage(message);\n      if (\n        message?.group_name === 'jobs' &&\n        message?.unified_job_id?.toString() === job?.id.toString() &&\n        message?.status\n      ) {\n        reloadJob();\n      }\n    },\n    [job?.id, reloadJob]\n  );\n  useAwxWebSocketSubscription(\n    {\n      control: ['limit_reached_1'],\n      group: ['workflow_jobs'],\n      jobs: ['status_changed'],\n    },\n    handleWebSocketMessage as (message: unknown) => void\n  );\n\n  return message;\n}\n","import {\n  CheckCircleIcon,\n  ClockIcon,\n  ExclamationCircleIcon,\n  SyncAltIcon,\n  WarningTriangleIcon,\n} from '@patternfly/react-icons';\nimport {\n  DEFAULT_DECORATOR_RADIUS,\n  Decorator,\n  GraphElement,\n  NodeStatus,\n  TopologyQuadrant,\n  getDefaultShapeDecoratorCenter,\n  isNode,\n} from '@patternfly/react-topology';\nimport { useCallback } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { pfDanger, pfInfo, pfSuccess, pfWarning } from '../../../../../../framework';\n\nexport function useStatusDecorator() {\n  return useCallback((element: GraphElement) => {\n    if (!isNode(element)) {\n      return null;\n    }\n    const status: NodeStatus = element.getNodeStatus();\n\n    const { x, y } = getDefaultShapeDecoratorCenter(TopologyQuadrant.upperLeft, element);\n    const Icon = status && getStatusIcon(status, { x, y });\n\n    if (Icon === null) return null;\n    const decorator = (\n      <Decorator\n        x={x}\n        data-cy={`node-decorator-${status}`}\n        y={y}\n        radius={DEFAULT_DECORATOR_RADIUS}\n        showBackground\n        icon={Icon}\n        className={`node-decorator-${status}-${element.getId()}`}\n        ariaLabel={status}\n      />\n    );\n    return decorator;\n  }, []);\n}\n\nconst Spin = keyframes`\n  from {\n    transform: rotate(0);\n  }\n  to {\n    transform: rotate(1turn);\n  }\n`;\n\nconst IconWrapper = styled.g<{ centerPoint: { x: number; y: number } }>`\n  animation: ${Spin} 1.75s linear infinite;\n  transform-origin: ${({ centerPoint }) =>\n    `${Number(centerPoint.x) + 1}px ${Number(centerPoint.y) + 1}px`};\n`;\n\nfunction getStatusIcon(nodeType: string, centerPoint: { x: number; y: number }) {\n  switch (nodeType) {\n    case 'success':\n    case 'successful':\n      return <CheckCircleIcon data-cy=\"successful-icon\" style={{ fill: pfSuccess }} />;\n    case 'running':\n      return (\n        <IconWrapper data-cy=\"running-icon\" centerPoint={centerPoint}>\n          <SyncAltIcon style={{ fill: pfInfo }} />\n        </IconWrapper>\n      );\n    case 'fail':\n    case 'failed':\n    case 'error':\n      return <ExclamationCircleIcon data-cy=\"failed-icon\" style={{ fill: pfDanger }} />;\n    case 'pending':\n    case 'waiting':\n      return <ClockIcon sdata-cy=\"pending-icon\" style={{ fill: pfInfo }} />;\n    case 'canceled':\n      return <WarningTriangleIcon data-cy=\"canceled-icon\" style={{ fill: pfWarning }} />;\n    default:\n      return null;\n  }\n}\n","import { ElementType, LegacyRef } from 'react';\nimport styled from 'styled-components';\nimport {\n  ClipboardCheckIcon,\n  ClockIcon,\n  CogIcon,\n  ProcessAutomationIcon,\n  ShareAltIcon,\n  SyncAltIcon,\n  TrashIcon,\n} from '@patternfly/react-icons';\nimport {\n  DefaultNode,\n  ElementModel,\n  Layer,\n  TOP_LAYER,\n  GraphElement,\n  NodeStatus,\n  WithSelectionProps,\n  observer,\n  useHover,\n} from '@patternfly/react-topology';\nimport { usePageNavigate } from '../../../../../framework';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useStatusDecorator } from './hooks/useStatusDecorator';\nimport type { SVGIconProps } from '@patternfly/react-icons/dist/js/createIcon';\nimport type { WorkflowNode } from '../../../interfaces/WorkflowNode';\n\nconst StyledNode = styled(DefaultNode)`\n  &.pf-m-hover {\n    cursor: pointer;\n  }\n  &.unexecuted-job {\n    &:hover {\n      cursor: default;\n    }\n    .pf-topology__node__background {\n      fill: var(--pf-v5-chart-color-black-300);\n      stroke: var(--pf-v5-global--Color--200);\n    }\n  }\n`;\n\nexport const jobPaths: { [key: string]: string } = {\n  project_update: 'project',\n  inventory_update: 'inventory',\n  job: 'playbook',\n  ad_hoc_command: 'command',\n  system_job: 'management',\n  workflow_job: 'workflow',\n};\n\nconst NodeIcon: { [key: string]: ElementType<SVGIconProps> } = {\n  inventory_update: ProcessAutomationIcon,\n  job: ClipboardCheckIcon,\n  project_update: SyncAltIcon,\n  system_job: CogIcon,\n  workflow_approval: ClockIcon,\n  workflow_job: ShareAltIcon,\n  deleted_resource: TrashIcon,\n};\n\ninterface WorkflowOutputNodeProps extends WithSelectionProps {\n  element: GraphElement<\n    ElementModel,\n    {\n      badge?: string;\n      badgeColor?: string;\n      badgeTextColor?: string;\n      badgeBorderColor?: string;\n\n      secondaryLabel?: string;\n      resource: WorkflowNode;\n    }\n  >;\n}\n\nexport const WorkflowOutputNode = observer(({ element, selected }: WorkflowOutputNodeProps) => {\n  const [hover, hoverRef] = useHover();\n  const pageNavigate = usePageNavigate();\n  const statusDecorator = useStatusDecorator();\n  const status = element.getController().getNodeById(element.getId())?.getNodeStatus();\n  const data = element.getData();\n  const { job, unified_job_template } = data?.resource?.summary_fields || {};\n  const { unified_job_type: templateType } = unified_job_template || {};\n  const Icon = NodeIcon[templateType ?? 'deleted_resource'];\n\n  function handleSelect() {\n    if (!job) return;\n\n    const routeParams =\n      job.type === 'workflow_approval'\n        ? { params: { id: job.id } }\n        : { params: { job_type: jobPaths[job.type], id: job.id } };\n\n    pageNavigate(\n      job.type === 'workflow_approval' ? AwxRoute.WorkflowApprovalDetails : AwxRoute.JobOutput,\n      routeParams\n    );\n  }\n\n  return (\n    <Layer id={hover ? TOP_LAYER : undefined}>\n      <g ref={hoverRef as LegacyRef<SVGGElement>}>\n        <StyledNode\n          showLabel\n          element={element}\n          labelClassName={`${element.getId()}-node-label`}\n          onSelect={handleSelect}\n          secondaryLabel={data?.secondaryLabel}\n          selected={job?.type ? selected : false}\n          truncateLength={20}\n          badge={data?.badge}\n          badgeColor={data?.badgeColor}\n          badgeTextColor={data?.badgeTextColor}\n          badgeBorderColor={data?.badgeBorderColor}\n          className={status === NodeStatus.default && !job ? 'unexecuted-job' : ''}\n        >\n          <g transform={`translate(13, 13)`}>\n            <Icon style={{ color: '#393F44' }} width={25} height={25} />\n          </g>\n          {statusDecorator(element)}\n        </StyledNode>\n      </g>\n    </Layer>\n  );\n});\n","import { useCallback, useEffect, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ComponentFactory,\n  DagreLayout,\n  DefaultGroup,\n  EdgeModel,\n  Graph,\n  GraphComponent,\n  Model,\n  ModelKind,\n  NodeShape,\n  Visualization,\n  VisualizationProvider,\n  withPanZoom,\n  withSelection,\n  LabelPosition,\n  NodeStatus,\n} from '@patternfly/react-topology';\n\nimport type { WorkflowNode } from '../../../interfaces/WorkflowNode';\n\nimport { EdgeStatus } from '../../../resources/templates/WorkflowVisualizer/types';\nimport { CustomEdge, CustomNode } from '../../../resources/templates/WorkflowVisualizer/components';\nimport { getNodeLabel } from '../../../resources/templates/WorkflowVisualizer/wizard/helpers';\nimport { WorkflowOutputGraph } from './WorkflowOutputGraph';\nimport {\n  GRAPH_ID,\n  NODE_DIAMETER,\n  START_NODE_ID,\n} from '../../../resources/templates/WorkflowVisualizer/constants';\nimport { useCreateEdge } from '../../../resources/templates/WorkflowVisualizer/hooks';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxGetAllPages } from '../../../common/useAwxGetAllPages';\nimport { secondsToHHMMSS } from '../../../../../framework/utils/dateTimeHelpers';\nimport { Job } from '../../../interfaces/Job';\nimport { WorkflowOutputNode } from './WorkflowOutputNode';\n\nexport const graphModel: Model = {\n  nodes: [],\n  edges: [],\n  graph: {\n    id: GRAPH_ID,\n    type: 'graph',\n    layout: 'Dagre',\n    visible: false,\n  },\n};\nexport const greyBadgeLabel = {\n  badge: 'ALL',\n  badgeColor: 'var(--pf-v5-global--BackgroundColor--200)',\n  badgeBorderColor: 'var(--pf-v5-global--palette--black-400)',\n};\n\nexport const WorkflowOutput = (props: {\n  job: Job;\n  reloadJob: () => void;\n  refreshNodeStatus: () => void;\n}) => {\n  const { t } = useTranslation();\n  const createEdge = useCreateEdge();\n\n  const { results: workflowNodes } = useAwxGetAllPages<WorkflowNode>(\n    awxAPI`/workflow_jobs/${props.job.id.toString() || ''}/workflow_nodes/`\n  );\n  const baselineComponentFactory: ComponentFactory = useCallback(\n    (kind: ModelKind, type: string) => {\n      switch (type) {\n        case 'group':\n          return DefaultGroup;\n        case START_NODE_ID:\n          return CustomNode;\n        default:\n          switch (kind) {\n            case ModelKind.graph:\n              return withPanZoom()(GraphComponent);\n            case ModelKind.node:\n              return withSelection()(WorkflowOutputNode);\n            case ModelKind.edge:\n              return CustomEdge;\n            default:\n              return undefined;\n          }\n      }\n    },\n    []\n  );\n\n  const createVisualization = useCallback(() => {\n    const newVisualization = new Visualization();\n    newVisualization.setFitToScreenOnLayout(true);\n    newVisualization.registerComponentFactory(baselineComponentFactory);\n    newVisualization.registerLayoutFactory(\n      (type: string, graph: Graph) =>\n        new DagreLayout(graph, {\n          edgesep: 100,\n          marginx: 20,\n          marginy: 20,\n          rankdir: 'LR',\n          ranker: 'network-simplex',\n          ranksep: 200,\n        })\n    );\n    newVisualization.fromModel(graphModel, false);\n    return newVisualization;\n  }, [baselineComponentFactory]);\n\n  const visualizationRef = useRef<Visualization>(createVisualization());\n  const visualization = visualizationRef.current;\n\n  useEffect(() => {\n    if (!workflowNodes?.length) return;\n    const edges: EdgeModel[] = [];\n    const startNode = {\n      id: START_NODE_ID,\n      type: START_NODE_ID,\n      label: t('Start'),\n      width: NODE_DIAMETER,\n      height: NODE_DIAMETER,\n      data: {\n        resource: { always_nodes: [] },\n      },\n    };\n    const nodes = workflowNodes.map((n) => {\n      const nodeId = n.id.toString();\n      const nodeType = 'node';\n      const nodeName = n.summary_fields?.unified_job_template?.name || '';\n      const nodeLabel = getNodeLabel(nodeName, n.identifier) || t('Deleted');\n\n      n.success_nodes.forEach((id) => {\n        edges.push(createEdge(nodeId, id.toString(), EdgeStatus.success));\n      });\n      n.failure_nodes.forEach((id) => {\n        edges.push(createEdge(nodeId, id.toString(), EdgeStatus.danger));\n      });\n      n.always_nodes.forEach((id) => {\n        edges.push(createEdge(nodeId, id.toString(), EdgeStatus.info));\n      });\n      let time: string = '';\n      if (n?.summary_fields?.job?.elapsed) {\n        time = secondsToHHMMSS(n?.summary_fields?.job?.elapsed);\n      }\n      const status = (n.summary_fields.job?.status as NodeStatus) || undefined;\n      const node = {\n        id: nodeId,\n        type: status ? `${status}-node` : nodeType,\n        label: nodeLabel,\n        width: NODE_DIAMETER,\n        height: NODE_DIAMETER,\n        shape: NodeShape.circle,\n        status: status || NodeStatus.default,\n        labelPosition: LabelPosition.bottom,\n        data: {\n          secondaryLabel: time ? t(`Elapsed time ${time}`) : undefined,\n          resource: n,\n        },\n      };\n\n      if (n.all_parents_must_converge) {\n        return { ...node, data: { ...node.data, ...greyBadgeLabel } };\n      }\n\n      return node;\n    });\n    const nonRootNodes = edges.map((edge) => edge.target);\n    const rootNodes = nodes?.filter(\n      (node) => !nonRootNodes.includes(node.id) && node.id !== START_NODE_ID\n    );\n    rootNodes.forEach((node) => {\n      edges.push(createEdge(START_NODE_ID, node.id, EdgeStatus.info));\n    });\n\n    const model = {\n      edges,\n      nodes: [startNode, ...nodes],\n      graph: {\n        id: GRAPH_ID,\n        type: 'graph',\n        layout: 'Dagre',\n        visible: true,\n      },\n    };\n\n    visualization.fromModel(model, true);\n    visualization.getGraph().reset();\n  }, [t, visualization, createEdge, workflowNodes]);\n\n  return (\n    <VisualizationProvider controller={visualization}>\n      <WorkflowOutputGraph\n        job={props.job}\n        reloadJob={props.reloadJob}\n        refreshNodeStatus={props.refreshNodeStatus}\n      />\n    </VisualizationProvider>\n  );\n};\n","import { NodeModel, NodeShape, useVisualizationController } from '@patternfly/react-topology';\nimport { useTranslation } from 'react-i18next';\nimport { PageWizard, PageWizardStep } from '../../../../../../framework';\nimport { RequestError } from '../../../../../common/crud/RequestError';\nimport { awxErrorAdapter } from '../../../../common/adapters/awxErrorAdapter';\nimport { NODE_DIAMETER, RESOURCE_TYPE, START_NODE_ID } from '../constants';\nimport { useCloseSidebar, useCreateEdge, useNodeTypeStepDefaults } from '../hooks';\nimport { ControllerState, EdgeStatus, PromptFormValues, type WizardFormValues } from '../types';\nimport { NodePromptsStep } from './NodePromptsStep';\nimport { NodeReviewStep } from './NodeReviewStep';\nimport { NodeTypeStep } from './NodeTypeStep';\nimport { SurveyStep } from '../../../../common/SurveyStep';\nimport { getValueBasedOnJobType, hasDaysToKeep, shouldHideOtherStep } from './helpers';\nimport { greyBadgeLabel } from '../../../../views/jobs/WorkflowOutput/WorkflowOutput';\n\ninterface NewGraphNode extends NodeModel {\n  data: {\n    resource: {\n      always_nodes: [];\n      success_nodes: [];\n      failure_nodes: [];\n      extra_data?: {\n        days: number;\n      };\n      identifier?: string;\n      all_parents_must_converge: boolean;\n      summary_fields: {\n        unified_job_template: {\n          id: number;\n          name: string;\n          description: string;\n          unified_job_type: string;\n          timeout?: number;\n        };\n      };\n    };\n    launch_data: PromptFormValues;\n    survey_data: { [key: string]: string | string[] };\n  };\n}\nexport function NodeAddWizard() {\n  const { t } = useTranslation();\n  const closeSidebar = useCloseSidebar();\n  const createEdge = useCreateEdge();\n  const controller = useVisualizationController();\n  const state = controller.getState<ControllerState>();\n  const nodeTypeStepDefaults = useNodeTypeStepDefaults();\n\n  const initialValues = {\n    nodeTypeStep: nodeTypeStepDefaults(),\n  };\n\n  const steps: PageWizardStep[] = [\n    {\n      id: 'nodeTypeStep',\n      label: t('Node details'),\n      inputs: <NodeTypeStep hasSourceNode={Boolean(state.sourceNode)} />,\n      validate: (wizardData: Partial<WizardFormValues>) => {\n        const { resource } = wizardData;\n        if (resource?.type === 'job_template') {\n          if (\n            'project' in resource &&\n            'inventory' in resource &&\n            'ask_inventory_on_launch' in resource\n          ) {\n            if (\n              !resource?.project ||\n              resource?.project === null ||\n              ((!resource?.inventory || resource?.inventory === null) &&\n                !resource?.ask_inventory_on_launch)\n            ) {\n              const errors = {\n                __all__: [\n                  t(\n                    'Job Templates with a missing inventory or project cannot be selected when creating or editing nodes. Select another template or fix the missing fields to proceed.'\n                  ),\n                ],\n              };\n\n              throw new RequestError('', '', 400, '', errors);\n            }\n          }\n        }\n      },\n    },\n    {\n      id: 'nodePromptsStep',\n      label: t('Prompts'),\n      inputs: <NodePromptsStep />,\n      hidden: (wizardData: Partial<WizardFormValues>) => {\n        const { launch_config, resource, node_type } = wizardData;\n        if (Object.keys(wizardData).length === 0) {\n          return true;\n        }\n        if (\n          (node_type === RESOURCE_TYPE.workflow_job || node_type === RESOURCE_TYPE.job) &&\n          resource &&\n          launch_config\n        ) {\n          return shouldHideOtherStep(launch_config);\n        }\n        return true;\n      },\n    },\n    {\n      id: 'survey',\n      label: t('Survey'),\n      inputs: <SurveyStep singleColumn />,\n      hidden: (wizardData: Partial<WizardFormValues>) => {\n        const { launch_config, node_type } = wizardData;\n        if (Object.keys(wizardData).length === 0) {\n          return true;\n        }\n        if (node_type && ![RESOURCE_TYPE.workflow_job, RESOURCE_TYPE.job].includes(node_type)) {\n          return true;\n        }\n        return !launch_config?.survey_enabled;\n      },\n    },\n    { id: 'review', label: t('Review'), element: <NodeReviewStep /> },\n  ];\n\n  const handleSubmit = async (formValues: WizardFormValues) => {\n    const model = controller.toModel();\n\n    const nodes = controller\n      .getGraph()\n      .getNodes()\n      .filter((n) => n.getId() !== START_NODE_ID);\n    const {\n      approval_name,\n      approval_description,\n      launch_config,\n      node_type,\n      resource,\n      approval_timeout,\n      node_alias,\n      node_convergence,\n      node_days_to_keep,\n      node_status_type,\n      prompt,\n      survey,\n    } = formValues;\n    const promptValues = prompt;\n\n    if (promptValues) {\n      if (resource && 'organization' in resource) {\n        promptValues.organization = resource.organization ?? null;\n      }\n      if (launch_config) {\n        promptValues.original = {\n          launch_config,\n        };\n      }\n    }\n\n    const nodeName = getValueBasedOnJobType(node_type, resource?.name || '', approval_name);\n    const nodeLabel = node_alias === '' ? nodeName : node_alias;\n    let nodeToCreate: NewGraphNode = {\n      id: `${nodes.length + 1}-unsavedNode`,\n      type: 'node',\n      label: nodeLabel,\n      width: NODE_DIAMETER,\n      height: NODE_DIAMETER,\n      shape: NodeShape.circle,\n      data: {\n        resource: {\n          always_nodes: [],\n          success_nodes: [],\n          failure_nodes: [],\n          identifier: node_alias,\n          all_parents_must_converge: node_convergence === 'all',\n          extra_data: {\n            days: node_days_to_keep,\n          },\n          summary_fields: {\n            unified_job_template: {\n              id: Number(resource?.id || 0),\n              name: nodeName,\n              description: getValueBasedOnJobType(\n                node_type,\n                resource?.description || '',\n                approval_description\n              ),\n              unified_job_type: node_type,\n              timeout: approval_timeout,\n            },\n          },\n        },\n        launch_data: promptValues,\n        survey_data: survey,\n      },\n    };\n    if (node_convergence === 'all') {\n      nodeToCreate = { ...nodeToCreate, data: { ...nodeToCreate.data, ...greyBadgeLabel } };\n    }\n    if (!state.sourceNode) {\n      const rootEdge = createEdge(START_NODE_ID, nodeToCreate.id, EdgeStatus.info);\n      model.edges?.push(rootEdge);\n    }\n\n    if (state.sourceNode) {\n      const status =\n        node_status_type === EdgeStatus.info\n          ? EdgeStatus.info\n          : node_status_type === EdgeStatus.success\n            ? EdgeStatus.success\n            : EdgeStatus.danger;\n\n      const newEdge = createEdge(state.sourceNode.getId(), nodeToCreate.id, status);\n      state.sourceNode.setState({ modified: true });\n      model.edges?.push(newEdge);\n    }\n\n    if (node_type !== RESOURCE_TYPE.workflow_approval) {\n      delete nodeToCreate.data.resource.summary_fields.unified_job_template.timeout;\n    }\n    if (resource && !hasDaysToKeep(resource)) {\n      delete nodeToCreate.data.resource.extra_data;\n    }\n    if (node_alias === '') {\n      delete nodeToCreate.data.resource.identifier;\n    }\n    model.nodes?.push(nodeToCreate);\n    controller.fromModel(model, true);\n    controller.getNodeById(nodeToCreate.id)?.setState({ modified: true });\n    controller.setState({ ...state, modified: true });\n    closeSidebar();\n    controller.getGraph().layout();\n\n    await Promise.resolve();\n  };\n\n  return (\n    <PageWizard<WizardFormValues>\n      isVertical\n      singleColumn\n      steps={steps}\n      onCancel={closeSidebar}\n      onSubmit={handleSubmit}\n      defaultValue={initialValues}\n      errorAdapter={awxErrorAdapter}\n      title={t('Add step')}\n    />\n  );\n}\n","import { useVisualizationController } from '@patternfly/react-topology';\nimport { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageWizard, PageWizardStep, usePageAlertToaster } from '../../../../../../framework';\nimport { RequestError } from '../../../../../common/crud/RequestError';\nimport { awxErrorAdapter } from '../../../../common/adapters/awxErrorAdapter';\nimport type { WorkflowNode } from '../../../../interfaces/WorkflowNode';\nimport { RESOURCE_TYPE } from '../constants';\nimport { useCloseSidebar, useGetInitialValues } from '../hooks';\nimport type { GraphNode, GraphNodeData, PromptFormValues, WizardFormValues } from '../types';\nimport { NodePromptsStep } from './NodePromptsStep';\nimport { NodeReviewStep } from './NodeReviewStep';\nimport { NodeTypeStep } from './NodeTypeStep';\nimport { SurveyStep } from '../../../../common/SurveyStep';\nimport {\n  getNodeLabel,\n  getValueBasedOnJobType,\n  hasDaysToKeep,\n  replaceIdentifier,\n  shouldHideOtherStep,\n} from './helpers';\n\ntype StepContent = Partial<WizardFormValues> | { prompt: Partial<PromptFormValues> };\ntype StepName = 'nodeTypeStep' | 'nodePromptsStep';\ntype WizardStep = Record<StepName, StepContent>;\n\nexport function NodeEditWizard({ node }: { node: GraphNode }) {\n  const { t } = useTranslation();\n  const controller = useVisualizationController();\n  const closeSidebar = useCloseSidebar();\n  const getInitialValues = useGetInitialValues();\n  const [initialValues, setInitialValues] = useState<WizardStep | null>(null);\n\n  const alertToaster = usePageAlertToaster();\n\n  useEffect(() => {\n    async function fetchValues() {\n      if (!node) return;\n      try {\n        const value = await getInitialValues(node);\n        setInitialValues(value as WizardStep);\n      } catch (error) {\n        const { genericErrors, fieldErrors } = awxErrorAdapter(error);\n        alertToaster.addAlert({\n          variant: 'danger',\n          title: t('Failed to get default node values.'),\n          children: (\n            <>\n              {genericErrors?.map((err) => err.message)}\n              {fieldErrors?.map((err) => err.message)}\n            </>\n          ),\n        });\n      }\n    }\n    void fetchValues();\n  }, [node, getInitialValues, alertToaster, t]);\n\n  if (!initialValues || 'nodeTypeStep' in initialValues === false) {\n    return null;\n  }\n\n  const steps: PageWizardStep[] = [\n    {\n      id: 'nodeTypeStep',\n      label: t('Node details'),\n      inputs: <NodeTypeStep />,\n      validate: (wizardData: Partial<WizardFormValues>) => {\n        const { resource } = wizardData;\n        if (resource?.type === 'job_template') {\n          if (\n            'project' in resource &&\n            'inventory' in resource &&\n            'ask_inventory_on_launch' in resource\n          ) {\n            if (\n              !resource?.project ||\n              resource?.project === null ||\n              ((!resource?.inventory || resource?.inventory === null) &&\n                !resource?.ask_inventory_on_launch)\n            ) {\n              const errors = {\n                __all__: [\n                  t(\n                    'Job Templates with a missing inventory or project cannot be selected when creating or editing nodes. Select another template or fix the missing fields to proceed.'\n                  ),\n                ],\n              };\n\n              throw new RequestError('', '', 400, '', errors);\n            }\n          }\n        }\n      },\n    },\n    {\n      id: 'nodePromptsStep',\n      label: t('Prompts'),\n      inputs: <NodePromptsStep />,\n      hidden: (wizardData: Partial<WizardFormValues>) => {\n        const { launch_config, resource, node_type } = wizardData;\n        if (!launch_config) {\n          return true;\n        }\n\n        if (\n          (node_type === RESOURCE_TYPE.workflow_job || node_type === RESOURCE_TYPE.job) &&\n          resource\n        ) {\n          return shouldHideOtherStep(launch_config);\n        }\n        if ('nodePromptsStep' in initialValues) {\n          return false;\n        }\n        return true;\n      },\n    },\n    {\n      id: 'survey',\n      label: t('Survey'),\n      inputs: <SurveyStep singleColumn />,\n      hidden: (wizardData: Partial<WizardFormValues>) => {\n        const { launch_config, node_type } = wizardData;\n        if (Object.keys(wizardData).length === 0) {\n          return true;\n        }\n        if (node_type && ![RESOURCE_TYPE.workflow_job, RESOURCE_TYPE.job].includes(node_type)) {\n          return true;\n        }\n        return !launch_config?.survey_enabled;\n      },\n    },\n    { id: 'review', label: t('Review'), element: <NodeReviewStep /> },\n  ];\n\n  const handleSubmit = async (formValues: WizardFormValues) => {\n    const nodeData = node.getData() as { resource: WorkflowNode };\n    const nodeOriginalResources = initialValues?.nodePromptsStep?.prompt?.original;\n\n    const {\n      approval_name,\n      approval_description,\n      node_type,\n      resource,\n      approval_timeout,\n      node_alias,\n      node_convergence,\n      node_days_to_keep,\n      launch_config,\n      prompt,\n      survey,\n    } = formValues;\n\n    const promptValues = prompt;\n\n    if (promptValues) {\n      if (resource && 'organization' in resource) {\n        promptValues.organization = resource.organization ?? null;\n      }\n      if (launch_config) {\n        promptValues.original = {\n          launch_config,\n        };\n      }\n      if (nodeOriginalResources) {\n        promptValues.original = {\n          ...promptValues.original,\n          ...nodeOriginalResources,\n        };\n      }\n    }\n\n    const nodeName = getValueBasedOnJobType(node_type, resource?.name || '', approval_name);\n    const nodeIdentifier = replaceIdentifier(nodeData.resource.identifier, node_alias);\n    const nodeToEdit: GraphNodeData = {\n      ...nodeData,\n      resource: {\n        ...nodeData.resource,\n        all_parents_must_converge: node_convergence === 'all',\n        identifier: nodeIdentifier,\n        extra_data: {\n          days: node_days_to_keep,\n        },\n        summary_fields: {\n          ...nodeData.resource.summary_fields,\n          unified_job_template: {\n            id: Number(resource?.id || -1),\n            name: nodeName,\n            description: getValueBasedOnJobType(\n              node_type,\n              resource?.description || '',\n              approval_description\n            ),\n            unified_job_type: node_type,\n            timeout: approval_timeout,\n          },\n        },\n      },\n      launch_data: promptValues,\n      survey_data: survey,\n    };\n\n    if (node_type !== RESOURCE_TYPE.workflow_approval) {\n      delete nodeToEdit.resource.summary_fields?.unified_job_template?.timeout;\n    }\n    if (!hasDaysToKeep(resource)) {\n      nodeToEdit.resource.extra_data = {};\n    }\n\n    node.setLabel(getNodeLabel(nodeName, node_alias));\n    node.setData(nodeToEdit);\n    node.setState({ modified: true });\n    controller.setState({ ...controller.getState(), modified: true });\n    closeSidebar();\n    controller.getGraph().layout();\n\n    await Promise.resolve();\n  };\n\n  return (\n    <PageWizard<WizardFormValues>\n      isVertical\n      singleColumn\n      steps={steps}\n      onCancel={closeSidebar}\n      onSubmit={handleSubmit}\n      defaultValue={initialValues}\n      errorAdapter={awxErrorAdapter}\n      title={t('Edit step')}\n    />\n  );\n}\n","import styled from 'styled-components';\nimport { useTranslation } from 'react-i18next';\nimport { TopologySideBar as PFTopologySideBar } from '@patternfly/react-topology';\nimport { useViewOptions } from '../ViewOptionsProvider';\nimport { WorkflowNodeDetails } from './WorkflowNodeDetails';\nimport { NodeAddWizard } from '../wizard/NodeAddWizard';\nimport { NodeEditWizard } from '../wizard/NodeEditWizard';\nimport { useSelectedNode } from '../hooks';\n\nconst TopologySideBar = styled(PFTopologySideBar)`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport function Sidebar() {\n  const { t } = useTranslation();\n  const selectedNode = useSelectedNode();\n  const { sidebarMode } = useViewOptions();\n\n  if (!sidebarMode) return null;\n\n  const nodeSidebar = {\n    add: <NodeAddWizard />,\n    edit: selectedNode && <NodeEditWizard node={selectedNode} />,\n    view: selectedNode && <WorkflowNodeDetails node={selectedNode} />,\n  };\n\n  return (\n    <TopologySideBar\n      aria-label={t('Topology sidebar')}\n      data-cy=\"workflow-topology-sidebar\"\n      resizable\n      show\n    >\n      {nodeSidebar[sidebarMode]}\n    </TopologySideBar>\n  );\n}\n","import { useMemo } from 'react';\nimport { useVisualizationController, SELECTION_STATE } from '@patternfly/react-topology';\nimport { GraphNode } from '../types';\n\ninterface SelectionHandlerState {\n  [SELECTION_STATE]?: string[];\n}\n\nexport function useSelectedNode() {\n  const controller = useVisualizationController();\n  const { selectedIds } = controller.getState<SelectionHandlerState>();\n\n  const node = useMemo<GraphNode | undefined>(() => {\n    const selectedId = selectedIds && selectedIds[0];\n\n    if (selectedId) {\n      return controller.getNodeById(selectedId) as GraphNode;\n    }\n  }, [controller, selectedIds]);\n\n  return node;\n}\n","import { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom';\nimport { usePageAlertToaster, usePageNavigate } from '../../../../../framework';\nimport { requestGet } from '../../../../common/crud/Data';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport type { JobTemplate } from '../../../interfaces/JobTemplate';\nimport type { UnifiedJob } from '../../../interfaces/UnifiedJob';\nimport type { WorkflowJobTemplate } from '../../../interfaces/WorkflowJobTemplate';\nimport type { JobLaunch, WorkflowJobLaunch } from '../../../interfaces/generated-from-swagger/api';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useGetJobOutputUrl } from '../../../views/jobs/useGetJobOutputUrl';\n\ntype Template = JobTemplate | WorkflowJobTemplate;\ntype TemplateLaunch = JobLaunch & WorkflowJobLaunch;\n\nexport function useLaunchTemplate() {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const postRequest = usePostRequest<Partial<JobTemplate | WorkflowJobTemplate>, UnifiedJob>();\n  const alertToaster = usePageAlertToaster();\n  const pageNavigate = usePageNavigate();\n  const getJobOutputUrl = useGetJobOutputUrl();\n\n  return async (template: Template) => {\n    const launchEndpoint = getLaunchEndpoint(template);\n\n    if (!launchEndpoint) {\n      return Promise.reject(new Error('Unable to retrieve launch configuration'));\n    }\n\n    try {\n      const launchConfig = await requestGet<TemplateLaunch>(launchEndpoint);\n\n      if (canLaunchWithoutPrompt(launchConfig)) {\n        const launchJob = await postRequest(launchEndpoint, {});\n        navigate(getJobOutputUrl(launchJob));\n      } else {\n        const awxRoute =\n          template.type === 'workflow_job_template'\n            ? AwxRoute.WorkflowJobTemplateLaunchWizard\n            : AwxRoute.TemplateLaunchWizard;\n\n        pageNavigate(awxRoute, {\n          params: { id: template.id },\n        });\n      }\n    } catch (error) {\n      alertToaster.addAlert({\n        variant: 'danger',\n        title: t('Failed to launch template'),\n        children: error instanceof Error && error.message,\n        timeout: 5000,\n      });\n    }\n  };\n}\n\nexport function canLaunchWithoutPrompt(launchData: TemplateLaunch) {\n  return (\n    !launchData.ask_credential_on_launch &&\n    !launchData.ask_diff_mode_on_launch &&\n    !launchData.ask_execution_environment_on_launch &&\n    !launchData.ask_forks_on_launch &&\n    !launchData.ask_instance_groups_on_launch &&\n    !launchData.ask_inventory_on_launch &&\n    !launchData.ask_job_slice_count_on_launch &&\n    !launchData.ask_job_type_on_launch &&\n    !launchData.ask_labels_on_launch &&\n    !launchData.ask_limit_on_launch &&\n    !launchData.ask_scm_branch_on_launch &&\n    !launchData.ask_skip_tags_on_launch &&\n    !launchData.ask_tags_on_launch &&\n    !launchData.ask_timeout_on_launch &&\n    !launchData.ask_variables_on_launch &&\n    !launchData.ask_verbosity_on_launch &&\n    launchData.can_start_without_user_input &&\n    !launchData.survey_enabled &&\n    (!launchData.passwords_needed_to_start || launchData.passwords_needed_to_start.length === 0) &&\n    (!launchData.variables_needed_to_start || launchData.variables_needed_to_start.length === 0)\n  );\n}\n\nexport function getLaunchEndpoint(template: Template) {\n  if (template.type === 'job_template') {\n    return awxAPI`/job_templates/${template.id.toString()}/launch/`;\n  } else if (template.type === 'workflow_job_template') {\n    return awxAPI`/workflow_job_templates/${template.id.toString()}/launch/`;\n  } else {\n    return undefined;\n  }\n}\n","import React, { useCallback, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport {\n  CheckCircleIcon,\n  CloseIcon,\n  CompressAltIcon,\n  EllipsisVIcon,\n  ExpandAltIcon,\n  ExternalLinkAltIcon,\n  MinusCircleIcon,\n  RocketIcon,\n} from '@patternfly/react-icons';\nimport {\n  Badge,\n  Button,\n  Divider,\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  Flex,\n  FlexItem,\n  Icon,\n  MenuToggle,\n  Modal,\n  Title,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport { observer, useVisualizationController } from '@patternfly/react-topology';\nimport { usePageNavigate, usePageAlertToaster } from '../../../../../../framework';\nimport { AwxRoute } from '../../../../main/AwxRoutes';\nimport { awxErrorAdapter } from '../../../../common/adapters/awxErrorAdapter';\nimport { useGetDocsUrl } from '../../../../common/util/useGetDocsUrl';\nimport { useAwxConfig } from '../../../../common/useAwxConfig';\nimport { useViewOptions } from '../ViewOptionsProvider';\nimport { AddNodeButton } from './AddNodeButton';\nimport { useRemoveGraphElements, useSaveVisualizer } from '../hooks';\nimport type { ControllerState, GraphNode } from '../types';\nimport { START_NODE_ID } from '../constants';\nimport { useLaunchTemplate } from '../../hooks/useLaunchTemplate';\n\nexport const ToolbarHeader = observer(() => {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const alertToaster = usePageAlertToaster();\n  const { id: templateId } = useParams<{ id: string }>();\n  const controller = useVisualizationController();\n  const { workflowTemplate } = controller.getState<ControllerState>();\n\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [showUnsavedChangesModal, setShowUnsavedChangesModal] = useState<boolean>(false);\n\n  const { isFullScreen } = useViewOptions();\n  const handleSave = useSaveVisualizer(templateId || '');\n\n  const isModified = controller\n    .getElements()\n    .some((element) => element.getState<ControllerState>().modified);\n\n  const handleCancel = useCallback(() => {\n    if (isModified) {\n      setShowUnsavedChangesModal(true);\n      return;\n    }\n    pageNavigate(AwxRoute.WorkflowJobTemplateDetails, {\n      params: { id: templateId },\n    });\n  }, [pageNavigate, templateId, isModified]);\n\n  return (\n    <>\n      <ToolbarItem align={{ default: 'alignLeft' }}>\n        <Title headingLevel=\"h1\">\n          <Flex>\n            <FlexItem data-cy=\"wf-vzr-title\">{t('Workflow Visualizer')}</FlexItem>\n            <Divider\n              orientation={{\n                default: 'vertical',\n              }}\n            />\n            <FlexItem data-cy=\"wf-vzr-name\">{workflowTemplate?.name}</FlexItem>\n          </Flex>\n        </Title>\n      </ToolbarItem>\n      <ToolbarItem\n        align={{ default: 'alignRight' }}\n        visibility={{ default: isFullScreen ? 'hidden' : 'visible' }}\n      >\n        <Button\n          data-cy=\"workflow-visualizer-toolbar-close\"\n          variant=\"plain\"\n          icon={<CloseIcon />}\n          aria-label={t('Close')}\n          onClick={handleCancel}\n        />\n      </ToolbarItem>\n      <Modal\n        title={t('Warning: Unsaved changes')}\n        data-cy=\"visualizer-unsaved-changes-modal\"\n        titleIconVariant=\"warning\"\n        isOpen={showUnsavedChangesModal}\n        variant=\"small\"\n        onClose={() => setShowUnsavedChangesModal(false)}\n        actions={[\n          <Button\n            key=\"save-and-exit\"\n            data-cy=\"save-and-exit\"\n            variant=\"primary\"\n            isLoading={isSubmitting}\n            onClick={() => {\n              async function saveWorkflowVisualizer() {\n                setIsSubmitting(true);\n                try {\n                  await handleSave();\n                  alertToaster.addAlert({\n                    variant: 'success',\n                    title: t('Successfully saved workflow visualizer'),\n                    timeout: 5000,\n                  });\n                } catch (error) {\n                  const { genericErrors, fieldErrors } = awxErrorAdapter(error);\n                  alertToaster.addAlert({\n                    variant: 'danger',\n                    title: t('Failed to save workflow job template'),\n                    children: (\n                      <>\n                        {genericErrors?.map((err) => err.message)}\n                        {fieldErrors?.map((err) => err.message)}\n                      </>\n                    ),\n                  });\n                }\n                setIsSubmitting(false);\n                setShowUnsavedChangesModal(false);\n              }\n              void saveWorkflowVisualizer();\n            }}\n          >\n            {t('Save and exit')}\n          </Button>,\n          <Button\n            key=\"exit-without-saving\"\n            data-cy=\"exit-without-saving\"\n            variant=\"danger\"\n            onClick={() => {\n              pageNavigate(AwxRoute.WorkflowJobTemplateDetails, {\n                params: { id: templateId },\n              });\n            }}\n          >\n            {t('Exit without saving')}\n          </Button>,\n        ]}\n      >\n        {t(`You have unsaved changes. Are you sure you want to leave this page?`)}\n      </Modal>\n    </>\n  );\n});\n\nexport const WorkflowVisualizerToolbar = observer(() => {\n  const { t } = useTranslation();\n  const config = useAwxConfig();\n  const alertToaster = usePageAlertToaster();\n  const { id: templateId } = useParams();\n  const controller = useVisualizationController();\n  const { workflowTemplate, RBAC, modified } = controller.getState<ControllerState>();\n\n  const [isKebabOpen, setIsKebabOpen] = useState<boolean>(false);\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n\n  const { isFullScreen, toggleFullScreen } = useViewOptions();\n  const { removeNodes } = useRemoveGraphElements();\n  const handleSave = useSaveVisualizer(templateId || '');\n  const launch = useLaunchTemplate();\n\n  const nodes = controller\n    .getGraph()\n    .getNodes()\n    .filter((n) => n.isVisible() && n.getId() !== START_NODE_ID) as GraphNode[];\n\n  const handleLaunchWorkflow = useCallback(async () => {\n    await launch(workflowTemplate);\n  }, [launch, workflowTemplate]);\n\n  return (\n    <>\n      {isFullScreen && <ToolbarHeader />}\n      {RBAC?.edit && (\n        <>\n          <ToolbarItem>\n            <Button\n              data-cy=\"workflow-visualizer-toolbar-save\"\n              icon={<CheckCircleIcon />}\n              label={t('Save')}\n              isDisabled={!modified}\n              isLoading={isSubmitting}\n              onClick={() => {\n                async function saveWorkflowVisualizer() {\n                  setIsSubmitting(true);\n                  try {\n                    await handleSave();\n                    alertToaster.addAlert({\n                      variant: 'success',\n                      title: t('Successfully saved workflow visualizer'),\n                      timeout: 5000,\n                    });\n                  } catch (error) {\n                    const { genericErrors, fieldErrors } = awxErrorAdapter(error);\n                    alertToaster.addAlert({\n                      variant: 'danger',\n                      title: t('Failed to save workflow job template'),\n                      children: (\n                        <>\n                          {genericErrors?.map((err) => err.message)}\n                          {fieldErrors?.map((err) => err.message)}\n                        </>\n                      ),\n                    });\n                  }\n                  setIsSubmitting(false);\n                }\n                void saveWorkflowVisualizer();\n              }}\n            >\n              {t('Save')}\n            </Button>\n          </ToolbarItem>\n          <ToolbarItem>\n            <AddNodeButton />\n          </ToolbarItem>\n        </>\n      )}\n      <ToolbarItem data-cy=\"workflow-visualizer-toolbar-kebab\">\n        <Dropdown\n          onOpenChange={(isOpen: boolean) => setIsKebabOpen(isOpen)}\n          onSelect={() => setIsKebabOpen(!isKebabOpen)}\n          isOpen={isKebabOpen}\n          toggle={(toggleRef) => (\n            <MenuToggle\n              ref={toggleRef}\n              className=\"toggle-kebab\"\n              onClick={() => setIsKebabOpen(!isKebabOpen)}\n              variant=\"plain\"\n            >\n              <EllipsisVIcon />\n            </MenuToggle>\n          )}\n        >\n          <DropdownList>\n            <DropdownItem\n              icon={<ExternalLinkAltIcon />}\n              data-cy=\"workflow-documentation\"\n              to={useGetDocsUrl(config, 'workflowVisualizer')}\n              target=\"_blank\"\n            >\n              {t('Documentation')}\n            </DropdownItem>\n            {RBAC?.start && (\n              <DropdownItem\n                tooltipProps={\n                  modified || nodes.length === 0\n                    ? {\n                        content: modified\n                          ? t('Save the workflow before launching')\n                          : t('Add a step to the workflow before launching'),\n                      }\n                    : undefined\n                }\n                isAriaDisabled={nodes.length === 0 || modified}\n                data-cy=\"workflow-visualizer-toolbar-launch\"\n                onClick={() => void handleLaunchWorkflow()}\n                icon={<RocketIcon />}\n              >\n                {t('Launch workflow')}\n              </DropdownItem>\n            )}\n            {RBAC?.edit && (\n              <>\n                <Divider />\n                <DropdownItem\n                  isAriaDisabled={nodes.length === 0}\n                  tooltipProps={\n                    nodes.length === 0\n                      ? { content: t('Add a step to the workflow before removing') }\n                      : undefined\n                  }\n                  data-cy=\"workflow-visualizer-toolbar-remove-all\"\n                  onClick={() => removeNodes(nodes)}\n                  isDanger\n                  icon={<MinusCircleIcon />}\n                >\n                  {t('Remove all steps')}\n                </DropdownItem>\n              </>\n            )}\n          </DropdownList>\n        </Dropdown>\n      </ToolbarItem>\n      <ToolbarItem style={{ alignSelf: 'center' }}>\n        <div data-cy=\"workflow-visualizer-toolbar-total-nodes\">\n          {t('Total nodes')} <Badge isRead>{nodes.length || 0}</Badge>\n        </div>\n      </ToolbarItem>\n      <ToolbarItem align={{ default: 'alignRight' }}>\n        <Button\n          data-cy=\"workflow-visualizer-toolbar-expand-collapse\"\n          variant=\"plain\"\n          aria-label={isFullScreen ? t('Collapse') : t('Expand')}\n          onClick={toggleFullScreen}\n          icon={\n            <Icon size=\"lg\">\n              {isFullScreen ? (\n                <CompressAltIcon\n                  data-cy=\"workflow-visualizer-toolbar-collapse\"\n                  aria-label={t('Collapse')}\n                />\n              ) : (\n                <ExpandAltIcon\n                  data-cy=\"workflow-visualizer-toolbar-expand\"\n                  aria-label={t('Expand')}\n                />\n              )}\n            </Icon>\n          }\n        />\n      </ToolbarItem>\n    </>\n  );\n});\n","import { InstanceDetailsTab } from '../instances/InstanceDetails';\nimport { Instance } from '../../interfaces/Instance';\nimport { InstanceGroup } from '../../interfaces/InstanceGroup';\nimport { AwxItemsResponse } from '../../common/AwxItemsResponse';\nimport { useInstanceActions } from '../instances/hooks/useInstanceActions';\nimport { useGetItem } from '../../../common/crud/useGet';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { SidebarHeader } from '../../resources/templates/WorkflowVisualizer/components';\n\nexport function InstanceDetailInner(props: {\n  instance: Instance;\n  instanceGroups: AwxItemsResponse<InstanceGroup> | undefined;\n  instanceForks: number;\n}) {\n  const { instance, instanceGroups, instanceForks } = props;\n  return (\n    <InstanceDetailsTab\n      numberOfColumns=\"single\"\n      instance={instance}\n      instanceGroups={instanceGroups}\n      instanceForks={instanceForks}\n    />\n  );\n}\n\nexport function InstanceDetailSidebar(props: { selectedId: string; onClose: () => void }) {\n  const { selectedId } = props;\n  const { data: instance } = useGetItem<Instance>(awxAPI`/instances/`, selectedId);\n  const { instanceGroups, instanceForks } = useInstanceActions(selectedId);\n\n  return instance ? (\n    <>\n      <SidebarHeader onClose={props.onClose} title={instance.hostname} />\n      <InstanceDetailInner\n        instance={instance}\n        instanceGroups={instanceGroups ? instanceGroups : undefined}\n        instanceForks={instanceForks}\n      />\n    </>\n  ) : null;\n}\n","import { DefaultEdge } from '@patternfly/react-topology';\nimport { CustomEdgeProps } from '../types';\n\nexport const MeshEdge: React.FC<CustomEdgeProps> = ({ element }: CustomEdgeProps) => {\n  const data = element.getData();\n  return <DefaultEdge element={element} {...data} />;\n};\n","import {\n  ComponentFactory,\n  DefaultGroup,\n  EdgeModel,\n  EdgeStyle,\n  GraphComponent,\n  Model,\n  ModelKind,\n  NodeModel,\n  NodeShape,\n  NodeStatus,\n  SELECTION_EVENT,\n  TopologyControlBar,\n  TopologySideBar,\n  TopologyView as PFTopologyView,\n  Visualization,\n  VisualizationProvider,\n  VisualizationSurface,\n  action,\n  createTopologyControlButtons,\n  defaultControlButtonsOptions,\n  withPanZoom,\n  withSelection,\n} from '@patternfly/react-topology';\nimport * as d3 from 'd3';\nimport { ComponentType, useEffect, useMemo, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { MeshVisualizer } from '../../interfaces/MeshVisualizer';\nimport { Legend } from './Legend';\nimport { Loader } from './Loader';\nimport { InstanceDetailSidebar } from './Sidebar';\nimport { MeshEdge } from './components/MeshEdge';\nimport { MeshNode } from './components/MeshNode';\nimport { WebWorkerResponse } from './types';\nimport { useTranslation } from 'react-i18next';\n\nconst ContentLoading = styled(Loader)`\n  height: 100%;\n  position: absolute;\n  width: 100%;\n  background: white;\n`;\nconst TopologyView = styled(PFTopologyView)`\n  overflow: auto;\n  & > div.pf-topology-container {\n    max-height: 100%;\n  }\n`;\nconst baselineComponentFactory: ComponentFactory = (kind: ModelKind, type: string) => {\n  switch (type) {\n    case 'group':\n      return DefaultGroup;\n    default:\n      switch (kind) {\n        case ModelKind.graph:\n          return withPanZoom()(GraphComponent);\n        case ModelKind.node:\n          return withSelection()(MeshNode as ComponentType);\n        case ModelKind.edge:\n          return MeshEdge;\n        default:\n          return undefined;\n      }\n  }\n};\n\nconst NODE_DIAMETER = 50;\n\nfunction getEdgeStyle(edge: string) {\n  switch (edge) {\n    case 'established':\n      return EdgeStyle.default;\n    case 'adding':\n    case 'removing':\n      return EdgeStyle.dashed;\n    default:\n      return EdgeStyle.default;\n  }\n}\nfunction getEdgeStatus(edge: string) {\n  switch (edge) {\n    case 'established':\n      return NodeStatus.default;\n    case 'adding':\n      return NodeStatus.success;\n    case 'removing':\n      return NodeStatus.danger;\n    default:\n      return NodeStatus.default;\n  }\n}\n\nexport const TopologyViewLayer = (props: { mesh: MeshVisualizer }) => {\n  const { mesh } = props;\n  const [selectedIds, setSelectedIds] = useState<string[]>([]);\n  const [meshLayout, setMeshLayout] = useState<WebWorkerResponse>({\n    type: '',\n    nodes: [],\n    links: [],\n    progress: 0,\n  });\n  const [progress, setProgress] = useState<number>(0);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [showLegend, setShowLegend] = useState<boolean>(false);\n  const controllerRef = useRef<Visualization>();\n  const controller = controllerRef.current;\n\n  function toggleLegend() {\n    setShowLegend(!showLegend);\n  }\n\n  function handleProgress(progress: number) {\n    const calculatedPercent: number = Math.round(progress * 100);\n    setProgress(calculatedPercent);\n    setTimeout(() => {\n      return calculatedPercent === 100 ? setIsLoading(false) : setIsLoading(true);\n    }, 100);\n  }\n\n  const getData: Worker = useMemo(() => new Worker(new URL('./worker.ts', import.meta.url)), []);\n  function getWidth(selector: string) {\n    const selected = d3.select(selector).node();\n    return selected ? (selected as HTMLElement).getBoundingClientRect().width : 1200;\n  }\n\n  function getHeight(selector: string) {\n    const selected = d3.select(selector).node();\n    return selected ? (selected as HTMLElement).getBoundingClientRect().height : 800;\n  }\n\n  useEffect(() => {\n    const width = getWidth('#mesh-topology');\n    const height = getHeight('#mesh-topology');\n    if (window.Worker) {\n      getData.postMessage({\n        nodes: mesh.nodes,\n        links: mesh.links,\n        width: width,\n        height: height,\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    function handleMeshLayout(data: WebWorkerResponse) {\n      setMeshLayout(() => ({ ...data }));\n      // close the worker thread\n      getData.terminate();\n    }\n    if (window.Worker) {\n      getData.onmessage = function handleWorkerEvent(event: { data: WebWorkerResponse }) {\n        switch (event.data.type) {\n          case 'tick':\n            return handleProgress(event.data.progress);\n          case 'end':\n            return handleMeshLayout(event.data);\n          default:\n            return false;\n        }\n      };\n    }\n  }, [getData]);\n\n  useEffect(() => {\n    const model: Model = {\n      nodes: [],\n      edges: [],\n      graph: {\n        id: 'g1',\n        type: 'graph',\n      },\n    };\n    const newController = new Visualization();\n    newController.registerComponentFactory(baselineComponentFactory);\n\n    newController.addEventListener(SELECTION_EVENT, setSelectedIds);\n\n    newController.fromModel(model, false);\n\n    controllerRef.current = newController;\n  }, []);\n\n  useEffect(() => {\n    const nodes: NodeModel[] = meshLayout.nodes.map((n) => {\n      return {\n        id: n.id,\n        x: n.x,\n        y: n.y,\n        type: n.node_type,\n        label: n.hostname,\n        width: NODE_DIAMETER,\n        height: NODE_DIAMETER,\n        shape: NodeShape.rect,\n        data: {\n          nodeType: n.node_type,\n          nodeStatus: n.node_state,\n        },\n      };\n    });\n    const links: EdgeModel[] = meshLayout.links.map((l) => {\n      return {\n        id: `edge-${l.source.hostname}-${l.target.hostname}`,\n        type: 'edge',\n        source: l.source.id,\n        target: l.target.id,\n        edgeStyle: getEdgeStyle(l.link_state),\n        data: {\n          endTerminalStatus: getEdgeStatus(l.link_state),\n          tagStatus: getEdgeStatus(l.link_state),\n        },\n      };\n    });\n\n    const model: Model = {\n      nodes,\n      edges: links,\n    };\n    if (!controller) {\n      return;\n    }\n    controller.fromModel(model, true); // Merge in the changes\n    action(() => controller.getGraph().fit(80))();\n  }, [meshLayout, controller]);\n  const { t } = useTranslation();\n\n  if (!controller) {\n    return null;\n  }\n  return (\n    <VisualizationProvider controller={controller}>\n      <TopologyView\n        id=\"mesh-topology\"\n        sideBarResizable\n        sideBarOpen={selectedIds.length > 0}\n        sideBar={\n          selectedIds.length > 0 && (\n            <TopologySideBar\n              data-cy=\"mesh-viz-sidebar\"\n              aria-label={t('Mesh Topology sidebar')}\n              show\n              resizable\n            >\n              <InstanceDetailSidebar\n                onClose={() => setSelectedIds([])}\n                selectedId={selectedIds[0]}\n              />\n            </TopologySideBar>\n          )\n        }\n        controlBar={\n          !isLoading && (\n            <TopologyControlBar\n              controlButtons={createTopologyControlButtons({\n                ...defaultControlButtonsOptions,\n                zoomInCallback: action(() => {\n                  controller.getGraph().scaleBy(4 / 3);\n                }),\n                zoomOutCallback: action(() => {\n                  controller.getGraph().scaleBy(0.75);\n                }),\n                fitToScreenCallback: action(() => {\n                  controller.getGraph().fit(80);\n                }),\n                resetViewCallback: action(() => {\n                  controller.getGraph().reset();\n                  controller.getGraph().layout();\n                }),\n                legend: true,\n                legendCallback: toggleLegend,\n              })}\n            />\n          )\n        }\n      >\n        <VisualizationSurface state={{ selectedIds }} />\n        {isLoading && <ContentLoading className=\"mesh-content-loader\" progress={progress} />}\n        {showLegend && <Legend />}\n      </TopologyView>\n    </VisualizationProvider>\n  );\n};\n","import React from 'react';\nimport { LockIcon } from '@patternfly/react-icons';\nimport { EmptyStateCustom } from './EmptyStateCustom';\n\nexport function EmptyStateUnauthorized(props: {\n  adminMessage?: string;\n  loginLink?: React.ReactNode;\n  title?: string;\n}) {\n  const defaultAdminMessage = 'Contact your organization administrator for more information.';\n  const defaultTitle = 'You do not have access';\n\n  const { adminMessage, loginLink, title } = props;\n\n  return (\n    <EmptyStateCustom\n      icon={LockIcon}\n      title={title || defaultTitle}\n      description={\n        <>\n          {adminMessage || defaultAdminMessage}\n          <br />\n          <br />\n          {loginLink}\n        </>\n      }\n    />\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { PageHeader, PageLayout } from '../../../../framework';\nimport { useGet } from '../../../common/crud/useGet';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { useAwxConfig } from '../../common/useAwxConfig';\nimport { useGetDocsUrl } from '../../common/util/useGetDocsUrl';\nimport { MeshVisualizer } from '../../interfaces/MeshVisualizer';\nimport { TopologyViewLayer } from './Visualizer';\nimport { EmptyStateUnauthorized } from '../../../../framework/components/EmptyStateUnauthorized';\nimport { EmptyStateError } from '../../../../framework/components/EmptyStateError';\n\nexport function Topology() {\n  const { t } = useTranslation();\n  const config = useAwxConfig();\n\n  const { data, error } = useGet<MeshVisualizer>(awxAPI`/mesh_visualizer/`, undefined, {\n    errorRetryCount: 0,\n  });\n\n  const isUnauthorized = (error as Error & { statusCode?: number })?.statusCode === 403;\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Topology View')}\n        description={t(\n          'View node type, node health, and specific details about each node in your mesh topology.'\n        )}\n        titleHelpTitle={t('Topology View')}\n        titleHelp={t(\n          'View node type, node health, and specific details about each node in your mesh topology.'\n        )}\n        titleDocLink={useGetDocsUrl(config, 'topology')}\n      />\n      {isUnauthorized ? (\n        <EmptyStateUnauthorized title={t('You do not have permission to perform this action.')} />\n      ) : error ? (\n        <EmptyStateError />\n      ) : (\n        data && <TopologyViewLayer mesh={data} />\n      )}\n    </PageLayout>\n  );\n}\n","import React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { EmptyStateCustom } from './EmptyStateCustom';\n\nexport function EmptyStateFilter(props: {\n  button?: string;\n  clearAllFilters?: () => void;\n  description?: string;\n  title?: string;\n}) {\n  const { button, clearAllFilters, description, title } = props;\n\n  const defaultButton = 'Clear all filters';\n  const defaultDescription =\n    'No results match the filter criteria. Try changing your filter settings.';\n  const defaultTitle = 'No results found';\n\n  return (\n    <EmptyStateCustom\n      title={title || defaultTitle}\n      description={description || defaultDescription}\n      icon={SearchIcon}\n      button={\n        clearAllFilters ? (\n          <Button onClick={clearAllFilters} variant=\"link\">\n            {button || defaultButton}\n          </Button>\n        ) : undefined\n      }\n    />\n  );\n}\n","import { ChartLegendEntry } from '@ansible/react-json-chart-builder';\n\nexport enum ApiType {\n  nonGrouped = 'nonGrouped',\n  grouped = 'grouped',\n}\n\nexport interface NonGroupedApi {\n  type?: ApiType.nonGrouped;\n  items: ChartLegendEntry[] | undefined;\n  meta?: {\n    legend: ChartLegendEntry[] | undefined;\n    count: number;\n  };\n}\n\nexport interface GroupedApi {\n  type?: ApiType.grouped;\n  dates: {\n    date: string;\n    items: ChartLegendEntry[] | undefined;\n  }[];\n  meta: {\n    legend: ChartLegendEntry[];\n    count: number;\n  };\n}\n\nexport type ApiReturnType = NonGroupedApi | GroupedApi;\n","import { ChartData, ChartDataSerie } from '@ansible/react-json-chart-builder';\nimport { v4 } from 'uuid';\nimport { ApiReturnType, ApiType, GroupedApi } from './types';\n\nexport const convertGroupedByData = (data: GroupedApi): ChartDataSerie[] => {\n  const { dates } = data;\n  const items: ChartDataSerie[] = [];\n  dates.forEach((el) => {\n    // Add items to the correct serie\n    el?.items?.forEach((item, idx) => {\n      if (!items[idx]) {\n        items[idx] = {\n          serie: [],\n          hidden: false,\n          name: v4(),\n        };\n      }\n      items[idx].serie.push({\n        created_date: el.date,\n        ...item,\n      });\n    });\n  });\n  return items;\n};\n\nexport const convertApiToData = (result: ApiReturnType): ChartData => {\n  const data: ChartData = {\n    series: [],\n    legend: [],\n  };\n\n  if ('dates' in result) {\n    result.type = ApiType.grouped;\n  } else {\n    result.type = ApiType.nonGrouped;\n  }\n\n  switch (result.type) {\n    case ApiType.grouped:\n      data.series = convertGroupedByData(result);\n      break;\n    case ApiType.nonGrouped:\n      data.series = [\n        {\n          serie: result.items || result.meta?.legend || [],\n          hidden: false,\n          name: v4(),\n        },\n      ];\n      break;\n  }\n\n  if (result.meta?.legend) {\n    data.legend = result.meta.legend.map((item) => {\n      const s = data.series.find(({ serie }) => {\n        return serie.find(({ id: serieId }) => serieId === item.id);\n      });\n      return {\n        ...item,\n        childName: s && s.name ? s.name : '',\n      };\n    });\n  }\n\n  return data;\n};\n","/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\nimport ChartBuilder, {\n  ChartData,\n  ChartFunctions,\n  ChartSchemaElement,\n  functions,\n} from '@ansible/react-json-chart-builder';\nimport { ChartDataSerie } from '@ansible/react-json-chart-builder/dist/cjs';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { FC, useEffect, useState } from 'react';\nimport { AnyType } from '../../AnalyticsReportBuilder/AnalyticsReportBuilder';\nimport { convertApiToData } from './convertApi';\nimport { ApiReturnType } from './types';\n\ninterface Props {\n  schema: ChartSchemaElement[];\n  data: ApiReturnType;\n  specificFunctions?: ChartFunctions;\n  namespace?: string;\n}\n\ninterface Props {\n  x?: number;\n  y?: number;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n}\n// eslint-disable-next-line react/prop-types\nconst CustomPoint: FC<Props> = ({ x, y, disableInlineStyles, ...props }) => {\n  return x !== undefined && y !== undefined ? (\n    // eslint-disable-next-line react/prop-types\n    <ExclamationCircleIcon x={x - 8} y={y - 8} {...props} {...props.events}></ExclamationCircleIcon>\n  ) : null;\n};\n\nexport const customFunctions = (specificFunctions?: ChartFunctions) => {\n  return {\n    ...functions,\n    axisFormat: {\n      ...functions.axisFormat,\n      formatAsYear: (tick: string | number) =>\n        Intl.DateTimeFormat('en', { year: 'numeric' }).format(new Date(tick)),\n      formatAsMonth: (tick: string | number) =>\n        Intl.DateTimeFormat('en', { month: 'long' }).format(new Date(tick)),\n      ...specificFunctions?.axisFormat,\n    },\n    labelFormat: {\n      ...functions.labelFormat,\n      ...specificFunctions?.labelFormat,\n    },\n    onClick: {\n      ...functions.onClick,\n      ...specificFunctions?.onClick,\n    },\n    dataComponent: {\n      scatterPlot: CustomPoint,\n    },\n  };\n};\n\nconst applyHiddenFilter = (chartData: ChartData, chartSeriesHidden: string[] = []): ChartData => ({\n  ...chartData,\n  series: chartData.series.map((series: ChartDataSerie) => ({\n    ...series,\n    hidden:\n      (!!series.serie[0].id || !!series.serie[0].host_id) &&\n      !!chartSeriesHidden.includes(\n        Object.prototype.hasOwnProperty.call(series.serie[0], 'host_id').toString() ||\n          Object.prototype.hasOwnProperty.call(series.serie[0], 'id').toString()\n      ),\n  })),\n});\n\nexport const Chart: FC<Props> = ({ schema, data, specificFunctions }) => {\n  const chartSeriesHiddenProps: string[] = [];\n\n  const [chartData, setChartData] = useState<ChartData>({\n    series: [],\n    legend: [],\n  });\n  const setChartDataHook = (newChartData: ChartData) => {\n    setChartData(newChartData);\n  };\n\n  useEffect(() => {\n    setChartData(applyHiddenFilter(convertApiToData(data), chartSeriesHiddenProps));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n\n  return (\n    <ChartBuilder\n      schema={schema as AnyType}\n      functions={{\n        ...customFunctions(specificFunctions),\n      }}\n      dataState={[chartData, setChartDataHook]}\n    />\n  );\n};\n","import { ChartSchemaElement, ChartType } from '@ansible/react-json-chart-builder';\nimport { AttributeType } from '../Toolbar/types';\n/**\n * I have strong hunch that you can use one function to hydrate\n * the schema and return a plain function with the hydrated schema\n * which can be used. This would optimize the code much more, since\n * we would not neet to run JSON stringify and parse + replace\n * mthods all the time. However the slowdown is pretty small,\n * so I left it as is for now.\n *\n * @param schema The stringified version of the schema.\n * @returns The hidrated schema with passed variables.\n */\nexport const hydrateSchema =\n  (schema: ChartSchemaElement[]) =>\n  (props: {\n    label?: string;\n    y?: string;\n    xTickFormat?: string;\n    chartType?: ChartType;\n    tooltip: string;\n    field: AttributeType;\n  }) => {\n    if (!props) {\n      return schema;\n    }\n    let hydratedSchema = JSON.stringify(schema);\n    Object.entries(props).forEach((arr) => {\n      const regVar = new RegExp(`VAR_${arr[0]}`, 'g');\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      hydratedSchema = hydratedSchema.replace(regVar, `${arr[1]}`);\n    });\n\n    return JSON.parse(hydratedSchema) as ChartSchemaElement[];\n  };\n","export const currencyFormatter = (n: number): string => {\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  });\n\n  return formatter.format(n); /* $2,500.00 */\n};\n","import {\n  Button,\n  ButtonVariant,\n  CodeBlock,\n  CodeBlockCode,\n  Modal,\n  ModalVariant,\n} from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { FunctionComponent, useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nconst SavingsPerTemplateText: FunctionComponent<Record<string, never>> = () => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <p>\n        <strong>{t('Savings per template')}</strong>\n      </p>\n      <p>\n        <Trans>\n          Savings per template is the difference between the manual cost and automation cost of\n          successfully running templates across hosts. Manual cost is calculated by multiplying the\n          number of hours spent manually running templates across hosts by the average hourly wages\n          per engineer. Automation cost is the total amount of time, in seconds, spent running\n          templates automatically multiplied by the average monthly cost for automated processes.\n        </Trans>\n      </p>\n      <br />\n      <p>{t('The formula used to calculate manual cost:')}</p>\n      <CodeBlock>\n        <CodeBlockCode>\n          {t(\n            'manual time  = configurable time (in minutes) to manually complete the task on one host * number of host runs manual cost = manual time * configurable manual cost of automation (e.g. average salary of mid-level Software Engineer)'\n          )}\n        </CodeBlockCode>\n      </CodeBlock>\n      <br />\n\n      <p>{t('The formula used to calculate automation cost:')}</p>\n      <CodeBlock>\n        <CodeBlockCode>\n          {t(\n            'automation time = successful elapsed total / 3600 automation cost = automation time * configurable automated process cost'\n          )}\n        </CodeBlockCode>\n      </CodeBlock>\n      <br />\n\n      <p>{t('The formula used to calculate automation cost:')}</p>\n      <CodeBlock>\n        <CodeBlockCode>{t(`savings per template = manual cost - automation cost`)}</CodeBlockCode>\n      </CodeBlock>\n      <br />\n    </>\n  );\n};\n\nconst FailedHostPerTemplateText: FunctionComponent<Record<string, never>> = () => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <p>\n        <strong>{t('Failed hosts cost per template')}</strong>\n      </p>\n      <p>\n        <Trans>\n          Failed hosts cost per template is the total amount of time spent on failed automated job\n          runs multiplied by the configured automated process cost.\n        </Trans>\n      </p>\n      <br />\n      <p>{t('The formula used to calculate failed host cost per template:')}</p>\n      <CodeBlock>\n        <CodeBlockCode>\n          {t(\n            'failed cost per template = (failed elapsed total / 3600) * configurable automated process cost'\n          )}\n        </CodeBlockCode>\n      </CodeBlock>\n      <br />\n    </>\n  );\n};\n\nconst MonetaryGainPerTemplateText: FunctionComponent<Record<string, never>> = () => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <p>\n        <strong>{t('Monetary gain per template')}</strong>\n      </p>\n      <p>\n        <Trans>\n          Monetary gain per template is the difference between total savings per template and failed\n          hosts cost per template.\n        </Trans>\n      </p>\n      <br />\n      <p>{t('The formula for monetary gain per template:')}</p>\n      <CodeBlock>\n        <CodeBlockCode>\n          {t(`monetary gain per template = savings per template - failed host cost per template`)}\n        </CodeBlockCode>\n      </CodeBlock>\n      <br />\n    </>\n  );\n};\n\nexport const AutomationFormula: FunctionComponent<Record<string, never>> = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <Button\n        variant={ButtonVariant.link}\n        onClick={() => setIsOpen(true)}\n        icon={<InfoCircleIcon />}\n        data-cy={'automation_formula_button'}\n      >\n        {t('Automation formula')}\n      </Button>\n      <Modal\n        title={t('Automation formula')}\n        data-cy={'automation_formula_modal'}\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        variant={ModalVariant.medium}\n        actions={[\n          <Button\n            key=\"cancel\"\n            variant={ButtonVariant.primary}\n            onClick={() => setIsOpen(false)}\n            data-cy={'automation_formula_cancel_button'}\n          >\n            {t('Close')}\n          </Button>,\n        ]}\n      >\n        <p>\n          <Trans>\n            We use manual effort versus time spent on automation as factors to create formulas for\n            cost and savings related to automation. While we aim to provide as accurate an account\n            of the cost and savings as possible, actual values may differ in practice. The following\n            information breaks down where we get the data, the factors we use, the assumptions we\n            make, and the formula used to compute the values as displayed in the chart.\n          </Trans>\n        </p>\n        <br />\n\n        <SavingsPerTemplateText />\n        <br />\n\n        <FailedHostPerTemplateText />\n        <br />\n\n        <MonetaryGainPerTemplateText />\n      </Modal>\n    </>\n  );\n};\n","import { FunctionComponent } from 'react';\n\nimport {\n  Card,\n  CardBody,\n  InputGroupText,\n  InputGroup as PFInputGroup,\n  TextInput,\n} from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\n\nconst InputGroup = styled(PFInputGroup)`\n  width: 170px;\n`;\n\nconst validFloat = (value: number): number => (+value && +value < 0 ? NaN : value);\n\ninterface Props {\n  costManual: number;\n  setFromCalculation: (varName: string, value: number) => void;\n  costAutomation: number;\n  readOnly: boolean;\n}\n\nexport const CalculationCost: FunctionComponent<Props> = ({\n  costManual = 0,\n  setFromCalculation = () => ({}),\n  costAutomation = 0,\n  readOnly = true,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <Card isPlain isCompact>\n      <CardBody>\n        <p>\n          {t('Manual cost of automation')}\n          <span\n            style={{\n              // color: 'var(--pf-v5-global--Color--dark-200)',\n              fontSize: '0.8em',\n              display: 'block',\n            }}\n          >\n            {t('(e.g. average salary of mid-level Software Engineer)')}\n          </span>\n        </p>\n        <InputGroup>\n          <InputGroupText>\n            <DollarSignIcon />\n          </InputGroupText>\n          <TextInput\n            id=\"manual-cost\"\n            key=\"manual-cost\"\n            type=\"number\"\n            aria-label=\"manual-cost\"\n            value={isNaN(costManual) ? '' : costManual.toString()}\n            onChange={(e) => setFromCalculation('manual_cost', validFloat(+e))}\n            isDisabled={readOnly}\n          />\n        </InputGroup>\n        <p style={{ paddingTop: '10px' }}>{t('Automated process cost')}</p>\n        <InputGroup>\n          <InputGroupText>\n            <DollarSignIcon />\n          </InputGroupText>\n          <TextInput\n            id=\"automation-cost\"\n            key=\"automation-cost\"\n            type=\"number\"\n            aria-label=\"automation-cost\"\n            value={isNaN(costAutomation) ? '' : costAutomation.toString()}\n            onChange={(e) => setFromCalculation('automation_cost', validFloat(+e))}\n            isDisabled={readOnly}\n          />\n        </InputGroup>\n      </CardBody>\n    </Card>\n  );\n};\n","import { Button } from '@patternfly/react-core';\nimport { KeyIcon, MonitoringIcon } from '@patternfly/react-icons';\nimport { ReactElement } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { EmptyStateCustom } from '../../../../framework/components/EmptyStateCustom';\nimport { EmptyStateError } from '../../../../framework/components/EmptyStateError';\nimport { useAwxActiveUser } from '../../common/useAwxActiveUser';\n\nexport function AnalyticsErrorState(props: { error?: string }) {\n  const { t } = useTranslation();\n  const { activeAwxUser } = useAwxActiveUser();\n  const { error } = props;\n\n  interface errorTextsType {\n    title: string;\n    description: string;\n    button?: ReactElement;\n  }\n\n  const errorTexts: Record<string, errorTextsType> = {\n    'analytics-upload-not-enabled': {\n      title: t('Missing Gather data for Automation Analytics.'),\n      description: t(\n        \"Please contact your organization's administrator to enable Gather data for Automation Analytics.\"\n      ),\n    },\n    'missing-user': {\n      title: t('Missing User for Automation Analytics.'),\n      description: t(\n        \"Please contact your organization's administrator to add User for Automation Analytics.\"\n      ),\n    },\n    'missing-password': {\n      title: t('Missing Password for Automation Analytics.'),\n      description: t(\n        \"Please contact your organization's administrator to add Password for Automation Analytics.\"\n      ),\n    },\n    'missing-url': {\n      title: t('Missing URL for Automation Analytics.'),\n      description: t(\n        \"Please contact your organization's administrator to add URL for Automation Analytics.\"\n      ),\n    },\n    unauthorized: {\n      title: t('Missing Authentication for Automation Analytics.'),\n      description: t(\"Please contact your organization's administrator to add credentials.\"),\n    },\n    'no-data-or-entitlement': {\n      title: t(\"You have no entitlement available. Or there's no data.\"),\n      description: t(\"Please contact your organization's administrator to add entitlements.\"),\n    },\n    'not-found': {\n      title: t('Not Found'),\n      description: t('Not Found'),\n    },\n    unknown: {\n      title: t('There was an error on the server.'),\n      description: t(\"Please contact your organization's administrator.\"),\n    },\n  };\n\n  function ErrorState(propsState: { error: string }) {\n    const { error: errorState } = propsState;\n    if (errorState && errorTexts[errorState]) {\n      return (\n        <EmptyStateCustom\n          title={errorTexts[errorState]?.title}\n          description={errorTexts[errorState]?.description}\n          icon={KeyIcon}\n          button={errorTexts[errorState]?.button}\n        />\n      );\n    }\n    return <EmptyStateError />;\n  }\n  function DisabledState() {\n    return (\n      <>\n        <EmptyStateCustom\n          title={t('Automation Analytics is currently not enabled to send data.')}\n          description={\n            activeAwxUser?.is_superuser\n              ? t(\n                  'Please click the button below to visit the settings page to set your credentials.'\n                )\n              : t(\"Please contact your organization's administrator to add credentials.\")\n          }\n          icon={MonitoringIcon}\n          button={\n            activeAwxUser?.is_superuser ? (\n              <Button onClick={() => null}>{t('Go to settings')}</Button>\n            ) : undefined\n          }\n          footNote={t(\n            'Gain insights into your deployments through visual dashboards and organization statistics, calculate your return on investment, explore automation processes details.'\n          )}\n        />\n      </>\n    );\n  }\n\n  return (activeAwxUser?.is_superuser || activeAwxUser?.is_system_auditor) && !!error ? (\n    <ErrorState error={error} />\n  ) : (\n    <DisabledState />\n  );\n}\n","export const numberFormatter = (n: number): string => {\n  const formatter = new Intl.NumberFormat('en-US', {\n    maximumSignificantDigits: 2,\n  });\n\n  return formatter.format(n);\n};\n","import { ChartLegendEntry } from '@ansible/react-json-chart-builder';\nimport {\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n} from '@patternfly/react-core';\nimport { ExpandableRowContent, Td } from '@patternfly/react-table';\nimport { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { currencyFormatter } from '../../utilities/currencyFormatter';\n\ninterface Props {\n  template: ChartLegendEntry;\n}\n\nexport const ExpandedRowContents: FunctionComponent<Props> = ({ template }) => {\n  const { t } = useTranslation();\n  return (\n    <Td colSpan={5}>\n      <ExpandableRowContent>\n        <DescriptionList columnModifier={{ default: '3Col' }}>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t('Elapsed')}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {t(`${template.elapsed} seconds`)}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t('Host count')}</DescriptionListTerm>\n            <DescriptionListDescription>{template.host_count}</DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t('Total count')}</DescriptionListTerm>\n            <DescriptionListDescription>{template.total_count}</DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t('Total org count')}</DescriptionListTerm>\n            <DescriptionListDescription>{template.total_org_count}</DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t('Total cluster count')}</DescriptionListTerm>\n            <DescriptionListDescription>{template.total_cluster_count}</DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t('Total inventory count')}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {template.total_inventory_count}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t('Template success rate')}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {parseInt(template.template_success_rate.toString()).toFixed(2)}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t('Savings from successful hosts')}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {currencyFormatter(parseInt(template.successful_hosts_savings.toString()))}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t('Costs from failed hosts')}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {currencyFormatter(parseInt(template.failed_hosts_costs.toString()))}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t('Monetary gain')}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {template?.monetary_gain\n                ? currencyFormatter(parseInt(template.monetary_gain.toString()))\n                : ''}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n        </DescriptionList>\n      </ExpandableRowContent>\n    </Td>\n  );\n};\n","import { ChartLegendEntry } from '@ansible/react-json-chart-builder';\nimport {\n  InputGroup,\n  InputGroupItem,\n  InputGroupText,\n  Switch,\n  TextInput,\n} from '@patternfly/react-core';\nimport { Td, Tr } from '@patternfly/react-table';\nimport {\n  global_disabled_color_200 as globalDisabledColor200,\n  global_success_color_200 as globalSuccessColor200,\n} from '@patternfly/react-tokens';\nimport { FunctionComponent, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { currencyFormatter } from '../../utilities/currencyFormatter';\nimport { numberFormatter } from '../../utilities/numberFormatter';\nimport { ExpandedRowContents } from './ExpandedRowContents';\n\ninterface Props {\n  template: ChartLegendEntry;\n  readOnly: boolean;\n  variableRow: { key: string; value: string };\n}\n\nexport const Row: FunctionComponent<Props> = ({ template, readOnly = true, variableRow }) => {\n  const [isExpanded, setIsExpanded] = useState(\n    window.localStorage.getItem(template.id.toString()) === 'true' || false\n  );\n  const expandedRow = (value: boolean, id: number) => {\n    window.localStorage.setItem(id.toString(), value ? 'true' : 'false');\n    setIsExpanded(value);\n  };\n  const { t } = useTranslation();\n\n  const setLabeledValue = (key: string, value: number): string => {\n    let label;\n    switch (key) {\n      case 'elapsed':\n        label = numberFormatter(value) + ' seconds';\n        break;\n      case 'template_automation_percentage':\n        label = numberFormatter(value) + '%';\n        break;\n      case 'successful_hosts_savings':\n      case 'failed_hosts_costs':\n      case 'monetary_gain':\n        label = currencyFormatter(value);\n        break;\n      default:\n        label = (+value).toFixed(2);\n    }\n    return label;\n  };\n\n  return (\n    <>\n      <Tr>\n        <Td\n          expand={{\n            rowIndex: parseInt(template.id.toString()),\n            isExpanded: isExpanded,\n            onToggle: () => expandedRow(!isExpanded, parseInt(template.id.toString())),\n          }}\n        />\n        <Td>{template.name}</Td>\n        {variableRow && <Td>{setLabeledValue(variableRow.key, +template[variableRow.key])}</Td>}\n        <Td>\n          <InputGroup>\n            <InputGroupItem isFill>\n              <TextInput\n                autoFocus={\n                  window.localStorage.getItem('focused') === 'manual-time-' + template.id.toString()\n                }\n                id={'manual-time-' + template.id.toString()}\n                data-cy={'manual-time'}\n                style={{ maxWidth: '150px' }}\n                type=\"number\"\n                aria-label=\"time run manually\"\n                value={template.manual_effort_minutes || 60}\n                onBlur={() => window.localStorage.setItem('focused', '')}\n                isDisabled={readOnly}\n              />\n            </InputGroupItem>\n            <InputGroupText>{t('min')}</InputGroupText>\n            <InputGroupText>{t(`x ${template.successful_hosts_total} host runs`)}</InputGroupText>\n          </InputGroup>\n        </Td>\n        <Td\n          data-cy={'savings'}\n          style={{\n            color: template.enabled ? globalSuccessColor200.value : globalDisabledColor200.value,\n          }}\n        >\n          {currencyFormatter(parseInt(template.monetary_gain.toString()) || 0)}\n        </Td>\n        <Td>\n          <Switch\n            label={t('Show')}\n            labelOff={t('Hide')}\n            isChecked={!!template.enabled}\n            isDisabled={readOnly}\n          />\n        </Td>\n      </Tr>\n      <Tr isExpanded={isExpanded}>\n        <ExpandedRowContents template={template} />\n      </Tr>\n    </>\n  );\n};\n","import { ChartLegendEntry } from '@ansible/react-json-chart-builder';\nimport {\n  Table /* data-codemods */,\n  TableVariant,\n  Tbody,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Row } from './Row';\n\ninterface Props {\n  data: ChartLegendEntry[];\n  readOnly: boolean;\n  variableRow: { key: string; value: string };\n  getSortParams?: {\n    sort?: {\n      sortBy: {\n        index: number;\n        direction: 'asc' | 'desc';\n      };\n      onSort: (_event: unknown, index: number, direction: 'asc' | 'desc') => void;\n      columnIndex: number;\n    };\n  };\n}\n\nexport const TopTemplates: FunctionComponent<Props> = ({\n  data = [],\n  readOnly = true,\n  variableRow,\n  getSortParams,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Table data-cy={'table'} aria-label=\"ROI Table\" variant={TableVariant.compact}>\n      <Thead>\n        <Tr>\n          <Th />\n          <Th>{t('Name')}</Th>\n          {variableRow && <Th {...getSortParams}>{variableRow.value}</Th>}\n          <Th>{t('Manual time')}</Th>\n          <Th>{t('Savings')}</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {data.map((template) => (\n          <Row\n            key={template.id}\n            template={template}\n            readOnly={readOnly}\n            variableRow={variableRow}\n          />\n        ))}\n      </Tbody>\n    </Table>\n  );\n};\n","import { Card, CardBody, CardTitle, Spinner, Title } from '@patternfly/react-core';\nimport { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\nimport { currencyFormatter } from '../utilities/currencyFormatter';\n\ninterface Props {\n  totalSavings: number;\n  currentPageSavings: number;\n  isLoading: boolean;\n}\nconst SpinnerDiv = styled.div`\n  height: 46.8px;\n  padding-left: 100px;\n`;\n\nexport const TotalSavings: FunctionComponent<Props> = ({\n  totalSavings = 0,\n  currentPageSavings = 0,\n  isLoading = false,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      {[t('Total savings'), t('Current page savings')].map((title, index) => (\n        <Card\n          data-cy={title.toLowerCase().replace(' ', '_').replace(' ', '_')}\n          isPlain\n          isCompact\n          key={title}\n        >\n          <CardTitle>{title}</CardTitle>\n          <CardBody>\n            <Title\n              headingLevel=\"h3\"\n              size={index === 0 ? '4xl' : 'xl'}\n              style={{ color: 'var(--pf-v5-global--success-color--100)' }}\n            >\n              {isLoading ? (\n                <SpinnerDiv>\n                  <Spinner data-cy={'spinner'} size=\"lg\" />\n                </SpinnerDiv>\n              ) : (\n                currencyFormatter(index === 0 ? totalSavings : currentPageSavings)\n              )}\n            </Title>\n          </CardBody>\n        </Card>\n      ))}\n    </>\n  );\n};\n","import { ChartLegendEntry, ChartSchemaElement } from '@ansible/react-json-chart-builder';\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  Grid,\n  GridItem,\n  PageSection,\n  Pagination,\n  PaginationVariant,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { Dispatch, SetStateAction, useCallback, useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport useSWR from 'swr';\nimport {\n  IFilterState,\n  IToolbarFilter,\n  PageToolbar,\n  Scrollable,\n  ToolbarFilterType,\n} from '../../../../framework';\nimport { PageTableSortOption } from '../../../../framework/PageToolbar/PageToolbarSort';\nimport { EmptyStateFilter } from '../../../../framework/components/EmptyStateFilter';\nimport { LoadingState } from '../../../../framework/components/LoadingState';\nimport { useURLSearchParams } from '../../../../framework/components/useURLSearchParams';\nimport { postRequest as requestPost } from '../../../common/crud/Data';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { Chart } from '../components/Chart';\nimport { hydrateSchema } from '../components/Chart/hydrateSchema';\nimport { ApiOptionsType } from '../components/Toolbar/types';\nimport { currencyFormatter } from '../utilities/currencyFormatter';\nimport { AutomationFormula } from './AutomationFormula';\nimport { CalculationCost } from './CalculationCost';\nimport { AnalyticsErrorState } from './ErrorStates';\nimport { TopTemplates } from './TemplatesTable';\nimport { TotalSavings } from './TotalSavings';\n\nexport interface ReportDataResponse {\n  meta: {\n    count: number;\n    legend: ChartLegendEntry[];\n  };\n  monetary_gain_current_page: number;\n  monetary_gain_other_pages: number;\n  cost: {\n    hourly_manual_labor_cost: number;\n    hourly_automation_cost: number;\n  };\n}\n\nexport interface ParamsType {\n  status: string[];\n  org_id: string[];\n  cluster_id: string[];\n  template_id: string[];\n  inventory_id: string[];\n  quick_date_range: string;\n  job_type: string[];\n  sort_options: string;\n  sort_order: string;\n  start_date: string | undefined;\n  end_date: string | undefined;\n  limit: string;\n  offset: string;\n  only_root_workflows_and_standalone_jobs: boolean;\n  template_weigh_in: string[] | undefined;\n  attributes: string[];\n  group_by: string;\n  group_by_time: boolean;\n}\n\nexport function AutomationCalculator(props: { schema: ChartSchemaElement[] }) {\n  const { t } = useTranslation();\n  const [searchParams] = useURLSearchParams();\n\n  const { schema } = props;\n\n  const {\n    data: options,\n    isLoading,\n    error,\n  } = useSWR<ApiOptionsType, Error>(awxAPI`/analytics/roi_templates_options/`, (url: string) =>\n    requestPost<ApiOptionsType, unknown>(url, undefined)\n  );\n\n  const keyFn = useCallback(() => {\n    return '';\n  }, []);\n\n  const [filterState, setFilterState] = useState<IFilterState>(() => {\n    const filterState: IFilterState = {};\n    const filterKeys = [\n      { key: 'cluster_id', searchParam: 'clusters' },\n      { key: 'org_id', searchParam: 'orgs' },\n      { key: 'template_id', searchParam: 'templates' },\n      { key: 'inventory_id', searchParam: 'inventories' },\n      { key: 'quick_date_range', searchParam: 'dates' },\n    ];\n    for (const filterKey of filterKeys) {\n      const value = searchParams.get(filterKey.searchParam);\n      if (value) {\n        filterState[filterKey.key] = value.split(',');\n      }\n    }\n    return filterState;\n  });\n\n  const toolbarFilters = useMemo(() => {\n    const toolbarFilters: IToolbarFilter[] = [];\n    if (options) {\n      if (options.cluster_id && options.cluster_id.length > 0) {\n        toolbarFilters.push({\n          key: 'cluster_id',\n          query: 'cluster_id',\n          type: ToolbarFilterType.MultiSelect,\n          label: t('Cluster'),\n          placeholder: t('Filter by Cluster'),\n          options: options.cluster_id.map((option) => ({\n            label: option.value.toString(),\n            value: option.key.toString(),\n          })),\n        });\n      }\n      if (options.org_id && options.org_id.length > 0) {\n        toolbarFilters.push({\n          key: 'org_id',\n          query: 'org_id',\n          type: ToolbarFilterType.MultiSelect,\n          label: t('Organization'),\n          placeholder: t('Filter by Organization'),\n          options: options.org_id.map((option) => ({\n            label: option.value.toString(),\n            value: option.key.toString(),\n          })),\n        });\n      }\n      if (options.template_id && options.template_id.length > 0) {\n        toolbarFilters.push({\n          key: 'template_id',\n          query: 'template_id',\n          type: ToolbarFilterType.MultiSelect,\n          label: t('Template'),\n          placeholder: t('Filter by Template'),\n          options: options.template_id.map((option) => ({\n            label: option.value.toString(),\n            value: option.key.toString(),\n          })),\n        });\n      }\n      if (options.inventory_id && options.inventory_id.length > 0) {\n        toolbarFilters.push({\n          key: 'inventory_id',\n          query: 'inventory_id',\n          type: ToolbarFilterType.MultiSelect,\n          label: t('Inventory'),\n          placeholder: t('Filter by Inventory'),\n          options: options.inventory_id.map((option) => ({\n            label: option.value.toString(),\n            value: option.key.toString(),\n          })),\n        });\n      }\n      if (options.quick_date_range && options.quick_date_range.length > 0) {\n        toolbarFilters.push({\n          key: 'quick_date_range',\n          query: 'quick_date_range',\n          type: ToolbarFilterType.DateRange,\n          label: t('Dates'),\n          options: options.quick_date_range.map((option) => ({\n            label: option.value.toString(),\n            value: option.key.toString(),\n            isCustom: option.key === 'roi_custom',\n          })),\n          isRequired: true,\n          isPinned: true,\n        });\n      }\n    }\n    return toolbarFilters;\n  }, [options, t]);\n\n  const [sort, setSort] = useState<string>(() => {\n    let sort = searchParams.get('sort');\n    if (sort) {\n      if (sort?.startsWith('-')) sort = sort.substring(1);\n      return sort;\n    }\n    return 'host_count';\n  });\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>(() => {\n    const sort = searchParams.get('sort');\n    if (sort) {\n      if (sort?.startsWith('-')) return 'asc';\n      return 'desc';\n    }\n    return 'desc';\n  });\n  const sortOptions = useMemo<PageTableSortOption[]>(() => {\n    if (options) {\n      return options.sort_options.map((option) => ({\n        label: option.value.toString(),\n        value: option.key.toString(),\n        type: 'number',\n        defaultDirection: 'desc',\n      }));\n    }\n    return [];\n  }, [options]);\n\n  const sortOption = useMemo(\n    () => sortOptions.find((option) => option.value === sort),\n    [sort, sortOptions]\n  );\n\n  if (isLoading) {\n    return <LoadingState />;\n  } else if (error) {\n    return <AnalyticsErrorState error={error.message} />;\n  }\n\n  if (!sortOption) {\n    return <LoadingState />;\n  }\n\n  return (\n    <>\n      <PageToolbar\n        keyFn={keyFn}\n        itemCount={0}\n        toolbarFilters={toolbarFilters}\n        filterState={filterState}\n        setFilterState={setFilterState}\n        sortOptions={sortOptions}\n        sort={sort}\n        setSort={setSort}\n        sortDirection={sortDirection}\n        setSortDirection={setSortDirection}\n        disablePagination\n      />\n      <AutomationCalculatorInternal\n        schema={schema}\n        filterState={filterState}\n        setFilterState={setFilterState}\n        sortOption={sortOption}\n        sortDirection={sortDirection}\n        setSortDirection={setSortDirection}\n      />\n    </>\n  );\n}\n\nexport function AutomationCalculatorInternal(props: {\n  schema: ChartSchemaElement[];\n  filterState: IFilterState;\n  setFilterState: Dispatch<SetStateAction<IFilterState>>;\n  sortOption: SortOption;\n  sortDirection: 'asc' | 'desc';\n  setSortDirection: Dispatch<SetStateAction<'asc' | 'desc'>>;\n}) {\n  const { t } = useTranslation();\n  const {\n    schema,\n    filterState,\n    setFilterState,\n    sortOption,\n    sortDirection: sortOrder,\n    setSortDirection: setSortOrder,\n  } = props;\n\n  const [searchParams, setSearchParams] = useURLSearchParams();\n\n  const [page, setPage] = useState<number>(() =>\n    searchParams.get('page') ? parseInt(searchParams.get('page') as string) : 1\n  );\n  const [perPage, setPerPage] = useState<number>(() =>\n    searchParams.get('per_page') ? parseInt(searchParams.get('per_page') as string) : 10\n  );\n\n  useEffect(() => {\n    const params = new URLSearchParams();\n    if (sortOption) {\n      if (sortOrder === 'desc') {\n        params.set('sort', sortOption.value);\n      } else {\n        params.set('sort', '-' + sortOption.value);\n      }\n    }\n    params.set('page', page.toString());\n    params.set('per_page', perPage.toString());\n    if (filterState) {\n      if (filterState.org_id) {\n        params.set('orgs', filterState.org_id.join(','));\n      }\n      if (filterState.cluster_id) {\n        params.set('clusters', filterState.cluster_id.join(','));\n      }\n      if (filterState.template_id) {\n        params.set('templates', filterState.template_id.join(','));\n      }\n      if (filterState.inventory_id) {\n        params.set('inventories', filterState.inventory_id.join(','));\n      }\n      if (filterState.quick_date_range) {\n        params.set('dates', filterState.quick_date_range.join(','));\n      }\n    }\n    setSearchParams(params);\n  }, [filterState, page, perPage, setSearchParams, sortOption, sortOrder]);\n\n  const requestBody = useMemo(() => {\n    const dateRange = filterState.quick_date_range;\n    let start_date: string | undefined = undefined;\n    let end_date: string | undefined = undefined;\n    if (dateRange) {\n      if (dateRange.length >= 2) {\n        start_date = dateRange[1];\n      }\n      if (dateRange.length >= 3) {\n        end_date = dateRange[2];\n      }\n    }\n    return {\n      status: [],\n      org_id: filterState.org_id ?? [],\n      cluster_id: filterState.cluster_id ?? [],\n      template_id: filterState.template_id ?? [],\n      inventory_id: filterState.inventory_id ?? [],\n      quick_date_range:\n        filterState.quick_date_range && filterState.quick_date_range.length\n          ? filterState.quick_date_range[0]\n          : 'roi_last_year',\n      job_type: [],\n      sort_options: sortOption.value,\n      sort_order: sortOrder,\n      start_date,\n      end_date,\n      limit: perPage.toString(),\n      offset: ((page - 1) * perPage).toString(),\n      only_root_workflows_and_standalone_jobs: true,\n      template_weigh_in: undefined,\n      attributes: [\n        'elapsed',\n        'host_count',\n        'total_count',\n        'total_org_count',\n        'total_cluster_count',\n        'successful_hosts_total',\n        'successful_elapsed_total',\n      ],\n      group_by: 'template',\n      group_by_time: false,\n    };\n  }, [filterState, page, perPage, sortOption.value, sortOrder]);\n\n  const [data, setData] = useState<ReportDataResponse>();\n  const [error, setError] = useState<Error>();\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  useEffect(() => {\n    const abortController = new AbortController();\n    setIsLoading(true);\n    requestPost<ReportDataResponse>(\n      awxAPI`/analytics/roi_templates/?limit=${perPage.toString()}&offset=${(\n        (page - 1) *\n        perPage\n      ).toString()}&sort_by=${sortOption?.value}:${encodeURIComponent(sortOrder)}`,\n      requestBody,\n      abortController.signal\n    )\n      .then((response) => {\n        if (abortController.signal.aborted) return;\n        setData(response);\n        setIsLoading(false);\n        setError(undefined);\n      })\n      .catch((err) => {\n        if (abortController.signal.aborted) return;\n        setError(err as Error);\n        setIsLoading(false);\n        setData(undefined);\n      });\n    return () => abortController.abort();\n  }, [page, perPage, sortOption?.value, sortOrder, requestBody]);\n\n  const formattedValue = (key: string, value: number) => {\n    let val;\n    switch (key) {\n      case 'elapsed':\n        val = value.toFixed(2) + ' seconds';\n        break;\n      case 'template_automation_percentage':\n        val = value.toFixed(2) + '%';\n        break;\n      case 'successful_hosts_savings':\n      case 'failed_hosts_costs':\n      case 'monetary_gain':\n        val = currencyFormatter(value);\n        break;\n      default:\n        val = value.toFixed(2);\n    }\n    return val;\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const customTooltipFormatting = ({ datum }: { datum: Record<string, any> }) => {\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    const tooltip = `${sortOption.label} for ${datum.name || ''}: ${\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      formattedValue(sortOption.value, datum.y) || ''\n    }`;\n    return tooltip;\n  };\n\n  const renderLeft = () => (\n    <Card isPlain>\n      <CardHeader>\n        <CardTitle>{t('Automation savings')}</CardTitle>\n      </CardHeader>\n      {!data || data?.meta?.legend.length === 0 ? (\n        <EmptyStateFilter\n          clearAllFilters={() => setFilterState(() => ({ quick_date_range: ['roi_last_year'] }))}\n        />\n      ) : (\n        <Chart\n          schema={hydrateSchema(schema)({\n            y: sortOption.value,\n            tooltip: 'Savings for',\n            field: sortOption.value,\n            label: sortOption.label,\n          })}\n          data={{ items: data?.meta?.legend }}\n          specificFunctions={{ labelFormat: { customTooltipFormatting } }}\n        />\n      )}\n    </Card>\n  );\n\n  const renderRight = () => (\n    <Stack>\n      <StackItem>\n        <TotalSavings\n          totalSavings={\n            (data?.monetary_gain_other_pages || 0) + (data?.monetary_gain_current_page || 0)\n          }\n          currentPageSavings={data?.monetary_gain_current_page || 0}\n          isLoading={isLoading}\n        />\n      </StackItem>\n      <StackItem>\n        <CalculationCost\n          costManual={data?.cost.hourly_manual_labor_cost || 0}\n          setFromCalculation={() => null}\n          costAutomation={data?.cost.hourly_automation_cost || 0}\n          readOnly={true}\n        />\n      </StackItem>\n      <StackItem>\n        <AutomationFormula />\n      </StackItem>\n    </Stack>\n  );\n\n  // If page out of range, set to first page\n  useEffect(() => {\n    const totalCount = data?.meta.count ?? 0;\n    const pageCount = Math.min(1, Math.ceil(totalCount / perPage));\n    if (page > pageCount || page < 1) {\n      setPage(1);\n    }\n  }, [data?.meta.count, page, perPage]);\n\n  if (isLoading) {\n    return (\n      <Scrollable borderTop borderBottom>\n        <PageSection>\n          <Card style={{ height: '100%' }} isFlat isRounded>\n            <LoadingState />\n          </Card>\n        </PageSection>\n      </Scrollable>\n    );\n  } else if (error) {\n    return <AnalyticsErrorState error={error.message} />;\n  }\n\n  return (\n    <>\n      <Scrollable borderTop borderBottom>\n        <PageSection>\n          <Card isFlat isRounded>\n            <CardBody>\n              <Grid hasGutter>\n                <GridItem span={9}>{!isLoading && renderLeft()}</GridItem>\n                <GridItem span={3}>{!isLoading && renderRight()}</GridItem>\n              </Grid>\n            </CardBody>\n            <TopTemplates\n              data={data?.meta.legend || []}\n              variableRow={{ key: sortOption.value, value: sortOption.label }}\n              readOnly={true}\n              getSortParams={{\n                sort: {\n                  sortBy: {\n                    index: 1,\n                    direction: sortOrder,\n                  },\n                  onSort: (_event, _index, direction) => setSortOrder(direction),\n                  columnIndex: 1,\n                },\n              }}\n            />\n          </Card>\n        </PageSection>\n      </Scrollable>\n      <Pagination\n        itemCount={data?.meta.count}\n        page={page}\n        perPage={perPage}\n        perPageOptions={perPageOptions}\n        onPerPageSelect={(_e, perPage: number) => setPerPage(perPage)}\n        onSetPage={(_e, page: number) => setPage(page)}\n        variant={PaginationVariant.bottom}\n      />\n    </>\n  );\n}\n\ninterface SortOption {\n  label: string;\n  value: string;\n}\n\nconst perPageOptions = [4, 6, 8, 10, 15, 20, 25].map((value) => ({\n  title: value.toString(),\n  value,\n}));\n","import { Tag } from './types';\n\nexport enum TagName {\n  operations = 'Operations',\n  executive = 'Executive',\n  subscription = 'Subscription',\n  migration = 'Migration',\n  controller = 'Controller',\n  catalog = 'Catalog',\n  automationHub = 'Automation Hub',\n  modules = 'Modules',\n  hosts = 'Hosts',\n  tasks = 'Tasks',\n  organization = 'Organization',\n  jobTemplate = 'Job template',\n  jobRuns = 'Job runs',\n  timeSeries = 'Time series',\n  performanceAnomalyDetection = 'Performance anomaly detection',\n  savings = 'Savings',\n}\n\nexport const TAGS: Tag[] = [\n  {\n    key: TagName.operations,\n    name: 'Operations',\n    description:\n      'This report is useful to the engineers who manage day-to-day Ansible operations.  In other words, team members who write playbooks, do administration tasks within Controller, etc.',\n  },\n  {\n    key: TagName.executive,\n    name: 'Executive',\n    description:\n      'This report is useful to executives who want to monitor and learn about the Ansible operations happening across the company.',\n  },\n  {\n    key: TagName.subscription,\n    name: 'Subscription',\n    description:\n      'This report provides useful information around subscription data, helping you make decisions around compliance.',\n  },\n  {\n    key: TagName.migration,\n    name: 'Migration',\n    description:\n      'This report provides useful information around migrations, such as helping to identify what could be necessary to move to newer versions of the Ansible Automation Platform.',\n  },\n  {\n    key: TagName.controller,\n    name: 'Controller',\n    description: 'This report provides information gathered from Controller.',\n  },\n  {\n    key: TagName.catalog,\n    name: 'Catalog',\n    description: 'This report provides information gathered from Automation Services Catalog.',\n  },\n  {\n    key: TagName.automationHub,\n    name: 'Automation Hub',\n    description: 'This report provides information gathered from Automation Hub.',\n  },\n  {\n    key: TagName.modules,\n    name: 'Modules',\n    description:\n      'This report groups information by Ansible modules, the specific executable code ran in individual playbook or job template tasks.',\n  },\n  {\n    key: TagName.hosts,\n    name: 'Hosts',\n    description:\n      'This report groups information by the hosts within the Ansible inventories that are executed by playbooks or job templates.',\n  },\n  {\n    key: TagName.tasks,\n    name: 'Tasks',\n    description:\n      'This report groups information by the individual tasks that make up a playbook or job template.',\n  },\n  {\n    key: TagName.organization,\n    name: 'Organization',\n    description:\n      'This report groups information by the organizations set up within the company’s Ansible Controller instances.',\n  },\n  {\n    key: TagName.jobTemplate,\n    name: 'Job template',\n    description:\n      'This report groups information by the job templates set up within the company’s Ansible Controller instances.',\n  },\n  {\n    key: TagName.jobRuns,\n    name: 'Job runs',\n    description:\n      'This report groups information by the individual runs of playbooks or job templates.',\n  },\n  {\n    key: TagName.timeSeries,\n    name: 'Time series',\n    description:\n      'This report groups information for a specified time range and granularity, such as weekly (e.g., from the past 12 weeks) or monthly (e.g., between August and November).',\n  },\n  {\n    key: TagName.performanceAnomalyDetection,\n    name: 'Performance anomaly detection',\n    description:\n      'This report provides the ability to detect anomalies in Ansible performance, such as identifying slow tasks or hosts, or tasks with high error rates.',\n  },\n  {\n    key: TagName.savings,\n    name: 'Savings',\n    description:\n      'This report is useful for showing potential or actual savings based on Ansible usage.',\n  },\n];\n\nexport const perPageOptions = [\n  { title: '4', value: 4 },\n  { title: '6', value: 6 },\n  { title: '8', value: 8 },\n  { title: '10', value: 10 },\n];\n","import { ChartSchemaElement } from '@ansible/react-json-chart-builder';\nimport { Label, LabelGroup, Page, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport useSWR from 'swr';\nimport { PageHeader, PageLayout } from '../../../../framework';\nimport { requestGet } from '../../../common/crud/Data';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { useAwxActiveUser } from '../../common/useAwxActiveUser';\nimport { AutomationCalculator } from './AutomationCalculator';\nimport { AnalyticsErrorState } from './ErrorStates';\nimport { TAGS } from './constants';\n\nexport interface ReportItemsResponse {\n  report: {\n    name: string;\n    description: string;\n    layoutProps: {\n      schema: ChartSchemaElement[];\n      tags: unknown[];\n    };\n  };\n}\n\nexport function Reports() {\n  const { activeAwxUser } = useAwxActiveUser();\n  const { data, error } = useSWR<ReportItemsResponse, Error>(\n    awxAPI`/analytics/report/automation_calculator/`,\n    requestGet\n  );\n  const [specificError, setSpecificError] = useState<string>('');\n\n  useEffect(() => {\n    if (!error) {\n      setSpecificError('');\n    } else {\n      // @ts-expect-error: Cannot override type coming from useSWR\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument\n      setSpecificError(error?.body?.error?.keyword || 'unknown');\n    }\n  }, [error]);\n\n  function ReportsInternal() {\n    if (error || specificError) {\n      return specificError ? <AnalyticsErrorState error={specificError} /> : <></>;\n    } else {\n      return data ? <AutomationCalculator {...data.report?.layoutProps} /> : <></>;\n    }\n  }\n\n  const reportTags = (\n    <ReportTagsLabelGroup numLabels={6}>\n      {!!data &&\n        data.report.layoutProps.tags.map((tagKey, idx) => {\n          const tag = TAGS.find((t) => t.key === tagKey);\n          if (tag) {\n            return (\n              <Tooltip\n                key={`tooltip_${idx}`}\n                position={TooltipPosition.bottom}\n                content={tag.description}\n              >\n                <Label data-cy={tag.name} key={idx}>\n                  {tag.name}\n                </Label>\n              </Tooltip>\n            );\n          }\n        })}\n    </ReportTagsLabelGroup>\n  );\n  return (\n    <Page>\n      <PageLayout>\n        <PageHeader\n          title={data?.report?.name || ''}\n          description={data?.report?.description || ''}\n          controls={data ? reportTags : undefined}\n        />\n        {activeAwxUser && !activeAwxUser?.is_superuser ? (\n          <AnalyticsErrorState />\n        ) : (\n          <ReportsInternal />\n        )}\n      </PageLayout>\n    </Page>\n  );\n}\n\nconst ReportTagsLabelGroup = styled(LabelGroup)`\n  flex-wrap: nowrap;\n`;\n","import { usePageSettings } from '../PageSettings/PageSettingsProvider';\n\nexport function usePageChartColors() {\n  const { activeTheme } = usePageSettings();\n\n  let successfulColor = 'var(--pf-v5-chart-color-green-300)';\n  let failedColor = 'var(--pf-v5-chart-color-red-100)';\n  let errorColor = 'var(--pf-v5-chart-color-orange-300)';\n  let warningColor = 'var(--pf-v5-chart-color-gold-400)';\n  let canceledColor = 'var(--pf-v5-chart-color-black-400)';\n  let blueColor = 'var(--pf-v5-chart-color-blue-300)';\n  let cyanColor = 'var(--pf-v5-chart-color-cyan-300)';\n  let redColor = 'var(--pf-v5-chart-color-red-100)';\n  let greenColor = 'var(--pf-v5-chart-color-green-300)';\n  let yellowColor = 'var(--pf-v5-chart-color-gold-400)';\n  let purpleColor = 'var(--pf-v5-chart-color-purple-300)';\n  let orangeColor = 'var(--pf-v5-chart-color-orange-300)';\n  let greyColor = 'var(--pf-v5-chart-color-black-400)';\n\n  switch (activeTheme) {\n    case 'dark':\n      successfulColor = 'var(--pf-v5-chart-color-green-400)';\n      failedColor = 'var(--pf-v5-chart-color-red-400)';\n      errorColor = 'var(--pf-v5-chart-color-orange-300)';\n      warningColor = 'var(--pf-v5-chart-color-gold-300)';\n      canceledColor = 'var(--pf-v5-chart-color-black-400)';\n      blueColor = 'var(--pf-v5-chart-color-blue-400)';\n      cyanColor = 'var(--pf-v5-chart-color-cyan-400)';\n      redColor = 'var(--pf-v5-chart-color-red-400)';\n      greenColor = 'var(--pf-v5-chart-color-green-400)';\n      yellowColor = 'var(--pf-v5-chart-color-gold-300)';\n      purpleColor = 'var(--pf-v5-chart-color-purple-400)';\n      orangeColor = 'var(--pf-v5-chart-color-orange-300)';\n      greyColor = 'var(--pf-v5-chart-color-black-300)';\n      break;\n  }\n\n  return {\n    successfulColor,\n    failedColor,\n    errorColor,\n    warningColor,\n    canceledColor,\n    blueColor,\n    yellowColor,\n    purpleColor,\n    orangeColor,\n    redColor,\n    cyanColor,\n    greenColor,\n    greyColor,\n    chartColors: [\n      blueColor,\n      yellowColor,\n      purpleColor,\n      orangeColor,\n      cyanColor,\n      redColor,\n      greenColor,\n      greyColor,\n    ],\n  };\n}\n","import { Bullseye, Spinner } from '@patternfly/react-core';\nimport useSWR from 'swr';\nimport { IFilterState } from '../../../../framework';\nimport { PageDashboardChart } from '../../../../framework/PageDashboard/PageDashboardChart';\nimport { usePageChartColors } from '../../../../framework/PageDashboard/usePageChartColors';\nimport { awxAPI } from '../../common/api/awx-utils';\n\ninterface ISubscriptionUsageChartData {\n  results: [\n    {\n      id: number;\n      date: string;\n      license_capacity: number;\n      license_consumed: number;\n      hosts_added: number;\n      hosts_deleted: number;\n      indirectly_managed_hosts: number;\n    },\n  ];\n}\n\nexport function SubscriptionUsageChart(props: { period: IFilterState }) {\n  const calculateDateRange = () => {\n    const today = new Date();\n    let date = '';\n    switch (props.period.dateRange?.[0]) {\n      case 'year':\n        date =\n          today.getMonth() < 9\n            ? `${today.getFullYear() - 1}-0${today.getMonth() + 1}-01`\n            : `${today.getFullYear() - 1}-${today.getMonth() + 1}-01`;\n        break;\n      case 'two_years':\n        date =\n          today.getMonth() < 9\n            ? `${today.getFullYear() - 2}-0${today.getMonth() + 1}-01`\n            : `${today.getFullYear() - 2}-${today.getMonth() + 1}-01`;\n        break;\n      case 'three_years':\n        date =\n          today.getMonth() < 9\n            ? `${today.getFullYear() - 3}-0${today.getMonth() + 1}-01`\n            : `${today.getFullYear() - 3}-${today.getMonth() + 1}-01`;\n        break;\n      default:\n        date =\n          today.getMonth() < 9\n            ? `${today.getFullYear() - 1}-0${today.getMonth() + 1}-01`\n            : `${today.getFullYear() - 1}-${today.getMonth() + 1}-01`;\n        break;\n    }\n    return date;\n  };\n\n  const { data, isLoading } = useSWR<ISubscriptionUsageChartData>(\n    awxAPI`/host_metric_summary_monthly/?date__gte=${calculateDateRange()}&order_by=date&page_size=100`,\n    (url: string) => fetch(url).then((r) => r.json())\n  );\n\n  const dateFormatter = (date: string | undefined) => {\n    const oldDate = date;\n    const splitDate = oldDate?.split('-') ?? [];\n    const newDate = splitDate[1] + '/' + splitDate[0];\n    return newDate;\n  };\n\n  const consumed =\n    data !== undefined\n      ? data.results.map(({ date, license_consumed }) => {\n          return {\n            label: dateFormatter(date),\n            value: license_consumed,\n          };\n        })\n      : [];\n\n  const capacity =\n    data !== undefined\n      ? data.results.map(({ date, license_capacity }) => {\n          return {\n            label: dateFormatter(date),\n            value: license_capacity,\n          };\n        })\n      : [];\n\n  const { blueColor, redColor } = usePageChartColors();\n\n  if (isLoading)\n    return (\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    );\n\n  return (\n    <PageDashboardChart\n      groups={[\n        { label: 'Subscriptions consumed ', color: blueColor, values: consumed },\n        { label: 'Subscription capacity', color: redColor, values: capacity },\n      ]}\n      xLabel=\"Month\"\n      yLabel=\"Unique hosts\"\n      variant=\"lineChart\"\n      allowZero\n      onlyIntegerTicks\n      padding={{ right: 15 }}\n      showLegendCount={false}\n    />\n  );\n}\n","import { CardBody, Flex, FlexItem, Text } from '@patternfly/react-core';\nimport { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IFilterState,\n  PageDashboard,\n  PageHeader,\n  PageLayout,\n  PageToolbar,\n} from '../../../../framework';\nimport { PageDashboardCard } from '../../../../framework/PageDashboard/PageDashboardCard';\nimport { getItemKey } from '../../../common/crud/Data';\nimport { useGet } from '../../../common/crud/useGet';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { Settings } from '../../interfaces/Settings';\nimport { SubscriptionUsageChart } from '../subscription-usage/SubscriptionUsageChart';\nimport { useSubscriptionUsageFilters } from './useSubscriptionUsageFilters';\n\ninterface ISubscriptionUsageChartData {\n  count: number;\n  results: [\n    {\n      id: number;\n      date: string;\n      license_capacity: number;\n      license_consumed: number;\n      hosts_added: number;\n      hosts_deleted: number;\n      indirectly_managed_hosts: number;\n    },\n  ];\n}\n\nexport function SubscriptionUsage() {\n  const { t } = useTranslation();\n  const toolbarFilters = useSubscriptionUsageFilters();\n  const [dateRange, setDateRange] = useState<IFilterState>({ dateRange: ['year'] });\n  const systemData = useGet<Settings>(awxAPI`/settings/system/`);\n  const { data } = useGet<ISubscriptionUsageChartData>(awxAPI`/host_metric_summary_monthly/`);\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Subscription Usage')}\n        titleHelpTitle={t('Subscription Usage')}\n        titleHelp={t(\n          'A chart showing historical usage of your subscription. Subscription capacity and licenses consumed per month are displayed, with the ability to filter by the last year, two years, or three years.'\n        )}\n        description={t(\n          'A chart showing historical usage of your subscription. Subscription capacity and licenses consumed per month are displayed, with the ability to filter by the last year, two years, or three years.'\n        )}\n      />\n      <PageToolbar\n        keyFn={getItemKey}\n        itemCount={data?.count}\n        toolbarFilters={toolbarFilters}\n        setFilterState={setDateRange}\n        filterState={dateRange}\n        disableCardView\n        disableListView\n        disableTableView\n        disablePagination\n      />\n      <PageDashboard>\n        <PageDashboardCard\n          title={t('Subscription Compliance')}\n          width=\"xxl\"\n          height=\"xl\"\n          headerControls={\n            <Flex spaceItems={{ default: 'spaceItemsNone' }} style={{ gap: 8 }}>\n              <FlexItem>\n                <Text component=\"small\">\n                  Last recalculation date:{' '}\n                  {systemData.data !== undefined &&\n                  !!systemData.data.HOST_METRIC_SUMMARY_TASK_LAST_TS\n                    ? systemData.data.HOST_METRIC_SUMMARY_TASK_LAST_TS.slice(0, 10)\n                    : t('None')}\n                </Text>\n              </FlexItem>\n            </Flex>\n          }\n        >\n          <CardBody>\n            <SubscriptionUsageChart period={dateRange} />\n          </CardBody>\n        </PageDashboardCard>\n      </PageDashboard>\n    </PageLayout>\n  );\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { IToolbarFilter, ToolbarFilterType } from '../../../../framework';\n\nexport function useSubscriptionUsageFilters() {\n  const { t } = useTranslation();\n  const toolbarFilters = useMemo<IToolbarFilter[]>(\n    () => [\n      {\n        key: 'dateRange',\n        label: t('Period'),\n        type: ToolbarFilterType.SingleSelect,\n        query: 'dateRange',\n        options: [\n          { label: t('Past year'), value: 'year' },\n          { label: t('Past two years'), value: 'two_years' },\n          { label: t('Past three years'), value: 'three_years' },\n        ],\n        placeholder: t('Select period'),\n        isPinned: true,\n        isRequired: true,\n        defaultValue: 'year',\n      },\n    ],\n    [t]\n  );\n  return toolbarFilters;\n}\n","import { ChartPie } from '@patternfly/react-charts';\nimport { CardBody, Title } from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport { PageChartLegend } from './PageChartLegend';\nimport { PageDashboardCard } from './PageDashboardCard';\n\nexport type PageDashboardCountBarProps = {\n  counts: {\n    title: string;\n    total?: number;\n    to: string;\n    counts?: { label: string; count: number; color: string; link?: string }[];\n  }[];\n};\n\nexport function PageDashboardCountBar(props: PageDashboardCountBarProps) {\n  return (\n    <PageDashboardCard width=\"xxl\" isCompact>\n      <CardBody>\n        <div\n          data-cy=\"resource-count-bar\"\n          style={{\n            display: 'flex',\n            flexWrap: 'wrap',\n            justifyContent: 'space-evenly',\n            paddingLeft: 8,\n            paddingRight: 8,\n            gap: 16,\n          }}\n        >\n          {props.counts.map((item, index) => {\n            const id = item.title.toLowerCase().replace(/ /g, '-');\n            const total: number =\n              item.total ??\n              item.counts?.reduce<number>((acc: number, curr) => acc + (curr.count ?? 0), 0) ??\n              0;\n            return (\n              <div\n                data-cy={id}\n                id={id}\n                key={index}\n                style={{ display: 'flex', gap: 12, alignItems: 'center' }}\n              >\n                <Link to={item.to} style={{ color: 'var(--pf-v5-global--text--Color)' }}>\n                  <Title\n                    headingLevel=\"h3\"\n                    size=\"xl\"\n                    style={{ whiteSpace: 'nowrap', textDecoration: 'none' }}\n                  >\n                    {total} {item.title}\n                  </Title>\n                </Link>\n\n                {/* if there is a total and the item has counts and counts is not undefined */}\n                {/* then we want to show the donut chart instead of just a count whisch is in the else */}\n                {/* Note: even if there is counts but total is 0 we want to just render the count  */}\n                {total && 'counts' in item && item.counts ? (\n                  <>\n                    <div\n                      id={`${id}-chart`}\n                      style={{ maxHeight: 64, marginTop: -4, marginBottom: -4 }}\n                    >\n                      <ChartPie\n                        padding={{ top: 0, left: 0, right: 0, bottom: 0 }}\n                        width={64}\n                        height={64}\n                        data={item.counts.map((count) => ({ x: ' ', y: count.count }))}\n                        colorScale={item.counts.map((count) => count.color)}\n                        cornerRadius={1}\n                        allowTooltip={false}\n                      />\n                    </div>\n                    <PageChartLegend id={`${id}-legend`} legend={item.counts} />\n                  </>\n                ) : (\n                  // This renders the total if there are no counts or total is zero\n                  <span id={`${id}-chart`} style={{ fontSize: 'xx-large', lineHeight: 1 }}>\n                    {total}\n                  </span>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </CardBody>\n    </PageDashboardCard>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useGetPageUrl } from '../../../../framework';\nimport { PageDashboardCountBar } from '../../../../framework/PageDashboard/PageDashboardCountBar';\nimport { usePageChartColors } from '../../../../framework/PageDashboard/usePageChartColors';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { IAwxDashboardData } from '../AwxOverview';\n\nexport function AwxCountsCard(props: { data: IAwxDashboardData }) {\n  const { t } = useTranslation();\n  const { data } = props;\n  const { successfulColor, failedColor } = usePageChartColors();\n  const getPageUrl = useGetPageUrl();\n  return (\n    <PageDashboardCountBar\n      counts={[\n        {\n          title: t('Hosts'),\n          to: getPageUrl(AwxRoute.Hosts),\n          counts: data?.hosts?.total\n            ? [\n                {\n                  label: t('Ready'),\n                  count: data.hosts.total - data.hosts.failed,\n                  color: successfulColor,\n                },\n                {\n                  label: t('Failed'),\n                  count: data.hosts.failed,\n                  color: failedColor,\n                },\n              ]\n            : undefined,\n        },\n        {\n          title: t('Projects'),\n          to: getPageUrl(AwxRoute.Projects),\n          counts: data?.projects?.total\n            ? [\n                {\n                  label: t('Ready'),\n                  count: data.projects.total - data.projects.failed,\n                  color: successfulColor,\n                  link: getPageUrl(AwxRoute.Projects) + '?status=successful',\n                },\n                {\n                  label: t('Failed'),\n                  count: data.projects.failed,\n                  color: failedColor,\n                  link: getPageUrl(AwxRoute.Projects) + '?status=failed,error,canceled,missing',\n                },\n              ]\n            : undefined,\n        },\n        {\n          title: t('Inventories'),\n          to: getPageUrl(AwxRoute.Inventories),\n          counts: data?.inventories?.total\n            ? [\n                {\n                  label: t('Synced'),\n                  count: data.inventories.total - data.inventories.inventory_failed,\n                  color: successfulColor,\n                },\n                {\n                  label: t('Synced failures'),\n                  count: data.inventories.inventory_failed,\n                  color: failedColor,\n                },\n              ]\n            : undefined,\n        },\n      ]}\n    />\n  );\n}\n","import { Bullseye, Spinner } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport useSWR from 'swr';\nimport { PageDashboardChart } from '../../../../framework/PageDashboard/PageDashboardChart';\nimport { usePageChartColors } from '../../../../framework/PageDashboard/usePageChartColors';\nimport { useGetPageUrl } from '../../../../framework/PageNavigation/useGetPageUrl';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { UnifiedJob } from '../../interfaces/UnifiedJob';\nimport { AwxRoute } from '../../main/AwxRoutes';\n\nexport type UnifiedJobSummary = Pick<UnifiedJob, 'id' | 'finished' | 'failed'>;\n\ninterface IJobChartData {\n  jobs?: {\n    failed: [number, number][];\n    successful: [number, number][];\n    canceled?: [number, number][];\n    error?: [number, number][];\n  };\n}\n\nexport type DashboardJobPeriod = 'month' | 'two_weeks' | 'week' | 'day';\nexport type DashboardJobType = 'all' | 'inv_sync' | 'scm_update' | 'playbook_run';\n\nexport function JobsChart(props: {\n  height?: number;\n  period?: DashboardJobPeriod;\n  jobType?: DashboardJobType;\n}) {\n  const getPageUrl = useGetPageUrl();\n\n  const { t } = useTranslation();\n  const { period, jobType } = props;\n\n  const { data, isLoading } = useSWR<IJobChartData>(\n    awxAPI`/dashboard/graphs/jobs/?job_type=${jobType ?? 'all'}&period=${period ?? 'month'}`,\n    (url: string) => fetch(url).then((r) => r.json())\n  );\n\n  const reducer = (tuple: [number, number]) => {\n    const date = new Date(tuple[0] * 1000);\n    let label: string;\n    switch (period) {\n      case 'day':\n        label = `${date.toLocaleTimeString()}`;\n        break;\n      default:\n        label = `${date.getMonth() + 1}/${date.getDate()}`;\n    }\n    return { label, value: tuple[1] };\n  };\n\n  const failed = data?.jobs?.failed.map(reducer) ?? [];\n  const successful = data?.jobs?.successful.map(reducer) ?? [];\n  const canceled = data?.jobs?.canceled?.map(reducer) ?? [];\n  const error = data?.jobs?.error?.map(reducer) ?? [];\n\n  const { successfulColor, failedColor, errorColor, canceledColor } = usePageChartColors();\n\n  if (isLoading)\n    return (\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    );\n\n  return (\n    <PageDashboardChart\n      yLabel={t('Job count')}\n      variant=\"stackedAreaChart\"\n      groups={[\n        {\n          label: t('Success'),\n          color: successfulColor,\n          values: successful,\n          link: getPageUrl(AwxRoute.Jobs) + '?status=successful',\n        },\n        {\n          label: t('Error'),\n          color: errorColor,\n          values: error,\n          link: getPageUrl(AwxRoute.Jobs) + '?status=error',\n        },\n        {\n          label: t('Failed'),\n          color: failedColor,\n          values: failed,\n          link: getPageUrl(AwxRoute.Jobs) + '?status=failed',\n        },\n        {\n          label: t('Canceled'),\n          color: canceledColor,\n          values: canceled,\n          link: getPageUrl(AwxRoute.Jobs) + '?status=canceled',\n        },\n      ]}\n      height={props.height}\n    />\n  );\n}\n","import { CardBody, Flex, FlexItem } from '@patternfly/react-core';\nimport { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageDashboardCard } from '../../../../framework/PageDashboard/PageDashboardCard';\nimport { PageSingleSelect } from '../../../../framework/PageInputs/PageSingleSelect';\nimport { useGetPageUrl } from '../../../../framework/PageNavigation/useGetPageUrl';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { DashboardJobPeriod, DashboardJobType, JobsChart } from '../charts/JobsChart';\n\nexport function AwxJobActivityCard() {\n  const { t } = useTranslation();\n  const [period, setPeriod] = useState<DashboardJobPeriod | null>('month');\n  const [jobType, setJobType] = useState<DashboardJobType | null>('all');\n  const getPageUrl = useGetPageUrl();\n  return (\n    <PageDashboardCard\n      title={t('Job Activity')}\n      linkText={t('View all Jobs')}\n      to={getPageUrl(AwxRoute.Jobs)}\n      width=\"xxl\"\n      height=\"sm\"\n      headerControls={\n        <Flex spaceItems={{ default: 'spaceItemsNone' }} style={{ gap: 8 }}>\n          <FlexItem>\n            <PageSingleSelect<DashboardJobPeriod>\n              placeholder={t('Select period')}\n              value={period}\n              onSelect={setPeriod}\n              options={[\n                { label: t('Past month'), value: 'month' },\n                { label: t('Past two weeks'), value: 'two_weeks' },\n                { label: t('Past week'), value: 'week' },\n                // { label: t('Past 24 hours'), value: 'day' },\n              ]}\n              isRequired\n            />\n          </FlexItem>\n          <FlexItem>\n            <PageSingleSelect<DashboardJobType>\n              placeholder={t('Select job types')}\n              value={jobType}\n              onSelect={setJobType}\n              options={[\n                { label: t('All job types'), value: 'all' },\n                { label: t('Inventory sync'), value: 'inv_sync' },\n                { label: t('Scm update'), value: 'scm_update' },\n                { label: t('Playbook run'), value: 'playbook_run' },\n              ]}\n              isRequired\n            />\n          </FlexItem>\n        </Flex>\n      }\n    >\n      <CardBody>\n        <JobsChart period={period!} jobType={jobType!} />\n      </CardBody>\n    </PageDashboardCard>\n  );\n}\n","import { PlusCircleIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\nimport {\n  PageTable,\n  useDashboardColumns,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { PageDashboardCard } from '../../../../framework/PageDashboard/PageDashboardCard';\nimport { useOptions } from '../../../common/crud/useOptions';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { useAwxView } from '../../common/useAwxView';\nimport { Inventory } from '../../interfaces/Inventory';\nimport { ActionsResponse, OptionsResponse } from '../../interfaces/OptionsResponse';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { useInventoriesColumns } from '../../resources/inventories/hooks/useInventoriesColumns';\n\nexport function AwxRecentInventoriesCard() {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const getPageUrl = useGetPageUrl();\n\n  const { data } = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/inventories/`);\n  const canCreateInventory = Boolean(data && data.actions && data.actions['POST']);\n\n  const view = useAwxView<Inventory>({\n    url: awxAPI`/inventories/`,\n    disableQueryString: true,\n    defaultSort: 'modified',\n    defaultSortDirection: 'desc',\n  });\n\n  let columns = useInventoriesColumns();\n  columns = useDashboardColumns(columns);\n\n  return (\n    <PageDashboardCard\n      title={t('Inventories')}\n      subtitle={t('Recently updated inventories')}\n      width=\"md\"\n      height=\"md\"\n      linkText={t('View all Inventories')}\n      to={getPageUrl(AwxRoute.Inventories)}\n    >\n      <PageTable<Inventory>\n        disableBodyPadding={true}\n        tableColumns={columns}\n        autoHidePagination={true}\n        errorStateTitle={t('Error loading inventories')}\n        emptyStateIcon={PlusCircleIcon}\n        emptyStateButtonIcon={<PlusCircleIcon />}\n        emptyStateVariant={'light'}\n        emptyStateTitle={t('There are currently no inventories')}\n        emptyStateDescription={\n          canCreateInventory\n            ? t('Create a inventory by clicking the button below..')\n            : t(\n                'Please contact your organization administrator if there is an issue with your access.'\n              )\n        }\n        emptyStateButtonText={canCreateInventory ? t('Create inventory') : undefined}\n        emptyStateButtonClick={\n          canCreateInventory ? () => pageNavigate(AwxRoute.CreateInventory) : undefined\n        }\n        {...view}\n        compact\n        itemCount={view.itemCount !== undefined ? Math.min(view.itemCount, 7) : undefined}\n        pageItems={view.pageItems ? view.pageItems.slice(0, 7) : []}\n        disableLastRowBorder\n      />\n    </PageDashboardCard>\n  );\n}\n","import { awxAPI } from '../../common/api/awx-utils';\nimport { UnifiedJob } from '../../interfaces/UnifiedJob';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { useGetPageUrl } from '../../../../framework/PageNavigation/useGetPageUrl';\nimport { useMemo } from 'react';\n\n/** Returns the jobs API endpoint based on the job type */\nexport function getJobsAPIUrl(type: string) {\n  switch (type) {\n    case 'ad_hoc_command':\n      return awxAPI`/ad_hoc_commands/`;\n    case 'inventory_update':\n      return awxAPI`/inventory_updates/`;\n    case 'project_update':\n      return awxAPI`/project_updates/`;\n    case 'system_job':\n      return awxAPI`/system_jobs/`;\n    case 'workflow_job':\n      return awxAPI`/workflow_jobs/`;\n    default:\n      return awxAPI`/jobs/`;\n  }\n}\n\ntype JobStatus =\n  | 'failed'\n  | 'new'\n  | 'pending'\n  | 'waiting'\n  | 'running'\n  | 'successful'\n  | 'error'\n  | 'canceled'\n  | undefined;\n\nexport function isJobRunning(status: JobStatus) {\n  return ['new', 'pending', 'waiting', 'running'].includes(status ?? 'waiting');\n}\n\n/** Returns the jobs relaunch endpoint based on the job type */\nexport function relaunchEndpoint(job: UnifiedJob) {\n  switch (job.type) {\n    case 'ad_hoc_command':\n      return awxAPI`/ad_hoc_commands/${job.id.toString()}/relaunch/`;\n    case 'workflow_job':\n      return awxAPI`/workflow_jobs/${job.id.toString()}/relaunch/`;\n    case 'job':\n      return awxAPI`/jobs/${job.id.toString()}/relaunch/`;\n    case 'inventory_update':\n      return job.inventory_source ? awxAPI`/inventory_sources/${job.inventory_source}/update/` : '';\n    case 'project_update':\n      return job.project ? awxAPI`/projects/${job.project}/update/` : '';\n    default:\n      return '';\n  }\n}\n\n/**\n * Returns the schedule URL for a scheduled job\n */\nexport function useGetScheduleUrl() {\n  const getPageUrl = useGetPageUrl();\n  const getScheduleUrl = useMemo<(job: UnifiedJob) => string>(() => {\n    return (job: UnifiedJob) => {\n      const templateId = job.summary_fields?.unified_job_template?.id;\n      const scheduleId = job.summary_fields?.schedule?.id;\n      const inventoryId = job.summary_fields?.inventory ? job.summary_fields.inventory.id : null;\n      let scheduleUrl = '';\n      if (templateId && scheduleId) {\n        switch (job.type) {\n          case 'inventory_update':\n            scheduleUrl = inventoryId\n              ? getPageUrl(AwxRoute.InventorySourceScheduleDetails, {\n                  params: { id: inventoryId, source_id: templateId, schedule_id: scheduleId },\n                })\n              : '';\n            break;\n          case 'job':\n            scheduleUrl = getPageUrl(AwxRoute.JobTemplateScheduleDetails, {\n              params: { id: templateId, schedule_id: scheduleId },\n            });\n            break;\n          case 'project_update':\n            scheduleUrl = getPageUrl(AwxRoute.ProjectScheduleDetails, {\n              params: { id: templateId, schedule_id: scheduleId },\n            });\n            break;\n          case 'system_job':\n            scheduleUrl = getPageUrl(AwxRoute.ManagementJobScheduleDetails, {\n              params: { id: templateId, schedule_id: scheduleId },\n            });\n            break;\n          case 'workflow_job':\n            scheduleUrl = getPageUrl(AwxRoute.WorkflowJobTemplateScheduleDetails, {\n              params: { id: templateId, schedule_id: scheduleId },\n            });\n            break;\n          default:\n            break;\n        }\n      }\n      return scheduleUrl;\n    };\n  }, [getPageUrl]);\n  return getScheduleUrl;\n}\n\nexport type LaunchedBy = {\n  link?: string;\n  value?: string;\n};\n\n/**\n * Returns \"Launched by\" details (value and link) for a job\n */\nexport function useGetLaunchedByDetails() {\n  const getPageUrl = useGetPageUrl();\n  const getScheduleUrl = useGetScheduleUrl();\n  const getLaunchedByDetails = useMemo<(job: UnifiedJob) => LaunchedBy>(() => {\n    return (job: UnifiedJob) => {\n      const createdBy = job.summary_fields?.created_by;\n      const jobTemplate = job.summary_fields?.job_template;\n      const workflowJT = job.summary_fields?.workflow_job_template;\n      const schedule = job.summary_fields?.schedule;\n\n      if (!createdBy && !schedule) {\n        return {};\n      }\n\n      let link: string;\n      let value: string;\n\n      switch (job.launch_type) {\n        case 'webhook':\n          value = 'Webhook';\n          link = jobTemplate\n            ? getPageUrl(AwxRoute.JobTemplateDetails, { params: { id: jobTemplate.id } })\n            : workflowJT\n              ? getPageUrl(AwxRoute.WorkflowJobTemplateDetails, { params: { id: workflowJT.id } })\n              : '';\n          break;\n        case 'scheduled':\n          value = schedule?.name || '';\n          link = getScheduleUrl(job);\n          break;\n        case 'manual':\n          link = createdBy?.id\n            ? getPageUrl(AwxRoute.UserDetails, { params: { id: createdBy.id } })\n            : '';\n          value = createdBy ? createdBy.username : '';\n          break;\n        default:\n          link = createdBy?.id\n            ? getPageUrl(AwxRoute.UserDetails, { params: { id: createdBy.id } })\n            : '';\n          value = createdBy ? createdBy.username : '';\n          break;\n      }\n\n      return { link, value };\n    };\n  }, [getPageUrl, getScheduleUrl]);\n  return getLaunchedByDetails;\n}\n","import { Chip, ChipGroup, LabelGroup } from '@patternfly/react-core';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport {\n  ColumnModalOption,\n  ColumnTableOption,\n  DateTimeCell,\n  ITableColumn,\n  TextCell,\n  useGetPageUrl,\n} from '../../../../../framework';\nimport { ElapsedTimeCell } from '../../../../../framework/PageCells/ElapsedTimeCell';\nimport { StatusCell } from '../../../../common/Status';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { CredentialLabel } from '../../../common/CredentialLabel';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { ActionsResponse, OptionsResponse } from '../../../interfaces/OptionsResponse';\nimport { UnifiedJob } from '../../../interfaces/UnifiedJob';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useGetLaunchedByDetails, useGetScheduleUrl } from '../jobUtils';\nimport { useGetJobOutputUrl } from '../useGetJobOutputUrl';\n\nexport function useJobsColumns(options?: { disableSort?: boolean; disableLinks?: boolean }) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const getScheduleUrl = useGetScheduleUrl();\n\n  const { data } = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/inventory_sources/`);\n  const inventorySourceChoices = useMemo(\n    () =>\n      data &&\n      data.actions &&\n      data.actions['GET'] &&\n      data.actions['GET'].source &&\n      Array.isArray(data.actions['GET'].source.choices)\n        ? data.actions['GET'].source.choices\n        : [],\n    [data]\n  );\n\n  const getJobOutputUrl = useGetJobOutputUrl();\n  const getLaunchedByDetails = useGetLaunchedByDetails();\n\n  const tableColumns = useMemo<ITableColumn<UnifiedJob>[]>(\n    () => [\n      {\n        header: t('ID'),\n        cell: (job: UnifiedJob) => job.id,\n        sort: 'id',\n        card: 'hidden',\n        list: 'hidden',\n        dashboard: 'hidden',\n        minWidth: 0,\n      },\n      {\n        header: t('Name'),\n        cell: (job: UnifiedJob) => {\n          return (\n            <TextCell\n              text={job.name}\n              to={getJobOutputUrl(job)}\n              disableLinks={options?.disableLinks}\n            />\n          );\n        },\n        sort: 'name',\n        card: 'name',\n        list: 'name',\n      },\n      {\n        header: t('Status'),\n        cell: (job: UnifiedJob) => <StatusCell status={job.status} />,\n        sort: 'status',\n      },\n      {\n        header: t('Type'),\n        cell: (job: UnifiedJob) => {\n          const jobTypes: { [key: string]: string } = {\n            project_update: t`Source control update`,\n            inventory_update: t`Inventory sync`,\n            job: job.job_type === 'check' ? t`Playbook check` : t`Playbook run`,\n            ad_hoc_command: t`Command`,\n            system_job: t`Management job`,\n            workflow_job: t`Workflow job`,\n          };\n          return <TextCell text={jobTypes[job.type]} />;\n        },\n        sort: 'type',\n        card: 'subtitle',\n        list: 'subtitle',\n        dashboard: 'hidden',\n      },\n      {\n        header: t('Duration'),\n        cell: (job: UnifiedJob) =>\n          job.started && <ElapsedTimeCell start={job.started} finish={job.finished} />,\n        modal: ColumnModalOption.hidden,\n        dashboard: 'hidden',\n      },\n      {\n        header: t('Started'),\n        cell: (job: UnifiedJob) => job.started && <DateTimeCell value={job.started} />,\n        sort: 'started',\n        list: 'secondary',\n        defaultSortDirection: 'desc',\n        modal: ColumnModalOption.hidden,\n        dashboard: 'hidden',\n      },\n      {\n        header: t('Finished'),\n        cell: (job: UnifiedJob) => (job.finished ? <DateTimeCell value={job.finished} /> : '--'),\n        sort: 'finished',\n        card: 'hidden',\n        list: 'secondary',\n        defaultSortDirection: 'desc',\n        defaultSort: true,\n        modal: ColumnModalOption.hidden,\n        dashboard: 'hidden',\n      },\n      {\n        header: t('Source'),\n        cell: (job: UnifiedJob) =>\n          inventorySourceChoices?.map(([string, label]) => (string === job.source ? label : null)),\n        value: (job: UnifiedJob) => (job.source ? job.source : undefined),\n        table: ColumnTableOption.expanded,\n        card: 'hidden',\n        list: 'hidden',\n        defaultSortDirection: 'desc',\n        modal: ColumnModalOption.hidden,\n        dashboard: 'hidden',\n      },\n      {\n        header: t('Launched by'),\n        cell: (job: UnifiedJob) => {\n          const { value: launchedByValue, link: launchedByLink } = getLaunchedByDetails(job) ?? {};\n          if (launchedByLink) {\n            return <Link to={`${launchedByLink}`}>{launchedByValue}</Link>;\n          } else {\n            return launchedByValue;\n          }\n        },\n        table: ColumnTableOption.expanded,\n        card: 'hidden',\n        list: 'hidden',\n        defaultSortDirection: 'desc',\n        modal: ColumnModalOption.hidden,\n        dashboard: 'hidden',\n      },\n      {\n        header: t('Schedule'),\n        cell: (job: UnifiedJob) => {\n          return (\n            <Link to={job.summary_fields?.schedule ? getScheduleUrl(job) ?? '' : ''}>\n              {job.summary_fields?.schedule?.name}\n            </Link>\n          );\n        },\n        value: (job: UnifiedJob) => job.summary_fields?.schedule?.name,\n        table: ColumnTableOption.expanded,\n        card: 'hidden',\n        list: 'hidden',\n        defaultSortDirection: 'desc',\n        modal: ColumnModalOption.hidden,\n        dashboard: 'hidden',\n      },\n      {\n        header: t('Job template'),\n        cell: (job: UnifiedJob) => (\n          <Link\n            to={getPageUrl(AwxRoute.JobTemplateDetails, {\n              params: { id: job.summary_fields?.job_template?.id },\n            })}\n          >\n            {job.summary_fields?.job_template?.name}\n          </Link>\n        ),\n        value: (job: UnifiedJob) => job.summary_fields?.job_template?.name,\n        table: ColumnTableOption.expanded,\n        card: 'hidden',\n        list: 'hidden',\n        defaultSortDirection: 'desc',\n        modal: ColumnModalOption.hidden,\n        dashboard: 'hidden',\n      },\n      {\n        header: t('Workflow job template'),\n        cell: (job: UnifiedJob) => (\n          <Link\n            to={getPageUrl(AwxRoute.WorkflowJobTemplateDetails, {\n              params: { id: job.summary_fields?.workflow_job_template?.id },\n            })}\n          >\n            {job.summary_fields?.workflow_job_template?.name}\n          </Link>\n        ),\n        value: (job: UnifiedJob) => job.summary_fields?.workflow_job_template?.name,\n        table: ColumnTableOption.expanded,\n        card: 'hidden',\n        list: 'hidden',\n        defaultSortDirection: 'desc',\n        modal: ColumnModalOption.hidden,\n        dashboard: 'hidden',\n      },\n      {\n        header: t('Source workflow job'),\n        cell: (job: UnifiedJob) => (\n          <Link\n            to={getPageUrl(AwxRoute.JobDetails, {\n              params: {\n                job_type: 'workflow',\n                id: job.summary_fields.source_workflow_job?.id,\n              },\n            })}\n          >\n            {job.summary_fields.source_workflow_job?.name}\n          </Link>\n        ),\n        value: (job: UnifiedJob) => job.summary_fields?.source_workflow_job?.name,\n        table: ColumnTableOption.expanded,\n        card: 'hidden',\n        list: 'hidden',\n        defaultSortDirection: 'desc',\n        modal: ColumnModalOption.hidden,\n        dashboard: 'hidden',\n      },\n      {\n        header: t('Inventory'),\n        cell: (job: UnifiedJob) => (\n          <Link\n            to={getPageUrl(AwxRoute.InventoryDetails, {\n              params: {\n                inventory_type: inventoryUrlPaths[job.summary_fields?.inventory?.kind ?? ''],\n                id: job.summary_fields?.inventory?.id,\n              },\n            })}\n          >\n            {job.summary_fields?.inventory?.name}\n          </Link>\n        ),\n        helpText: t('Inventory used on this job.'),\n        value: (job: UnifiedJob) => job.summary_fields?.inventory?.name,\n        table: ColumnTableOption.expanded,\n        card: 'hidden',\n        list: 'hidden',\n        defaultSortDirection: 'desc',\n        modal: ColumnModalOption.hidden,\n        dashboard: 'hidden',\n      },\n      {\n        header: t('Project'),\n        helpText: t('The project containing the playbook this job will execute.'),\n        cell: (job: UnifiedJob) => (\n          <Link\n            to={getPageUrl(AwxRoute.ProjectDetails, {\n              params: { id: job.summary_fields?.project?.id },\n            })}\n          >\n            {job.summary_fields?.project?.name}\n          </Link>\n        ),\n        value: (job: UnifiedJob) => job.summary_fields?.project?.name,\n        table: ColumnTableOption.expanded,\n        card: 'hidden',\n        list: 'hidden',\n        defaultSortDirection: 'desc',\n        modal: ColumnModalOption.hidden,\n        dashboard: 'hidden',\n      },\n      {\n        header: t('Execution environment'),\n        helpText: t('The execution environment used to run the job.'),\n        cell: (job: UnifiedJob) => (\n          <Link\n            to={getPageUrl(AwxRoute.ExecutionEnvironmentDetails, {\n              params: { id: job.summary_fields.execution_environment?.id },\n            })}\n          >\n            {job.summary_fields.execution_environment?.name}\n          </Link>\n        ),\n        value: (job: UnifiedJob) =>\n          job.summary_fields?.execution_environment\n            ? job.summary_fields?.execution_environment.name\n            : undefined,\n        table: ColumnTableOption.expanded,\n        card: 'hidden',\n        list: 'hidden',\n        defaultSortDirection: 'desc',\n        modal: ColumnModalOption.hidden,\n        dashboard: 'hidden',\n      },\n      {\n        header: t('Credentials'),\n        helpText: t('Credential(s) used to access the nodes this job will be ran against.'),\n        cell: (job: UnifiedJob) => (\n          <LabelGroup\n            numLabels={5}\n            collapsedText={t(`{{count}} more`, {\n              count: (job.summary_fields.credentials?.length ?? 0) - 5,\n            })}\n          >\n            {job.summary_fields.credentials?.map((cred) => (\n              <CredentialLabel credential={cred} key={cred.id} />\n            ))}\n          </LabelGroup>\n        ),\n        value: (job: UnifiedJob) =>\n          job.summary_fields?.credentials?.length\n            ? job.summary_fields?.credentials?.length\n            : undefined,\n        table: ColumnTableOption.expanded,\n        card: 'hidden',\n        list: 'hidden',\n        defaultSortDirection: 'desc',\n        modal: ColumnModalOption.hidden,\n        dashboard: 'hidden',\n      },\n      {\n        header: t('Labels'),\n        helpText: t('Labels used to describe job.'),\n        cell: (job: UnifiedJob) => (\n          <ChipGroup\n            numChips={5}\n            collapsedText={t(`{{count}} more`, {\n              count: (job.summary_fields?.labels?.results.length ?? 0) - 5,\n            })}\n            ouiaId={`job-${job.id}-label-chips`}\n          >\n            {job.summary_fields?.labels?.results.map((l) => (\n              <Chip key={l.id} isReadOnly ouiaId={`label-${l.id}-chip`}>\n                {l.name}\n              </Chip>\n            ))}\n          </ChipGroup>\n        ),\n        value: (job: UnifiedJob) =>\n          job.summary_fields?.labels?.results.length\n            ? job.summary_fields?.labels?.results.length\n            : undefined,\n        table: ColumnTableOption.expanded,\n        card: 'hidden',\n        list: 'hidden',\n        defaultSortDirection: 'desc',\n        modal: ColumnModalOption.hidden,\n        dashboard: 'hidden',\n      },\n      {\n        header: t('Explanation'),\n        cell: (job: UnifiedJob) => job.job_explanation,\n        value: (job: UnifiedJob) => (job.job_explanation ? job.job_explanation : undefined),\n        table: ColumnTableOption.expanded,\n        card: 'hidden',\n        list: 'hidden',\n        defaultSortDirection: 'desc',\n        modal: ColumnModalOption.hidden,\n        dashboard: 'hidden',\n      },\n      {\n        header: t('Job slice'),\n        helpText: t(\n          'Divide the work done by this job template into the specified number of job slices, each running the same tasks against a portion of the inventory.'\n        ),\n        cell: (job: UnifiedJob) => (\n          <span>{`${job.job_slice_number ?? 0}/${(job.job_slice_count ?? 0).toString()}`}</span>\n        ),\n        value: (job: UnifiedJob) => job.job_slice_count,\n        table: ColumnTableOption.expanded,\n        card: 'hidden',\n        list: 'hidden',\n        defaultSortDirection: 'desc',\n        modal: ColumnModalOption.hidden,\n        dashboard: 'hidden',\n      },\n      {\n        header: t('Job slice parent'),\n        cell: (_job: UnifiedJob) => <span>{t`True`}</span>,\n        value: (job: UnifiedJob) => job.type === 'workflow_job' && job.is_sliced_job,\n        table: ColumnTableOption.expanded,\n        card: 'hidden',\n        list: 'hidden',\n        defaultSortDirection: 'desc',\n        modal: ColumnModalOption.hidden,\n        dashboard: 'hidden',\n      },\n    ],\n    [\n      getJobOutputUrl,\n      getPageUrl,\n      inventorySourceChoices,\n      options?.disableLinks,\n      t,\n      getLaunchedByDetails,\n      getScheduleUrl,\n    ]\n  );\n  return tableColumns;\n}\n\nconst inventoryUrlPaths: { [key: string]: string } = {\n  '': 'inventory',\n  smart: 'smart_inventory',\n  constructed: 'constructed_inventory',\n};\n","import { PlusCircleIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\nimport { PageTable, useDashboardColumns, usePageNavigate } from '../../../../framework';\nimport { PageDashboardCard } from '../../../../framework/PageDashboard/PageDashboardCard';\nimport { useGetPageUrl } from '../../../../framework/PageNavigation/useGetPageUrl';\nimport { useOptions } from '../../../common/crud/useOptions';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { useAwxView } from '../../common/useAwxView';\nimport { Job } from '../../interfaces/Job';\nimport { ActionsResponse, OptionsResponse } from '../../interfaces/OptionsResponse';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { useJobsColumns } from '../../views/jobs/hooks/useJobsColumns';\n\nexport function AwxRecentJobsCard() {\n  const getPageUrl = useGetPageUrl();\n  const view = useAwxView<Job>({\n    url: awxAPI`/unified_jobs/`,\n    disableQueryString: true,\n    defaultSort: 'finished',\n    defaultSortDirection: 'desc',\n  });\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  let columns = useJobsColumns();\n  columns = useDashboardColumns(columns);\n\n  const { data: jobTemplateActions } = useOptions<OptionsResponse<ActionsResponse>>(\n    awxAPI`/job_templates/`\n  );\n  const { data: wfJobTemplateActions } = useOptions<OptionsResponse<ActionsResponse>>(\n    awxAPI`/workflow_job_templates/`\n  );\n  const canCreateJobTemplate = Boolean(\n    jobTemplateActions && jobTemplateActions.actions && jobTemplateActions.actions['POST']\n  );\n  const canCreateWFJobTemplate = Boolean(\n    wfJobTemplateActions && wfJobTemplateActions.actions && wfJobTemplateActions.actions['POST']\n  );\n\n  return (\n    <PageDashboardCard\n      title={t('Jobs')}\n      subtitle={t('Recently finished jobs')}\n      width=\"md\"\n      height=\"md\"\n      linkText={t('View all Jobs')}\n      to={getPageUrl(AwxRoute.Jobs)}\n    >\n      <PageTable<Job>\n        disableBodyPadding={true}\n        tableColumns={columns}\n        autoHidePagination={true}\n        errorStateTitle={t('Error loading jobs')}\n        emptyStateIcon={PlusCircleIcon}\n        emptyStateButtonIcon={<PlusCircleIcon />}\n        emptyStateVariant={'light'}\n        emptyStateTitle={t('There are currently no jobs')}\n        emptyStateDescription={\n          canCreateJobTemplate || canCreateWFJobTemplate\n            ? t('Create a job by clicking the button below.')\n            : t(\n                'Please contact your organization administrator if there is an issue with your access.'\n              )\n        }\n        emptyStateButtonText={\n          canCreateJobTemplate || canCreateWFJobTemplate ? t('Create job') : undefined\n        }\n        emptyStateButtonClick={\n          canCreateJobTemplate ? () => pageNavigate(AwxRoute.CreateJobTemplate) : undefined\n        }\n        {...view}\n        compact\n        itemCount={view.itemCount !== undefined ? Math.min(view.itemCount, 7) : undefined}\n        pageItems={view.pageItems ? view.pageItems.slice(0, 7) : []}\n        disableLastRowBorder\n      />\n    </PageDashboardCard>\n  );\n}\n","import { PlusCircleIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\nimport {\n  PageTable,\n  useDashboardColumns,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { PageDashboardCard } from '../../../../framework/PageDashboard/PageDashboardCard';\nimport { useOptions } from '../../../common/crud/useOptions';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { useAwxView } from '../../common/useAwxView';\nimport { ActionsResponse, OptionsResponse } from '../../interfaces/OptionsResponse';\nimport { Project } from '../../interfaces/Project';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { useProjectsColumns } from '../../resources/projects/hooks/useProjectsColumns';\n\nexport function AwxRecentProjectsCard() {\n  const view = useAwxView<Project>({\n    url: awxAPI`/projects/`,\n    disableQueryString: true,\n    defaultSort: 'modified',\n    defaultSortDirection: 'desc',\n  });\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const getPageUrl = useGetPageUrl();\n\n  const { data } = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/projects/`);\n  const canCreateProject = Boolean(data && data.actions && data.actions['POST']);\n\n  let columns = useProjectsColumns();\n  columns = useDashboardColumns(columns);\n\n  return (\n    <PageDashboardCard\n      title={t('Projects')}\n      subtitle={t('Recently updated projects')}\n      width=\"md\"\n      height=\"md\"\n      linkText={t('View all Projects')}\n      to={getPageUrl(AwxRoute.Projects)}\n    >\n      <PageTable\n        disableBodyPadding={true}\n        tableColumns={columns}\n        autoHidePagination={true}\n        errorStateTitle={t('Error loading projects')}\n        emptyStateIcon={PlusCircleIcon}\n        emptyStateButtonIcon={<PlusCircleIcon />}\n        emptyStateVariant={'light'}\n        emptyStateTitle={t('There are currently no projects')}\n        emptyStateDescription={\n          canCreateProject\n            ? t('Create a project by clicking the button below.')\n            : t(\n                'Please contact your organization administrator if there is an issue with your access.'\n              )\n        }\n        emptyStateButtonText={canCreateProject ? t('Create project') : undefined}\n        emptyStateButtonClick={\n          canCreateProject ? () => pageNavigate(AwxRoute.CreateProject) : undefined\n        }\n        {...view}\n        compact\n        itemCount={view.itemCount !== undefined ? Math.min(view.itemCount, 7) : undefined}\n        pageItems={view.pageItems ? view.pageItems.slice(0, 7) : []}\n        disableLastRowBorder\n      />\n    </PageDashboardCard>\n  );\n}\n","/* eslint-disable i18next/no-literal-string */\nimport { Bullseye, Button, PageSection, Spinner } from '@patternfly/react-core';\nimport { CogIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\nimport useSWR from 'swr';\nimport { PageHeader, PageLayout } from '../../../framework';\nimport { PageDashboard } from '../../../framework/PageDashboard/PageDashboard';\nimport { awxAPI } from '../common/api/awx-utils';\nimport { AwxCountsCard } from './cards/AwxCountsCard';\nimport { AwxJobActivityCard } from './cards/AwxJobActivityCard';\nimport { AwxRecentInventoriesCard } from './cards/AwxRecentInventoriesCard';\nimport { AwxRecentJobsCard } from './cards/AwxRecentJobsCard';\nimport { AwxRecentProjectsCard } from './cards/AwxRecentProjectsCard';\nimport { useManagedAwxDashboard } from './hooks/useManagedAwxDashboard';\n\ntype Resource = { id: string; name: string };\n\nexport function AwxOverview() {\n  const { t } = useTranslation();\n  const { openManageDashboard, managedResources } = useManagedAwxDashboard();\n  const product: string = process.env.PRODUCT ?? t('AWX');\n  function renderCustomizeControls() {\n    return (\n      <Button icon={<CogIcon />} variant=\"link\" onClick={openManageDashboard}>\n        {t('Manage view')}\n      </Button>\n    );\n  }\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t(`Welcome to {{product}}`, { product })}\n        description={t('Define, operate, scale, and delegate automation across your enterprise.')}\n        controls={renderCustomizeControls()}\n      />\n      <AwxOverviewInternal managedResources={managedResources} />\n    </PageLayout>\n  );\n}\n\nfunction AwxOverviewInternal(props: { managedResources: Resource[] }) {\n  const { managedResources } = props;\n  const { data, isLoading } = useSWR<IAwxDashboardData>(awxAPI`/dashboard/`, (url: string) =>\n    fetch(url).then((r) => r.json())\n  );\n  if (!data || isLoading) {\n    return (\n      <PageSection isFilled>\n        <Bullseye>\n          <Spinner />\n        </Bullseye>\n      </PageSection>\n    );\n  }\n\n  return (\n    <PageDashboard>\n      {managedResources.map((resource: Resource) => {\n        switch (resource.id) {\n          case 'counts':\n            return <AwxCountsCard key={resource.id} data={data} />;\n          case 'recent_job_activity':\n            return <AwxJobActivityCard key={resource.id} />;\n          case 'recent_jobs':\n            return <AwxRecentJobsCard key={resource.id} />;\n          case 'recent_projects':\n            return <AwxRecentProjectsCard key={resource.id} />;\n          case 'recent_inventories':\n            return <AwxRecentInventoriesCard key={resource.id} />;\n          default:\n            return <></>;\n        }\n      })}\n    </PageDashboard>\n  );\n}\n\nexport interface IAwxDashboardData {\n  inventories: {\n    url: string;\n    total: number;\n    total_with_inventory_source: number;\n    job_failed: number;\n    inventory_failed: number;\n  };\n  inventory_sources: {\n    ec2: {\n      url: string;\n      failures_url: string;\n      label: string;\n      total: number;\n      failed: number;\n    };\n  };\n  groups: {\n    url: string;\n    total: number;\n    inventory_failed: number;\n  };\n  hosts: {\n    url: string;\n    failures_url: string;\n    total: number;\n    failed: number;\n  };\n  projects: {\n    url: string;\n    failures_url: string;\n    total: number;\n    failed: number;\n  };\n  scm_types: {\n    git: {\n      url: string;\n      label: string;\n      failures_url: string;\n      total: number;\n      failed: number;\n    };\n    svn: {\n      url: string;\n      label: string;\n      failures_url: string;\n      total: number;\n      failed: number;\n    };\n    archive: {\n      url: string;\n      label: string;\n      failures_url: string;\n      total: number;\n      failed: number;\n    };\n  };\n  users: {\n    url: string;\n    total: number;\n  };\n  organizations: {\n    url: string;\n    total: number;\n  };\n  teams: {\n    url: string;\n    total: number;\n  };\n  credentials: {\n    url: string;\n    total: number;\n  };\n  job_templates: {\n    url: string;\n    total: number;\n  };\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useManageItems } from '../../../../framework/components/useManagedItems';\n\ntype Resource = { id: string; name: string };\n\nexport function useManagedAwxDashboard() {\n  const { t } = useTranslation();\n  const columns = useMemo(\n    () => [\n      {\n        header: t('Dashboard resources'),\n        cell: (item: Resource) => item.name,\n      },\n    ],\n    [t]\n  );\n  const resources: Resource[] = useMemo(\n    () => [\n      { id: 'counts', name: t('Resource counts') },\n      { id: 'recent_job_activity', name: t('Recent job activity') },\n      { id: 'recent_jobs', name: t('Recent jobs') },\n      { id: 'recent_projects', name: t('Recent projects') },\n      { id: 'recent_inventories', name: t('Recent inventories') },\n    ],\n    [t]\n  );\n  const { openManageItems: openManageDashboard, managedItems: managedResources } =\n    useManageItems<Resource>({\n      id: 'awx-dashboard',\n      title: t('Manage view'),\n      description: t(\n        'Hide or show the panels you want to see on the overview page by selecting or unselecting, respectively. The panels are ordered from top to bottom on the list. Use the draggable icon :: to re-order your view.'\n      ),\n      items: resources,\n      keyFn: (resources) => resources.id,\n      columns,\n      hideColumnHeaders: true,\n    });\n\n  return {\n    openManageDashboard,\n    managedResources,\n  };\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { DateCell, ITableColumn, TextCell } from '../../../../../framework';\nimport { HostMetric } from '../../../interfaces/HostMetric';\n\nexport function useHostMetricsColumns() {\n  const { t } = useTranslation();\n  const tableColumns = useMemo<ITableColumn<HostMetric>[]>(\n    () => [\n      {\n        header: t('Hostname'),\n        cell: (host: HostMetric) => <TextCell text={host.hostname} />,\n        sort: 'hostname',\n        card: 'name',\n        list: 'name',\n        defaultSortDirection: 'asc',\n        defaultSort: true,\n      },\n      {\n        header: t('First automated'),\n        cell: (host: HostMetric) => <DateCell value={host.first_automation} />,\n        sort: 'first_automation',\n      },\n      {\n        header: t('Last automated'),\n        cell: (host: HostMetric) => <DateCell value={host.last_automation} />,\n        sort: 'last_automation',\n      },\n      {\n        header: t('Automation'),\n        type: 'count',\n        value: (host) => host.automated_counter,\n        sort: 'automated_counter',\n      },\n      {\n        header: t('Deleted'),\n        type: 'count',\n        value: (host) => host.deleted_counter,\n        sort: 'deleted_counter',\n      },\n    ],\n    [t]\n  );\n  return tableColumns;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { compareStrings } from '../../../../../framework';\nimport { useNameColumn } from '../../../../common/columns';\nimport { getItemKey, requestDelete } from '../../../../common/crud/Data';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { HostMetric } from '../../../interfaces/HostMetric';\nimport { useHostMetricsColumns } from './useHostMetricsColumns';\n\nexport function useDeleteHostMetrics(onComplete: (host: HostMetric[]) => void) {\n  const { t } = useTranslation();\n  const confirmationColumns = useHostMetricsColumns();\n  const deleteActionNameColumn = useNameColumn({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo(() => [deleteActionNameColumn], [deleteActionNameColumn]);\n  const bulkAction = useAwxBulkConfirmation<HostMetric>();\n  const deleteHostMetrics = (host: HostMetric[]) => {\n    bulkAction({\n      title: t('Soft delete hostnames', { count: host.length }),\n      confirmText: t('Yes, I confirm that I want to delete these {{count}} hostnames.', {\n        count: host.length,\n      }),\n      actionButtonText: t('Delete hostnames', { count: host.length }),\n      items: host.sort((l, r) => compareStrings(l.hostname, r.hostname)),\n      keyFn: getItemKey,\n      isDanger: true,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: (host: HostMetric, signal) =>\n        requestDelete(awxAPI`/host_metrics/${host.id.toString()}/`, signal),\n    });\n  };\n  return deleteHostMetrics;\n}\n","import { PageHeader, PageLayout, PageTable } from '../../../../framework';\n\nimport { useTranslation } from 'react-i18next';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { useAwxView } from '../../common/useAwxView';\nimport { HostMetric } from '../../interfaces/HostMetric';\nimport { useHostMetricsColumns } from './hooks/useHostMetricsColumns';\nimport { useHostMetricsFilters } from './hooks/useHostMetricsFilters';\nimport { useHostMetricsRowActions } from './hooks/useHostMetricsRowActions';\nimport { useHostMetricsToolbarActions } from './hooks/useHostMetricsToolbarActions';\n\nexport function HostMetrics() {\n  const { t } = useTranslation();\n  const toolbarFilters = useHostMetricsFilters();\n  const tableColumns = useHostMetricsColumns();\n  const view = useAwxView<HostMetric>({\n    url: awxAPI`/host_metrics/`,\n    queryParams: {\n      not__deleted: 'true',\n    },\n    toolbarFilters,\n    tableColumns,\n  });\n  const toolbarActions = useHostMetricsToolbarActions(view.unselectItemsAndRefresh);\n  const rowActions = useHostMetricsRowActions(view.unselectItemsAndRefresh);\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Host Metrics')}\n        titleHelpTitle={t('Host Metrics')}\n        titleHelp={t(\n          `All currently managed hosts, with information about when they were first automated, when they were most recently automated, how many times they were automated, and how many times each host has been deleted. Host metrics can be used to accurately count node usage and ensure subscription compliance. For example, if a host is no longer in use or otherwise should not be counted towards the subscription total, it can be soft-deleted.`\n        )}\n        description={t(\n          `All currently managed hosts, with information about when they were first automated, when they were most recently automated, how many times they were automated, and how many times each host has been deleted.`\n        )}\n      />\n      <PageTable\n        id=\"awx-host-metrics-table\"\n        toolbarFilters={toolbarFilters}\n        tableColumns={tableColumns}\n        toolbarActions={toolbarActions}\n        rowActions={rowActions}\n        errorStateTitle={t('Error loading host metrics')}\n        emptyStateTitle={t('No host metrics found')}\n        emptyStateDescription={t('Please launch a job to populate this list.')}\n        {...view}\n      />\n    </PageLayout>\n  );\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { IToolbarFilter, ToolbarFilterType } from '../../../../../framework';\n\nexport function useHostMetricsFilters() {\n  const { t } = useTranslation();\n  const toolbarFilters = useMemo<IToolbarFilter[]>(\n    () => [\n      {\n        key: 'hostname__icontains',\n        label: t('Hostname'),\n        type: ToolbarFilterType.MultiText,\n        query: 'hostname__icontains',\n        comparison: 'contains',\n      },\n    ],\n    [t]\n  );\n  return toolbarFilters;\n}\n","import { TrashIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { IPageAction, PageActionSelection, PageActionType } from '../../../../../framework';\nimport { HostMetric } from '../../../interfaces/HostMetric';\nimport { useDeleteHostMetrics } from './useDeleteHostMetrics';\n\nexport function useHostMetricsToolbarActions(onComplete: (host: HostMetric[]) => void) {\n  const { t } = useTranslation();\n  const deleteHostMetrics = useDeleteHostMetrics(onComplete);\n\n  return useMemo<IPageAction<HostMetric>[]>(\n    () => [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: TrashIcon,\n        label: t('Delete hostnames'),\n        onClick: deleteHostMetrics,\n        isDanger: true,\n      },\n    ],\n    [deleteHostMetrics, t]\n  );\n}\n","import { TrashIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { IPageAction, PageActionSelection, PageActionType } from '../../../../../framework';\nimport { HostMetric } from '../../../interfaces/HostMetric';\nimport { useDeleteHostMetrics } from './useDeleteHostMetrics';\n\nexport function useHostMetricsRowActions(onComplete: (host: HostMetric[]) => void) {\n  const { t } = useTranslation();\n  const deleteHostMetrics = useDeleteHostMetrics(onComplete);\n\n  return useMemo<IPageAction<HostMetric>[]>(() => {\n    return [\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: TrashIcon,\n        label: t(`Delete hostname`),\n        onClick: (host: HostMetric) => deleteHostMetrics([host]),\n        isDanger: true,\n      },\n    ];\n  }, [deleteHostMetrics, t]);\n}\n","import { AwxRoute } from '../../../main/AwxRoutes';\n\nexport function useGetActivityStreamRoute(resource?: string | null): AwxRoute | null {\n  if (!resource) {\n    return null;\n  }\n  switch (resource) {\n    case 'job':\n    case 'workflow_job':\n      return AwxRoute.JobOutput;\n    case 'job_template':\n      return AwxRoute.JobTemplateDetails;\n    case 'workflow_job_template':\n      return AwxRoute.WorkflowJobTemplateDetails;\n    case 'project':\n      return AwxRoute.ProjectDetails;\n    case 'inventory':\n      return AwxRoute.InventoryDetails;\n    case 'inventory_source':\n      return AwxRoute.InventorySourceDetail;\n    case 'host':\n      return AwxRoute.HostDetails;\n    case 'instance_group':\n      return AwxRoute.InstanceGroupDetails;\n    case 'instance':\n      return AwxRoute.InstanceDetails;\n    case 'execution_environment':\n      return AwxRoute.ExecutionEnvironmentDetails;\n    case 'workflow_approval':\n      return AwxRoute.WorkflowApprovalDetails;\n    case 'management_job':\n      return AwxRoute.ManagementJobSchedules;\n    case 'organization':\n      return AwxRoute.OrganizationDetails;\n    case 'team':\n      return AwxRoute.TeamDetails;\n    case 'user':\n      return AwxRoute.UserDetails;\n    case 'role':\n      return AwxRoute.RoleDetails;\n    case 'credential':\n      return AwxRoute.CredentialDetails;\n    case 'credential_type':\n      return AwxRoute.CredentialTypeDetails;\n    /* Routes missing */\n    // case 'schedule':\n    //   return;\n    // case 'custom_inventory_script':\n    //   return;\n    // case 'job_notification':\n    //   return;\n    // case 'setting':\n    //   return;\n    default:\n      return null;\n  }\n}\n","export const INVENTORYURLPATHS: { [key: string]: string } = {\n  '': 'inventory',\n  smart: 'smart_inventory',\n  constructed: 'constructed_inventory',\n};\n","import { Link } from 'react-router-dom';\nimport { ActivityStream } from '../../../interfaces/ActivityStream';\nimport { useGetPageUrl } from '../../../../../framework';\nimport { useGetActivityStreamRoute } from '../hooks/useGetActivityStreamRoute';\nimport { INVENTORYURLPATHS } from '../../../resources/inventories/constants';\n\ninterface ActivityStreamDescriptionProps {\n  activity: ActivityStream;\n}\ntype ActivityStreamResource = Omit<ActivityStream['summary_fields'], 'actor'>;\n\ntype ResourceKey = keyof ActivityStreamResource;\n\nfunction getResourceName(activity: ActivityStream, resourceKey: ResourceKey): string {\n  const resource = getResourceObject(activity, resourceKey);\n  if (resource) {\n    if ('name' in resource && typeof resource.name === 'string') {\n      return resource.name;\n    }\n    if ('hostname' in resource && typeof resource.hostname === 'string') {\n      return resource.hostname;\n    }\n    if ('username' in resource && typeof resource.username === 'string') {\n      return resource.username;\n    }\n  }\n\n  return '';\n}\n\nfunction getResourceObject(activity: ActivityStream, resourceKey: ResourceKey) {\n  const { summary_fields } = activity;\n\n  if (resourceKey && resourceKey in summary_fields) {\n    const resourceArray = summary_fields[resourceKey];\n\n    if (resourceArray && resourceArray.length > 0) {\n      return resourceArray[0];\n    }\n  }\n\n  return null;\n}\n\nconst getOperationText = (operation: string) => {\n  switch (operation) {\n    case 'associate':\n      return 'associated';\n    case 'disassociate':\n      return 'disassociated';\n    case 'create':\n      return 'created';\n    case 'update':\n      return 'updated';\n    case 'delete':\n      return 'deleted';\n    default:\n      return operation;\n  }\n};\n\nexport const ActivityDescription: React.FC<ActivityStreamDescriptionProps> = ({\n  activity,\n}: {\n  activity: ActivityStream;\n}) => {\n  const getPageUrl = useGetPageUrl();\n  const operationText = getOperationText(activity.operation);\n  const sourceResourceRoute = useGetActivityStreamRoute(String(activity.object1));\n  const targetResourceRoute = useGetActivityStreamRoute(String(activity.object2));\n  const sourceResourceName = getResourceName(activity, activity.object1);\n  const targetResourceName = getResourceName(activity, activity.object2);\n  const targetResourceObj = getResourceObject(activity, activity.object2);\n  const sourceResourceObj = getResourceObject(activity, activity.object1);\n  const roleResource = getResourceObject(activity, 'role');\n  const eventText = generateEventText(activity);\n\n  function generateEventText(activity: ActivityStream): JSX.Element | string {\n    const { operation, object1, object2 } = activity;\n    const deletedResourceName = activity.changes?.name || null;\n    switch (operation) {\n      case 'create':\n      case 'update':\n      case 'delete': {\n        if (sourceResourceRoute && sourceResourceObj) {\n          // handle 'job' and 'workflow_job' and redirect to job output page\n          switch (object1) {\n            case 'job':\n              return (\n                <span>\n                  {`${operationText} ${object1} `}\n                  <Link\n                    to={getPageUrl(sourceResourceRoute, {\n                      params: { id: sourceResourceObj.id, job_type: 'playbook' },\n                    })}\n                    data-cy=\"source-resource-detail\"\n                  >\n                    {sourceResourceName}\n                  </Link>\n                </span>\n              );\n            case 'workflow_job':\n              return (\n                <span>\n                  {`${operationText} ${object1} `}\n                  <Link\n                    to={getPageUrl(sourceResourceRoute, {\n                      params: { id: sourceResourceObj.id, job_type: 'workflow' },\n                    })}\n                    data-cy=\"source-resource-detail\"\n                  >\n                    {sourceResourceName}\n                  </Link>\n                </span>\n              );\n            case 'inventory':\n              return (\n                <span>\n                  {' '}\n                  {`${operationText} ${object1} `}\n                  <Link\n                    to={getPageUrl(sourceResourceRoute, {\n                      params: {\n                        id: sourceResourceObj.id,\n                        inventory_type: INVENTORYURLPATHS[sourceResourceObj.kind],\n                      },\n                    })}\n                    data-cy=\"source-resource-detail\"\n                  >\n                    {sourceResourceName}\n                  </Link>\n                </span>\n              );\n          }\n          return (\n            <span>\n              {`${operationText} ${object1} `}\n              <Link\n                to={getPageUrl(sourceResourceRoute, { params: { id: sourceResourceObj.id } })}\n                data-cy=\"source-resource-detail\"\n              >\n                {sourceResourceName}\n              </Link>\n            </span>\n          );\n        }\n        return `${operationText} ${object1} ${sourceResourceName}${\n          deletedResourceName && deletedResourceName !== sourceResourceName\n            ? ` ${deletedResourceName}`\n            : ''\n        }`;\n      }\n      case 'disassociate': {\n        if (targetResourceRoute && sourceResourceRoute && sourceResourceObj) {\n          return (\n            <span>\n              {`${operationText} ${object1} `}\n              {sourceResourceRoute && (\n                <Link\n                  to={getPageUrl(sourceResourceRoute, {\n                    params: { id: sourceResourceObj.id },\n                  })}\n                  data-cy=\"source-resource-detail\"\n                >\n                  {sourceResourceName}\n                </Link>\n              )}\n              {roleResource && ` ${roleResource.role_field} `}\n              {!sourceResourceRoute && <span>{sourceResourceName}</span>}\n              {` from ${object2} `}\n              {targetResourceRoute && targetResourceObj && (\n                <Link\n                  to={getPageUrl(targetResourceRoute, {\n                    params: {\n                      id: targetResourceObj.id,\n                    },\n                  })}\n                  data-cy=\"target-resource-detail\"\n                >\n                  {targetResourceName}\n                </Link>\n              )}\n              {!targetResourceRoute && <span>{targetResourceName}</span>}\n            </span>\n          );\n        }\n        return (\n          <span>\n            {`${operationText} ${object1} ${sourceResourceName}`}\n            {roleResource && `${roleResource.role_field}`} {`from ${object2} ${targetResourceName}`}\n          </span>\n        );\n      }\n      case 'associate': {\n        if (targetResourceRoute && sourceResourceRoute && sourceResourceObj) {\n          return (\n            <span>\n              {`${operationText} ${object1} `}\n              {sourceResourceRoute && (\n                <Link\n                  to={getPageUrl(sourceResourceRoute, {\n                    params: { id: sourceResourceObj.id },\n                  })}\n                  data-cy=\"source-resource-detail\"\n                >\n                  {sourceResourceName}\n                </Link>\n              )}\n              {roleResource && ` ${roleResource.role_field} `}\n              {!sourceResourceRoute && <span>{sourceResourceName}</span>}\n              {` to ${object2} `}\n              {targetResourceRoute && targetResourceObj && (\n                <Link\n                  to={getPageUrl(targetResourceRoute, {\n                    params: {\n                      id: targetResourceObj.id,\n                    },\n                  })}\n                  data-cy=\"target-resource-detail\"\n                >\n                  {targetResourceName}\n                </Link>\n              )}\n              {!targetResourceRoute && <span>{targetResourceName}</span>}\n            </span>\n          );\n        }\n        return (\n          <span>\n            {`${operationText} ${object1} ${sourceResourceName}`}\n            {roleResource && `${roleResource.role_field}`} {`to ${object2} ${targetResourceName}`}\n          </span>\n        );\n      }\n      default: {\n        // Default case if no specific event text is matched\n        return `Event summary not available`;\n      }\n    }\n  }\n\n  return <span>{eventText}</span>;\n};\n","import React from 'react';\nimport { TextCell, useGetPageUrl } from '../../../../../framework';\nimport { ActivityStream } from '../../../interfaces/ActivityStream';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useTranslation } from 'react-i18next';\n\ninterface ActivityStreamInitiatedByCellProps {\n  item: ActivityStream;\n  options?: { disableLinks?: boolean };\n}\n\nexport const ActivityStreamInitiatedByCell: React.FC<ActivityStreamInitiatedByCellProps> = ({\n  item,\n  options,\n}) => {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n\n  const actorId = item.summary_fields?.actor?.id;\n  const actorUsername = item.summary_fields?.actor?.username;\n\n  const pageUrl = getPageUrl(AwxRoute.UserDetails, { params: { id: actorId } });\n\n  if (actorId) {\n    return (\n      <TextCell\n        text={actorUsername ?? ''}\n        to={pageUrl}\n        disableLinks={options?.disableLinks}\n        data-cy=\"initiated-by\"\n      />\n    );\n  } else if (item.summary_fields?.actor) {\n    return <span>{t(`${actorUsername} (deleted)`)}</span>;\n  } else {\n    return <span>{t('system')}</span>;\n  }\n};\n","import { Button, Modal, ModalVariant } from '@patternfly/react-core';\nimport { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ActivityStream } from '../../../interfaces/ActivityStream';\nimport { ActivityStreamInitiatedByCell } from '../components/ActivityStreamInitiatedByCell';\nimport { ActivityDescription } from '../components/ActivityDescription';\nimport { PageDetail, PageDetails, usePageDialog } from '../../../../../framework';\nimport { PageDetailCodeEditor } from '../../../../../framework/PageDetails/PageDetailCodeEditor';\nimport { formatDateString } from '../../../../../framework/utils/formatDateString';\n\nexport interface ActivityStreamModalProps {\n  activity: ActivityStream;\n  onClose?: () => void;\n}\n\nexport function ActivityStreamDialog({ activity }: ActivityStreamModalProps) {\n  const { t } = useTranslation();\n  const [_, setDialog] = usePageDialog();\n  const onClose = () => setDialog(undefined);\n\n  return (\n    <Modal\n      title={t('Event details')}\n      data-cy=\"activity-stream-event-modal\"\n      aria-label={t('Event details')}\n      isOpen\n      hasNoBodyWrapper\n      onClose={onClose}\n      variant={ModalVariant.medium}\n      actions={[\n        <Button key=\"cancel\" variant=\"primary\" onClick={onClose}>\n          {t('Close')}\n        </Button>,\n      ]}\n    >\n      <PageDetails>\n        <PageDetail label={t('Time')}>{formatDateString(activity.timestamp)}</PageDetail>\n        <PageDetail label={t('Initiated by')}>\n          <ActivityStreamInitiatedByCell item={activity} />\n        </PageDetail>\n        {activity.object1 === 'setting' && activity.summary_fields?.setting && (\n          <PageDetail label={t('Setting category')}>\n            {activity.summary_fields.setting[0].category}\n          </PageDetail>\n        )}\n        {activity.object1 === 'setting' && activity.summary_fields?.setting && (\n          <PageDetail label={t('Setting name')}>\n            {activity.summary_fields.setting[0].name}\n          </PageDetail>\n        )}\n        <PageDetail label={t('Action')}>\n          <ActivityDescription activity={activity} />\n        </PageDetail>\n      </PageDetails>\n      {activity.changes && (\n        <PageDetails numberOfColumns=\"single\">\n          <PageDetailCodeEditor\n            label={t('Changes')}\n            value={JSON.stringify(activity.changes)}\n            showCopyToClipboard={true}\n          />\n        </PageDetails>\n      )}\n    </Modal>\n  );\n}\n\nexport function useActivityStreamDialog() {\n  const [_, setDialog] = usePageDialog();\n  const [props, setProps] = useState<ActivityStreamModalProps>();\n  useEffect(() => {\n    if (props) {\n      const onCloseHandler = () => {\n        setProps(undefined);\n        props.onClose?.();\n      };\n      setDialog(<ActivityStreamDialog {...props} onClose={onCloseHandler} />);\n    } else {\n      setDialog(undefined);\n    }\n  }, [props, setDialog]);\n  return setProps;\n}\n","import { useTranslation } from 'react-i18next';\nimport { PageHeader, PageLayout, PageTable } from '../../../../framework';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { useAwxConfig } from '../../common/useAwxConfig';\nimport { useAwxView } from '../../common/useAwxView';\nimport { useGetDocsUrl } from '../../common/util/useGetDocsUrl';\nimport { useActivityStreamColumns } from './hooks/useActivityStreamColumns';\nimport { ActivityStream } from '../../interfaces/ActivityStream';\nimport { useActivityStreamActions } from './hooks/useActivityStreamActions';\nimport { useActivityStreamFilter } from './hooks/useActivityStreamFilters';\n\nexport function ActivityStreams() {\n  const { t } = useTranslation();\n  const product: string = process.env.PRODUCT ?? t('AWX');\n  const toolbarFilters = useActivityStreamFilter();\n  const tableColumns = useActivityStreamColumns();\n\n  const view = useAwxView<ActivityStream>({\n    url: awxAPI`/activity_stream/`,\n    toolbarFilters,\n    tableColumns,\n  });\n  const rowActions = useActivityStreamActions();\n  const config = useAwxConfig();\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Activity Stream')}\n        titleHelpTitle={t('Activity Stream')}\n        titleHelp={t(\n          `An activity stream shows all changes for a particular object. For each change, the activity stream shows the time of the event, the user that initiated the event, and the action.`,\n          { product }\n        )}\n        titleDocLink={useGetDocsUrl(config, 'activityStream')}\n        description={t(\n          `An activity stream shows all changes for a particular object. For each change, the activity stream shows the time of the event, the user that initiated the event, and the action.`,\n          { product }\n        )}\n      />\n      <PageTable\n        id=\"awx-activity-stream\"\n        toolbarFilters={toolbarFilters}\n        tableColumns={tableColumns}\n        rowActions={rowActions}\n        errorStateTitle={t('Error loading activity stream')}\n        emptyStateTitle={t('There are currently no activity streams')}\n        emptyStateDescription={t(\n          'Past and pending activity stream will appear here when available'\n        )}\n        {...view}\n        defaultSubtitle={t('Activity Stream')}\n      />\n    </PageLayout>\n  );\n}\n","import { useMemo } from 'react';\nimport {\n  useInitiatedByToolbarFilter,\n  useKeywordToolbarFilter,\n} from '../../../common/awx-toolbar-filters';\nimport { IToolbarFilter, ToolbarFilterType } from '../../../../../framework';\nimport { useDynamicToolbarFilters } from '../../../common/useDynamicFilters';\n\nexport function useActivityStreamFilter() {\n  const keywordToolbarFilter = useKeywordToolbarFilter();\n  const initiatedByToolbarFilter = useInitiatedByToolbarFilter();\n  const typeToolbarFilter = useMemo<IToolbarFilter>(\n    () => ({\n      type: ToolbarFilterType.SingleSelect,\n      key: 'type',\n      query: 'object1__in',\n      label: 'Type',\n      options: [\n        { label: 'All Activity', value: '' },\n        { label: 'Jobs', value: 'job' },\n        { label: 'Schedules', value: 'schedule' },\n        { label: 'Workflow Approvals', value: 'workflow_approval', group: 'Administration' },\n        {\n          label: 'Templates',\n          value: 'job_template+workflow_job_template+workflow_job_template_node',\n        },\n        { label: 'Credentials', value: 'credential', group: 'Access' },\n        { label: 'Projects', value: 'project' },\n        { label: 'Inventories', value: 'inventory', group: 'Infrastructure' },\n        { label: 'Hosts', value: 'host', group: 'Infrastructure' },\n        { label: 'Organizations', value: 'organization', group: 'Access' },\n        { label: 'Users', value: 'user', group: 'Access' },\n        { label: 'Teams', value: 'team', group: 'Access' },\n        { label: 'Credential Types', value: 'credential_type', group: 'Access' },\n        {\n          label: 'Notification Templates',\n          value: 'notification_template',\n          group: 'Administration',\n        },\n        { label: 'Instances', value: 'instance', group: 'Infrastructure' },\n        { label: 'Instance Groups', value: 'instance_group', group: 'Infrastructure' },\n        {\n          label: 'Applications and Tokens',\n          value: 'o_auth2_application',\n          group: 'Administration',\n        },\n        {\n          label: 'Execution Environments',\n          value: 'execution_environment',\n          group: 'Infrastructure',\n        },\n        { label: 'Settings', value: 'setting', group: 'Administration' },\n      ],\n      placeholder: 'Filter by type',\n      isPinned: true,\n    }),\n    []\n  );\n  const toolbarFilters = useDynamicToolbarFilters({\n    optionsPath: 'activity_stream',\n    preFilledValueKeys: {\n      id: {\n        apiPath: 'activity_stream',\n      },\n    },\n    additionalFilters: [keywordToolbarFilter, initiatedByToolbarFilter, typeToolbarFilter],\n    preSortedKeys: ['keyword', 'initiated-by', 'id'],\n  });\n  return toolbarFilters;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ColumnModalOption, DateTimeCell, ITableColumn } from '../../../../../framework';\nimport { ActivityStream } from '../../../interfaces/ActivityStream';\nimport { ActivityDescription } from '../components/ActivityDescription';\nimport { ActivityStreamInitiatedByCell } from '../components/ActivityStreamInitiatedByCell';\n\nexport function useActivityStreamColumns(options?: {\n  disableSort?: boolean;\n  disableLinks?: boolean;\n}) {\n  const { t } = useTranslation();\n\n  const tableColumns = useMemo<ITableColumn<ActivityStream>[]>(\n    () => [\n      {\n        header: t('Time'),\n        cell: (activity_stream: ActivityStream) =>\n          activity_stream.timestamp && <DateTimeCell value={activity_stream.timestamp} />,\n        sort: 'timestamp',\n        list: 'secondary',\n        defaultSortDirection: 'desc',\n        modal: ColumnModalOption.hidden,\n      },\n      {\n        header: t('Initiated by'),\n        cell: (activity_stream: ActivityStream) => (\n          <ActivityStreamInitiatedByCell item={activity_stream} options={options} />\n        ),\n        sort: 'actor__username',\n        list: 'secondary',\n      },\n      {\n        header: t('Event'),\n        cell: (activity_stream: ActivityStream) => (\n          <ActivityDescription activity={activity_stream} />\n        ),\n        sort: undefined,\n        list: 'secondary',\n        fullWidth: true,\n      },\n    ],\n    [options, t]\n  );\n  return tableColumns;\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport { SearchPlusIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { IPageAction, PageActionSelection, PageActionType } from '../../../../../framework';\nimport { ActivityStream } from '../../../interfaces/ActivityStream';\nimport { useActivityStreamDialog } from './useActivityStreamDialog';\n\nexport function useActivityStreamActions() {\n  const { t } = useTranslation();\n  const showActivityStreamDialog = useActivityStreamDialog();\n\n  return useMemo(() => {\n    const actions: IPageAction<ActivityStream>[] = [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        icon: SearchPlusIcon,\n        label: t('View event details'),\n        onClick: (activity: ActivityStream) => showActivityStreamDialog({ activity }),\n      },\n    ];\n    return actions;\n  }, [t, showActivityStreamDialog]);\n}\n","import { useBulkActionDialog } from '../../../framework/PageDialogs/BulkActionDialog';\nimport { awxErrorAdapter } from './adapters/awxErrorAdapter';\n\nexport const useAwxBulkActionDialog = <T extends object>() =>\n  useBulkActionDialog<T>(awxErrorAdapter);\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkActionDialog } from '../../../common/useAwxBulkActionDialog';\nimport { AwxUser } from '../../../interfaces/User';\nimport { type ResourceType } from '../../common/types';\n\nexport function useAddUsersToResources() {\n  const { t } = useTranslation();\n  const userProgressDialog = useAwxBulkActionDialog<AwxUser>();\n  const postRequest = usePostRequest();\n  const addUserToTeams = useCallback(\n    (users: AwxUser[], resources: ResourceType[], onComplete?: (users: AwxUser[]) => void) => {\n      userProgressDialog({\n        title: t('Adding users', { count: resources.length }),\n        keyFn: (user: AwxUser) => user.id,\n        items: users,\n        actionColumns: [{ header: 'User', cell: (user: AwxUser) => user.username }],\n        actionFn: async (user: AwxUser, signal: AbortSignal) => {\n          for (const resource of resources) {\n            await postRequest(\n              awxAPI`/users/${user.id.toString()}/roles/`,\n              { id: resource.summary_fields.object_roles.member_role.id },\n              signal\n            );\n          }\n        },\n        processingText: t('Adding users...', { count: resources.length }),\n        onComplete,\n      });\n    },\n    [userProgressDialog, t, postRequest]\n  );\n  return addUserToTeams;\n}\n","import { Text, Label } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport function UserType<\n  T extends {\n    is_superuser?: boolean | null;\n    is_system_auditor?: boolean | null;\n  },\n>(props: { user: T }) {\n  const { user } = props;\n  const { t } = useTranslation();\n  if (user.is_superuser) {\n    return <Label>{t('System administrator')}</Label>;\n  }\n  if (user.is_system_auditor) {\n    return <Label>{t('System auditor')}</Label>;\n  }\n  return <Text>{t('Normal user')}</Text>;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ITableColumn, TextCell, useGetPageUrl } from '../../../../../framework';\nimport { useCreatedColumn } from '../../../../common/columns';\nimport { AwxUser } from '../../../interfaces/User';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { UserType } from '../components/UserType';\n\nexport function useUsersColumns(options?: { disableLinks?: boolean; disableSort?: boolean }) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const disableLinks = options?.disableLinks || false;\n\n  const createdColumn = useCreatedColumn(options);\n  const tableColumns = useMemo<ITableColumn<AwxUser>[]>(\n    () => [\n      {\n        header: t('Username'),\n        cell: (user) => (\n          <TextCell\n            text={user.username}\n            to={\n              disableLinks\n                ? undefined\n                : getPageUrl(AwxRoute.UserDetails, { params: { id: user.id.toString() } })\n            }\n          />\n        ),\n        card: 'name',\n        list: 'name',\n        sort: 'username',\n        maxWidth: 200,\n      },\n      {\n        header: t('User type'),\n        cell: (user) => <UserType user={user} />,\n        card: 'subtitle',\n        list: 'subtitle',\n      },\n      {\n        header: t('First name'),\n        type: 'text',\n        value: (user) => user.first_name,\n        sort: 'first_name',\n      },\n      {\n        header: t('Last name'),\n        type: 'text',\n        value: (user) => user.last_name,\n        sort: 'last_name',\n      },\n      {\n        header: t('Email'),\n        type: 'text',\n        value: (user) => user.email,\n        sort: 'email',\n      },\n      {\n        ...createdColumn,\n        sort: undefined,\n      },\n    ],\n    [createdColumn, getPageUrl, t, disableLinks]\n  );\n  return tableColumns;\n}\n","import { useDynamicToolbarFilters } from '../../../common/useDynamicFilters';\n\nexport function useUsersFilters() {\n  const toolbarFilters = useDynamicToolbarFilters({\n    optionsPath: 'users',\n    preSortedKeys: ['username', 'first_name', 'last_name', 'email', 'id'],\n    preFilledValueKeys: {\n      id: {\n        apiPath: 'users',\n      },\n    },\n  });\n  return toolbarFilters;\n}\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { usePageDialog } from '../../../../../framework';\nimport { MultiSelectDialog } from '../../../../../framework/PageDialogs/MultiSelectDialog';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxView } from '../../../common/useAwxView';\nimport { AwxUser } from '../../../interfaces/User';\nimport { useUserAndTeamRolesLists } from '../../common/useUserAndTeamRolesLists';\nimport { useUsersColumns } from './useUsersColumns';\nimport { useUsersFilters } from './useUsersFilters';\n\nfunction SelectUsers(props: {\n  accessUrl?: string;\n  title: string;\n  onSelect: (users: AwxUser[]) => void;\n  confirmText?: string;\n}) {\n  const { t } = useTranslation();\n  const toolbarFilters = useUsersFilters();\n  const tableColumns = useUsersColumns({ disableLinks: true });\n  const view = useAwxView<AwxUser>({\n    url: props.accessUrl ?? awxAPI`/users/`,\n    toolbarFilters,\n    tableColumns,\n    disableQueryString: true,\n  });\n  useUserAndTeamRolesLists(view.pageItems as AwxUser[]);\n\n  return (\n    <MultiSelectDialog\n      title={props.title}\n      onSelect={props.onSelect}\n      toolbarFilters={toolbarFilters}\n      tableColumns={tableColumns}\n      view={view}\n      confirmText={props.confirmText || t('Add user(s)')}\n    />\n  );\n}\n\nexport function useSelectUsers() {\n  const [_, setDialog] = usePageDialog();\n  const openSelectUsers = useCallback(\n    (\n      title: string,\n      onSelect: (users: AwxUser[]) => void,\n      confirmText?: string,\n      accessUrl?: string\n    ) => {\n      setDialog(\n        <SelectUsers\n          accessUrl={accessUrl}\n          title={title}\n          onSelect={onSelect}\n          confirmText={confirmText}\n        />\n      );\n    },\n    [setDialog]\n  );\n  return openSelectUsers;\n}\n","import { AccessRole, AwxUser } from '../../interfaces/User';\n\ntype Access = {\n  descendant_roles: string[];\n  role: AccessRole;\n};\n\n/**\n * Contruct the user_roles and team_roles lists for a user based on their access\n */\nexport function useUserAndTeamRolesLists(users: AwxUser[]) {\n  function sortRoles(access: Access, user: AwxUser) {\n    const { role } = access;\n    if (role.team_id) {\n      user.team_roles?.push(role);\n    } else {\n      user.user_roles?.push(role);\n    }\n  }\n\n  if (users?.length > 0) {\n    for (const user of users) {\n      user.team_roles = [];\n      user.user_roles = [];\n      user.summary_fields?.direct_access?.forEach((access) => sortRoles(access, user));\n      user.summary_fields?.indirect_access?.forEach((access) => sortRoles(access, user));\n    }\n  }\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { compareStrings } from '../../../../../framework';\nimport { useNameColumn } from '../../../../common/columns';\nimport { getItemKey, requestDelete } from '../../../../common/crud/Data';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { Organization } from '../../../interfaces/Organization';\nimport { useOrganizationsColumns } from '../Organizations';\n\nexport function useDeleteOrganizations(onComplete: (organizations: Organization[]) => void) {\n  const { t } = useTranslation();\n  const confirmationColumns = useOrganizationsColumns({ disableLinks: true, disableSort: true });\n  const deleteActionNameColumn = useNameColumn({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo(() => [deleteActionNameColumn], [deleteActionNameColumn]);\n  const bulkAction = useAwxBulkConfirmation<Organization>();\n  const deleteOrganizations = (organizations: Organization[]) => {\n    bulkAction({\n      title: t('Permanently delete organizations', { count: organizations.length }),\n      confirmText: t('Yes, I confirm that I want to delete these {{count}} organizations.', {\n        count: organizations.length,\n      }),\n      actionButtonText: t('Delete organization', { count: organizations.length }),\n      items: organizations.sort((l, r) => compareStrings(l.name, r.name)),\n      keyFn: getItemKey,\n      isDanger: true,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: (organization: Organization, signal) =>\n        requestDelete(awxAPI`/organizations/${organization.id.toString()}/`, signal),\n    });\n  };\n  return deleteOrganizations;\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport { MinusCircleIcon, PencilAltIcon, PlusCircleIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IPageAction,\n  ITableColumn,\n  PageActionSelection,\n  PageActionType,\n  PageHeader,\n  PageLayout,\n  PageTable,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { usePersistentFilters } from '../../../common/PersistentFilters';\nimport {\n  useCreatedColumn,\n  useDescriptionColumn,\n  useIdColumn,\n  useModifiedColumn,\n  useNameColumn,\n} from '../../../common/columns';\nimport { ActivityStreamIcon } from '../../common/ActivityStreamIcon';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport {\n  useCreatedByToolbarFilter,\n  useModifiedByToolbarFilter,\n} from '../../common/awx-toolbar-filters';\nimport { useAwxConfig } from '../../common/useAwxConfig';\nimport { useAwxView } from '../../common/useAwxView';\nimport { useDynamicToolbarFilters } from '../../common/useDynamicFilters';\nimport { useGetDocsUrl } from '../../common/util/useGetDocsUrl';\nimport { Organization } from '../../interfaces/Organization';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { useSelectUsersAddOrganizations } from '../users/hooks/useSelectUsersAddOrganizations';\nimport { useSelectUsersRemoveOrganizations } from '../users/hooks/useSelectUsersRemoveOrganizations';\nimport { useDeleteOrganizations } from './hooks/useDeleteOrganizations';\n\nexport function Organizations() {\n  const { t } = useTranslation();\n  const product: string = process.env.PRODUCT ?? t('AWX');\n  const pageNavigate = usePageNavigate();\n  const getPageUrl = useGetPageUrl();\n  usePersistentFilters('organizations');\n  const config = useAwxConfig();\n\n  const toolbarFilters = useOrganizationsFilters();\n\n  const tableColumns = useOrganizationsColumns();\n\n  const view = useAwxView<Organization>({\n    url: awxAPI`/organizations/`,\n    toolbarFilters,\n    tableColumns,\n  });\n\n  const deleteOrganizations = useDeleteOrganizations(view.unselectItemsAndRefresh);\n\n  const selectUsersAddOrganizations = useSelectUsersAddOrganizations();\n  const selectUsersRemoveOrganizations = useSelectUsersRemoveOrganizations();\n\n  const toolbarActions = useMemo<IPageAction<Organization>[]>(\n    () => [\n      {\n        type: PageActionType.Link,\n        selection: PageActionSelection.None,\n        isPinned: true,\n        variant: ButtonVariant.primary,\n        icon: PlusCircleIcon,\n        label: t('Create organization'),\n        href: getPageUrl(AwxRoute.CreateOrganization),\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: PlusCircleIcon,\n        label: t('Add users to organizations'),\n        onClick: () => selectUsersAddOrganizations(view.selectedItems),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: MinusCircleIcon,\n        label: t('Remove users from organizations'),\n        onClick: () => selectUsersRemoveOrganizations(view.selectedItems),\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: TrashIcon,\n        label: t('Delete organizations'),\n        onClick: deleteOrganizations,\n        isDanger: true,\n      },\n    ],\n    [\n      t,\n      getPageUrl,\n      deleteOrganizations,\n      selectUsersAddOrganizations,\n      view.selectedItems,\n      selectUsersRemoveOrganizations,\n    ]\n  );\n\n  const rowActions = useMemo<IPageAction<Organization>[]>(() => {\n    const actions: IPageAction<Organization>[] = [\n      {\n        type: PageActionType.Link,\n        selection: PageActionSelection.Single,\n        isPinned: true,\n        icon: PencilAltIcon,\n        label: t('Edit organization'),\n        href: (organization) => {\n          return getPageUrl(AwxRoute.EditOrganization, { params: { id: organization.id } });\n        },\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: PlusCircleIcon,\n        label: t('Add users to organizations'),\n        onClick: (organization) => selectUsersAddOrganizations([organization]),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: MinusCircleIcon,\n        label: t('Remove users from organizations'),\n        onClick: (organization) => selectUsersRemoveOrganizations([organization]),\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: TrashIcon,\n        label: t('Delete organization'),\n        onClick: (organization) => deleteOrganizations([organization]),\n        isDanger: true,\n      },\n    ];\n    return actions;\n  }, [\n    t,\n    getPageUrl,\n    selectUsersAddOrganizations,\n    selectUsersRemoveOrganizations,\n    deleteOrganizations,\n  ]);\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Organizations')}\n        titleHelpTitle={t('Organizations')}\n        titleHelp={t(\n          `An organization is a logical collection of users, teams, projects, and inventories, and is the highest level in the {{product}} object hierarchy.`,\n          { product }\n        )}\n        titleDocLink={useGetDocsUrl(config, 'organizations')}\n        description={t(\n          `An organization is a logical collection of users, teams, projects, and inventories, and is the highest level in the {{product}} object hierarchy.`,\n          { product }\n        )}\n        headerActions={<ActivityStreamIcon type={'organization'} />}\n      />\n      <PageTable<Organization>\n        id=\"awx-organizations-table\"\n        toolbarFilters={toolbarFilters}\n        toolbarActions={toolbarActions}\n        tableColumns={tableColumns}\n        rowActions={rowActions}\n        errorStateTitle={t('Error loading organizations')}\n        emptyStateTitle={t('No organizations yet')}\n        emptyStateDescription={t('To get started, create an organization.')}\n        emptyStateButtonIcon={<PlusCircleIcon />}\n        emptyStateButtonText={t('Create organization')}\n        emptyStateButtonClick={() => pageNavigate(AwxRoute.CreateOrganization)}\n        {...view}\n        defaultSubtitle={t('Organization')}\n      />\n    </PageLayout>\n  );\n}\n\nexport function useOrganizationsFilters() {\n  const createdByToolbarFilter = useCreatedByToolbarFilter();\n  const modifiedByToolbarFilter = useModifiedByToolbarFilter();\n  const toolbarFilters = useDynamicToolbarFilters({\n    optionsPath: 'organizations',\n    preSortedKeys: ['name', 'description', 'created-by', 'modified-by'],\n    preFilledValueKeys: {\n      name: {\n        apiPath: 'organizations',\n      },\n      id: {\n        apiPath: 'organizations',\n      },\n    },\n    additionalFilters: [createdByToolbarFilter, modifiedByToolbarFilter],\n  });\n  return toolbarFilters;\n}\n\nexport function useOrganizationsColumns(options?: {\n  disableSort?: boolean;\n  disableLinks?: boolean;\n}) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const getPageUrl = useGetPageUrl();\n  const idColumn = useIdColumn();\n  const nameClick = useCallback(\n    (organization: Organization) =>\n      pageNavigate(AwxRoute.OrganizationDetails, { params: { id: organization.id } }),\n    [pageNavigate]\n  );\n  const descriptionColumn = useDescriptionColumn();\n  const nameColumn = useNameColumn({\n    ...options,\n    onClick: nameClick,\n  });\n  const createdColumn = useCreatedColumn(options);\n  const modifiedColumn = useModifiedColumn(options);\n  const tableColumns = useMemo<ITableColumn<Organization>[]>(\n    () => [\n      idColumn,\n      nameColumn,\n      descriptionColumn,\n      {\n        header: t('Members'),\n        type: 'count',\n        value: (organization) => organization.summary_fields?.related_field_counts?.users,\n      },\n      {\n        header: t('Teams'),\n        type: 'count',\n        value: (organization) => organization.summary_fields?.related_field_counts?.teams,\n      },\n      {\n        header: t('Admins'),\n        type: 'count',\n        value: (organization) => organization.summary_fields?.related_field_counts?.admins,\n      },\n      {\n        header: t('Inventories'),\n        type: 'count',\n        value: (organization) => organization.summary_fields?.related_field_counts?.inventories,\n      },\n      {\n        header: t('Projects'),\n        type: 'count',\n        value: (organization) => organization.summary_fields?.related_field_counts?.projects,\n      },\n      {\n        header: t('Job templates'),\n        type: 'count',\n        value: (organization) => organization.summary_fields?.related_field_counts?.job_templates,\n      },\n      {\n        header: t('Hosts'),\n        type: 'count',\n        value: (organization) => organization.summary_fields?.related_field_counts?.hosts,\n      },\n      {\n        id: 'execution-environment',\n        header: t('Default environment'),\n        type: 'text',\n        value: (organization) => organization.summary_fields?.default_environment?.name,\n        to: (organization) =>\n          getPageUrl(AwxRoute.ExecutionEnvironmentDetails, {\n            params: { id: organization.summary_fields?.default_environment?.id },\n          }),\n      },\n      createdColumn,\n      modifiedColumn,\n    ],\n    [idColumn, nameColumn, descriptionColumn, t, createdColumn, modifiedColumn, getPageUrl]\n  );\n  return tableColumns;\n}\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Organization } from '../../../interfaces/Organization';\nimport { AwxUser } from '../../../interfaces/User';\nimport { useAddUsersToResources } from './useAddUsersToResources';\nimport { useSelectUsers } from './useSelectUsers';\n\nexport function useSelectUsersAddOrganizations() {\n  const { t } = useTranslation();\n  const selectUsers = useSelectUsers();\n  const addUsersToResources = useAddUsersToResources();\n  const selectUsersAddOrganizations = useCallback(\n    (organizations: Organization[]) => {\n      selectUsers(\n        t('Add users to organizations', { count: organizations.length }),\n        (users: AwxUser[]) => {\n          addUsersToResources(users, organizations);\n        }\n      );\n    },\n    [addUsersToResources, selectUsers, t]\n  );\n  return selectUsersAddOrganizations;\n}\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Organization } from '../../../interfaces/Organization';\nimport { AwxUser } from '../../../interfaces/User';\nimport { useRemoveUsersFromOrganizations } from './useRemoveUsersFromOrganizations';\nimport { useSelectUsers } from './useSelectUsers';\n\nexport function useSelectUsersRemoveOrganizations(onClose?: (users: AwxUser[]) => void) {\n  const { t } = useTranslation();\n  const selectUsers = useSelectUsers();\n  const removeUsersFromOrganizations = useRemoveUsersFromOrganizations(onClose);\n  const selectUsersRemoveOrganizations = useCallback(\n    (organizations: Organization[]) => {\n      selectUsers(\n        t('Remove users from organizations', { count: organizations.length }),\n        (users: AwxUser[]) => {\n          removeUsersFromOrganizations(users, organizations);\n        },\n        t('Remove user(s)')\n      );\n    },\n    [removeUsersFromOrganizations, selectUsers, t]\n  );\n  return selectUsersRemoveOrganizations;\n}\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkActionDialog } from '../../../common/useAwxBulkActionDialog';\nimport { Organization } from '../../../interfaces/Organization';\nimport { AwxUser } from '../../../interfaces/User';\n\nexport function useRemoveUsersFromOrganizations(onComplete?: (users: AwxUser[]) => void) {\n  const { t } = useTranslation();\n  const userProgressDialog = useAwxBulkActionDialog<AwxUser>();\n  const postRequest = usePostRequest();\n  const removeUserToOrganizations = useCallback(\n    (users: AwxUser[], organizations: Organization[]) => {\n      userProgressDialog({\n        title: t('Removing users from organizations', {\n          count: organizations.length,\n        }),\n        keyFn: (user: AwxUser) => user.id,\n        items: users,\n        actionColumns: [{ header: t('User'), cell: (user: AwxUser) => user.username }],\n        actionFn: async (user: AwxUser, signal: AbortSignal) => {\n          for (const organization of organizations) {\n            await postRequest(\n              awxAPI`/users/${user.id.toString()}/roles/`,\n              { id: organization.summary_fields.object_roles.member_role.id, disassociate: true },\n              signal\n            );\n          }\n        },\n        processingText: t('Removing users from organizations...', {\n          count: organizations.length,\n        }),\n        onComplete,\n      });\n    },\n    [userProgressDialog, t, onComplete, postRequest]\n  );\n  return removeUserToOrganizations;\n}\n","import { FieldPath, FieldValues } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { PageFormSingleSelectAwxResource } from '../../../common/PageFormSingleSelectAwxResource';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { Organization } from '../../../interfaces/Organization';\nimport { useOrganizationsColumns, useOrganizationsFilters } from '../Organizations';\n\n/**\n * A form input for selecting an organization.\n *\n * @example\n * ```tsx\n * <PageFormSelectOrganization<Organization> name=\"organization\" />\n * ```\n */\nexport function PageFormSelectOrganization<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: { name: TFieldName; isRequired?: boolean; isDisabled?: string; helperText?: string }) {\n  const { t } = useTranslation();\n  const organizationColumns = useOrganizationsColumns({ disableLinks: true });\n  const organizationFilters = useOrganizationsFilters();\n  return (\n    <PageFormSingleSelectAwxResource<Organization, TFieldValues, TFieldName>\n      name={props.name}\n      id=\"organization\"\n      label={t('Organization')}\n      placeholder={t('Select organization')}\n      queryPlaceholder={t('Loading organizations...')}\n      queryErrorText={t('Error loading organizations')}\n      isRequired={props.isRequired}\n      isDisabled={props.isDisabled}\n      helperText={props.helperText}\n      url={awxAPI`/organizations/`}\n      tableColumns={organizationColumns}\n      toolbarFilters={organizationFilters}\n    />\n  );\n}\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core/deprecated';\nimport React from 'react';\nimport { useController, useFormContext } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { PageFormGroup } from '../../../../../framework/PageForm/Inputs/PageFormGroup';\n\ninterface FieldOptions {\n  id: string;\n  label: string;\n  help_text?: string;\n}\n\ninterface BecomeMethodFieldProps {\n  fieldOptions: FieldOptions;\n  isRequired: boolean;\n}\n// This component was migrated from the previous UI version, see:\n// https://github.com/ansible/awx/blob/918d5b3565e5997bdbd57117b92852ba13bb55d6/awx/ui/src/screens/Credential/shared/CredentialFormFields/BecomeMethodField.js#L13\n\nexport function BecomeMethodField({ fieldOptions, isRequired }: BecomeMethodFieldProps) {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n  const {\n    field,\n    fieldState: { error },\n  } = useController({\n    name: `${fieldOptions.id}`,\n    control,\n    rules: { required: isRequired },\n  });\n\n  const value = field.value as string;\n  const onChange = field.onChange;\n\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [options, setOptions] = React.useState(\n    [\n      'sudo',\n      'su',\n      'pbrun',\n      'pfexec',\n      'dzdo',\n      'pmrun',\n      'runas',\n      'enable',\n      'doas',\n      'ksu',\n      'machinectl',\n      'sesu',\n    ].map((val) => ({ value: val }))\n  );\n\n  return (\n    <PageFormGroup\n      fieldId={`${fieldOptions.id}`}\n      helperTextInvalid={error ? error.message : ''}\n      label={fieldOptions.label}\n      labelHelp={fieldOptions.help_text}\n      isRequired={isRequired}\n    >\n      <Select\n        typeAheadAriaLabel={fieldOptions.label}\n        maxHeight={200}\n        variant={SelectVariant.typeahead}\n        onToggle={(event, isExpanded) => setIsOpen(isExpanded)}\n        onClear={() => onChange('')}\n        onSelect={(event, option) => {\n          onChange(option);\n          setIsOpen(false);\n        }}\n        isOpen={isOpen}\n        data-cy=\"select-become-method\"\n        id=\"select-become-method\"\n        selections={value}\n        isCreatable\n        onCreateOption={(option) => {\n          setOptions((prevOptions) => [...prevOptions, { value: option }]);\n          onChange(option);\n        }}\n        noResultsFoundText={t('No results found')}\n        createText={t('Create')}\n        clearSelectionsAriaLabel={t('Clear all')}\n        placeholderText={t('Select a become method')}\n        toggleAriaLabel={t('Options menu')}\n      >\n        {options.map((option) => (\n          <SelectOption\n            data-cy={`select-option-${option.value}`}\n            key={option.value}\n            value={option.value}\n          />\n        ))}\n      </Select>\n    </PageFormGroup>\n  );\n}\n","import { Button, Tooltip } from '@patternfly/react-core';\nimport { KeyIcon, UndoIcon } from '@patternfly/react-icons';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { PageFormFileUpload } from '../../../../../framework/PageForm/Inputs/PageFormFileUpload';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { Credential } from '../../../interfaces/Credential';\nimport { CredentialInputField, CredentialType } from '../../../interfaces/CredentialType';\nimport { CredentialPluginsInputSource } from '../CredentialPlugins/hooks/useCredentialPluginsDialog';\n\nexport function CredentialMultilineInput({\n  field,\n  requiredFields,\n  kind,\n  handleModalToggle,\n  accumulatedPluginValues,\n  setAccumulatedPluginValues,\n  setPluginsToDelete,\n  fieldInitialValue,\n}: {\n  field: CredentialInputField;\n  requiredFields: CredentialType['inputs']['required'];\n  kind: CredentialType['kind'];\n  handleModalToggle: () => void;\n  accumulatedPluginValues: CredentialPluginsInputSource[];\n  setAccumulatedPluginValues?: (values: CredentialPluginsInputSource[]) => void;\n  setPluginsToDelete?: React.Dispatch<React.SetStateAction<string[]>>;\n  fieldInitialValue?: string | boolean | number | null | undefined;\n}) {\n  const { t } = useTranslation();\n  const [shouldHideField, setShouldHideField] = useState(field.secret);\n  const { getValues, setValue, clearErrors } = useFormContext();\n  const watchedFieldValue = getValues();\n  const onClear = () => {\n    setValue(field.id, '', { shouldDirty: false });\n    clearErrors(field.id);\n    if (accumulatedPluginValues.some((cp) => cp.input_field_name === field.id)) {\n      setPluginsToDelete?.((prev: string[]) => [...prev, field.id]);\n    }\n    setAccumulatedPluginValues?.(\n      accumulatedPluginValues.filter((cp) => cp.input_field_name !== field.id)\n    );\n  };\n  const useGetSourceCredential = (id: number) => {\n    const { data } = useGetItem<Credential>(awxAPI`/credentials/`, id);\n    return data;\n  };\n  const sourceCredential = useGetSourceCredential(\n    accumulatedPluginValues.filter((cp) => cp.input_field_name === field.id)[0]?.source_credential\n  );\n\n  const handleIsDisabled = (field: CredentialInputField): boolean => {\n    let isDisabled = false;\n    accumulatedPluginValues.forEach((cp) => {\n      if (cp.input_field_name === field.id) {\n        isDisabled = true;\n      }\n    });\n    return isDisabled;\n  };\n\n  const handleHelperText = (field: CredentialInputField): string => {\n    let helperText = '';\n    accumulatedPluginValues.forEach((cp) => {\n      if (cp.input_field_name === field.id) {\n        helperText = t(\n          'This field will be retrieved from an external secret management system using the specified credential.'\n        );\n      }\n    });\n    return helperText;\n  };\n\n  const renderFieldValue = useCallback(\n    (field: CredentialInputField): string => {\n      let placeholder = 'Drag a file here or browse to upload';\n      accumulatedPluginValues.forEach((cp) => {\n        if (cp.input_field_name === field.id && sourceCredential) {\n          placeholder = t(`Value is managed by ${sourceCredential.kind}: ${sourceCredential.name}`);\n        }\n      });\n      return placeholder;\n    },\n    [accumulatedPluginValues, sourceCredential, t]\n  );\n\n  useEffect(() => {\n    // if field id matches accumulatedPluginValues input_field_name, set value to kind: credential name\n    if (accumulatedPluginValues.some((cp) => cp.input_field_name === field.id)) {\n      setValue(field.id, renderFieldValue(field), { shouldDirty: true });\n    }\n  }, [setValue, accumulatedPluginValues, renderFieldValue, field]);\n\n  const clearField = () => {\n    setValue(field.id, '', { shouldDirty: false });\n    setShouldHideField(!shouldHideField);\n  };\n  const hideField = () => {\n    setValue(field.id, fieldInitialValue, { shouldDirty: true });\n    setShouldHideField(!shouldHideField);\n    setAccumulatedPluginValues?.(\n      accumulatedPluginValues.filter((cp) => cp.input_field_name !== field.id)\n    );\n  };\n\n  return (\n    <>\n      <PageFormFileUpload\n        onClearClick={onClear}\n        key={field.id}\n        type=\"text\"\n        label={field.label}\n        name={`${field.id}`}\n        labelHelpTitle={field.label}\n        labelHelp={field.help_text}\n        helperText={handleHelperText(field)}\n        isRequired={requiredFields.includes(field.id)}\n        isReadOnly={handleIsDisabled(field)}\n        isDisabled={watchedFieldValue?.[field.id] === '$encrypted$'}\n        isClearButtonDisabled={\n          watchedFieldValue?.[field.id] === '$encrypted$' || !watchedFieldValue?.[field.id]\n        }\n        allowEditingUploadedText={true}\n        icon={\n          kind !== 'external' ? (\n            field.secret && watchedFieldValue?.[field.id] === '$encrypted$' ? (\n              <div style={{ display: 'grid' }}>\n                <Button\n                  icon={<KeyIcon />}\n                  variant=\"control\"\n                  onClick={handleModalToggle}\n                  isDisabled\n                />\n                <Tooltip content={t('Replace')}>\n                  <Button icon={<UndoIcon />} variant=\"control\" onClick={clearField} />\n                </Tooltip>\n              </div>\n            ) : field.secret &&\n              fieldInitialValue &&\n              fieldInitialValue === '$encrypted$' &&\n              watchedFieldValue?.[field.id] !== '$encrypted$' ? (\n              <div style={{ display: 'grid' }}>\n                <Button icon={<KeyIcon />} variant=\"control\" onClick={handleModalToggle} />\n                <Tooltip content={t('Revert')}>\n                  <Button icon={<UndoIcon />} variant=\"control\" onClick={hideField} />\n                </Tooltip>\n              </div>\n            ) : (\n              <Button icon={<KeyIcon />} variant=\"control\" onClick={handleModalToggle} />\n            )\n          ) : undefined\n        }\n      />\n    </>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { PageFormFileUpload } from '../../../../../framework/PageForm/Inputs/PageFormFileUpload';\nimport { useEffect, useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { FormHelperText, HelperTextItem } from '@patternfly/react-core';\n\ninterface GCEFileContents {\n  project_id?: string;\n  client_email?: string;\n  private_key?: string;\n}\n\nexport function GCEUploadField() {\n  const { t } = useTranslation();\n  const { setValue, clearErrors } = useFormContext();\n  const [GCEFileContents, setGCEFileContents] = useState<GCEFileContents>({});\n  const [uploadError, setUploadError] = useState<Error | undefined>(undefined);\n  const [isRejected, setIsRejected] = useState(false);\n  const onClear = () => {\n    setGCEFileContents({});\n    setUploadError(undefined);\n    setValue('project', '');\n    setValue('username', '');\n    setValue('ssh_key_data', '');\n  };\n  const handleFileRejected = () => {\n    setIsRejected(true);\n  };\n\n  useEffect(() => {\n    // Loop through JSON object and set the relevant fields\n    if (GCEFileContents.project_id) {\n      setValue('project', GCEFileContents.project_id);\n      clearErrors('project');\n    }\n    if (GCEFileContents.client_email) {\n      setValue('username', GCEFileContents.client_email);\n      clearErrors('username');\n    }\n    if (GCEFileContents.private_key) {\n      setValue('ssh_key_data', GCEFileContents.private_key);\n      clearErrors('ssh_key_data');\n    }\n  }, [GCEFileContents, setValue, clearErrors]);\n\n  return (\n    <>\n      <PageFormFileUpload\n        onClearClick={onClear}\n        key=\"credential-gce-file\"\n        name=\"credential-gce-file\"\n        fieldId=\"credential-gce-file\"\n        label={t('Service account JSON file')}\n        helperText={t(\n          'Select a JSON formatted service account key to autopopulate the following fields.'\n        )}\n        validated={uploadError ? 'error' : 'default'}\n        onInputChange={async (file) => {\n          try {\n            const fileText = await file.text();\n            const fileJSON = JSON.parse(fileText) as GCEFileContents;\n            setGCEFileContents(fileJSON);\n          } catch (error) {\n            setUploadError(error as Error);\n          }\n        }}\n        dropzoneProps={{\n          accept: { 'text/json': ['.json'] },\n          onDropRejected: handleFileRejected,\n        }}\n        additionalHelperText={\n          <FormHelperText>\n            <HelperTextItem variant={isRejected ? 'error' : 'default'}>\n              {isRejected ? t('File upload rejected. Please select a single .json file.') : null}\n            </HelperTextItem>\n          </FormHelperText>\n        }\n      />\n    </>\n  );\n}\n","import {\n  useCreatedByToolbarFilter,\n  useModifiedByToolbarFilter,\n} from '../../../common/awx-toolbar-filters';\nimport { useDynamicToolbarFilters } from '../../../common/useDynamicFilters';\n\nexport function useCredentialTypesFilters() {\n  const createdByToolbarFilter = useCreatedByToolbarFilter();\n  const modifiedByToolbarFilter = useModifiedByToolbarFilter();\n  const toolbarFilters = useDynamicToolbarFilters({\n    optionsPath: 'credential_types',\n    preSortedKeys: ['name', 'id', 'created-by', 'modified-by'],\n    preFilledValueKeys: {\n      name: {\n        apiPath: 'credential_types',\n      },\n      id: {\n        apiPath: 'credential_types',\n      },\n    },\n    additionalFilters: [createdByToolbarFilter, modifiedByToolbarFilter],\n  });\n  return toolbarFilters;\n}\n","import { Label, Split } from '@patternfly/react-core';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ColumnModalOption,\n  ColumnTableOption,\n  ITableColumn,\n  TextCell,\n  useGetPageUrl,\n} from '../../../../../framework';\nimport {\n  useCreatedColumn,\n  useDescriptionColumn,\n  useModifiedColumn,\n} from '../../../../common/columns';\nimport { CredentialType } from '../../../interfaces/CredentialType';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\nexport function useCredentialTypesColumns() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const descriptionColumn = useDescriptionColumn();\n  const createdColumn = useCreatedColumn();\n  const modifiedColumn = useModifiedColumn();\n\n  const tableColumns = useMemo<ITableColumn<CredentialType>[]>(\n    () => [\n      {\n        header: t('Name'),\n        cell: (credentialType) => (\n          <Split hasGutter>\n            <TextCell\n              text={credentialType.name}\n              to={getPageUrl(AwxRoute.CredentialTypeDetails, { params: { id: credentialType.id } })}\n            />\n            {credentialType.managed && <Label>{t('Read-only')}</Label>}\n          </Split>\n        ),\n        card: 'name',\n        list: 'name',\n        sort: 'name',\n        maxWidth: 200,\n      },\n      descriptionColumn,\n      {\n        header: t('Type'),\n        cell: (credentialType) =>\n          credentialType.managed ? <Label>{t('System provided')}</Label> : null,\n        table: ColumnTableOption.hidden,\n        card: 'hidden',\n        list: 'hidden',\n        sort: 'managed',\n        defaultSortDirection: 'desc',\n        defaultSort: true,\n        modal: ColumnModalOption.hidden,\n      },\n      createdColumn,\n      modifiedColumn,\n    ],\n    [descriptionColumn, getPageUrl, t, createdColumn, modifiedColumn]\n  );\n  return tableColumns;\n}\n","import { FieldPath, FieldValues } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { PageFormSingleSelectAwxResource } from '../../../common/PageFormSingleSelectAwxResource';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useCredentialTypesFilters } from '../../credential-types/hooks/useCredentialTypesFilters';\nimport { useCredentialTypesColumns } from '../../credential-types/hooks/useCredentialTypesColumns';\nimport { CredentialType } from '../../../interfaces/CredentialType';\n\n/**\n * A form input for selecting an credential type.\n *\n * @example\n * ```tsx\n * <PageFormSelectCredentialType name=\"credential_type\" />\n * ```\n */\nexport function PageFormSelectCredentialType<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: { name: TFieldName; isRequired?: boolean; isDisabled?: string; helperText?: string }) {\n  const { t } = useTranslation();\n  const toolbarFilters = useCredentialTypesFilters();\n  const tableColumns = useCredentialTypesColumns();\n  return (\n    <PageFormSingleSelectAwxResource<CredentialType, TFieldValues, TFieldName>\n      name={props.name}\n      id=\"credential_type\"\n      label={t('Credential type')}\n      placeholder={t('Select credential type')}\n      queryPlaceholder={t('Loading credential types...')}\n      queryErrorText={t('Error loading credential types')}\n      isRequired={props.isRequired}\n      isDisabled={props.isDisabled}\n      helperText={props.helperText}\n      url={awxAPI`/credential_types/`}\n      tableColumns={tableColumns}\n      toolbarFilters={toolbarFilters}\n    />\n  );\n}\n","import { FieldPath, FieldValues } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { PageFormSingleSelectAwxResource } from '../../../../common/PageFormSingleSelectAwxResource';\nimport { awxAPI } from '../../../../common/api/awx-utils';\nimport { useCredentialsFilters } from '../../hooks/useCredentialsFilters';\nimport { useCredentialsColumns } from '../../hooks/useCredentialsColumns';\nimport { Credential } from '../../../../interfaces/Credential';\n/**\n * A form input for selecting an external credential.\n *\n * @example\n * ```tsx\n * <PageFormExternalCredentialSelect<Credential> name=\"source_credential\" />\n * ```\n */\nexport function PageFormExternalCredentialSelect<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  isRequired?: boolean;\n  isDisabled?: string;\n  helperText?: string;\n  defaultValue?: Credential;\n}) {\n  const { t } = useTranslation();\n  const credentialColumns = useCredentialsColumns({ disableLinks: true });\n  const credentialFilters = useCredentialsFilters();\n  return (\n    <PageFormSingleSelectAwxResource<Credential, TFieldValues, TFieldName>\n      name={props.name}\n      id=\"credential\"\n      label={t('Credential')}\n      placeholder={t('Select credential')}\n      queryPlaceholder={t('Loading credentials...')}\n      queryErrorText={t('Error loading credentials')}\n      isRequired={props.isRequired}\n      isDisabled={props.isDisabled}\n      helperText={props.helperText}\n      url={awxAPI`/credentials/`}\n      queryParams={{ credential_type__kind: 'external' }}\n      tableColumns={credentialColumns}\n      toolbarFilters={credentialFilters}\n      defaultSelection={[]}\n    />\n  );\n}\n","import { Button } from '@patternfly/react-core';\nimport { CredentialPluginsForm } from '../CredentialPlugins/CredentialPlugins';\nimport { useTranslation } from 'react-i18next';\nimport { useFormContext } from 'react-hook-form';\n\nexport interface TestButtonProps {\n  handleTest: (data: CredentialPluginsForm) => Promise<void>;\n}\n\nexport function CredentialsTestButton(props: TestButtonProps) {\n  const { t } = useTranslation();\n  const {\n    getValues,\n    formState: { isValid },\n  } = useFormContext<CredentialPluginsForm>();\n  const getData = () => {\n    const formData = getValues();\n    void props.handleTest(formData);\n  };\n\n  return (\n    <Button variant=\"secondary\" onClick={getData} isDisabled={!isValid}>\n      {t('Test')}\n    </Button>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport {\n  PageFormSubmitHandler,\n  PageFormTextArea,\n  PageFormTextInput,\n  PageHeader,\n  PageLayout,\n} from '../../../../../framework';\nimport { PageFormSection } from '../../../../../framework/PageForm/Utils/PageFormSection';\nimport { PageFormExternalCredentialSelect } from './components/PageFormExternalCredentialSelect';\nimport { AwxPageForm } from '../../../common/AwxPageForm';\nimport { useWatch } from 'react-hook-form';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { CredentialType } from '../../../interfaces/CredentialType';\nimport { PageFormSingleSelect } from '../../../../../framework/PageForm/Inputs/PageFormSingleSelect';\nimport { Credential } from '../../../interfaces/Credential';\nimport { CredentialsTestButton } from '../utils/CredentialsTestButton';\n\nexport interface CredentialPluginsForm {\n  source_credential: number;\n  [key: string]: string | number;\n}\n\nexport interface CredentialsRetainInput {\n  metadata: Record<string, unknown>;\n}\n\nexport function CredentialPlugins({\n  onCancel,\n  handleSubmit,\n  handleTest,\n  defaultValues,\n}: {\n  onCancel: () => void;\n  handleSubmit: PageFormSubmitHandler<CredentialPluginsForm>;\n  handleTest: (data: CredentialPluginsForm) => Promise<void>;\n  defaultValues?: CredentialPluginsForm;\n}) {\n  const { t } = useTranslation();\n\n  const CredentialSubForm = () => {\n    const watchedCredentialTypeId = useWatch<{ source_credential: number }>({\n      name: 'source_credential',\n    });\n    const useCredentialFields = (credentialId: number) => {\n      const { data } = useGetItem<Credential>(awxAPI`/credentials/`, credentialId);\n      const { data: credentialType } = useGetItem<CredentialType>(\n        awxAPI`/credential_types/`,\n        data?.summary_fields?.credential_type?.id\n      );\n      return credentialType as CredentialType;\n    };\n\n    const credentialType = useCredentialFields(watchedCredentialTypeId);\n\n    if (!credentialType) {\n      return null;\n    }\n    return (\n      <PageFormSection title={t('Metadata')}>\n        {credentialType?.inputs?.metadata.map((input) => {\n          if ('choices' in input) {\n            return (\n              <PageFormSingleSelect\n                defaultValue={input?.default}\n                name={input.id}\n                key={input.id}\n                label={input.label}\n                placeholder={input.label}\n                labelHelp={input.help_text}\n                options={\n                  input.choices\n                    ? input.choices?.map((choice) => ({ label: choice, value: choice }))\n                    : []\n                }\n                isRequired={credentialType.inputs.required.includes(input.id)}\n              />\n            );\n          }\n          if (!input.multiline) {\n            return (\n              <PageFormTextInput\n                name={input.id}\n                key={input.id}\n                label={input.label}\n                type={'text'}\n                labelHelp={input.help_text}\n                isRequired={credentialType.inputs.required.includes(input.id)}\n              />\n            );\n          }\n          if (input.multiline) {\n            return (\n              <PageFormTextArea\n                name={input.id}\n                key={input.id}\n                label={input.label}\n                labelHelp={input.help_text}\n                isRequired={credentialType.inputs.required.includes(input.id)}\n              />\n            );\n          }\n        })}\n      </PageFormSection>\n    );\n  };\n  return (\n    <PageLayout>\n      <PageHeader title={t('Secret Management System')} />\n      <AwxPageForm\n        submitText={t('Finish')}\n        onSubmit={handleSubmit}\n        onCancel={onCancel}\n        defaultValue={defaultValues}\n        additionalActions={<CredentialsTestButton handleTest={handleTest} />}\n      >\n        <PageFormSection title={t('Select external credential')}>\n          <PageFormExternalCredentialSelect name=\"source_credential\" isRequired />\n        </PageFormSection>\n        <CredentialSubForm />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport {\n  IPageAlertToaster,\n  PageFormSubmitHandler,\n  usePageAlertToaster,\n  usePageDialogs,\n} from '../../../../../../framework';\nimport { AlertProps, Modal, ModalVariant } from '@patternfly/react-core';\nimport { useEffect, useState } from 'react';\nimport { CredentialType } from '../../../../interfaces/CredentialType';\nimport { CredentialPluginsForm, CredentialPlugins } from '../CredentialPlugins';\nimport { CredentialInputSource } from '../../../../interfaces/CredentialInputSource';\nimport { postRequest } from '../../../../../common/crud/Data';\nimport { awxAPI } from '../../../../common/api/awx-utils';\n\nexport interface CredentialPluginsInputSource\n  extends Omit<CredentialInputSource, 'target_credential' | 'summary_fields'> {}\n\nexport interface CredentialPluginsModalProps {\n  field: CredentialType['inputs']['fields'][0];\n  setCredentialPluginValues: (values: CredentialPluginsInputSource[]) => void;\n  onClose?: () => void;\n  accumulatedPluginValues?: CredentialPluginsInputSource[];\n}\n\nfunction CredentialPluginsModal(\n  props: CredentialPluginsModalProps & { alertToaster: IPageAlertToaster }\n) {\n  const { t } = useTranslation();\n  const onClose = () => {\n    props.onClose?.();\n  };\n\n  function getDefaultValues(): CredentialPluginsForm | undefined {\n    const pluginValues = props.accumulatedPluginValues?.find(\n      (plugin) => plugin.input_field_name === props.field.id\n    );\n    if (pluginValues) {\n      const { metadata, source_credential } = pluginValues;\n      return {\n        source_credential,\n        ...metadata,\n      };\n    } else {\n      return undefined;\n    }\n  }\n\n  const handleSubmit: PageFormSubmitHandler<CredentialPluginsForm> = (data) => {\n    return new Promise<void>((resolve, reject) => {\n      const { source_credential, ...rest } = data;\n      props.setCredentialPluginValues([\n        {\n          input_field_name: props.field.id,\n          metadata: {\n            ...rest,\n          },\n          source_credential: source_credential,\n        },\n      ]);\n      onClose();\n      try {\n        resolve();\n      } catch (error) {\n        reject(error);\n      }\n    });\n  };\n\n  const handleTest = (data: CredentialPluginsForm) => {\n    return new Promise<void>((resolve, reject) => {\n      const { source_credential, ...rest } = data;\n      const alert: AlertProps = {\n        variant: 'success',\n        title: t('Test passed.'),\n        timeout: 2000,\n      };\n\n      const payload = {\n        metadata: rest,\n      };\n\n      postRequest(awxAPI`/credentials/${String(source_credential)}/test/`, payload)\n        .then(() => {\n          props.alertToaster.addAlert(alert);\n        })\n        .catch((error) => {\n          props.alertToaster.addAlert({\n            variant: 'danger',\n            title: t('Something went wrong with the request to test this credential.'),\n            children: error instanceof Error && error.message,\n          });\n        });\n      try {\n        resolve();\n      } catch (error) {\n        reject(error);\n      }\n    });\n  };\n\n  return (\n    <Modal\n      aria-label={t('Credential Plugins')}\n      isOpen\n      onClose={onClose}\n      variant={ModalVariant.large}\n    >\n      <CredentialPlugins\n        onCancel={onClose}\n        handleSubmit={handleSubmit}\n        handleTest={handleTest}\n        defaultValues={getDefaultValues()}\n      />\n    </Modal>\n  );\n}\n\nexport function useCredentialPluginsModal() {\n  const { pushDialog, popDialog } = usePageDialogs();\n  const [props, setProps] = useState<CredentialPluginsModalProps>();\n  const toaster = usePageAlertToaster();\n\n  useEffect(() => {\n    if (props) {\n      pushDialog(<CredentialPluginsModal {...props} onClose={popDialog} alertToaster={toaster} />);\n    } else {\n      popDialog();\n    }\n  }, [props, pushDialog, popDialog, toaster]);\n  return setProps;\n}\n","import { AlertProps, Modal } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { AwxPageForm } from '../../../common/AwxPageForm';\nimport { CredentialInputField, CredentialType } from '../../../interfaces/CredentialType';\nimport {\n  IPageAlertToaster,\n  PageFormSelect,\n  PageFormSubmitHandler,\n  PageFormTextArea,\n  PageFormTextInput,\n} from '../../../../../framework';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { Credential } from '../../../interfaces/Credential';\n\nexport interface CredentialsExternalTestModalProps {\n  credential?: Credential;\n  credentialType: CredentialType;\n  watchedSubFormFields: unknown[];\n}\n\nexport interface CredentialsRetainInput {\n  inputs: object;\n  metadata: { [k: string]: string };\n}\n\nexport function CredentialsExternalTestModal(\n  props: CredentialsExternalTestModalProps & { popDialog: () => void } & {\n    alertToaster: IPageAlertToaster;\n  }\n) {\n  const { t } = useTranslation();\n  const postRequest = usePostRequest<CredentialsRetainInput>();\n  const alertToaster = props.alertToaster;\n\n  const onSubmit: PageFormSubmitHandler<CredentialsRetainInput> = async (\n    retainInput: CredentialsRetainInput\n  ) => {\n    const alert: AlertProps = {\n      variant: 'success',\n      title: t('Test passed.'),\n      timeout: 2000,\n    };\n\n    const populatedInput = Object.fromEntries(\n      Object.entries(retainInput).map(([key, value]) => [key, value || ''])\n    );\n\n    const payload = {\n      inputs: props.credentialType.inputs.fields.reduce(\n        (filteredInputs, field, idx) => {\n          filteredInputs[field.id] =\n            props.watchedSubFormFields[idx] ||\n            props.credentialType.inputs.fields[idx].default ||\n            '';\n          return filteredInputs;\n        },\n        {} as Record<string, unknown>\n      ),\n      metadata: populatedInput,\n    };\n    props.credential\n      ? await postRequest(awxAPI`/credentials/${String(props.credential.id)}/test/`, payload)\n          .then(() => {\n            alertToaster.addAlert(alert);\n          })\n          .catch((error) => {\n            alertToaster.addAlert({\n              variant: 'danger',\n              title: t('Something went wrong with the request to test this credential.'),\n              children: error instanceof Error && error.message,\n            });\n          })\n      : await postRequest(\n          awxAPI`/credential_types/${String(props.credentialType.id)}/test/`,\n          payload\n        )\n          .then(() => {\n            alertToaster.addAlert(alert);\n          })\n          .catch((error) => {\n            alertToaster.addAlert({\n              variant: 'danger',\n              title: t('Something went wrong with the request to test this credential.'),\n              children: error instanceof Error && error.message,\n            });\n          });\n  };\n  const onCancel = () => props.popDialog();\n\n  return (\n    <Modal\n      aria-label={t(`Test external credential`)}\n      variant=\"small\"\n      position=\"default\"\n      title={t`Test external credential`}\n      hasNoBodyWrapper\n      isOpen\n      onClose={() => props.popDialog()}\n    >\n      <AwxPageForm\n        submitText={t('Run')}\n        onSubmit={onSubmit}\n        cancelText={t('Cancel')}\n        onCancel={onCancel}\n        singleColumn\n      >\n        {props.credentialType.inputs.metadata.map((field: CredentialInputField) => {\n          const isRequired = props.credentialType.inputs?.required.includes(field.id);\n          if (field.type === 'string') {\n            if (field.choices) {\n              return (\n                <PageFormSelect\n                  key={field.id}\n                  name={field.id}\n                  label={field.label}\n                  labelHelp={field.help_text}\n                  isRequired={isRequired}\n                  options={field.choices.map((choice) => ({\n                    value: choice,\n                    key: choice,\n                    label: choice,\n                  }))}\n                />\n              );\n            }\n\n            if (field.multiline) {\n              return (\n                <PageFormTextArea\n                  key={field.id}\n                  name={field.id}\n                  label={field.label}\n                  labelHelp={field.help_text}\n                  isRequired={isRequired}\n                />\n              );\n            }\n\n            return (\n              <PageFormTextInput\n                key={field.id}\n                name={field.id}\n                label={field.label}\n                labelHelp={field.help_text}\n                type=\"text\"\n                isRequired={isRequired}\n              />\n            );\n          }\n\n          return null;\n        })}\n      </AwxPageForm>\n    </Modal>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { usePageAlertToaster, usePageDialogs } from '../../../../../framework';\nimport {\n  CredentialsExternalTestModalProps,\n  CredentialsExternalTestModal,\n} from '../utils/CredentialsExternalTestModal';\n\nexport function useCredentialsTestModal() {\n  const { pushDialog, popDialog } = usePageDialogs();\n  const [props, setProps] = useState<CredentialsExternalTestModalProps>();\n  const toaster = usePageAlertToaster();\n\n  useEffect(() => {\n    if (props) {\n      pushDialog(\n        <CredentialsExternalTestModal\n          {...{ ...props, popDialog: popDialog, alertToaster: toaster }}\n        />\n      );\n    } else {\n      popDialog();\n    }\n  }, [props, pushDialog, popDialog, toaster]);\n\n  return setProps;\n}\n","import { Button, ButtonVariant, Icon, Tooltip } from '@patternfly/react-core';\nimport { KeyIcon, UndoIcon } from '@patternfly/react-icons';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useFormContext, useWatch } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSWRConfig } from 'swr';\nimport {\n  LoadingPage,\n  PageFormCheckbox,\n  PageFormSelect,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { PageFormTextInput } from '../../../../framework/PageForm/Inputs/PageFormTextInput';\nimport { PageFormSubmitHandler } from '../../../../framework/PageForm/PageForm';\nimport { PageFormSection } from '../../../../framework/PageForm/Utils/PageFormSection';\nimport { useDeleteRequest } from '../../../common/crud/useDeleteRequest';\nimport { useGet, useGetItem } from '../../../common/crud/useGet';\nimport { usePatchRequest } from '../../../common/crud/usePatchRequest';\nimport { usePostRequest } from '../../../common/crud/usePostRequest';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { AwxItemsResponse } from '../../common/AwxItemsResponse';\nimport { AwxPageForm } from '../../common/AwxPageForm';\nimport { useAwxActiveUser } from '../../common/useAwxActiveUser';\nimport { useAwxGetAllPages } from '../../common/useAwxGetAllPages';\nimport { Credential } from '../../interfaces/Credential';\nimport { CredentialInputSource } from '../../interfaces/CredentialInputSource';\nimport { CredentialInputField, CredentialType } from '../../interfaces/CredentialType';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { PageFormSelectOrganization } from '../organizations/components/PageFormOrganizationSelect';\nimport { BecomeMethodField } from './components/BecomeMethodField';\nimport { CredentialMultilineInput } from './components/CredentialMultilineInput';\nimport { GCEUploadField } from './components/GCEUploadField';\nimport { PageFormSelectCredentialType } from './components/PageFormSelectCredentialType';\nimport {\n  CredentialPluginsInputSource,\n  useCredentialPluginsModal,\n} from './CredentialPlugins/hooks/useCredentialPluginsDialog';\nimport { useCredentialsTestModal } from './hooks/useCredentialsTestModal';\n\ninterface CredentialForm extends Credential {\n  user?: number;\n}\n\ninterface CredentialSelectProps extends CredentialInputField {\n  name: string;\n}\n\nexport interface initialValues {\n  name: string;\n  description: string;\n  credential_type: number;\n  organization: number | null;\n  [key: string]: string | number | null;\n}\n\ninterface Prompts {\n  [key: string]: boolean;\n}\n\ntype CredentialTypes = {\n  [key: number]: CredentialType;\n};\n\nexport function CreateCredential() {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const navigate = useNavigate();\n  const { activeAwxUser } = useAwxActiveUser();\n  const postRequest = usePostRequest<Credential | CredentialInputSource>();\n  const getPageUrl = useGetPageUrl();\n  const [selectedCredentialTypeId, setSelectedCredentialTypeId] = useState<number>(0);\n  const [watchedSubFormFields, setWatchedSubFormFields] = useState<unknown[]>([]);\n  const openCredentialsExternalTestModal = useCredentialsTestModal();\n  const [credentialPluginValues, setCredentialPluginValues] = useState<\n    CredentialPluginsInputSource[]\n  >([]);\n  const [accumulatedPluginValues, setAccumulatedPluginValues] = useState<\n    CredentialPluginsInputSource[]\n  >([]);\n  useEffect(() => {\n    setAccumulatedPluginValues((prev) => {\n      // Filter out any previous plugins that have been updated\n      const filteredPrev = prev.filter(\n        (prevValue) =>\n          !credentialPluginValues.some(\n            (newValue) => newValue.input_field_name === prevValue.input_field_name\n          )\n      );\n      const updatedValues = [...filteredPrev, ...credentialPluginValues];\n\n      return updatedValues;\n    });\n  }, [credentialPluginValues]);\n  const [isTestButtonEnabled, setIsTestButtonEnabled] = useState(false);\n  const [isTestButtonEnabledSubForm, setIsTestButtonEnabledSubForm] = useState(false);\n\n  const { results: itemsResponse, isLoading } = useAwxGetAllPages<CredentialType>(\n    awxAPI`/credential_types/`\n  );\n\n  if (isLoading && !itemsResponse) {\n    return <LoadingPage />;\n  }\n\n  const parsedCredentialTypes: CredentialTypes | undefined = itemsResponse?.reduce(\n    (credentialTypesMap, credentialType) => {\n      credentialTypesMap[credentialType.id] = credentialType;\n      return credentialTypesMap;\n    },\n    {} as CredentialTypes\n  );\n\n  const isExternalCredential =\n    !!parsedCredentialTypes &&\n    parsedCredentialTypes?.[selectedCredentialTypeId]?.kind === 'external';\n\n  const onSubmit: PageFormSubmitHandler<CredentialForm> = async (credential) => {\n    const credentialTypeInputs = parsedCredentialTypes?.[credential?.credential_type]?.inputs;\n    const pluginInputs: Record<string, string | number> = {};\n    const isHandledByCredentialPlugin = (field: string) =>\n      accumulatedPluginValues.some((cp) => cp.input_field_name === field);\n    const possibleFields = credentialTypeInputs?.fields || [];\n    possibleFields.forEach((field) => {\n      if (\n        field.id &&\n        typeof field.id === 'string' &&\n        field.id in credential &&\n        !isHandledByCredentialPlugin(field.id)\n      ) {\n        const id = field.id as keyof CredentialForm;\n        if (credential[id] !== undefined || credential[id] !== '') {\n          pluginInputs[id] = credential[id] as string | number;\n          delete credential[id];\n        }\n      }\n    });\n    // can send only one of org, user, team\n    if (!credential.organization) {\n      credential.user = activeAwxUser?.id;\n    }\n    // filter out fields that a prefixed with 'ask_'\n    Object.keys(credential).forEach((key) => {\n      if (key.startsWith('ask_')) {\n        delete credential[key as keyof CredentialForm];\n      }\n    });\n    const newCredential = await postRequest(awxAPI`/credentials/`, {\n      ...credential,\n      inputs: { ...pluginInputs },\n    });\n    const credentialInputSourcePayload = accumulatedPluginValues.map((credentialInputSource) => ({\n      ...credentialInputSource,\n      target_credential: newCredential.id,\n    }));\n    await Promise.all(\n      credentialInputSourcePayload.map(async (credentialInputSource) => {\n        await postRequest(\n          awxAPI`/credential_input_sources/`,\n          credentialInputSource as CredentialInputSource\n        );\n      })\n    );\n    pageNavigate(AwxRoute.CredentialDetails, { params: { id: newCredential.id } });\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Create credential')}\n        breadcrumbs={[\n          { label: t('Credentials'), to: getPageUrl(AwxRoute.Credentials) },\n          { label: t('Create credential') },\n        ]}\n      />\n      <AwxPageForm\n        submitText={t('Create credential')}\n        onSubmit={onSubmit}\n        onCancel={() => navigate(-1)}\n        additionalActions={\n          isExternalCredential ? (\n            <Button\n              aria-label={t('Test')}\n              variant=\"secondary\"\n              onClick={(e) => {\n                e.preventDefault();\n                openCredentialsExternalTestModal({\n                  credentialType:\n                    parsedCredentialTypes !== undefined\n                      ? parsedCredentialTypes?.[selectedCredentialTypeId]\n                      : ({} as CredentialType),\n                  watchedSubFormFields: watchedSubFormFields,\n                });\n              }}\n              isDisabled={!isTestButtonEnabled || !isTestButtonEnabledSubForm}\n            >\n              {t('Test')}\n            </Button>\n          ) : undefined\n        }\n      >\n        <CredentialInputs\n          isEditMode={false}\n          credentialTypes={parsedCredentialTypes || {}}\n          setCredentialPluginValues={setCredentialPluginValues}\n          accumulatedPluginValues={accumulatedPluginValues}\n          setAccumulatedPluginValues={setAccumulatedPluginValues}\n          setSelectedCredentialTypeId={setSelectedCredentialTypeId}\n          setIsTestButtonEnabled={setIsTestButtonEnabled}\n          setIsTestButtonEnabledSubForm={setIsTestButtonEnabledSubForm}\n          setWatchedSubFormFields={setWatchedSubFormFields}\n        />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n\nexport function EditCredential() {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const params = useParams<{ id?: string }>();\n  const id = Number(params.id);\n  const { activeAwxUser } = useAwxActiveUser();\n  const getPageUrl = useGetPageUrl();\n  const patch = usePatchRequest();\n  const deleteRequest = useDeleteRequest();\n  const postRequest = usePostRequest<Credential | CredentialInputSource>();\n  const [credentialPluginValues, setCredentialPluginValues] = useState<\n    CredentialPluginsInputSource[]\n  >([]);\n  const [accumulatedPluginValues, setAccumulatedPluginValues] = useState<\n    CredentialPluginsInputSource[]\n  >([]);\n  const [pluginsToDelete, setPluginsToDelete] = useState<string[]>([]);\n  const { cache } = useSWRConfig();\n\n  useEffect(() => {\n    setAccumulatedPluginValues((prev) => {\n      // Filter out any values from prev that have input field names matching new values\n      const filteredPrev = prev.filter(\n        (prevValue) =>\n          !credentialPluginValues.some(\n            (newValue) => newValue.input_field_name === prevValue.input_field_name\n          )\n      );\n      const updatedValues = [...filteredPrev, ...credentialPluginValues];\n      // mark any fields previously handled by a plugin that have been updated to use a different plugin for deletion\n      updatedValues.forEach((cp) => {\n        if (prev.some((prevValue) => prevValue.input_field_name === cp.input_field_name)) {\n          setPluginsToDelete((prev) => [...prev, cp.input_field_name]);\n        }\n      });\n\n      return updatedValues;\n    });\n  }, [credentialPluginValues]);\n  const openCredentialsExternalTestModal = useCredentialsTestModal();\n  const [isTestButtonEnabled, setIsTestButtonEnabled] = useState(false);\n  const [isTestButtonEnabledSubForm, setIsTestButtonEnabledSubForm] = useState(false);\n  const [watchedSubFormFields, setWatchedSubFormFields] = useState<unknown[]>([]);\n  const [fieldEncryptedID, setFieldEncryptedID] = useState<string[]>([]);\n\n  const { data: credential, isLoading: isLoadingCredential } = useGet<Credential>(\n    awxAPI`/credentials/${id.toString()}/`\n  );\n\n  const { data: inputSources, isLoading: isLoadingInputSources } = useGet<\n    AwxItemsResponse<CredentialInputSource>\n  >(awxAPI`/credentials/${id.toString()}/input_sources/`);\n\n  useEffect(() => {\n    if (inputSources) {\n      const updatedPluginValues = inputSources.results.map(\n        (inputSource: CredentialInputSource) => ({\n          input_field_name: inputSource.input_field_name,\n          source_credential: inputSource.source_credential,\n          target_credential: inputSource.target_credential,\n          metadata: inputSource.metadata,\n        })\n      );\n      setAccumulatedPluginValues(updatedPluginValues);\n    }\n  }, [inputSources]);\n\n  const pluginsToDeletePayload = inputSources?.results\n    .filter((cp) => pluginsToDelete.includes(cp.input_field_name))\n    .map((cp) => cp.id?.toString() ?? '');\n\n  const { results: itemsResponse, isLoading: isLoadingCredentialType } =\n    useAwxGetAllPages<CredentialType>(awxAPI`/credential_types/`);\n\n  const parsedCredentialTypes: CredentialTypes | undefined = itemsResponse?.reduce(\n    (credentialTypesMap, credentialType) => {\n      credentialTypesMap[credentialType.id] = credentialType;\n      return credentialTypesMap;\n    },\n    {} as CredentialTypes\n  );\n\n  const isExternalCredential =\n    !!parsedCredentialTypes && credential !== undefined\n      ? parsedCredentialTypes?.[credential.credential_type]?.kind === 'external'\n      : null;\n\n  const promptPassword: Prompts = useMemo(() => {\n    const promptPasswordObj: Prompts = {};\n    if (credential?.inputs) {\n      Object.entries(credential.inputs).forEach(([key, value]) => {\n        if (typeof value === 'string' && value === 'ASK') {\n          promptPasswordObj[`ask_${key}`] = true;\n        } else {\n          promptPasswordObj[`ask_${key}`] = false;\n        }\n      });\n    }\n    return promptPasswordObj;\n  }, [credential]);\n\n  const initialValues: initialValues = useMemo(\n    () => ({\n      name: credential?.name ?? '',\n      description: credential?.description ?? '',\n      credential_type: credential?.credential_type ?? 0,\n      organization: credential?.organization ?? null,\n      ...(credential?.inputs ?? {}),\n      ...(promptPassword ?? {}),\n    }),\n    [credential, promptPassword]\n  );\n\n  if (\n    (isLoadingCredential && !credential) ||\n    (isLoadingCredentialType && !itemsResponse) ||\n    (isLoadingInputSources && !inputSources)\n  ) {\n    return <LoadingPage />;\n  }\n\n  const onSubmit: PageFormSubmitHandler<CredentialForm> = async (editedCredential) => {\n    const credentialTypeInputs = parsedCredentialTypes?.[editedCredential?.credential_type]?.inputs;\n    // can send only one of org, user, team\n    if (!editedCredential.organization) {\n      editedCredential.user = activeAwxUser?.id;\n    }\n    const pluginInputs: Record<string, string | number> = {};\n    const isHandledByCredentialPlugin = (field: string) =>\n      accumulatedPluginValues.some((cp) => cp.input_field_name === field);\n\n    const possibleFields = credentialTypeInputs?.fields || [];\n    possibleFields.forEach((field) => {\n      if (\n        field.id &&\n        typeof field.id === 'string' &&\n        field.id in editedCredential &&\n        !isHandledByCredentialPlugin(field.id)\n      ) {\n        const id = field.id as keyof CredentialForm;\n        if (editedCredential[id] !== undefined || editedCredential[id] !== '') {\n          pluginInputs[id] = editedCredential[id] as string | number;\n          delete editedCredential[id];\n        }\n      }\n    });\n    // filter out fields that a prefixed with 'ask_'\n    Object.keys(editedCredential).forEach((key) => {\n      if (key.startsWith('ask_')) {\n        delete editedCredential[key as keyof CredentialForm];\n      }\n    });\n    // The field's value was set to ENCRYPTED as a placeholder, so it must be\n    // reverted to the original value\n    Object.keys(pluginInputs).forEach((key) => {\n      if (fieldEncryptedID?.includes(key)) {\n        pluginInputs[key as keyof CredentialForm] = '$encrypted$';\n      }\n    });\n\n    const modifiedCredential = { ...editedCredential, inputs: pluginInputs };\n    const credentialInputSourcePayload = accumulatedPluginValues.map((credentialInputSource) => ({\n      ...credentialInputSource,\n      target_credential: credential?.id,\n    }));\n\n    if (pluginsToDeletePayload && pluginsToDeletePayload.length > 0) {\n      await Promise.all(\n        pluginsToDeletePayload.map(async (id) => {\n          await deleteRequest(awxAPI`/credential_input_sources/${id.toString()}/`);\n        })\n      ).then(async () => {\n        await patch(awxAPI`/credentials/${id.toString()}/`, modifiedCredential);\n        await Promise.all(\n          credentialInputSourcePayload.map(async (credentialInputSource) => {\n            await postRequest(\n              awxAPI`/credential_input_sources/`,\n              credentialInputSource as CredentialInputSource\n            );\n          })\n        );\n      });\n    } else {\n      await patch(awxAPI`/credentials/${id.toString()}/`, modifiedCredential);\n      await Promise.all(\n        credentialInputSourcePayload.map(async (credentialInputSource) => {\n          await postRequest(\n            awxAPI`/credential_input_sources/`,\n            credentialInputSource as CredentialInputSource\n          );\n        })\n      );\n    }\n    (cache as unknown as { clear: () => void }).clear?.();\n    navigate(-1);\n  };\n  if (!credential) {\n    return (\n      <PageLayout>\n        <PageHeader\n          breadcrumbs={[\n            { label: t('Credentials'), to: getPageUrl(AwxRoute.Credentials) },\n            { label: t('Edit Credential') },\n          ]}\n        />\n      </PageLayout>\n    );\n  }\n  return (\n    <PageLayout>\n      <PageHeader\n        title={\n          credential?.name\n            ? t('Edit {{credentialName}}', { credentialName: credential?.name })\n            : t('Credentials')\n        }\n        breadcrumbs={[\n          { label: t('Credentials'), to: getPageUrl(AwxRoute.Credentials) },\n          {\n            label: credential?.name\n              ? t('Edit {{credentialName}}', { credentialName: credential?.name })\n              : t('Credentials'),\n          },\n        ]}\n      />\n      <AwxPageForm\n        submitText={t('Save credential')}\n        onSubmit={onSubmit}\n        onCancel={() => navigate(-1)}\n        defaultValue={initialValues}\n        additionalActions={\n          isExternalCredential ? (\n            <Button\n              aria-label={t('Test')}\n              variant=\"secondary\"\n              onClick={(e) => {\n                e.preventDefault();\n                openCredentialsExternalTestModal({\n                  credential: credential,\n                  credentialType:\n                    parsedCredentialTypes !== undefined\n                      ? parsedCredentialTypes?.[credential?.credential_type]\n                      : ({} as CredentialType),\n                  watchedSubFormFields: watchedSubFormFields,\n                });\n              }}\n              isDisabled={!isTestButtonEnabled || !isTestButtonEnabledSubForm}\n            >\n              {t('Test')}\n            </Button>\n          ) : undefined\n        }\n      >\n        <CredentialInputs\n          isEditMode\n          credentialTypes={parsedCredentialTypes || {}}\n          selectedCredentialTypeId={credential?.credential_type}\n          setCredentialPluginValues={setCredentialPluginValues}\n          accumulatedPluginValues={accumulatedPluginValues}\n          setAccumulatedPluginValues={setAccumulatedPluginValues}\n          setPluginsToDelete={setPluginsToDelete}\n          setIsTestButtonEnabled={setIsTestButtonEnabled}\n          setIsTestButtonEnabledSubForm={setIsTestButtonEnabledSubForm}\n          setWatchedSubFormFields={setWatchedSubFormFields}\n          initialValues={initialValues}\n          setFieldEncryptedID={setFieldEncryptedID}\n        />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n\nfunction CredentialInputs({\n  isEditMode = false,\n  selectedCredentialTypeId,\n  credentialTypes,\n  setCredentialPluginValues,\n  accumulatedPluginValues,\n  setAccumulatedPluginValues,\n  setPluginsToDelete,\n  setSelectedCredentialTypeId,\n  setIsTestButtonEnabled,\n  setIsTestButtonEnabledSubForm,\n  setWatchedSubFormFields,\n  setFieldEncryptedID,\n  initialValues,\n}: {\n  isEditMode?: boolean;\n  selectedCredentialTypeId?: number;\n  credentialTypes: CredentialTypes;\n  setCredentialPluginValues?: (values: CredentialPluginsInputSource[]) => void;\n  accumulatedPluginValues?: CredentialPluginsInputSource[];\n  setAccumulatedPluginValues?: (values: CredentialPluginsInputSource[]) => void;\n  setPluginsToDelete?: React.Dispatch<React.SetStateAction<string[]>>;\n  setSelectedCredentialTypeId?: (id: number) => void;\n  setIsTestButtonEnabled: (enabled: boolean) => void;\n  setIsTestButtonEnabledSubForm: (enabled: boolean) => void;\n  setWatchedSubFormFields: (fields: unknown[]) => void;\n  setFieldEncryptedID?: React.Dispatch<React.SetStateAction<string[]>>;\n  initialValues?: initialValues;\n}) {\n  const { t } = useTranslation();\n\n  const watchedCredentialTypeId = useWatch<{ credential_type: number }>({\n    name: 'credential_type',\n  });\n\n  useEffect(() => {\n    if (setSelectedCredentialTypeId) {\n      setSelectedCredentialTypeId(watchedCredentialTypeId);\n    }\n  }, [watchedCredentialTypeId, setSelectedCredentialTypeId]);\n\n  const credentialTypeID = selectedCredentialTypeId || watchedCredentialTypeId;\n\n  const isGalaxyCredential =\n    !!credentialTypes && credentialTypes?.[credentialTypeID]?.kind === 'galaxy';\n\n  const watchedRequiredFields = useWatch<{\n    name: string;\n    credential_type: number;\n  }>({\n    name: ['name', 'credential_type'],\n  });\n\n  useEffect(() => {\n    const requiredFields = ['name', 'credential_type'];\n    const verify: string[] = [];\n    Object.values(watchedRequiredFields).forEach((value) => {\n      if (value !== null && value !== undefined && value !== '') {\n        verify.push(value as string);\n      }\n    });\n\n    setIsTestButtonEnabled(verify.length >= requiredFields.length ? true : false);\n  }, [watchedRequiredFields, setIsTestButtonEnabled]);\n\n  return (\n    <>\n      <PageFormTextInput<Credential>\n        name=\"name\"\n        label={t('Name')}\n        placeholder={t('Enter name')}\n        isRequired\n      />\n      <PageFormTextInput<Credential>\n        name=\"description\"\n        label={t('Description')}\n        placeholder={t('Enter description')}\n      />\n      <PageFormSelectOrganization<Credential> isRequired={isGalaxyCredential} name=\"organization\" />\n      <PageFormSelectCredentialType\n        name=\"credential_type\"\n        isRequired\n        isDisabled={\n          isEditMode\n            ? t(\n                'You cannot change the credential type of a credential, as it may break the functionality of the resources using it.'\n              )\n            : undefined\n        }\n      />\n      {setCredentialPluginValues &&\n      credentialTypeID &&\n      credentialTypes &&\n      credentialTypes[credentialTypeID] ? (\n        <CredentialSubForm\n          credentialType={credentialTypes[credentialTypeID]}\n          setCredentialPluginValues={setCredentialPluginValues}\n          isEditMode={isEditMode}\n          initialValues={initialValues}\n          accumulatedPluginValues={accumulatedPluginValues ? accumulatedPluginValues : []}\n          setAccumulatedPluginValues={setAccumulatedPluginValues}\n          setPluginsToDelete={setPluginsToDelete}\n          setIsTestButtonEnabledSubForm={setIsTestButtonEnabledSubForm}\n          setWatchedSubFormFields={setWatchedSubFormFields}\n          setFieldEncryptedID={setFieldEncryptedID}\n        />\n      ) : null}\n    </>\n  );\n}\nfunction CredentialSubForm({\n  credentialType,\n  setCredentialPluginValues,\n  isEditMode = false,\n  accumulatedPluginValues,\n  setAccumulatedPluginValues,\n  setPluginsToDelete,\n  setIsTestButtonEnabledSubForm,\n  setWatchedSubFormFields,\n  setFieldEncryptedID,\n  initialValues,\n}: {\n  credentialType: CredentialType;\n  setCredentialPluginValues: (values: CredentialPluginsInputSource[]) => void;\n  isEditMode?: boolean;\n  accumulatedPluginValues: CredentialPluginsInputSource[];\n  setAccumulatedPluginValues?: (values: CredentialPluginsInputSource[]) => void;\n  setPluginsToDelete?: React.Dispatch<React.SetStateAction<string[]>>;\n  setIsTestButtonEnabledSubForm: (enabled: boolean) => void;\n  setWatchedSubFormFields: (fields: unknown[]) => void;\n  setFieldEncryptedID?: React.Dispatch<React.SetStateAction<string[]>>;\n  initialValues?: initialValues;\n}) {\n  const { t } = useTranslation();\n  const openCredentialPluginsModal = useCredentialPluginsModal();\n  const requiredFields = credentialType?.inputs?.required || [];\n  const requiredFieldsInSubForm = credentialType?.inputs?.fields?.filter((field) =>\n    requiredFields.includes(field.id)\n  );\n  const subFormFields = credentialType?.inputs?.fields?.map((field) => field.id);\n\n  const watchedRequiredFields = useWatch({\n    name: requiredFields,\n  });\n\n  const watchedAllFields = useWatch({ name: subFormFields });\n  setWatchedSubFormFields(watchedAllFields);\n\n  useEffect(() => {\n    const verify: string[] = [];\n    Object.values(watchedRequiredFields).forEach((value) => {\n      if (value !== null && value !== undefined && value !== '') {\n        verify.push(value as string);\n      }\n    });\n\n    setIsTestButtonEnabledSubForm(verify.length >= requiredFieldsInSubForm?.length ? true : false);\n  }, [watchedRequiredFields, setIsTestButtonEnabledSubForm, requiredFieldsInSubForm]);\n\n  if (!credentialType || !credentialType?.inputs?.fields) {\n    return null;\n  }\n\n  const stringFields =\n    credentialType?.inputs?.fields?.filter(\n      (field) => field.type === 'string' && !field?.choices?.length\n    ) || [];\n\n  const choiceFields =\n    credentialType?.inputs?.fields?.filter((field) => (field?.choices?.length ?? 0) > 0) || [];\n\n  const booleanFields =\n    credentialType?.inputs?.fields?.filter((field) => field.type === 'boolean') || [];\n\n  const hasFields = stringFields.length > 0 || choiceFields.length > 0 || booleanFields.length > 0;\n\n  return hasFields ? (\n    <PageFormSection title={t('Type Details')}>\n      {credentialType?.namespace === 'gce' && <GCEUploadField />}\n      {stringFields.length > 0 &&\n        stringFields.map((field) => {\n          if (field?.multiline) {\n            return (\n              <CredentialMultilineInput\n                accumulatedPluginValues={accumulatedPluginValues}\n                setAccumulatedPluginValues={setAccumulatedPluginValues}\n                setPluginsToDelete={setPluginsToDelete}\n                kind={credentialType.kind}\n                key={field.id}\n                field={field}\n                requiredFields={requiredFields}\n                handleModalToggle={() => {\n                  openCredentialPluginsModal({\n                    field,\n                    setCredentialPluginValues,\n                    accumulatedPluginValues,\n                  });\n                }}\n                fieldInitialValue={initialValues && initialValues[field?.id]}\n              />\n            );\n          } else if (credentialType.kind === 'ssh' && field.id === 'become_method') {\n            return (\n              <BecomeMethodField\n                key={field.id}\n                fieldOptions={field}\n                isRequired={requiredFields.includes(field.id)}\n              />\n            );\n          } else {\n            return (\n              <CredentialTextInput\n                setFieldEncryptedID={setFieldEncryptedID}\n                accumulatedPluginValues={accumulatedPluginValues}\n                setAccumulatedPluginValues={setAccumulatedPluginValues}\n                setPluginsToDelete={setPluginsToDelete}\n                key={field.id}\n                field={field}\n                credentialType={credentialType}\n                fieldInitialValue={initialValues && initialValues[field?.id]}\n                isDisabled={\n                  field.id === 'vault_id' && credentialType.kind === 'vault' && isEditMode\n                }\n                isRequired={requiredFields.includes(field.id)}\n                handleModalToggle={() =>\n                  openCredentialPluginsModal({\n                    field,\n                    setCredentialPluginValues,\n                    accumulatedPluginValues,\n                  })\n                }\n              />\n            );\n          }\n        })}\n      {choiceFields.length > 0 &&\n        choiceFields.map((field) => (\n          <PageFormSelect<CredentialSelectProps>\n            key={field.id}\n            defaultValue={field?.default}\n            name={field?.id as keyof CredentialSelectProps}\n            label={field.label}\n            options={field?.choices?.map((choice) => ({ value: choice, label: choice })) ?? []}\n            isRequired={requiredFields.includes(field.id)}\n            labelHelp={field.help_text}\n          />\n        ))}\n      {booleanFields.length > 0 &&\n        booleanFields.map((field) => (\n          <PageFormCheckbox<CredentialType>\n            key={field.id}\n            name={field.id as keyof CredentialType}\n            label={field.label}\n            isRequired={requiredFields.includes(field.id)}\n            labelHelp={field.help_text}\n          />\n        ))}\n    </PageFormSection>\n  ) : null;\n}\nfunction CredentialTextInput({\n  credentialType,\n  field,\n  handleModalToggle,\n  isDisabled = false,\n  isRequired = false,\n  accumulatedPluginValues,\n  setAccumulatedPluginValues,\n  setPluginsToDelete,\n  setFieldEncryptedID,\n  fieldInitialValue,\n}: {\n  credentialType?: CredentialType | undefined;\n  field: CredentialInputField;\n  handleModalToggle: () => void;\n  isDisabled?: boolean;\n  isRequired?: boolean;\n  accumulatedPluginValues: CredentialPluginsInputSource[];\n  setAccumulatedPluginValues?: (values: CredentialPluginsInputSource[]) => void;\n  setPluginsToDelete?: React.Dispatch<React.SetStateAction<string[]>>;\n  setFieldEncryptedID?: React.Dispatch<React.SetStateAction<string[]>>;\n  fieldInitialValue?: string | boolean | number | null | undefined;\n}) {\n  const { t } = useTranslation();\n  const { setValue, clearErrors, getValues } = useFormContext();\n  const [isRevert, setIsRevert] = useState(false);\n  const encryptedPlaceholder = '$encrypted$';\n  const ASK_VALUE = 'ASK';\n  const isSecretField = field.secret;\n  const isInitialValueEncrypted = fieldInitialValue === encryptedPlaceholder;\n  const [shouldHideField, setShouldHideField] = useState(isSecretField && isInitialValueEncrypted);\n  const [isCurrentFieldValueEncrypted, setIsCurrentFieldValueEncrypted] = useState(false);\n\n  const isPromptOnLaunchChecked = useWatch({\n    name: `ask_${field.id}`,\n    defaultValue: fieldInitialValue === ASK_VALUE,\n  }) as boolean;\n\n  const useGetSourceCredential = (id: number) => {\n    const { data } = useGetItem<Credential>(awxAPI`/credentials/`, id);\n    return data;\n  };\n\n  const sourceCredential = useGetSourceCredential(\n    accumulatedPluginValues.filter((cp) => cp.input_field_name === field.id)[0]?.source_credential\n  );\n\n  const renderFieldValue = useCallback(\n    (field: CredentialInputField): string => {\n      let placeholder = '';\n      accumulatedPluginValues.forEach((cp) => {\n        if (cp.input_field_name === field.id && sourceCredential) {\n          placeholder = t(`Value is managed by ${sourceCredential.kind}: ${sourceCredential.name}`);\n        }\n      });\n      return placeholder;\n    },\n    [accumulatedPluginValues, sourceCredential, t]\n  );\n\n  const clearFieldValue = useCallback(() => {\n    if (getValues(field.id) !== ASK_VALUE) {\n      setValue(field.id, '', { shouldDirty: false });\n    }\n    clearErrors(field.id);\n    setAccumulatedPluginValues?.(\n      accumulatedPluginValues.filter((cp) => cp.input_field_name !== field.id)\n    );\n    setPluginsToDelete?.((prev: string[]) => [...prev, field.id]);\n  }, [\n    getValues,\n    setValue,\n    clearErrors,\n    field.id,\n    accumulatedPluginValues,\n    setAccumulatedPluginValues,\n    setPluginsToDelete,\n  ]);\n\n  useEffect(() => {\n    if (isPromptOnLaunchChecked) {\n      // mark any credential plugins previously set for deletion\n      if (accumulatedPluginValues.some((cp) => cp.input_field_name === field.id)) {\n        setPluginsToDelete?.((prev: string[]) => [...prev, field.id]);\n        setAccumulatedPluginValues?.(\n          accumulatedPluginValues.filter((cp) => cp.input_field_name !== field.id)\n        );\n      }\n      setValue(field.id, ASK_VALUE, { shouldDirty: true });\n      clearErrors(field.id);\n    } else if (!isPromptOnLaunchChecked && getValues(field.id) === ASK_VALUE) {\n      setValue(field.id, '', { shouldDirty: true });\n    }\n  }, [\n    getValues,\n    isPromptOnLaunchChecked,\n    field,\n    setValue,\n    setPluginsToDelete,\n    accumulatedPluginValues,\n    setAccumulatedPluginValues,\n    clearErrors,\n  ]);\n\n  useEffect(() => {\n    if (isPromptOnLaunchChecked) {\n      clearFieldValue();\n      setIsRevert(true);\n      setShouldHideField(false);\n    }\n  }, [isPromptOnLaunchChecked, clearFieldValue]);\n\n  useEffect(() => {\n    if (accumulatedPluginValues.some((cp) => cp.input_field_name === field.id)) {\n      setValue(field.id, renderFieldValue(field), { shouldDirty: true });\n    }\n  }, [setValue, accumulatedPluginValues, renderFieldValue, field]);\n\n  const handleIsRequired = (): boolean => {\n    if (isPromptOnLaunchChecked) {\n      return false;\n    }\n    return isRequired;\n  };\n\n  const handleIsDisabled = (field: CredentialInputField): boolean => {\n    return accumulatedPluginValues.some((cp) => cp.input_field_name === field.id);\n  };\n\n  const handleHelperText = (field: CredentialInputField): string => {\n    let helperText = '';\n    accumulatedPluginValues.forEach((cp) => {\n      if (cp.input_field_name === field.id) {\n        helperText = t(\n          'This field will be retrieved from an external secret management system using the specified credential.'\n        );\n      }\n    });\n    return helperText;\n  };\n\n  const clearField = () => {\n    setValue(field.id, '', { shouldDirty: false });\n    setShouldHideField(false);\n  };\n\n  const revertInitialValue = () => {\n    setValue(field.id, fieldInitialValue, { shouldDirty: true });\n    setAccumulatedPluginValues?.(\n      accumulatedPluginValues.filter((cp) => cp.input_field_name !== field.id)\n    );\n    setShouldHideField(true);\n  };\n\n  useEffect(() => {\n    if (\n      field?.id &&\n      shouldHideField &&\n      isSecretField &&\n      isInitialValueEncrypted &&\n      !isPromptOnLaunchChecked\n    ) {\n      setValue(field.id, t('ENCRYPTED'), { shouldDirty: false });\n      setFieldEncryptedID &&\n        setFieldEncryptedID((prev: string[]) =>\n          prev.includes(field.id) ? prev : [...prev, field.id]\n        );\n      setIsCurrentFieldValueEncrypted(true);\n    } else {\n      setIsCurrentFieldValueEncrypted(false);\n      setFieldEncryptedID &&\n        setFieldEncryptedID((prev: string[]) => prev.filter((id) => id !== field.id));\n    }\n  }, [\n    setFieldEncryptedID,\n    shouldHideField,\n    isSecretField,\n    isInitialValueEncrypted,\n    isPromptOnLaunchChecked,\n    field.id,\n    setValue,\n    t,\n  ]);\n\n  const shouldShowRevertButton = !isPromptOnLaunchChecked && isInitialValueEncrypted;\n\n  const inputType =\n    getValues(field.id) === ASK_VALUE || (field.secret && !isCurrentFieldValueEncrypted)\n      ? 'password'\n      : 'text';\n\n  return (\n    <PageFormTextInput\n      key={field.id}\n      name={field.id}\n      label={field.label}\n      placeholder={(field?.default || t('Enter value')).toString()}\n      type={inputType}\n      isRequired={handleIsRequired()}\n      isDisabled={isDisabled || !!isPromptOnLaunchChecked || isCurrentFieldValueEncrypted}\n      isReadOnly={handleIsDisabled(field)}\n      labelHelp={field.help_text}\n      helperText={handleHelperText(field)}\n      button={\n        credentialType?.kind !== 'external' ? (\n          <>\n            <Tooltip\n              flipBehavior={['top', 'bottom']}\n              content={t('Populate field from an external secret management system')}\n            >\n              <Button\n                isDisabled={isDisabled || !!isPromptOnLaunchChecked || isCurrentFieldValueEncrypted}\n                data-cy=\"secret-management-input\"\n                variant=\"control\"\n                icon={\n                  <Icon>\n                    <KeyIcon />\n                  </Icon>\n                }\n                onClick={handleModalToggle}\n              />\n            </Tooltip>\n            {accumulatedPluginValues.some((cp) => cp.input_field_name === field.id) && (\n              <Button\n                data-cy=\"clear-secret-management-input\"\n                variant=\"control\"\n                onClick={clearFieldValue}\n              >\n                {t('Clear')}\n              </Button>\n            )}\n            {shouldShowRevertButton ? (\n              <RevertReplaceButton\n                clearField={clearField}\n                isRevert={isRevert}\n                revertField={revertInitialValue}\n                setIsRevert={setIsRevert}\n              />\n            ) : null}\n          </>\n        ) : shouldShowRevertButton ? (\n          <RevertReplaceButton\n            clearField={clearField}\n            isRevert={isRevert}\n            revertField={revertInitialValue}\n            setIsRevert={setIsRevert}\n          />\n        ) : null\n      }\n      additionalControls={\n        field?.ask_at_runtime && (\n          <PageFormCheckbox name={`ask_${field.id}`} label={t('Prompt on launch')} />\n        )\n      }\n    />\n  );\n}\n\nconst RevertReplaceButton = ({\n  clearField,\n  revertField,\n  isRevert,\n  setIsRevert,\n}: {\n  clearField: () => void;\n  revertField: () => void;\n  isRevert: boolean;\n  setIsRevert: (isRevert: boolean) => void;\n}) => {\n  const { t } = useTranslation();\n  return (\n    <Tooltip content={isRevert ? t('Revert') : t('Replace')}>\n      <Button\n        id=\"credential-replace-button\"\n        aria-label={\n          isRevert ? t('Revert field to previously saved value') : t('Replace field with new value')\n        }\n        variant={ButtonVariant.control}\n        icon={<UndoIcon />}\n        onClick={() => {\n          if (isRevert) {\n            revertField();\n          } else {\n            clearField();\n          }\n          setIsRevert(!isRevert);\n        }}\n      />\n    </Tooltip>\n  );\n};\n","import { ChipGroup } from '@patternfly/react-core';\nimport React from 'react';\nimport { PageDetail } from '../../../../../framework';\nimport { CredentialInputSource } from '../../../interfaces/CredentialInputSource';\nimport { CredentialLabel } from '../../../common/CredentialLabel';\nimport { useTranslation } from 'react-i18next';\nimport { PageDetailCodeEditor } from '../../../../../framework/PageDetails/PageDetailCodeEditor';\n\nexport function CredentialTypeDetail(props: {\n  inputs: Record<string, string | number>;\n  field: { id: string; label: string; type: string; ask_at_runtime?: boolean; help_text: string };\n  inputSources?: Record<string, CredentialInputSource>;\n}) {\n  const { inputs, field, inputSources } = props;\n  const { t } = useTranslation();\n  const { id, label, type, ask_at_runtime, help_text = '' } = field;\n  if (id && inputSources && inputSources[id]) {\n    return (\n      <React.Fragment key={id}>\n        <PageDetail helpText={help_text} label={label + ' *'}>\n          <ChipGroup numChips={1} ouiaId={`credential-${id}-chips`}>\n            <CredentialLabel credential={inputSources[id]?.summary_fields?.source_credential} />\n          </ChipGroup>\n        </PageDetail>\n        {inputSources[id] && inputSources[id].metadata && (\n          <PageDetailCodeEditor\n            label={t('Metadata')}\n            value={JSON.stringify(inputSources[id].metadata, null, 2)}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n\n  if (type === 'boolean') {\n    return (\n      <>\n        <PageDetail key={id} label={label} helpText={help_text}>\n          {inputs[id] ? t('Yes') : t('No')}\n        </PageDetail>\n      </>\n    );\n  }\n\n  if (inputs[id] === '$encrypted$') {\n    return (\n      <PageDetail key={id} label={label} helpText={help_text}>\n        {t(`Encrypted`)}\n      </PageDetail>\n    );\n  }\n\n  if (ask_at_runtime && inputs[id] === 'ASK') {\n    return (\n      <PageDetail helpText={help_text} key={id} label={label}>\n        {t(`Prompt on launch`)}{' '}\n      </PageDetail>\n    );\n  }\n\n  return (\n    <PageDetail key={id} label={label} helpText={help_text}>\n      {inputs[id]}\n    </PageDetail>\n  );\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport {\n  DateTimeCell,\n  PageDetail,\n  PageDetails,\n  TextCell,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { LoadingPage } from '../../../../../framework/components/LoadingPage';\nimport { LastModifiedPageDetail } from '../../../../common/LastModifiedPageDetail';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { AwxError } from '../../../common/AwxError';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxGetAllPages } from '../../../common/useAwxGetAllPages';\nimport { Credential } from '../../../interfaces/Credential';\nimport { CredentialInputSource } from '../../../interfaces/CredentialInputSource';\nimport { CredentialType } from '../../../interfaces/CredentialType';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { CredentialTypeDetail } from '../components/CredentialTypeDetail';\n\nconst PluginFieldText = styled.p`\n  margin-top: 10px;\n`;\n\nexport function CredentialDetails() {\n  const params = useParams<{ id: string }>();\n  const { data: credential, isLoading } = useGetItem<Credential>(awxAPI`/credentials`, params.id);\n\n  if (isLoading && !credential) {\n    return <LoadingPage />;\n  }\n\n  return credential ? <CredentialDetailsInner credential={credential} /> : null;\n}\n\nexport function CredentialDetailsInner(props: { credential: Credential }) {\n  const { t } = useTranslation();\n  const { credential } = props;\n  const pageNavigate = usePageNavigate();\n  const getPageUrl = useGetPageUrl();\n\n  const { summary_fields, inputs: credentialInputs } = credential;\n\n  const {\n    data: credentialType,\n    error,\n    refresh,\n  } = useGetItem<CredentialType>(\n    awxAPI`/credential_types`,\n    summary_fields.credential_type.id.toString()\n  );\n\n  const {\n    results: inputSources,\n    error: inputSourcesError,\n    isLoading: isInputSourceLoading,\n    refresh: refreshInputSources,\n  } = useAwxGetAllPages<CredentialInputSource>(\n    awxAPI`/credentials/${credential.id.toString()}/input_sources/`\n  );\n\n  const inputSourcesMap = useMemo(() => {\n    return inputSources?.reduce((map: Record<string, CredentialInputSource>, inputSource) => {\n      map[inputSource.input_field_name] = inputSource;\n      return map;\n    }, {});\n  }, [inputSources]);\n\n  if (error)\n    return (\n      <AwxError\n        error={error || inputSourcesError}\n        handleRefresh={error ? refresh : refreshInputSources}\n      />\n    );\n  if (isInputSourceLoading) return <LoadingPage breadcrumbs tabs />;\n  return (\n    <PageDetails>\n      <PageDetail label={t('Name')}>{credential.name}</PageDetail>\n      <PageDetail label={t('Description')}>{credential.description}</PageDetail>\n      <PageDetail label={t('Organization')}>\n        {credential.summary_fields.organization && (\n          <TextCell\n            text={credential.summary_fields?.organization?.name}\n            to={getPageUrl(AwxRoute.OrganizationDetails, {\n              params: { id: credential.summary_fields?.organization?.id },\n            })}\n          />\n        )}\n      </PageDetail>\n      <PageDetail label={t('Credential type')}>\n        {credentialType?.managed ? (\n          <TextCell text={credential.summary_fields?.credential_type?.name} />\n        ) : (\n          <TextCell\n            text={credential.summary_fields?.credential_type?.name}\n            to={getPageUrl(AwxRoute.CredentialTypeDetails, {\n              params: { id: credential.summary_fields?.credential_type?.id },\n            })}\n          />\n        )}\n      </PageDetail>\n      {inputSourcesMap &&\n        credentialInputs &&\n        (credentialType?.inputs.fields || []).map((field, i) => (\n          <CredentialTypeDetail\n            key={`${field.id}+ ${i}`}\n            inputs={credentialInputs}\n            field={field}\n            inputSources={inputSourcesMap}\n          />\n        ))}\n      <PageDetail label={t('Created')}>\n        <DateTimeCell\n          value={credential.created}\n          author={credential.summary_fields?.created_by?.username}\n          onClick={() =>\n            pageNavigate(AwxRoute.UserDetails, {\n              params: { id: credential.summary_fields?.created_by?.id },\n            })\n          }\n        />\n      </PageDetail>\n      <LastModifiedPageDetail\n        value={credential.modified}\n        author={credential.summary_fields?.modified_by?.username}\n        onClick={() =>\n          pageNavigate(AwxRoute.UserDetails, {\n            params: { id: credential.summary_fields?.modified_by?.id },\n          })\n        }\n      />\n      {credentialInputs && inputSources && Object.keys(inputSources).length > 0 && (\n        <PluginFieldText>\n          {t(\n            `* This field will be retrieved from an external secret management system using the specified credential.`\n          )}\n        </PluginFieldText>\n      )}\n    </PageDetails>\n  );\n}\n","import { HistoryIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  usePageNavigate,\n} from '../../../../framework';\nimport { AwxRoute } from '../../main/AwxRoutes';\nexport function useViewActivityStream<T extends object>(queryType: string) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  return useMemo<IPageAction<T>[]>(() => {\n    return [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: HistoryIcon,\n        label: t('View activity stream'),\n        onClick: () => pageNavigate(AwxRoute.ActivityStream, { query: { type: queryType } }),\n      },\n      { type: PageActionType.Seperator },\n    ];\n  }, [pageNavigate, queryType, t]);\n}\n","type ResourceRBAC = {\n  summary_fields: { user_capabilities: { edit: boolean; delete: boolean; copy?: boolean } };\n};\n\nexport const cannotEditResource = (\n  resource: ResourceRBAC,\n  t: (string: string) => string,\n  canCreateResource?: boolean\n) =>\n  resource?.summary_fields?.user_capabilities?.edit || canCreateResource\n    ? ''\n    : t(`This cannot be edited due to insufficient permissions.`);\n\nexport function cannotDeleteResource(resource: ResourceRBAC, t: (string: string) => string) {\n  if (resource.summary_fields?.user_capabilities?.delete) {\n    return '';\n  }\n  return t(`This cannot be deleted due to insufficient permissions.`);\n}\n\nexport function cannotDeleteResources(resources: ResourceRBAC[], t: (string: string) => string) {\n  if (resources.find((resource: ResourceRBAC) => cannotDeleteResource(resource, t))) {\n    return t(`Cannot delete due to insufficient permissions with one or many items.`);\n  }\n  return '';\n}\n\nexport const cannotCopyResource = (resource: ResourceRBAC, t: (string: string) => string) =>\n  resource?.summary_fields?.user_capabilities?.copy\n    ? ''\n    : t(`This cannot be copied due to insufficient permissions.`);\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { compareStrings } from '../../../../../framework';\nimport { useNameColumn } from '../../../../common/columns';\nimport { getItemKey, requestDelete } from '../../../../common/crud/Data';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { Credential } from '../../../interfaces/Credential';\nimport { useCredentialsColumns } from './useCredentialsColumns';\n\nexport function useDeleteCredentials(onComplete?: (credentials: Credential[]) => void) {\n  const { t } = useTranslation();\n  const confirmationColumns = useCredentialsColumns({ disableLinks: true, disableSort: true });\n  const deleteActionNameColumn = useNameColumn({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo(() => [deleteActionNameColumn], [deleteActionNameColumn]);\n  const bulkAction = useAwxBulkConfirmation<Credential>();\n  const deleteCredentials = (credentials: Credential[]) => {\n    bulkAction({\n      title: t('Permanently delete credentials', { count: credentials.length }),\n      confirmText: t('Yes, I confirm that I want to delete these {{count}} credentials.', {\n        count: credentials.length,\n      }),\n      actionButtonText: t('Delete credential', { count: credentials.length }),\n      items: credentials.sort((l, r) => compareStrings(l.name, r.name)),\n      keyFn: getItemKey,\n      isDanger: true,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: (credential: Credential, signal) =>\n        requestDelete(awxAPI`/credentials/${credential.id.toString()}/`, signal),\n    });\n  };\n  return deleteCredentials;\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport { CopyIcon, PencilAltIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  usePageNavigate,\n} from '../../../../../framework';\nimport {\n  cannotDeleteResource,\n  cannotEditResource,\n  cannotCopyResource,\n} from '../../../../common/utils/RBAChelpers';\nimport { Credential } from '../../../interfaces/Credential';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useDeleteCredentials } from './useDeleteCredentials';\nimport { useCopyCredential } from './useCopyCredential';\n\nexport function useCredentialActions(options?: {\n  onDeleted: (credentials: Credential[]) => void;\n  onCredentialCopied?: () => void;\n}) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const deleteCredentials = useDeleteCredentials(options?.onDeleted);\n  const copyCredential = useCopyCredential(options?.onCredentialCopied);\n  const rowActions = useMemo<IPageAction<Credential>[]>(\n    () => [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: PencilAltIcon,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        label: t('Edit credential'),\n        isDisabled: (credential) => cannotEditResource(credential, t),\n        onClick: (credential) =>\n          pageNavigate(AwxRoute.EditCredential, { params: { id: credential.id } }),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: CopyIcon,\n        label: t(`Copy credential`),\n        onClick: (credential: Credential) => copyCredential(credential),\n        isDisabled: (credential) => cannotCopyResource(credential, t),\n        isDanger: false,\n        isPinned: true,\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: TrashIcon,\n        label: t('Delete credential'),\n        isDisabled: (credential) => cannotDeleteResource(credential, t),\n        onClick: (credential) => deleteCredentials([credential]),\n        isDanger: true,\n      },\n    ],\n    [pageNavigate, copyCredential, deleteCredentials, t]\n  );\n  return rowActions;\n}\n","import { AlertProps } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { usePageAlertToaster } from '../../../../../framework';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { Credential } from '../../../interfaces/Credential';\n\nexport function useCopyCredential(onComplete?: () => void) {\n  const { t } = useTranslation();\n  const postRequest = usePostRequest();\n  const alertToaster = usePageAlertToaster();\n\n  const copyCredential = (credential: Credential) => {\n    const alert: AlertProps = {\n      variant: 'success',\n      title: t(`${credential.name} copied.`),\n      timeout: 2000,\n    };\n    postRequest(awxAPI`/credentials/${credential.id.toString()}/copy/`, {\n      name: `${credential.name} @ ${new Date()\n        .toTimeString()\n        .replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, '$1')}`,\n    })\n      .then(() => {\n        alertToaster.addAlert(alert);\n      })\n      .catch((error) => {\n        alertToaster.replaceAlert(alert, {\n          variant: 'danger',\n          title: t('Failed to copy credential'),\n          children: error instanceof Error && error.message,\n        });\n      })\n      .finally(onComplete);\n  };\n  return copyCredential;\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  PageActions,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { PageRoutedTabs } from '../../../../common/PageRoutedTabs';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { Credential } from '../../../interfaces/Credential';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useViewActivityStream } from '../../common/useViewActivityStream';\nimport { useCredentialActions } from '../hooks/useCredentialActions';\n\nexport function CredentialPage() {\n  const { t } = useTranslation();\n  const activityStream = useViewActivityStream('credential');\n  const params = useParams<{ id: string }>();\n  const { data: credential } = useGetItem<Credential>(awxAPI`/credentials`, params.id);\n  const getPageUrl = useGetPageUrl();\n  const pageNavigate = usePageNavigate();\n  const actions = useCredentialActions({\n    onDeleted: () => pageNavigate(AwxRoute.Credentials),\n  });\n  return (\n    <PageLayout>\n      <PageHeader\n        title={credential?.name}\n        breadcrumbs={[\n          { label: t('Credentials'), to: getPageUrl(AwxRoute.Credentials) },\n          { label: credential?.name },\n        ]}\n        headerActions={\n          <PageActions<Credential>\n            actions={[...activityStream, ...actions]}\n            position={DropdownPosition.right}\n            selectedItem={credential}\n          />\n        }\n      />\n      <PageRoutedTabs\n        backTab={{\n          label: t('Back to Credentials'),\n          page: AwxRoute.Credentials,\n          persistentFilterKey: 'credentials',\n        }}\n        tabs={[\n          { label: t('Details'), page: AwxRoute.CredentialDetails, dataCy: 'credential-details' },\n          {\n            label: t('Job Templates'),\n            page: AwxRoute.CredentialJobTemplates,\n            dataCy: 'job-templates',\n          },\n          { label: t('Team Access'), page: AwxRoute.CredentialTeamAccess, dataCy: 'team-access' },\n          { label: t('User Access'), page: AwxRoute.CredentialUserAccess, dataCy: 'user-access' },\n        ]}\n        params={{ id: params.id || 0 }}\n      />\n    </PageLayout>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { PageTable, usePageNavigate } from '../../../../framework';\nimport { useAwxView } from '../../common/useAwxView';\nimport { Credential } from '../../interfaces/Credential';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { useCredentialActions } from './hooks/useCredentialActions';\nimport { useCredentialToolbarActions } from './hooks/useCredentialToolbarActions';\nimport { useCredentialsColumns } from './hooks/useCredentialsColumns';\nimport { useCredentialsFilters } from './hooks/useCredentialsFilters';\nimport { usePersistentFilters } from '../../../common/PersistentFilters';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\n\nexport function CredentialsList(props: { url: string }) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const tableColumns = useCredentialsColumns();\n\n  usePersistentFilters('credentials');\n  const toolbarFilters = useCredentialsFilters();\n\n  const view = useAwxView<Credential>({\n    url: props.url,\n    toolbarFilters,\n    tableColumns,\n  });\n  const toolbarActions = useCredentialToolbarActions(view);\n  const rowActions = useCredentialActions({\n    onDeleted: () => void view.refresh(),\n    onCredentialCopied: () => void view.refresh(),\n  });\n\n  return (\n    <PageTable<Credential>\n      id=\"awx-credentials-table\"\n      toolbarFilters={toolbarFilters}\n      toolbarActions={toolbarActions}\n      tableColumns={tableColumns}\n      rowActions={rowActions}\n      errorStateTitle={t('Error loading credentials')}\n      emptyStateTitle={t('No credentials yet')}\n      emptyStateDescription={t('To get started, create an credential.')}\n      emptyStateButtonIcon={<PlusCircleIcon />}\n      emptyStateButtonText={t('Create credential')}\n      emptyStateButtonClick={() => pageNavigate(AwxRoute.CreateCredential)}\n      {...view}\n      defaultSubtitle={t('Credential')}\n    />\n  );\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport { PlusCircleIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { IAwxView } from '../../../common/useAwxView';\nimport { Credential } from '../../../interfaces/Credential';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useDeleteCredentials } from './useDeleteCredentials';\n\nexport function useCredentialToolbarActions(view: IAwxView<Credential>) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const deleteCredentials = useDeleteCredentials(view.unselectItemsAndRefresh);\n  const toolbarActions = useMemo<IPageAction<Credential>[]>(\n    () => [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.None,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        icon: PlusCircleIcon,\n        label: t('Create credential'),\n        onClick: () => pageNavigate(AwxRoute.CreateCredential),\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: TrashIcon,\n        label: t('Delete credentials'),\n        onClick: deleteCredentials,\n        isDanger: true,\n      },\n    ],\n    [pageNavigate, deleteCredentials, t]\n  );\n  return toolbarActions;\n}\n","import { useTranslation } from 'react-i18next';\nimport { PageHeader, PageLayout } from '../../../../framework';\nimport { usePersistentFilters } from '../../../common/PersistentFilters';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { useAwxConfig } from '../../common/useAwxConfig';\nimport { useGetDocsUrl } from '../../common/util/useGetDocsUrl';\nimport { CredentialsList } from './CredentialsList';\nimport { ActivityStreamIcon } from '../../common/ActivityStreamIcon';\n\nexport function Credentials() {\n  const { t } = useTranslation();\n  const product: string = process.env.PRODUCT ?? t('AWX');\n  usePersistentFilters('credentials');\n  const config = useAwxConfig();\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Credentials')}\n        titleHelpTitle={t('Credentials')}\n        titleHelp={t(\n          `Credentials are utilized by {{product}} for authentication when launching jobs against machines, synchronizing with inventory sources, and importing project content from a version control system. You can grant users and teams the ability to use these credentials, without actually exposing the credential to the user. If you have a user move to a different team or leave the organization, you don’t have to re-key all of your systems just because that credential was available in {{product}}.`,\n          { product }\n        )}\n        titleDocLink={useGetDocsUrl(config, 'credentials')}\n        description={t(\n          `Credentials are utilized by {{product}} for authentication when launching jobs against machines, synchronizing with inventory sources, and importing project content from a version control system.`,\n          { product }\n        )}\n        headerActions={<ActivityStreamIcon type={'credential'} />}\n      />\n      <CredentialsList url={awxAPI`/credentials/`} />\n    </PageLayout>\n  );\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { compareStrings } from '../../../../../framework';\nimport { useNameColumn } from '../../../../common/columns';\nimport { getItemKey, requestDelete } from '../../../../common/crud/Data';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { JobTemplate } from '../../../interfaces/JobTemplate';\nimport { WorkflowJobTemplate } from '../../../interfaces/WorkflowJobTemplate';\nimport { useTemplateColumns } from './useTemplateColumns';\n\nexport function useDeleteTemplates(\n  onComplete: (templates: (JobTemplate | WorkflowJobTemplate)[]) => void\n) {\n  const { t } = useTranslation();\n  const confirmationColumns = useTemplateColumns({ disableLinks: true, disableSort: true });\n  const deleteActionNameColumn = useNameColumn({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo(() => [deleteActionNameColumn], [deleteActionNameColumn]);\n  const bulkAction = useAwxBulkConfirmation<JobTemplate | WorkflowJobTemplate>();\n  const getSingularDeleteTitle = (type: string) =>\n    type === 'job_template'\n      ? t('Permanently delete job template')\n      : t('Permanently delete workflow job template');\n  const deleteTemplates = (templates: (JobTemplate | WorkflowJobTemplate)[]) => {\n    bulkAction({\n      title:\n        templates.length === 1\n          ? getSingularDeleteTitle(templates[0].type)\n          : t('Permanently delete templates'),\n      confirmText: t('Yes, I confirm that I want to delete these {{count}} templates.', {\n        count: templates.length,\n      }),\n      actionButtonText: t('Delete template', { count: templates.length }),\n      items: templates.sort((l: { name: string }, r: { name: string }) =>\n        compareStrings(l.name, r.name)\n      ),\n      keyFn: getItemKey,\n      isDanger: true,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: (template: JobTemplate | WorkflowJobTemplate, signal) => {\n        if (template.type === 'job_template') {\n          return requestDelete(awxAPI`/job_templates/${template.id.toString()}/`, signal);\n        } else {\n          return requestDelete(awxAPI`/workflow_job_templates/${template.id.toString()}/`, signal);\n        }\n      },\n    });\n  };\n  return deleteTemplates;\n}\n","import {\n  CopyIcon,\n  PencilAltIcon,\n  ProjectDiagramIcon,\n  RocketIcon,\n  TrashIcon,\n} from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ButtonVariant } from '@patternfly/react-core';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  useGetPageUrl,\n} from '../../../../../framework';\nimport { JobTemplate } from '../../../interfaces/JobTemplate';\nimport { WorkflowJobTemplate } from '../../../interfaces/WorkflowJobTemplate';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useDeleteTemplates } from '../hooks/useDeleteTemplates';\nimport { useLaunchTemplate } from './useLaunchTemplate';\nimport { useCopyTemplate } from './useCopyTemplate';\nimport { missingResources } from './useTemplateColumns';\n\ntype Template = JobTemplate | WorkflowJobTemplate;\ntype TemplateActionOptions = {\n  onTemplatesDeleted: (templates: Template[]) => void;\n  onTemplateCopied?: () => unknown;\n};\n\nexport function useTemplateActions({\n  onTemplatesDeleted,\n  onTemplateCopied = () => null,\n}: TemplateActionOptions) {\n  const { t } = useTranslation();\n  const deleteTemplates = useDeleteTemplates(onTemplatesDeleted);\n  const launchTemplate = useLaunchTemplate();\n  const copyTemplate = useCopyTemplate(onTemplateCopied);\n  const getPageUrl = useGetPageUrl();\n\n  return useMemo<IPageAction<Template>[]>(() => {\n    const itemActions: IPageAction<Template>[] = [\n      {\n        type: PageActionType.Link,\n        isHidden: (template) => template?.type !== 'workflow_job_template',\n        selection: PageActionSelection.Single,\n        isPinned: true,\n        icon: ProjectDiagramIcon,\n        label: t('View workflow visualizer'),\n        variant: ButtonVariant.primary,\n        ouiaId: 'job-template-detail-edit-button',\n        href: (template) =>\n          getPageUrl(AwxRoute.WorkflowVisualizer, { params: { id: template.id } }),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: RocketIcon,\n        label: t('Launch template'),\n        onClick: (template: Template) => void launchTemplate(template),\n        isDisabled: (template: Template) =>\n          missingResources(template)\n            ? t('Resources are missing from this template.')\n            : !template?.summary_fields.user_capabilities.start\n              ? t('You do not have permission to launch this template')\n              : undefined,\n        ouiaId: 'job-template-detail-launch-button',\n        isDanger: false,\n        isPinned: true,\n      },\n      {\n        type: PageActionType.Link,\n        selection: PageActionSelection.Single,\n        isPinned: true,\n        isHidden: (template) => !template?.summary_fields?.user_capabilities?.edit,\n        icon: PencilAltIcon,\n        label: t('Edit template'),\n        ouiaId: 'job-template-detail-edit-button',\n        href: (template) =>\n          getPageUrl(\n            template.type === 'job_template'\n              ? AwxRoute.EditJobTemplate\n              : AwxRoute.EditWorkflowJobTemplate,\n            { params: { id: template?.id.toString() } }\n          ),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: CopyIcon,\n        label: t('Copy template'),\n        onClick: (template: Template) => copyTemplate(template),\n        isDisabled: (template: Template) =>\n          !template?.summary_fields.user_capabilities.copy\n            ? t('You do not have permission to copy this template')\n            : undefined,\n        ouiaId: 'job-template-detail-copy-button',\n        isDanger: false,\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: TrashIcon,\n        isDisabled: (template) =>\n          !template?.summary_fields?.user_capabilities?.delete\n            ? t('You do not have permission to delete this template')\n            : undefined,\n        label: t('Delete template'),\n        onClick: (template) => {\n          if (!template) return;\n          deleteTemplates([template]);\n        },\n        ouiaId: 'job-template-detail-delete-button',\n        isDanger: true,\n      },\n    ];\n    return itemActions;\n  }, [copyTemplate, deleteTemplates, getPageUrl, launchTemplate, t]);\n}\n","import { AlertProps } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { usePageAlertToaster } from '../../../../../framework';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { JobTemplate } from '../../../interfaces/JobTemplate';\nimport { WorkflowJobTemplate } from '../../../interfaces/WorkflowJobTemplate';\n\nexport function useCopyTemplate(onComplete: () => void) {\n  const { t } = useTranslation();\n  const postRequest = usePostRequest();\n  const alertToaster = usePageAlertToaster();\n\n  const copyTemplate = (template: JobTemplate | WorkflowJobTemplate) => {\n    const alert: AlertProps = {\n      variant: 'success',\n      title: t(`${template.name} copied.`),\n      timeout: 2000,\n    };\n    if (template.type === 'job_template') {\n      postRequest(awxAPI`/job_templates/${template.id.toString()}/copy/`, {\n        name: `${template.name} @ ${new Date()\n          .toTimeString()\n          .replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, '$1')}`,\n      })\n        .then(() => {\n          alertToaster.addAlert(alert);\n        })\n        .catch((error) => {\n          alertToaster.replaceAlert(alert, {\n            variant: 'danger',\n            title: t('Failed to copy template'),\n            children: error instanceof Error && error.message,\n          });\n        })\n        .finally(onComplete);\n    } else if (template.type === 'workflow_job_template') {\n      postRequest(awxAPI`/workflow_job_templates/${template.id.toString()}/copy/`, {\n        name: `${template.name} @ ${new Date()\n          .toTimeString()\n          .replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, '$1')}`,\n      })\n        .then(() => {\n          alertToaster.addAlert(alert);\n        })\n        .catch((error) => {\n          alertToaster.replaceAlert(alert, {\n            variant: 'danger',\n            title: t('Failed to copy template'),\n            children: error instanceof Error && error.message,\n          });\n        })\n        .finally(onComplete);\n    }\n  };\n  return copyTemplate;\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport { PlusCircleIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  PageTable,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { usePersistentFilters } from '../../../common/PersistentFilters';\nimport { useAwxView } from '../../common/useAwxView';\nimport { JobTemplate } from '../../interfaces/JobTemplate';\nimport { WorkflowJobTemplate } from '../../interfaces/WorkflowJobTemplate';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { useDeleteTemplates } from './hooks/useDeleteTemplates';\nimport { useTemplateActions } from './hooks/useTemplateActions';\nimport { useTemplateColumns } from './hooks/useTemplateColumns';\nimport { useTemplateFilters } from './hooks/useTemplateFilters';\nimport { useOptions } from '../../../common/crud/useOptions';\nimport { ActionsResponse, OptionsResponse } from '../../interfaces/OptionsResponse';\nimport { awxAPI } from '../../common/api/awx-utils';\n\nexport function TemplatesList(props: {\n  url?: string;\n  projectId?: string;\n  inventoryId?: string;\n  credentialsId?: string;\n  executionEnvironmentId?: string;\n}) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const getPageUrl = useGetPageUrl();\n  const toolbarFilters = useTemplateFilters({\n    url: props.url,\n    projectId: props.projectId,\n    inventoryId: props.inventoryId,\n    credentialsId: props.credentialsId,\n    executionEnvironmentId: props.executionEnvironmentId,\n  });\n  const tableColumns = useTemplateColumns();\n  const getQueryParams = (\n    projectId?: string,\n    inventoryId?: string,\n    credentialsId?: string,\n    executionEnvironmentId?: string\n  ) => {\n    const templateQueryParams: { [key: string]: string } = {\n      type: 'job_template,workflow_job_template',\n      // order_by: '-last_job_run',\n    };\n    if (projectId) {\n      templateQueryParams.project__id = projectId;\n    }\n    if (inventoryId) {\n      templateQueryParams.inventory__id = inventoryId;\n    }\n    if (credentialsId) {\n      templateQueryParams.credentials__id = credentialsId;\n    }\n    if (executionEnvironmentId) {\n      templateQueryParams.execution_environment__id = executionEnvironmentId;\n    }\n    return templateQueryParams;\n  };\n  const view = useAwxView<JobTemplate | WorkflowJobTemplate>({\n    url: props.url ? props.url : awxAPI`/unified_job_templates/`,\n    queryParams: getQueryParams(\n      props.projectId,\n      props.inventoryId,\n      props.credentialsId,\n      props.executionEnvironmentId\n    ),\n    toolbarFilters,\n    tableColumns,\n  });\n\n  const { data: jobTemplateActions } = useOptions<OptionsResponse<ActionsResponse>>(\n    awxAPI`/job_templates/`\n  );\n\n  const { data: wfJobTemplateActions } = useOptions<OptionsResponse<ActionsResponse>>(\n    awxAPI`/workflow_job_templates/`\n  );\n\n  const canCreateJobTemplate = Boolean(\n    jobTemplateActions && jobTemplateActions.actions && jobTemplateActions.actions['POST']\n  );\n\n  const canCreateWFJobTemplate = Boolean(\n    wfJobTemplateActions && wfJobTemplateActions.actions && wfJobTemplateActions.actions['POST']\n  );\n\n  usePersistentFilters('templates');\n  const deleteTemplates = useDeleteTemplates(view.unselectItemsAndRefresh);\n\n  const toolbarActions = useMemo<IPageAction<JobTemplate | WorkflowJobTemplate>[]>(\n    () => [\n      {\n        type: PageActionType.Dropdown,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        label: t('Create template'),\n        isDisabled:\n          canCreateJobTemplate || canCreateWFJobTemplate\n            ? undefined\n            : t(\n                'You do not have permission to create a template. Please contact your organization administrator if there is an issue with your access.'\n              ),\n        selection: PageActionSelection.None,\n        icon: PlusCircleIcon,\n        actions: [\n          {\n            type: PageActionType.Link,\n            selection: PageActionSelection.None,\n            label: t('Create job template'),\n            isDisabled: canCreateJobTemplate\n              ? undefined\n              : 'You do not have permission to create a job template. Please contact your organization administrator if there is an issue with your access.',\n            href: getPageUrl(AwxRoute.CreateJobTemplate),\n          },\n          {\n            type: PageActionType.Link,\n            selection: PageActionSelection.None,\n            label: t('Create workflow job template'),\n            isDisabled: canCreateWFJobTemplate\n              ? undefined\n              : 'You do not have permission to create a workflow job template. Please contact your organization administrator if there is an issue with your access.',\n            href: getPageUrl(AwxRoute.CreateWorkflowJobTemplate),\n          },\n        ],\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: TrashIcon,\n        label: 'Delete templates',\n        onClick: deleteTemplates,\n        isDanger: true,\n      },\n    ],\n    [canCreateJobTemplate, canCreateWFJobTemplate, deleteTemplates, getPageUrl, t]\n  );\n\n  const rowActions = useTemplateActions({\n    onTemplatesDeleted: view.unselectItemsAndRefresh,\n    onTemplateCopied: view.refresh,\n  });\n\n  return (\n    <PageTable<JobTemplate | WorkflowJobTemplate>\n      id=\"awx-job-templates-table\"\n      toolbarFilters={toolbarFilters}\n      toolbarActions={toolbarActions}\n      tableColumns={tableColumns}\n      rowActions={rowActions}\n      errorStateTitle={t('Error loading templates')}\n      emptyStateTitle={\n        canCreateJobTemplate || canCreateWFJobTemplate\n          ? t('No templates yet')\n          : t('You do not have permission to create a template')\n      }\n      emptyStateDescription={\n        canCreateJobTemplate || canCreateWFJobTemplate\n          ? t('Please create a template by using the button below.')\n          : t(\n              'Please contact your organization administrator if there is an issue with your access.'\n            )\n      }\n      emptyStateButtonIcon={<PlusCircleIcon />}\n      emptyStateButtonText={\n        canCreateJobTemplate || canCreateWFJobTemplate ? t('Create template') : undefined\n      }\n      emptyStateButtonClick={\n        canCreateJobTemplate ? () => pageNavigate(AwxRoute.CreateJobTemplate) : undefined\n      }\n      {...view}\n      defaultSubtitle={t('Template')}\n    />\n  );\n}\n","import {\n  useCreatedByToolbarFilter,\n  useModifiedByToolbarFilter,\n  useTemplateTypeToolbarFilter,\n} from '../../../common/awx-toolbar-filters';\nimport { useDynamicToolbarFilters } from '../../../common/useDynamicFilters';\n\nexport function useTemplateFilters({\n  url,\n  projectId,\n  inventoryId,\n  credentialsId,\n  executionEnvironmentId,\n}: {\n  url?: string;\n  projectId?: string;\n  inventoryId?: string;\n  credentialsId?: string;\n  executionEnvironmentId?: string;\n} = {}) {\n  const splitUrl = url ? url.split('/') : [];\n  const optionsPath = splitUrl[splitUrl.length - 2] || 'unified_job_templates';\n  const createdByToolbarFilter = useCreatedByToolbarFilter();\n  const modifiedByToolbarFilter = useModifiedByToolbarFilter();\n  const typeToolbarFilter = useTemplateTypeToolbarFilter();\n  const getQueryParams = (\n    projectId?: string,\n    inventoryId?: string,\n    credentialsId?: string,\n    executionEnvironmentId?: string\n  ) => {\n    const templateQueryParams: { [key: string]: string } = {\n      type: 'job_template,workflow_job_template',\n    };\n    if (projectId) {\n      templateQueryParams.project__id = projectId;\n    }\n    if (inventoryId) {\n      templateQueryParams.inventory__id = inventoryId;\n    }\n    if (credentialsId) {\n      templateQueryParams.credentials__id = credentialsId;\n    }\n    if (executionEnvironmentId) {\n      templateQueryParams.execution_environment__id = executionEnvironmentId;\n    }\n    return templateQueryParams;\n  };\n  const queryParams = getQueryParams(projectId, inventoryId, credentialsId, executionEnvironmentId);\n  const toolbarFilters = useDynamicToolbarFilters({\n    optionsPath: optionsPath,\n    preSortedKeys: ['name', 'description', 'status', 'created-by', 'modified-by', 'type-templates'],\n    preFilledValueKeys: {\n      name: {\n        apiPath: optionsPath,\n        queryParams: queryParams,\n      },\n      id: {\n        apiPath: optionsPath,\n        queryParams: queryParams,\n      },\n    },\n    additionalFilters: [createdByToolbarFilter, modifiedByToolbarFilter, typeToolbarFilter],\n    removeFilters: ['type'], // Remove the default type filter provided by API as it gives additional types that are not applicable to the Templates list view\n  });\n  return toolbarFilters;\n}\n","import { useParams } from 'react-router-dom';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { TemplatesList } from '../../../resources/templates/TemplatesList';\n\nexport function CredentialJobTemplates() {\n  const { id = '' } = useParams<{ id: string }>();\n  return <TemplatesList url={awxAPI`/job_templates/`} credentialsId={id} />;\n}\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport function useMapContentTypeToDisplayName() {\n  const { t } = useTranslation();\n  /**\n   * Maps content/resource types to a translated display name\n   *\n   * @param contentType content-type field received from the role_user_assignment/ role_team_assignment/ role_definitions APIs\n   * @param options.isTitleCase indicates if the display name should be title case or not\n   */\n  return useCallback(\n    (contentType: string, options?: { isTitleCase: boolean }) => {\n      const contentTypeToDisplayName: { [key: string]: string } = {\n        edacredential: options?.isTitleCase ? t('Credential') : t('credential'),\n        credential: options?.isTitleCase ? t('Credential') : t('credential'),\n        project: options?.isTitleCase ? t('Project') : t('project'),\n        activation: options?.isTitleCase ? t('Rulebook activation') : t('rulebook activation'),\n        rulebook: options?.isTitleCase ? t('Rulebook') : t('rulebook'),\n        rulebookprocess: options?.isTitleCase ? t('Rulebook Process') : t('rulebook process'),\n        credentialtype: options?.isTitleCase ? t('Credential Type') : t('credential type'),\n        decisionenvironment: options?.isTitleCase\n          ? t('Decision Environment')\n          : t('decision environment'),\n        eventstream: options?.isTitleCase ? t('Event Stream') : t('event stream'),\n        auditrule: options?.isTitleCase ? t('Rule Audit') : t('rule audit'),\n        team: options?.isTitleCase ? t('Team') : t('team'),\n        organization: options?.isTitleCase ? t('Organization') : t('organization'),\n        executionenvironment: options?.isTitleCase\n          ? t('Execution Environment')\n          : t('execution environment'),\n        jobtemplate: options?.isTitleCase ? t('Job Template') : t('job template'),\n        workflowjobtemplate: options?.isTitleCase\n          ? t('Workflow Job Template')\n          : t('workflow job template'),\n        notificationtemplate: options?.isTitleCase\n          ? t('Notification Template')\n          : t('notification template'),\n        instancegroup: options?.isTitleCase ? t('Instance Group') : t('instance group'),\n        inventory: options?.isTitleCase ? t('Inventory') : t('inventory'),\n        namespace: options?.isTitleCase ? t('Namespace') : t('namespace'),\n        collectionremote: options?.isTitleCase ? t('Remote') : t('remote'),\n        containernamespace: options?.isTitleCase\n          ? t('Execution Environment')\n          : t('execution environment'),\n        containerrepository: options?.isTitleCase\n          ? t('Container Repository')\n          : t('container repository'),\n        ansiblerepository: options?.isTitleCase ? t('Repository') : t('repository'),\n        system: options?.isTitleCase ? t('System') : t('system'),\n        null: options?.isTitleCase ? t('System') : t('system'),\n      };\n      const shortType = contentType?.split('.').pop() || contentType;\n\n      return contentTypeToDisplayName[shortType] ?? shortType;\n    },\n    [t]\n  );\n}\n","import { useMemo, useState } from 'react';\nimport { usePageWizard } from '../../../../../framework/PageWizard/PageWizardProvider';\nimport { Badge, Divider, ExpandableSection, Title } from '@patternfly/react-core';\nimport {\n  ITableColumn,\n  PageDetails,\n  PageDetail,\n  PageTable,\n  TextCell,\n  useInMemoryView,\n} from '../../../../../framework';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\nimport { useMapContentTypeToDisplayName } from '../../hooks/useMapContentTypeToDisplayName';\n\ntype ResourceTypeWithID = {\n  id: number | string;\n  name: string;\n  description?: string;\n  username?: never;\n};\ntype ResourceTypeWithPulpHref = {\n  pulp_href: string;\n  name: string;\n  description?: string;\n  username?: never;\n};\ntype Team = { id: number; name: string; username?: never };\ntype User = { id: number; name?: never; username: string };\ntype Role = { id: number; name: string; description?: string; username?: never };\n\ntype ReviewData = {\n  resourceType?: string;\n  resources?: (ResourceTypeWithID | ResourceTypeWithPulpHref)[];\n  edaRoles?: Role[];\n  awxRoles?: Role[];\n  hubRoles?: Role[];\n  teams?: Team[];\n  users?: User[];\n};\n\ninterface ReviewExpandableListProps<\n  K extends ResourceTypeWithID | ResourceTypeWithPulpHref | Team | User,\n> {\n  selectedItems: K[];\n  label?: string;\n  fieldName: string;\n  edaRolesLabel?: string;\n  awxRolesLabel?: string;\n  hubRolesLabel?: string;\n}\n\nconst StyledBadge = styled(Badge)`\n  margin-left: var(--pf-v5-global--spacer--sm);\n`;\nconst StyledDivider = styled(Divider)`\n  margin: var(--pf-v5-global--spacer--md) 0 var(--pf-v5-global--spacer--md) 0;\n`;\n\nexport function RoleAssignmentsReviewStep(props: {\n  edaRolesLabel?: string;\n  awxRolesLabel?: string;\n  hubRolesLabel?: string;\n  selectedUser?: { id: number; name?: never; username: string };\n  selectedTeam?: { id: number; name: string; username?: never };\n}) {\n  const { wizardData } = usePageWizard();\n  const { t } = useTranslation();\n  const { resourceType, resources, users, teams, edaRoles, awxRoles, hubRoles } =\n    wizardData as ReviewData;\n  const getDisplayName = useMapContentTypeToDisplayName();\n\n  return (\n    <>\n      <Title headingLevel=\"h1\">{t('Review')}</Title>\n      {resourceType ? (\n        <>\n          <div\n            style={{\n              marginTop: 'var(--pf-v5-global--spacer--lg)',\n            }}\n          >\n            <PageDetails disablePadding>\n              <PageDetail label={t('Resource type')}>\n                {getDisplayName(resourceType, { isTitleCase: true })}\n              </PageDetail>\n            </PageDetails>\n          </div>\n          <StyledDivider className=\"pf-v5-u-mb-xl\" />\n        </>\n      ) : null}\n      {props.selectedUser ? (\n        <>\n          <div\n            style={{\n              marginTop: 'var(--pf-v5-global--spacer--lg)',\n            }}\n          >\n            <PageDetails disablePadding>\n              <PageDetail label={t('User')}>{props.selectedUser.username}</PageDetail>\n            </PageDetails>\n          </div>\n          <StyledDivider className=\"pf-v5-u-mb-xl\" />\n        </>\n      ) : null}\n      {props.selectedTeam ? (\n        <>\n          <div\n            style={{\n              marginTop: 'var(--pf-v5-global--spacer--lg)',\n            }}\n          >\n            <PageDetails disablePadding>\n              <PageDetail label={t('Team')}>{props.selectedTeam.name}</PageDetail>\n            </PageDetails>\n          </div>\n          <StyledDivider className=\"pf-v5-u-mb-xl\" />\n        </>\n      ) : null}\n      {resources && resources.length ? (\n        <>\n          <ReviewExpandableList selectedItems={resources} fieldName=\"resources\" />\n          <StyledDivider />\n        </>\n      ) : null}\n      {users && users.length ? (\n        <>\n          <ReviewExpandableList selectedItems={users} fieldName=\"users\" />\n          <StyledDivider />\n        </>\n      ) : null}\n      {teams && teams.length ? (\n        <>\n          <ReviewExpandableList selectedItems={teams} fieldName=\"teams\" />\n          <StyledDivider />\n        </>\n      ) : null}\n      {edaRoles && edaRoles.length ? (\n        <ReviewExpandableList selectedItems={edaRoles} fieldName=\"edaRoles\" {...props} />\n      ) : null}\n      {awxRoles && awxRoles.length ? (\n        <ReviewExpandableList selectedItems={awxRoles} fieldName=\"awxRoles\" {...props} />\n      ) : null}\n      {hubRoles && hubRoles.length ? (\n        <ReviewExpandableList selectedItems={hubRoles} fieldName=\"hubRoles\" {...props} />\n      ) : null}\n    </>\n  );\n}\n\nfunction ReviewExpandableList<\n  K extends ResourceTypeWithID | ResourceTypeWithPulpHref | Team | User,\n>(props: ReviewExpandableListProps<K>) {\n  const { label, selectedItems, fieldName, edaRolesLabel, awxRolesLabel, hubRolesLabel } = props;\n  const [isExpanded, setIsExpanded] = useState(true);\n  const onToggle = (_event: React.MouseEvent, isExpanded: boolean) => {\n    setIsExpanded(isExpanded);\n  };\n  const { t } = useTranslation();\n  const labelForSelectedItems = useMemo(() => {\n    if (label) {\n      return label;\n    }\n    switch (fieldName) {\n      case 'users':\n        return t('Users');\n      case 'teams':\n        return t('Teams');\n      case 'resources':\n        return t('Resources');\n      case 'edaRoles':\n        return edaRolesLabel || t('Roles');\n      case 'awxRoles':\n        return awxRolesLabel || t('Roles');\n      case 'hubRoles':\n        return hubRolesLabel || t('Roles');\n      default:\n        return '';\n    }\n  }, [awxRolesLabel, edaRolesLabel, hubRolesLabel, fieldName, label, t]);\n\n  const tableColumns: ITableColumn<K>[] = useMemo(() => {\n    switch (fieldName) {\n      case 'users':\n        return [\n          {\n            header: t('Username'),\n            cell: (user: K) => <TextCell text={user.username} />,\n            card: 'name',\n            list: 'name',\n            sort: 'username',\n            maxWidth: 200,\n          },\n        ];\n      case 'awxRoles':\n      case 'edaRoles':\n      case 'hubRoles':\n        return [\n          {\n            header: t('Name'),\n            cell: (item: K) => <TextCell text={item.name} />,\n            card: 'name',\n            list: 'name',\n            sort: 'name',\n          },\n          {\n            header: t('Description'),\n            cell: (role: K) =>\n              (role as { id: number; name: string; description?: string; username?: never })\n                .description && (\n                <TextCell\n                  text={\n                    (role as { id: number; name: string; description?: string; username?: never })\n                      .description\n                  }\n                />\n              ),\n            card: 'description',\n            list: 'description',\n          },\n        ];\n      default:\n        return [\n          {\n            header: t('Name'),\n            cell: (item: K) => <TextCell text={item.name} />,\n            card: 'name',\n            list: 'name',\n            sort: 'name',\n          },\n        ];\n    }\n  }, [fieldName, t]);\n\n  const view = useInMemoryView<K>({\n    keyFn: (item) => {\n      if ((item as ResourceTypeWithPulpHref).pulp_href) {\n        return (item as ResourceTypeWithPulpHref).pulp_href;\n      }\n      return (item as ResourceTypeWithID | Team | Role | User).id;\n    },\n    items: selectedItems,\n    tableColumns,\n  });\n\n  if (view?.itemCount === 0) {\n    return null;\n  }\n\n  return (\n    <ExpandableSection\n      data-cy={`expandable-section-${fieldName}`}\n      toggleContent={\n        <div>\n          <span>{labelForSelectedItems}</span>\n          <StyledBadge isRead>{selectedItems.length}</StyledBadge>\n        </div>\n      }\n      onToggle={onToggle}\n      isExpanded={isExpanded}\n    >\n      <PageTable<K>\n        {...view}\n        tableColumns={tableColumns}\n        errorStateTitle=\"NEVER\"\n        emptyStateTitle=\"NEVER\"\n        defaultSubtitle={t('Role')}\n        disablePagination\n        disableLastRowBorder\n        compact\n        borderless\n      />\n    </ExpandableSection>\n  );\n}\n","import { useEffect } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { IToolbarFilter, ITableColumn } from '../../../framework';\nimport { usePageWizard } from '../../../framework/PageWizard/PageWizardProvider';\nimport { QueryParams, useAwxView } from './useAwxView';\n\n/**\n * Hook for defining the view for a multi-select list in the context of a wizard. The selections made in the list\n * are maintained if the user returns to the step containing the list.\n * @param viewOptions Options for the view that defines the state of the table (URL, filters, columns etc.)\n * @param fieldName Specific field in the wizard that represents the selected items from the list\n * @returns The view that can be used to pass to the PageMultiSelectList component within a wizard\n */\nexport function useAwxMultiSelectListView<T extends { id: number }>(\n  viewOptions: {\n    url: string;\n    viewPage?: number;\n    viewPerPage?: number;\n    toolbarFilters?: IToolbarFilter[];\n    tableColumns?: ITableColumn<T>[];\n    queryParams?: QueryParams;\n    disableQueryString?: boolean;\n    defaultSort?: string | undefined;\n    defaultSortDirection?: 'asc' | 'desc' | undefined;\n  },\n  fieldName: string\n) {\n  const { setValue } = useFormContext();\n  const { wizardData, stepData } = usePageWizard();\n\n  const view = useAwxView<T>({\n    ...viewOptions,\n    defaultSelection: ((wizardData as { [key: string]: [] })[fieldName] ||\n      stepData[fieldName] ||\n      []) as T[],\n  });\n\n  useEffect(() => {\n    setValue(fieldName, view.selectedItems);\n  }, [setValue, fieldName, view.selectedItems]);\n\n  return view;\n}\n","import { ISelected, ITableColumn, IToolbarFilter, IView, TextCell } from '../../../../../framework';\nimport { useMemo } from 'react';\nimport { PageMultiSelectList } from '../../../../../framework/PageTable/PageMultiSelectList';\nimport { Label, LabelGroup, Split, SplitItem, Title } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\nimport { usePageWizard } from '../../../../../framework/PageWizard/PageWizardProvider';\n\ninterface SelectRolesStepProps<T extends object> {\n  view: IView & ISelected<T> & { itemCount?: number; pageItems: T[] | undefined; error?: Error };\n  tableColumns: ITableColumn<T>[];\n  toolbarFilters: IToolbarFilter[];\n  fieldNameForPreviousStep?: string;\n  descriptionForRoleSelection?: string;\n  title?: string;\n}\n\ninterface SelectRolesStepHeaderProps<\n  K extends { name: string; username?: never } | { name?: never; username: string },\n> {\n  selectedItemsFromPreviousStep?: K[];\n  labelForSelectedItemsFromPreviousStep?: string;\n  descriptionForRoleSelection?: string;\n  title?: string;\n  resourceType?: string;\n}\n\nconst StyledTitle = styled(Title)`\n  margin-bottom: 1rem;\n`;\n\nexport function SelectRolesStep<T extends object>(props: SelectRolesStepProps<T>) {\n  const { t } = useTranslation();\n  const {\n    view,\n    tableColumns,\n    toolbarFilters,\n    fieldNameForPreviousStep,\n    descriptionForRoleSelection,\n    title,\n  } = props;\n  const { wizardData } = usePageWizard();\n  const { resourceType } = wizardData as { [key: string]: unknown };\n\n  const selectedItemsFromPreviousStep = useMemo(() => {\n    if (wizardData && fieldNameForPreviousStep) {\n      return (wizardData as { [key: string]: [] })[fieldNameForPreviousStep];\n    }\n    return undefined;\n  }, [fieldNameForPreviousStep, wizardData]);\n\n  const labelForSelectedItemsFromPreviousStep = useMemo(() => {\n    if (selectedItemsFromPreviousStep?.length && fieldNameForPreviousStep) {\n      const previousStepKey =\n        fieldNameForPreviousStep === 'resources' ? resourceType : fieldNameForPreviousStep;\n      switch (previousStepKey) {\n        case 'users':\n          return t('Selected users');\n        case 'teams':\n          return t('Selected teams');\n        case 'eda.edacredential':\n          return t('Selected credentials');\n        case 'eda.project':\n          return t('Selected projects');\n        case 'eda.activation':\n          return t('Selected rulebook activations');\n        case 'eda.rulebook':\n          return t('Selected rulebooks');\n        case 'eda.rulebookprocess':\n          return t('Selected rulebook processes');\n        case 'eda.credentialtype':\n          return t('Selected credential types');\n        case 'eda.decisionenvironment':\n          return t('Selected decision environments');\n        case 'eda.auditrule':\n          return t('Selected audit rules');\n        default:\n          return undefined;\n      }\n    }\n    return undefined;\n  }, [fieldNameForPreviousStep, resourceType, selectedItemsFromPreviousStep?.length, t]);\n\n  return (\n    <>\n      <SelectRolesStepHeader\n        selectedItemsFromPreviousStep={selectedItemsFromPreviousStep}\n        labelForSelectedItemsFromPreviousStep={labelForSelectedItemsFromPreviousStep}\n        descriptionForRoleSelection={descriptionForRoleSelection}\n        title={title}\n        resourceType={resourceType ? (resourceType as string) : undefined}\n      ></SelectRolesStepHeader>\n      <PageMultiSelectList\n        view={view}\n        tableColumns={tableColumns}\n        toolbarFilters={toolbarFilters}\n        labelForSelectedItems={t('Selected roles')}\n        errorStateTitle={t('Error loading roles')}\n      />\n    </>\n  );\n}\n/**\n * Header for selection of roles: Shows title, description and optional labels for\n * users/teams/resources selected from the previous step\n */\nfunction SelectRolesStepHeader<\n  K extends { name: string; username?: never } | { name?: never; username: string },\n>(props: SelectRolesStepHeaderProps<K>) {\n  const {\n    selectedItemsFromPreviousStep,\n    labelForSelectedItemsFromPreviousStep,\n    descriptionForRoleSelection,\n    title,\n    resourceType,\n  } = props;\n  const { t } = useTranslation();\n  return (\n    <>\n      <StyledTitle headingLevel=\"h1\">{title ?? t('Select roles to apply')}</StyledTitle>\n      {resourceType !== 'system' ? (\n        <Split hasGutter>\n          <SplitItem style={{ fontWeight: 'bold', whiteSpace: 'nowrap' }}>\n            {labelForSelectedItemsFromPreviousStep ?? t('Selected')}\n          </SplitItem>\n          {selectedItemsFromPreviousStep && selectedItemsFromPreviousStep.length > 0 && (\n            <LabelGroup>\n              {selectedItemsFromPreviousStep?.map((item, i) => {\n                return (\n                  <Label key={i}>\n                    <TextCell text={item.name ? item.name : item.username} />\n                  </Label>\n                );\n              })}\n            </LabelGroup>\n          )}\n        </Split>\n      ) : null}\n      {descriptionForRoleSelection && (\n        <h2 style={{ marginTop: '1rem', marginBottom: '1rem' }}>{descriptionForRoleSelection}</h2>\n      )}\n    </>\n  );\n}\n","import { useMemo } from 'react';\nimport { ITableColumn, TextCell } from '../../../../../framework';\nimport { useTranslation } from 'react-i18next';\nimport { useAwxMultiSelectListView } from '../../../common/useAwxMultiSelectListView';\nimport { SelectRolesStep } from '../../../../common/access/RolesWizard/steps/SelectRolesStep';\nimport { usePageWizard } from '../../../../../framework/PageWizard/PageWizardProvider';\nimport { useAwxRolesFilters } from '../../roles/hooks/useAwxRolesFilters';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { AwxRbacRole } from '../../../interfaces/AwxRbacRole';\nimport { QueryParams } from '../../../common/useAwxView';\n\nexport function AwxSelectRolesStep(props: {\n  contentType?: string;\n  fieldNameForPreviousStep?: string;\n  descriptionForRoleSelection?: string;\n  title?: string;\n}) {\n  const toolbarFilters = useAwxRolesFilters();\n  const { t } = useTranslation();\n  const { wizardData } = usePageWizard();\n  const { resourceType } = wizardData as { [key: string]: unknown };\n  const { fieldNameForPreviousStep, title } = props;\n\n  const contentType = useMemo(() => {\n    return props.contentType ? props.contentType : (resourceType as string)?.split('.').pop() ?? '';\n  }, [props.contentType, resourceType]);\n\n  const descriptionForRoleSelection = useMemo(() => {\n    if (props.descriptionForRoleSelection) {\n      return props.descriptionForRoleSelection;\n    }\n    switch (resourceType as string) {\n      case 'awx.credential':\n        return t('Select roles to apply to all of your selected credentials.');\n      case 'awx.instancegroup':\n        return t('Select roles to apply to all of your selected instance groups.');\n      case 'awx.inventory':\n        return t('Select roles to apply to all of your selected inventories.');\n      case 'awx.jobtemplate':\n        return t('Select roles to apply to all of your selected job templates.');\n      case 'awx.notificationtemplate':\n        return t('Select roles to apply to all of your selected notification templates.');\n      case 'awx.project':\n        return t('Select roles to apply to all of your selected projects.');\n      case 'awx.executionenvironment':\n        return t('Select roles to apply to all of your selected execution environments.');\n      case 'awx.workflowjobtemplate':\n        return t('Select roles to apply to all of your selected workflow job templates.');\n      default:\n        return t('Select roles to apply to all of your selected resources.');\n    }\n  }, [props.descriptionForRoleSelection, resourceType, t]);\n\n  const tableColumns: ITableColumn<AwxRbacRole>[] = useMemo(() => {\n    return [\n      {\n        header: t('Name'),\n        cell: (role) => <TextCell text={role.name} />,\n        card: 'name',\n        list: 'name',\n        sort: 'name',\n      },\n      {\n        header: t('Description'),\n        cell: (role) => role.description && <TextCell text={role.description} />,\n        card: 'description',\n        list: 'description',\n      },\n    ];\n  }, [t]);\n\n  const queryParams = useMemo<QueryParams>(() => {\n    const params: QueryParams = { content_type__model: contentType };\n    if (contentType === 'organization') {\n      params['not__name'] = [\n        'Organization Member',\n        'Organization Admin',\n        'Organization Organization Admin',\n      ];\n    }\n    return params;\n  }, [contentType]);\n\n  const view = useAwxMultiSelectListView<AwxRbacRole>(\n    {\n      url: awxAPI`/role_definitions/`,\n      toolbarFilters,\n      tableColumns,\n      queryParams,\n    },\n    'awxRoles'\n  );\n  return (\n    <SelectRolesStep\n      view={view}\n      tableColumns={tableColumns}\n      toolbarFilters={toolbarFilters}\n      fieldNameForPreviousStep={fieldNameForPreviousStep}\n      descriptionForRoleSelection={descriptionForRoleSelection}\n      title={title}\n    />\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useMemo } from 'react';\nimport { IToolbarFilter, ToolbarFilterType } from '../../../../../framework';\n\nexport function useAwxRolesFilters() {\n  const { t } = useTranslation();\n  return useMemo<IToolbarFilter[]>(\n    () => [\n      {\n        key: 'name',\n        label: t('Name'),\n        type: ToolbarFilterType.MultiText,\n        query: 'name__contains',\n        comparison: 'contains',\n      },\n    ],\n    [t]\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useMemo } from 'react';\nimport { ITableColumn, TextCell } from '../../../../../framework';\nimport { useAwxMultiSelectListView } from '../../../common/useAwxMultiSelectListView';\nimport { PageMultiSelectList } from '../../../../../framework/PageTable/PageMultiSelectList';\nimport styled from 'styled-components';\nimport { Title } from '@patternfly/react-core';\nimport { useUsersFilters } from '../../users/hooks/useUsersFilters';\nimport { AwxUser } from '../../../interfaces/User';\nimport { awxAPI } from '../../../common/api/awx-utils';\n\nconst StyledTitle = styled(Title)`\n  margin-bottom: 1rem;\n`;\n\nexport function AwxSelectUsersStep(props: { descriptionForUsersSelection?: string }) {\n  const toolbarFilters = useUsersFilters();\n  const { t } = useTranslation();\n  const { descriptionForUsersSelection } = props;\n\n  const tableColumns: ITableColumn<AwxUser>[] = useMemo(() => {\n    return [\n      {\n        header: t('Username'),\n        cell: (user: AwxUser) => <TextCell text={user.username} />,\n        card: 'name',\n        list: 'name',\n        sort: 'username',\n        maxWidth: 200,\n      },\n      {\n        header: t('First name'),\n        type: 'text',\n        value: (user: AwxUser) => user.first_name,\n        sort: 'first_name',\n      },\n      {\n        header: t('Last name'),\n        type: 'text',\n        value: (user: AwxUser) => user.last_name,\n        sort: 'last_name',\n      },\n    ];\n  }, [t]);\n\n  const view = useAwxMultiSelectListView<AwxUser>(\n    {\n      url: awxAPI`/users/`,\n      queryParams: {\n        is_superuser: 'false',\n      },\n      toolbarFilters,\n      tableColumns,\n    },\n    'users'\n  );\n\n  return (\n    <>\n      <StyledTitle headingLevel=\"h1\">{t('Select user(s)')}</StyledTitle>\n      <h2 style={{ marginTop: '1rem', marginBottom: '1rem' }}>\n        {descriptionForUsersSelection ??\n          t('Select the user(s) that you want to apply new roles to.')}\n      </h2>\n      <PageMultiSelectList\n        view={view}\n        tableColumns={tableColumns}\n        toolbarFilters={toolbarFilters}\n      />\n    </>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageHeader,\n  PageLayout,\n  PageWizard,\n  PageWizardStep,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { RoleAssignmentsReviewStep } from '../../../../common/access/RolesWizard/steps/RoleAssignmentsReviewStep';\nimport { postRequest } from '../../../../common/crud/Data';\nimport { useGet } from '../../../../common/crud/useGet';\nimport { AwxSelectRolesStep } from '../../../access/common/AwxRolesWizardSteps/AwxSelectRolesStep';\nimport { AwxSelectUsersStep } from '../../../access/common/AwxRolesWizardSteps/AwxSelectUsersStep';\nimport { awxErrorAdapter } from '../../../common/adapters/awxErrorAdapter';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkActionDialog } from '../../../common/useAwxBulkActionDialog';\nimport { AwxRbacRole } from '../../../interfaces/AwxRbacRole';\nimport { Credential } from '../../../interfaces/Credential';\nimport { AwxUser } from '../../../interfaces/User';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\ninterface WizardFormValues {\n  users: AwxUser[];\n  awxRoles: AwxRbacRole[];\n}\n\ninterface UserRolePair {\n  user: AwxUser;\n  role: AwxRbacRole;\n}\n\nexport function CredentialAddUsers() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const params = useParams<{ id: string }>();\n\n  const { data: credential, isLoading } = useGet<Credential>(\n    awxAPI`/credentials/${params.id ?? ''}/`\n  );\n  const userProgressDialog = useAwxBulkActionDialog<UserRolePair>();\n  const pageNavigate = usePageNavigate();\n\n  if (isLoading || !credential) return <LoadingPage />;\n\n  const steps: PageWizardStep[] = [\n    {\n      id: 'users',\n      label: t('Select user(s)'),\n      inputs: (\n        <AwxSelectUsersStep\n          descriptionForUsersSelection={t(\n            'Select the user(s) that you want to give access to {{credentialName}}.',\n            {\n              credentialName: credential?.name,\n            }\n          )}\n        />\n      ),\n      validate: (formData, _) => {\n        const { users } = formData as { users: AwxUser[] };\n        if (!users?.length) {\n          throw new Error(t('Select at least one user.'));\n        }\n      },\n    },\n    {\n      id: 'awxRoles',\n      label: t('Select roles to apply'),\n      inputs: (\n        <AwxSelectRolesStep\n          contentType=\"credential\"\n          fieldNameForPreviousStep=\"users\"\n          descriptionForRoleSelection={t('Choose roles to apply to {{credentialName}}.', {\n            credentialName: credential?.name,\n          })}\n        />\n      ),\n      validate: (formData, _) => {\n        const { awxRoles } = formData as { awxRoles: AwxRbacRole[] };\n        if (!awxRoles?.length) {\n          throw new Error(t('Select at least one role.'));\n        }\n      },\n    },\n    {\n      id: 'review',\n      label: t('Review'),\n      inputs: <RoleAssignmentsReviewStep />,\n    },\n  ];\n\n  const onSubmit = (data: WizardFormValues) => {\n    const { users, awxRoles } = data;\n    const items: UserRolePair[] = [];\n    for (const user of users) {\n      for (const role of awxRoles) {\n        items.push({ user, role });\n      }\n    }\n    return new Promise<void>((resolve) => {\n      userProgressDialog({\n        title: t('Add roles'),\n        keyFn: ({ user, role }) => `${user.id}_${role.id}`,\n        items,\n        actionColumns: [\n          { header: t('User'), cell: ({ user }) => user.username },\n          { header: t('Role'), cell: ({ role }) => role.name },\n        ],\n        actionFn: ({ user, role }) =>\n          postRequest(awxAPI`/role_user_assignments/`, {\n            user: user.id,\n            role_definition: role.id,\n            content_type: 'awx.credential',\n            object_id: credential.id,\n          }),\n        onComplete: () => {\n          resolve();\n        },\n        onClose: () => {\n          pageNavigate(AwxRoute.CredentialUserAccess, {\n            params: { id: credential.id.toString() },\n          });\n        },\n      });\n    });\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Add roles')}\n        breadcrumbs={[\n          { label: t('Credentials'), to: getPageUrl(AwxRoute.Credentials) },\n          {\n            label: credential?.name,\n            to: getPageUrl(AwxRoute.CredentialDetails, { params: { id: credential?.id } }),\n          },\n          {\n            label: t('User Access'),\n            to: getPageUrl(AwxRoute.CredentialUserAccess, { params: { id: credential?.id } }),\n          },\n          { label: t('Add roles') },\n        ]}\n      />\n      <PageWizard<WizardFormValues>\n        errorAdapter={awxErrorAdapter}\n        steps={steps}\n        onSubmit={onSubmit}\n        disableGrid\n        onCancel={() => {\n          pageNavigate(AwxRoute.CredentialUserAccess, { params: { id: credential?.id } });\n        }}\n      />\n    </PageLayout>\n  );\n}\n","import {\n  useCreatedByToolbarFilter,\n  useModifiedByToolbarFilter,\n} from '../../../common/awx-toolbar-filters';\nimport { useDynamicToolbarFilters } from '../../../common/useDynamicFilters';\n\nexport function useTeamsFilters() {\n  const createdByToolbarFilter = useCreatedByToolbarFilter();\n  const modifiedByToolbarFilter = useModifiedByToolbarFilter();\n  const toolbarFilters = useDynamicToolbarFilters({\n    optionsPath: 'teams',\n    preSortedKeys: ['name', 'description', 'id', 'organization', 'created-by', 'modified-by'],\n    preFilledValueKeys: {\n      name: {\n        apiPath: 'teams',\n      },\n      id: {\n        apiPath: 'teams',\n      },\n    },\n    additionalFilters: [createdByToolbarFilter, modifiedByToolbarFilter],\n  });\n  return toolbarFilters;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ITableColumn, TextCell } from '../../../../../framework';\nimport { useAwxMultiSelectListView } from '../../../common/useAwxMultiSelectListView';\nimport { PageMultiSelectList } from '../../../../../framework/PageTable/PageMultiSelectList';\nimport { Team } from '../../../interfaces/Team';\nimport { Title } from '@patternfly/react-core';\nimport styled from 'styled-components';\nimport { useTeamsFilters } from '../../teams/hooks/useTeamsFilters';\nimport { awxAPI } from '../../../common/api/awx-utils';\n\nconst StyledTitle = styled(Title)`\n  margin-bottom: 1rem;\n`;\n\nexport function AwxSelectTeamsStep(props: { descriptionForTeamsSelection?: string }) {\n  const toolbarFilters = useTeamsFilters();\n  const { descriptionForTeamsSelection } = props;\n  const { t } = useTranslation();\n\n  const tableColumns: ITableColumn<Team>[] = useMemo(() => {\n    return [\n      {\n        header: t('Name'),\n        cell: (team: Team) => <TextCell text={team.name} />,\n        card: 'name',\n        list: 'name',\n        sort: 'name',\n        maxWidth: 200,\n      },\n    ];\n  }, [t]);\n\n  const view = useAwxMultiSelectListView<Team>(\n    {\n      url: awxAPI`/teams/`,\n      toolbarFilters,\n      tableColumns,\n    },\n    'teams'\n  );\n\n  return (\n    <>\n      <StyledTitle headingLevel=\"h1\">{t('Select team(s)')}</StyledTitle>\n      <h2 style={{ marginTop: '1rem', marginBottom: '1rem' }}>\n        {descriptionForTeamsSelection ??\n          t('Select the team(s) that you want to apply new roles to.')}\n      </h2>\n      <PageMultiSelectList\n        view={view}\n        tableColumns={tableColumns}\n        toolbarFilters={toolbarFilters}\n      />\n    </>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageHeader,\n  PageLayout,\n  PageWizard,\n  PageWizardStep,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { RoleAssignmentsReviewStep } from '../../../../common/access/RolesWizard/steps/RoleAssignmentsReviewStep';\nimport { postRequest } from '../../../../common/crud/Data';\nimport { useGet } from '../../../../common/crud/useGet';\nimport { AwxSelectRolesStep } from '../../../access/common/AwxRolesWizardSteps/AwxSelectRolesStep';\nimport { AwxSelectTeamsStep } from '../../../access/common/AwxRolesWizardSteps/AwxSelectTeamsStep';\nimport { awxErrorAdapter } from '../../../common/adapters/awxErrorAdapter';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkActionDialog } from '../../../common/useAwxBulkActionDialog';\nimport { AwxRbacRole } from '../../../interfaces/AwxRbacRole';\nimport { Credential } from '../../../interfaces/Credential';\nimport { Team } from '../../../interfaces/Team';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\ninterface WizardFormValues {\n  teams: Team[];\n  awxRoles: AwxRbacRole[];\n}\n\ninterface TeamRolePair {\n  team: Team;\n  role: AwxRbacRole;\n}\n\nexport function CredentialAddTeams() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const params = useParams<{ id: string }>();\n  const pageNavigate = usePageNavigate();\n  const { data: credential, isLoading } = useGet<Credential>(\n    awxAPI`/credentials/${params.id ?? ''}/`\n  );\n  const userProgressDialog = useAwxBulkActionDialog<TeamRolePair>();\n\n  if (isLoading || !credential) return <LoadingPage />;\n\n  const steps: PageWizardStep[] = [\n    {\n      id: 'teams',\n      label: t('Select team(s)'),\n      inputs: (\n        <AwxSelectTeamsStep\n          descriptionForTeamsSelection={t(\n            'Select the team(s) that you want to give access to {{credentialName}}.',\n            {\n              credentialName: credential?.name,\n            }\n          )}\n        />\n      ),\n      validate: (formData, _) => {\n        const { teams } = formData as { teams: Team[] };\n        if (!teams?.length) {\n          throw new Error(t('Select at least one team.'));\n        }\n      },\n    },\n    {\n      id: 'roles',\n      label: t('Select roles to apply'),\n      inputs: (\n        <AwxSelectRolesStep\n          contentType=\"credential\"\n          fieldNameForPreviousStep=\"teams\"\n          descriptionForRoleSelection={t('Choose roles to apply to {{credentialName}}.', {\n            credentialName: credential?.name,\n          })}\n        />\n      ),\n      validate: (formData, _) => {\n        const { awxRoles } = formData as { awxRoles: AwxRbacRole[] };\n        if (!awxRoles?.length) {\n          throw new Error(t('Select at least one role.'));\n        }\n      },\n    },\n    {\n      id: 'review',\n      label: t('Review'),\n      inputs: <RoleAssignmentsReviewStep />,\n    },\n  ];\n\n  const onSubmit = async (data: WizardFormValues) => {\n    const { teams, awxRoles } = data;\n    const items: TeamRolePair[] = [];\n    for (const team of teams) {\n      for (const role of awxRoles) {\n        items.push({ team, role });\n      }\n    }\n    return new Promise<void>((resolve) => {\n      userProgressDialog({\n        title: t('Add roles'),\n        keyFn: ({ team, role }) => `${team.id}_${role.id}`,\n        items,\n        actionColumns: [\n          { header: t('Team'), cell: ({ team }) => team.name },\n          { header: t('Role'), cell: ({ role }) => role.name },\n        ],\n        actionFn: ({ team, role }) =>\n          postRequest(awxAPI`/role_team_assignments/`, {\n            team: team.id,\n            role_definition: role.id,\n            content_type: 'awx.credential',\n            object_id: credential.id,\n          }),\n        onComplete: () => {\n          resolve();\n        },\n        onClose: () => {\n          pageNavigate(AwxRoute.CredentialTeamAccess, {\n            params: { id: credential.id.toString() },\n          });\n        },\n      });\n    });\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Add roles')}\n        breadcrumbs={[\n          { label: t('Credentials'), to: getPageUrl(AwxRoute.Credentials) },\n          {\n            label: credential?.name,\n            to: getPageUrl(AwxRoute.CredentialDetails, { params: { id: credential?.id } }),\n          },\n          {\n            label: t('Team Access'),\n            to: getPageUrl(AwxRoute.CredentialTeamAccess, { params: { id: credential?.id } }),\n          },\n          { label: t('Add roles') },\n        ]}\n      />\n      <PageWizard<WizardFormValues>\n        errorAdapter={awxErrorAdapter}\n        steps={steps}\n        onSubmit={onSubmit}\n        disableGrid\n        onCancel={() => {\n          pageNavigate(AwxRoute.CredentialTeamAccess, { params: { id: credential?.id } });\n        }}\n      />\n    </PageLayout>\n  );\n}\n","import { apiTag } from '../../hub/common/api/formatPath';\n\nexport let edaApiPath = process.env.EDA_API_PREFIX;\n\nexport function setEdaApiPath(path: string) {\n  edaApiPath = path;\n}\n\nexport function edaAPI(strings: TemplateStringsArray, ...values: string[]) {\n  return edaApiPath + apiTag(strings, ...values);\n}\n","import {\n  ErrorOutput,\n  FieldErrorDetail,\n  GenericErrorDetail,\n} from '../../../framework/PageForm/typesErrorAdapter';\nimport { isRequestError } from '../../common/crud/RequestError';\n\nexport const edaErrorAdapter = (error: unknown): ErrorOutput => {\n  const genericErrors: GenericErrorDetail[] = [];\n  const fieldErrors: FieldErrorDetail[] = [];\n\n  if (isRequestError(error) && error.json && typeof error.json === 'object') {\n    const data = error.json;\n    for (const key in data) {\n      const value = (data as Record<string, unknown>)[key];\n      if (key === 'detail') {\n        if (Array.isArray(value)) {\n          genericErrors.push({ message: value[0] as string });\n        } else {\n          genericErrors.push({ message: value as string });\n        }\n      }\n      // Check for non-field errors\n      else if (key === 'non_field_errors' && Array.isArray(value)) {\n        value.forEach((message) => {\n          if (typeof message === 'string') {\n            genericErrors.push({ message });\n          }\n        });\n      } else if (Array.isArray(value)) {\n        const message = value.join(',');\n        fieldErrors.push({ name: key, message });\n      } else {\n        const message = String(value);\n        fieldErrors.push({ name: key, message });\n      }\n    }\n  } else if (error instanceof Error) {\n    genericErrors.push({ message: error.message });\n  }\n\n  return { genericErrors, fieldErrors };\n};\n\nexport function useEdaErrorMessageParser() {\n  return (\n    error: Error,\n    unknownErrorMessage?: string\n  ): { message: string; parsedErrors: (GenericErrorDetail | FieldErrorDetail)[] } => {\n    const { genericErrors, fieldErrors } = edaErrorAdapter(error);\n    const parsedErrors = [\n      ...genericErrors,\n      ...fieldErrors.filter((e) => e.message).map(({ message }) => ({ message })),\n    ];\n    const message =\n      typeof parsedErrors[0]?.message === 'string' && parsedErrors.length === 1\n        ? parsedErrors[0].message\n        : unknownErrorMessage\n          ? unknownErrorMessage\n          : `Unknown error`;\n    return { message, parsedErrors };\n  };\n}\n","import { useBulkConfirmation } from '../../../framework/PageDialogs/BulkConfirmationDialog';\nimport { edaErrorAdapter } from './edaErrorAdapter';\n\nexport const useEdaBulkConfirmation = <T extends object>() =>\n  useBulkConfirmation<T>(edaErrorAdapter);\n","import {\n  ErrorAdapter,\n  ErrorOutput,\n  FieldErrorDetail,\n  GenericErrorDetail,\n} from '../../../../framework/PageForm/typesErrorAdapter';\nimport { isRequestError } from '../../../common/crud/RequestError';\n\nexport interface GalaxyError {\n  code: string;\n  detail: string;\n  source: { parameter: string };\n  status: string;\n  title: string;\n}\n\nexport const hubErrorAdapter: ErrorAdapter = (\n  error,\n  mappedKeys?: Record<string, string>\n): ErrorOutput => {\n  // errors can come in several flavors depending on if the API is from\n  // pulp or ansible.\n  const genericErrors: GenericErrorDetail[] = [];\n  const fieldErrors: FieldErrorDetail[] = [];\n\n  if (isRequestError(error) && error.json && typeof error.json === 'object') {\n    const data = error.json;\n\n    if ('detail' in data && typeof data['detail'] === 'string') {\n      genericErrors.push({ message: data.detail });\n      return { genericErrors, fieldErrors };\n    }\n\n    if ('non_field_errors' in data && Array.isArray(data['non_field_errors'])) {\n      data.non_field_errors.forEach((message) => {\n        if (typeof message === 'string') {\n          genericErrors.push({ message });\n        }\n      });\n      return { genericErrors, fieldErrors };\n    }\n\n    // 500 errors only have err.response.data string\n    if (typeof data === 'string') {\n      genericErrors.push({ message: data });\n      return { genericErrors, fieldErrors };\n    }\n    if ('errors' in data && Array.isArray(data['errors'])) {\n      // Handling Galaxy errors\n      for (const e of data.errors as GalaxyError[]) {\n        if (e.source && e.source.parameter) {\n          if (mappedKeys) {\n            const name = mappedKeys[e.source.parameter] ?? e.source.parameter;\n            fieldErrors.push({ name, message: e.detail || e.title });\n          } else fieldErrors.push({ name: e.source.parameter, message: e.detail || e.title });\n        } else {\n          genericErrors.push({ message: e.detail || e.title });\n        }\n      }\n    } else {\n      // Handling Pulp errors\n      for (const [key, value] of Object.entries(data)) {\n        if (Array.isArray(value) && value.length > 0) {\n          const parsedMessages = value.map((v) => v as string).join('\\n');\n          fieldErrors.push({ name: key, message: parsedMessages });\n        } else {\n          fieldErrors.push({ name: key, message: value as string });\n        }\n      }\n    }\n  } else if (error instanceof Error) {\n    genericErrors.push({ message: error.message });\n  }\n\n  if (fieldErrors.length > 0) {\n    fieldErrors.forEach((error) => {\n      if (['filename'].includes(error.name)) {\n        error.name = 'file';\n      }\n    });\n  }\n\n  return { genericErrors, fieldErrors };\n};\nexport function useHubErrorMessageParser() {\n  return (\n    error: Error,\n    unknownErrorMessage?: string\n  ): { message: string; parsedErrors: (GenericErrorDetail | FieldErrorDetail)[] } => {\n    const { genericErrors, fieldErrors } = hubErrorAdapter(error);\n    const parsedErrors = [\n      ...genericErrors,\n      ...fieldErrors.filter((e) => e.message).map(({ message }) => ({ message })),\n    ];\n    const message =\n      typeof parsedErrors[0]?.message === 'string' && parsedErrors.length === 1\n        ? parsedErrors[0].message\n        : unknownErrorMessage\n          ? unknownErrorMessage\n          : `Unknown error`;\n    return { message, parsedErrors };\n  };\n}\n","import { useBulkConfirmation } from '../../../framework/PageDialogs/BulkConfirmationDialog';\nimport { hubErrorAdapter } from './adapters/hubErrorAdapter';\n\nexport const useHubBulkConfirmation = <T extends object>() =>\n  useBulkConfirmation<T>(hubErrorAdapter);\n","import { useTranslation } from 'react-i18next';\nimport {\n  IPageAction,\n  ITableColumn,\n  PageActionSelection,\n  PageActionType,\n  PageTable,\n  IToolbarFilter,\n  ToolbarFilterType,\n  useGetPageUrl,\n  ColumnPriority,\n} from '../../../../framework';\nimport { useCallback, useMemo } from 'react';\nimport { ButtonVariant } from '@patternfly/react-core';\nimport { MinusCircleIcon, PlusCircleIcon, TrashIcon } from '@patternfly/react-icons';\nimport { idKeyFn } from '../../../common/utils/nameKeyFn';\nimport { requestDelete } from '../../../common/crud/Data';\nimport { Assignment } from '../interfaces/Assignment';\nimport { useMapContentTypeToDisplayName } from '../../../common/access/hooks/useMapContentTypeToDisplayName';\nimport { useEdaView } from '../../../eda/common/useEventDrivenView';\nimport { useEdaBulkConfirmation } from '../../../eda/common/useEdaBulkConfirmation';\nimport { useAwxBulkConfirmation } from '../../../awx/common/useAwxBulkConfirmation';\nimport { useHubBulkConfirmation } from '../../../hub/common/useHubBulkConfirmation';\nimport { useParams } from 'react-router-dom';\n\ntype QueryParams = {\n  [key: string]: string;\n};\n\ntype AccessProps<T extends Assignment> = {\n  service: 'awx' | 'eda' | 'hub';\n  tableColumnFunctions: {\n    name: {\n      sort?: string;\n      function: (item: T) => string;\n      label: string;\n      to?: (item: T) => string | undefined;\n    };\n  };\n  additionalTableColumns?: ITableColumn<T>[];\n  toolbarNameColumnFiltersValues?: { label: string; query: string };\n  additionalTableFilters?: IToolbarFilter[];\n  url: string;\n  id: string;\n  content_type_model?: string;\n  addRolesRoute?: string;\n  accessListType: 'user' | 'team' | 'user-roles' | 'team-roles';\n  addRoleButtonText?: string;\n  removeRoleText?: string;\n  removeConfirmationText?: (count: number) => string;\n};\n\nexport function Access<T extends Assignment>(props: AccessProps<T>) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const getDisplayName = useMapContentTypeToDisplayName();\n  const params = useParams<{ id: string }>();\n  const firstColumns = useMemo(\n    () => props.additionalTableColumns?.filter((column) => column.priority !== ColumnPriority.last),\n    [props.additionalTableColumns]\n  );\n  const lastColumns = useMemo(\n    () => props.additionalTableColumns?.filter((column) => column.priority === ColumnPriority.last),\n    [props.additionalTableColumns]\n  );\n\n  const tableColumns = useMemo<ITableColumn<T>[]>(\n    () => [\n      {\n        header: props.tableColumnFunctions.name.label,\n        type: 'text',\n        sort: props.tableColumnFunctions.name.sort,\n        value: props.tableColumnFunctions.name.function,\n        to: props.tableColumnFunctions.name.to,\n      },\n      ...(firstColumns ? firstColumns : []),\n      {\n        header: t('Role'),\n        type: 'description',\n        value: (item: T) => item.summary_fields.role_definition.name,\n        sort: 'role_definition__name',\n      },\n      ...(lastColumns ? lastColumns : []),\n    ],\n    [\n      props.tableColumnFunctions.name.label,\n      props.tableColumnFunctions.name.sort,\n      props.tableColumnFunctions.name.function,\n      props.tableColumnFunctions.name.to,\n      firstColumns,\n      t,\n      lastColumns,\n    ]\n  );\n  function useRemoveRoles(onComplete: (roles: T[]) => void) {\n    const { t } = useTranslation();\n    const confirmationColumns = tableColumns;\n    const actionColumns = useMemo(() => [confirmationColumns[0]], [confirmationColumns]);\n    const bulkActionEda = useEdaBulkConfirmation<T>();\n    const bulkActionAwx = useAwxBulkConfirmation<T>();\n    const bulkActionHub = useHubBulkConfirmation<T>();\n    const bulkAction =\n      props.service === 'awx'\n        ? bulkActionAwx\n        : props.service === 'eda'\n          ? bulkActionEda\n          : bulkActionHub;\n\n    return useCallback(\n      (items: T[]) => {\n        let confirmText =\n          props.content_type_model === 'team'\n            ? t('Yes, I confirm that I want to remove these {{count}} users.', {\n                count: items.length,\n              })\n            : t('Yes, I confirm that I want to remove these {{count}} roles.', {\n                count: items.length,\n              });\n        if (props.removeConfirmationText) confirmText = props.removeConfirmationText(items.length);\n        bulkAction({\n          title: props.removeRoleText ?? t('Remove role'),\n          confirmText,\n          actionButtonText: props.removeRoleText ?? t('Remove role'),\n          items: items,\n          keyFn: idKeyFn,\n          isDanger: true,\n          confirmationColumns,\n          actionColumns,\n          onComplete,\n          actionFn: (item: T, signal: AbortSignal) =>\n            requestDelete(props.url + `${item.id.toString()}/`, signal),\n        });\n      },\n      [actionColumns, bulkAction, confirmationColumns, onComplete, t]\n    );\n  }\n  const toolbarFilters = useMemo<IToolbarFilter[]>(\n    () => [\n      // The name filter is not supported on object resource names in the role assignment endpoints\n      ...(['user', 'team'].includes(props.accessListType) && props.toolbarNameColumnFiltersValues\n        ? ([\n            {\n              key: 'name',\n              label: props.toolbarNameColumnFiltersValues.label,\n              type: ToolbarFilterType.SingleText,\n              query: props.toolbarNameColumnFiltersValues.query,\n              comparison: 'contains',\n            },\n          ] as IToolbarFilter[])\n        : []),\n      {\n        key: 'role_definition__name',\n        label: t('Role name'),\n        type: ToolbarFilterType.SingleText,\n        query: 'role_definition__name__contains',\n        comparison: 'contains',\n      },\n      ...(props.additionalTableFilters ? props.additionalTableFilters : []),\n    ],\n    [props.accessListType, props.toolbarNameColumnFiltersValues, props.additionalTableFilters, t]\n  );\n  const queryParams = useMemo<QueryParams>(() => {\n    let params = {};\n    switch (props.accessListType) {\n      case 'user':\n      case 'team':\n        params = { object_id: props.id, content_type__model: props.content_type_model };\n        break;\n      case 'user-roles':\n        params = { user_id: props.id };\n        break;\n      case 'team-roles':\n        params = { team_id: props.id };\n        break;\n      default:\n        params = {};\n    }\n    return params;\n  }, [props.content_type_model, props.id, props.accessListType]);\n  const view = useEdaView<T>({\n    url: props.url,\n    tableColumns,\n    toolbarFilters,\n    queryParams: queryParams,\n  });\n  const removeRoles = useRemoveRoles(view.unselectItemsAndRefresh);\n\n  const rowActions = useMemo<IPageAction<T>[]>(\n    () => [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        variant: ButtonVariant.primary,\n        icon: MinusCircleIcon,\n        isPinned: true,\n        label: t('Remove role'),\n        onClick: (item: T) => removeRoles([item]),\n      },\n    ],\n    [t, removeRoles]\n  );\n  const toolbarActions = useMemo<IPageAction<T>[]>(\n    () => [\n      {\n        type: PageActionType.Link,\n        selection: PageActionSelection.None,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        icon: PlusCircleIcon,\n        label: props.addRoleButtonText ?? t('Add roles'),\n        href: getPageUrl(props.addRolesRoute ?? '', { params: { id: params.id } }),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: TrashIcon,\n        label: t('Remove roles'),\n        onClick: (items: T[]) => removeRoles(items),\n        isDanger: true,\n      },\n    ],\n    [t, getPageUrl, props.addRolesRoute, props.addRoleButtonText, params.id, removeRoles]\n  );\n  const emptyStateTitle = useMemo(() => {\n    let title: string;\n    switch (props.accessListType) {\n      case 'user':\n        title = props.content_type_model\n          ? t('There are currently no users assigned to this {{resourceType}}.', {\n              resourceType: getDisplayName(props.content_type_model),\n            })\n          : t('There are currently no users assigned to this resource.');\n        break;\n      case 'team':\n        title = props.content_type_model\n          ? t('There are currently no teams assigned to this {{resourceType}}.', {\n              resourceType: getDisplayName(props.content_type_model),\n            })\n          : t('There are currently no teams assigned to this resource.');\n        break;\n      case 'user-roles':\n        title = t('There are currently no roles assigned to this user.');\n        break;\n      case 'team-roles':\n        title = t('There are currently no roles assigned to this team.');\n        break;\n      default:\n        title = t('There are currently no roles assigned to this resource.');\n    }\n    return title;\n  }, [getDisplayName, props.accessListType, props.content_type_model, t]);\n  return (\n    <PageTable\n      id={\n        props.content_type_model\n          ? `${props.service}-${props.content_type_model}-access-table`\n          : `${props.service}-${props.accessListType}-table`\n      }\n      tableColumns={tableColumns}\n      toolbarActions={toolbarActions}\n      toolbarFilters={toolbarFilters}\n      rowActions={rowActions}\n      errorStateTitle={t('Error loading access data.')}\n      emptyStateTitle={emptyStateTitle}\n      emptyStateDescription={t('Add a role by clicking the button below.')}\n      emptyStateButtonIcon={<PlusCircleIcon />}\n      emptyStateButtonText={props.addRoleButtonText ?? t('Add roles')}\n      emptyStateActions={toolbarActions.slice(0, 1)}\n      {...view}\n    />\n  );\n}\n","import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport useSWR from 'swr';\nimport {\n  ISelected,\n  ITableColumn,\n  IToolbarFilter,\n  IView,\n  useSelected,\n  useView,\n} from '../../../framework';\nimport { getItemKey, swrOptions, useFetcher } from '../../common/crud/Data';\nimport { RequestError } from '../../common/crud/RequestError';\nimport { EdaItemsResponse } from './EdaItemsResponse';\n\nexport type IEdaView<T extends { id: number | string }> = IView &\n  ISelected<T> & {\n    itemCount: number | undefined;\n    pageItems: T[] | undefined;\n    refresh: () => Promise<void>;\n    selectItemsAndRefresh: (items: T[]) => void;\n    unselectItemsAndRefresh: (items: T[]) => void;\n    updateItem: (item: T) => void;\n  };\n\nexport type QueryParams = {\n  [key: string]: string | Array<string>;\n};\n\nfunction getQueryString(queryParams: QueryParams) {\n  return Object.entries(queryParams)\n    .map(([key, value = '']) => {\n      if (Array.isArray(value)) {\n        const listKeyVals = value.map(\n          (subval) => `${encodeURIComponent(key)}=${encodeURIComponent(subval)}`\n        );\n        const queryString = listKeyVals.join('&');\n        return queryString;\n      } else {\n        return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n      }\n    })\n    .join('&');\n}\n\nexport function useEdaView<T extends { id: number | string }>(options: {\n  url: string;\n  viewPage?: number;\n  viewPerPage?: number;\n  toolbarFilters?: IToolbarFilter[];\n  tableColumns?: ITableColumn<T>[];\n  queryParams?: QueryParams;\n  disableQueryString?: boolean;\n  defaultSort?: string | undefined;\n  defaultSortDirection?: 'asc' | 'desc' | undefined;\n  defaultSelection?: T[];\n}): IEdaView<T> {\n  let { url } = options;\n  const { toolbarFilters, tableColumns, disableQueryString } = options;\n\n  let defaultSort: string | undefined = options.defaultSort;\n  let defaultSortDirection: 'asc' | 'desc' | undefined = options.defaultSortDirection;\n\n  // If a column is defined with defaultSort:true use that column to set the default sort, otherwise use the first column\n  if (tableColumns && tableColumns.length) {\n    const defaultSortColumn = tableColumns.find((column) => column.defaultSort) ?? tableColumns[0];\n    defaultSort = defaultSortColumn?.sort;\n    defaultSortDirection = defaultSortColumn?.defaultSortDirection;\n  }\n\n  const view = useView({\n    defaultValues: { sort: defaultSort, sortDirection: defaultSortDirection },\n    disableQueryString,\n  });\n  const itemCountRef = useRef<{ itemCount: number | undefined }>({ itemCount: undefined });\n\n  const { page, perPage, sort, sortDirection, filterState } = view;\n\n  let queryString = options?.queryParams ? `?${getQueryString(options.queryParams)}` : '';\n\n  if (filterState) {\n    for (const key in filterState) {\n      const toolbarFilter = toolbarFilters?.find((filter) => filter.key === key);\n      if (toolbarFilter) {\n        const values = filterState[key];\n        if (values && values.length > 0) {\n          queryString ? (queryString += '&') : (queryString += '?');\n          if (values.length > 1) {\n            queryString += values.map((value) => `or__${toolbarFilter.query}=${value}`).join('&');\n          } else {\n            queryString += `${toolbarFilter.query}=${values.join(',')}`;\n          }\n        }\n      }\n    }\n  }\n\n  if (sort && !queryString.includes('order_by')) {\n    queryString ? (queryString += '&') : (queryString += '?');\n    if (sortDirection === 'desc') {\n      queryString += `order_by=-${sort}`;\n    } else {\n      queryString += `order_by=${sort}`;\n    }\n  }\n\n  queryString ? (queryString += '&') : (queryString += '?');\n  queryString += `page=${options?.viewPage || page}`;\n\n  queryString ? (queryString += '&') : (queryString += '?');\n  queryString += `page_size=${options?.viewPerPage || perPage}`;\n\n  url += queryString;\n  const fetcher = useFetcher();\n  const response = useSWR<EdaItemsResponse<T>>(url, fetcher, {\n    ...swrOptions,\n  });\n  const { data, mutate } = response;\n  const refresh = useCallback(async () => {\n    await mutate().finally(() => {});\n  }, [mutate]);\n\n  useSWR<EdaItemsResponse<T>>(data?.next, fetcher, swrOptions);\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  let error: Error | undefined = response.error;\n  if (error instanceof RequestError) {\n    if (error.statusCode === 404 && view.page > 1) {\n      view.setPage(1);\n      error = undefined;\n    }\n  }\n\n  const selection = useSelected(data?.results ?? [], getItemKey, options.defaultSelection);\n\n  if (data?.count !== undefined) {\n    itemCountRef.current.itemCount = data?.count;\n  }\n\n  const selectItemsAndRefresh = useCallback(\n    (items: T[]) => {\n      selection.selectItems(items);\n      void refresh();\n    },\n    [refresh, selection]\n  );\n\n  const unselectItemsAndRefresh = useCallback(\n    (items: T[]) => {\n      selection.unselectItems(items);\n      void refresh();\n    },\n    [refresh, selection]\n  );\n\n  const [items, setItems] = useState<T[] | undefined>(undefined);\n\n  useEffect(() => {\n    setItems(data?.results);\n  }, [data?.results]);\n\n  const updateItem = useCallback(\n    (item: T) => {\n      if (!item) return;\n      const index = items?.findIndex((i) => getItemKey(i) === getItemKey(item));\n      if (index !== undefined && index !== -1) {\n        const newItems = [...(items || [])];\n        newItems[index] = item;\n        setItems(newItems);\n      }\n    },\n    [items]\n  );\n\n  return useMemo(() => {\n    return {\n      refresh,\n      itemCount: itemCountRef.current.itemCount,\n      pageItems: items,\n      updateItem,\n      error,\n      ...view,\n      ...selection,\n      selectItemsAndRefresh,\n      unselectItemsAndRefresh,\n    };\n  }, [\n    items,\n    updateItem,\n    error,\n    refresh,\n    selectItemsAndRefresh,\n    selection,\n    unselectItemsAndRefresh,\n    view,\n  ]);\n}\n","import { awxAPI } from '../../../awx/common/api/awx-utils';\nimport { edaAPI } from '../../../eda/common/eda-utils';\nimport { hubAPI } from '../../../hub/common/api/formatPath';\nimport { TeamAssignment } from '../interfaces/TeamAssignment';\nimport { Access } from './Access';\nimport { useTranslation } from 'react-i18next';\n\nexport function TeamAccess(props: {\n  service: 'awx' | 'eda' | 'hub';\n  id: string;\n  type: string;\n  addRolesRoute?: string;\n  addRoleButtonText?: string;\n  removeRoleText?: string;\n  removeConfirmationText?: (count: number) => string;\n}) {\n  const {\n    type,\n    service,\n\n    ...rest\n  } = props;\n  const { t } = useTranslation();\n  const roleTeamAssignmentsURL =\n    service === 'awx'\n      ? awxAPI`/role_team_assignments/`\n      : service === 'eda'\n        ? edaAPI`/role_team_assignments/`\n        : hubAPI`/_ui/v2/role_team_assignments/`;\n  return (\n    <Access<TeamAssignment>\n      {...rest}\n      service={service}\n      tableColumnFunctions={{\n        name: {\n          function: (teamAccess: TeamAssignment) => teamAccess?.summary_fields?.team?.name,\n          sort: 'team__name',\n          label: t('Team name'),\n        },\n      }}\n      toolbarNameColumnFiltersValues={{ label: t('Team name'), query: 'team__name__icontains' }}\n      url={roleTeamAssignmentsURL}\n      content_type_model={type}\n      accessListType={'team'}\n    />\n  );\n}\n","import { useParams } from 'react-router-dom';\nimport { TeamAccess } from '../../../../common/access/components/TeamAccess';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\nexport function CredentialTeamAccess() {\n  const params = useParams<{ id: string }>();\n  return (\n    <TeamAccess\n      service=\"awx\"\n      id={params.id || ''}\n      type={'credential'}\n      addRolesRoute={AwxRoute.CredentialAddTeams as string}\n    />\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { UserAssignment } from '../interfaces/UserAssignment';\nimport { Access } from './Access';\nimport { edaAPI } from '../../../eda/common/eda-utils';\nimport { awxAPI } from '../../../awx/common/api/awx-utils';\nimport { hubAPI } from '../../../hub/common/api/formatPath';\n\nexport function UserAccess(props: {\n  service: 'awx' | 'eda' | 'hub';\n  id: string;\n  type: string;\n  addRolesRoute?: string;\n  addRoleButtonText?: string;\n  removeRoleText?: string;\n  removeConfirmationText?: (count: number) => string;\n}) {\n  const { type, service, ...rest } = props;\n  const { t } = useTranslation();\n  const roleUserAssignmentsURL =\n    service === 'awx'\n      ? awxAPI`/role_user_assignments/`\n      : service === 'eda'\n        ? edaAPI`/role_user_assignments/`\n        : hubAPI`/_ui/v2/role_user_assignments/`;\n  return (\n    <Access<UserAssignment>\n      {...rest}\n      service={service}\n      tableColumnFunctions={{\n        name: {\n          function: (userAccess: UserAssignment) => userAccess?.summary_fields?.user?.username,\n          sort: 'user__username',\n          label: t('Username'),\n        },\n      }}\n      additionalTableColumns={[\n        {\n          header: t('First name'),\n          type: 'text',\n          value: (item: UserAssignment) => item?.summary_fields?.user?.first_name,\n          sort: 'user__first_name',\n        },\n        {\n          header: t('Last name'),\n          type: 'text',\n          value: (item: UserAssignment) => item?.summary_fields?.user?.last_name,\n          sort: 'user__last_name',\n        },\n      ]}\n      toolbarNameColumnFiltersValues={{ label: t('Username'), query: 'user__username__icontains' }}\n      url={roleUserAssignmentsURL}\n      content_type_model={type}\n      accessListType={'user'}\n    />\n  );\n}\n","import { useParams } from 'react-router-dom';\nimport { UserAccess } from '../../../../common/access/components/UserAccess';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\nexport function CredentialUserAccess() {\n  const params = useParams<{ id: string }>();\n  return (\n    <UserAccess\n      service=\"awx\"\n      id={params.id || ''}\n      type={'credential'}\n      addRolesRoute={AwxRoute.CredentialAddUsers}\n    />\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  PageFormDataEditor,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { PageFormTextInput } from '../../../../framework/PageForm/Inputs/PageFormTextInput';\nimport { PageFormSubmitHandler } from '../../../../framework/PageForm/PageForm';\nimport { PageFormSection } from '../../../../framework/PageForm/Utils/PageFormSection';\nimport { useGet } from '../../../common/crud/useGet';\nimport { usePatchRequest } from '../../../common/crud/usePatchRequest';\nimport { usePostRequest } from '../../../common/crud/usePostRequest';\nimport { AwxPageForm } from '../../common/AwxPageForm';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { CredentialType } from '../../interfaces/CredentialType';\nimport { AwxRoute } from '../../main/AwxRoutes';\n\nexport function CreateCredentialType() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const pageNavigate = usePageNavigate();\n\n  const postRequest = usePostRequest<CredentialType, CredentialType>();\n\n  const handleSubmit: PageFormSubmitHandler<CredentialType> = async (credentialType) => {\n    const createdCredentialType = await postRequest(awxAPI`/credential_types/`, {\n      ...credentialType,\n      kind: 'cloud',\n    });\n    pageNavigate(AwxRoute.CredentialTypeDetails, {\n      params: { id: createdCredentialType.id.toString() },\n    });\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Create credential type')}\n        breadcrumbs={[\n          { label: t('Credential Types'), to: getPageUrl(AwxRoute.CredentialTypes) },\n          { label: t('Create credential type') },\n        ]}\n      />\n      <AwxPageForm<CredentialType>\n        submitText={t('Create credential type')}\n        onSubmit={handleSubmit}\n        onCancel={() => pageNavigate(AwxRoute.CredentialTypes)}\n        defaultValue={getInitialFormValues()}\n      >\n        <CredentialTypeInputs />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n\nexport function EditCredentialType() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const pageNavigate = usePageNavigate();\n\n  const params = useParams<{ id?: string }>();\n  const id = Number(params.id);\n  const { data: credentialType } = useGet<CredentialType>(\n    awxAPI`/credential_types/${id.toString()}/`\n  );\n\n  const patchRequest = usePatchRequest<CredentialType, CredentialType>();\n\n  const handleSubmit: PageFormSubmitHandler<CredentialType> = async (editedCredentialType) => {\n    await patchRequest(awxAPI`/credential_types/${id.toString()}/`, editedCredentialType);\n    pageNavigate(AwxRoute.CredentialTypeDetails, { params: { id: id.toString() } });\n  };\n\n  const hasCredentialType = !!credentialType;\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={\n          credentialType?.name\n            ? t('Edit {{credentialtypeName}}', { credentialtypeName: credentialType?.name })\n            : t('Credential Types')\n        }\n        breadcrumbs={[\n          { label: t('Credential Types'), to: getPageUrl(AwxRoute.CredentialTypes) },\n          {\n            label: credentialType?.name\n              ? t('Edit {{credentialtypeName}}', { credentialtypeName: credentialType?.name })\n              : t('Credential Types'),\n          },\n        ]}\n      />\n      {hasCredentialType && (\n        <AwxPageForm<CredentialType>\n          submitText={t('Save credential type')}\n          onSubmit={handleSubmit}\n          onCancel={() => pageNavigate(AwxRoute.CredentialTypeDetails, { params: { id } })}\n          defaultValue={getInitialFormValues(credentialType)}\n        >\n          <CredentialTypeInputs />\n        </AwxPageForm>\n      )}\n    </PageLayout>\n  );\n}\n\nfunction CredentialTypeInputs() {\n  const { t } = useTranslation();\n  return (\n    <>\n      <PageFormTextInput<CredentialType>\n        name=\"name\"\n        label={t('Name')}\n        placeholder={t('Enter name')}\n        isRequired\n      />\n      <PageFormTextInput<CredentialType>\n        name=\"description\"\n        label={t('Description')}\n        placeholder={t('Enter description')}\n      />\n      <PageFormSection singleColumn>\n        <PageFormDataEditor\n          name=\"inputs\"\n          label={t('Input configuration')}\n          labelHelpTitle={t('Input configuration')}\n          labelHelp={t(\n            `Input schema which defines a set of ordered fields for that type, either in JSON or YAML syntax. Refer to the Ansible Controller documentation for example syntax.`\n          )}\n          format=\"object\"\n        />\n        <PageFormDataEditor\n          name=\"injectors\"\n          label={t('Injector configuration')}\n          labelHelpTitle={t('Injector configuration')}\n          labelHelp={t(\n            `Environment variables or extra variables that specify the values a credential type can inject, either in JSON or YAML syntax. Refer to the Ansible Controller documentation for example syntax.`\n          )}\n          format=\"object\"\n        />\n      </PageFormSection>\n    </>\n  );\n}\n\nfunction getInitialFormValues(credentialType?: CredentialType) {\n  if (!credentialType) {\n    return { name: '', description: '', inputs: {}, injectors: {} };\n  }\n  return credentialType;\n}\n","import { useParams } from 'react-router-dom';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { CredentialsList } from '../../credentials/CredentialsList';\n\nexport function CredentialTypeCredentials() {\n  const { id = '' } = useParams<{ id: string }>();\n\n  return <CredentialsList url={awxAPI`/credential_types/${id}/credentials/`} />;\n}\n","import { Label } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { DateTimeCell, PageDetail, PageDetails, useGetPageUrl } from '../../../../../framework';\nimport { PageDetailCodeEditor } from '../../../../../framework/PageDetails/PageDetailCodeEditor';\nimport { jsonToYaml } from '../../../../../framework/utils/codeEditorUtils';\nimport { LastModifiedPageDetail } from '../../../../common/LastModifiedPageDetail';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { CredentialType } from '../../../interfaces/CredentialType';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\nexport function CredentialTypeDetails() {\n  const params = useParams<{ id: string }>();\n  const { data: credentialType } = useGetItem<CredentialType>(\n    awxAPI`/credential_types/`,\n    params.id\n  );\n  return credentialType ? <CredentialTypeDetailInner credentialType={credentialType} /> : null;\n}\n\nexport function CredentialTypeDetailInner(props: { credentialType: CredentialType }) {\n  const { t } = useTranslation();\n  const history = useNavigate();\n  const getPageUrl = useGetPageUrl();\n  function renderCredentialTypeName(credentialType: CredentialType) {\n    if (credentialType.managed) {\n      return (\n        <>\n          {credentialType.name}\n          <Label style={{ marginLeft: '10px' }}>{t('Read-only')}</Label>\n        </>\n      );\n    } else {\n      return <>{credentialType.name}</>;\n    }\n  }\n\n  return (\n    <PageDetails>\n      <PageDetail label={t('Name')}>{renderCredentialTypeName(props.credentialType)}</PageDetail>\n      <PageDetail label={t('Description')}>{props.credentialType.description}</PageDetail>\n      <PageDetailCodeEditor\n        helpText={t(\n          'Input schema which defines a set of ordered fields for that type, either in JSON or YAML syntax. Refer to the Ansible Controller documentation for example syntax.'\n        )}\n        label={t('Input configuration')}\n        value={jsonToYaml(JSON.stringify(props.credentialType.inputs))}\n      />\n      <PageDetailCodeEditor\n        helpText={t(\n          'Environment variables or extra variables that specify the values a credential type can inject, either in JSON or YAML syntax. Refer to the Ansible Controller documentation for example syntax.'\n        )}\n        label={t('Injector configuration')}\n        value={jsonToYaml(JSON.stringify(props.credentialType.injectors))}\n      />\n      <PageDetail label={t('Created')}>\n        <DateTimeCell\n          value={props.credentialType.created}\n          author={props.credentialType.summary_fields?.created_by?.username}\n          onClick={() =>\n            history(\n              getPageUrl(AwxRoute.UserDetails, {\n                params: {\n                  id: (props.credentialType.summary_fields?.created_by?.id ?? 0).toString(),\n                },\n              })\n            )\n          }\n        />\n      </PageDetail>\n      <LastModifiedPageDetail\n        value={props.credentialType.modified}\n        author={props.credentialType.summary_fields?.modified_by?.username}\n        onClick={() =>\n          history(\n            getPageUrl(AwxRoute.UserDetails, {\n              params: {\n                id: (props.credentialType.summary_fields?.modified_by?.id ?? 0).toString(),\n              },\n            })\n          )\n        }\n      />\n    </PageDetails>\n  );\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { TextCell, compareStrings } from '../../../../../framework';\nimport { getItemKey, requestDelete } from '../../../../common/crud/Data';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { CredentialType } from '../../../interfaces/CredentialType';\nimport { useCredentialTypesColumns } from './useCredentialTypesColumns';\n\nexport function useDeleteCredentialTypes(onComplete: (users: CredentialType[]) => void) {\n  const { t } = useTranslation();\n  const confirmationColumns = useCredentialTypesColumns();\n  const deleteActionNameColumn = useMemo(\n    () => ({\n      header: t('Name'),\n      cell: (credentialType: CredentialType) => <TextCell text={credentialType.name} />,\n      sort: 'name',\n      maxWidth: 200,\n    }),\n    [t]\n  );\n\n  const actionColumns = useMemo(() => [deleteActionNameColumn], [deleteActionNameColumn]);\n  const cannotDeleteCredentialTypeDueToPermissions = (credentialType: CredentialType) =>\n    credentialType.summary_fields?.user_capabilities?.delete\n      ? ''\n      : t(`The credential type cannot be deleted due to insufficient permissions.`);\n  const cannotDeleteManagedCredentialType = (credentialType: CredentialType) =>\n    credentialType.managed\n      ? t(`The credential type is provided by the system and is read-only.`)\n      : '';\n\n  const bulkAction = useAwxBulkConfirmation<CredentialType>();\n  const deleteCredentialTypes = (credentialTypes: CredentialType[]) => {\n    const undeletableManagedCredentialTypes: CredentialType[] = credentialTypes.filter(\n      (credentialType) => credentialType.managed\n    );\n    const customCredentialTypes: CredentialType[] = credentialTypes.filter(\n      (credentialType) => !credentialType.managed\n    );\n    const undeletableCustomCredentialTypesDueToPermissions: CredentialType[] =\n      customCredentialTypes.filter(cannotDeleteCredentialTypeDueToPermissions);\n\n    bulkAction({\n      title: t('Permanently delete credential types', { count: credentialTypes.length }),\n      confirmText: t('Yes, I confirm that I want to delete these {{count}} credential types.', {\n        count:\n          credentialTypes.length -\n          undeletableManagedCredentialTypes.length -\n          undeletableCustomCredentialTypesDueToPermissions.length,\n      }),\n      actionButtonText: t('Delete credential types', { count: credentialTypes.length }),\n      items: credentialTypes.sort((l, r) => compareStrings(l.name, r.name)),\n      alertPrompts:\n        undeletableManagedCredentialTypes.length ||\n        undeletableCustomCredentialTypesDueToPermissions.length\n          ? [\n              ...(undeletableManagedCredentialTypes.length\n                ? [\n                    t(\n                      '{{count}} of the selected credential types cannot be deleted because they are read-only.',\n                      {\n                        count: undeletableManagedCredentialTypes.length,\n                      }\n                    ),\n                  ]\n                : []),\n              ...(undeletableCustomCredentialTypesDueToPermissions.length\n                ? [\n                    t(\n                      '{{count}} of the selected credential types cannot be deleted due to insufficient permissions.',\n                      {\n                        count: undeletableCustomCredentialTypesDueToPermissions.length,\n                      }\n                    ),\n                  ]\n                : []),\n            ]\n          : undefined,\n      isItemNonActionable: (credentialType: CredentialType) =>\n        cannotDeleteManagedCredentialType(credentialType)\n          ? cannotDeleteManagedCredentialType(credentialType)\n          : cannotDeleteCredentialTypeDueToPermissions(credentialType),\n      keyFn: getItemKey,\n      isDanger: true,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: (credentialType: CredentialType, signal) =>\n        requestDelete(awxAPI`/credential_types/${credentialType.id.toString()}/`, signal),\n    });\n  };\n  return deleteCredentialTypes;\n}\n","import { PencilAltIcon, PlusCircleIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { ActionsResponse, OptionsResponse } from '../../../interfaces/OptionsResponse';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useDeleteCredentialTypes } from './useDeleteCredentialTypes';\nimport { CredentialType } from '../../../interfaces/CredentialType';\nimport { ButtonVariant } from '@patternfly/react-core';\n\nexport function useCredentialTypeToolbarActions(\n  onCredentialTypesDeleted: (credentialType: CredentialType[]) => void\n) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const deleteCredentialTypes = useDeleteCredentialTypes(onCredentialTypesDeleted);\n  const { data } = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/credential_types/`);\n  const canCreateCredentialType = Boolean(data && data.actions && data.actions['POST']);\n\n  return useMemo<IPageAction<CredentialType>[]>(\n    () => [\n      {\n        type: PageActionType.Link,\n        selection: PageActionSelection.None,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        icon: PlusCircleIcon,\n        label: t('Create credential type'),\n        isDisabled: canCreateCredentialType\n          ? undefined\n          : t(\n              'You do not have permission to create a credential type. Please contact your system administrator if there is an issue with your access.'\n            ),\n        href: `${getPageUrl(AwxRoute.CreateCredentialType)}`,\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: TrashIcon,\n        label: t('Delete credential types'),\n        onClick: deleteCredentialTypes,\n        isDanger: true,\n      },\n    ],\n    [t, canCreateCredentialType, getPageUrl, deleteCredentialTypes]\n  );\n}\n\nexport function useCredentialTypeRowActions(\n  onCredentialTypesDeleted: (credentialType: CredentialType[]) => void\n) {\n  const pageNavigate = usePageNavigate();\n  const deleteCredentialTypes = useDeleteCredentialTypes(onCredentialTypesDeleted);\n  const { t } = useTranslation();\n\n  return useMemo(() => {\n    const cannotDeleteCredentialTypeDueToPermissions = (credentialType: CredentialType) =>\n      credentialType.summary_fields?.user_capabilities?.delete\n        ? ''\n        : t(`The credential type cannot be deleted due to insufficient permissions.`);\n    const cannotDeleteManagedCredentialType = (credentialType: CredentialType) =>\n      credentialType.managed\n        ? t(`The credential type cannot be deleted because it is read-only.`)\n        : '';\n    const cannotEditManagedCredentialType = (credentialType: CredentialType) =>\n      credentialType.managed\n        ? t(`The credential type cannot be edited because it is read-only.`)\n        : '';\n    const cannotEditCredentialTypeDueToPermissions = (credentialType: CredentialType) =>\n      credentialType.summary_fields?.user_capabilities?.edit\n        ? ''\n        : t(`The credential type cannot be edited due to insufficient permissions.`);\n\n    const actions: IPageAction<CredentialType>[] = [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        isPinned: true,\n        icon: PencilAltIcon,\n        variant: ButtonVariant.primary,\n        label: t('Edit credential type'),\n        isDisabled: (credentialType: CredentialType) =>\n          cannotEditManagedCredentialType(credentialType)\n            ? cannotEditManagedCredentialType(credentialType)\n            : cannotEditCredentialTypeDueToPermissions(credentialType),\n        onClick: (credentialType) =>\n          pageNavigate(AwxRoute.EditCredentialType, { params: { id: credentialType.id } }),\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: TrashIcon,\n        label: t('Delete credential type'),\n        isDisabled: (credentialType: CredentialType) =>\n          cannotDeleteManagedCredentialType(credentialType)\n            ? cannotDeleteManagedCredentialType(credentialType)\n            : cannotDeleteCredentialTypeDueToPermissions(credentialType),\n        onClick: (credentialType: CredentialType) => deleteCredentialTypes([credentialType]),\n        isDanger: true,\n      },\n    ];\n\n    return actions;\n  }, [deleteCredentialTypes, pageNavigate, t]);\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  PageActions,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { LoadingPage } from '../../../../../framework/components/LoadingPage';\nimport { PageRoutedTabs } from '../../../../common/PageRoutedTabs';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { AwxError } from '../../../common/AwxError';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { CredentialType } from '../../../interfaces/CredentialType';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useViewActivityStream } from '../../common/useViewActivityStream';\nimport { useCredentialTypeRowActions } from '../hooks/useCredentialTypeActions';\n\nexport function CredentialTypePage() {\n  const { t } = useTranslation();\n  const activityStream = useViewActivityStream('credential_type');\n  const params = useParams<{ id: string }>();\n  const {\n    error,\n    data: credentialType,\n    refresh,\n  } = useGetItem<CredentialType>(awxAPI`/credential_types`, params.id);\n  const pageNavigate = usePageNavigate();\n  const actions = useCredentialTypeRowActions(() => pageNavigate(AwxRoute.CredentialTypes));\n  const getPageUrl = useGetPageUrl();\n\n  if (error) return <AwxError error={error} handleRefresh={refresh} />;\n  if (!credentialType) return <LoadingPage breadcrumbs tabs />;\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={credentialType?.name}\n        breadcrumbs={[\n          { label: t('Credential Types'), to: getPageUrl(AwxRoute.CredentialTypes) },\n          { label: credentialType?.name },\n        ]}\n        headerActions={\n          <PageActions<CredentialType>\n            actions={[...activityStream, ...actions]}\n            position={DropdownPosition.right}\n            selectedItem={credentialType}\n          />\n        }\n      />\n      <PageRoutedTabs\n        backTab={{\n          label: t('Back to Credential Types'),\n          page: AwxRoute.CredentialTypes,\n          persistentFilterKey: 'credential_types',\n        }}\n        tabs={[\n          { label: t('Details'), page: AwxRoute.CredentialTypeDetails },\n          { label: t('Credentials'), page: AwxRoute.CredentialTypeCredentials },\n        ]}\n        params={{ id: credentialType.id }}\n      />\n    </PageLayout>\n  );\n}\n","import { CubesIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\nimport { PageHeader, PageLayout, PageTable, usePageNavigate } from '../../../../framework';\nimport { useOptions } from '../../../common/crud/useOptions';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { useAwxConfig } from '../../common/useAwxConfig';\nimport { useAwxView } from '../../common/useAwxView';\nimport { useGetDocsUrl } from '../../common/util/useGetDocsUrl';\nimport { CredentialType } from '../../interfaces/CredentialType';\nimport { ActionsResponse, OptionsResponse } from '../../interfaces/OptionsResponse';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport {\n  useCredentialTypeRowActions,\n  useCredentialTypeToolbarActions,\n} from './hooks/useCredentialTypeActions';\nimport { useCredentialTypesColumns } from './hooks/useCredentialTypesColumns';\nimport { useCredentialTypesFilters } from './hooks/useCredentialTypesFilters';\nimport { ActivityStreamIcon } from '../../common/ActivityStreamIcon';\nimport { usePersistentFilters } from '../../../common/PersistentFilters';\n\nexport function CredentialTypes() {\n  const { t } = useTranslation();\n  const config = useAwxConfig();\n  usePersistentFilters('credential_types');\n  const toolbarFilters = useCredentialTypesFilters();\n  const tableColumns = useCredentialTypesColumns();\n  const pageNavigate = usePageNavigate();\n\n  const view = useAwxView<CredentialType>({\n    url: awxAPI`/credential_types/`,\n    toolbarFilters,\n    tableColumns,\n  });\n\n  const toolbarActions = useCredentialTypeToolbarActions(view.unselectItemsAndRefresh);\n  const rowActions = useCredentialTypeRowActions(view.unselectItemsAndRefresh);\n\n  const { data } = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/credential_types/`);\n  const canCreateCredentialType = Boolean(data && data.actions && data.actions['POST']);\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Credential Types')}\n        description={t(\n          'Define custom credential types to support authentication with other systems during automation.'\n        )}\n        titleHelpTitle={t('Credential Types')}\n        titleHelp={t(\n          'Define custom credential types to support authentication with other systems during automation.'\n        )}\n        titleDocLink={useGetDocsUrl(config, 'credentialTypes')}\n        headerActions={<ActivityStreamIcon type={'credential_type'} />}\n      />\n      <PageTable<CredentialType>\n        id=\"awx-credential-types\"\n        toolbarFilters={toolbarFilters}\n        toolbarActions={toolbarActions}\n        tableColumns={tableColumns}\n        rowActions={rowActions}\n        errorStateTitle={t('Error loading credential types')}\n        emptyStateTitle={\n          canCreateCredentialType\n            ? t('There are currently no credential types added.')\n            : t('You do not have permission to create a credential type.')\n        }\n        emptyStateDescription={\n          canCreateCredentialType\n            ? t('Please create a credential type by using the button below.')\n            : t(\n                'Please contact your organization administrator if there is an issue with your access.'\n              )\n        }\n        emptyStateIcon={canCreateCredentialType ? undefined : CubesIcon}\n        emptyStateButtonIcon={<PlusCircleIcon />}\n        emptyStateButtonText={canCreateCredentialType ? t('Create credential type') : undefined}\n        emptyStateButtonClick={\n          canCreateCredentialType ? () => pageNavigate(AwxRoute.CreateCredentialType) : undefined\n        }\n        {...view}\n      />\n    </PageLayout>\n  );\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { compareStrings } from '../../../../../framework';\nimport { useNameColumn } from '../../../../common/columns';\nimport { getItemKey, requestDelete } from '../../../../common/crud/Data';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { ExecutionEnvironment } from '../../../interfaces/ExecutionEnvironment';\nimport { useExecutionEnvironmentsColumns } from './useExecutionEnvironmentsColumns';\n\nexport function useDeleteExecutionEnvironments(\n  onComplete: (executionEnvironments: ExecutionEnvironment[]) => void\n) {\n  const { t } = useTranslation();\n  const confirmationColumns = useExecutionEnvironmentsColumns({\n    disableLinks: true,\n    disableSort: true,\n  });\n  const deleteActionNameColumn = useNameColumn({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo(() => [deleteActionNameColumn], [deleteActionNameColumn]);\n  const bulkAction = useAwxBulkConfirmation<ExecutionEnvironment>();\n  const deleteExecutionEnvironments = (executionEnvironments: ExecutionEnvironment[]) => {\n    bulkAction({\n      title: t('Permanently delete execution environments', {\n        count: executionEnvironments.length,\n      }),\n      confirmText: t(\n        'Yes, I confirm that I want to delete these {{count}} execution environments.',\n        { count: executionEnvironments.length }\n      ),\n      actionButtonText: t('Delete execution environments', { count: executionEnvironments.length }),\n      items: executionEnvironments.sort((l, r) => compareStrings(l.name, r.name)),\n      keyFn: getItemKey,\n      isDanger: true,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: (executionEnvironment: ExecutionEnvironment, signal) =>\n        requestDelete(\n          awxAPI`/execution_environments/${executionEnvironment.id.toString()}/`,\n          signal\n        ),\n    });\n  };\n  return deleteExecutionEnvironments;\n}\n","import { CopyIcon, PencilAltIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  usePageNavigate,\n  IPageAction,\n  PageActionType,\n  PageActionSelection,\n  usePageAlertToaster,\n} from '../../../../../framework';\nimport {\n  cannotEditResource,\n  cannotDeleteResource,\n  cannotCopyResource,\n} from '../../../../common/utils/RBAChelpers';\nimport { ExecutionEnvironment } from '../../../interfaces/ExecutionEnvironment';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useDeleteExecutionEnvironments } from './useDeleteExecutionEnvironments';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { AlertProps, ButtonVariant } from '@patternfly/react-core';\n\ntype ExecutionEnvironmentActionOptions = {\n  onDelete: (executionEnvironments: ExecutionEnvironment[]) => void;\n  onCopy: (() => Promise<void>) | ((ee: ExecutionEnvironment) => void);\n};\n\nexport function useExecutionEnvRowActions({ onDelete, onCopy }: ExecutionEnvironmentActionOptions) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const deleteExecutionEnvironments = useDeleteExecutionEnvironments(onDelete);\n  const alertToaster = usePageAlertToaster();\n  const postRequest = usePostRequest();\n  return useMemo<IPageAction<ExecutionEnvironment>[]>(\n    () => [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: PencilAltIcon,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        label: t('Edit execution environment'),\n        isDisabled: (executionEnvironment) => cannotEditResource(executionEnvironment, t),\n        onClick: (executionEnvironment) =>\n          pageNavigate(AwxRoute.EditExecutionEnvironment, {\n            params: { id: executionEnvironment.id },\n          }),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: CopyIcon,\n        isPinned: false,\n        label: t('Copy execution environment'),\n        isDisabled: (executionEnvironment) => cannotCopyResource(executionEnvironment, t),\n        onClick: (ee) => {\n          const alert: AlertProps = {\n            variant: 'success',\n            title: t(`${ee.name} copied.`),\n            timeout: 2000,\n          };\n          postRequest(awxAPI`/execution_environments/${ee?.id.toString() ?? ''}/copy/`, {\n            name: `${ee.name} @ ${new Date().toTimeString()}`,\n          })\n            .then(async (res) => {\n              alertToaster.addAlert(alert);\n              await onCopy(res as ExecutionEnvironment);\n            })\n            .catch((error) => {\n              alertToaster.replaceAlert(alert, {\n                variant: 'danger',\n                title: t('Failed to copy execution environment'),\n                children: error instanceof Error && error.message,\n              });\n            });\n        },\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: TrashIcon,\n        label: t('Delete execution environment'),\n        isHidden: (executionEnvironment) => executionEnvironment.managed,\n        isDisabled: (executionEnvironment) => cannotDeleteResource(executionEnvironment, t),\n        onClick: (executionEnvironment) => deleteExecutionEnvironments([executionEnvironment]),\n        isDanger: true,\n      },\n    ],\n    [pageNavigate, deleteExecutionEnvironments, alertToaster, postRequest, onCopy, t]\n  );\n}\n","import { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  PageActions,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { PageRoutedTabs } from '../../../../common/PageRoutedTabs';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { useViewActivityStream } from '../../../access/common/useViewActivityStream';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { ExecutionEnvironment } from '../../../interfaces/ExecutionEnvironment';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useExecutionEnvRowActions } from '../hooks/useExecutionEnvRowActions';\n\nexport function ExecutionEnvironmentPage() {\n  const params = useParams<{ id: string }>();\n  const { t } = useTranslation();\n\n  const getPageUrl = useGetPageUrl();\n  const pageNavigate = usePageNavigate();\n\n  const { data: executionEnvironment } = useGetItem<ExecutionEnvironment>(\n    awxAPI`/execution_environments/`,\n    params.id\n  );\n  const itemActions = useExecutionEnvRowActions({\n    onDelete: () => pageNavigate(AwxRoute.ExecutionEnvironments),\n    onCopy: (res: ExecutionEnvironment) =>\n      pageNavigate(AwxRoute.ExecutionEnvironmentDetails, { params: { id: res.id } }),\n  });\n  const activityStream = useViewActivityStream('execution_environment');\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t(`${executionEnvironment?.name}`)}\n        breadcrumbs={[\n          { label: t('Execution Environments'), to: getPageUrl(AwxRoute.ExecutionEnvironments) },\n          { label: executionEnvironment?.name ?? '' },\n        ]}\n        headerActions={\n          <PageActions<ExecutionEnvironment>\n            actions={[...activityStream, ...itemActions]}\n            position={DropdownPosition.right}\n            selectedItem={executionEnvironment}\n          />\n        }\n      />\n      <PageRoutedTabs\n        backTab={{\n          label: t('Back to Execution Environments'),\n          page: AwxRoute.ExecutionEnvironments,\n          persistentFilterKey: 'execution_environments',\n        }}\n        tabs={\n          /** Role assignments via team/user access tabs are not applicable for managed and global EEs */\n          executionEnvironment?.managed || executionEnvironment?.organization === null\n            ? [\n                { label: t('Details'), page: AwxRoute.ExecutionEnvironmentDetails },\n                { label: t('Templates'), page: AwxRoute.ExecutionEnvironmentTemplates },\n              ]\n            : [\n                { label: t('Details'), page: AwxRoute.ExecutionEnvironmentDetails },\n                { label: t('Templates'), page: AwxRoute.ExecutionEnvironmentTemplates },\n                { label: t('Team Access'), page: AwxRoute.ExecutionEnvironmentTeamAccess },\n                { label: t('User Access'), page: AwxRoute.ExecutionEnvironmentUserAccess },\n              ]\n        }\n        params={{ id: executionEnvironment?.id ?? '' }}\n      />\n    </PageLayout>\n  );\n}\n","import { PlusCircleIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\nimport { PageTable, usePageNavigate } from '../../../../framework';\nimport { useAwxView } from '../../common/useAwxView';\nimport { ExecutionEnvironment } from '../../interfaces/ExecutionEnvironment';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { useExecutionEnvRowActions } from './hooks/useExecutionEnvRowActions';\nimport { useExecutionEnvironmentsColumns } from './hooks/useExecutionEnvironmentsColumns';\nimport { useExecutionEnvironmentsFilters } from './hooks/useExecutionEnvironmentsFilters';\nimport { useOptions } from '../../../common/crud/useOptions';\nimport { OptionsResponse, ActionsResponse } from '../../interfaces/OptionsResponse';\nimport { useExecutionEnvToolbarActions } from './hooks/useExecutionEnvToolbarActions';\n\nexport function ExecutionEnvironmentsList({\n  url,\n  hideOrgColumn,\n}: {\n  url?: string;\n  hideOrgColumn: boolean;\n}) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const toolbarFilters = useExecutionEnvironmentsFilters({ url: url });\n  const tableColumns = useExecutionEnvironmentsColumns();\n  const filteredColumns = hideOrgColumn\n    ? tableColumns.filter((column) => column.header !== 'Organization')\n    : tableColumns;\n  const view = useAwxView<ExecutionEnvironment>({\n    url: url ? url : awxAPI`/execution_environments/`,\n    toolbarFilters,\n    tableColumns,\n  });\n  const { data } = useOptions<OptionsResponse<ActionsResponse>>(\n    url ? url : awxAPI`/execution_environments/`\n  );\n  const rowActions = useExecutionEnvRowActions({\n    onDelete: view.unselectItemsAndRefresh,\n    onCopy: view.refresh,\n  });\n  const canCreateExecutionEnvironment = Boolean(data && data.actions && data.actions['POST']);\n  const toolbarActions = useExecutionEnvToolbarActions(view);\n\n  return (\n    <PageTable<ExecutionEnvironment>\n      id=\"awx-execution-environments-table\"\n      toolbarFilters={toolbarFilters}\n      toolbarActions={toolbarActions}\n      tableColumns={filteredColumns}\n      rowActions={rowActions}\n      errorStateTitle={t('Error loading execution environments')}\n      emptyStateTitle={\n        canCreateExecutionEnvironment\n          ? t('No execution environments yet')\n          : t('You do not have permission to create an execution environment.')\n      }\n      emptyStateDescription={\n        canCreateExecutionEnvironment\n          ? t('To get started, create an execution environment.')\n          : t(\n              'Please contact your organization administrator if there is an issue with your access.'\n            )\n      }\n      emptyStateButtonIcon={<PlusCircleIcon />}\n      emptyStateButtonText={\n        canCreateExecutionEnvironment ? t('Create execution environment') : undefined\n      }\n      emptyStateButtonClick={\n        canCreateExecutionEnvironment\n          ? () => pageNavigate(AwxRoute.CreateExecutionEnvironment)\n          : undefined\n      }\n      {...view}\n      defaultSubtitle={t('Execution environment')}\n    />\n  );\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport { PlusCircleIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  usePageNavigate,\n  IPageAction,\n  PageActionType,\n  PageActionSelection,\n} from '../../../../../framework';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { cannotDeleteResources } from '../../../../common/utils/RBAChelpers';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { IAwxView } from '../../../common/useAwxView';\nimport { ExecutionEnvironment } from '../../../interfaces/ExecutionEnvironment';\nimport { OptionsResponse, ActionsResponse } from '../../../interfaces/OptionsResponse';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useDeleteExecutionEnvironments } from './useDeleteExecutionEnvironments';\n\nexport function useExecutionEnvToolbarActions(view: IAwxView<ExecutionEnvironment>) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const deleteExecutionEnvironments = useDeleteExecutionEnvironments(view.unselectItemsAndRefresh);\n\n  const { data } = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/execution_environments/`);\n  const canCreateExecutionEnvironment = Boolean(data && data.actions && data.actions['POST']);\n\n  return useMemo<IPageAction<ExecutionEnvironment>[]>(\n    () => [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.None,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        icon: PlusCircleIcon,\n        label: t('Create execution environment'),\n        isDisabled: canCreateExecutionEnvironment\n          ? undefined\n          : t(\n              'You do not have permission to create an execution environment. Please contact your organization administrator if there is an issue with your access.'\n            ),\n        onClick: () => pageNavigate(AwxRoute.CreateExecutionEnvironment),\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: TrashIcon,\n        label: t('Delete execution environments'),\n        isDisabled: (executionEnvironments) => cannotDeleteResources(executionEnvironments, t),\n        onClick: deleteExecutionEnvironments,\n        isDanger: true,\n      },\n    ],\n    [t, canCreateExecutionEnvironment, deleteExecutionEnvironments, pageNavigate]\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { PageHeader, PageLayout } from '../../../../framework';\nimport { useAwxConfig } from '../../common/useAwxConfig';\nimport { useGetDocsUrl } from '../../common/util/useGetDocsUrl';\nimport { ActivityStreamIcon } from '../../common/ActivityStreamIcon';\nimport { ExecutionEnvironmentsList } from './ExecutionEnvironmentsList';\n\nexport function ExecutionEnvironments() {\n  const { t } = useTranslation();\n  const config = useAwxConfig();\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Execution Environments')}\n        description={t(\n          'An execution environment allows you to have a customized image to run jobs.'\n        )}\n        titleHelpTitle={t('Execution Environments')}\n        titleHelp={[\n          t('An execution environment allows you to have a customized image to run jobs.'),\n          t(\n            'Execution environments are container images that make it possible to incorporate system-level dependencies and collection-based content. Each execution environment allows you to have a customized image to run jobs, and each of them contain only what you need when running the job, nothing more.'\n          ),\n        ]}\n        titleDocLink={useGetDocsUrl(config, 'executionEnvironments')}\n        headerActions={<ActivityStreamIcon type={'execution_environment'} />}\n      />\n      <ExecutionEnvironmentsList hideOrgColumn={false} />\n    </PageLayout>\n  );\n}\n","import { Label } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  DateTimeCell,\n  PageDetail,\n  PageDetails,\n  TextCell,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { LastModifiedPageDetail } from '../../../../common/LastModifiedPageDetail';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { ExecutionEnvironment } from '../../../interfaces/ExecutionEnvironment';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\nexport function ExecutionEnvironmentDetails() {\n  const params = useParams<{ id: string }>();\n  const { data: execution_environment } = useGetItem<ExecutionEnvironment>(\n    awxAPI`/execution_environments/`,\n    params.id\n  );\n  return execution_environment ? (\n    <ExecutionEnvironmentDetailInner execution_env={execution_environment} />\n  ) : null;\n}\n\nexport function ExecutionEnvironmentDetailInner(props: { execution_env: ExecutionEnvironment }) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const pageNavigate = usePageNavigate();\n\n  const execution_env = props.execution_env;\n\n  return (\n    <PageDetails data-cy=\"execution-environment-page-detail\">\n      <PageDetail data-cy=\"execution-environment-name\" label={t('Name')}>\n        {execution_env.name}\n      </PageDetail>\n      <PageDetail\n        data-cy=\"execution-environment-image\"\n        label={t('Image')}\n        helpText={\n          <span>\n            {t(\n              'The full image location, including the container registry, image name, and version tag.'\n            )}\n            <br />\n            <br />\n            {t(`Examples`)}\n            <ul>\n              <li>\n                <code>\n                  <b>quay.io/ansible/awx-ee:latest</b>\n                </code>\n              </li>\n              <li>\n                <code>\n                  <b>repo/project/image-name:tag</b>\n                </code>\n              </li>\n            </ul>\n          </span>\n        }\n      >\n        {execution_env.image}\n      </PageDetail>\n      <PageDetail data-cy=\"execution-environment-description\" label={t('Description')}>\n        {execution_env.description}\n      </PageDetail>\n      <PageDetail\n        data-cy=\"execution-environment-managed\"\n        label={t('Managed')}\n      >{`${execution_env.managed}`}</PageDetail>\n      <PageDetail data-cy=\"execution-environment-org\" label={t('Organization')}>\n        {execution_env.summary_fields?.organization ? (\n          <TextCell\n            text={execution_env.summary_fields?.organization?.name}\n            to={getPageUrl(AwxRoute.OrganizationDetails, {\n              params: { id: execution_env.summary_fields?.organization?.id },\n            })}\n          />\n        ) : (\n          t('Globally Available')\n        )}\n      </PageDetail>\n      <PageDetail data-cy=\"execution-environment-pull\" label={t('Pull')}>\n        {execution_env.pull === '' ? t('Missing') : execution_env.pull}\n      </PageDetail>\n      <PageDetail data-cy=\"execution-environment-reg-cred\" label={t('Registry Credential')}>\n        {execution_env?.summary_fields?.credential?.name ? (\n          <Label variant=\"outline\" color=\"blue\">\n            {execution_env?.summary_fields?.credential?.name}\n          </Label>\n        ) : undefined}\n      </PageDetail>\n      <PageDetail data-cy=\"execution-environment-created\" label={t('Created')}>\n        <DateTimeCell\n          value={execution_env.created}\n          author={execution_env?.summary_fields?.created_by?.username}\n          onClick={() =>\n            pageNavigate(AwxRoute.UserDetails, {\n              params: { id: execution_env?.summary_fields?.created_by?.id },\n            })\n          }\n        />\n      </PageDetail>\n      <LastModifiedPageDetail\n        data-cy=\"execution-environment-modified\"\n        value={execution_env.modified}\n        author={execution_env?.summary_fields?.modified_by?.username}\n        onClick={() =>\n          pageNavigate(AwxRoute.UserDetails, {\n            params: { id: execution_env?.summary_fields?.modified_by?.id },\n          })\n        }\n      ></LastModifiedPageDetail>\n    </PageDetails>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport useSWR from 'swr';\nimport {\n  PageFormSelect,\n  PageFormSubmitHandler,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { PageFormTextInput } from '../../../../framework/PageForm/Inputs/PageFormTextInput';\nimport { useURLSearchParams } from '../../../../framework/components/useURLSearchParams';\nimport { requestGet, requestPatch, swrOptions } from '../../../common/crud/Data';\nimport { usePostRequest } from '../../../common/crud/usePostRequest';\nimport { PageFormCredentialSelect } from '../../access/credentials/components/PageFormCredentialSelect';\nimport { PageFormSelectOrganization } from '../../access/organizations/components/PageFormOrganizationSelect';\nimport { AwxPageForm } from '../../common/AwxPageForm';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { ExecutionEnvironment } from '../../interfaces/ExecutionEnvironment';\nimport { AwxRoute } from '../../main/AwxRoutes';\n\nconst PullOption = {\n  Always: 'Always pull container before running.',\n  Missing: 'Only pull the image if not present before running.',\n  Never: 'Never pull container before running.',\n};\n\nexport function CreateExecutionEnvironment() {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const pageNavigate = usePageNavigate();\n  const [searchParams] = useURLSearchParams();\n  const postRequest = usePostRequest<ExecutionEnvironment, ExecutionEnvironment>();\n  const onSubmit: PageFormSubmitHandler<ExecutionEnvironment> = async (\n    executionEnvInput: ExecutionEnvironment\n  ) => {\n    const newExecutionEnv = await postRequest(awxAPI`/execution_environments/`, executionEnvInput);\n    pageNavigate(AwxRoute.ExecutionEnvironmentDetails, { params: { id: newExecutionEnv.id } });\n  };\n\n  const onCancel = () => navigate(-1);\n  const getPageUrl = useGetPageUrl();\n\n  const defaultValue: Partial<ExecutionEnvironment> = {\n    image: searchParams.get('image') ?? '',\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Create execution environment')}\n        breadcrumbs={[\n          { label: t('Execution Environments'), to: getPageUrl(AwxRoute.ExecutionEnvironments) },\n          { label: t('Create execution environment') },\n        ]}\n      />\n      <AwxPageForm<ExecutionEnvironment>\n        submitText={t('Create execution environment')}\n        onSubmit={onSubmit}\n        cancelText={t('Cancel')}\n        onCancel={onCancel}\n        defaultValue={defaultValue}\n      >\n        <ExecutionEnvironmentInputs mode=\"create\" />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n\nexport function EditExecutionEnvironment() {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const pageNavigate = usePageNavigate();\n  const params = useParams<{ id?: string }>();\n  const { data: execution_env } = useSWR<ExecutionEnvironment>(\n    awxAPI`/execution_environments/${params.id ?? ''}/`,\n    requestGet,\n    swrOptions\n  );\n  const onSubmit: PageFormSubmitHandler<ExecutionEnvironment> = async (\n    executionEnvInput: ExecutionEnvironment\n  ) => {\n    const editedExecutionEnv = await requestPatch<ExecutionEnvironment>(\n      awxAPI`/execution_environments/${params.id ?? ''}/`,\n      executionEnvInput\n    );\n    pageNavigate(AwxRoute.ExecutionEnvironmentDetails, { params: { id: editedExecutionEnv.id } });\n  };\n\n  const onCancel = () => navigate(-1);\n  const getPageUrl = useGetPageUrl();\n\n  if (!execution_env) {\n    return (\n      <PageLayout>\n        <PageHeader\n          breadcrumbs={[\n            { label: t('Execution Environments'), to: getPageUrl(AwxRoute.ExecutionEnvironments) },\n            { label: t('Edit Execution Environment') },\n          ]}\n        />\n      </PageLayout>\n    );\n  }\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={\n          execution_env?.name\n            ? t('Edit {{executionenvironmentName}}', {\n                executionenvironmentName: execution_env?.name,\n              })\n            : t('Execution Environment')\n        }\n        breadcrumbs={[\n          { label: t('Execution Environments'), to: getPageUrl(AwxRoute.ExecutionEnvironments) },\n          {\n            label: execution_env?.name\n              ? t('Edit {{executionenvironmentName}}', {\n                  executionenvironmentName: execution_env?.name,\n                })\n              : t('Execution Environment'),\n          },\n        ]}\n      />\n      <AwxPageForm<ExecutionEnvironment>\n        submitText={t('Save execution environment')}\n        onSubmit={onSubmit}\n        cancelText={t('Cancel')}\n        onCancel={onCancel}\n        defaultValue={execution_env}\n      >\n        <ExecutionEnvironmentInputs mode=\"edit\" executionEnv={execution_env} />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n\nfunction ExecutionEnvironmentInputs(props: {\n  mode: 'edit' | 'create';\n  executionEnv?: ExecutionEnvironment;\n}) {\n  const { t } = useTranslation();\n  const isOrgGloballyAvailable = !props.executionEnv?.organization;\n\n  return (\n    <>\n      <PageFormTextInput<ExecutionEnvironment>\n        name=\"name\"\n        label={t('Name')}\n        placeholder={t('Enter a name')}\n        isRequired\n        isDisabled={props?.executionEnv?.managed || false}\n        maxLength={150}\n      />\n      <PageFormTextInput<ExecutionEnvironment>\n        name=\"image\"\n        label={t('Image')}\n        labelHelp={\n          <span>\n            {t(\n              'The full image location, including the container registry, image name, and version tag.'\n            )}\n            <br />\n            <br />\n            {t(`Examples`)}\n            <ul>\n              <li>\n                <code>\n                  <b>quay.io/ansible/awx-ee:latest</b>\n                </code>\n              </li>\n              <li>\n                <code>\n                  <b>repo/project/image-name:tag</b>\n                </code>\n              </li>\n            </ul>\n          </span>\n        }\n        isDisabled={props?.executionEnv?.managed || false}\n        placeholder={t('Enter an image')}\n        isRequired\n        maxLength={150}\n      />\n      <PageFormSelect<ExecutionEnvironment>\n        name=\"pull\"\n        label={t('Pull')}\n        placeholderText={t('---------')}\n        options={[\n          {\n            label: t(`${PullOption.Always}`),\n            value: 'always',\n          },\n          {\n            label: t(`${PullOption.Missing}`),\n            value: 'missing',\n          },\n          {\n            label: t(`${PullOption.Never}`),\n            value: 'never',\n          },\n        ]}\n      />\n      <PageFormTextInput<ExecutionEnvironment>\n        name=\"description\"\n        label={t('Description')}\n        placeholder={t('Enter a description')}\n        isDisabled={props?.executionEnv?.managed || false}\n      />\n      {props.mode === 'edit' && isOrgGloballyAvailable ? (\n        <PageFormSelectOrganization<ExecutionEnvironment>\n          name=\"organization\"\n          isDisabled={t(\n            'Globally available execution environment can not be reassigned to a specific Organization.'\n          )}\n          helperText={t(\n            'Leave this field blank to make the execution environment globally available.'\n          )}\n        />\n      ) : undefined}\n      {props.mode === 'edit' && !isOrgGloballyAvailable ? (\n        <PageFormSelectOrganization<ExecutionEnvironment>\n          name=\"organization\"\n          helperText={t(\n            'Leave this field blank to make the execution environment globally available.'\n          )}\n        />\n      ) : undefined}\n      {props.mode === 'create' ? (\n        <PageFormSelectOrganization<ExecutionEnvironment>\n          name=\"organization\"\n          helperText={t(\n            'Leave this field blank to make the execution environment globally available.'\n          )}\n          isRequired={false}\n        />\n      ) : undefined}\n\n      <PageFormCredentialSelect<ExecutionEnvironment>\n        name=\"credential\"\n        label={t('Registry credential')}\n        labelHelp={t('Credential to authenticate with a protected container registry.')}\n        placeholder={t('Select registry credential')}\n        isDisabled={props?.executionEnv?.managed ? t('Disabled') : undefined}\n        queryParams={{\n          credential_type__namespace: 'registry',\n        }}\n      />\n    </>\n  );\n}\n","import { useParams } from 'react-router-dom';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { TemplatesList } from '../../../resources/templates/TemplatesList';\n\nexport function ExecutionEnvironmentTemplates() {\n  const { id = '' } = useParams<{ id: string }>();\n  return <TemplatesList url={awxAPI`/unified_job_templates/`} executionEnvironmentId={id} />;\n}\n","import { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageHeader,\n  PageLayout,\n  PageWizard,\n  PageWizardStep,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { RoleAssignmentsReviewStep } from '../../../../common/access/RolesWizard/steps/RoleAssignmentsReviewStep';\nimport { postRequest } from '../../../../common/crud/Data';\nimport { useGet } from '../../../../common/crud/useGet';\nimport { AwxSelectRolesStep } from '../../../access/common/AwxRolesWizardSteps/AwxSelectRolesStep';\nimport { AwxSelectTeamsStep } from '../../../access/common/AwxRolesWizardSteps/AwxSelectTeamsStep';\nimport { awxErrorAdapter } from '../../../common/adapters/awxErrorAdapter';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkActionDialog } from '../../../common/useAwxBulkActionDialog';\nimport { AwxRbacRole } from '../../../interfaces/AwxRbacRole';\nimport { ExecutionEnvironment } from '../../../interfaces/ExecutionEnvironment';\nimport { Team } from '../../../interfaces/Team';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\ninterface WizardFormValues {\n  teams: Team[];\n  awxRoles: AwxRbacRole[];\n}\n\ninterface TeamRolePair {\n  team: Team;\n  role: AwxRbacRole;\n}\n\nexport function ExecutionEnvironmentAddTeams() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const params = useParams<{ id: string }>();\n  const pageNavigate = usePageNavigate();\n  const { data: executionenvironment, isLoading } = useGet<ExecutionEnvironment>(\n    awxAPI`/execution_environments/${params.id ?? ''}/`\n  );\n  const userProgressDialog = useAwxBulkActionDialog<TeamRolePair>();\n\n  if (isLoading || !executionenvironment) return <LoadingPage />;\n\n  const steps: PageWizardStep[] = [\n    {\n      id: 'teams',\n      label: t('Select team(s)'),\n      inputs: (\n        <AwxSelectTeamsStep\n          descriptionForTeamsSelection={t(\n            'Select the team(s) that you want to give access to {{executionenvironmentName}}.',\n            {\n              executionenvironmentName: executionenvironment?.name,\n            }\n          )}\n        />\n      ),\n      validate: (formData, _) => {\n        const { teams } = formData as { teams: Team[] };\n        if (!teams?.length) {\n          throw new Error(t('Select at least one team.'));\n        }\n      },\n    },\n    {\n      id: 'roles',\n      label: t('Select roles to apply'),\n      inputs: (\n        <AwxSelectRolesStep\n          contentType=\"executionenvironment\"\n          fieldNameForPreviousStep=\"teams\"\n          descriptionForRoleSelection={t('Choose roles to apply to {{executionenvironmentName}}.', {\n            executionenvironmentName: executionenvironment?.name,\n          })}\n        />\n      ),\n      validate: (formData, _) => {\n        const { awxRoles } = formData as { awxRoles: AwxRbacRole[] };\n        if (!awxRoles?.length) {\n          throw new Error(t('Select at least one role.'));\n        }\n      },\n    },\n    {\n      id: 'review',\n      label: t('Review'),\n      inputs: <RoleAssignmentsReviewStep />,\n    },\n  ];\n\n  const onSubmit = async (data: WizardFormValues) => {\n    const { teams, awxRoles } = data;\n    const items: TeamRolePair[] = [];\n    for (const team of teams) {\n      for (const role of awxRoles) {\n        items.push({ team, role });\n      }\n    }\n    return new Promise<void>((resolve) => {\n      userProgressDialog({\n        title: t('Add roles'),\n        keyFn: ({ team, role }) => `${team.id}_${role.id}`,\n        items,\n        actionColumns: [\n          { header: t('Team'), cell: ({ team }) => team.name },\n          { header: t('Role'), cell: ({ role }) => role.name },\n        ],\n        actionFn: ({ team, role }) =>\n          postRequest(awxAPI`/role_team_assignments/`, {\n            team: team.id,\n            role_definition: role.id,\n            content_type: 'awx.executionenvironment',\n            object_id: executionenvironment.id,\n          }),\n        onComplete: () => {\n          resolve();\n        },\n        onClose: () => {\n          pageNavigate(AwxRoute.ExecutionEnvironmentTeamAccess, {\n            params: { id: executionenvironment.id.toString() },\n          });\n        },\n      });\n    });\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Add roles')}\n        breadcrumbs={[\n          { label: t('Execution Environments'), to: getPageUrl(AwxRoute.ExecutionEnvironments) },\n          {\n            label: executionenvironment?.name,\n            to: getPageUrl(AwxRoute.ExecutionEnvironmentDetails, {\n              params: { id: executionenvironment?.id },\n            }),\n          },\n          {\n            label: t('Team Access'),\n            to: getPageUrl(AwxRoute.ExecutionEnvironmentTeamAccess, {\n              params: { id: executionenvironment?.id },\n            }),\n          },\n          { label: t('Add roles') },\n        ]}\n      />\n      <PageWizard<WizardFormValues>\n        errorAdapter={awxErrorAdapter}\n        steps={steps}\n        onSubmit={onSubmit}\n        disableGrid\n        onCancel={() => {\n          pageNavigate(AwxRoute.ExecutionEnvironmentTeamAccess, {\n            params: { id: executionenvironment?.id },\n          });\n        }}\n      />\n    </PageLayout>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageHeader,\n  PageLayout,\n  PageWizard,\n  PageWizardStep,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { RoleAssignmentsReviewStep } from '../../../../common/access/RolesWizard/steps/RoleAssignmentsReviewStep';\nimport { postRequest } from '../../../../common/crud/Data';\nimport { useGet } from '../../../../common/crud/useGet';\nimport { AwxSelectRolesStep } from '../../../access/common/AwxRolesWizardSteps/AwxSelectRolesStep';\nimport { AwxSelectUsersStep } from '../../../access/common/AwxRolesWizardSteps/AwxSelectUsersStep';\nimport { awxErrorAdapter } from '../../../common/adapters/awxErrorAdapter';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkActionDialog } from '../../../common/useAwxBulkActionDialog';\nimport { AwxRbacRole } from '../../../interfaces/AwxRbacRole';\nimport { ExecutionEnvironment } from '../../../interfaces/ExecutionEnvironment';\nimport { AwxUser } from '../../../interfaces/User';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\ninterface WizardFormValues {\n  users: AwxUser[];\n  awxRoles: AwxRbacRole[];\n}\n\ninterface UserRolePair {\n  user: AwxUser;\n  role: AwxRbacRole;\n}\n\nexport function ExecutionEnvironmentAddUsers() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const params = useParams<{ id: string }>();\n\n  const { data: executionenvironment, isLoading } = useGet<ExecutionEnvironment>(\n    awxAPI`/execution_environments/${params.id ?? ''}/`\n  );\n  const userProgressDialog = useAwxBulkActionDialog<UserRolePair>();\n  const pageNavigate = usePageNavigate();\n\n  if (isLoading || !executionenvironment) return <LoadingPage />;\n\n  const steps: PageWizardStep[] = [\n    {\n      id: 'users',\n      label: t('Select user(s)'),\n      inputs: (\n        <AwxSelectUsersStep\n          descriptionForUsersSelection={t(\n            'Select the user(s) that you want to give access to {{executionenvironmentName}}.',\n            {\n              executionenvironmentName: executionenvironment?.name,\n            }\n          )}\n        />\n      ),\n      validate: (formData, _) => {\n        const { users } = formData as { users: AwxUser[] };\n        if (!users?.length) {\n          throw new Error(t('Select at least one user.'));\n        }\n      },\n    },\n    {\n      id: 'awxRoles',\n      label: t('Select roles to apply'),\n      inputs: (\n        <AwxSelectRolesStep\n          contentType=\"executionenvironment\"\n          fieldNameForPreviousStep=\"users\"\n          descriptionForRoleSelection={t('Choose roles to apply to {{executionenvironmentName}}.', {\n            executionenvironmentName: executionenvironment?.name,\n          })}\n        />\n      ),\n      validate: (formData, _) => {\n        const { awxRoles } = formData as { awxRoles: AwxRbacRole[] };\n        if (!awxRoles?.length) {\n          throw new Error(t('Select at least one role.'));\n        }\n      },\n    },\n    {\n      id: 'review',\n      label: t('Review'),\n      inputs: <RoleAssignmentsReviewStep />,\n    },\n  ];\n\n  const onSubmit = (data: WizardFormValues) => {\n    const { users, awxRoles } = data;\n    const items: UserRolePair[] = [];\n    for (const user of users) {\n      for (const role of awxRoles) {\n        items.push({ user, role });\n      }\n    }\n    return new Promise<void>((resolve) => {\n      userProgressDialog({\n        title: t('Add roles'),\n        keyFn: ({ user, role }) => `${user.id}_${role.id}`,\n        items,\n        actionColumns: [\n          { header: t('User'), cell: ({ user }) => user.username },\n          { header: t('Role'), cell: ({ role }) => role.name },\n        ],\n        actionFn: ({ user, role }) =>\n          postRequest(awxAPI`/role_user_assignments/`, {\n            user: user.id,\n            role_definition: role.id,\n            content_type: 'awx.executionenvironment',\n            object_id: executionenvironment.id,\n          }),\n        onComplete: () => {\n          resolve();\n        },\n        onClose: () => {\n          pageNavigate(AwxRoute.ExecutionEnvironmentUserAccess, {\n            params: { id: executionenvironment.id.toString() },\n          });\n        },\n      });\n    });\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Add roles')}\n        breadcrumbs={[\n          { label: t('Execution Environments'), to: getPageUrl(AwxRoute.ExecutionEnvironments) },\n          {\n            label: executionenvironment?.name,\n            to: getPageUrl(AwxRoute.ExecutionEnvironmentDetails, {\n              params: { id: executionenvironment?.id },\n            }),\n          },\n          {\n            label: t('User Access'),\n            to: getPageUrl(AwxRoute.ExecutionEnvironmentUserAccess, {\n              params: { id: executionenvironment?.id },\n            }),\n          },\n          { label: t('Add roles') },\n        ]}\n      />\n      <PageWizard<WizardFormValues>\n        errorAdapter={awxErrorAdapter}\n        steps={steps}\n        onSubmit={onSubmit}\n        disableGrid\n        onCancel={() => {\n          pageNavigate(AwxRoute.ExecutionEnvironmentUserAccess, {\n            params: { id: executionenvironment?.id },\n          });\n        }}\n      />\n    </PageLayout>\n  );\n}\n","import { useParams } from 'react-router-dom';\nimport { TeamAccess } from '../../../../common/access/components/TeamAccess';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { ExecutionEnvironment } from '../../../interfaces/ExecutionEnvironment';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useEffect } from 'react';\nimport { usePageNavigate } from '../../../../../framework';\n\nexport function ExecutionEnvironmentTeamAccess() {\n  const params = useParams<{ id: string }>();\n  const pageNavigate = usePageNavigate();\n  const { data: executionEnvironment } = useGetItem<ExecutionEnvironment>(\n    awxAPI`/execution_environments/`,\n    params.id\n  );\n  useEffect(() => {\n    if (executionEnvironment?.managed || executionEnvironment?.organization === null) {\n      /** Role assignments via team access tab is not applicable for managed and global EEs, redirect to EE details */\n      pageNavigate(AwxRoute.ExecutionEnvironmentDetails, {\n        params: { id: executionEnvironment?.id },\n      });\n    }\n  }, [\n    pageNavigate,\n    executionEnvironment?.managed,\n    executionEnvironment?.organization,\n    executionEnvironment?.id,\n  ]);\n\n  return (\n    <TeamAccess\n      service=\"awx\"\n      id={params.id || ''}\n      type={'executionenvironment'}\n      addRolesRoute={AwxRoute.ExecutionEnvironmentAddTeams as string}\n    />\n  );\n}\n","import { useParams } from 'react-router-dom';\nimport { UserAccess } from '../../../../common/access/components/UserAccess';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { usePageNavigate } from '../../../../../framework';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { ExecutionEnvironment } from '../../../interfaces/ExecutionEnvironment';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useEffect } from 'react';\n\nexport function ExecutionEnvironmentUserAccess() {\n  const params = useParams<{ id: string }>();\n  const pageNavigate = usePageNavigate();\n  const { data: executionEnvironment } = useGetItem<ExecutionEnvironment>(\n    awxAPI`/execution_environments/`,\n    params.id\n  );\n  useEffect(() => {\n    if (executionEnvironment?.managed || executionEnvironment?.organization === null) {\n      /** Role assignments via user access tab is not applicable for managed and global EEs, redirect to EE details */\n      pageNavigate(AwxRoute.ExecutionEnvironmentDetails, {\n        params: { id: executionEnvironment?.id },\n      });\n    }\n  }, [\n    pageNavigate,\n    executionEnvironment?.managed,\n    executionEnvironment?.organization,\n    executionEnvironment?.id,\n  ]);\n  return (\n    <UserAccess\n      service=\"awx\"\n      id={params.id || ''}\n      type={'executionenvironment'}\n      addRolesRoute={AwxRoute.ExecutionEnvironmentAddUsers}\n    />\n  );\n}\n","import { useGetItem } from '../../../../common/crud/useGet';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { AwxHost } from '../../../interfaces/AwxHost';\n\nexport function useGetHost(host_id: string) {\n  const { data: host, refresh, error } = useGetItem<AwxHost>(awxAPI`/hosts`, host_id.toString());\n  return { host, refresh, error };\n}\n","import { useCallback, useMemo } from 'react';\nimport { usePageNavigate, ITableColumn, ColumnTableOption } from '../../../../../framework';\nimport {\n  useNameColumn,\n  useDescriptionColumn,\n  useInventoryNameColumn,\n} from '../../../../common/columns';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { AwxHost } from '../../../interfaces/AwxHost';\nimport { useTranslation } from 'react-i18next';\nimport { Sparkline } from '../../templates/components/Sparkline';\n\nfunction useActivityColumn() {\n  const { t } = useTranslation();\n  const column: ITableColumn<AwxHost> = useMemo(\n    () => ({\n      header: t('Activity'),\n      cell: (item) => {\n        const recentPlaybookJobs = item.summary_fields.recent_jobs.map((job) => ({\n          ...job,\n          canceled_on: null,\n        }));\n\n        if (item.summary_fields?.recent_jobs && item.summary_fields.recent_jobs.length > 0) {\n          return <Sparkline jobs={recentPlaybookJobs} />;\n        } else {\n          return t('No job data available');\n        }\n      },\n      table: ColumnTableOption.expanded,\n      card: 'hidden',\n      list: 'hidden',\n    }),\n    [t]\n  );\n  return column;\n}\n\nexport function useHostsColumns(options?: { disableSort?: boolean; disableLinks?: boolean }) {\n  const pageNavigate = usePageNavigate();\n  const nameClick = useCallback(\n    (host: AwxHost) => pageNavigate(AwxRoute.HostDetails, { params: { id: host.id } }),\n    [pageNavigate]\n  );\n  const nameColumn = useNameColumn({\n    ...options,\n    onClick: nameClick,\n  });\n  const descriptionColumn = useDescriptionColumn({\n    tableViewOption: undefined,\n    disableSort: false,\n  });\n  const inventoryColumn = useInventoryNameColumn(AwxRoute.InventoryDetails, {\n    tableViewOption: undefined,\n  });\n  const activityColumn = useActivityColumn();\n  const tableColumns = useMemo<ITableColumn<AwxHost>[]>(\n    () => [nameColumn, descriptionColumn, inventoryColumn, activityColumn],\n    [nameColumn, descriptionColumn, inventoryColumn, activityColumn]\n  );\n  return tableColumns;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { compareStrings } from '../../../../../framework';\nimport { useNameColumn } from '../../../../common/columns';\nimport { getItemKey, requestDelete } from '../../../../common/crud/Data';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { AwxHost } from '../../../interfaces/AwxHost';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { useHostsColumns } from './useHostsColumns';\n\nexport function useDeleteHosts(onComplete: (hosts: AwxHost[]) => void) {\n  const { t } = useTranslation();\n  const confirmationColumns = useHostsColumns({ disableLinks: true, disableSort: true });\n  const deleteActionNameColumn = useNameColumn({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo(() => [deleteActionNameColumn], [deleteActionNameColumn]);\n  const bulkAction = useAwxBulkConfirmation<AwxHost>();\n  const deleteHosts = (hosts: AwxHost[]) => {\n    bulkAction({\n      title: t('Permanently delete hosts', { count: hosts.length }),\n      confirmText: t('Yes, I confirm that I want to delete these {{count}} hosts.', {\n        count: hosts.length,\n      }),\n      actionButtonText: t('Delete hosts', { count: hosts.length }),\n      items: hosts.sort((l, r) => compareStrings(l.name, r.name)),\n      keyFn: getItemKey,\n      isDanger: true,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: (host: AwxHost, signal) =>\n        requestDelete(awxAPI`/hosts/${host.id.toString()}/`, signal),\n    });\n  };\n  return deleteHosts;\n}\n","import { PencilAltIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { cannotDeleteResource, cannotEditResource } from '../../../../common/utils/RBAChelpers';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { AwxHost } from '../../../interfaces/AwxHost';\nimport { useDeleteHosts } from './useDeleteHosts';\nimport { useParams } from 'react-router-dom';\nimport { requestPatch } from '../../../../common/crud/Data';\nimport { ButtonVariant } from '@patternfly/react-core';\n\nexport function useHostsActions(\n  onDelete: (host: AwxHost[]) => void,\n  onToggle: (host: AwxHost) => void\n) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n\n  const deleteHosts = useDeleteHosts(onDelete);\n\n  const params = useParams<{ id: string; inventory_type: string; host_id: string }>();\n\n  const handleToggleHost: (host: AwxHost, enabled: boolean) => Promise<void> = useCallback(\n    async (host, enabled) => {\n      const patchedHost = await requestPatch<AwxHost>(awxAPI`/hosts/${host.id.toString()}/`, {\n        enabled,\n      });\n      onToggle(patchedHost);\n    },\n    [onToggle]\n  );\n\n  const actions = useMemo<IPageAction<AwxHost>[]>(\n    () => [\n      {\n        type: PageActionType.Switch,\n        ariaLabel: (isEnabled) =>\n          isEnabled ? t('Click to disable host') : t('Click to enable host'),\n        selection: PageActionSelection.Single,\n        onToggle: (host, enabled) => handleToggleHost(host, enabled),\n        isSwitchOn: (host: AwxHost) => (host.enabled ? true : false),\n        label: t('Host enabled'),\n        labelOff: t('Host disabled'),\n        showPinnedLabel: false,\n        isPinned: true,\n        isDisabled: (host) => cannotEditResource(host, t),\n        tooltip: t(\n          'Indicates if a host is available and should be included in running jobs. For hosts that are part of an external inventory, this may be reset by the inventory sync process.'\n        ),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        isPinned: true,\n        icon: PencilAltIcon,\n        variant: ButtonVariant.primary,\n        label: t('Edit host'),\n        onClick: (host) => {\n          if (params.id && params.inventory_type) {\n            pageNavigate(AwxRoute.InventoryHostEdit, {\n              params: { id: params.id, inventory_type: params.inventory_type, host_id: host.id },\n            });\n          } else if (params.id) {\n            pageNavigate(AwxRoute.EditHost, { params: { id: params.id } });\n          } else {\n            pageNavigate(AwxRoute.EditHost, { params: { id: host.id } });\n          }\n        },\n        isDisabled: (host) => cannotEditResource(host, t),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: TrashIcon,\n        label: t('Delete host'),\n        isDisabled: (host: AwxHost) => cannotDeleteResource(host, t),\n        onClick: (host) => {\n          deleteHosts([host]);\n        },\n        isDanger: true,\n      },\n    ],\n    [t, handleToggleHost, pageNavigate, params.id, params.inventory_type, deleteHosts]\n  );\n\n  if (\n    params.inventory_type === 'smart_inventory' ||\n    params.inventory_type === 'constructed_inventory'\n  ) {\n    return [];\n  }\n\n  return actions;\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  PageActions,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { LoadingPage } from '../../../../../framework/components/LoadingPage';\nimport { PageRoutedTabs } from '../../../../common/PageRoutedTabs';\nimport { useViewActivityStream } from '../../../access/common/useViewActivityStream';\nimport { AwxError } from '../../../common/AwxError';\nimport { AwxHost } from '../../../interfaces/AwxHost';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useGetHost } from '../hooks/useGetHost';\nimport { useHostsActions } from '../hooks/useHostsActions';\n\nexport function HostPage() {\n  const activityStream = useViewActivityStream('host');\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const params = useParams<{ id: string }>();\n  const { host, refresh, error } = useGetHost(params.id as string);\n\n  const getPageUrl = useGetPageUrl();\n\n  const itemActions = useHostsActions((_host) => {\n    pageNavigate(AwxRoute.Hosts, {\n      params: { id: params.id },\n    });\n  }, refresh);\n\n  if (error) return <AwxError error={error} handleRefresh={refresh} />;\n  if (!host) return <LoadingPage breadcrumbs tabs />;\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={host?.name}\n        breadcrumbs={[{ label: t('Hosts'), to: getPageUrl(AwxRoute.Hosts) }, { label: host?.name }]}\n        headerActions={\n          <PageActions<AwxHost>\n            actions={[...activityStream, ...itemActions]}\n            position={DropdownPosition.right}\n            selectedItem={host}\n          />\n        }\n      />\n      <PageRoutedTabs\n        backTab={{\n          label: t('Back to Hosts'),\n          page: AwxRoute.Hosts,\n          persistentFilterKey: 'hosts',\n        }}\n        tabs={[\n          { label: t('Details'), page: AwxRoute.HostDetails },\n          { label: t('Facts'), page: AwxRoute.HostFacts },\n          { label: t('Groups'), page: AwxRoute.HostGroups },\n          { label: t('Jobs'), page: AwxRoute.HostJobs },\n        ]}\n        params={{ id: host.id }}\n      />\n    </PageLayout>\n  );\n}\n","import {\n  useCreatedByToolbarFilter,\n  useModifiedByToolbarFilter,\n} from '../../../common/awx-toolbar-filters';\nimport { useDynamicToolbarFilters } from '../../../common/useDynamicFilters';\n\nexport function useHostsFilters() {\n  const createdByToolbarFilter = useCreatedByToolbarFilter();\n  const modifiedByToolbarFilter = useModifiedByToolbarFilter();\n\n  const toolbarFilters = useDynamicToolbarFilters({\n    optionsPath: 'hosts',\n    preSortedKeys: ['name', 'description', 'created-by', 'modified-by'],\n    preFilledValueKeys: { name: { apiPath: 'hosts' }, id: { apiPath: 'hosts' } },\n    additionalFilters: [createdByToolbarFilter, modifiedByToolbarFilter],\n    removeFilters: ['last_job_host_summary'],\n  });\n  return toolbarFilters;\n}\n","import { useTranslation } from 'react-i18next';\nimport { PageHeader, PageLayout, PageTable, usePageNavigate } from '../../../../framework';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { useHostsFilters } from './hooks/useHostsFilters';\nimport { useAwxConfig } from '../../common/useAwxConfig';\nimport { useAwxView } from '../../common/useAwxView';\nimport { useGetDocsUrl } from '../../common/util/useGetDocsUrl';\nimport { AwxHost } from '../../interfaces/AwxHost';\nimport { useHostsToolbarActions } from './hooks/useHostsToolbarActions';\nimport { useHostsColumns } from './hooks/useHostsColumns';\nimport { ActivityStreamIcon } from '../../common/ActivityStreamIcon';\nimport { useHostsActions } from './hooks/useHostsActions';\nimport { useOptions } from '../../../common/crud/useOptions';\nimport { OptionsResponse, ActionsResponse } from '../../interfaces/OptionsResponse';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\n\nexport function Hosts() {\n  const { t } = useTranslation();\n  const product: string = process.env.PRODUCT ?? t('AWX');\n  const pageNavigate = usePageNavigate();\n  const toolbarFilters = useHostsFilters();\n  const tableColumns = useHostsColumns();\n  const view = useAwxView<AwxHost>({ url: awxAPI`/hosts/`, toolbarFilters, tableColumns });\n  const config = useAwxConfig();\n\n  const toolbarActions = useHostsToolbarActions(view);\n\n  const rowActions = useHostsActions(view.unselectItemsAndRefresh, view.updateItem);\n\n  const { data } = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/hosts/`);\n  const canCreateHost = Boolean(data && data.actions && data.actions['POST']);\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Hosts')}\n        description={t(\n          `A system managed by {{product}}, which may include a physical, virtual, cloud-based server, or other device.`,\n          { product }\n        )}\n        titleHelpTitle={t('Hosts')}\n        titleHelp={[\n          t(\n            `A system managed by {{product}}, which may include a physical, virtual, cloud-based server, or other device. Typically an operating system instance. Hosts are contained in Inventory. Sometimes referred to as a “node”.`,\n            { product }\n          ),\n          t(\n            'Ansible works against multiple managed nodes or “hosts” in your infrastructure at the same time, using a list or group of lists known as inventory. Once your inventory is defined, you use patterns to select the hosts or groups you want Ansible to run against.'\n          ),\n        ]}\n        titleDocLink={useGetDocsUrl(config, 'hosts')}\n        headerActions={<ActivityStreamIcon type={'host'} />}\n      />\n      <PageTable<AwxHost>\n        id=\"awx-hosts-table\"\n        toolbarFilters={toolbarFilters}\n        toolbarActions={toolbarActions}\n        tableColumns={tableColumns}\n        rowActions={rowActions}\n        errorStateTitle={t('Error loading hosts')}\n        emptyStateTitle={\n          canCreateHost\n            ? t('There are currently no hosts added')\n            : t('You do not have permission to create a host.')\n        }\n        emptyStateDescription={\n          canCreateHost\n            ? t('Please create a host by using the button below.')\n            : t(\n                'Please contact your organization administrator if there is an issue with your access.'\n              )\n        }\n        emptyStateButtonIcon={<PlusCircleIcon />}\n        emptyStateButtonText={canCreateHost ? t('Create host') : undefined}\n        emptyStateButtonClick={canCreateHost ? () => pageNavigate(AwxRoute.CreateHost) : undefined}\n        {...view}\n        defaultSubtitle={t('Host')}\n      />\n    </PageLayout>\n  );\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport { PlusCircleIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IPageAction,\n  PageActionType,\n  PageActionSelection,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { cannotDeleteResources } from '../../../../common/utils/RBAChelpers';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { AwxHost } from '../../../interfaces/AwxHost';\nimport { IAwxView } from '../../../common/useAwxView';\nimport { useDeleteHosts } from './useDeleteHosts';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { OptionsResponse, ActionsResponse } from '../../../interfaces/OptionsResponse';\n\nexport function useHostsToolbarActions(view: IAwxView<AwxHost>) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const deleteHosts = useDeleteHosts(view.unselectItemsAndRefresh);\n\n  const { data } = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/hosts/`);\n  const canCreateHost = Boolean(data && data.actions && data.actions['POST']);\n\n  return useMemo<IPageAction<AwxHost>[]>(\n    () => [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.None,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        icon: PlusCircleIcon,\n        label: t('Create host'),\n        isDisabled: canCreateHost\n          ? undefined\n          : t(\n              'You do not have permission to create a host. Please contact your system administrator if there is an issue with your access.'\n            ),\n        onClick: () => pageNavigate(AwxRoute.CreateHost),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.None,\n        variant: ButtonVariant.secondary,\n        isPinned: true,\n        label: t('Smart inventory'),\n        isDisabled: () =>\n          view?.filterState && Object.keys(view.filterState).length !== 0\n            ? ''\n            : 'Enter at least one search filter to create a new Smart Inventory',\n        onClick: () =>\n          pageNavigate(AwxRoute.CreateSmartInventory, {\n            query: { ...view.filterState },\n          }),\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: TrashIcon,\n        label: t('Delete hosts'),\n        onClick: deleteHosts,\n        isDanger: true,\n        isDisabled: (hosts: AwxHost[]) => cannotDeleteResources(hosts, t),\n      },\n    ],\n    [pageNavigate, deleteHosts, canCreateHost, view.filterState, t]\n  );\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { compareStrings } from '../../../../../framework';\nimport { useNameColumn } from '../../../../common/columns';\nimport { getItemKey } from '../../../../common/crud/Data';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { UnifiedJob } from '../../../interfaces/UnifiedJob';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { getJobsAPIUrl, isJobRunning } from '../jobUtils';\nimport { useJobsColumns } from './useJobsColumns';\n\nexport function useCancelJobs(onComplete: (jobs: UnifiedJob[]) => void) {\n  const { t } = useTranslation();\n  const confirmationColumns = useJobsColumns({ disableLinks: true, disableSort: true });\n  const cancelActionNameColumn = useNameColumn({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo(() => [cancelActionNameColumn], [cancelActionNameColumn]);\n  const bulkAction = useAwxBulkConfirmation<UnifiedJob>();\n  const postRequest = usePostRequest();\n  const cannotCancelJobDueToPermissions = (job: UnifiedJob) => {\n    if (!job.summary_fields?.user_capabilities?.start && isJobRunning(job.status))\n      return t(`The job cannot be canceled due to insufficient permission`);\n    return '';\n  };\n  const cannotCancelJobDueToStatus = (job: UnifiedJob) => {\n    if (!isJobRunning(job.status)) return t(`The job cannot be canceled because it is not running`);\n    return '';\n  };\n\n  const cancelUnifiedJobs = (jobs: UnifiedJob[]) => {\n    const uncancellableJobsDueToStatus: UnifiedJob[] = jobs.filter(cannotCancelJobDueToStatus);\n    const runningJobs: UnifiedJob[] = jobs.filter((job) => isJobRunning(job.status));\n    const uncancellableJobsDueToPermissions: UnifiedJob[] = runningJobs.filter(\n      cannotCancelJobDueToPermissions\n    );\n\n    bulkAction({\n      title: t('Cancel jobs', { count: jobs.length }),\n      confirmText: t('Yes, I confirm that I want to cancel these {{count}} jobs.', {\n        count:\n          jobs.length -\n          uncancellableJobsDueToPermissions.length -\n          uncancellableJobsDueToStatus.length,\n      }),\n      actionButtonText: t('Cancel jobs', { count: jobs.length }),\n      items: jobs.sort((l, r) => compareStrings(l.name, r.name)),\n      alertPrompts:\n        uncancellableJobsDueToStatus.length || uncancellableJobsDueToPermissions.length\n          ? [\n              ...(uncancellableJobsDueToStatus.length\n                ? [\n                    t(\n                      '{{count}} of the selected jobs cannot be canceled because they are not running.',\n                      {\n                        count: uncancellableJobsDueToStatus.length,\n                      }\n                    ),\n                  ]\n                : []),\n              ...(uncancellableJobsDueToPermissions.length\n                ? [\n                    t(\n                      '{{count}} of the selected jobs cannot be cancelled due to insufficient permissions.',\n                      {\n                        count: uncancellableJobsDueToPermissions.length,\n                      }\n                    ),\n                  ]\n                : []),\n            ]\n          : undefined,\n      isItemNonActionable: (item: UnifiedJob) =>\n        cannotCancelJobDueToStatus(item)\n          ? cannotCancelJobDueToStatus(item)\n          : cannotCancelJobDueToPermissions(item),\n      keyFn: getItemKey,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: (job: UnifiedJob) => postRequest(`${getJobsAPIUrl(job.type)}${job.id}/cancel/`, {}),\n    });\n  };\n  return cancelUnifiedJobs;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { compareStrings } from '../../../../../framework';\nimport { useNameColumn } from '../../../../common/columns';\nimport { getItemKey, requestDelete } from '../../../../common/crud/Data';\nimport { UnifiedJob } from '../../../interfaces/UnifiedJob';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { getJobsAPIUrl, isJobRunning } from '../jobUtils';\nimport { useJobsColumns } from './useJobsColumns';\n\nexport function useDeleteJobs(onComplete: (jobs: UnifiedJob[]) => void) {\n  const { t } = useTranslation();\n  const confirmationColumns = useJobsColumns({ disableLinks: true, disableSort: true });\n  const deleteActionNameColumn = useNameColumn({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo(() => [deleteActionNameColumn], [deleteActionNameColumn]);\n  const bulkAction = useAwxBulkConfirmation<UnifiedJob>();\n  const cannotDeleteJobDueToPermissions = (job: UnifiedJob) => {\n    if (!job.summary_fields.user_capabilities.delete && !isJobRunning(job.status))\n      return t(`The job cannot be deleted due to insufficient permission`);\n    return '';\n  };\n  const cannotDeleteJobDueToStatus = (job: UnifiedJob) => {\n    if (isJobRunning(job.status)) return t(`The job cannot be deleted because it is running`);\n    return '';\n  };\n\n  const deleteUnifiedJobs = (jobs: UnifiedJob[]) => {\n    const undeletableJobsDueToStatus: UnifiedJob[] = jobs.filter(cannotDeleteJobDueToStatus);\n    const nonRunningJobs: UnifiedJob[] = jobs.filter((job) => !isJobRunning(job.status));\n    const undeletableJobsDueToPermissions: UnifiedJob[] = nonRunningJobs.filter(\n      cannotDeleteJobDueToPermissions\n    );\n\n    bulkAction({\n      title: t('Permanently delete jobs', { count: jobs.length }),\n      confirmText: t('Yes, I confirm that I want to delete these {{count}} jobs.', {\n        count:\n          jobs.length - undeletableJobsDueToPermissions.length - undeletableJobsDueToStatus.length,\n      }),\n      actionButtonText: t('Delete jobs', { count: jobs.length }),\n      items: jobs.sort((l, r) => compareStrings(l.name, r.name)),\n      alertPrompts:\n        undeletableJobsDueToStatus.length || undeletableJobsDueToPermissions.length\n          ? [\n              ...(undeletableJobsDueToStatus.length\n                ? [\n                    t(\n                      '{{count}} of the selected jobs cannot be deleted because they are running.',\n                      {\n                        count: undeletableJobsDueToStatus.length,\n                      }\n                    ),\n                  ]\n                : []),\n              ...(undeletableJobsDueToPermissions.length\n                ? [\n                    t(\n                      '{{count}} of the selected jobs cannot be deleted due to insufficient permissions.',\n                      {\n                        count: undeletableJobsDueToPermissions.length,\n                      }\n                    ),\n                  ]\n                : []),\n            ]\n          : undefined,\n      isItemNonActionable: (item: UnifiedJob) =>\n        cannotDeleteJobDueToStatus(item)\n          ? cannotDeleteJobDueToStatus(item)\n          : cannotDeleteJobDueToPermissions(item),\n      keyFn: getItemKey,\n      isDanger: true,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: (job, signal) => requestDelete(`${getJobsAPIUrl(job.type)}${job.id}/`, signal),\n    });\n  };\n  return deleteUnifiedJobs;\n}\n","import { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom';\nimport { usePageAlertToaster, usePageNavigate } from '../../../../../framework';\nimport { requestGet } from '../../../../common/crud/Data';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { AwxItemsResponse } from '../../../common/AwxItemsResponse';\nimport {\n  AdHocCommandRelaunch,\n  InventorySourceUpdate,\n  JobRelaunch,\n  ProjectUpdateView,\n  WorkflowJobRelaunch,\n} from '../../../interfaces/RelaunchConfiguration';\nimport { UnifiedJob } from '../../../interfaces/UnifiedJob';\nimport { relaunchEndpoint } from '../jobUtils';\nimport { useGetJobOutputUrl } from '../useGetJobOutputUrl';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\nexport function useRelaunchJob(jobRelaunchParams?: JobRelaunch) {\n  const alertToaster = usePageAlertToaster();\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const postRequest = usePostRequest();\n  const getJobOutputUrl = useGetJobOutputUrl();\n  const pageNavigate = usePageNavigate();\n\n  return async (job: UnifiedJob) => {\n    if (!relaunchEndpoint) {\n      return Promise.reject(new Error('Unable to retrieve launch configuration'));\n    }\n    try {\n      let relaunchConfig;\n      switch (job.type) {\n        case 'ad_hoc_command': {\n          relaunchConfig = await requestGet<AwxItemsResponse<AdHocCommandRelaunch>>(\n            relaunchEndpoint(job)\n          );\n          break;\n        }\n        case 'workflow_job': {\n          relaunchConfig = await requestGet<AwxItemsResponse<WorkflowJobRelaunch>>(\n            relaunchEndpoint(job)\n          );\n          break;\n        }\n        case 'job': {\n          relaunchConfig = await requestGet<JobRelaunch>(relaunchEndpoint(job));\n          break;\n        }\n        case 'inventory_update':\n          relaunchConfig = await requestGet<InventorySourceUpdate>(relaunchEndpoint(job));\n          break;\n        case 'project_update':\n          relaunchConfig = await requestGet<ProjectUpdateView>(relaunchEndpoint(job));\n          break;\n      }\n\n      // Relaunch job\n\n      if (\n        (relaunchConfig as JobRelaunch).passwords_needed_to_start &&\n        (relaunchConfig as JobRelaunch).passwords_needed_to_start?.length\n      ) {\n        pageNavigate(AwxRoute.TemplateLaunchWithPasswordsWizard, {\n          params: { id: job.id, job_type: 'playbook' },\n        });\n        return;\n      } else {\n        let relaunchJob;\n        switch (job.type) {\n          case 'ad_hoc_command': {\n            relaunchJob = await postRequest(relaunchEndpoint(job), {} as AdHocCommandRelaunch);\n            break;\n          }\n          case 'workflow_job': {\n            relaunchJob = await postRequest(relaunchEndpoint(job), {} as WorkflowJobRelaunch);\n            break;\n          }\n          case 'job': {\n            relaunchJob = await postRequest(relaunchEndpoint(job), {\n              ...jobRelaunchParams,\n            } as JobRelaunch);\n            break;\n          }\n          case 'inventory_update':\n            relaunchJob = await postRequest(relaunchEndpoint(job), {} as InventorySourceUpdate);\n            break;\n          case 'project_update':\n            relaunchJob = await postRequest(relaunchEndpoint(job), {} as ProjectUpdateView);\n            break;\n        }\n        navigate(getJobOutputUrl(relaunchJob as UnifiedJob));\n      }\n    } catch (error) {\n      alertToaster.addAlert({\n        variant: 'danger',\n        title: t('Failed to relaunch job'),\n        children: error instanceof Error && error.message,\n        timeout: 2000,\n      });\n    }\n  };\n}\n","import { useMemo } from 'react';\nimport { IPageAction, PageActionSelection, PageActionType } from '../../../../../framework';\nimport { ButtonVariant } from '@patternfly/react-core';\nimport { RocketIcon } from '@patternfly/react-icons';\nimport { UnifiedJob } from '../../../interfaces/UnifiedJob';\nimport { useRelaunchJob } from './useRelaunchJob';\nimport { useTranslation } from 'react-i18next';\n\nexport function useRelaunchOptions(): IPageAction<UnifiedJob>[] {\n  const { t } = useTranslation();\n  const relaunchJob = useRelaunchJob();\n  const relaunchAllHosts = useRelaunchJob({ hosts: 'all' });\n  const relaunchFailedHosts = useRelaunchJob({ hosts: 'failed' });\n  return useMemo(\n    () => [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        icon: RocketIcon,\n        label: t(`Relaunch job`),\n        isHidden: (job: UnifiedJob) =>\n          !(job.type !== 'system_job' && job.summary_fields?.user_capabilities?.start) ||\n          (job.status === 'failed' && job.type === 'job'),\n        onClick: (job: UnifiedJob) => void relaunchJob(job),\n      },\n      {\n        type: PageActionType.Dropdown,\n        selection: PageActionSelection.Single,\n        isPinned: true,\n        icon: RocketIcon,\n        label: t(`Relaunch using host parameters`),\n        isHidden: (job: UnifiedJob) =>\n          !(job.type !== 'system_job' && job.summary_fields?.user_capabilities?.start) ||\n          !(job.status === 'failed' && job.type === 'job'),\n        actions: [\n          {\n            type: PageActionType.Button,\n            selection: PageActionSelection.Single,\n            label: t(`Relaunch on all hosts`),\n            onClick: (job: UnifiedJob) => void relaunchAllHosts(job),\n          },\n          {\n            type: PageActionType.Button,\n            selection: PageActionSelection.Single,\n            label: t(`Relaunch on failed hosts`),\n            onClick: (job: UnifiedJob) => void relaunchFailedHosts(job),\n          },\n        ],\n      },\n    ],\n    [t, relaunchAllHosts, relaunchFailedHosts, relaunchJob]\n  );\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport { DownloadIcon, MinusCircleIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { IPageAction, PageActionSelection, PageActionType } from '../../../../../framework';\nimport { UnifiedJob } from '../../../interfaces/UnifiedJob';\nimport { isJobRunning } from '../jobUtils';\nimport { useCancelJobs } from './useCancelJobs';\nimport { useDeleteJobs } from './useDeleteJobs';\nimport { TFunction } from 'i18next';\nimport { useDownloadJobOutput } from './useDownloadJobOutput';\nimport { useRelaunchOptions } from './useRelaunchOptions';\n\nexport const cannotCancelJob = (job: UnifiedJob, t: TFunction<'translation', undefined>) => {\n  if (!isJobRunning(job.status)) return t(`The job cannot be canceled because it is not running`);\n  else if (!job.summary_fields.user_capabilities.start)\n    return t(`The job cannot be canceled due to insufficient permission`);\n  else return '';\n};\n\nexport function useJobHeaderActions(onComplete: (jobs: UnifiedJob[]) => void) {\n  const { t } = useTranslation();\n  const cancelJobs = useCancelJobs(onComplete);\n  const deleteJobs = useDeleteJobs(onComplete);\n  const downloadJobOutput = useDownloadJobOutput();\n  const relaunchOptions = useRelaunchOptions();\n  return useMemo<IPageAction<UnifiedJob>[]>(() => {\n    const cannotDeleteJob = (job: UnifiedJob) => {\n      if (!job.summary_fields.user_capabilities.delete)\n        return t(`The job cannot be deleted due to insufficient permission`);\n      else if (isJobRunning(job.status))\n        return t(`The job cannot be deleted due to a running job status`);\n      return '';\n    };\n\n    const actions: IPageAction<UnifiedJob>[] = [\n      ...relaunchOptions,\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        variant: ButtonVariant.secondary,\n        isPinned: true,\n        icon: MinusCircleIcon,\n        label: t(`Cancel job`),\n        isDisabled: (job: UnifiedJob) => cannotCancelJob(job, t),\n        onClick: (job: UnifiedJob) => cancelJobs([job]),\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: DownloadIcon,\n        label: t(`Download output`),\n        onClick: (job: UnifiedJob) => downloadJobOutput(job),\n        ouiaId: 'job-detail-download-button',\n        isHidden: (job: UnifiedJob) => !job.related.stdout,\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: TrashIcon,\n        label: t(`Delete job`),\n        isDisabled: (job: UnifiedJob) => cannotDeleteJob(job),\n        onClick: (job: UnifiedJob) => {\n          if (!job) return;\n          deleteJobs([job]);\n        },\n        ouiaId: 'job-detail-delete-button',\n        isDanger: true,\n      },\n    ];\n    return actions;\n  }, [cancelJobs, deleteJobs, relaunchOptions, downloadJobOutput, t]);\n}\n","import { QueryParams } from '../../../common/useAwxView';\nimport { useDynamicToolbarFilters } from '../../../common/useDynamicFilters';\n\nexport function useJobsFilters(queryParams: QueryParams = {}) {\n  const toolBarFilters = useDynamicToolbarFilters({\n    optionsPath: 'unified_jobs',\n    preSortedKeys: ['name', 'description', 'status'],\n    preFilledValueKeys: {\n      name: {\n        apiPath: 'unified_jobs',\n        queryParams: queryParams,\n      },\n      id: {\n        apiPath: 'unified_jobs',\n        queryParams: queryParams,\n      },\n    },\n  });\n\n  return toolBarFilters;\n}\n","import { CubesIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\nimport { ITableColumn, PageTable } from '../../../../framework';\nimport { usePersistentFilters } from '../../../common/PersistentFilters';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { useAwxView } from '../../common/useAwxView';\nimport { UnifiedJob } from '../../interfaces/UnifiedJob';\nimport { useJobRowActions } from '../../views/jobs/hooks/useJobRowActions';\nimport { useJobToolbarActions } from '../../views/jobs/hooks/useJobToolbarActions';\nimport { useJobsFilters } from '../../views/jobs/hooks/useJobsFilters';\n\ntype QueryParams = { [key: string]: string };\n\nexport function JobsList(props: {\n  queryParams?: QueryParams;\n  columns: ITableColumn<UnifiedJob>[];\n}) {\n  const { t } = useTranslation();\n  const toolbarFilters = useJobsFilters(props.queryParams ?? {});\n  const tableColumns = props.columns;\n  const view = useAwxView<UnifiedJob>({\n    url: awxAPI`/unified_jobs/`,\n    toolbarFilters,\n    tableColumns,\n    queryParams: props?.queryParams ?? {},\n  });\n  const rowActions = useJobRowActions(view.unselectItemsAndRefresh);\n  const toolbarActions = useJobToolbarActions(view.unselectItemsAndRefresh);\n\n  usePersistentFilters('jobs');\n\n  return (\n    <PageTable<UnifiedJob>\n      id=\"awx-jobs-table\"\n      toolbarFilters={toolbarFilters}\n      tableColumns={tableColumns}\n      rowActions={rowActions}\n      toolbarActions={toolbarActions}\n      errorStateTitle={t('Error loading jobs')}\n      emptyStateTitle={t('No jobs yet')}\n      emptyStateDescription={t('Please run a job to populate this list.')}\n      emptyStateIcon={CubesIcon}\n      {...view}\n    />\n  );\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport { MinusCircleIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { IPageAction, PageActionSelection, PageActionType } from '../../../../../framework';\nimport { UnifiedJob } from '../../../interfaces/UnifiedJob';\nimport { isJobRunning } from '../jobUtils';\nimport { useCancelJobs } from './useCancelJobs';\nimport { useDeleteJobs } from './useDeleteJobs';\nimport { cannotCancelJob } from './useJobHeaderActions';\nimport { useRelaunchOptions } from './useRelaunchOptions';\n\nexport function useJobRowActions(onComplete: (jobs: UnifiedJob[]) => void) {\n  const { t } = useTranslation();\n  const deleteJobs = useDeleteJobs(onComplete);\n  const cancelJobs = useCancelJobs(onComplete);\n  const relaunchOptions = useRelaunchOptions();\n  return useMemo<IPageAction<UnifiedJob>[]>(() => {\n    const cannotDeleteJob = (job: UnifiedJob) => {\n      if (!job.summary_fields.user_capabilities.delete)\n        return t(`The job cannot be deleted due to insufficient permission`);\n      else if (isJobRunning(job.status))\n        return t(`The job cannot be deleted due to a running job status`);\n      return '';\n    };\n\n    const actions: IPageAction<UnifiedJob>[] = [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        variant: ButtonVariant.secondary,\n        isPinned: true,\n        icon: MinusCircleIcon,\n        label: t(`Cancel job`),\n        isHidden: (job: UnifiedJob) => Boolean(cannotCancelJob(job, t)),\n        onClick: (job: UnifiedJob) => cancelJobs([job]),\n      },\n      ...relaunchOptions,\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: MinusCircleIcon,\n        label: t(`Cancel job`),\n        isDisabled: (job: UnifiedJob) => cannotCancelJob(job, t),\n        isHidden: (job: UnifiedJob) => Boolean(!cannotCancelJob(job, t)), // Hidden when a job is running and cancellable since we have the iconOnly row action will also be available to trigger cancel in that scenario\n        onClick: (job: UnifiedJob) => cancelJobs([job]),\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: TrashIcon,\n        label: t(`Delete job`),\n        isDisabled: (job: UnifiedJob) => cannotDeleteJob(job),\n        onClick: (job: UnifiedJob) => deleteJobs([job]),\n        isDanger: true,\n      },\n    ];\n    return actions;\n  }, [deleteJobs, cancelJobs, relaunchOptions, t]);\n}\n","import { BanIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { IPageAction, PageActionSelection, PageActionType } from '../../../../../framework';\nimport { UnifiedJob } from '../../../interfaces/UnifiedJob';\nimport { useCancelJobs } from './useCancelJobs';\nimport { useDeleteJobs } from './useDeleteJobs';\n\nexport function useJobToolbarActions(onComplete: (jobs: UnifiedJob[]) => void) {\n  const { t } = useTranslation();\n  const deleteJobs = useDeleteJobs(onComplete);\n  const cancelJobs = useCancelJobs(onComplete);\n\n  return useMemo<IPageAction<UnifiedJob>[]>(\n    () => [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: BanIcon,\n        label: t('Cancel jobs'),\n        onClick: cancelJobs,\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: TrashIcon,\n        label: t('Delete jobs'),\n        onClick: deleteJobs,\n        isDanger: true,\n      },\n    ],\n    [deleteJobs, cancelJobs, t]\n  );\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport {\n  ColumnCardOption,\n  ColumnDashboardOption,\n  ColumnListOption,\n  ColumnModalOption,\n  ColumnTableOption,\n  DateTimeCell,\n  ElapsedTimeCell,\n  ITableColumn,\n  TextCell,\n  useGetPageUrl,\n} from '../../../framework';\nimport { StatusCell } from '../../common/Status';\nimport { useOptions } from '../../common/crud/useOptions';\nimport { ActionsResponse, OptionsResponse } from '../interfaces/OptionsResponse';\nimport { UnifiedJob } from '../interfaces/UnifiedJob';\nimport { AwxRoute } from '../main/AwxRoutes';\nimport { useGetLaunchedByDetails, useGetScheduleUrl, isJobRunning } from '../views/jobs/jobUtils';\nimport { awxAPI } from './api/awx-utils';\n\nexport function useJobIdColumn<T extends UnifiedJob>() {\n  const { t } = useTranslation();\n\n  const column = useMemo<ITableColumn<T>>(\n    () => ({\n      header: t('ID'),\n      cell: (job: UnifiedJob) => job.id,\n      sort: 'id',\n      card: 'hidden',\n      list: 'hidden',\n      dashboard: 'hidden',\n      minWidth: 0,\n    }),\n    [t]\n  );\n\n  return column;\n}\n\nexport function useJobStatusColumn<T extends UnifiedJob>() {\n  const { t } = useTranslation();\n\n  const column = useMemo<ITableColumn<T>>(\n    () => ({\n      header: t('Status'),\n      cell: (job: UnifiedJob) => <StatusCell status={job.status} />,\n      sort: 'status',\n    }),\n    [t]\n  );\n\n  return column;\n}\n\nexport function useJobTypeColumn<T extends UnifiedJob>(\n  cardOption?: ColumnCardOption,\n  listOption?: ColumnListOption,\n  dashboardOption?: ColumnDashboardOption\n) {\n  const { t } = useTranslation();\n\n  const column = useMemo<ITableColumn<T>>(\n    () => ({\n      header: t('Type'),\n      cell: (job: UnifiedJob) => {\n        const jobTypes: { [key: string]: string } = {\n          project_update: t`Source control update`,\n          inventory_update: t`Inventory sync`,\n          job: job.job_type === 'check' ? t`Playbook check` : t`Playbook run`,\n          ad_hoc_command: t`Command`,\n          system_job: t`Management job`,\n          workflow_job: t`Workflow job`,\n        };\n        return <TextCell text={jobTypes[job.type]} />;\n      },\n      sort: 'type',\n      card: cardOption ?? ColumnCardOption.subtitle,\n      list: listOption ?? ColumnListOption.subtitle,\n      dashboard: dashboardOption ?? ColumnDashboardOption.hidden,\n    }),\n    [cardOption, dashboardOption, listOption, t]\n  );\n\n  return column;\n}\n\nexport function useJobDurationColumn<T extends UnifiedJob>(\n  modalOption?: ColumnModalOption,\n  dashboardOption?: ColumnDashboardOption\n) {\n  const { t } = useTranslation();\n\n  const column = useMemo<ITableColumn<T>>(\n    () => ({\n      header: t('Duration'),\n      cell: (job: UnifiedJob) =>\n        job.started && <ElapsedTimeCell start={job.started} finish={job.finished} />,\n      modal: modalOption ?? ColumnModalOption.hidden,\n      dashboard: dashboardOption ?? ColumnDashboardOption.hidden,\n    }),\n    [dashboardOption, modalOption, t]\n  );\n\n  return column;\n}\n\nexport function useJobStartedColumn<T extends UnifiedJob>(\n  modalOption?: ColumnModalOption,\n  dashboardOption?: ColumnDashboardOption,\n  listOption?: ColumnListOption,\n  defaultSort?: 'asc' | 'desc'\n) {\n  const { t } = useTranslation();\n\n  const column = useMemo<ITableColumn<T>>(\n    () => ({\n      header: t('Started'),\n      cell: (job: UnifiedJob) => job.started && <DateTimeCell value={job.started} />,\n      sort: 'started',\n      list: listOption ?? ColumnListOption.secondary,\n      defaultSortDirection: defaultSort ?? 'desc',\n      modal: modalOption ?? ColumnModalOption.hidden,\n      dashboard: dashboardOption ?? ColumnDashboardOption.hidden,\n    }),\n    [dashboardOption, defaultSort, listOption, modalOption, t]\n  );\n\n  return column;\n}\n\nexport function useJobSourceColumn<T extends UnifiedJob>(\n  modalOption?: ColumnModalOption,\n  dashboardOption?: ColumnDashboardOption,\n  cardOption?: ColumnCardOption,\n  listOption?: ColumnListOption,\n  defaultSort?: 'asc' | 'desc'\n) {\n  const { t } = useTranslation();\n\n  const { data } = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/inventory_sources/`);\n  const inventorySourceChoices = useMemo(\n    () =>\n      data &&\n      data.actions &&\n      data.actions['GET'] &&\n      data.actions['GET'].source &&\n      Array.isArray(data.actions['GET'].source.choices)\n        ? data.actions['GET'].source.choices\n        : [],\n    [data]\n  );\n\n  const column = useMemo<ITableColumn<T>>(\n    () => ({\n      header: t('Source'),\n      cell: (job: UnifiedJob) =>\n        inventorySourceChoices?.map(([string, label]) => (string === job.source ? label : null)),\n      value: (job: UnifiedJob) => !!job.source,\n      table: ColumnTableOption.expanded,\n      card: cardOption ?? ColumnCardOption.hidden,\n      list: listOption ?? ColumnListOption.hidden,\n      defaultSortDirection: defaultSort ?? 'desc',\n      modal: modalOption ?? ColumnModalOption.hidden,\n      dashboard: dashboardOption ?? 'hidden',\n    }),\n    [cardOption, dashboardOption, defaultSort, inventorySourceChoices, listOption, modalOption, t]\n  );\n\n  return column;\n}\n\nexport function useJobFinishedColumn<T extends UnifiedJob>(\n  modalOption?: ColumnModalOption,\n  dashboardOption?: ColumnDashboardOption,\n  cardOption?: ColumnCardOption,\n  listOption?: ColumnListOption,\n  defaultSort?: 'asc' | 'desc'\n) {\n  const { t } = useTranslation();\n\n  const column = useMemo<ITableColumn<T>>(\n    () => ({\n      header: t('Finished'),\n      cell: (job: UnifiedJob) => job.finished && <DateTimeCell value={job.finished} />,\n      sort: 'finished',\n      card: cardOption ?? ColumnCardOption.hidden,\n      list: listOption ?? ColumnListOption.secondary,\n      defaultSortDirection: defaultSort ?? 'desc',\n      defaultSort: true,\n      modal: modalOption ?? ColumnModalOption.hidden,\n      dashboard: dashboardOption ?? ColumnDashboardOption.hidden,\n    }),\n    [cardOption, dashboardOption, defaultSort, listOption, modalOption, t]\n  );\n\n  return column;\n}\n\nexport function useJobScheduleColumn<T extends UnifiedJob>(\n  tableOption?: ColumnTableOption,\n  cardOption?: ColumnCardOption,\n  listOption?: ColumnListOption,\n  modalOption?: ColumnModalOption,\n  dashboardOption?: ColumnDashboardOption,\n  defaultSort?: 'asc' | 'desc'\n) {\n  const { t } = useTranslation();\n  const getScheduleUrl = useGetScheduleUrl();\n  const column = useMemo<ITableColumn<T>>(\n    () => ({\n      header: t('Schedule'),\n      cell: (job: UnifiedJob) => {\n        const scheduleUrl = getScheduleUrl(job);\n        return (\n          <Link to={job.summary_fields?.schedule && scheduleUrl ? scheduleUrl : ''}>\n            {job.summary_fields?.schedule?.name}\n          </Link>\n        );\n      },\n      value: (job: UnifiedJob) => job.summary_fields?.schedule?.name,\n      table: tableOption ?? ColumnTableOption.expanded,\n      card: cardOption ?? ColumnCardOption.hidden,\n      list: listOption ?? ColumnListOption.hidden,\n      defaultSortDirection: defaultSort ?? 'desc',\n      modal: modalOption ?? ColumnModalOption.hidden,\n      dashboard: dashboardOption ?? ColumnDashboardOption.hidden,\n    }),\n    [\n      cardOption,\n      dashboardOption,\n      defaultSort,\n      listOption,\n      modalOption,\n      t,\n      tableOption,\n      getScheduleUrl,\n    ]\n  );\n\n  return column;\n}\n\nexport function useJobWorkflowColumn<T extends UnifiedJob>(\n  tableOption?: ColumnTableOption,\n  cardOption?: ColumnCardOption,\n  listOption?: ColumnListOption,\n  modalOption?: ColumnModalOption,\n  dashboardOption?: ColumnDashboardOption,\n  defaultSort?: 'asc' | 'desc'\n) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n\n  const column = useMemo<ITableColumn<T>>(\n    () => ({\n      header: t('Workflow job template'),\n      cell: (job: UnifiedJob) => (\n        <Link\n          to={getPageUrl(AwxRoute.WorkflowJobTemplateDetails, {\n            params: { id: job.summary_fields?.workflow_job_template?.id },\n          })}\n        >\n          {job.summary_fields?.workflow_job_template?.name}\n        </Link>\n      ),\n      value: (job: UnifiedJob) => !!job.summary_fields?.workflow_job_template,\n      table: tableOption ?? ColumnTableOption.expanded,\n      card: cardOption ?? ColumnCardOption.hidden,\n      list: listOption ?? ColumnListOption.hidden,\n      defaultSortDirection: defaultSort ?? 'desc',\n      modal: modalOption ?? ColumnModalOption.hidden,\n      dashboard: dashboardOption ?? ColumnDashboardOption.hidden,\n    }),\n    [cardOption, dashboardOption, defaultSort, getPageUrl, listOption, modalOption, t, tableOption]\n  );\n\n  return column;\n}\n\nexport function useJobExplanationColumn<T extends UnifiedJob>(\n  tableOption?: ColumnTableOption,\n  cardOption?: ColumnCardOption,\n  listOption?: ColumnListOption,\n  modalOption?: ColumnModalOption,\n  dashboardOption?: ColumnDashboardOption,\n  defaultSort?: 'asc' | 'desc'\n) {\n  const { t } = useTranslation();\n\n  const column = useMemo<ITableColumn<T>>(\n    () => ({\n      header: t('Explanation'),\n      cell: (job: UnifiedJob) => job.job_explanation,\n      value: (job: UnifiedJob) => job.job_explanation,\n      table: tableOption ?? ColumnTableOption.expanded,\n      card: cardOption ?? ColumnCardOption.hidden,\n      list: listOption ?? ColumnListOption.hidden,\n      defaultSortDirection: defaultSort ?? 'desc',\n      modal: modalOption ?? ColumnModalOption.hidden,\n      dashboard: dashboardOption ?? ColumnDashboardOption.hidden,\n    }),\n    [cardOption, dashboardOption, defaultSort, listOption, modalOption, t, tableOption]\n  );\n\n  return column;\n}\n\nexport function useJobSliceParentColumn<T extends UnifiedJob>(\n  tableOption?: ColumnTableOption,\n  cardOption?: ColumnCardOption,\n  listOption?: ColumnListOption,\n  modalOption?: ColumnModalOption,\n  dashboardOption?: ColumnDashboardOption,\n  defaultSort?: 'asc' | 'desc'\n) {\n  const { t } = useTranslation();\n\n  const column = useMemo<ITableColumn<T>>(\n    () => ({\n      header: t('Job slice parent'),\n      cell: (_job: UnifiedJob) => <span>{t`True`}</span>,\n      value: (job: UnifiedJob) => job.type === 'workflow_job' && job.is_sliced_job,\n      table: tableOption ?? ColumnTableOption.expanded,\n      card: cardOption ?? ColumnCardOption.hidden,\n      list: listOption ?? ColumnListOption.hidden,\n      defaultSortDirection: defaultSort ?? 'desc',\n      modal: modalOption ?? ColumnModalOption.hidden,\n      dashboard: dashboardOption ?? ColumnDashboardOption.hidden,\n    }),\n    [cardOption, dashboardOption, defaultSort, listOption, modalOption, t, tableOption]\n  );\n\n  return column;\n}\n\nexport function useJobLaunchedByColumn<T extends UnifiedJob>(\n  tableOption?: ColumnTableOption,\n  cardOption?: ColumnCardOption,\n  listOption?: ColumnListOption,\n  modalOption?: ColumnModalOption,\n  dashboardOption?: ColumnDashboardOption,\n  defaultSort?: 'asc' | 'desc'\n) {\n  const { t } = useTranslation();\n  const getLaunchedByDetails = useGetLaunchedByDetails();\n\n  const column = useMemo<ITableColumn<T>>(\n    () => ({\n      header: t('Launched by'),\n      cell: (job: UnifiedJob) => {\n        const { value: launchedByValue, link: launchedByLink } = getLaunchedByDetails(job) ?? {};\n        if (launchedByLink) {\n          return <Link to={`${launchedByLink}`}>{launchedByValue}</Link>;\n        } else {\n          return launchedByValue;\n        }\n      },\n      table: tableOption ?? ColumnTableOption.expanded,\n      card: cardOption ?? ColumnCardOption.hidden,\n      list: listOption ?? ColumnListOption.hidden,\n      defaultSortDirection: defaultSort ?? 'desc',\n      modal: modalOption ?? ColumnModalOption.hidden,\n      dashboard: dashboardOption ?? ColumnDashboardOption.hidden,\n    }),\n    [\n      cardOption,\n      dashboardOption,\n      defaultSort,\n      listOption,\n      modalOption,\n      t,\n      tableOption,\n      getLaunchedByDetails,\n    ]\n  );\n\n  return column;\n}\n\nexport function useJobScehduleColumn<T extends UnifiedJob>(\n  tableOption?: ColumnTableOption,\n  cardOption?: ColumnCardOption,\n  listOption?: ColumnListOption,\n  modalOption?: ColumnModalOption,\n  dashboardOption?: ColumnDashboardOption,\n  defaultSort?: 'asc' | 'desc'\n) {\n  const { t } = useTranslation();\n  const getScheduleUrl = useGetScheduleUrl();\n\n  const column = useMemo<ITableColumn<T>>(\n    () => ({\n      header: t('Schedule'),\n      cell: (job: UnifiedJob) => {\n        if (job.launch_type === 'scheduled') {\n          if (job.summary_fields.schedule) {\n            return <Link to={getScheduleUrl(job) ?? ''}>{job.summary_fields.schedule.name}</Link>;\n          } else {\n            return <TextCell text={t('Deleted')} color=\"red\" />;\n          }\n        } else {\n          return `${t('Unavailable')}`;\n        }\n      },\n      table: tableOption ?? ColumnTableOption.expanded,\n      card: cardOption ?? ColumnCardOption.hidden,\n      list: listOption ?? ColumnListOption.hidden,\n      defaultSortDirection: defaultSort ?? 'desc',\n      modal: modalOption ?? ColumnModalOption.hidden,\n      dashboard: dashboardOption ?? ColumnDashboardOption.hidden,\n    }),\n    [\n      cardOption,\n      dashboardOption,\n      defaultSort,\n      listOption,\n      modalOption,\n      t,\n      tableOption,\n      getScheduleUrl,\n    ]\n  );\n\n  return column;\n}\n\nexport function useJobTemplateColumn<T extends UnifiedJob>(\n  tableOption?: ColumnTableOption,\n  cardOption?: ColumnCardOption,\n  listOption?: ColumnListOption,\n  modalOption?: ColumnModalOption,\n  dashboardOption?: ColumnDashboardOption,\n  defaultSort?: 'asc' | 'desc'\n) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n\n  const column = useMemo<ITableColumn<T>>(\n    () => ({\n      header: t('Job template'),\n      cell: (job: UnifiedJob) => (\n        <Link\n          to={getPageUrl(AwxRoute.JobTemplateDetails, {\n            params: { id: job.summary_fields?.job_template?.id },\n          })}\n        >\n          {job.summary_fields?.job_template?.name}\n        </Link>\n      ),\n      value: (job: UnifiedJob) => !!job.summary_fields?.job_template,\n      table: tableOption ?? ColumnTableOption.expanded,\n      card: cardOption ?? ColumnCardOption.hidden,\n      list: listOption ?? ColumnListOption.hidden,\n      defaultSortDirection: defaultSort ?? 'desc',\n      modal: modalOption ?? ColumnModalOption.hidden,\n      dashboard: dashboardOption ?? ColumnDashboardOption.hidden,\n    }),\n    [cardOption, dashboardOption, defaultSort, getPageUrl, listOption, modalOption, t, tableOption]\n  );\n\n  return column;\n}\n\nexport function useSourceWorkflowColumn<T extends UnifiedJob>(\n  tableOption?: ColumnTableOption,\n  cardOption?: ColumnCardOption,\n  listOption?: ColumnListOption,\n  modalOption?: ColumnModalOption,\n  dashboardOption?: ColumnDashboardOption,\n  defaultSort?: 'asc' | 'desc'\n) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n\n  const column = useMemo<ITableColumn<T>>(\n    () => ({\n      header: t('Source workflow job'),\n      cell: (job: UnifiedJob) => (\n        <Link\n          to={getPageUrl(AwxRoute.JobDetails, {\n            params: {\n              job_type: 'workflow',\n              id: job.summary_fields.source_workflow_job?.id,\n            },\n          })}\n        >\n          {job.summary_fields.source_workflow_job?.name}\n        </Link>\n      ),\n      value: (job: UnifiedJob) => !!job.summary_fields?.source_workflow_job,\n      table: tableOption ?? ColumnTableOption.expanded,\n      card: cardOption ?? ColumnCardOption.hidden,\n      list: listOption ?? ColumnListOption.hidden,\n      defaultSortDirection: defaultSort ?? 'desc',\n      modal: modalOption ?? ColumnModalOption.hidden,\n      dashboard: dashboardOption ?? ColumnDashboardOption.hidden,\n    }),\n    [cardOption, dashboardOption, defaultSort, getPageUrl, listOption, modalOption, t, tableOption]\n  );\n\n  return column;\n}\n\nexport function useJobSliceColumn<T extends UnifiedJob>(\n  tableOption?: ColumnTableOption,\n  cardOption?: ColumnCardOption,\n  listOption?: ColumnListOption,\n  modalOption?: ColumnModalOption,\n  dashboardOption?: ColumnDashboardOption,\n  defaultSort?: 'asc' | 'desc'\n) {\n  const { t } = useTranslation();\n\n  const column = useMemo<ITableColumn<T>>(\n    () => ({\n      header: t('Job slice'),\n      cell: (job: UnifiedJob) => (\n        <span>{`${job.job_slice_number ?? 0}/${(job.job_slice_count ?? 0).toString()}`}</span>\n      ),\n      value: (job: UnifiedJob) => job.job_slice_count,\n      table: tableOption ?? ColumnTableOption.expanded,\n      card: cardOption ?? ColumnCardOption.hidden,\n      list: listOption ?? ColumnListOption.hidden,\n      defaultSortDirection: defaultSort ?? 'desc',\n      modal: modalOption ?? ColumnModalOption.hidden,\n      dashboard: dashboardOption ?? ColumnDashboardOption.hidden,\n    }),\n    [cardOption, dashboardOption, defaultSort, listOption, modalOption, t, tableOption]\n  );\n\n  return column;\n}\n\nexport function useJobExecutionEnvColumn<T extends UnifiedJob>(\n  tableOption?: ColumnTableOption,\n  cardOption?: ColumnCardOption,\n  listOption?: ColumnListOption,\n  modalOption?: ColumnModalOption,\n  dashboardOption?: ColumnDashboardOption,\n  defaultSort?: 'asc' | 'desc'\n) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n\n  const column = useMemo<ITableColumn<T>>(\n    () => ({\n      header: t('Execution environment'),\n      cell: (job: UnifiedJob) => (\n        <Link\n          to={getPageUrl(AwxRoute.ExecutionEnvironmentDetails, {\n            params: { id: job.summary_fields.execution_environment?.id },\n          })}\n        >\n          {job.summary_fields.execution_environment?.name}\n        </Link>\n      ),\n      value: (job: UnifiedJob) =>\n        job.type !== 'workflow_job' &&\n        !isJobRunning(job.status) &&\n        job.status !== 'canceled' &&\n        !!job.summary_fields?.execution_environment,\n      table: tableOption ?? ColumnTableOption.expanded,\n      card: cardOption ?? ColumnCardOption.hidden,\n      list: listOption ?? ColumnListOption.hidden,\n      defaultSortDirection: defaultSort ?? 'desc',\n      modal: modalOption ?? ColumnModalOption.hidden,\n      dashboard: dashboardOption ?? ColumnDashboardOption.hidden,\n    }),\n    [cardOption, dashboardOption, defaultSort, getPageUrl, listOption, modalOption, t, tableOption]\n  );\n\n  return column;\n}\n","import { useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { DateTimeCell, ITableColumn, usePageNavigate } from '../../../../../../framework';\nimport { StatusCell } from '../../../../../common/Status';\nimport {\n  useInventoryNameColumn,\n  useNameColumn,\n  useProjectNameColumn,\n} from '../../../../../common/columns';\nimport {\n  useJobExecutionEnvColumn,\n  useJobLaunchedByColumn,\n  useJobSliceColumn,\n  useJobTemplateColumn,\n  useSourceWorkflowColumn,\n} from '../../../../common/JobColumns';\nimport { UnifiedJob } from '../../../../interfaces/UnifiedJob';\nimport { AwxRoute } from '../../../../main/AwxRoutes';\n\nexport function useHostsJobsColumns(options?: { disableSort?: boolean; disableLinks?: boolean }) {\n  const pageNavigate = usePageNavigate();\n  const { t } = useTranslation();\n\n  const IDColumns = useMemo<ITableColumn<UnifiedJob>>(\n    () => ({\n      header: t('ID'),\n      cell: (job: UnifiedJob) => job.id,\n      sort: 'id',\n      card: 'hidden',\n      list: 'hidden',\n      dashboard: 'hidden',\n      minWidth: 0,\n    }),\n    [t]\n  );\n\n  const jobPaths = useMemo<{ [key: string]: string }>(\n    () => ({\n      project_update: 'project',\n      inventory_update: 'inventory',\n      job: 'playbook',\n      ad_hoc_command: 'command',\n      system_job: 'management',\n      workflow_job: 'workflow',\n    }),\n    []\n  );\n\n  const nameClick = useCallback(\n    (job: UnifiedJob) =>\n      pageNavigate(AwxRoute.JobDetails, {\n        params: {\n          id: job.id,\n          job_type: jobPaths[job.type],\n        },\n      }),\n    [jobPaths, pageNavigate]\n  );\n\n  const nameColumn = useNameColumn({\n    ...options,\n    onClick: nameClick,\n    defaultSort: false,\n  });\n\n  const statusColumn = useMemo<ITableColumn<UnifiedJob>>(\n    () => ({\n      header: t('Status'),\n      cell: (job: UnifiedJob) => {\n        return <StatusCell status={job.status} />;\n      },\n      sort: 'status',\n    }),\n    [t]\n  );\n\n  const startTimeColumn = useMemo<ITableColumn<UnifiedJob>>(\n    () => ({\n      header: t('Started'),\n      cell: (job: UnifiedJob) => {\n        return <DateTimeCell value={job.started} />;\n      },\n      sort: 'started',\n    }),\n    [t]\n  );\n\n  const finishTimeColumn = useMemo<ITableColumn<UnifiedJob>>(\n    () => ({\n      header: t('Finished'),\n      cell: (job: UnifiedJob) => {\n        return <DateTimeCell value={job.finished} />;\n      },\n      sort: 'finished',\n      defaultSortDirection: 'desc',\n      defaultSort: true,\n    }),\n    [t]\n  );\n\n  const launchedByColumn = useJobLaunchedByColumn();\n  const inventoryColumn = useInventoryNameColumn(AwxRoute.InventoryDetails);\n  const jobSliceColumn = useJobSliceColumn();\n  const jobTemplateColumn = useJobTemplateColumn();\n  const sourceWorkflowColumn = useSourceWorkflowColumn();\n  const projectNameColumn = useProjectNameColumn(AwxRoute.ProjectDetails);\n  const executionEnvColumn = useJobExecutionEnvColumn();\n\n  const tableColumns = useMemo<ITableColumn<UnifiedJob>[]>(() => {\n    const displayColumns = [\n      IDColumns,\n      nameColumn,\n      statusColumn,\n      startTimeColumn,\n      finishTimeColumn,\n      launchedByColumn,\n      jobTemplateColumn,\n      sourceWorkflowColumn,\n      inventoryColumn,\n      projectNameColumn,\n      executionEnvColumn,\n      jobSliceColumn,\n    ];\n    return displayColumns;\n  }, [\n    IDColumns,\n    nameColumn,\n    statusColumn,\n    startTimeColumn,\n    finishTimeColumn,\n    launchedByColumn,\n    jobTemplateColumn,\n    sourceWorkflowColumn,\n    inventoryColumn,\n    projectNameColumn,\n    executionEnvColumn,\n    jobSliceColumn,\n  ]);\n  return tableColumns;\n}\n","import { useParams } from 'react-router-dom';\nimport { usePersistentFilters } from '../../../../common/PersistentFilters';\nimport { JobsList } from '../../../views/jobs/JobsList';\nimport { useHostsJobsColumns } from '../../inventories/inventoryHostsPage/hooks/useHostsJobsColumns';\n\nexport function HostJobs() {\n  usePersistentFilters('inventories');\n  const jobsColumns = useHostsJobsColumns();\n  const { id = '' } = useParams<{ id: string }>();\n  const queryParams = { job__hosts: id, not__launch_type: 'sync' };\n  return <JobsList queryParams={queryParams} columns={jobsColumns} />;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { compareStrings } from '../../../../../framework';\nimport { useNameColumn } from '../../../../common/columns';\nimport { getItemKey, requestDelete } from '../../../../common/crud/Data';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { Inventory } from '../../../interfaces/Inventory';\nimport { useInventoriesColumns } from './useInventoriesColumns';\n\nexport function useDeleteInventories(onComplete: (inventories: Inventory[]) => void) {\n  const { t } = useTranslation();\n  const confirmationColumns = useInventoriesColumns({ disableLinks: true, disableSort: true });\n  const deleteActionNameColumn = useNameColumn({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo(() => [deleteActionNameColumn], [deleteActionNameColumn]);\n  const bulkAction = useAwxBulkConfirmation<Inventory>();\n\n  const cannotDeleteInventory = (inventory: Inventory) => {\n    return inventory?.summary_fields?.user_capabilities?.delete\n      ? undefined\n      : t('The inventory cannot be deleted due to insufficient permission.');\n  };\n\n  const deleteInventories = (inventories: Inventory[]) => {\n    const undeletableInventories = inventories.filter(cannotDeleteInventory);\n    bulkAction({\n      title: t('Permanently delete inventories', { count: inventories.length }),\n      confirmText: t('Yes, I confirm that I want to delete these {{count}} inventories.', {\n        count: inventories.length - undeletableInventories.length,\n      }),\n      actionButtonText: t('Delete inventories', { count: inventories.length }),\n      items: inventories.sort((l, r) => compareStrings(l.name, r.name)),\n      keyFn: getItemKey,\n      isDanger: true,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: (inventory: Inventory, signal) =>\n        requestDelete(awxAPI`/inventories/${inventory.id.toString()}/`, signal),\n      alertPrompts:\n        undeletableInventories.length > 0\n          ? [\n              t(\n                '{{count}} of the selected inventories cannot be deleted due to insufficient permission.',\n                {\n                  count: undeletableInventories.length,\n                }\n              ),\n            ]\n          : undefined,\n      isItemNonActionable: cannotDeleteInventory,\n    });\n  };\n  return deleteInventories;\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport { CopyIcon, PencilAltIcon, SyncIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { Inventory } from '../../../interfaces/Inventory';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useCopyInventory } from './useCopyInventory';\nimport { useDeleteInventories } from './useDeleteInventories';\nimport { useParams } from 'react-router-dom';\nimport { InventoryWithSource } from '../InventoryPage/InventoryDetails';\nimport { usePageAlertToaster } from '../../../../../framework';\nimport { useCallback } from 'react';\nimport { postRequest } from '../../../../common/crud/Data';\nimport { awxAPI } from '../../../common/api/awx-utils';\n\ntype InventoryActionOptions = {\n  onInventoriesDeleted: (inventories: Inventory[]) => void;\n  onInventoryCopied?: () => unknown;\n  detail: boolean;\n};\n\nexport function useInventoryActions({\n  onInventoriesDeleted,\n  onInventoryCopied = () => null,\n  detail,\n}: InventoryActionOptions) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const deleteInventories = useDeleteInventories(onInventoriesDeleted);\n  const copyInventory = useCopyInventory(onInventoryCopied);\n\n  const [updateJobId, setUpdateJobId] = useState<number | undefined>(undefined);\n  // for faster UI change\n  const [hideCancelButton, setHideCancelButton] = useState<boolean | undefined>(undefined);\n\n  const params = useParams<{ inventory_type: string }>();\n\n  const alertToaster = usePageAlertToaster();\n\n  const cancelSync = useCallback(async () => {\n    try {\n      await postRequest(\n        awxAPI`/inventory_updates/${updateJobId?.toString() || ''}/cancel/`,\n        undefined\n      );\n      setHideCancelButton(true);\n    } catch (error) {\n      if (error?.toString() === 'SyntaxError: Unexpected end of JSON input') {\n        return;\n      }\n\n      alertToaster.addAlert({\n        variant: 'danger',\n        title: t('Failed to cancel inventory source'),\n        children: error instanceof Error && error.message,\n        timeout: 5000,\n      });\n    }\n  }, [alertToaster, t, updateJobId]);\n\n  const startSync = useCallback(\n    async (inventory: InventoryWithSource) => {\n      try {\n        const response = await postRequest<{ inventory_update: number }>(\n          awxAPI`/inventory_sources/${inventory.source?.id.toString() || ''}/update/`,\n          {}\n        );\n        setUpdateJobId(response.inventory_update);\n        setHideCancelButton(false);\n      } catch (error) {\n        alertToaster.addAlert({\n          variant: 'danger',\n          title: t('Failed to update inventory source'),\n          children: error instanceof Error && error.message,\n          timeout: 5000,\n        });\n      }\n    },\n    [alertToaster, t]\n  );\n\n  return useMemo<IPageAction<InventoryWithSource>[]>(() => {\n    const cannotDeleteInventory = (inventory: Inventory): string =>\n      inventory?.summary_fields?.user_capabilities?.delete\n        ? ''\n        : t(`The inventory cannot be deleted due to insufficient permission`);\n\n    const cannotEditInventory = (inventory: Inventory): string =>\n      inventory?.summary_fields?.user_capabilities?.edit\n        ? ''\n        : t(`The inventory cannot be edited due to insufficient permission`);\n\n    const cannotCopyInventory = (inventory: Inventory): string => {\n      if (!inventory?.summary_fields?.user_capabilities?.copy) {\n        return t(`The inventory cannot be copied due to insufficient permission`);\n      } else if (inventory?.has_inventory_sources) {\n        return t(`Inventories with sources cannot be copied`);\n      } else {\n        return '';\n      }\n    };\n\n    const cannotSyncInventory = (inventory: InventoryWithSource): string =>\n      inventory?.source?.summary_fields?.user_capabilities?.start\n        ? ''\n        : t(`The inventory cannot be synced due to insufficient permission`);\n\n    const kinds: { [key: string]: string } = {\n      '': 'inventory',\n      smart: 'smart_inventory',\n      constructed: 'constructed_inventory',\n    };\n\n    return [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: PencilAltIcon,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        label: t('Edit inventory'),\n        isDisabled: (inventory: Inventory) => cannotEditInventory(inventory),\n        onClick: (inventory: Inventory) =>\n          pageNavigate(AwxRoute.EditInventory, {\n            params: { inventory_type: kinds[inventory.kind], id: inventory.id },\n          }),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: CopyIcon,\n        label: t('Copy inventory'),\n        isDisabled: (inventory: Inventory) => cannotCopyInventory(inventory),\n        onClick: (inventory: Inventory) => copyInventory(inventory),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: SyncIcon,\n        isPinned: true,\n        label: t('Sync inventory'),\n        isDisabled: (inventory: InventoryWithSource) => cannotSyncInventory(inventory),\n        onClick: (inventory: InventoryWithSource) => startSync(inventory),\n        isHidden: (inventory) =>\n          !(\n            params.inventory_type === 'constructed_inventory' &&\n            detail === true &&\n            (isSyncRunning(inventory) !== true || hideCancelButton === true)\n          ),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: SyncIcon,\n        isPinned: true,\n        label: t('Cancel Sync'),\n        isDisabled: (inventory: InventoryWithSource) => cannotSyncInventory(inventory),\n        onClick: () => cancelSync(),\n        isHidden: (inventory) =>\n          !(\n            params.inventory_type === 'constructed_inventory' &&\n            detail === true &&\n            isSyncRunning(inventory) === true &&\n            updateJobId !== undefined &&\n            hideCancelButton !== true\n          ),\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: TrashIcon,\n        label: t('Delete inventory'),\n        isDisabled: (inventory: Inventory) => cannotDeleteInventory(inventory),\n        onClick: (inventory: Inventory) => deleteInventories([inventory]),\n        isDanger: true,\n      },\n    ];\n  }, [\n    deleteInventories,\n    copyInventory,\n    pageNavigate,\n    t,\n    params.inventory_type,\n    detail,\n    cancelSync,\n    startSync,\n    hideCancelButton,\n    updateJobId,\n  ]);\n}\n\nfunction isSyncRunning(inventory: InventoryWithSource) {\n  const inventorySourceSyncJob =\n    inventory?.source?.summary_fields?.current_job ||\n    inventory?.source?.summary_fields?.last_job ||\n    undefined;\n\n  let syncRunning = undefined;\n  if (inventorySourceSyncJob) {\n    const status = inventorySourceSyncJob.status;\n    syncRunning =\n      status === 'pending' || status === 'running' || status === 'waiting' ? true : false;\n  }\n\n  return syncRunning;\n}\n","import { AlertProps } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { usePageAlertToaster } from '../../../../../framework';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { Inventory } from '../../../interfaces/Inventory';\n\nexport function useCopyInventory(onComplete: () => void) {\n  const { t } = useTranslation();\n  const postRequest = usePostRequest();\n  const alertToaster = usePageAlertToaster();\n\n  const copyInventory = (inventory: Inventory) => {\n    const alert: AlertProps = {\n      variant: 'success',\n      title: t(`${inventory.name} copied.`),\n      timeout: 2000,\n    };\n    postRequest(awxAPI`/inventories/${inventory.id.toString()}/copy/`, {\n      name: `${inventory.name} @ ${new Date()\n        .toTimeString()\n        .replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, '$1')}`,\n    })\n      .then(() => {\n        alertToaster.addAlert(alert);\n      })\n      .catch((error) => {\n        alertToaster.replaceAlert(alert, {\n          variant: 'danger',\n          title: t('Failed to copy inventory'),\n          children: error instanceof Error && error.message,\n        });\n      })\n      .finally(onComplete);\n  };\n  return copyInventory;\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLocation, useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageActions,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { PageRoutedTabs } from '../../../../common/PageRoutedTabs';\nimport { useGet } from '../../../../common/crud/useGet';\nimport { useViewActivityStream } from '../../../access/common/useViewActivityStream';\nimport { AwxError } from '../../../common/AwxError';\nimport { AwxItemsResponse } from '../../../common/AwxItemsResponse';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxWebSocketSubscription } from '../../../common/useAwxWebSocket';\nimport { Inventory } from '../../../interfaces/Inventory';\nimport { InventorySource } from '../../../interfaces/InventorySource';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useInventoryActions } from '../hooks/useInventoryActions';\nimport { InventoryWithSource } from './InventoryDetails';\n\nexport function InventoryPage() {\n  const { t } = useTranslation();\n  const activityStream = useViewActivityStream('inventory');\n  const params = useParams<{ id: string; inventory_type: string }>();\n\n  const urlType =\n    params.inventory_type === 'constructed_inventory' ? 'constructed_inventories' : 'inventories';\n\n  const location = useLocation();\n  const getDetailsPageUrl = useGetPageUrl();\n  const pageUrl = getDetailsPageUrl(AwxRoute.InventoryDetails, {\n    params: { inventory_type: params.inventory_type, id: params.id },\n  });\n  const detail = location.pathname === pageUrl;\n\n  const inventoryRequest = useGet<InventoryWithSource>(awxAPI`/${urlType}/${params.id || ''}/`);\n  const inventoryData = inventoryRequest?.data;\n  const inventorySourceUrl =\n    inventoryData?.kind === 'constructed' && detail === true\n      ? awxAPI`/inventories/${params.id ?? ''}/inventory_sources/`\n      : '';\n\n  const inventorySourceRequest = useGet<AwxItemsResponse<InventorySource>>(inventorySourceUrl);\n  const inventorySourceData = inventorySourceRequest.data?.results[0];\n\n  const inventory = useMemo<InventoryWithSource | undefined>(() => {\n    if (inventoryData) {\n      return { ...inventoryData, source: inventorySourceData };\n    } else {\n      return undefined;\n    }\n  }, [inventoryData, inventorySourceData]);\n\n  const refresh = inventorySourceRequest.refresh;\n\n  const handleWebSocketMessage = useCallback(\n    (message?: { group_name?: string; type?: string }) => {\n      switch (message?.group_name) {\n        case 'jobs':\n          switch (message?.type) {\n            case 'job':\n            case 'workflow_job':\n            case 'project_update':\n            case 'inventory_update':\n              void refresh();\n              break;\n          }\n          break;\n      }\n    },\n    [refresh]\n  );\n  useAwxWebSocketSubscription(\n    { control: ['limit_reached_1'], jobs: ['status_changed'] },\n    handleWebSocketMessage as (data: unknown) => void\n  );\n\n  const pageNavigate = usePageNavigate();\n\n  const itemActions = useInventoryActions({\n    onInventoriesDeleted: () => pageNavigate(AwxRoute.Inventories),\n    detail,\n  });\n  const getPageUrl = useGetPageUrl();\n  const isSmartInventory = inventory?.kind === 'smart';\n  const isConstructedInventory = inventory?.kind === 'constructed';\n\n  if (inventorySourceRequest.error) {\n    return <AwxError error={inventorySourceRequest.error} />;\n  }\n\n  if (inventoryRequest.error) {\n    return <AwxError error={inventoryRequest.error} />;\n  }\n\n  if (\n    !inventoryRequest.data ||\n    (!inventorySourceRequest.data &&\n      params.inventory_type === 'constructed_inventory' &&\n      detail === true)\n  ) {\n    return <LoadingPage></LoadingPage>;\n  }\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={inventory?.name}\n        breadcrumbs={[\n          { label: t('Inventories'), to: getPageUrl(AwxRoute.Inventories) },\n          { label: inventory?.name },\n        ]}\n        headerActions={\n          <PageActions<Inventory>\n            actions={[...activityStream, ...itemActions]}\n            position={DropdownPosition.right}\n            selectedItem={inventory}\n          />\n        }\n      />\n      <PageRoutedTabs\n        backTab={{\n          label: t('Back to Inventories'),\n          page: AwxRoute.Inventories,\n          persistentFilterKey: 'inventories',\n        }}\n        tabs={[\n          { label: t('Details'), page: AwxRoute.InventoryDetails },\n          { label: t('User Access'), page: AwxRoute.InventoryUserAccess },\n          { label: t('Team Access'), page: AwxRoute.InventoryTeamAccess },\n          !isSmartInventory && { label: t('Groups'), page: AwxRoute.InventoryGroups },\n          { label: t('Hosts'), page: AwxRoute.InventoryHosts },\n          !isSmartInventory &&\n            !isConstructedInventory && { label: t('Sources'), page: AwxRoute.InventorySources },\n          { label: t('Jobs'), page: AwxRoute.InventoryJobs },\n          { label: t('Job Templates'), page: AwxRoute.InventoryJobTemplates },\n        ]}\n        params={params}\n        componentParams={{ inventory }}\n      />\n    </PageLayout>\n  );\n}\n\nexport function useGetInventory(id?: string, inventory_type?: string) {\n  const path =\n    inventory_type === 'constructed_inventory' ? 'constructed_inventories' : 'inventories';\n  const { data: job } = useGet<Inventory>(id ? awxAPI`/${path}/${id}/` : '');\n  return job;\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport {\n  ICatalogBreadcrumb,\n  PageFormDataEditor,\n  PageFormSubmitHandler,\n  PageFormTextInput,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { PageFormSection } from '../../../../../framework/PageForm/Utils/PageFormSection';\nimport { requestPatch } from '../../../../common/crud/Data';\nimport { useGetRequest } from '../../../../common/crud/useGet';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { AwxPageForm } from '../../../common/AwxPageForm';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { AwxHost } from '../../../interfaces/AwxHost';\nimport { InventoryGroup } from '../../../interfaces/InventoryGroup';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useGetHost } from '../../hosts/hooks/useGetHost';\nimport { useGetInventory } from '../InventoryPage/InventoryPage';\nimport { PageFormSelectInventory } from '../components/PageFormInventorySelect';\n\nexport interface IHostInput {\n  name: string;\n  description?: string;\n  variables?: string;\n  inventory?: { name?: string; id?: number };\n}\n\nexport function CreateHost() {\n  const [groupName, setGroupName] = useState('');\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const pageNavigate = usePageNavigate();\n  const getPageUrl = useGetPageUrl();\n  const params = useHostParams('create');\n\n  const postRequest = usePostRequest<AwxHost>();\n  const getRequest = useGetRequest<InventoryGroup>();\n\n  useEffect(() => {\n    async function getGroup() {\n      if (params?.group_id) {\n        const group = await getRequest(awxAPI`/groups/${params?.group_id}/`);\n        if (group?.name) {\n          setGroupName(group.name);\n        }\n      }\n    }\n\n    void (async () => {\n      await getGroup();\n    })();\n  }, [getRequest, params?.group_id]);\n\n  const onSubmit: PageFormSubmitHandler<IHostInput> = async (hostInput: IHostInput) => {\n    const inventory_id = params.id || hostInput.inventory?.id;\n\n    const modifiedHostInput = { ...hostInput, inventory: Number(inventory_id) };\n    const newHost = params?.group_id\n      ? await postRequest(awxAPI`/groups/${params.group_id}/hosts/`, modifiedHostInput as AwxHost)\n      : await postRequest(awxAPI`/hosts/`, modifiedHostInput as AwxHost);\n\n    if (params.inventory_host) {\n      pageNavigate(AwxRoute.InventoryHostDetails, {\n        params: { inventory_type: params.inventory_type, id: inventory_id, host_id: newHost.id },\n      });\n    } else {\n      pageNavigate(AwxRoute.HostDetails, { params: { id: newHost.id } });\n    }\n  };\n\n  const onCancel = () => navigate(-1);\n\n  const inventoryResponse = useGetInventory(params.id, params.inventory_type);\n\n  let breadcrumbs: ICatalogBreadcrumb[] = [];\n\n  if (params.inventory_host) {\n    breadcrumbs = [\n      { label: t('Inventories'), to: getPageUrl(AwxRoute.Inventories) },\n      {\n        label: t(`${inventoryResponse?.name}`),\n        to: getPageUrl(AwxRoute.InventoryDetails, {\n          params: { id: params.id, inventory_type: params.inventory_type },\n        }),\n      },\n      params?.group_id\n        ? {\n            label: t('Groups'),\n            id: 'group',\n            to: getPageUrl(AwxRoute.InventoryGroups, {\n              params: {\n                id: params.group_id,\n                inventory_type: params.inventory_type,\n              },\n            }),\n          }\n        : {\n            label: t('Hosts'),\n            id: 'hosts',\n            to: getPageUrl(AwxRoute.InventoryHosts, {\n              params: {\n                id: params.id,\n                inventory_type: params.inventory_type,\n                host_id: params.host_id,\n              },\n            }),\n          },\n      params?.group_id\n        ? {\n            label: t(`${groupName}`),\n            to: getPageUrl(AwxRoute.InventoryGroupDetails, {\n              params: {\n                id: params.group_id,\n                inventory_type: params.inventory_type,\n                group_id: params.group_id,\n              },\n            }),\n          }\n        : {},\n      { label: t('Create host') },\n    ];\n  } else {\n    breadcrumbs = [\n      {\n        label: t('Hosts'),\n        to: getPageUrl(AwxRoute.Hosts),\n      },\n      { label: t('Create host') },\n    ];\n  }\n\n  return (\n    <PageLayout>\n      <PageHeader breadcrumbs={breadcrumbs} title={t('Create host')} />\n      <AwxPageForm\n        submitText={t('Create host')}\n        onSubmit={onSubmit}\n        cancelText={t('Cancel')}\n        onCancel={onCancel}\n        defaultValue={{\n          name: '',\n          description: '',\n          variables: '---\\n',\n        }}\n      >\n        <HostInputs edit_mode={false} inventory_host={params.inventory_host} />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n\nfunction useHostParams(mode: 'edit' | 'create'): {\n  id?: string;\n  inventory_type?: string;\n  host_id?: string;\n  group_id?: string;\n  inventory_host: boolean;\n} {\n  const params = useParams<{\n    id: string;\n    inventory_type: string;\n    host_id: string;\n    group_id: string;\n  }>();\n\n  let id = params.id;\n  let host_id = params.host_id;\n\n  let inventory_host = false;\n\n  if (!host_id && mode === 'edit') {\n    host_id = id;\n    id = undefined;\n  }\n\n  if (id) {\n    inventory_host = true;\n  }\n\n  return {\n    id,\n    host_id,\n    inventory_type: params.inventory_type,\n    group_id: params.group_id,\n    inventory_host,\n  };\n}\n\nexport function EditHost() {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const pageNavigate = usePageNavigate();\n  const getPageUrl = useGetPageUrl();\n  const params = useHostParams('edit');\n\n  const { host: hostResponse } = useGetHost(params.host_id ?? '');\n\n  const [host, setHost] = useState<AwxHost | undefined>(hostResponse);\n\n  useEffect(() => setHost(hostResponse), [hostResponse]);\n\n  const onSubmit: PageFormSubmitHandler<IHostInput> = async (hostInput: IHostInput) => {\n    await requestPatch<AwxHost>(awxAPI`/hosts/${params.host_id ?? ''}/`, hostInput);\n\n    if (params.inventory_host) {\n      pageNavigate(AwxRoute.InventoryHostDetails, {\n        params: { inventory_type: params.inventory_type, id: params.id, host_id: params.host_id },\n      });\n    } else {\n      pageNavigate(AwxRoute.HostDetails, { params: { id: params.host_id } });\n    }\n  };\n\n  const onCancel = () => navigate(-1);\n\n  if (!host) {\n    return (\n      <PageLayout>\n        <PageHeader />\n      </PageLayout>\n    );\n  }\n\n  const defaultValue: Partial<IHostInput> = {\n    name: host.name,\n    description: host.description,\n    variables: host.variables,\n    inventory: { name: host.summary_fields?.inventory?.name },\n  };\n\n  let breadcrumbs: ICatalogBreadcrumb[] = [];\n\n  if (params.inventory_host) {\n    breadcrumbs = [\n      { label: t('Inventories'), to: getPageUrl(AwxRoute.Inventories) },\n      {\n        label: t(`${hostResponse?.summary_fields?.inventory?.name}`),\n        to: getPageUrl(AwxRoute.InventoryDetails, {\n          params: { id: params.id, inventory_type: params.inventory_type },\n        }),\n      },\n      {\n        label: t('Hosts'),\n        to: getPageUrl(AwxRoute.InventoryHosts, {\n          params: {\n            id: params.id,\n            inventory_type: params.inventory_type,\n            host_id: params.host_id,\n          },\n        }),\n      },\n      { label: t('Edit {{hostName}}', { hostName: host?.name }) },\n    ];\n  } else {\n    breadcrumbs = [\n      {\n        label: t('Hosts'),\n        to: getPageUrl(AwxRoute.Hosts),\n      },\n      { label: t('Edit {{hostName}}', { hostName: host?.name }) },\n    ];\n  }\n\n  return (\n    <PageLayout>\n      <PageHeader\n        breadcrumbs={breadcrumbs}\n        title={t('Edit {{hostName}}', { hostName: host?.name })}\n      />\n      <AwxPageForm<IHostInput>\n        submitText={t('Save host')}\n        onSubmit={onSubmit}\n        cancelText={t('Cancel')}\n        onCancel={onCancel}\n        defaultValue={defaultValue}\n      >\n        <HostInputs edit_mode={true} inventory_host={params.inventory_host} />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n\nfunction HostInputs(props: { edit_mode?: boolean; inventory_host?: boolean }) {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <PageFormTextInput<IHostInput>\n        name=\"name\"\n        label={t('Name')}\n        placeholder={t('Enter a name')}\n        isRequired\n        maxLength={150}\n      />\n      <PageFormTextInput<IHostInput>\n        name=\"description\"\n        label={t('Description')}\n        placeholder={t('Enter a description')}\n      />\n      {!props.inventory_host && props.edit_mode && (\n        <PageFormTextInput<IHostInput>\n          name=\"inventory.name\"\n          label={t('Inventory')}\n          isDisabled={true}\n          labelHelp={t(`The inventory that this host belongs to.`)}\n        />\n      )}\n      {!props.inventory_host && !props.edit_mode && (\n        <PageFormSelectInventory\n          name=\"inventory.id\"\n          isRequired\n          labelHelp={t('Select the inventory that this host will belong to.')}\n        />\n      )}\n      <PageFormSection singleColumn>\n        <PageFormDataEditor<IHostInput> format=\"yaml\" name=\"variables\" label={t('Variables')} />\n      </PageFormSection>\n    </>\n  );\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  DateTimeCell,\n  PageDetail,\n  PageDetails,\n  TextCell,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { PageDetailCodeEditor } from '../../../../../framework/PageDetails/PageDetailCodeEditor';\nimport { LastModifiedPageDetail } from '../../../../common/LastModifiedPageDetail';\nimport { AwxHost } from '../../../interfaces/AwxHost';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useGetHost } from '../../hosts/hooks/useGetHost';\nimport { Sparkline } from '../../templates/components/Sparkline';\nimport { useGetPageUrl } from '../../../../../framework';\n\nfunction useHostDetailParams() {\n  const params = useParams<{ id: string; inventory_type: string; host_id: string }>();\n\n  let id = params.id;\n  let host_id = params.host_id;\n\n  if (!host_id) {\n    // the detail is called from the hosts list, id here means host_id, not inventory_id\n    host_id = id;\n    id = undefined;\n  }\n\n  return { id, host_id, inventory_type: params.inventory_type };\n}\n\nexport function InventoryHostDetails() {\n  const params = useHostDetailParams();\n  const { host } = useGetHost(params.host_id as string);\n\n  if (!host) {\n    return null;\n  }\n\n  return <InventoryHostDetailsInner host={host} />;\n}\n\nfunction inventoryKindToType(kind: string) {\n  if (kind === 'smart') return 'smart_inventory';\n  if (kind === 'constructed') return 'constructed_inventory';\n  return 'inventory';\n}\n\nexport function InventoryHostDetailsInner(props: { host: AwxHost }) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const getPageUrl = useGetPageUrl();\n  const params = useHostDetailParams();\n\n  const host = props.host;\n\n  const recentPlaybookJobs = host.summary_fields.recent_jobs.map((job) => ({\n    ...job,\n    canceled_on: null,\n  }));\n\n  return (\n    <PageDetails>\n      <PageDetail label={t('Name')}>{host.name}</PageDetail>\n      {recentPlaybookJobs.length > 0 && (\n        <PageDetail label={t('Activity')}>\n          <Sparkline jobs={recentPlaybookJobs} />\n        </PageDetail>\n      )}\n      <PageDetail label={t('Description')}>{host.description}</PageDetail>\n      <PageDetail label={t('Inventory')} helpText={t(`The inventory that this host belongs to.`)}>\n        <TextCell\n          text={host.summary_fields?.inventory?.name}\n          to={getPageUrl(AwxRoute.InventoryDetails, {\n            params: {\n              id: host.summary_fields?.inventory?.id,\n              inventory_type: inventoryKindToType(host.summary_fields?.inventory?.kind),\n            },\n          })}\n        />\n      </PageDetail>\n      {(params.inventory_type === 'constructed_inventory' ||\n        params.inventory_type === 'smart_inventory') && (\n        <PageDetail label={t('Enabled')}>\n          <TextCell text={host.enabled ? 'On' : 'Off'} />\n        </PageDetail>\n      )}\n      <PageDetail label={t('Created')}>\n        <DateTimeCell\n          value={host.created}\n          author={host.summary_fields?.created_by?.username}\n          onClick={() =>\n            pageNavigate(AwxRoute.UserDetails, {\n              params: { id: host.summary_fields?.created_by?.id },\n            })\n          }\n        />\n      </PageDetail>\n      <LastModifiedPageDetail\n        value={host.modified}\n        author={host.summary_fields?.modified_by?.username}\n        onClick={() =>\n          pageNavigate(AwxRoute.UserDetails, {\n            params: { id: host.summary_fields?.modified_by?.id },\n          })\n        }\n      />\n      <PageDetailCodeEditor\n        label={t('Variables')}\n        showCopyToClipboard\n        value={host.variables || '---'}\n      />\n    </PageDetails>\n  );\n}\n","import {\n  useCreatedByToolbarFilter,\n  useModifiedByToolbarFilter,\n} from '../../../../common/awx-toolbar-filters';\nimport { useDynamicToolbarFilters } from '../../../../common/useDynamicFilters';\n\nexport function useHostsGroupsFilters(url?: string) {\n  const createdByToolbarFilter = useCreatedByToolbarFilter();\n  const modifiedByToolbarFilter = useModifiedByToolbarFilter();\n  const toolbarFilters = useDynamicToolbarFilters({\n    optionsPath: url ? url : 'groups',\n    preFilledValueKeys: {\n      name: {\n        apiPath: url ? url : 'groups',\n      },\n      id: {\n        apiPath: url ? url : 'groups',\n      },\n    },\n    preSortedKeys: ['name', 'id', 'description', 'created-by', 'modified-by'],\n    additionalFilters: [createdByToolbarFilter, modifiedByToolbarFilter],\n  });\n  return toolbarFilters;\n}\n","import { useCallback, useMemo } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ITableColumn, usePageNavigate } from '../../../../../../framework';\nimport { useNameColumn } from '../../../../../common/columns';\nimport { InventoryGroup } from '../../../../interfaces/InventoryGroup';\nimport { AwxRoute } from '../../../../main/AwxRoutes';\n\nexport function useHostsGroupsColumns(options?: {\n  disableSort?: boolean;\n  disableLinks?: boolean;\n  useGroupInventory?: boolean;\n}) {\n  const pageNavigate = usePageNavigate();\n  const params = useParams<{ id: string; inventory_type: string }>();\n\n  const nameClick = useCallback(\n    (group: InventoryGroup) => {\n      pageNavigate(AwxRoute.InventoryGroupDetails, {\n        params: {\n          id: options?.useGroupInventory === true ? group.summary_fields.inventory.id : params.id,\n          group_id: group.id,\n          inventory_type:\n            options?.useGroupInventory === true\n              ? kindToInventoryType(group.summary_fields.inventory.kind)\n              : params.inventory_type,\n        },\n      });\n    },\n    [pageNavigate, params.id, params.inventory_type, options?.useGroupInventory]\n  );\n  const nameColumn = useNameColumn({\n    ...options,\n    onClick: nameClick,\n  });\n\n  const tableColumns = useMemo<ITableColumn<InventoryGroup>[]>(() => [nameColumn], [nameColumn]);\n\n  return tableColumns;\n}\n\nfunction kindToInventoryType(kind: string) {\n  let inventory_type = '';\n\n  if (kind === '') {\n    inventory_type = 'inventory';\n  }\n\n  if (kind === 'smart') {\n    inventory_type = 'smart_inventory';\n  }\n\n  if (kind === 'constructed') {\n    inventory_type = 'constructed_inventory';\n  }\n\n  return inventory_type;\n}\n","import { t } from 'i18next';\nimport { useState, useEffect } from 'react';\nimport { MultiSelectDialog, usePageDialog } from '../../../../../framework';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxView } from '../../../common/useAwxView';\nimport { InventoryGroup } from '../../../interfaces/InventoryGroup';\nimport { useHostsGroupsColumns } from './hooks/useHostsGroupsColumns';\nimport { useHostsGroupsFilters } from './hooks/useHostsGroupsFilters';\n\nexport interface InventoryHostGroupsAddModalProps {\n  onAdd: (items: InventoryGroup[]) => void;\n  inventoryId: string;\n  hostId: string;\n}\n\nexport function InventoryHostGroupsAddModal(props: {\n  onAdd: (items: InventoryGroup[]) => void;\n  inventoryId: string;\n  hostId: string;\n}) {\n  const toolbarFilters = useHostsGroupsFilters(`inventories/${props.inventoryId ?? ''}/groups`);\n  const tableColumns = useHostsGroupsColumns({ disableLinks: true });\n\n  const view = useAwxView<InventoryGroup>({\n    url: awxAPI`/inventories/${props.inventoryId ?? ''}/groups/`,\n    queryParams: { not__hosts: props.hostId ?? '' },\n    toolbarFilters,\n    tableColumns,\n  });\n\n  return (\n    <MultiSelectDialog<InventoryGroup>\n      title={t('Select groups')}\n      toolbarFilters={toolbarFilters}\n      tableColumns={tableColumns}\n      onSelect={props.onAdd}\n      errorStateTitle={t('Error loading groups to associate')}\n      emptyStateTitle={t('No groups available to add to host')}\n      view={view}\n    />\n  );\n}\n\nexport function useInventoryHostGroupsAddModal() {\n  const [_, setDialog] = usePageDialog();\n  const [props, setProps] = useState<InventoryHostGroupsAddModalProps>();\n  useEffect(() => {\n    if (props) {\n      setDialog(<InventoryHostGroupsAddModal {...props} />);\n    } else {\n      setDialog(undefined);\n    }\n  }, [props, setDialog]);\n  return setProps;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { compareStrings } from '../../../../../../framework';\nimport { useNameColumn } from '../../../../../common/columns';\nimport { getItemKey, postRequest } from '../../../../../common/crud/Data';\nimport { awxAPI } from '../../../../common/api/awx-utils';\nimport { InventoryGroup } from '../../../../interfaces/InventoryGroup';\nimport { useAwxBulkActionDialog } from '../../../../common/useAwxBulkActionDialog';\n\nexport function useAssociateGroupsToHost(\n  onComplete: (groups: InventoryGroup[]) => void,\n  hostId: string\n) {\n  const { t } = useTranslation();\n  const addActionNameColumn = useNameColumn({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo(() => [addActionNameColumn], [addActionNameColumn]);\n  const bulkAction = useAwxBulkActionDialog<InventoryGroup>();\n  const associateGroupsToHost = (groups: InventoryGroup[]) => {\n    bulkAction({\n      title: t('Add host to groups', { count: groups.length }),\n      items: groups.sort((l, r) => compareStrings(l.name, r.name)),\n      keyFn: getItemKey,\n      actionColumns,\n      onComplete,\n      actionFn: async (group: InventoryGroup, signal: AbortSignal) => {\n        await postRequest(\n          awxAPI`/hosts/${hostId ?? ''}/groups/`,\n          {\n            id: group.id,\n          },\n          signal\n        );\n      },\n      processingText: t('Adding host to group...', { count: groups.length }),\n    });\n  };\n  return associateGroupsToHost;\n}\n","import { useTranslation } from 'react-i18next';\nimport { InventoryGroup } from '../../../interfaces/InventoryGroup';\nimport { usePageDialog } from '../../../../../framework';\nimport {\n  Button,\n  HelperText,\n  HelperTextItem,\n  Modal,\n  ModalVariant,\n  Radio,\n} from '@patternfly/react-core';\nimport { useState } from 'react';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useDeleteRequest } from '../../../../common/crud/useDeleteRequest';\nimport { AwxError } from '../../../common/AwxError';\n\nfunction DeleteGroupsDialog(props: {\n  groups: InventoryGroup[];\n  onClose: () => void;\n  onDelete: () => void;\n}) {\n  const { t } = useTranslation();\n  const [deleteType, setDeleteType] = useState('');\n  const postRequest = usePostRequest();\n  const deleteRequest = useDeleteRequest();\n\n  const [deletedGroups, setDeletedGroups] = useState<InventoryGroup[]>([]);\n  const [error, setError] = useState('');\n\n  const handleDelete = async () => {\n    const currentlyDeletedGroups: InventoryGroup[] = [];\n    const failedGroups: InventoryGroup[] = [];\n\n    setError('');\n\n    for (const group of props.groups) {\n      if (deletedGroups.includes(group)) {\n        continue;\n      }\n\n      try {\n        if (deleteType === 'delete') {\n          await deleteRequest(awxAPI`/groups/${group.id.toString()}/`);\n        } else {\n          await postRequest(awxAPI`/inventories/${group.inventory.toString()}/groups/`, {\n            id: group.id,\n            disassociate: true,\n          });\n        }\n        currentlyDeletedGroups.push(group);\n      } catch (ex) {\n        failedGroups.push(group);\n      }\n    }\n\n    let errorStr = '';\n    setDeletedGroups(currentlyDeletedGroups);\n    if (failedGroups.length > 0) {\n      errorStr = t(`Deletion of those groups failed: `);\n      failedGroups.forEach((failedGroup, index) => {\n        if (index !== 0) {\n          errorStr += ', ';\n        }\n        errorStr += failedGroup.name;\n      });\n      setError(errorStr);\n    } else {\n      props.onDelete();\n      props.onClose();\n    }\n  };\n\n  return (\n    <Modal\n      titleIconVariant=\"danger\"\n      title={t('Delete group')}\n      variant={ModalVariant.small}\n      description={t(`Are you sure you want to delete the groups below?`)}\n      isOpen\n      onClose={props.onClose}\n      data-cy=\"delete-groups-dialog\"\n      actions={[\n        <Button\n          data-cy=\"delete-group-modal-delete-button\"\n          ouiaId=\"delete-group-modal-delete-button\"\n          key=\"delete\"\n          variant=\"danger\"\n          onClick={() => void handleDelete()}\n          isDisabled={deleteType === ''}\n          aria-label={t`Confirm delete`}\n        >\n          {t(`Delete`)}\n        </Button>,\n        <Button\n          ouiaId=\"delete-group-modal-cancel-button\"\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={props.onClose}\n        >\n          {t(`Cancel`)}\n        </Button>,\n      ]}\n    >\n      <>\n        <HelperText className=\"pf-v5-u-pb-lg\" data-cy=\"delete-groups-dialog-names\">\n          {props.groups.map((group) => (\n            <HelperTextItem variant=\"error\" key={group.name}>\n              {group.name}\n            </HelperTextItem>\n          ))}\n        </HelperText>\n        <Radio\n          data-cy=\"delete-groups-dialog-radio-delete\"\n          isChecked={deleteType === 'delete'}\n          name=\"radio-delete-group\"\n          onChange={() => {\n            setDeleteType('delete');\n          }}\n          label={t('Delete all groups and hosts')}\n          id=\"radio-delete-group\"\n        />\n        <Radio\n          data-cy=\"delete-groups-dialog-radio-promote\"\n          isChecked={deleteType === 'promote'}\n          name=\"radio-promote-group\"\n          onChange={() => {\n            setDeleteType('promote');\n          }}\n          label={t('Promote child groups and hosts')}\n          id=\"radio-promote-group\"\n        />\n        {error && <AwxError error={new Error(error)} />}\n      </>\n    </Modal>\n  );\n}\n\nexport function useDeleteGroups(onDelete: () => void) {\n  const [_, setDialog] = usePageDialog();\n  const onClose = () => setDialog(undefined);\n  const deleteGroups = (groups: InventoryGroup[]) => {\n    setDialog(<DeleteGroupsDialog groups={groups} onClose={onClose} onDelete={onDelete} />);\n  };\n  return deleteGroups;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { IAwxView } from '../../../common/useAwxView';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { CogIcon, PlusCircleIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useDeleteGroups } from '../../groups/hooks/useDeleteGroups';\nimport { useParams } from 'react-router-dom';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { ActionsResponse, OptionsResponse } from '../../../interfaces/OptionsResponse';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { InventoryGroup } from '../../../interfaces/InventoryGroup';\nimport { ButtonVariant } from '@patternfly/react-core';\nimport { cannotDeleteResources } from '../../../../common/utils/RBAChelpers';\nimport { useCallback } from 'react';\n\nexport function useInventoriesGroupsToolbarActions(view: IAwxView<InventoryGroup>) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const onDelete = () => {\n    view.unselectAll();\n    void view.refresh();\n  };\n  const deleteGroups = useDeleteGroups(onDelete);\n  const params = useParams<{ id: string; inventory_type: string }>();\n\n  const groupOptions = useOptions<OptionsResponse<ActionsResponse>>(\n    awxAPI`/inventories/${params.id ?? ''}/groups/`\n  ).data;\n\n  const canCreateGroup = Boolean(\n    groupOptions && groupOptions.actions && groupOptions.actions['POST']\n  );\n\n  const selectedItems = view.selectedItems || [];\n  const runCommandAction = useRunCommandAction<InventoryGroup>({\n    ...params,\n    selectedItems,\n    actionType: 'toolbar',\n  });\n\n  return useMemo<IPageAction<InventoryGroup>[]>(() => {\n    const actions: IPageAction<InventoryGroup>[] = [];\n\n    if (params.inventory_type === 'inventory') {\n      actions.push({\n        type: PageActionType.Button,\n        selection: PageActionSelection.None,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        icon: PlusCircleIcon,\n        label: t('Create group'),\n        onClick: () =>\n          pageNavigate(String(AwxRoute.InventoryGroupCreate), {\n            params: { inventory_type: params.inventory_type, id: params.id },\n          }),\n        isDisabled: () =>\n          canCreateGroup\n            ? undefined\n            : t(\n                'You do not have permission to create a group. Please contact your organization administrator if there is an issue with your access.'\n              ),\n      });\n    }\n\n    actions.push(runCommandAction);\n\n    if (params.inventory_type === 'inventory') {\n      actions.push({ type: PageActionType.Seperator });\n\n      actions.push({\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: TrashIcon,\n        label: t('Delete groups'),\n        onClick: deleteGroups,\n        isDanger: true,\n        isDisabled:\n          view.selectedItems.length === 0\n            ? t('Select at least one item from the list')\n            : (groups: InventoryGroup[]) => cannotDeleteResources(groups, t),\n      });\n    }\n    return actions;\n  }, [\n    t,\n    deleteGroups,\n    pageNavigate,\n    params.inventory_type,\n    params.id,\n    canCreateGroup,\n    runCommandAction,\n    view.selectedItems.length,\n  ]);\n}\n\nexport function useRunCommandAction<T extends { name: string }>(\n  params: {\n    inventory_type?: string;\n    id?: string;\n    selectedItems?: T[];\n    actionType: 'row' | 'toolbar';\n  },\n  options?: { isPinned?: boolean }\n): IPageAction<T> {\n  const pageNavigate = usePageNavigate();\n  const { t } = useTranslation();\n\n  const adhocOptions = useOptions<OptionsResponse<ActionsResponse>>(\n    awxAPI`/inventories/${params.id ?? ''}/ad_hoc_commands/`\n  ).data;\n  const canRunAdHocCommand = Boolean(\n    adhocOptions && adhocOptions.actions && adhocOptions.actions['POST']\n  );\n\n  const onClick = useCallback(\n    (selectedItems: T[]) => {\n      const limit = selectedItems.map((item) => item.name).join(', ');\n      const query: { limit?: string; storage?: string } = {};\n\n      if (limit.length < 1800) {\n        if (limit) {\n          query.limit = limit;\n        }\n      } else {\n        query.storage = 'true';\n        localStorage.setItem('runCommandActionSelectedItems', limit);\n      }\n\n      pageNavigate(AwxRoute.InventoryRunCommand, {\n        params: { inventory_type: params.inventory_type, id: params.id },\n        query,\n      });\n    },\n    [pageNavigate, params.inventory_type, params.id]\n  );\n\n  const isDisabled = useCallback(() => {\n    return canRunAdHocCommand\n      ? undefined\n      : t(\n          'You do not have permission to run an ad hoc command. Please contact your organization administrator if there is an issue with your access.'\n        );\n  }, [canRunAdHocCommand, t]);\n\n  const toolbarAction = useMemo<IPageAction<T>>(() => {\n    return {\n      type: PageActionType.Button,\n      selection: PageActionSelection.None,\n      variant: ButtonVariant.secondary,\n      isPinned: options?.isPinned !== undefined ? options?.isPinned : true,\n      label: t('Run command'),\n      onClick: () => {\n        onClick(params.selectedItems || []);\n      },\n      isDisabled: () => isDisabled(),\n    };\n  }, [t, options?.isPinned, onClick, isDisabled, params.selectedItems]);\n\n  const rowAction = useMemo<IPageAction<T>>(() => {\n    return {\n      type: PageActionType.Button,\n      selection: PageActionSelection.Single,\n      isPinned: options?.isPinned,\n      icon: CogIcon,\n      label: t('Run command'),\n      onClick: (item) => {\n        onClick([item]);\n      },\n      isDisabled: () => isDisabled(),\n    };\n  }, [t, onClick, isDisabled, options?.isPinned]);\n\n  if (params.actionType === 'toolbar') {\n    return toolbarAction;\n  }\n\n  if (params.actionType === 'row') {\n    return rowAction;\n  }\n\n  return {} as IPageAction<T>;\n}\n","import { CubesIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport { PageLayout, PageTable } from '../../../../../framework';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { usePersistentFilters } from '../../../../common/PersistentFilters';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { OptionsResponse, ActionsResponse } from '../../../interfaces/OptionsResponse';\nimport { useAwxView } from '../../../common/useAwxView';\nimport { useHostsGroupsFilters } from './hooks/useHostsGroupsFilters';\nimport { useHostsGroupsToolbarActions } from './hooks/useHostsGroupsToolbarActions';\nimport { useHostsGroupsActions } from './hooks/useHostsGroupsActions';\nimport { useHostsGroupsColumns } from './hooks/useHostsGroupsColumns';\nimport { InventoryGroup } from '../../../interfaces/InventoryGroup';\nimport { useInventoryHostGroupsAddModal } from './InventoryHostGroupsModal';\nimport { useAssociateGroupsToHost } from './hooks/useAssociateGroupsToHost';\nimport { useGetHost } from '../../hosts/hooks/useGetHost';\n\nexport function InventoryHostGroups(props: { page: string }) {\n  const { t } = useTranslation();\n  const tableColumns = useHostsGroupsColumns({ useGroupInventory: true });\n  const isHostPage: boolean = props.page === 'host';\n  const params = useParams<{ id: string; inventory_type: string; host_id: string }>();\n  const { host } = useGetHost(isHostPage ? params.id ?? '' : params.host_id ?? '');\n  const inventoryId = String(host?.inventory) ?? '';\n  const hostId = isHostPage ? params.id ?? '' : params.host_id ?? '';\n\n  const toolbarFilters = useHostsGroupsFilters(`hosts/${hostId ?? ''}/all_groups`);\n  const view = useAwxView<InventoryGroup>({\n    url: awxAPI`/hosts/${hostId ?? ''}/all_groups/`,\n    toolbarFilters,\n    tableColumns,\n  });\n\n  const toolbarActions = useHostsGroupsToolbarActions(\n    view,\n    inventoryId,\n    hostId,\n    isHostPage ? 'standaloneHost' : 'inventoryHost'\n  );\n  const rowActions = useHostsGroupsActions(inventoryId);\n\n  const openInventoryHostsGroupsAddModal = useInventoryHostGroupsAddModal();\n  const associateGroups = useAssociateGroupsToHost(view.unselectItemsAndRefresh, hostId);\n\n  const groupOptions = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/groups/`).data;\n  const canCreateGroup = Boolean(\n    groupOptions && groupOptions.actions && groupOptions.actions['POST']\n  );\n\n  usePersistentFilters('inventories');\n\n  return (\n    <PageLayout>\n      <PageTable<InventoryGroup>\n        id=\"awx-inventory-groups-table\"\n        toolbarFilters={toolbarFilters}\n        toolbarActions={toolbarActions}\n        tableColumns={tableColumns}\n        rowActions={rowActions}\n        errorStateTitle={t('Error loading associated groups')}\n        emptyStateTitle={\n          canCreateGroup\n            ? t('There are currently no groups associated with this host')\n            : t('You do not have permission to add a group')\n        }\n        emptyStateDescription={\n          canCreateGroup\n            ? t('Please add a group by using the button below.')\n            : t(\n                'Please contact your organization administrator if there is an issue with your access.'\n              )\n        }\n        emptyStateIcon={canCreateGroup ? undefined : CubesIcon}\n        emptyStateButtonIcon={<PlusCircleIcon />}\n        emptyStateButtonText={canCreateGroup ? t('Associate groups') : undefined}\n        emptyStateButtonClick={\n          canCreateGroup\n            ? () =>\n                openInventoryHostsGroupsAddModal({\n                  onAdd: associateGroups,\n                  inventoryId: inventoryId,\n                  hostId: hostId,\n                })\n            : undefined\n        }\n        {...view}\n      />\n    </PageLayout>\n  );\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { IPageAction, PageActionType, PageActionSelection } from '../../../../../../framework';\nimport { useOptions } from '../../../../../common/crud/useOptions';\nimport { awxAPI } from '../../../../common/api/awx-utils';\nimport { OptionsResponse, ActionsResponse } from '../../../../interfaces/OptionsResponse';\nimport { InventoryGroup } from '../../../../interfaces/InventoryGroup';\nimport { IAwxView } from '../../../../common/useAwxView';\nimport { useDisassociateGroups } from './useDisassociateGroups';\nimport { useInventoryHostGroupsAddModal } from '../InventoryHostGroupsModal';\nimport { useAssociateGroupsToHost } from './useAssociateGroupsToHost';\nimport { useRunCommandAction } from '../../hooks/useInventoriesGroupsToolbarActions';\nimport { useParams } from 'react-router-dom';\n\nexport function useHostsGroupsToolbarActions(\n  view: IAwxView<InventoryGroup>,\n  inventoryId: string,\n  hostId: string,\n  type: 'standaloneHost' | 'inventoryHost'\n) {\n  const { t } = useTranslation();\n\n  const disassociateGroups = useDisassociateGroups(view.unselectItemsAndRefresh, hostId);\n\n  const groupOptions = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/groups/`).data;\n  const canCreateGroup = Boolean(\n    groupOptions && groupOptions.actions && groupOptions.actions['POST']\n  );\n\n  const openInventoryHostsGroupsAddModal = useInventoryHostGroupsAddModal();\n  const associateGroups = useAssociateGroupsToHost(view.unselectItemsAndRefresh, hostId);\n\n  const params = useParams<{ id: string; inventory_type: string }>();\n  const runCommandAction = useRunCommandAction<InventoryGroup>({\n    ...params,\n    selectedItems: view.selectedItems || [],\n    actionType: 'toolbar',\n  });\n\n  return useMemo<IPageAction<InventoryGroup>[]>(() => {\n    const arr: IPageAction<InventoryGroup>[] = [];\n\n    arr.push({\n      type: PageActionType.Button,\n      selection: PageActionSelection.None,\n      variant: ButtonVariant.primary,\n      isPinned: true,\n      icon: PlusCircleIcon,\n      label: t('Associate group'),\n      onClick: () =>\n        openInventoryHostsGroupsAddModal({\n          onAdd: associateGroups,\n          inventoryId: inventoryId ?? '',\n          hostId: hostId ?? '',\n        }),\n      isDisabled: () =>\n        canCreateGroup\n          ? undefined\n          : t(\n              'You do not have permission to create a host. Please contact your organization administrator if there is an issue with your access.'\n            ),\n    });\n\n    arr.push({ type: PageActionType.Seperator });\n\n    if (type === 'inventoryHost') {\n      arr.push(runCommandAction);\n    }\n\n    arr.push({ type: PageActionType.Seperator });\n\n    arr.push({\n      type: PageActionType.Button,\n      selection: PageActionSelection.Multiple,\n      label: t('Disassociate groups'),\n      isDisabled:\n        view.selectedItems.length === 0 ? t('Select at least one item from the list') : undefined,\n      onClick: disassociateGroups,\n      isPinned: true,\n    });\n\n    return arr;\n  }, [\n    t,\n    view.selectedItems.length,\n    disassociateGroups,\n    openInventoryHostsGroupsAddModal,\n    associateGroups,\n    canCreateGroup,\n    hostId,\n    inventoryId,\n    runCommandAction,\n    type,\n  ]);\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { compareStrings } from '../../../../../../framework';\nimport { useNameColumn } from '../../../../../common/columns';\nimport { getItemKey, postRequest } from '../../../../../common/crud/Data';\nimport { awxAPI } from '../../../../common/api/awx-utils';\nimport { useAwxBulkConfirmation } from '../../../../common/useAwxBulkConfirmation';\nimport { useHostsGroupsColumns } from './useHostsGroupsColumns';\nimport { InventoryGroup } from '../../../../interfaces/InventoryGroup';\n\nexport function useDisassociateGroups(\n  onComplete: (groups: InventoryGroup[]) => void,\n  hostId: string\n) {\n  const { t } = useTranslation();\n  const confirmationColumns = useHostsGroupsColumns({\n    disableLinks: true,\n    disableSort: true,\n  });\n  const deleteActionNameColumn = useNameColumn({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo(() => [deleteActionNameColumn], [deleteActionNameColumn]);\n  const bulkAction = useAwxBulkConfirmation<InventoryGroup>();\n  // const params = useParams<{ id: string; inventory_type: string; host_id: string }>();\n  const disassociateGroups = (groups: InventoryGroup[]) => {\n    bulkAction({\n      title: t('Disassociate group from host?', { count: groups.length }),\n      confirmText: t(\n        'Yes, I confirm that I want to disassociate these {{count}} groups from the inventory.',\n        {\n          count: groups.length,\n        }\n      ),\n      actionButtonText: t('Disassociate groups', { count: groups.length }),\n      items: groups.sort((l, r) => compareStrings(l.name, r.name)),\n      keyFn: getItemKey,\n      isDanger: true,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: async (group: InventoryGroup, signal) => {\n        await postRequest(\n          awxAPI`/hosts/${hostId ?? ''}/groups/`,\n          {\n            disassociate: true,\n            id: group.id,\n          },\n          signal\n        );\n      },\n    });\n  };\n  return disassociateGroups;\n}\n","import { PencilAltIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  usePageNavigate,\n} from '../../../../../../framework';\nimport { cannotEditResource } from '../../../../../common/utils/RBAChelpers';\nimport { AwxRoute } from '../../../../main/AwxRoutes';\nimport { InventoryGroup } from '../../../../interfaces/InventoryGroup';\nimport { useGetItem } from '../../../../../common/crud/useGet';\nimport { Inventory } from '../../../../interfaces/generated-from-swagger/api';\nimport { awxAPI } from '../../../../common/api/awx-utils';\n\nexport function useHostsGroupsActions(inventoryId: string) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n\n  const { data: inventory } = useGetItem<Inventory>(awxAPI`/inventories/`, inventoryId);\n  const inventoryType = inventory?.type;\n\n  return useMemo<IPageAction<InventoryGroup>[]>(\n    () => [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        isPinned: true,\n        icon: PencilAltIcon,\n        label: t('Edit group'),\n        onClick: (group) =>\n          pageNavigate(AwxRoute.InventoryGroupEdit, {\n            params: { inventory_type: inventoryType, id: inventoryId, group_id: group.id },\n          }),\n        isDisabled: (group) => cannotEditResource(group, t),\n      },\n    ],\n    [t, pageNavigate, inventoryId, inventoryType]\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport { PageDetails } from '../../../../../framework';\nimport { PageDetailCodeEditor } from '../../../../../framework/PageDetails/PageDetailCodeEditor';\nimport { useGet } from '../../../../common/crud/useGet';\nimport { awxAPI } from '../../../common/api/awx-utils';\n\nexport function InventoryHostFacts(props: { page: string }) {\n  const { t } = useTranslation();\n  const params = useParams<{ id: string; inventory_type: string; host_id: string }>();\n\n  const { data: facts } = useGet<object>(\n    awxAPI`/hosts/${props.page === 'host' ? params.id ?? '' : params.host_id ?? ''}/ansible_facts/`\n  );\n\n  return (\n    <PageDetails>\n      <PageDetailCodeEditor label={t('Facts')} value={JSON.stringify(facts) || '{}'} />\n    </PageDetails>\n  );\n}\n","import { useDynamicToolbarFilters } from '../../../common/useDynamicFilters';\n\nexport function useInstancesFilters() {\n  const toolbarFilters = useDynamicToolbarFilters({\n    optionsPath: 'instances',\n    preSortedKeys: ['hostname', 'node_type', 'id'],\n    preFilledValueKeys: {\n      hostname: { apiPath: 'instances' },\n      id: { apiPath: 'instances' },\n    },\n  });\n  return toolbarFilters;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { compareStrings } from '../../../../../../framework';\nimport { useNameColumn } from '../../../../../common/columns';\nimport { getItemKey, postRequest } from '../../../../../common/crud/Data';\nimport { awxAPI } from '../../../../common/api/awx-utils';\nimport { useAwxBulkActionDialog } from '../../../../common/useAwxBulkActionDialog';\nimport { Instance } from '../../../../interfaces/Instance';\n\nexport function useAssociateInstanceToIG(\n  onComplete: (instances: Instance[]) => void,\n  instanceGroupId: string\n) {\n  const { t } = useTranslation();\n  const addActionNameColumn = useNameColumn({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo(() => [addActionNameColumn], [addActionNameColumn]);\n  const bulkAction = useAwxBulkActionDialog<Instance>();\n  const associateInstanceToIG = (instances: Instance[]) => {\n    bulkAction({\n      title: t('Associate instance to instance groups', { count: instances.length }),\n      items: instances.sort((l, r) => compareStrings(l.name, r.name)),\n      keyFn: getItemKey,\n      actionColumns,\n      onComplete,\n      actionFn: async (instance: Instance, signal: AbortSignal) => {\n        await postRequest(\n          awxAPI`/instance_groups/${instanceGroupId}/instances/`,\n          {\n            id: instance.id,\n          },\n          signal\n        );\n      },\n      processingText: t('Adding host to group', { count: instances.length }),\n    });\n  };\n  return associateInstanceToIG;\n}\n","import { useEffect, useState } from 'react';\nimport { MultiSelectDialog, usePageDialogs } from '../../../../../../framework';\nimport { useAwxView } from '../../../../common/useAwxView';\nimport { Instance } from '../../../../interfaces/Instance';\nimport { useInstancesColumns } from '../../../instances/hooks/useInstancesColumns';\nimport { useInstancesFilters } from '../../../instances/hooks/useInstancesFilter';\nimport { awxAPI } from '../../../../common/api/awx-utils';\nimport { useTranslation } from 'react-i18next';\n\nexport interface AssociateInstanceModalProps {\n  instanceGroupId: string;\n  onAssociate: (items: Instance[]) => void;\n}\n\nfunction AssociateInstanceModal(props: AssociateInstanceModalProps) {\n  const { t } = useTranslation();\n  const tableColumns = useInstancesColumns();\n  const toolbarFilters = useInstancesFilters();\n  const { instanceGroupId, onAssociate } = props;\n\n  const view = useAwxView<Instance>({\n    url: awxAPI`/instances/`,\n    queryParams: { not__node_type: ['control', 'hop'], not__rampart_groups__id: instanceGroupId },\n    toolbarFilters,\n    tableColumns,\n  });\n\n  return (\n    <MultiSelectDialog\n      title={t('Select instances')}\n      view={view}\n      tableColumns={tableColumns}\n      toolbarFilters={toolbarFilters}\n      onSelect={onAssociate}\n    />\n  );\n}\n\nexport function useAssociateInstanceModal() {\n  const { pushDialog, popDialog } = usePageDialogs();\n  const [props, setProps] = useState<AssociateInstanceModalProps>();\n\n  useEffect(() => {\n    if (props) {\n      pushDialog(<AssociateInstanceModal {...props} />);\n    } else {\n      popDialog();\n    }\n  }, [props, pushDialog, popDialog]);\n\n  return setProps;\n}\n","import { useTranslation } from 'react-i18next';\nimport { IPageAction, ITableColumn, PageTable, usePageNavigate } from '../../../../../framework';\nimport { usePersistentFilters } from '../../../../common/PersistentFilters';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { IAwxView, useAwxView } from '../../../common/useAwxView';\nimport { Instance } from '../../../interfaces/Instance';\nimport { useInstancesFilters } from '../hooks/useInstancesFilter';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { OptionsResponse, ActionsResponse } from '../../../interfaces/OptionsResponse';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useAssociateInstanceToIG } from '../../instance-groups/InstanceGroupPage/hooks/useAssociateInstanceToIG';\nimport { useAssociateInstanceModal } from '../../instance-groups/InstanceGroupPage/hooks/useAssociateInstanceModal';\n\nexport function InstancesList(props: {\n  useToolbarActions: (view: IAwxView<Instance>) => IPageAction<Instance>[];\n  useRowActions: (onComplete: (instances: Instance[]) => void) => IPageAction<Instance>[];\n  tableColumns: ITableColumn<Instance>[];\n  instanceGroupId?: string;\n}) {\n  const toolbarFilters = useInstancesFilters();\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n\n  const { useToolbarActions, useRowActions, tableColumns, instanceGroupId } = props;\n\n  const view = useAwxView<Instance>({\n    url: instanceGroupId\n      ? awxAPI`/instance_groups/${instanceGroupId}/instances/`\n      : awxAPI`/instances/`,\n    toolbarFilters,\n    tableColumns,\n  });\n\n  const rowActions = useRowActions(view.unselectItemsAndRefresh);\n  const toolbarActions = useToolbarActions(view);\n\n  const { data } = useOptions<OptionsResponse<ActionsResponse>>(\n    instanceGroupId ? awxAPI`/instance_groups/${instanceGroupId}/instances/` : awxAPI`/instances/`\n  );\n  const canCreateInstance = Boolean(data && data.actions && data.actions['POST']);\n\n  usePersistentFilters('instances');\n\n  const associateInstance = useAssociateInstanceToIG(\n    view.unselectItemsAndRefresh,\n    instanceGroupId ?? ''\n  );\n  const openAssociateInstanceModal = useAssociateInstanceModal();\n\n  return (\n    <PageTable<Instance>\n      id=\"awx-instances-table\"\n      toolbarFilters={toolbarFilters}\n      toolbarActions={toolbarActions}\n      tableColumns={tableColumns}\n      rowActions={rowActions}\n      errorStateTitle={t('Error loading instances')}\n      emptyStateTitle={\n        canCreateInstance\n          ? t('There are currently no instances added')\n          : t('You do not have permission to create an instance.')\n      }\n      emptyStateDescription={\n        canCreateInstance\n          ? instanceGroupId\n            ? t('Please associate an instance by using the button below.')\n            : t('Please create an instance by using the button below.')\n          : t(\n              'Please contact your organization administrator if there is an issue with your access.'\n            )\n      }\n      emptyStateButtonIcon={<PlusCircleIcon />}\n      emptyStateButtonText={\n        canCreateInstance\n          ? instanceGroupId\n            ? t('Associate instance')\n            : t('Create instance')\n          : undefined\n      }\n      emptyStateButtonClick={\n        canCreateInstance\n          ? instanceGroupId\n            ? () =>\n                openAssociateInstanceModal({\n                  onAssociate: associateInstance,\n                  instanceGroupId: instanceGroupId,\n                })\n            : () => pageNavigate(AwxRoute.AddInstance)\n          : undefined\n      }\n      {...view}\n    />\n  );\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport { HeartbeatIcon, MinusCircleIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { useGet } from '../../../../common/crud/useGet';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxActiveUser } from '../../../common/useAwxActiveUser';\nimport { IAwxView } from '../../../common/useAwxView';\nimport { Instance } from '../../../interfaces/Instance';\nimport { Settings } from '../../../interfaces/Settings';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport {\n  cannotRemoveInstances,\n  cannotRunHealthCheckDueToManagedInstance,\n  cannotRunHealthCheckDueToNodeType,\n  cannotRunHealthCheckDueToPending,\n  cannotRunHealthCheckDueToPermissions,\n} from './useInstanceActions';\nimport { useRemoveInstances } from './useRemoveInstances';\nimport { useRunHealthCheck } from './useRunHealthCheck';\n\nexport function useInstanceToolbarActions(view: IAwxView<Instance>) {\n  const { activeAwxUser } = useAwxActiveUser();\n  const { data } = useGet<Settings>(awxAPI`/settings/system/`);\n  const isK8s = data?.IS_K8S;\n\n  const healthCheckAction = useRunHealthCheckToolbarAction(view);\n  const addInstanceAction = useAddInstanceToolbarAction();\n  const removeInstanceAction = useRemoveInstanceToolbarAction(view);\n\n  return useMemo<IPageAction<Instance>[]>(\n    () =>\n      isK8s && (activeAwxUser?.is_superuser || activeAwxUser?.is_system_auditor)\n        ? [addInstanceAction, removeInstanceAction, healthCheckAction]\n        : [healthCheckAction],\n    [\n      addInstanceAction,\n      removeInstanceAction,\n      healthCheckAction,\n      isK8s,\n      activeAwxUser?.is_superuser,\n      activeAwxUser?.is_system_auditor,\n    ]\n  );\n}\n\nexport function useRunHealthCheckToolbarAction(\n  view: IAwxView<Instance>,\n  isPinned?: boolean,\n  isHidden?: boolean\n) {\n  const { t } = useTranslation();\n  const runHealthCheck = useRunHealthCheck(view.unselectItemsAndRefresh);\n  const { activeAwxUser } = useAwxActiveUser();\n\n  return useMemo<IPageAction<Instance>>(\n    () => ({\n      type: PageActionType.Button,\n      selection: PageActionSelection.Multiple,\n      variant: ButtonVariant.primary,\n      icon: HeartbeatIcon,\n      label: t('Run health check'),\n      isPinned: isPinned ?? false,\n      isHidden: isHidden ?? false,\n      onClick: (instances) => runHealthCheck(instances),\n      isDisabled: (instances) =>\n        instances.some(\n          (instance) =>\n            cannotRunHealthCheckDueToNodeType(instance, t) ||\n            cannotRunHealthCheckDueToPermissions(activeAwxUser, t) ||\n            cannotRunHealthCheckDueToManagedInstance(instance, t) ||\n            cannotRunHealthCheckDueToPending(instance, t)\n        )\n          ? 'Cannot run health checks on one or more of the selected instances'\n          : '',\n    }),\n    [t, runHealthCheck, isPinned, isHidden, activeAwxUser]\n  );\n}\n\nexport function useRemoveInstanceToolbarAction(view: IAwxView<Instance>) {\n  const removeInstances = useRemoveInstances(view.unselectItemsAndRefresh);\n  const { t } = useTranslation();\n  const { data } = useGet<Settings>(awxAPI`/settings/system/`);\n  const isK8s = data?.IS_K8S;\n  const { activeAwxUser } = useAwxActiveUser();\n\n  return useMemo<IPageAction<Instance>>(\n    () => ({\n      type: PageActionType.Button,\n      selection: PageActionSelection.Multiple,\n      icon: MinusCircleIcon,\n      label: t('Remove instance'),\n      onClick: (instance: Instance[]) => removeInstances(instance),\n      isDisabled: (instances: Instance[]) =>\n        cannotRemoveInstances(instances, t, activeAwxUser, isK8s ?? false),\n      isDanger: true,\n    }),\n    [t, removeInstances, isK8s, activeAwxUser]\n  );\n}\n\nexport function useAddInstanceToolbarAction() {\n  const pageNavigate = usePageNavigate();\n  const { activeAwxUser } = useAwxActiveUser();\n  const { data } = useGet<Settings>(awxAPI`/settings/system/`);\n  const isK8s = data?.IS_K8S;\n  const { t } = useTranslation();\n\n  const canAddAndEditInstances =\n    (activeAwxUser?.is_superuser || activeAwxUser?.is_system_auditor) && data?.IS_K8S;\n  return useMemo<IPageAction<Instance>>(\n    () => ({\n      type: PageActionType.Button,\n      isHidden: () => isK8s === false,\n      selection: PageActionSelection.None,\n      variant: ButtonVariant.primary,\n      isPinned: true,\n      icon: PlusCircleIcon,\n      label: t('Create instance'),\n      onClick: () => pageNavigate(AwxRoute.AddInstance),\n      isDisabled: canAddAndEditInstances\n        ? undefined\n        : t(\n            'You do not have permission to add instances. Please contact your organization administrator if there is an issue with your access.'\n          ),\n    }),\n    [t, canAddAndEditInstances, pageNavigate, isK8s]\n  );\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { compareStrings } from '../../../../../framework';\nimport { useNameColumn } from '../../../../common/columns';\nimport { getItemKey, postRequest } from '../../../../common/crud/Data';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { Instance } from '../../../interfaces/Instance';\nimport { useInstancesColumns } from './useInstancesColumns';\n\nexport function useRunHealthCheck(onComplete: (instances: Instance[]) => void) {\n  const { t } = useTranslation();\n  const confirmationColumns = useInstancesColumns({ disableLinks: true, disableSort: true });\n  const deleteActionNameColumn = useNameColumn({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo(() => [deleteActionNameColumn], [deleteActionNameColumn]);\n  const bulkAction = useAwxBulkConfirmation<Instance>();\n  const cannotRunHealthCheckDueToNodeType = (instance: Instance) => {\n    if (instance.node_type !== 'execution')\n      return t(`Health checks can only be run on execution instances.`);\n    return '';\n  };\n  const cannotRunHealthCheckDueToPending = (instance: Instance) => {\n    if (instance.health_check_pending)\n      return t(\n        `Instance has pending health checks. Wait for those to complete before attempting another health check.`\n      );\n    return '';\n  };\n\n  const runHealthCheckOnInstances = (instances: Instance[]) => {\n    const nonHealthCheckableInstances: Instance[] = instances\n      .filter(cannotRunHealthCheckDueToNodeType)\n      .filter(cannotRunHealthCheckDueToPending);\n\n    bulkAction({\n      title: t('Run health checks on these instances', { count: instances.length }),\n      confirmText: t(\n        'Yes, I confirm that I want to run health checks on these {{count}} instances.',\n        {\n          count: instances.length - nonHealthCheckableInstances.length,\n        }\n      ),\n      actionButtonText: t('Run health check', { count: instances.length }),\n      items: instances.sort((l, r) => compareStrings(l.hostname, r.hostname)),\n      alertPrompts: nonHealthCheckableInstances.length\n        ? [\n            ...(nonHealthCheckableInstances.length\n              ? [\n                  t(\n                    'Cannot run health checks on {{count}} of the selected instances.  Health checks can only be run on execution instances.',\n                    {\n                      count: nonHealthCheckableInstances.length,\n                    }\n                  ),\n                ]\n              : []),\n          ]\n        : undefined,\n      isItemNonActionable: (instance: Instance) =>\n        cannotRunHealthCheckDueToNodeType(instance) || cannotRunHealthCheckDueToPending(instance),\n      keyFn: getItemKey,\n      isDanger: false,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: async (instance: Instance) =>\n        postRequest(awxAPI`/instances/${instance.id.toString()}/health_check/`, {}),\n    });\n  };\n  return runHealthCheckOnInstances;\n}\n","import { useMemo } from 'react';\nimport { IPageAction, PageActionSelection, PageActionType } from '../../../../../../framework';\nimport { IAwxView } from '../../../../common/useAwxView';\nimport { Instance } from '../../../../interfaces/Instance';\nimport { useRunHealthCheckToolbarAction } from '../../../instances/hooks/useInstanceToolbarActions';\nimport { ButtonVariant } from '@patternfly/react-core';\nimport { t } from 'i18next';\nimport { useAssociateInstanceToIG } from './useAssociateInstanceToIG';\nimport { useParams } from 'react-router-dom';\nimport { useAssociateInstanceModal } from './useAssociateInstanceModal';\nimport { useDisassociateInstanceFromIG } from './useDisassociateInstanceFromIG';\nimport { useGetItem } from '../../../../../common/crud/useGet';\nimport { awxAPI } from '../../../../common/api/awx-utils';\nimport { InstanceGroup } from '../../../../interfaces/InstanceGroup';\nimport { useOptions } from '../../../../../common/crud/useOptions';\nimport { OptionsResponse, ActionsResponse } from '../../../../interfaces/OptionsResponse';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\n\nexport function useIGInstanceToolbarActions(view: IAwxView<Instance>) {\n  const healthCheckAction = useRunHealthCheckToolbarAction(view, true);\n  const associateAction = useIGInstanceAssociateToolbarAction(view);\n  const disassociateAction = useIGInstanceDisassociateToolbarAction(view);\n\n  return useMemo<IPageAction<Instance>[]>(() => {\n    return [associateAction, disassociateAction, healthCheckAction];\n  }, [associateAction, disassociateAction, healthCheckAction]);\n}\n\nfunction useIGInstanceAssociateToolbarAction(view: IAwxView<Instance>) {\n  const params = useParams<{ id: string }>();\n  const { id } = params;\n  const associateInstanceToIG = useAssociateInstanceToIG(view.unselectItemsAndRefresh, id ?? '');\n  const openAssociateInstanceModal = useAssociateInstanceModal();\n\n  const { data } = useOptions<OptionsResponse<ActionsResponse>>(\n    awxAPI`/instance_groups/${id ?? ''}/instances/`\n  );\n  const canAssociateInstance = Boolean(data && data.actions && data.actions['POST']);\n\n  return useMemo<IPageAction<Instance>>(\n    () => ({\n      type: PageActionType.Button,\n      selection: PageActionSelection.None,\n      variant: ButtonVariant.primary,\n      icon: PlusCircleIcon,\n      label: t('Associate instance'),\n      isPinned: true,\n      isDisabled: () =>\n        canAssociateInstance ? '' : t('You do not have permission to associate an instance.'),\n      onClick: () =>\n        openAssociateInstanceModal({\n          onAssociate: associateInstanceToIG,\n          instanceGroupId: id ?? '',\n        }),\n    }),\n    [associateInstanceToIG, id, openAssociateInstanceModal, canAssociateInstance]\n  );\n}\n\nfunction useIGInstanceDisassociateToolbarAction(view: IAwxView<Instance>) {\n  const disassociateInstance = useDisassociateInstanceFromIG(view.unselectItemsAndRefresh);\n  const params = useParams<{ id: string }>();\n  const { id } = params;\n\n  const { data: instanceGroup } = useGetItem<InstanceGroup>(awxAPI`/instance_groups/`, id);\n\n  return useMemo<IPageAction<Instance>>(\n    () => ({\n      type: PageActionType.Button,\n      selection: PageActionSelection.Multiple,\n      variant: ButtonVariant.primary,\n      label: t('Disassociate instance'),\n      isPinned: true,\n      onClick: disassociateInstance,\n      isDisabled: (instances: Instance[]) =>\n        isDisassociateBtnDisabled(instances, instanceGroup?.name === 'controlplane'),\n    }),\n    [disassociateInstance, instanceGroup?.name]\n  );\n}\n\nfunction isDisassociateBtnDisabled(\n  itemsToDisassociate: Instance[],\n  verifyCannotDisassociate: boolean\n) {\n  if (verifyCannotDisassociate) {\n    const itemsUnableToDisassociate = itemsToDisassociate\n      .filter((item) =>\n        item.type === 'instance'\n          ? item.node_type === 'control' || item.node_type === 'hybrid'\n          : !item.summary_fields?.user_capabilities?.delete\n      )\n      .map((item) => item.name ?? item.hostname)\n      .join(', ');\n\n    if (itemsUnableToDisassociate) {\n      return t(\n        `You do not have permission to disassociate the following: ${itemsUnableToDisassociate}`\n      );\n    }\n  }\n\n  return '';\n}\n","import { useAwxBulkConfirmation } from '../../../../common/useAwxBulkConfirmation';\nimport { useTranslation } from 'react-i18next';\nimport { Instance } from '../../../../interfaces/Instance';\nimport { useNameColumn } from '../../../../../common/columns';\nimport { getItemKey, postRequest } from '../../../../../common/crud/Data';\nimport { awxAPI } from '../../../../common/api/awx-utils';\nimport { compareStrings } from '../../../../../../framework';\nimport { useMemo } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useInstancesColumns } from '../../../instances/hooks/useInstancesColumns';\n\nexport function useDisassociateInstanceFromIG(onComplete: (instances: Instance[]) => void) {\n  const { t } = useTranslation();\n  const bulkConfirmation = useAwxBulkConfirmation<Instance>();\n  const confirmationColumns = useInstancesColumns({ disableLinks: true, disableSort: true });\n  const deleteActionNameColumn = useNameColumn({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo(() => [deleteActionNameColumn], [deleteActionNameColumn]);\n  const params = useParams<{ id: string }>();\n\n  const disassociateInstance = (instances: Instance[]) => {\n    bulkConfirmation({\n      title: t('Disassociate instance from instance group'),\n      confirmText: t('Yes, I confirm that I want to disassociate these {{count}} instances.', {\n        count: instances.length,\n      }),\n      actionButtonText: t('Disassociate instances', { count: instances.length }),\n      items: instances.sort((l, r) => compareStrings(l.name, r.name)),\n      keyFn: getItemKey,\n      isDanger: true,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: (instance: Instance, signal) =>\n        postRequest(\n          awxAPI`/instance_groups/${String(params.id)}/instances/`,\n          { id: instance.id, disassociate: true },\n          signal\n        ),\n    });\n  };\n\n  return disassociateInstance;\n}\n","import { useMemo } from 'react';\nimport { IPageAction } from '../../../../../../framework';\nimport { Instance } from '../../../../interfaces/Instance';\nimport { useRunHealthCheckRowAction } from '../../../instances/hooks/useInstanceRowActions';\nimport { useToggleInstanceRowAction } from '../../../instances/hooks/useInstanceRowActions';\n\nexport function useIGInstanceRowActions(onComplete: (instances: Instance[]) => void) {\n  const toggleInstanceRowAction: IPageAction<Instance> = useToggleInstanceRowAction(onComplete);\n  const healthCheckRowAction: IPageAction<Instance> = useRunHealthCheckRowAction(onComplete, false);\n\n  return useMemo<IPageAction<Instance>[]>(\n    () => [toggleInstanceRowAction, healthCheckRowAction],\n    [toggleInstanceRowAction, healthCheckRowAction]\n  );\n}\n","import { useParams } from 'react-router-dom';\nimport { InstancesList } from '../../instances/components/InstancesList';\nimport { useIGInstanceToolbarActions } from './hooks/useIGInstanceToolbarActions';\nimport { useIGInstanceRowActions } from './hooks/useIGInstanceRowActions';\nimport { useInstancesColumns } from '../../instances/hooks/useInstancesColumns';\nimport { useCallback } from 'react';\nimport { Instance } from '../../../interfaces/Instance';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { usePageNavigate } from '../../../../../framework';\n\nexport function InstanceGroupInstances() {\n  const pageNavigate = usePageNavigate();\n  const params = useParams<{ id?: string }>();\n  const { id } = params;\n\n  const onNameClick = useCallback(\n    (instance: Instance) =>\n      pageNavigate(AwxRoute.InstanceGroupInstanceDetails, {\n        params: { id: id, instance_id: instance.id },\n      }),\n    [pageNavigate, id]\n  );\n\n  const tableColumns = useInstancesColumns(undefined, onNameClick);\n\n  return (\n    <InstancesList\n      useToolbarActions={useIGInstanceToolbarActions}\n      useRowActions={useIGInstanceRowActions}\n      tableColumns={tableColumns}\n      instanceGroupId={id}\n    />\n  );\n}\n","import { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageActions,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n} from '../../../../../../framework';\nimport { PageRoutedTabs } from '../../../../../common/PageRoutedTabs';\nimport { useGetItem } from '../../../../../common/crud/useGet';\nimport { AwxError } from '../../../../common/AwxError';\nimport { awxAPI } from '../../../../common/api/awx-utils';\nimport { Instance } from '../../../../interfaces/Instance';\nimport { AwxRoute } from '../../../../main/AwxRoutes';\nimport { useIGInstanceRowActions } from '../hooks/useIGInstanceRowActions';\n\nexport function InstanceGroupInstancesPage() {\n  const { t } = useTranslation();\n  const params = useParams<{ id: string; instance_id: string }>();\n  const {\n    error,\n    data: instance,\n    refresh,\n  } = useGetItem<Instance>(awxAPI`/instances`, params.instance_id);\n\n  const { data: instanceGroup } = useGetItem<Instance>(awxAPI`/instance_groups`, params.id);\n\n  const itemActions = useIGInstanceRowActions(refresh);\n  const getPageUrl = useGetPageUrl();\n\n  if (error) return <AwxError error={error} handleRefresh={refresh} />;\n  if (!instance) return <LoadingPage breadcrumbs tabs />;\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={instance?.hostname}\n        breadcrumbs={[\n          {\n            label: t('Instance groups'),\n            to: getPageUrl(AwxRoute.InstanceGroups),\n          },\n          {\n            label: instanceGroup?.name,\n          },\n          {\n            label: t('Instances'),\n            to: getPageUrl(AwxRoute.InstanceGroupInstances, { params: params }),\n          },\n          {\n            label: t(instance?.hostname),\n          },\n        ]}\n        headerActions={\n          <PageActions\n            actions={itemActions}\n            position={DropdownPosition.right}\n            selectedItem={instance}\n          />\n        }\n      />\n      <PageRoutedTabs\n        backTab={{\n          label: t('Back to Instances'),\n          page: AwxRoute.InstanceGroupInstances,\n          persistentFilterKey: 'instances',\n        }}\n        tabs={[{ label: t('Details'), page: AwxRoute.InstanceGroupInstanceDetails }]}\n        params={{ id: params.id, instance_id: instance.id }}\n      />\n    </PageLayout>\n  );\n}\n","import { useParams } from 'react-router-dom';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { TeamAccess } from '../../../../common/access/components/TeamAccess';\n\nexport function InstanceGroupTeamAccess() {\n  const params = useParams<{ id: string }>();\n  return (\n    <TeamAccess\n      service=\"awx\"\n      id={params.id || ''}\n      type={'instancegroup'}\n      addRolesRoute={AwxRoute.InstanceGroupAddTeams}\n    />\n  );\n}\n","import { useParams } from 'react-router-dom';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { UserAccess } from '../../../../common/access/components/UserAccess';\n\nexport function InstanceGroupUserAccess() {\n  const params = useParams<{ id: string }>();\n  return (\n    <UserAccess\n      service=\"awx\"\n      id={params.id || ''}\n      type={'instancegroup'}\n      addRolesRoute={AwxRoute.InstanceGroupAddUsers}\n    />\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport {\n  LoadingPage,\n  PageFormSubmitHandler,\n  PageFormTextInput,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { AwxPageForm } from '../../common/AwxPageForm';\nimport { InstanceGroup } from '../../interfaces/InstanceGroup';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { usePostRequest } from '../../../common/crud/usePostRequest';\nimport { useGetItem } from '../../../common/crud/useGet';\nimport { useParams } from 'react-router-dom';\nimport { AwxError } from '../../common/AwxError';\nimport { usePatchRequest } from '../../../common/crud/usePatchRequest';\ntype InstanceGroupPayload = Partial<\n  Pick<\n    InstanceGroup,\n    | 'name'\n    | 'max_forks'\n    | 'max_concurrent_jobs'\n    | 'policy_instance_minimum'\n    | 'policy_instance_percentage'\n  >\n>;\n\nexport function CreateInstanceGroup() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const pageNavigate = usePageNavigate();\n  const postRequest = usePostRequest<InstanceGroupPayload, InstanceGroup>();\n\n  const onSubmit: PageFormSubmitHandler<InstanceGroupPayload> = async (data) => {\n    const instanceGroup = await postRequest(awxAPI`/instance_groups/`, data);\n    pageNavigate(AwxRoute.InstanceGroupDetails, {\n      params: {\n        id: instanceGroup.id,\n      },\n    });\n  };\n  const onCancel = () => {\n    pageNavigate(AwxRoute.InstanceGroups);\n  };\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Create instance group')}\n        breadcrumbs={[\n          { label: t('Instance Groups'), to: getPageUrl(AwxRoute.InstanceGroups) },\n          { label: t('Create instance group') },\n        ]}\n      />\n      <AwxPageForm\n        submitText={t('Create instance group')}\n        onSubmit={onSubmit}\n        cancelText={t('Cancel')}\n        onCancel={onCancel}\n        defaultValue={{\n          name: '',\n          policy_instance_minimum: 0,\n          policy_instance_percentage: 0,\n          max_concurrent_jobs: 0,\n          max_forks: 0,\n        }}\n      >\n        <InstanceGroupInputs />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n\nexport function EditInstanceGroup() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const pageNavigate = usePageNavigate();\n  const params = useParams<{ id: string }>();\n  const patchRequest = usePatchRequest<InstanceGroupPayload, InstanceGroup>();\n  const {\n    data: instanceGroup,\n    isLoading,\n    error,\n  } = useGetItem<InstanceGroup>(awxAPI`/instance_groups/`, params?.id?.toString());\n\n  const onCancel = () => {\n    pageNavigate(AwxRoute.InstanceGroups);\n  };\n  if (error) {\n    return <AwxError error={error} />;\n  }\n  if (isLoading || !instanceGroup) {\n    return <LoadingPage />;\n  }\n  const onSubmit: PageFormSubmitHandler<InstanceGroupPayload> = async (data) => {\n    const updateInstanceGroup = await patchRequest(\n      awxAPI`/instance_groups/${params?.id as string}/`,\n      data\n    );\n    pageNavigate(AwxRoute.InstanceGroupDetails, {\n      params: {\n        id: updateInstanceGroup.id,\n      },\n    });\n  };\n  return (\n    <PageLayout>\n      <PageHeader\n        title={\n          instanceGroup?.name\n            ? t('Edit {{instancegroupName}}', { instancegroupName: instanceGroup?.name })\n            : t('Instance Group')\n        }\n        breadcrumbs={[\n          { label: t('Instance Groups'), to: getPageUrl(AwxRoute.InstanceGroups) },\n          {\n            label: instanceGroup?.name\n              ? t('Edit {{instancegroupName}}', { instancegroupName: instanceGroup?.name })\n              : t('Instance Group'),\n          },\n        ]}\n      />\n      <AwxPageForm\n        submitText={t('Save instance group')}\n        onSubmit={onSubmit}\n        cancelText={t('Cancel')}\n        onCancel={onCancel}\n        defaultValue={{\n          name: instanceGroup.name,\n          policy_instance_minimum: instanceGroup.policy_instance_minimum || 0,\n          policy_instance_percentage: instanceGroup.policy_instance_percentage || 0,\n          max_concurrent_jobs: instanceGroup.max_concurrent_jobs || 0,\n          max_forks: instanceGroup.max_forks || 0,\n        }}\n      >\n        <InstanceGroupInputs />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n\nexport function InstanceGroupInputs() {\n  const { t } = useTranslation();\n  return (\n    <>\n      <PageFormTextInput<InstanceGroup>\n        name=\"name\"\n        label={t('Name')}\n        placeholder={t('Enter a name')}\n        isRequired\n        maxLength={150}\n      />\n      <PageFormTextInput<InstanceGroup>\n        name=\"policy_instance_minimum\"\n        type=\"number\"\n        labelHelp={t(\n          'Minimum number of instances that will be automatically assigned to this group when new instances come online.'\n        )}\n        min={0}\n        label={t('Policy instance minimum')}\n      />\n      <PageFormTextInput<InstanceGroup>\n        name=\"policy_instance_percentage\"\n        labelHelp={t(\n          'Minimum percentage of all instances that will be automatically assigned to this group when new instances come online.'\n        )}\n        type=\"number\"\n        min={0}\n        label={t('Policy instance percentage')}\n      />\n      <PageFormTextInput<InstanceGroup>\n        name=\"max_concurrent_jobs\"\n        labelHelp={t(\n          'Maximum number of jobs to run concurrently on this group. Zero means no limit will be enforced.'\n        )}\n        type=\"number\"\n        min={0}\n        label={t('Max concurrent jobs')}\n      />\n      <PageFormTextInput<InstanceGroup>\n        labelHelp={t(\n          'Maximum number of forks to allow across all jobs running concurrently on this group. Zero means no limit will be enforced.'\n        )}\n        name=\"max_forks\"\n        min={0}\n        type=\"number\"\n        label={t('Max forks')}\n      />\n    </>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageHeader,\n  PageLayout,\n  PageWizard,\n  PageWizardStep,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { AwxSelectTeamsStep } from '../../access/common/AwxRolesWizardSteps/AwxSelectTeamsStep';\nimport { Team } from '../../interfaces/Team';\nimport { AwxSelectRolesStep } from '../../access/common/AwxRolesWizardSteps/AwxSelectRolesStep';\nimport { useGet } from '../../../common/crud/useGet';\nimport { InstanceGroup } from '../../interfaces/InstanceGroup';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { postRequest } from '../../../common/crud/Data';\nimport { RoleAssignmentsReviewStep } from '../../../common/access/RolesWizard/steps/RoleAssignmentsReviewStep';\nimport { Role } from '../../interfaces/Role';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { useAwxBulkActionDialog } from '../../common/useAwxBulkActionDialog';\n\ninterface WizardFormValues {\n  teams: Team[];\n  awxRoles: Role[];\n}\n\ninterface TeamRolePair {\n  team: Team;\n  role: Role;\n}\n\nexport function InstanceGroupAddTeams() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const params = useParams<{ id: string }>();\n  const pageNavigate = usePageNavigate();\n  const { data: instanceGroup, isLoading } = useGet<InstanceGroup>(\n    awxAPI`/instance_groups/${params.id ?? ''}/`\n  );\n  const teamRoleProgressDialog = useAwxBulkActionDialog<TeamRolePair>();\n\n  if (isLoading || !instanceGroup) return <LoadingPage />;\n\n  const steps: PageWizardStep[] = [\n    {\n      id: 'teams',\n      label: t('Select team(s)'),\n      inputs: (\n        <AwxSelectTeamsStep\n          descriptionForTeamsSelection={t(\n            'Select the team(s) that you want to give access to {{instanceGroupName}}.',\n            {\n              instanceGroupName: instanceGroup?.name,\n            }\n          )}\n        />\n      ),\n      validate: (formData, _) => {\n        const { teams } = formData as WizardFormValues;\n        if (!teams?.length) {\n          throw new Error(t('Select at least one team.'));\n        }\n      },\n    },\n    {\n      id: 'roles',\n      label: t('Select roles to apply'),\n      inputs: (\n        <AwxSelectRolesStep\n          contentType=\"instancegroup\"\n          fieldNameForPreviousStep=\"teams\"\n          descriptionForRoleSelection={t('Choose roles to apply to {{instanceGroupName}}.', {\n            instanceGroupName: instanceGroup?.name,\n          })}\n        />\n      ),\n      validate: (formData, _) => {\n        const { awxRoles } = formData as WizardFormValues;\n        if (!awxRoles?.length) {\n          throw new Error(t('Select at least one role.'));\n        }\n      },\n    },\n    {\n      id: 'review',\n      label: t('Review'),\n      inputs: <RoleAssignmentsReviewStep />,\n    },\n  ];\n\n  const onSubmit = async (data: WizardFormValues) => {\n    const { teams, awxRoles } = data;\n    const items: TeamRolePair[] = [];\n    for (const team of teams) {\n      for (const role of awxRoles) {\n        items.push({ team, role });\n      }\n    }\n    return new Promise<void>((resolve) => {\n      teamRoleProgressDialog({\n        title: t('Add roles'),\n        keyFn: ({ team, role }) => `${team.id}_${role.id}`,\n        items,\n        actionColumns: [\n          { header: t('Team'), cell: ({ team }) => team.name },\n          { header: t('Role'), cell: ({ role }) => role.name },\n        ],\n        actionFn: ({ team, role }) =>\n          postRequest(awxAPI`/role_team_assignments/`, {\n            team: team.id,\n            role_definition: role.id,\n            content_type: 'instancegroup',\n            object_id: instanceGroup.id,\n          }),\n        onComplete: () => {\n          resolve();\n        },\n        onClose: () => {\n          pageNavigate(AwxRoute.InstanceGroupTeamAccess, {\n            params: { id: instanceGroup.id.toString() },\n          });\n        },\n      });\n    });\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Add roles')}\n        breadcrumbs={[\n          { label: t('Instance groups'), to: getPageUrl(AwxRoute.InstanceGroups) },\n          {\n            label: instanceGroup?.name,\n            to: getPageUrl(AwxRoute.InstanceGroupDetails, {\n              params: {\n                id: instanceGroup?.id,\n              },\n            }),\n          },\n          {\n            label: t('Team access'),\n            to: getPageUrl(AwxRoute.InstanceGroupTeamAccess, { params: { id: instanceGroup?.id } }),\n          },\n          { label: t('Add roles') },\n        ]}\n      />\n      <PageWizard<WizardFormValues>\n        steps={steps}\n        onSubmit={onSubmit}\n        disableGrid\n        onCancel={() => {\n          pageNavigate(AwxRoute.InstanceGroupTeamAccess, { params: { id: instanceGroup?.id } });\n        }}\n      />\n    </PageLayout>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageHeader,\n  PageLayout,\n  PageWizard,\n  PageWizardStep,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { AwxSelectUsersStep } from '../../access/common/AwxRolesWizardSteps/AwxSelectUsersStep';\nimport { AwxSelectRolesStep } from '../../access/common/AwxRolesWizardSteps/AwxSelectRolesStep';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { useGet } from '../../../common/crud/useGet';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { postRequest } from '../../../common/crud/Data';\nimport { InstanceGroup } from '../../interfaces/InstanceGroup';\nimport { AwxUser } from '../../interfaces/User';\nimport { Role } from '../../interfaces/Role';\nimport { RoleAssignmentsReviewStep } from '../../../common/access/RolesWizard/steps/RoleAssignmentsReviewStep';\nimport { useAwxBulkActionDialog } from '../../common/useAwxBulkActionDialog';\n\ninterface WizardFormValues {\n  users: AwxUser[];\n  awxRoles: Role[];\n}\n\ninterface UserRolePair {\n  user: AwxUser;\n  role: Role;\n}\n\nexport function InstanceGroupAddUsers() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const params = useParams<{ id: string }>();\n\n  const { data: instanceGroup, isLoading } = useGet<InstanceGroup>(\n    awxAPI`/instance_groups/${params.id ?? ''}/`\n  );\n  const userProgressDialog = useAwxBulkActionDialog<UserRolePair>();\n  const pageNavigate = usePageNavigate();\n\n  if (isLoading || !instanceGroup) return <LoadingPage />;\n\n  const steps: PageWizardStep[] = [\n    {\n      id: 'users',\n      label: t('Select user(s)'),\n      inputs: (\n        <AwxSelectUsersStep\n          descriptionForUsersSelection={t(\n            'Select the user(s) that you want to give access to {{instanceGroupName}}.',\n            {\n              instanceGroupName: instanceGroup?.name,\n            }\n          )}\n        />\n      ),\n      validate: (formData, _) => {\n        const { users } = formData as WizardFormValues;\n        if (!users?.length) {\n          throw new Error(t('Select at least one user.'));\n        }\n      },\n    },\n    {\n      id: 'roles',\n      label: t('Select roles to apply'),\n      inputs: (\n        <AwxSelectRolesStep\n          contentType=\"instancegroup\"\n          fieldNameForPreviousStep=\"users\"\n          descriptionForRoleSelection={t('Choose roles to apply to {{instanceGroupName}}.', {\n            instanceGroupName: instanceGroup?.name,\n          })}\n        />\n      ),\n      validate: (formData, _) => {\n        const { awxRoles } = formData as WizardFormValues;\n        if (!awxRoles?.length) {\n          throw new Error(t('Select at least one role.'));\n        }\n      },\n    },\n    {\n      id: 'review',\n      label: t('Review'),\n      inputs: <RoleAssignmentsReviewStep />,\n    },\n  ];\n\n  const onSubmit = (data: WizardFormValues) => {\n    const { users, awxRoles } = data;\n    const items: UserRolePair[] = [];\n    for (const user of users) {\n      for (const role of awxRoles) {\n        items.push({ user, role });\n      }\n    }\n    return new Promise<void>((resolve) => {\n      userProgressDialog({\n        title: t('Add roles'),\n        keyFn: ({ user, role }) => `${user.id}_${role.id}`,\n        items,\n        actionColumns: [\n          { header: t('User'), cell: ({ user }) => user.username },\n          { header: t('Role'), cell: ({ role }) => role.name },\n        ],\n        actionFn: ({ user, role }) =>\n          postRequest(awxAPI`/role_user_assignments/`, {\n            user: user.id,\n            role_definition: role.id,\n            content_type: 'instancegroup',\n            object_id: instanceGroup.id,\n          }),\n        onComplete: () => {\n          resolve();\n        },\n        onClose: () => {\n          pageNavigate(AwxRoute.InstanceGroupUserAccess, {\n            params: { id: instanceGroup.id.toString() },\n          });\n        },\n      });\n    });\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Add roles')}\n        breadcrumbs={[\n          { label: t('Instance groups'), to: getPageUrl(AwxRoute.InstanceGroups) },\n          {\n            label: instanceGroup?.name,\n            to: getPageUrl(AwxRoute.InstanceGroupDetails, {\n              params: {\n                id: instanceGroup?.id,\n              },\n            }),\n          },\n          {\n            label: t('User access'),\n            to: getPageUrl(AwxRoute.InstanceGroupUserAccess, {\n              params: {\n                id: instanceGroup?.id,\n              },\n            }),\n          },\n          { label: t('Add roles') },\n        ]}\n      />\n      <PageWizard<WizardFormValues>\n        steps={steps}\n        onSubmit={onSubmit}\n        disableGrid\n        onCancel={() => {\n          pageNavigate(AwxRoute.InstanceGroupUserAccess, { params: { id: instanceGroup?.id } });\n        }}\n      />\n    </PageLayout>\n  );\n}\n","import { Label, LabelGroup } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useParams } from 'react-router-dom';\nimport {\n  DateTimeCell,\n  LoadingPage,\n  PageDetail,\n  PageDetails,\n  useGetPageUrl,\n} from '../../../../../framework';\nimport { PageDetailCodeEditor } from '../../../../../framework/PageDetails/PageDetailCodeEditor';\nimport { Unavailable } from '../../../../../framework/components/Unavailable';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { AwxError } from '../../../common/AwxError';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { InstanceGroup } from '../../../interfaces/InstanceGroup';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\nexport function InstanceGroupDetails() {\n  const params = useParams<{ id: string }>();\n  const {\n    data: instanceGroup,\n    isLoading,\n    error,\n    refresh,\n  } = useGetItem<InstanceGroup>(awxAPI`/instance_groups/`, params.id);\n\n  if (error) return <AwxError error={error} handleRefresh={refresh} />;\n  if (isLoading && !instanceGroup) return <LoadingPage />;\n\n  return instanceGroup ? <InstanceGroupDetailInner instanceGroup={instanceGroup} /> : null;\n}\n\nexport function InstanceGroupDetailInner(props: { instanceGroup: InstanceGroup }) {\n  const { t } = useTranslation();\n  const { instanceGroup } = props;\n  const getPageUrl = useGetPageUrl();\n\n  return (\n    <PageDetails>\n      <PageDetail label={t('Name')}>{instanceGroup.name}</PageDetail>\n      <PageDetail label={t('Type')}>\n        {instanceGroup.is_container_group ? t('Container Group') : t('Instance Group')}\n      </PageDetail>\n      <PageDetail\n        label={t('Policy instance minimum')}\n        helpText={t(\n          'Minimum number of instances that will be automatically assigned to this group when new instances come online.'\n        )}\n        isEmpty={instanceGroup.is_container_group}\n      >\n        {instanceGroup.policy_instance_minimum}\n      </PageDetail>\n      <PageDetail\n        label={t('Policy instance percentage')}\n        helpText={t(\n          'Minimum percentage of all instances that will be automatically assigned to this group when new instances come online.'\n        )}\n        isEmpty={instanceGroup.is_container_group}\n      >\n        {instanceGroup.policy_instance_percentage}%\n      </PageDetail>\n      <PageDetail\n        label={t('Max concurrent jobs')}\n        helpText={t(\n          'Maximum number of jobs to run concurrently on this group. Zero means no limit will be enforced.'\n        )}\n      >\n        {instanceGroup.max_concurrent_jobs}\n      </PageDetail>\n      <PageDetail\n        label={t('Max forks')}\n        helpText={t(\n          'Maximum number of forks to allow across all jobs running concurrently on this group. Zero means no limit will be enforced.'\n        )}\n      >\n        {instanceGroup.max_forks}\n      </PageDetail>\n      <PageDetail label={t('Used capacity')} isEmpty={instanceGroup.is_container_group}>\n        {instanceGroup.capacity ? (\n          `${Math.round(100 - instanceGroup.percent_capacity_remaining)}%`\n        ) : (\n          <Unavailable>{t('Unavailable')}</Unavailable>\n        )}\n      </PageDetail>\n      <PageDetail\n        label={t('Credential')}\n        isEmpty={!instanceGroup.is_container_group || !instanceGroup.summary_fields.credential}\n      >\n        <LabelGroup>\n          <Label color=\"blue\">\n            <Link\n              to={getPageUrl(AwxRoute.CredentialDetails, {\n                params: {\n                  id: instanceGroup?.summary_fields?.credential?.id,\n                },\n              })}\n            >\n              {instanceGroup?.summary_fields?.credential?.name}\n            </Link>\n          </Label>\n        </LabelGroup>\n      </PageDetail>\n      <PageDetail label={t('Created')}>\n        <DateTimeCell value={instanceGroup.created} />\n      </PageDetail>\n      <PageDetail label={t('Last modified')}>\n        <DateTimeCell value={instanceGroup.modified} />\n      </PageDetail>\n      <PageDetailCodeEditor\n        fullWidth\n        isEmpty={!instanceGroup.pod_spec_override.length}\n        helpText={t('Custom Kubernetes or OpenShift Pod specification.')}\n        label={t('Pod spec override')}\n        showCopyToClipboard\n        value={instanceGroup.pod_spec_override}\n      />\n    </PageDetails>\n  );\n}\n","import { useParams } from 'react-router-dom';\nimport { JobsList } from '../../../views/jobs/JobsList';\nimport { useInstanceGroupJobsColumns } from './hooks/useInstanceGroupJobsColumns';\n\nexport function InstanceGroupJobs() {\n  const jobsColumns = useInstanceGroupJobsColumns();\n  const { id = '' } = useParams<{ id: string }>();\n  const queryParams = { instance_group: id, not__launch_type: 'sync' };\n  return <JobsList queryParams={queryParams} columns={jobsColumns} />;\n}\n","import { useMemo, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { usePageNavigate, ITableColumn, DateTimeCell } from '../../../../../../framework';\nimport { StatusCell } from '../../../../../common/Status';\nimport {\n  useInventoryNameColumn,\n  useNameColumn,\n  useProjectNameColumn,\n} from '../../../../../common/columns';\nimport {\n  useJobExecutionEnvColumn,\n  useJobLaunchedByColumn,\n  useJobScheduleColumn,\n  useJobSliceColumn,\n  useJobTemplateColumn,\n  useJobTypeColumn,\n  useSourceWorkflowColumn,\n} from '../../../../common/JobColumns';\nimport { UnifiedJob } from '../../../../interfaces/UnifiedJob';\nimport { AwxRoute } from '../../../../main/AwxRoutes';\n\nexport function useInstanceGroupJobsColumns(options?: {\n  disableSort?: boolean;\n  disableLinks?: boolean;\n}) {\n  const pageNavigate = usePageNavigate();\n  const { t } = useTranslation();\n\n  const IDColumns = useMemo<ITableColumn<UnifiedJob>>(\n    () => ({\n      header: t('ID'),\n      cell: (job: UnifiedJob) => job.id,\n      sort: 'id',\n      card: 'hidden',\n      list: 'hidden',\n      dashboard: 'hidden',\n      minWidth: 0,\n    }),\n    [t]\n  );\n\n  const jobPaths = useMemo<{ [key: string]: string }>(\n    () => ({\n      project_update: 'project',\n      inventory_update: 'inventory',\n      job: 'playbook',\n      ad_hoc_command: 'command',\n      system_job: 'management',\n      workflow_job: 'workflow',\n    }),\n    []\n  );\n\n  const nameClick = useCallback(\n    (job: UnifiedJob) =>\n      pageNavigate(AwxRoute.JobDetails, {\n        params: {\n          id: job.id,\n          job_type: jobPaths[job.type],\n        },\n      }),\n    [jobPaths, pageNavigate]\n  );\n\n  const nameColumn = useNameColumn({\n    ...options,\n    onClick: nameClick,\n    defaultSort: false,\n  });\n\n  const statusColumn = useMemo<ITableColumn<UnifiedJob>>(\n    () => ({\n      header: t('Status'),\n      cell: (job: UnifiedJob) => {\n        return <StatusCell status={job.status} />;\n      },\n      sort: 'status',\n    }),\n    [t]\n  );\n\n  const startTimeColumn = useMemo<ITableColumn<UnifiedJob>>(\n    () => ({\n      header: t('Started'),\n      cell: (job: UnifiedJob) => {\n        return <DateTimeCell value={job.started} />;\n      },\n      sort: 'started',\n    }),\n    [t]\n  );\n\n  const finishTimeColumn = useMemo<ITableColumn<UnifiedJob>>(\n    () => ({\n      header: t('Finished'),\n      cell: (job: UnifiedJob) => {\n        return <DateTimeCell value={job.finished} />;\n      },\n      sort: 'finished',\n      defaultSortDirection: 'desc',\n      defaultSort: true,\n    }),\n    [t]\n  );\n\n  const typeColumn = useJobTypeColumn();\n  const launchedByColumn = useJobLaunchedByColumn();\n  const inventoryColumn = useInventoryNameColumn(AwxRoute.InventoryDetails);\n  const jobSliceColumn = useJobSliceColumn();\n  const jobTemplateColumn = useJobTemplateColumn();\n  const sourceWorkflowColumn = useSourceWorkflowColumn();\n  const projectNameColumn = useProjectNameColumn(AwxRoute.ProjectDetails);\n  const executionEnvColumn = useJobExecutionEnvColumn();\n  const scheduleColumn = useJobScheduleColumn();\n\n  const tableColumns = useMemo<ITableColumn<UnifiedJob>[]>(() => {\n    const displayColumns = [\n      IDColumns,\n      nameColumn,\n      statusColumn,\n      typeColumn,\n      startTimeColumn,\n      finishTimeColumn,\n      launchedByColumn,\n      scheduleColumn,\n      jobTemplateColumn,\n      sourceWorkflowColumn,\n      inventoryColumn,\n      projectNameColumn,\n      executionEnvColumn,\n      jobSliceColumn,\n    ];\n    return displayColumns;\n  }, [\n    IDColumns,\n    nameColumn,\n    statusColumn,\n    typeColumn,\n    startTimeColumn,\n    finishTimeColumn,\n    launchedByColumn,\n    scheduleColumn,\n    jobTemplateColumn,\n    sourceWorkflowColumn,\n    inventoryColumn,\n    projectNameColumn,\n    executionEnvColumn,\n    jobSliceColumn,\n  ]);\n  return tableColumns;\n}\n","import { useTranslation } from 'react-i18next';\nimport {\n  LoadingPage,\n  PageFormCheckbox,\n  PageFormDataEditor,\n  PageFormSubmitHandler,\n  PageFormTextInput,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { AwxPageForm } from '../../common/AwxPageForm';\nimport { InstanceGroup as ContainerGroup } from '../../interfaces/InstanceGroup';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { usePostRequest } from '../../../common/crud/usePostRequest';\nimport { useGetItem } from '../../../common/crud/useGet';\nimport { useParams } from 'react-router-dom';\nimport { AwxError } from '../../common/AwxError';\nimport { usePatchRequest } from '../../../common/crud/usePatchRequest';\nimport { PageFormCredentialSelect } from '../../access/credentials/components/PageFormCredentialSelect';\nimport { useWatch } from 'react-hook-form';\nimport { PageFormSection } from '../../../../framework/PageForm/Utils/PageFormSection';\nimport { PageFormHidden } from '../../../../framework/PageForm/Utils/PageFormHidden';\nimport { useOptions } from '../../../common/crud/useOptions';\nimport { ActionsResponse, OptionsResponse } from '../../interfaces/OptionsResponse';\nimport { jsonToYaml } from '../../../../framework/utils/codeEditorUtils';\n\ntype ContainerGroupForm = {\n  credential: number | null;\n  name: string;\n  max_forks: number;\n  max_concurrent_jobs: number;\n  override: boolean;\n  pod_spec_override: string;\n};\ntype ContainerFormPayload = Omit<ContainerGroupForm, 'override'> & {\n  is_container_group: true;\n};\nexport function CreateContainerGroup() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const pageNavigate = usePageNavigate();\n  const postRequest = usePostRequest<ContainerFormPayload, ContainerGroup>();\n  const { data, error, isLoading } = useOptions<OptionsResponse<ActionsResponse>>(\n    awxAPI`/instance_groups/`\n  );\n\n  const onCancel = () => {\n    pageNavigate(AwxRoute.InstanceGroups);\n  };\n  const onSubmit: PageFormSubmitHandler<ContainerGroupForm> = async (data) => {\n    const { override, pod_spec_override, ...rest } = data;\n    const podSpecForSubmit = override ? pod_spec_override : '';\n    const containerGroup = await postRequest(awxAPI`/instance_groups/`, {\n      ...rest,\n      pod_spec_override: podSpecForSubmit,\n      is_container_group: true,\n    });\n    pageNavigate(AwxRoute.InstanceGroupDetails, {\n      params: { id: containerGroup.id },\n    });\n  };\n  if (isLoading) {\n    return <LoadingPage />;\n  }\n  if (error) {\n    return <AwxError error={error} />;\n  }\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Create container group')}\n        breadcrumbs={[\n          { label: t('Instance Groups'), to: getPageUrl(AwxRoute.InstanceGroups) },\n          { label: t('Create container group') },\n        ]}\n      />\n      <AwxPageForm\n        submitText={t('Create container group')}\n        onSubmit={onSubmit}\n        cancelText={t('Cancel')}\n        onCancel={onCancel}\n        defaultValue={{\n          name: '',\n          override: false,\n          credential: null,\n          pod_spec_override: jsonToYaml(\n            JSON.stringify(data?.actions?.POST?.pod_spec_override.default)\n          ),\n          max_concurrent_jobs: 0,\n          max_forks: 0,\n        }}\n      >\n        <ContainerGroupInputs />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n\nexport function EditContainerGroup() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const pageNavigate = usePageNavigate();\n  const params = useParams<{ id: string }>();\n  const patchRequest = usePatchRequest<ContainerFormPayload, ContainerGroup>();\n  const {\n    data: containerGroup,\n    isLoading,\n    error: igError,\n  } = useGetItem<ContainerGroup>(awxAPI`/instance_groups/`, params?.id?.toString());\n\n  const {\n    data,\n    error: optionsError,\n    isLoading: optionsLoading,\n  } = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/instance_groups/`);\n  const onCancel = () => {\n    pageNavigate(AwxRoute.InstanceGroups);\n  };\n  const error = igError || optionsError;\n  if (error) {\n    return <AwxError error={error} />;\n  }\n  if (isLoading || !containerGroup || optionsLoading) {\n    return <LoadingPage />;\n  }\n  const onSubmit: PageFormSubmitHandler<ContainerGroupForm> = async (data) => {\n    const { override, pod_spec_override, ...rest } = data;\n\n    const podSpecForSubmit = override ? pod_spec_override : '';\n    const updateContainerGroup = await patchRequest(\n      awxAPI`/instance_groups/${params?.id as string}/`,\n      {\n        ...rest,\n        pod_spec_override: podSpecForSubmit,\n        is_container_group: true,\n      }\n    );\n    pageNavigate(AwxRoute.InstanceGroupDetails, {\n      params: { id: updateContainerGroup.id },\n    });\n  };\n  return (\n    <PageLayout>\n      <PageHeader\n        title={\n          containerGroup?.name\n            ? t('Edit {{containergroupName}}', { containergroupName: containerGroup?.name })\n            : t('Container Group')\n        }\n        breadcrumbs={[\n          { label: t('Instance Groups'), to: getPageUrl(AwxRoute.InstanceGroups) },\n          {\n            label: containerGroup?.name\n              ? t('Edit {{containergroupName}}', { containergroupName: containerGroup?.name })\n              : t('Container Group'),\n          },\n        ]}\n      />\n      <AwxPageForm\n        submitText={t('Save container group')}\n        onSubmit={onSubmit}\n        cancelText={t('Cancel')}\n        onCancel={onCancel}\n        defaultValue={{\n          name: containerGroup.name,\n          credential: containerGroup.credential ?? null,\n          max_concurrent_jobs: containerGroup.max_concurrent_jobs || 0,\n          max_forks: containerGroup.max_forks || 0,\n          pod_spec_override: containerGroup?.pod_spec_override.length\n            ? containerGroup?.pod_spec_override\n            : jsonToYaml(JSON.stringify(data?.actions?.POST.pod_spec_override.default)),\n          override: Boolean(containerGroup.pod_spec_override),\n        }}\n      >\n        <ContainerGroupInputs />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n\nexport function ContainerGroupInputs() {\n  const { t } = useTranslation();\n\n  const hasOverride = useWatch({ name: 'override' }) as boolean;\n\n  return (\n    <>\n      <PageFormTextInput<ContainerGroupForm>\n        name=\"name\"\n        label={t('Name')}\n        placeholder={t('Enter a name')}\n        isRequired\n        maxLength={150}\n      />\n      <PageFormCredentialSelect<ContainerGroupForm>\n        name=\"credential\"\n        label={t('Credential')}\n        labelHelp={t(\n          `Credential to authenticate with Kubernetes or OpenShift. Must be of type \"Kubernetes/OpenShift API Bearer Token\". If left blank, the underlying Pod's service account will be used.`\n        )}\n        queryParams={{\n          credential_type__kind: 'kubernetes',\n        }}\n      />\n      <PageFormTextInput<ContainerGroupForm>\n        name=\"max_concurrent_jobs\"\n        helperText={t(\n          'Maximum number of jobs to run concurrently on this group. Zero means no limit will be enforced.'\n        )}\n        type=\"number\"\n        min={0}\n        label={t('Max concurrent jobs')}\n      />\n      <PageFormTextInput<ContainerGroupForm>\n        name=\"max_forks\"\n        helperText={t(\n          'Maximum number of forks to allow across all jobs running concurrently on this group. Zero means no limit will be enforced.'\n        )}\n        type=\"number\"\n        min={0}\n        label={t('Max forks')}\n      />\n      <PageFormCheckbox<{ override: boolean }> label={t('Customize pod spec')} name=\"override\" />\n      {hasOverride && (\n        <PageFormHidden hidden={(hasOverride) => !hasOverride} watch=\"override\">\n          <PageFormSection singleColumn>\n            <PageFormDataEditor<ContainerGroupForm>\n              format=\"yaml\"\n              helperText={t(\n                'Field for passing a custom Kubernetes or OpenShift Pod specification.'\n              )}\n              label={t('Pod spec override')}\n              name=\"pod_spec_override\"\n            />\n          </PageFormSection>\n        </PageFormHidden>\n      )}\n    </>\n  );\n}\n","import { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageActions,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { PageRoutedTabs } from '../../../../common/PageRoutedTabs';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { useViewActivityStream } from '../../../access/common/useViewActivityStream';\nimport { AwxError } from '../../../common/AwxError';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { InstanceGroup } from '../../../interfaces/InstanceGroup';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useInstanceGroupRowActions } from '../hooks/useInstanceGroupActions';\n\nexport function InstanceGroupPage() {\n  const { t } = useTranslation();\n  const activityStream = useViewActivityStream('instance_group');\n  const pageNavigate = usePageNavigate();\n  const params = useParams<{ id: string }>();\n  const {\n    error,\n    data: instanceGroup,\n    refresh,\n  } = useGetItem<InstanceGroup>(awxAPI`/instance_groups`, params.id);\n\n  const itemActions = useInstanceGroupRowActions(() => pageNavigate(AwxRoute.InstanceGroups));\n  const getPageUrl = useGetPageUrl();\n\n  if (error) return <AwxError error={error} handleRefresh={refresh} />;\n  if (!instanceGroup) return <LoadingPage breadcrumbs tabs />;\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={instanceGroup?.name}\n        breadcrumbs={[\n          {\n            label: t('Instance groups'),\n            to: getPageUrl(AwxRoute.InstanceGroups),\n          },\n          {\n            label: instanceGroup?.name,\n          },\n        ]}\n        headerActions={\n          <PageActions\n            actions={[...activityStream, ...itemActions]}\n            position={DropdownPosition.right}\n            selectedItem={instanceGroup}\n          />\n        }\n      />\n      <PageRoutedTabs\n        backTab={{\n          label: t('Back to Instance Groups'),\n          page: AwxRoute.InstanceGroups,\n          persistentFilterKey: 'instance_groups',\n        }}\n        tabs={[\n          { label: t('Details'), page: AwxRoute.InstanceGroupDetails },\n          ...(!instanceGroup?.is_container_group\n            ? [\n                {\n                  label: t('Instances'),\n                  page: AwxRoute.InstanceGroupInstances,\n                },\n              ]\n            : []),\n          { label: t('Team Access'), page: AwxRoute.InstanceGroupTeamAccess },\n          { label: t('User Access'), page: AwxRoute.InstanceGroupUserAccess },\n          { label: t('Jobs'), page: AwxRoute.InstanceGroupJobs },\n        ]}\n        params={{ id: instanceGroup.id }}\n      />\n    </PageLayout>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSWRConfig } from 'swr';\nimport {\n  PageFormCheckbox,\n  PageFormSelect,\n  PageFormSubmitHandler,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { PageFormTextInput } from '../../../../framework/PageForm/Inputs/PageFormTextInput';\nimport { PageFormSection } from '../../../../framework/PageForm/Utils/PageFormSection';\nimport { requestPatch } from '../../../common/crud/Data';\nimport { useGet } from '../../../common/crud/useGet';\nimport { usePostRequest } from '../../../common/crud/usePostRequest';\nimport { AwxPageForm } from '../../common/AwxPageForm';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { Instance } from '../../interfaces/Instance';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { useWatch } from 'react-hook-form';\n\nexport function AddInstance() {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const pageNavigate = usePageNavigate();\n  const postRequest = usePostRequest<Instance>();\n\n  const onSubmit: PageFormSubmitHandler<Instance> = async (instance: Instance) => {\n    const newInstance = await postRequest(awxAPI`/instances/`, instance);\n    pageNavigate(AwxRoute.InstanceDetails, { params: { id: newInstance.id } });\n  };\n\n  const onCancel = () => navigate(-1);\n  const getPageUrl = useGetPageUrl();\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Create instance')}\n        breadcrumbs={[\n          { label: t('Instances'), to: getPageUrl(AwxRoute.Instances) },\n          { label: t('Create instance') },\n        ]}\n      />\n      <AwxPageForm\n        submitText={t('Create instance')}\n        onSubmit={onSubmit}\n        cancelText={t('Cancel')}\n        onCancel={onCancel}\n        defaultValue={{\n          node_type: 'execution',\n          node_state: 'installed',\n          enabled: true,\n          peers_from_control_nodes: false,\n          managed_by_policy: true,\n        }}\n      >\n        <InstanceInputs mode=\"create\" />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n\nexport function EditInstance() {\n  const params = useParams();\n  const id = Number(params.id);\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const pageNavigate = usePageNavigate();\n  const { data: instance } = useGet<Instance>(awxAPI`/instances/${id?.toString()}/`);\n\n  const { cache } = useSWRConfig();\n\n  const onSubmit: PageFormSubmitHandler<Instance> = async (instanceInput: Instance) => {\n    instanceInput.listener_port =\n      instanceInput.listener_port && Number(instanceInput?.listener_port);\n    await requestPatch<Instance>(awxAPI`/instances/${id.toString()}/`, instanceInput);\n    (cache as unknown as { clear: () => void }).clear?.();\n    pageNavigate(AwxRoute.InstanceDetails, { params: { id } });\n  };\n\n  const onCancel = () => navigate(-1);\n  const getPageUrl = useGetPageUrl();\n\n  if (instance) {\n    return (\n      <PageLayout>\n        <PageHeader\n          title={\n            instance?.hostname\n              ? t('Edit {{instanceName}}', { instanceName: instance?.hostname })\n              : t('Instances')\n          }\n          breadcrumbs={[\n            { label: t('Instances'), to: getPageUrl(AwxRoute.Instances) },\n            {\n              label: instance?.hostname\n                ? t('Edit {{instanceName}}', { instanceName: instance?.hostname })\n                : t('Instances'),\n            },\n          ]}\n        />\n        <AwxPageForm\n          submitText={t('Save instance')}\n          onSubmit={onSubmit}\n          cancelText={t('Cancel')}\n          onCancel={onCancel}\n          defaultValue={instance}\n        >\n          <InstanceInputs mode=\"edit\" />\n        </AwxPageForm>\n      </PageLayout>\n    );\n  }\n}\n\nfunction InstanceInputs(props: { mode: 'create' | 'edit' }) {\n  const { mode } = props;\n  const { t } = useTranslation();\n  const peersFromControlNodes = useWatch({ name: 'peers_from_control_nodes' }) as boolean;\n  return (\n    <>\n      <PageFormTextInput<Instance>\n        name=\"hostname\"\n        label={t('Host name')}\n        placeholder={t('Enter a host name')}\n        isRequired\n        maxLength={150}\n        isDisabled={mode === 'edit'}\n      />\n      <PageFormTextInput<Instance>\n        name=\"node_state\"\n        label={t('Instance state')}\n        placeholder={t('installed')}\n        isDisabled={true}\n        labelHelp={t('Sets the current life cycle stage of this instance. Default is \"installed.\"')}\n      />\n      <PageFormTextInput<Instance>\n        name=\"listener_port\"\n        type=\"number\"\n        label={t('Listener port')}\n        placeholder={t('Enter a listener port')}\n        isRequired={peersFromControlNodes}\n        min={0}\n        max={65353}\n        labelHelp={t(\n          'Select the port that receptor will listen on for incoming connections, e.g. 27199.'\n        )}\n      />\n      <PageFormSelect<Instance>\n        name=\"node_type\"\n        label={t('Instance type')}\n        placeholderText={t('Select a client type')}\n        options={[\n          {\n            label: t('Execution'),\n            value: 'execution',\n          },\n          {\n            label: t('Hop'),\n            value: 'hop',\n          },\n        ]}\n        isRequired\n        isDisabled={mode === 'edit'}\n      />\n      <PageFormSection title={t('Options')} singleColumn>\n        <PageFormCheckbox<Instance>\n          name=\"enabled\"\n          label={t('Enable instance')}\n          labelHelp={t(\n            'Set the instance enabled or disabled. If disabled, jobs will not be assigned to this instance.'\n          )}\n        />\n        <PageFormCheckbox<Instance>\n          name=\"managed_by_policy\"\n          label={t('Managed by policy')}\n          labelHelp={t(\n            'Controls whether or not this instance is managed by policy. If enabled, the instance will be available for automatic assignment to and unassignment from instance groups based on policy rules.'\n          )}\n        />\n        <PageFormCheckbox<Instance>\n          name=\"peers_from_control_nodes\"\n          label={t('Peers from control nodes')}\n          labelHelp={t(\n            'If enabled, control nodes will peer to this instance automatically. If disabled, instance will be connected only to associated peers.'\n          )}\n        />\n      </PageFormSection>\n    </>\n  );\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { IToolbarFilter, PageHeader, PageLayout } from '../../../../framework';\nimport { ActivityStreamIcon } from '../../common/ActivityStreamIcon';\nimport {\n  useAddressToolbarFilter,\n  useHostnameToolbarFilter,\n} from '../../common/awx-toolbar-filters';\nimport { InstancesList } from './components/InstancesList';\nimport { useInstanceToolbarActions } from './hooks/useInstanceToolbarActions';\nimport { useInstanceRowActions } from './hooks/useInstanceRowActions';\nimport { useInstancesColumns } from './hooks/useInstancesColumns';\n\nexport function Instances() {\n  const { t } = useTranslation();\n  const tableColumns = useInstancesColumns();\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Instances')}\n        titleHelpTitle={t('Instances')}\n        titleHelp={t(\n          'Ansible node instances dedicated for a particular purpose indicated by node type.'\n        )}\n        description={t(\n          'Ansible node instances dedicated for a particular purpose indicated by node type.'\n        )}\n        headerActions={<ActivityStreamIcon type={'instance'} />}\n      />\n      <InstancesList\n        useToolbarActions={useInstanceToolbarActions}\n        useRowActions={useInstanceRowActions}\n        tableColumns={tableColumns}\n      />\n    </PageLayout>\n  );\n}\n\nexport function usePeersFilters() {\n  const hostnameToolbarFilter = useHostnameToolbarFilter();\n\n  const toolbarFilters = useMemo<IToolbarFilter[]>(\n    () => [hostnameToolbarFilter],\n    [hostnameToolbarFilter]\n  );\n  return toolbarFilters;\n}\n\nexport function usePeersTabFilters() {\n  const addressToolbarFilter = useAddressToolbarFilter();\n\n  const toolbarFilters = useMemo<IToolbarFilter[]>(\n    () => [addressToolbarFilter],\n    [addressToolbarFilter]\n  );\n  return toolbarFilters;\n}\n","import { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageActions,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n} from '../../../../framework';\nimport { PageRoutedTabs } from '../../../common/PageRoutedTabs';\nimport { useGet, useGetItem } from '../../../common/crud/useGet';\nimport { useViewActivityStream } from '../../access/common/useViewActivityStream';\nimport { AwxError } from '../../common/AwxError';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { Instance } from '../../interfaces/Instance';\nimport { Settings } from '../../interfaces/Settings';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { useInstanceDetailsActions } from './hooks/useInstanceActions';\n\nexport function InstancePage() {\n  const { t } = useTranslation();\n  const activityStream = useViewActivityStream('instance');\n  const params = useParams<{ id: string }>();\n  const { error, data: instance, refresh } = useGetItem<Instance>(awxAPI`/instances`, params.id);\n  const { data } = useGet<Settings>(awxAPI`/settings/system/`);\n  const isK8s = !data?.IS_K8S;\n  const itemActions = useInstanceDetailsActions();\n  const pageActions = [...itemActions];\n  const getPageUrl = useGetPageUrl();\n\n  if (error) return <AwxError error={error} handleRefresh={refresh} />;\n  if (!instance) return <LoadingPage breadcrumbs tabs />;\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={instance?.hostname}\n        breadcrumbs={[\n          { label: t('Instances'), to: getPageUrl(AwxRoute.Instances) },\n          { label: instance?.hostname },\n        ]}\n        headerActions={\n          <PageActions<Instance>\n            actions={[...activityStream, ...pageActions]}\n            position={DropdownPosition.right}\n            selectedItem={instance}\n          />\n        }\n      />\n      <PageRoutedTabs\n        backTab={{\n          label: t('Back to Instances'),\n          page: AwxRoute.Instances,\n          persistentFilterKey: 'instances',\n        }}\n        tabs={[\n          { label: t('Details'), page: AwxRoute.InstanceDetails, dataCy: 'instances-details-tab' },\n          !isK8s && {\n            label: t('Listener Addresses'),\n            page: AwxRoute.InstanceListenerAddresses,\n            dataCy: 'instances-listener-addresses-tab',\n          },\n          !isK8s && {\n            label: t('Peers'),\n            page: AwxRoute.InstancePeers,\n            dataCy: 'instances-peers-tab',\n          },\n        ]}\n        params={{ id: instance.id }}\n      />\n    </PageLayout>\n  );\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ITableColumn, TextCell, useGetPageUrl } from '../../../../../framework';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useGet, useGetItem } from '../../../../common/crud/useGet';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { Instance, Peer } from '../../../interfaces/Instance';\nimport { useParams } from 'react-router-dom';\n\nexport interface ReceptorAddresses {\n  results: [\n    {\n      id: number;\n      url: string;\n      address: string;\n      port: number;\n      protocol: string;\n      websocket_path: string;\n      is_internal: boolean;\n      canonical: boolean;\n      instance: number;\n      peers_from_control_nodes: boolean;\n      full_address: string;\n    },\n  ];\n}\n\nexport function usePeersColumns(_options?: { isListenerAddresses?: boolean }) {\n  const params = useParams<{ id?: string }>();\n  const id = Number(params.id);\n  const { data: instance } = useGetItem<Instance>(awxAPI`/instances`, id);\n\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const tableColumns = useMemo<ITableColumn<Peer>[]>(\n    () => [\n      {\n        header: t('Instance name'),\n        cell: (peer) => (\n          <TextCell\n            text={peer.address}\n            to={getPageUrl(AwxRoute.InstanceDetails, { params: { id: peer.instance } })}\n          />\n        ),\n        card: 'name',\n        list: 'name',\n        sort: 'pk',\n        maxWidth: 200,\n      },\n      {\n        header: t('Address'),\n        type: 'text',\n        value: (peer) => (_options?.isListenerAddresses ? instance?.hostname : peer.address),\n        sort: 'address',\n      },\n      {\n        header: t('Port'),\n        type: 'text',\n        value: (peer) =>\n          _options?.isListenerAddresses\n            ? instance?.listener_port?.toString()\n            : peer.port?.toString(),\n        sort: 'port',\n      },\n      {\n        header: t('Node type'),\n        type: 'text',\n        value: (peer) => GetNodeTypePeer(peer),\n        sort: undefined,\n      },\n      {\n        header: t('Protocol'),\n        type: 'text',\n        value: (peer) => (_options?.isListenerAddresses ? instance?.protocol : peer.protocol),\n        sort: 'protocol',\n      },\n      {\n        header: t('Canonical'),\n        type: 'text',\n        value: (peer) =>\n          _options?.isListenerAddresses\n            ? GetCanonical(instance)?.toString()\n            : peer.canonical.toString(),\n        sort: 'canonical',\n      },\n    ],\n    [_options?.isListenerAddresses, getPageUrl, instance, t]\n  );\n  return tableColumns;\n}\n\nexport function GetNodeTypePeer(peer: Peer) {\n  const { data: instance } = useGet<Instance>(awxAPI`/instances/${peer.instance.toString()}/`);\n  return instance?.node_type;\n}\n\nexport function GetCanonical(instance?: Instance) {\n  const { data: receptor_addresses } = useGet<ReceptorAddresses>(awxAPI`/receptor_addresses/`);\n  const canonical = receptor_addresses?.results.find(\n    (element) => element.address === instance?.hostname\n  );\n  return canonical?.canonical;\n}\n","import { useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { MultiSelectDialog, usePageDialogs } from '../../../../../framework';\nimport { usePeersTabFilters } from '../Instances';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { QueryParams, useAwxView } from '../../../common/useAwxView';\nimport { usePeersColumns } from './usePeersColumns';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { Peer, Instance } from '../../../interfaces/Instance';\nimport { useAwxGetAllPages } from '../../../common/useAwxGetAllPages';\n\nexport interface PeerInstanceModalProps {\n  instanceId: string;\n  onPeer: (peers: Peer[]) => void;\n}\n\nfunction PeerInstanceModal(props: PeerInstanceModalProps) {\n  const { t } = useTranslation();\n  const { instanceId, onPeer } = props;\n\n  const toolbarFilters = usePeersTabFilters();\n  const columns = usePeersColumns();\n  const tableColumns = useMemo(\n    () =>\n      columns.filter((item) =>\n        ['Instance name', 'Address', 'Port', 'Node type', 'Protocol'].includes(item.header)\n      ),\n    [columns]\n  );\n\n  const { results: receptors } = useAwxGetAllPages<Peer>(awxAPI`/receptor_addresses/`);\n  const { results: instances } = useAwxGetAllPages<Instance>(awxAPI`/instances`, {\n    not__node_type: ['control', 'hybird'],\n  });\n\n  const { data: instance } = useGetItem<Instance>(awxAPI`/instances/`, instanceId);\n\n  const peeredInstanceIds = instance?.peers?.map((peer) => String(peer)) ?? [];\n\n  let peeredReceptorIds: string[] = [];\n\n  if (receptors && instance && !instance.managed && instances) {\n    const filteredReceptors = receptors.filter(\n      (receptor) =>\n        !peeredInstanceIds.includes(String(receptor.instance)) &&\n        !instance.peers?.includes(receptor.id) &&\n        !(instance.id === receptor.instance) &&\n        !receptor.is_internal &&\n        instances &&\n        instances.some((instance) => instance.id === receptor.instance)\n    );\n\n    peeredReceptorIds = filteredReceptors.map((receptor) => String(receptor.instance));\n  }\n\n  const queryParams: QueryParams = {\n    is_internal: 'false',\n    order_by: 'address',\n    not__instance: [String(instance?.id ?? '')],\n  };\n\n  if (peeredInstanceIds.length > 0) queryParams['not__id__in'] = peeredInstanceIds;\n\n  if (peeredReceptorIds.length > 0)\n    queryParams['not__instance'] = [...queryParams.not__instance, ...peeredReceptorIds];\n\n  const view = useAwxView<Peer>({\n    url: awxAPI`/receptor_addresses/`,\n    toolbarFilters,\n    tableColumns,\n    disableQueryString: true,\n    queryParams: queryParams,\n  });\n\n  return (\n    <MultiSelectDialog\n      title={t('Select peer addresses')}\n      onSelect={onPeer}\n      toolbarFilters={toolbarFilters}\n      tableColumns={tableColumns}\n      view={view}\n      confirmText={t('Associate peers')}\n    />\n  );\n}\n\nexport function usePeerInstanceModal() {\n  const { pushDialog, popDialog } = usePageDialogs();\n  const [props, setProps] = useState<PeerInstanceModalProps>();\n\n  useEffect(() => {\n    if (props) {\n      pushDialog(<PeerInstanceModal {...props} />);\n    } else {\n      popDialog();\n    }\n  }, [props, pushDialog, popDialog]);\n  return setProps;\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport { MinusCircleIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport { IPageAction, PageActionSelection, PageActionType, PageTable } from '../../../../framework';\nimport { useGetItem } from '../../../common/crud/useGet';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { Instance, Peer } from '../../interfaces/Instance';\nimport { usePeersTabFilters } from './Instances';\nimport { usePeersColumns } from './hooks/usePeersColumns';\nimport { useAwxView } from '../../common/useAwxView';\nimport { useMemo } from 'react';\nimport { usePeerInstanceModal } from './hooks/useSelectAssociatePeers';\nimport { useDisassociatePeer } from './hooks/useDisassociatePeer';\nimport { useAssociatePeersToInstance } from './hooks/useAssociatePeersToInstance';\n\nexport function InstancePeers() {\n  const params = useParams<{ id: string }>();\n  const { data: instance } = useGetItem<Instance>(awxAPI`/instances`, params.id);\n\n  return instance ? <InstancePeersTab instance={instance} /> : null;\n}\n\nexport function InstancePeersTab(props: { instance: Instance }) {\n  const { instance } = props;\n  return <ResourcePeersList url={awxAPI`/instances/${instance.id.toString()}/peers/`} />;\n}\n\nexport function ResourcePeersList(props: { url: string }) {\n  const { t } = useTranslation();\n  const { url } = props;\n  const toolbarFilters = usePeersTabFilters();\n  const columns = usePeersColumns();\n  const tableColumns = useMemo(\n    () =>\n      columns.filter((item) =>\n        ['Instance name', 'Address', 'Port', 'Node type', 'Canonical'].includes(item.header)\n      ),\n    [columns]\n  );\n  const view = useAwxView({\n    url: url,\n    toolbarFilters,\n    tableColumns,\n    disableQueryString: true,\n  });\n  const { id } = useParams<{ id: string }>();\n\n  const associatePeerToInstance = useAssociatePeersToInstance(\n    view.unselectItemsAndRefresh,\n    id ?? ''\n  );\n  const openPeerInstanceModal = usePeerInstanceModal();\n\n  const disassociatePeer = useDisassociatePeer(view.unselectItemsAndRefresh, id ?? '');\n\n  const toolbarActions = useMemo<IPageAction<Peer>[]>(\n    () => [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.None,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        icon: PlusCircleIcon,\n        label: t('Associate peers'),\n        onClick: () =>\n          openPeerInstanceModal({ onPeer: associatePeerToInstance, instanceId: id ?? '' }),\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        variant: ButtonVariant.primary,\n        icon: MinusCircleIcon,\n        label: t('Disassociate peers'),\n        onClick: (peers: Peer[]) => disassociatePeer(peers),\n        isDanger: true,\n      },\n    ],\n    [openPeerInstanceModal, associatePeerToInstance, disassociatePeer, id, t]\n  );\n\n  return (\n    <PageTable<Peer>\n      toolbarFilters={toolbarFilters}\n      toolbarActions={toolbarActions}\n      tableColumns={tableColumns}\n      errorStateTitle={t('Error loading peers')}\n      emptyStateTitle={t('No peers found')}\n      emptyStateDescription={t('Please associate peers to populate this list.')}\n      emptyStateButtonIcon={<PlusCircleIcon />}\n      emptyStateButtonText={t('Associate peers')}\n      emptyStateButtonClick={() =>\n        openPeerInstanceModal({ onPeer: associatePeerToInstance, instanceId: id ?? '' })\n      }\n      {...view}\n    />\n  );\n}\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useAwxBulkActionDialog } from '../../../common/useAwxBulkActionDialog';\nimport { requestPatch } from '../../../../common/crud/Data';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { Instance, Peer } from '../../../interfaces/Instance';\nimport { useGetItem } from '../../../../common/crud/useGet';\n\nexport function useAssociatePeersToInstance(\n  onComplete: (peers: Peer[]) => void,\n  instanceId: string\n) {\n  const { t } = useTranslation();\n  const bulkAction = useAwxBulkActionDialog<Peer>();\n\n  const { data: instance } = useGetItem<Instance>(awxAPI`/instances`, instanceId);\n\n  const addPeersToInstance = useCallback(\n    (peers: Peer[]) => {\n      bulkAction({\n        title: t('Associating {{count}} peers', { count: peers.length }),\n        keyFn: (peer: Peer) => peer.id,\n        items: peers,\n        actionColumns: [{ header: 'Name', cell: (peer: Peer) => peer.address }],\n        actionFn: () => {\n          const peerIds = peers.map((peer) => peer.id);\n          const res = requestPatch(awxAPI`/instances/${instanceId}/`, {\n            peers: instance?.peers ? [...instance.peers, ...peerIds] : peerIds,\n          });\n          return res;\n        },\n        processingText: t('Associating {{count}} peers...', { count: peers.length }),\n        onComplete,\n      });\n    },\n    [bulkAction, t, onComplete, instanceId, instance]\n  );\n  return addPeersToInstance;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { compareStrings } from '../../../../../framework';\nimport { useAddressColumn } from '../../../../common/columns';\nimport { getItemKey, requestPatch } from '../../../../common/crud/Data';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { usePeersColumns } from './usePeersColumns';\nimport { useParams } from 'react-router-dom';\nimport { Instance, Peer } from '../../../interfaces/Instance';\nimport { useGetItem } from '../../../../common/crud/useGet';\n\nexport function useDisassociatePeer(onComplete: (peers: Peer[]) => void, instanceId: string) {\n  const params = useParams<{ id?: string }>();\n  const id = Number(params.id);\n  const { t } = useTranslation();\n  const deleteActionNameColumn = useAddressColumn({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo(() => [deleteActionNameColumn], [deleteActionNameColumn]);\n  const bulkAction = useAwxBulkConfirmation<Peer>();\n\n  const columns = usePeersColumns();\n  const confirmationColumns = useMemo(\n    () =>\n      columns.filter((item) =>\n        ['Peer name', 'Address', 'Port', 'Node type', 'Protocol'].includes(item.header)\n      ),\n    [columns]\n  );\n\n  const { data: instance } = useGetItem<Instance>(awxAPI`/instances`, instanceId);\n\n  const removeInstances = (peersToRemove: Peer[]) => {\n    bulkAction({\n      title: t('Disassociate peers', { count: peersToRemove.length }),\n      confirmText:\n        peersToRemove.length === 1\n          ? t('Yes, I confirm that I want to disassociate this peer.')\n          : t('Yes, I confirm that I want to disassociate these {{count}} peers.', {\n              count: peersToRemove.length,\n            }),\n      actionButtonText: t('Disassociate peers', { count: peersToRemove.length }),\n      items: peersToRemove.sort((l, r) => compareStrings(l.name, r.name)),\n      keyFn: getItemKey,\n      isDanger: true,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: () => {\n        const peersToRemoveIds = peersToRemove.map((peer) => peer.id);\n        const resultantPeers = instance?.peers\n          ? instance?.peers.filter((currentPeerIds) => !peersToRemoveIds.includes(currentPeerIds))\n          : [];\n        const res = requestPatch(awxAPI`/instances/${id.toString()}/`, {\n          peers: resultantPeers,\n        });\n        return res;\n      },\n    });\n  };\n  return removeInstances;\n}\n","import { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport { PageTable } from '../../../../framework';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { usePeersFilters } from './Instances';\nimport { usePeersColumns } from './hooks/usePeersColumns';\nimport { useAwxView } from '../../common/useAwxView';\nimport { useMemo } from 'react';\nimport { Instance, Peer } from '../../interfaces/Instance';\nimport { useGetItem } from '../../../common/crud/useGet';\n\nexport function InstanceListenerAddresses() {\n  const { t } = useTranslation();\n  const { id } = useParams<{ id?: string }>();\n  const { data: instance } = useGetItem<Instance>(awxAPI`/instances`, id);\n  const toolbarFilters = usePeersFilters();\n  const columns = usePeersColumns({ isListenerAddresses: true });\n  const tableColumns = useMemo(\n    () =>\n      columns.filter((item) => ['Address', 'Port', 'Protocol', 'Canonical'].includes(item.header)),\n    [columns]\n  );\n  const instanceName = instance?.hostname as string;\n  const view = useAwxView<Peer>({\n    url: awxAPI`/instances/`,\n    toolbarFilters,\n    tableColumns,\n    queryParams: {\n      order_by: 'hostname',\n      hostname: instanceName,\n    },\n    disableQueryString: true,\n  });\n\n  return (\n    <PageTable<Peer>\n      tableColumns={tableColumns}\n      errorStateTitle={t('Error loading listener addresses')}\n      emptyStateTitle={t('No listener addresses found')}\n      emptyStateDescription={t('Please add Listener Addresses to populate this list.')}\n      {...(instance?.listener_port\n        ? view\n        : {\n            itemCount: 0,\n            keyFn: () => '',\n            perPage: 0,\n            pageItems: [],\n            page: 0,\n            setPage: () => {},\n            setPerPage: () => {},\n          })}\n    />\n  );\n}\n","import { CubesIcon } from '@patternfly/react-icons';\nimport { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageHeader, PageLayout, PageTable } from '../../../../framework';\nimport { usePersistentFilters } from '../../../common/PersistentFilters';\nimport { useOptions } from '../../../common/crud/useOptions';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { useAwxConfig } from '../../common/useAwxConfig';\nimport { useAwxView } from '../../common/useAwxView';\nimport { useAwxWebSocketSubscription } from '../../common/useAwxWebSocket';\nimport { useGetDocsUrl } from '../../common/util/useGetDocsUrl';\nimport { type Inventory } from '../../interfaces/Inventory';\nimport { ActionsResponse, OptionsResponse } from '../../interfaces/OptionsResponse';\nimport { useInventoriesColumns } from './hooks/useInventoriesColumns';\nimport { useInventoriesFilters } from './hooks/useInventoriesFilters';\nimport { useInventoriesToolbarActions } from './hooks/useInventoriesToolbarActions';\nimport { useInventoryActions } from './hooks/useInventoryActions';\nimport { ActivityStreamIcon } from '../../common/ActivityStreamIcon';\n\nexport type WebSocketInventory = {\n  status: string;\n} & Inventory;\n\ntype WebSocketMessage = {\n  group_name?: string;\n  type?: string;\n  status?: string;\n  inventory_id?: number;\n};\n\nexport function Inventories() {\n  const { t } = useTranslation();\n  const { data } = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/inventories/`);\n  const canCreateInventory = Boolean(data && data.actions && data.actions['POST']);\n  const toolbarFilters = useInventoriesFilters();\n  const tableColumns = useInventoriesColumns();\n  const view = useAwxView<Inventory>({\n    url: awxAPI`/inventories/`,\n    toolbarFilters,\n    tableColumns,\n  });\n  const { refresh, pageItems } = view;\n  const toolbarActions = useInventoriesToolbarActions(view);\n  const rowActions = useInventoryActions({\n    onInventoriesDeleted: view.unselectItemsAndRefresh,\n    onInventoryCopied: view.refresh,\n    detail: false,\n  });\n  usePersistentFilters('inventories');\n  const config = useAwxConfig();\n\n  const handleWebSocketMessage = useCallback(\n    (message?: WebSocketMessage) => {\n      if (!message?.inventory_id) return;\n      switch (message?.group_name) {\n        case 'inventories':\n          switch (message?.status) {\n            case 'deleted':\n              void refresh();\n              break;\n          }\n          break;\n        case 'jobs':\n          switch (message?.type) {\n            case 'inventory_update':\n              switch (message?.status) {\n                case 'canceled':\n                case 'error':\n                case 'failed':\n                case 'pending':\n                case 'running':\n                case 'successful': {\n                  const wsInventory = (pageItems ?? []).find(\n                    (inv) => inv.id === message.inventory_id\n                  );\n                  if (!wsInventory) return;\n                  (wsInventory as WebSocketInventory).status = message.status;\n                  break;\n                }\n              }\n              void refresh();\n              break;\n          }\n          break;\n      }\n    },\n    [refresh, pageItems]\n  );\n\n  useAwxWebSocketSubscription(\n    { control: ['limit_reached_1'], jobs: ['status_changed'], inventories: ['status_changed'] },\n    handleWebSocketMessage as (data: unknown) => void\n  );\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Inventories')}\n        titleHelpTitle={t('Inventories')}\n        titleHelp={t(\n          'An inventory defines the hosts and groups of hosts upon which commands, modules, and tasks in a playbook operate.'\n        )}\n        titleDocLink={useGetDocsUrl(config, 'inventories')}\n        description={t(\n          'An inventory defines the hosts and groups of hosts upon which commands, modules, and tasks in a playbook operate.'\n        )}\n        headerActions={<ActivityStreamIcon type={'inventory'} />}\n      />\n      <PageTable<Inventory>\n        id=\"awx-inventories-table\"\n        toolbarFilters={toolbarFilters}\n        toolbarActions={toolbarActions}\n        tableColumns={tableColumns}\n        rowActions={rowActions}\n        errorStateTitle={t('Error loading inventories')}\n        emptyStateTitle={\n          canCreateInventory\n            ? t('There are currently no inventories added.')\n            : t('You do not have permission to create an inventory.')\n        }\n        emptyStateDescription={\n          canCreateInventory\n            ? t('Please create an inventory by using the button below.')\n            : t(\n                'Please contact your organization administrator if there is an issue with your access.'\n              )\n        }\n        emptyStateIcon={canCreateInventory ? undefined : CubesIcon}\n        emptyStateActions={canCreateInventory ? toolbarActions.slice(0, 1) : undefined}\n        {...view}\n        defaultSubtitle={t('Inventory')}\n      />\n    </PageLayout>\n  );\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport { PlusCircleIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { IAwxView } from '../../../common/useAwxView';\nimport { Inventory } from '../../../interfaces/Inventory';\nimport { ActionsResponse, OptionsResponse } from '../../../interfaces/OptionsResponse';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useDeleteInventories } from './useDeleteInventories';\n\nexport function useInventoriesToolbarActions(view: IAwxView<Inventory>) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const deleteInventories = useDeleteInventories(view.unselectItemsAndRefresh);\n  const { data } = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/inventories/`);\n  const canCreateInventory = Boolean(data && data.actions && data.actions['POST']);\n\n  return useMemo<IPageAction<Inventory>[]>(() => {\n    const actions: IPageAction<Inventory>[] = [\n      {\n        type: PageActionType.Dropdown,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        icon: PlusCircleIcon,\n        label: t('Create inventory'),\n        isDisabled: () =>\n          canCreateInventory\n            ? undefined\n            : t(\n                'You do not have permission to create an inventory. Please contact your organization administrator if there is an issue with your access.'\n              ),\n        selection: PageActionSelection.None,\n        actions: [\n          {\n            type: PageActionType.Button,\n            selection: PageActionSelection.None,\n            label: t('Create inventory'),\n            onClick: () => pageNavigate(AwxRoute.CreateInventory),\n          },\n          {\n            type: PageActionType.Button,\n            selection: PageActionSelection.None,\n            label: t('Create smart inventory'),\n            onClick: () => pageNavigate(AwxRoute.CreateSmartInventory),\n          },\n          {\n            type: PageActionType.Button,\n            selection: PageActionSelection.None,\n            label: t('Create constructed inventory'),\n            onClick: () => pageNavigate(AwxRoute.CreateConstructedInventory),\n          },\n        ],\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: TrashIcon,\n        label: t('Delete inventories'),\n        onClick: deleteInventories,\n        isDanger: true,\n      },\n    ];\n\n    return actions;\n  }, [canCreateInventory, deleteInventories, pageNavigate, t]);\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Alert,\n  AlertActionLink,\n  ClipboardCopyButton,\n  CodeBlock,\n  CodeBlockAction,\n  CodeBlockCode,\n  ClipboardCopy,\n  Form,\n  FormFieldGroupExpandable,\n  FormFieldGroupHeader,\n  FormGroup,\n  Panel,\n  CardBody,\n} from '@patternfly/react-core';\nimport { Table, Thead, Tr, Th, Tbody, Td } from '@patternfly/react-table';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { useAwxConfig } from '../../../common/useAwxConfig';\nimport { useGetDocsUrl } from '../../../common/util/useGetDocsUrl';\n\nexport function ConstructedInventoryHint() {\n  const config = useAwxConfig();\n  const { t } = useTranslation();\n\n  return (\n    <Alert\n      isExpandable\n      isInline\n      variant=\"info\"\n      title={t`How to use constructed inventory plugin`}\n      actionLinks={\n        <AlertActionLink\n          href={useGetDocsUrl(config, 'constructedInventories')}\n          component=\"a\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {t`View constructed inventory documentation here`} <ExternalLinkAltIcon />\n        </AlertActionLink>\n      }\n    >\n      <span>\n        {t`This table gives a few useful parameters of the constructed\n               inventory plugin. For the full list of parameters `}{' '}\n        <a\n          href={t`https://docs.ansible.com/ansible/latest/collections/ansible/builtin/constructed_inventory.html`}\n        >{t`view the constructed inventory plugin docs here.`}</a>\n      </span>\n      <br />\n      <br />\n      <Table aria-label={t`Constructed inventory parameters table`} variant=\"compact\">\n        <Thead>\n          <Tr>\n            <Th>{t`Parameter`}</Th>\n            <Th>{t`Description`}</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          <Tr ouiaId=\"plugin-row\">\n            <Td dataLabel={t`name`}>\n              <code>{t`plugin`}</code>\n              <p style={{ color: 'blue' }}>{t`string`}</p>\n              <p style={{ color: 'red' }}>{t`required`}</p>\n            </Td>\n            <Td dataLabel={t`description`}>\n              {t`Token that ensures this is a source file\n              for the ‘constructed’ plugin.`}\n            </Td>\n          </Tr>\n          <Tr key=\"strict\">\n            <Td dataLabel={t`name`}>\n              <code>{t('strict')}</code>\n              <p style={{ color: 'blue' }}>{t`boolean`}</p>\n            </Td>\n            <Td dataLabel={t`description`}>\n              {t`If yes make invalid entries a fatal error, otherwise skip and\n              continue.`}{' '}\n              <br />\n              {t`If users need feedback about the correctness\n              of their constructed groups, it is highly recommended\n              to use strict: true in the plugin configuration.`}\n            </Td>\n          </Tr>\n          <Tr key=\"groups\">\n            <Td dataLabel={t`name`}>\n              <code>{t(`groups`)}</code>\n              <p style={{ color: 'blue' }}>{t`dictionary`}</p>\n            </Td>\n            <Td dataLabel={t`description`}>\n              {t`Add hosts to group based on Jinja2 conditionals.`}\n            </Td>\n          </Tr>\n          <Tr key=\"compose\">\n            <Td dataLabel={t`name`}>\n              <code>{t('compose')}</code>\n              <p style={{ color: 'blue' }}>{t`dictionary`}</p>\n            </Td>\n            <Td dataLabel={t`description`}>\n              {t`Create vars from jinja2 expressions. This can be useful\n              if the constructed groups you define do not contain the expected\n              hosts. This can be used to add hostvars from expressions so\n              that you know what the resultant values of those expressions are.`}\n            </Td>\n          </Tr>\n        </Tbody>\n      </Table>\n      <br />\n      <br />\n      <Panel>\n        <CardBody>\n          <Form autoComplete=\"off\">\n            <div\n              style={{\n                paddingTop: 25,\n                paddingLeft: 20,\n              }}\n            >\n              <b>{t`Constructed inventory examples`}</b>\n            </div>\n            <LimitToIntersectionExample />\n            <FilterOnNestedGroupExample />\n            <HostsByProcessorTypeExample />\n          </Form>\n        </CardBody>\n      </Panel>\n    </Alert>\n  );\n}\n\nfunction LimitToIntersectionExample() {\n  const { t } = useTranslation();\n  const [copied, setCopied] = React.useState(false);\n  const clipboardCopyFunc = (event: unknown, text: string) => {\n    clipboardCopy(text);\n  };\n\n  const onClick = (event: unknown, text: string) => {\n    clipboardCopyFunc(event, text);\n    setCopied(true);\n  };\n\n  const limitToIntersectionLimit = `is_shutdown:&product_dev`;\n  const limitToIntersectionCode = `plugin: constructed\nstrict: true\ngroups:\n  shutdown_in_product_dev: state | default(\"running\") == \"shutdown\" and account_alias == \"product_dev\"`;\n\n  return (\n    <FormFieldGroupExpandable\n      header={\n        <FormFieldGroupHeader\n          titleText={{\n            text: t`Construct 2 groups, limit to intersection`,\n            id: 'intersection-example',\n          }}\n          titleDescription={t`This constructed inventory input \n            creates a group for both of the categories and uses \n            the limit (host pattern) to only return hosts that \n            are in the intersection of those two groups.`}\n        />\n      }\n    >\n      <FormGroup label={t`Limit`} fieldId=\"intersection-example-limit\">\n        <ClipboardCopy isReadOnly hoverTip={t`Copy`} clickTip={t`Copied`}>\n          {limitToIntersectionLimit}\n        </ClipboardCopy>\n      </FormGroup>\n      <FormGroup label={t`Source variables`} fieldId=\"intersection-example-source-vars\">\n        <CodeBlock\n          actions={\n            <CodeBlockAction>\n              <ClipboardCopyButton\n                id=\"intersection-example-source-vars\"\n                textId=\"intersection-example-source-vars\"\n                aria-label={t`Copy to clipboard`}\n                onClick={(e) => onClick(e, limitToIntersectionCode)}\n                exitDelay={copied ? 1500 : 600}\n                maxWidth=\"110px\"\n                variant=\"plain\"\n                onTooltipHidden={() => setCopied(false)}\n              >\n                {copied ? t`Successfully copied to clipboard!` : t`Copy to clipboard`}\n              </ClipboardCopyButton>\n            </CodeBlockAction>\n          }\n        >\n          <CodeBlockCode id=\"intersection-example-source-vars\">\n            {limitToIntersectionCode}\n          </CodeBlockCode>\n        </CodeBlock>\n      </FormGroup>\n    </FormFieldGroupExpandable>\n  );\n}\nfunction FilterOnNestedGroupExample() {\n  const { t } = useTranslation();\n  const [copied, setCopied] = React.useState(false);\n  const clipboardCopyFunc = (event: unknown, text: string) => {\n    clipboardCopy(text);\n  };\n\n  const onClick = (event: unknown, text: string) => {\n    clipboardCopyFunc(event, text);\n    setCopied(true);\n  };\n\n  const nestedGroupsInventoryLimit = `groupA`;\n  const nestedGroupsInventorySourceVars = `plugin: constructed`;\n  const nestedGroupsInventory = `all:\n  children:\n    groupA:\n      children:\n        groupB:\n          hosts:\n            host1: {}\n      vars:\n        filter_var: filter_val\n    ungrouped:\n      hosts:\n        host2: {}`;\n\n  return (\n    <FormFieldGroupExpandable\n      header={\n        <FormFieldGroupHeader\n          titleText={{\n            text: t`Filter on nested group name`,\n            id: 'nested-groups-example',\n          }}\n          titleDescription={t`This constructed inventory input\n            creates a group for both of the categories and uses\n            the limit (host pattern) to only return hosts that\n            are in the intersection of those two groups.`}\n        />\n      }\n    >\n      <FormGroup>\n        <p>{t`Nested groups inventory definition:`}</p>\n        <CodeBlock>\n          <CodeBlockCode id=\"nested-groups-example-inventory\">\n            {nestedGroupsInventory}\n          </CodeBlockCode>\n        </CodeBlock>\n      </FormGroup>\n      <FormGroup label={t`Limit`} fieldId=\"nested-groups-example-limit\">\n        <ClipboardCopy isReadOnly hoverTip={t`Copy`} clickTip={t`Copied`}>\n          {nestedGroupsInventoryLimit}\n        </ClipboardCopy>\n      </FormGroup>\n      <FormGroup label={t`Source variables`} fieldId=\"nested-groups-example-source-vars\">\n        <CodeBlock\n          actions={\n            <CodeBlockAction>\n              <ClipboardCopyButton\n                id=\"nested-groups-example-source-vars\"\n                textId=\"nested-groups-example-source-vars\"\n                aria-label={t`Copy to clipboard`}\n                onClick={(e) => onClick(e, nestedGroupsInventorySourceVars)}\n                exitDelay={copied ? 1500 : 600}\n                maxWidth=\"110px\"\n                variant=\"plain\"\n                onTooltipHidden={() => setCopied(false)}\n              >\n                {copied ? t`Successfully copied to clipboard!` : t`Copy to clipboard`}\n              </ClipboardCopyButton>\n            </CodeBlockAction>\n          }\n        >\n          <CodeBlockCode id=\"nested-groups-example-source-vars\">\n            {nestedGroupsInventorySourceVars}\n          </CodeBlockCode>\n        </CodeBlock>\n      </FormGroup>\n    </FormFieldGroupExpandable>\n  );\n}\n\nfunction clipboardCopy(text: string) {\n  void navigator.clipboard.writeText(text);\n}\n\nfunction HostsByProcessorTypeExample() {\n  const { t } = useTranslation();\n  const [copied, setCopied] = React.useState(false);\n  const clipboardCopyFunc = (event: unknown, text: string) => {\n    clipboardCopy(text);\n  };\n\n  const onClick = (event: unknown, text: string) => {\n    clipboardCopyFunc(event, text);\n    setCopied(true);\n  };\n\n  const hostsByProcessorLimit = `intel_hosts`;\n  const hostsByProcessorSourceVars = `plugin: constructed\nstrict: true\ngroups:\n  intel_hosts: \"'GenuineIntel' in ansible_processor\"`;\n\n  return (\n    <FormFieldGroupExpandable\n      header={\n        <FormFieldGroupHeader\n          titleText={{\n            text: t`Hosts by processor type`,\n            id: 'processor-example',\n          }}\n          titleDescription=\"It is hard to give a specification for\n            the inventory for Ansible facts, because to populate\n            the system facts you need to run a playbook against\n            the inventory that has `gather_facts: true`. The\n            actual facts will differ system-to-system.\"\n        />\n      }\n    >\n      <FormGroup label={t`Limit`} fieldId=\"processor-example-limit\">\n        <ClipboardCopy isReadOnly hoverTip={t`Copy`} clickTip={t`Copied`}>\n          {hostsByProcessorLimit}\n        </ClipboardCopy>\n      </FormGroup>\n      <FormGroup label={t`Source variables`} fieldId=\"processor-example-source-vars\">\n        <CodeBlock\n          actions={\n            <CodeBlockAction>\n              <ClipboardCopyButton\n                id=\"processor-example-source-vars\"\n                textId=\"processor-example-source-vars\"\n                aria-label={t`Copy to clipboard`}\n                onClick={(e) => onClick(e, hostsByProcessorSourceVars)}\n                exitDelay={copied ? 1500 : 600}\n                maxWidth=\"110px\"\n                variant=\"plain\"\n                onTooltipHidden={() => setCopied(false)}\n              >\n                {copied ? t`Successfully copied to clipboard!` : t`Copy to clipboard`}\n              </ClipboardCopyButton>\n            </CodeBlockAction>\n          }\n        >\n          <CodeBlockCode id=\"processor-example-source-vars\">\n            {hostsByProcessorSourceVars}\n          </CodeBlockCode>\n        </CodeBlock>\n      </FormGroup>\n    </FormFieldGroupExpandable>\n  );\n}\n","export const ansibleDocUrls: { [key: string]: string } = {\n  ec2: 'https://docs.ansible.com/ansible/latest/collections/amazon/aws/aws_ec2_inventory.html',\n  azure_rm:\n    'https://docs.ansible.com/ansible/latest/collections/azure/azcollection/azure_rm_inventory.html',\n  controller: 'https://docs.ansible.com/ansible/latest/collections/awx/awx/tower_inventory.html',\n  gce: 'https://docs.ansible.com/ansible/latest/collections/google/cloud/gcp_compute_inventory.html',\n  insights:\n    'https://docs.ansible.com/ansible/latest/collections/redhatinsights/insights/insights_inventory.html',\n  openstack:\n    'https://docs.ansible.com/ansible/latest/collections/openstack/cloud/openstack_inventory.html',\n  satellite6:\n    'https://docs.ansible.com/ansible/latest/collections/theforeman/foreman/foreman_inventory.html',\n  rhv: 'https://docs.ansible.com/ansible/latest/collections/ovirt/ovirt/ovirt_inventory.html',\n  vmware:\n    'https://docs.ansible.com/ansible/latest/collections/community/vmware/vmware_vm_inventory_inventory.html',\n  constructed:\n    'https://docs.ansible.com/ansible/latest/collections/ansible/builtin/constructed_inventory.html',\n  terraform:\n    'https://console.redhat.com/ansible/automation-hub/repo/published/cloud/terraform/content/inventory/terraform_state/',\n};\n","import { Trans, useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { ansibleDocUrls } from '../../../main/ansibleDocsUrls';\n\nexport function LabelHelp(props: { inventoryKind: string }) {\n  const { t } = useTranslation();\n  const inventoryKind = props.inventoryKind;\n  const jsonExample = `\n  {\n    \"somevar\": \"somevalue\"\n    \"somepassword\": \"Magic\"\n  }\n`;\n  const yamlExample = `\n  ---\n  somevar: somevalue\n  somepassword: magic\n`;\n\n  const yamlExampleConstructed = `\n      ---\n      plugin: constructed\n      strict: true\n      use_vars_plugins: true\n    `;\n\n  const labelHelpVarsInventory = (\n    <>\n      <Trans>\n        Variables must be in JSON or YAML syntax. Use the radio button to toggle between the two.\n      </Trans>\n      <br />\n      <br />\n      <Trans>JSON:</Trans>\n      <pre>{jsonExample}</pre>\n      <br />\n      <Trans>YAML:</Trans>\n      <pre>{yamlExample}</pre>\n      <br />\n      <Trans>\n        View JSON examples at{' '}\n        <Link to=\"https://www.json.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          www.json.org\n        </Link>\n      </Trans>\n      <br />\n      <Trans>\n        View YAML examples at{' '}\n        <Link\n          to=\"https://docs.ansible.com/YAMLSyntax.html\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          docs.ansible.com\n        </Link>\n      </Trans>\n    </>\n  );\n\n  const labelHelpVarsSmartInventory = (\n    <>\n      {t(`Enter inventory variables using either JSON or YAML syntax. \n  Use the radio button to toggle between the two. \n  Refer to the Ansible Controller documentation for example syntax.\n  `)}\n    </>\n  );\n\n  const labelHelpVarsConstructedInventory = (\n    <>\n      <Trans>\n        Variables used to configure the constructed inventory plugin. For a detailed description of\n        how to configure this plugin, see{' '}\n        <a href={ansibleDocUrls.constructed} target=\"_blank\" rel=\"noopener noreferrer\">\n          constructed inventory\n        </a>{' '}\n        plugin configuration guide.\n      </Trans>\n      <br />\n      <br />\n      <hr />\n      <br />\n      <Trans>\n        Variables must be in JSON or YAML syntax. Use the radio button to toggle between the two.\n      </Trans>\n      <br />\n      <br />\n      <Trans>YAML:</Trans>\n      <pre>{yamlExampleConstructed}</pre>\n    </>\n  );\n\n  return inventoryKind === ''\n    ? labelHelpVarsInventory\n    : inventoryKind === 'smart'\n      ? labelHelpVarsSmartInventory\n      : labelHelpVarsConstructedInventory;\n}\n","import { Trans, useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageFormCheckbox,\n  PageFormDataEditor,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { PageFormGroup } from '../../../../framework/PageForm/Inputs/PageFormGroup';\nimport { PageFormTextInput } from '../../../../framework/PageForm/Inputs/PageFormTextInput';\nimport { PageFormSubmitHandler } from '../../../../framework/PageForm/PageForm';\nimport { PageFormSection } from '../../../../framework/PageForm/Utils/PageFormSection';\nimport { postRequest, requestPatch } from '../../../common/crud/Data';\nimport { useGet } from '../../../common/crud/useGet';\nimport { usePostRequest } from '../../../common/crud/usePostRequest';\nimport { PageFormSelectOrganization } from '../../access/organizations/components/PageFormOrganizationSelect';\nimport { PageFormInstanceGroupSelect } from '../../administration/instance-groups/components/PageFormInstanceGroupSelect';\nimport { AwxItemsResponse } from '../../common/AwxItemsResponse';\nimport { AwxPageForm } from '../../common/AwxPageForm';\nimport { PageFormLabelSelect } from '../../common/PageFormLabelSelect';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { getAddedAndRemoved } from '../../common/util/getAddedAndRemoved';\nimport { InstanceGroup } from '../../interfaces/InstanceGroup';\nimport { Inventory } from '../../interfaces/Inventory';\nimport { Label } from '../../interfaces/Label';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { requestGet } from '../../../common/crud/Data';\nimport { PageFormMultiSelectAwxResource } from '../../common/PageFormMultiSelectAwxResource';\nimport { useInventoriesColumns } from './hooks/useInventoriesColumns';\nimport { useInventoriesFilters } from './hooks/useInventoriesFilters';\nimport { TFunction } from 'i18next';\nimport { PageFormSingleSelect } from '../../../../framework/PageForm/Inputs/PageFormSingleSelect';\nimport { AwxError } from '../../common/AwxError';\nimport { ConstructedInventoryHint } from './components/ConstructedInventoryHint';\nimport { LabelHelp } from './components/LabelHelp';\nimport { valueToObject } from '../../../../framework';\n\nexport type InventoryCreate = Inventory & {\n  instanceGroups: InstanceGroup[];\n  labels: Label[];\n  inventories?: Inventory[];\n  inputInventories?: InputInventory[];\n};\n\nconst kinds: { [key: string]: string } = {\n  '': 'inventory',\n  smart: 'smart_inventory',\n  constructed: 'constructed_inventory',\n};\n\nexport function CreateInventory(props: { inventoryKind: '' | 'constructed' | 'smart' }) {\n  const { t } = useTranslation();\n  const { inventoryKind } = props;\n  const pageNavigate = usePageNavigate();\n  const postRequest = usePostRequest<Inventory, Inventory>();\n\n  const onSubmit: PageFormSubmitHandler<InventoryCreate> = async (data) => {\n    const { instanceGroups, ...inventory } = data;\n\n    let inputInventories: InputInventory[] = [];\n    if (props.inventoryKind === 'constructed') {\n      inputInventories = await loadInputInventories(data.inventories || [], t);\n      data.inputInventories = inputInventories;\n    }\n\n    const urlType =\n      props.inventoryKind === 'constructed' ? 'constructed_inventories' : 'inventories';\n    const newInventory = await postRequest(awxAPI`/${urlType}/`, inventory);\n\n    const promises: Promise<unknown>[] = [];\n    // Update new inventory with selected instance groups\n    if (instanceGroups?.length > 0)\n      promises.push(submitInstanceGroups(newInventory, instanceGroups ?? [], []));\n\n    // Update new inventory with selected input inventories\n    if (\n      props.inventoryKind === 'constructed' &&\n      data?.inventories?.length &&\n      data.inventories.length > 0\n    ) {\n      promises.push(submitInputInventories(newInventory, inputInventories || [], []));\n    }\n\n    // Update new inventory with selected labels\n    if (newInventory.kind === '' && data.labels.length > 0)\n      promises.push(submitLabels(newInventory, data.labels));\n\n    await Promise.all(promises);\n\n    pageNavigate(AwxRoute.InventoryDetails, {\n      params: { inventory_type: kinds[newInventory.kind], id: newInventory.id },\n    });\n  };\n\n  const getPageUrl = useGetPageUrl();\n  const title =\n    inventoryKind === ''\n      ? t('Create inventory')\n      : inventoryKind === 'smart'\n        ? t('Create smart inventory')\n        : t('Create constructed inventory');\n\n  const defaultValue =\n    inventoryKind === 'smart'\n      ? {\n          kind: inventoryKind,\n          name: '',\n          description: '',\n          instanceGroups: [],\n          variables: '---\\n',\n        }\n      : inventoryKind === 'constructed'\n        ? {\n            kind: inventoryKind,\n            name: '',\n            description: '',\n            instanceGroups: [],\n            inputInventories: [],\n            verbosity: 0,\n            update_cache_timeout: 0,\n            limit: '',\n            source_vars: '',\n          }\n        : {\n            kind: inventoryKind,\n            name: '',\n            description: '',\n            instanceGroups: [],\n            labels: [],\n            variables: '---\\n',\n            prevent_instance_group_fallback: false,\n          };\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={title}\n        breadcrumbs={[\n          { label: t('Inventories'), to: getPageUrl(AwxRoute.Inventories) },\n          { label: title },\n        ]}\n      />\n      <AwxPageForm\n        submitText={t('Create inventory')}\n        onSubmit={onSubmit}\n        disableSubmitOnEnter={true}\n        onCancel={() => pageNavigate(AwxRoute.Inventories)}\n        defaultValue={defaultValue}\n      >\n        <InventoryInputs inventoryKind={inventoryKind} />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n\nexport function EditInventory() {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const params = useParams<{ id?: string; inventory_type: string }>();\n  const id = Number(params.id);\n\n  const urlType =\n    params.inventory_type === 'constructed_inventory' ? 'constructed_inventories' : 'inventories';\n\n  const inventoryRequest = useGet<Inventory>(awxAPI`/${urlType}/${id.toString()}/`);\n  const iGroupsRequest = useGet<AwxItemsResponse<InstanceGroup>>(\n    awxAPI`/inventories/${id.toString()}/instance_groups/`\n  );\n  const inventory = inventoryRequest.data;\n  const igResponse = iGroupsRequest.data;\n\n  const inputInventoriesUrl =\n    params.inventory_type === 'constructed_inventory'\n      ? awxAPI`/inventories/${id.toString()}/input_inventories/`\n      : '';\n  const inputInventoriesRequest = useGet<AwxItemsResponse<InputInventory>>(inputInventoriesUrl);\n\n  const inputInventoriesResponse = inputInventoriesRequest.data;\n\n  // Fetch instance groups associated with the inventory\n  const originalInstanceGroups = igResponse?.results;\n\n  const onSubmit: PageFormSubmitHandler<InventoryCreate> = async (data) => {\n    const { labels, instanceGroups, ...editedInventory } = data;\n\n    let inputInventories: InputInventory[] = [];\n    if (params.inventory_type === 'constructed_inventory') {\n      inputInventories = await loadInputInventories(data.inventories || [], t);\n      data.inputInventories = inputInventories;\n    }\n\n    // Update the inventory\n    const updatedInventory = await requestPatch<Inventory>(\n      awxAPI`/${urlType}/${id.toString()}/`,\n      editedInventory\n    );\n    const promises = [];\n    // Update inventory with selected instance groups\n    promises.push(\n      submitInstanceGroups(updatedInventory, instanceGroups ?? [], originalInstanceGroups ?? [])\n    );\n\n    if (params.inventory_type === 'inventory') {\n      promises.push(submitLabels(inventory as Inventory, labels || []));\n    }\n\n    // Update new inventory with selected input inventories\n    if (\n      params.inventory_type === 'constructed_inventory' &&\n      data?.inventories?.length &&\n      data.inventories.length > 0\n    ) {\n      promises.push(\n        submitInputInventories(\n          data,\n          inputInventories || [],\n          inputInventoriesResponse?.results || []\n        )\n      );\n    }\n\n    await Promise.all(promises);\n\n    pageNavigate(AwxRoute.InventoryDetails, {\n      params: { id: updatedInventory.id, inventory_type: params.inventory_type },\n    });\n  };\n\n  const getPageUrl = useGetPageUrl();\n\n  const isLoaded =\n    inventory &&\n    igResponse &&\n    (params.inventory_type === 'constructed_inventory' ? inputInventoriesResponse : true)\n      ? true\n      : false;\n\n  const isError = inventoryRequest.error || iGroupsRequest.error || inputInventoriesRequest.error;\n\n  if (!isLoaded || !inventory || isError) {\n    return (\n      <PageLayout>\n        <PageHeader\n          breadcrumbs={[\n            { label: t('Inventories'), to: getPageUrl(AwxRoute.Inventories) },\n            { label: t('Edit Inventory') },\n          ]}\n        />\n        {!isLoaded && !isError && <LoadingPage></LoadingPage>}\n        {inventoryRequest.error && <AwxError error={inventoryRequest.error} />}\n        {iGroupsRequest.error && <AwxError error={iGroupsRequest.error} />}\n        {inputInventoriesRequest.error && <AwxError error={inputInventoriesRequest.error} />}\n      </PageLayout>\n    );\n  }\n\n  const defaultValue =\n    inventory.kind === 'smart'\n      ? { ...inventory, instanceGroups: originalInstanceGroups }\n      : inventory.kind === 'constructed'\n        ? {\n            ...inventory,\n            instanceGroups: originalInstanceGroups,\n            inventories: inputInventoriesResponse?.results as Inventory[],\n          }\n        : {\n            ...inventory,\n            instanceGroups: originalInstanceGroups,\n            labels: inventory.summary_fields?.labels?.results ?? [],\n          };\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={\n          inventory?.name\n            ? t('Edit {{inventoryName}}', { inventoryName: inventory?.name })\n            : t('Inventory')\n        }\n        breadcrumbs={[\n          { label: t('Inventories'), to: getPageUrl(AwxRoute.Inventories) },\n          {\n            label: inventory?.name\n              ? t('Edit {{inventoryName}}', { inventoryName: inventory?.name })\n              : t('Inventory'),\n          },\n        ]}\n      />\n      <AwxPageForm<InventoryCreate>\n        submitText={t('Save inventory')}\n        onSubmit={onSubmit}\n        disableSubmitOnEnter={true}\n        onCancel={() =>\n          pageNavigate(AwxRoute.InventoryDetails, {\n            params: { id, inventory_type: kinds[inventory.kind] },\n          })\n        }\n        defaultValue={defaultValue}\n      >\n        <InventoryInputs inventoryKind={inventory.kind} />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n\nexport function useInventoryFormDetailLabels() {\n  const { t } = useTranslation();\n\n  return {\n    labels: t(\n      `Optional labels that describe this inventory, such as \"dev\" or \"test\". Labels can be used to group and filter inventories and completed jobs.`\n    ),\n    verbosity: t(\n      'The verbosity level for the related auto-created inventory source, special to constructed inventory.'\n    ),\n    cache_timeout: t(\n      `The cache timeout for the related auto-created inventory source, special to constructed inventory.`\n    ),\n    limit: t(\n      `The limit to restrict the returned hosts for the related auto-created inventory source, special to constructed inventory.`\n    ),\n    prevent_instance_group_fallback: t(\n      `Prevent instance group fallback: If enabled, the inventory will prevent adding any organization instance groups to the list of preferred instances groups to run associated job templates on. Note: If this setting is enabled and you provided an empty list, the global instance groups will be applied.`\n    ),\n    input_inventories: t(\n      `Input inventories for the constructed inventory plugin. The order of the displayed chips in the field will be the order of execution.`\n    ),\n  };\n}\n\nfunction InventoryInputs(props: { inventoryKind: string }) {\n  const { t } = useTranslation();\n  const { inventoryKind } = props;\n  const inventoryFormDetailLabels = useInventoryFormDetailLabels();\n  return (\n    <>\n      <PageFormTextInput<InventoryCreate>\n        name=\"name\"\n        label={t('Name')}\n        placeholder={t('Enter name')}\n        isRequired\n      />\n      <PageFormTextInput<InventoryCreate>\n        label={t('Description')}\n        name=\"description\"\n        placeholder={t('Enter description')}\n      />\n      <PageFormSelectOrganization<InventoryCreate> name=\"organization\" isRequired />\n      {inventoryKind === 'smart' && (\n        <PageFormTextInput<InventoryCreate>\n          name=\"host_filter\"\n          label={t('Smart host filter')}\n          labelHelp={\n            <>\n              <Trans>\n                Populate the hosts for this inventory by using a search filter.\n                <br />\n                Example: {''}\n                <br />\n                <code>\n                  <b>name__icontains=RedHat</b>\n                </code>\n                <br />\n              </Trans>\n              {t(\n                'Note: Smart inventories have been deprecated in favor of constructed inventories. Refer to the Ansible Controller documentation for further syntax and examples.'\n              )}\n            </>\n          }\n          placeholder={t('Enter smart host filter')}\n          isRequired\n        />\n      )}\n      <PageFormInstanceGroupSelect<InventoryCreate>\n        name=\"instanceGroups\"\n        labelHelp={t(`Select the instance groups for this inventory to run on.`)}\n      />\n      {inventoryKind === 'constructed' && (\n        <>\n          <PageFormMultiSelectInventories />\n          <PageFormTextInput\n            name=\"update_cache_timeout\"\n            id=\"update_cache_timeout\"\n            type=\"number\"\n            label={t(`Cache timeout (seconds)`)}\n            labelHelp={inventoryFormDetailLabels.cache_timeout}\n            validate={(item) =>\n              Number.parseFloat(item) >= 0\n                ? undefined\n                : t('This field must be a number and have a value between 0 and 2147483647')\n            }\n          />\n          <PageFormSingleSelect\n            name=\"verbosity\"\n            id=\"verbosity\"\n            label={t(`Verbosity`)}\n            placeholder={''}\n            labelHelp={inventoryFormDetailLabels.verbosity}\n            options={[\n              { value: 0, label: t('0 (Normal)') },\n              { value: 1, label: t('1 (Verbose)') },\n              { value: 2, label: t('2 (More Verbose)') },\n              { value: 3, label: t('3 (Debug)') },\n              { value: 4, label: t('4 (Connection Debug)') },\n              { value: 5, label: t('5 (WinRM Debug)') },\n            ]}\n          />\n          <PageFormSection singleColumn>\n            <ConstructedInventoryHint />\n          </PageFormSection>\n          <PageFormTextInput\n            name=\"limit\"\n            id=\"limit\"\n            label={t(`Limit`)}\n            labelHelp={inventoryFormDetailLabels.limit}\n          />\n        </>\n      )}\n      {inventoryKind === '' && (\n        <PageFormLabelSelect<InventoryCreate>\n          labelHelpTitle={t('Labels')}\n          labelHelp={inventoryFormDetailLabels.labels}\n          name=\"labels\"\n        />\n      )}\n      <PageFormSection singleColumn>\n        <PageFormDataEditor<InventoryCreate>\n          name={inventoryKind === 'constructed' ? 'source_vars' : 'variables'}\n          label={inventoryKind === 'constructed' ? t('Source variables') : t('Variables')}\n          format=\"yaml\"\n          isRequired={inventoryKind === 'constructed' ? true : false}\n          labelHelp={<LabelHelp inventoryKind={inventoryKind} />}\n          validate={(item) => {\n            if (inventoryKind !== 'constructed') {\n              return undefined;\n            }\n            const obj = valueToObject(item) as { plugin?: unknown };\n            if (obj.plugin) {\n              return undefined;\n            } else {\n              return t(`The plugin parameter is required.`);\n            }\n          }}\n        />\n      </PageFormSection>\n      {inventoryKind === '' && (\n        <PageFormGroup label={t('Options')}>\n          <PageFormCheckbox<InventoryCreate>\n            label={t('Prevent instance group fallback')}\n            labelHelpTitle={t('Prevent instance group fallback')}\n            labelHelp={inventoryFormDetailLabels.prevent_instance_group_fallback}\n            name=\"prevent_instance_group_fallback\"\n          />\n        </PageFormGroup>\n      )}\n    </>\n  );\n}\n\nasync function submitLabels(inventory: Inventory, labels: Label[]) {\n  const { added, removed } = getAddedAndRemoved(\n    inventory.summary_fields?.labels?.results || ([] as Label[]),\n    labels ?? ([] as Label[])\n  );\n\n  const disassociationPromises = removed.map((label: { id: number }) =>\n    postRequest(awxAPI`/inventories/${inventory.id.toString()}/labels/`, {\n      id: label.id,\n      disassociate: true,\n    })\n  );\n  const associationPromises = added.map((label: { name: string }) =>\n    postRequest(awxAPI`/inventories/${inventory.id.toString()}/labels/`, {\n      name: label.name,\n      organization: inventory.organization,\n    })\n  );\n\n  const results = await Promise.all([...disassociationPromises, ...associationPromises]);\n  return results;\n}\n\nasync function submitInstanceGroups(\n  inventory: Inventory,\n  currentInstanceGroups: InstanceGroup[],\n  originalInstanceGroups: InstanceGroup[]\n) {\n  const { added, removed } = getAddedAndRemoved<InstanceGroup>(\n    originalInstanceGroups,\n    currentInstanceGroups\n  );\n\n  if (added.length === 0 && removed.length === 0) {\n    return;\n  }\n\n  const disassociationPromises = removed.map((instanceGroup: { id: number }) =>\n    postRequest(awxAPI`/inventories/${inventory.id.toString()}/instance_groups/`, {\n      id: instanceGroup.id,\n      disassociate: true,\n    })\n  );\n  const associationPromises = added.map((instanceGroup: { id: number }) =>\n    postRequest(awxAPI`/inventories/${inventory.id.toString()}/instance_groups/`, {\n      id: instanceGroup.id,\n    })\n  );\n\n  const results = await Promise.all([...disassociationPromises, ...associationPromises]);\n  return results;\n}\n\nasync function submitInputInventories(\n  inventory: Inventory,\n  currentInputInventories: InputInventory[],\n  originalInputInventories: InputInventory[]\n) {\n  for (const item of originalInputInventories) {\n    await postRequest(awxAPI`/inventories/${inventory.id.toString()}/input_inventories/`, {\n      id: item.id,\n      disassociate: true,\n    });\n  }\n\n  for (const item of currentInputInventories) {\n    await postRequest(awxAPI`/inventories/${inventory.id.toString()}/input_inventories/`, {\n      id: item.id,\n    });\n  }\n}\n\ntype InputInventory = { id: number; url: string; type: string; name: string };\n\nasync function loadInputInventories(\n  inventories: Inventory[],\n  t: TFunction<'translation', undefined>\n) {\n  const promises: unknown[] = [];\n  const inventoriesData: InputInventory[] = inventories.map((inv) => {\n    return { id: inv.id, url: '', type: '', name: '' };\n  });\n  inventories.forEach((inventory) => {\n    const promise = requestGet<AwxItemsResponse<Inventory>>(\n      awxAPI`/inventories/?id=${inventory.id.toString()}`\n    )\n      .then((result: AwxItemsResponse<Inventory>) => {\n        if (result.results.length > 0) {\n          const inv = inventoriesData.find((inv) => inv.id === inventory.id);\n          if (inv) {\n            inv.url = result.results[0].url || '';\n            inv.type = result.results[0].type || '';\n          }\n        }\n      })\n      .catch(() => {\n        throw new Error(t(`Error loading input inventory with id {{id}}.`, { id: inventory.id }));\n      });\n\n    promises.push(promise);\n  });\n\n  await Promise.all(promises);\n  return inventoriesData;\n}\n\nfunction PageFormMultiSelectInventories() {\n  const filters = useInventoriesFilters();\n  const columns = useInventoriesColumns();\n  const { t } = useTranslation();\n  const labels = useInventoryFormDetailLabels();\n\n  return (\n    <PageFormMultiSelectAwxResource<Inventory>\n      name={'inventories'}\n      id={'inventories'}\n      label={t('Input inventories')}\n      placeholder={t('Select inventories')}\n      queryPlaceholder={t('Loading inventories...')}\n      queryErrorText={t('Error loading inventories')}\n      isRequired={true}\n      labelHelp={labels.input_inventories}\n      url={awxAPI`/inventories/`}\n      tableColumns={columns}\n      toolbarFilters={filters}\n      queryParams={{ kind: '' }}\n      compareOptionValues={(originalInv: Inventory, selectedInv: Inventory) =>\n        originalInv.id === selectedInv.id\n      }\n    />\n  );\n}\n","import { Popover, Tooltip } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon as PFExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { PageDetail, useGetPageUrl } from '../../../framework';\nimport { ExecutionEnvironment } from '../interfaces/ExecutionEnvironment';\nimport { SummaryFieldsExecutionEnvironment } from '../interfaces/summary-fields/summary-fields';\nimport { AwxRoute } from '../main/AwxRoutes';\nimport { useAwxConfig } from './useAwxConfig';\nimport { useGetDocsUrl } from './util/useGetDocsUrl';\n\nconst ExclamationTriangleIcon = styled(PFExclamationTriangleIcon)`\n  color: var(--pf-v5-global--warning-color--100);\n  margin-left: 18px;\n  cursor: pointer;\n`;\n\nconst ExclamationTrianglePopover = styled(PFExclamationTriangleIcon)`\n  color: var(--pf-v5-global--warning-color--100);\n  margin-left: 18px;\n  cursor: pointer;\n`;\n\nExclamationTrianglePopover.displayName = 'ExclamationTrianglePopover';\n\nfunction ExecutionEnvironmentDetail(props: {\n  executionEnvironment: ExecutionEnvironment | SummaryFieldsExecutionEnvironment | undefined;\n  isDefaultEnvironment: boolean;\n  virtualEnvironment?: string;\n  verifyMissingVirtualEnv?: boolean;\n  helpText?: string;\n}) {\n  const {\n    executionEnvironment,\n    isDefaultEnvironment,\n    virtualEnvironment,\n    verifyMissingVirtualEnv,\n    helpText,\n  } = props;\n  const { t } = useTranslation();\n  const config = useAwxConfig();\n  const docsLink = useGetDocsUrl(config, 'eeMigration');\n  const label = isDefaultEnvironment\n    ? t('Default execution environment')\n    : t('Execution environment');\n  const getPageUrl = useGetPageUrl();\n\n  if (executionEnvironment) {\n    return (\n      <PageDetail label={label} helpText={helpText}>\n        <Link\n          to={getPageUrl(AwxRoute.ExecutionEnvironmentDetails, {\n            params: { id: executionEnvironment.id },\n          })}\n        >\n          {executionEnvironment.name}\n        </Link>\n      </PageDetail>\n    );\n  }\n  if (verifyMissingVirtualEnv && virtualEnvironment && !executionEnvironment) {\n    return (\n      <PageDetail label={label} helpText={helpText}>\n        {t`Missing resource`}\n        <span>\n          <Popover\n            className=\"missing-execution-environment\"\n            headerContent={<div>{t`Execution environment missing`}</div>}\n            bodyContent={\n              <div>\n                <Trans>\n                  Custom virtual environment {virtualEnvironment} must be replaced by an execution\n                  environment. For more information about migrating to execution environments see{' '}\n                  <a href={docsLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                    the documentation.\n                  </a>\n                </Trans>\n              </div>\n            }\n            position=\"right\"\n          >\n            <ExclamationTrianglePopover />\n          </Popover>\n        </span>\n      </PageDetail>\n    );\n  }\n  if (!verifyMissingVirtualEnv && !virtualEnvironment && !executionEnvironment) {\n    return (\n      <PageDetail label={t`Execution environment`} helpText={helpText}>\n        {t`Missing resource`}\n        <span>\n          <Tooltip content={t`Execution environment is missing or deleted.`}>\n            <ExclamationTriangleIcon />\n          </Tooltip>\n        </span>\n      </PageDetail>\n    );\n  }\n\n  return null;\n}\n\nexport { ExecutionEnvironmentDetail };\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport {\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { useCallback } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { Link, useParams } from 'react-router-dom';\nimport {\n  DateTimeCell,\n  LoadingPage,\n  PageDetail,\n  PageDetails,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { PageDetailCodeEditor } from '../../../../../framework/PageDetails/PageDetailCodeEditor';\nimport { StandardPopover } from '../../../../../framework/components/StandardPopover';\nimport { formatDateString } from '../../../../../framework/utils/dateTimeHelpers';\nimport { LastModifiedPageDetail } from '../../../../common/LastModifiedPageDetail';\nimport { StatusLabel } from '../../../../common/Status';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { AwxError } from '../../../common/AwxError';\nimport { CredentialLabel } from '../../../common/CredentialLabel';\nimport { ExecutionEnvironmentDetail } from '../../../common/ExecutionEnvironmentDetail';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxWebSocketSubscription } from '../../../common/useAwxWebSocket';\nimport { useVerbosityString } from '../../../common/useVerbosityString';\nimport { InventorySource } from '../../../interfaces/InventorySource';\nimport { ActionsResponse, OptionsResponse } from '../../../interfaces/OptionsResponse';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { ansibleDocUrls } from '../../../main/ansibleDocsUrls';\n\nexport type WebsocketInventorySource = {\n  status: string;\n} & InventorySource;\n\nexport function InventorySourceDetails(props: {\n  inventorySourceId?: string;\n  disableScroll?: boolean;\n}) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const params = useParams<{ source_id: string; id: string }>();\n  const urlId = props?.inventorySourceId ? props.inventorySourceId : params.source_id;\n\n  const getPageUrl = useGetPageUrl();\n  const {\n    data: inventorySource,\n    error,\n    refresh,\n  } = useGetItem<InventorySource>(awxAPI`/inventory_sources/`, urlId);\n  const { data } = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/inventory_sources/`);\n  const handleWebSocketMessage = useCallback(\n    (message?: { group_name?: string; type?: string }) => {\n      switch (message?.group_name) {\n        case 'jobs':\n          switch (message?.type) {\n            case 'job':\n            case 'workflow_job':\n            case 'project_update':\n            case 'inventory_update':\n              void refresh();\n              break;\n          }\n          break;\n      }\n    },\n    [refresh]\n  );\n  useAwxWebSocketSubscription(\n    { control: ['limit_reached_1'], jobs: ['status_changed'] },\n    handleWebSocketMessage as (data: unknown) => void\n  );\n\n  const sourceChoices: Record<string, string> | null = {};\n  if (data?.actions?.GET?.source?.choices?.length) {\n    const { actions } = data;\n    actions?.GET?.source?.choices?.forEach(([key, val]) => (sourceChoices[`${key}`] = val));\n  }\n\n  const verbosityString = useVerbosityString(inventorySource?.verbosity);\n  if (error) return <AwxError error={error} handleRefresh={refresh} />;\n  if (!inventorySource) return <LoadingPage breadcrumbs tabs />;\n  const { summary_fields, overwrite, overwrite_vars, update_on_launch, source } = inventorySource;\n  let optionsList = null;\n  if (overwrite || overwrite_vars || update_on_launch) {\n    optionsList = (\n      <TextList component={TextListVariants.ul}>\n        {overwrite && (\n          <TextListItem component={TextListItemVariants.li}>\n            {t`Overwrite`}\n            <StandardPopover\n              header=\"\"\n              content={t(\n                'If checked, any hosts and groups that were previously present on the external source but are now removed will be removed from the inventory. Hosts and groups that were not managed by the inventory source will be promoted to the next manually created group or if there is no manually created group to promote them into, they will be left in the \"all\" default group for the inventory. \\n \\n When not checked, local child hosts and groups not found on the external source will remain untouched by the inventory update process.'\n              )}\n            />\n          </TextListItem>\n        )}\n        {overwrite_vars && (\n          <TextListItem component={TextListItemVariants.li}>\n            {t`Overwrite variables`}\n            <StandardPopover\n              header=\"\"\n              content={\n                'If checked, all variables for child groups and hosts will be removed and replaced by those found on the external source. \\n \\n When not checked, a merge will be performed, combining local variables with those found on the external source.'\n              }\n            />\n          </TextListItem>\n        )}\n        {update_on_launch && (\n          <TextListItem component={TextListItemVariants.li}>\n            {t`Update on launch`}\n            <StandardPopover\n              header=\"\"\n              content={t(\n                'Each time a job runs using this inventory, refresh the inventory from the selected source before executing job tasks. This will ensure the most up-to-date inventory information is used during the job run.'\n              )}\n            />\n          </TextListItem>\n        )}\n      </TextList>\n    );\n  }\n\n  const getSourceVarsHelpText = (source: string) => {\n    let sourceType = '';\n    if (source && source !== 'scm') {\n      const type: string[] = ansibleDocUrls[source]?.split(/[/,.]/) ?? [];\n      sourceType = type[type.length - 2];\n    }\n\n    return (\n      <>\n        <Trans>\n          Variables used to configure the inventory source. For a detailed description of how to\n          configure this plugin, see{' '}\n          <a\n            href={\n              'https://docs.ansible.com/ansible/latest/plugins/inventory.html#inventory-plugins'\n            }\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Inventory Plugins\n          </a>{' '}\n          in the documentation and the{' '}\n          <a href={ansibleDocUrls[source]} target=\"_blank\" rel=\"noopener noreferrer\">\n            {sourceType}\n          </a>{' '}\n          plugin configuration guide.\n        </Trans>\n        <br />\n        <br />\n      </>\n    );\n  };\n  const lastJob: { id: number; status: string; finished: string } =\n    summary_fields.current_job || summary_fields.last_job;\n\n  return (\n    <PageDetails disableScroll={props.disableScroll}>\n      <PageDetail label={t`Name`}>\n        {props.inventorySourceId ? (\n          <Link\n            to={getPageUrl(AwxRoute.InventorySourceDetail, {\n              params: {\n                source_id: inventorySource.id,\n                id: inventorySource?.inventory,\n                inventory_type:\n                  inventorySource?.summary_fields?.inventory.kind === ''\n                    ? 'inventory'\n                    : inventorySource?.summary_fields?.inventory.kind,\n              },\n            })}\n          >\n            {inventorySource.name}\n          </Link>\n        ) : (\n          inventorySource.name\n        )}\n      </PageDetail>\n      {lastJob ? (\n        <PageDetail label={t`Last job status`}>\n          <Tooltip\n            position=\"top\"\n            content={lastJob ? <LastJobTooltip job={lastJob} /> : undefined}\n            key={lastJob.id}\n          >\n            <Link\n              to={getPageUrl(AwxRoute.JobOutput, {\n                params: { id: lastJob.id, job_type: 'inventory' },\n              })}\n            >\n              <StatusLabel status={lastJob.status} />\n            </Link>\n          </Tooltip>\n        </PageDetail>\n      ) : null}\n      <PageDetail label={t`Description`}>{inventorySource.description}</PageDetail>\n      <PageDetail label={t`Source`}>{sourceChoices[source]}</PageDetail>\n      <PageDetail isEmpty={!summary_fields.organization} label={t`Organization`}>\n        <Link\n          to={getPageUrl(AwxRoute.OrganizationDetails, {\n            params: { id: summary_fields.organization.id },\n          })}\n        >\n          {summary_fields.organization.name}\n        </Link>\n      </PageDetail>\n      {summary_fields.execution_environment ? (\n        <ExecutionEnvironmentDetail\n          isDefaultEnvironment={false}\n          virtualEnvironment={inventorySource.custom_virtualenv ?? undefined}\n          executionEnvironment={summary_fields.execution_environment}\n        />\n      ) : null}\n      <PageDetail isEmpty={!summary_fields.source_project} label={t`Project`}>\n        <Link\n          to={getPageUrl(AwxRoute.ProjectDetails, {\n            params: { id: summary_fields.source_project?.id },\n          })}\n        >\n          {summary_fields?.source_project?.name}\n        </Link>\n      </PageDetail>\n      <PageDetail\n        isEmpty={!inventorySource.source}\n        label={t`Inventory file`}\n        helpText={t(\n          'The inventory file to be synced by this source. You can select from the dropdown or enter a file within the input.'\n        )}\n      >\n        {inventorySource.source_path === '' ? t`/ (project root)` : inventorySource.source_path}\n      </PageDetail>\n      <PageDetail\n        label={t`Verbosity`}\n        helpText={t(t`Control the level of output Ansible\n        will produce for inventory source update jobs.`)}\n      >\n        {verbosityString}\n      </PageDetail>\n      <PageDetail\n        label={t`Source control branch`}\n        helpText={t(\n          'Branch to use on inventory sync. Project default used if blank. Only allowed if project allow_override field is set to true.'\n        )}\n      >\n        {inventorySource.scm_branch}\n      </PageDetail>\n      <PageDetail\n        label={t`Cache timeout`}\n        helpText={t(\n          'Time in seconds to consider an inventory sync to be current. During job runs and callbacks the task system will evaluate the timestamp of the latest sync. If it is older than Cache Timeout, it is not considered current, and a new inventory sync will be performed.'\n        )}\n      >\n        {`${inventorySource.update_cache_timeout} ${t`seconds`}`}\n      </PageDetail>\n      <PageDetail\n        label={t`Host filter`}\n        helpText={t(\n          'Regular expression where only matching host names will be imported. The filter is applied as a post-processing step after any inventory plugin filters are applied.'\n        )}\n      >\n        {inventorySource.host_filter}\n      </PageDetail>\n      <PageDetail\n        label={t`Enabled variable`}\n        helpText={t(`Retrieve the enabled state from the given dict of host variables.\n        The enabled variable may be specified using dot notation, e.g: 'foo.bar'`)}\n      >\n        {inventorySource.enabled_var}\n      </PageDetail>\n      <PageDetail\n        label={t`Enabled value`}\n        helpText={t(\n          'This field is ignored unless an Enabled Variable is set. If the enabled variable matches this value, the host will be enabled on import.'\n        )}\n      >\n        {inventorySource.enabled_value}\n      </PageDetail>\n      <PageDetail label={t`Credential`} isEmpty={!summary_fields.credential}>\n        <CredentialLabel credential={summary_fields.credential} />\n      </PageDetail>\n      {optionsList && <PageDetail label={t`Enabled options`}>{optionsList}</PageDetail>}\n      <PageDetailCodeEditor\n        label={t`Source variables`}\n        helpText={getSourceVarsHelpText(inventorySource.source)}\n        showCopyToClipboard\n        data-cy=\"inventory-source-detail-variables\"\n        value={inventorySource.source_vars || '---'}\n      />\n      <PageDetail label={t`Created`}>\n        <DateTimeCell\n          value={inventorySource.created}\n          author={summary_fields?.created_by?.username}\n          onClick={() =>\n            pageNavigate(AwxRoute.UserDetails, { params: { id: summary_fields?.created_by?.id } })\n          }\n        />\n      </PageDetail>\n      <LastModifiedPageDetail\n        value={inventorySource.modified}\n        author={summary_fields?.modified_by?.username}\n        onClick={() =>\n          pageNavigate(AwxRoute.UserDetails, { params: { id: summary_fields?.modified_by?.id } })\n        }\n      />\n    </PageDetails>\n  );\n}\n\nexport function LastJobTooltip(props: { job: { id: number; status: string; finished: string } }) {\n  const job = props.job;\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <div>{t`MOST RECENT SYNC`}</div>\n      <div>\n        {t`JOB ID:`} {job.id}\n      </div>\n      <div>\n        {t`STATUS:`} {job.status.toUpperCase()}\n      </div>\n      {job.finished && (\n        <div>\n          {t`FINISHED:`} {formatDateString(job.finished)}\n        </div>\n      )}\n    </>\n  );\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport {\n  Label,\n  LabelGroup,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useParams } from 'react-router-dom';\nimport {\n  DateTimeCell,\n  PageDetail,\n  PageDetails,\n  TextCell,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { PageDetailCodeEditor } from '../../../../../framework/PageDetails/PageDetailCodeEditor';\nimport { LastModifiedPageDetail } from '../../../../common/LastModifiedPageDetail';\nimport { useGet } from '../../../../common/crud/useGet';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useVerbosityString } from '../../../common/useVerbosityString';\nimport { InstanceGroup } from '../../../interfaces/InstanceGroup';\nimport { ConstructedInventory, Inventory } from '../../../interfaces/Inventory';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { InventorySource } from '../../../interfaces/InventorySource';\nimport { AwxError } from '../../../common/AwxError';\nimport { Tooltip } from '@patternfly/react-core';\nimport { LastJobTooltip } from '../inventorySources/InventorySourceDetails';\nimport { StatusLabel } from '../../../../common/Status';\nimport { useInventoryFormDetailLabels } from '../InventoryForm';\nimport { LabelHelp } from '../components/LabelHelp';\nimport { useOutletContext } from 'react-router-dom';\nimport { useInventoryTypes } from '../hooks/useInventoryTypes';\nimport { INVENTORYURLPATHS } from '../constants';\n\nfunction useInstanceGroups(inventoryId: string) {\n  const { data } = useGet<{ results: InstanceGroup[] }>(\n    awxAPI`/inventories/${inventoryId}/instance_groups/`\n  );\n  return data?.results ?? [];\n}\n\nexport function InventoryDetails() {\n  const { inventory } = useOutletContext<{ inventory: InventoryWithSource }>();\n\n  if (!inventory) {\n    return null;\n  }\n\n  return <InventoryDetailsInner inventory={inventory} />;\n}\n\nexport type InventoryWithSource = Inventory & { source?: InventorySource };\n\nexport function InventoryDetailsInner(props: { inventory: InventoryWithSource }) {\n  const { t } = useTranslation();\n  const inventoryTypes = useInventoryTypes();\n  const inventory = props.inventory;\n  const pageNavigate = usePageNavigate();\n  const params = useParams<{ id: string; inventory_type: string }>();\n  const instanceGroups = useInstanceGroups(params.id || '0');\n  const verbosityString = useVerbosityString(inventory.verbosity);\n  const getPageUrl = useGetPageUrl();\n\n  const { data: inputInventories, error: inputInventoriesError } = useGet<{ results: Inventory[] }>(\n    inventory.kind === 'constructed'\n      ? awxAPI`/inventories/${inventory.id.toString()}/input_inventories/`\n      : ''\n  );\n\n  const inventorySourceData = inventory.source;\n\n  const inventoryFormDetailLables = useInventoryFormDetailLabels();\n\n  const inventorySourceSyncJob =\n    inventorySourceData?.summary_fields?.current_job ||\n    inventorySourceData?.summary_fields?.last_job ||\n    undefined;\n\n  if (inputInventoriesError) {\n    return <AwxError error={inputInventoriesError} />;\n  }\n\n  return (\n    <PageDetails>\n      <PageDetail label={t('Name')}>{inventory.name}</PageDetail>\n      <PageDetailJobStatus\n        job={inventorySourceSyncJob}\n        isEmpty={inventory.kind !== 'constructed'}\n      />\n      <PageDetail label={t('Description')}>{inventory.description}</PageDetail>\n      <PageDetail label={t('Type')}>{inventoryTypes[inventory.kind]}</PageDetail>\n      <PageDetail label={t('Organization')}>\n        <TextCell\n          text={inventory.summary_fields?.organization?.name}\n          to={getPageUrl(AwxRoute.OrganizationDetails, {\n            params: { id: inventory.summary_fields?.organization?.id },\n          })}\n        />\n      </PageDetail>\n      <PageDetail label={t('Smart host filter')} isEmpty={inventory.kind !== 'smart'}>\n        <LabelGroup>\n          <Label>{inventory.host_filter}</Label>\n        </LabelGroup>\n      </PageDetail>\n      <PageDetail\n        label={t('Total hosts')}\n        helpText={t(\n          `This field is deprecated and will be removed in a future release. Total number of hosts in this inventory.`\n        )}\n      >\n        {inventory.total_hosts}\n      </PageDetail>\n      <PageDetail\n        label={t('Hosts with active failures')}\n        isEmpty={inventory.kind !== 'constructed' || inventory.hosts_with_active_failures === 0}\n      >\n        {inventory.hosts_with_active_failures}\n      </PageDetail>\n      <PageDetail\n        label={t('Total groups')}\n        helpText={t(\n          `This field is deprecated and will be removed in a future release. Total number of groups in this inventory.`\n        )}\n        isEmpty={inventory.kind !== 'constructed'}\n      >\n        {inventory.total_groups}\n      </PageDetail>\n      <PageDetail\n        label={t('Total inventory sources')}\n        helpText={t(`Total number of external inventory sources configured within this inventory.`)}\n        isEmpty={inventory.kind !== 'constructed'}\n      >\n        {inventory.total_inventory_sources}\n      </PageDetail>\n      <PageDetail\n        label={t('Inventory sources with active failures')}\n        helpText={t(`Number of external inventory sources in this inventory with failures.`)}\n        isEmpty={inventory.kind !== 'constructed'}\n      >\n        {inventory.inventory_sources_with_failures}\n      </PageDetail>\n      <PageDetail\n        label={t('Limit')}\n        helpText={inventoryFormDetailLables.limit}\n        isEmpty={inventory.kind !== 'constructed'}\n      >\n        {(inventory as ConstructedInventory).limit}\n      </PageDetail>\n      <PageDetail\n        label={t('Verbosity')}\n        helpText={inventoryFormDetailLables.verbosity}\n        isEmpty={inventory.kind !== 'constructed'}\n      >\n        {verbosityString}\n      </PageDetail>\n      <PageDetail\n        label={t('Update cache timeout')}\n        helpText={inventoryFormDetailLables.cache_timeout}\n        isEmpty={inventory.kind !== 'constructed'}\n      >\n        {(inventory as ConstructedInventory).update_cache_timeout}\n      </PageDetail>\n      <PageDetail label={t`Instance groups`} isEmpty={instanceGroups.length === 0}>\n        <LabelGroup>\n          {instanceGroups.map((ig) => (\n            <Label color=\"blue\" key={ig.id}>\n              <Link\n                to={getPageUrl(AwxRoute.InstanceGroupDetails, {\n                  params: {\n                    id: ig.id,\n                  },\n                })}\n              >\n                {ig.name}\n              </Link>\n            </Label>\n          ))}\n        </LabelGroup>\n      </PageDetail>\n      <PageDetail\n        label={t`Input inventories`}\n        helpText={inventoryFormDetailLables.input_inventories}\n        isEmpty={\n          typeof inputInventoriesError === 'undefined' &&\n          (!inputInventories || inputInventories?.results.length === 0)\n        }\n      >\n        {inputInventoriesError ? (\n          t`There was an error fetching the input inventories`\n        ) : (\n          <LabelGroup>\n            {inputInventories?.results.map((inventory) => (\n              <Label color=\"blue\" key={inventory.id}>\n                <Link\n                  to={getPageUrl(AwxRoute.InventoryDetails, {\n                    params: {\n                      inventory_type: INVENTORYURLPATHS[inventory.kind],\n                      id: inventory.id,\n                    },\n                  })}\n                >\n                  {inventory.name}\n                </Link>\n              </Label>\n            ))}\n          </LabelGroup>\n        )}\n      </PageDetail>\n      <PageDetail\n        label={t`Labels`}\n        isEmpty={inventory.summary_fields.labels.results.length === 0}\n        helpText={inventoryFormDetailLables.labels}\n      >\n        <LabelGroup>\n          {inventory.summary_fields.labels.results.map((label) => (\n            <Label color=\"blue\" key={label.id}>\n              {label.name}\n            </Label>\n          ))}\n        </LabelGroup>\n      </PageDetail>\n      <PageDetail label={t('Created')}>\n        <DateTimeCell\n          value={inventory.created}\n          author={inventory.summary_fields?.created_by?.username}\n          onClick={() =>\n            pageNavigate(AwxRoute.UserDetails, {\n              params: { id: inventory.summary_fields?.created_by?.id },\n            })\n          }\n        />\n      </PageDetail>\n      <LastModifiedPageDetail\n        value={inventory.modified}\n        author={inventory.summary_fields?.modified_by?.username}\n        onClick={() =>\n          pageNavigate(AwxRoute.UserDetails, {\n            params: { id: inventory.summary_fields?.modified_by?.id },\n          })\n        }\n      />\n      <PageDetail\n        label={t('Enabled options')}\n        isEmpty={!inventory.prevent_instance_group_fallback}\n        helpText={inventoryFormDetailLables.prevent_instance_group_fallback}\n      >\n        <TextList component={TextListVariants.ul}>\n          {inventory.prevent_instance_group_fallback && (\n            <TextListItem component={TextListItemVariants.li}>\n              {t`Prevent instance group fallback`}\n            </TextListItem>\n          )}\n        </TextList>\n      </PageDetail>\n      <PageDetailCodeEditor\n        helpText={<LabelHelp inventoryKind={inventory.kind} />}\n        label={inventory.kind === 'constructed' ? t('Source variables') : t('Variables')}\n        showCopyToClipboard\n        value={\n          inventory.kind === 'constructed'\n            ? inventory.source_vars || '---'\n            : inventory.variables || '---'\n        }\n      />\n    </PageDetails>\n  );\n}\n\nfunction PageDetailJobStatus(props: {\n  job:\n    | {\n        description: string;\n        failed: boolean;\n        finished: string;\n        id: number;\n        license_error: boolean;\n        name: string;\n        status: string;\n      }\n    | undefined;\n  isEmpty?: boolean;\n}) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const lastJob = props.job;\n  if (!lastJob) {\n    return null;\n  }\n\n  return (\n    <PageDetail label={t`Last job status`} isEmpty={props.isEmpty}>\n      <Tooltip\n        position=\"top\"\n        content={lastJob ? <LastJobTooltip job={lastJob} /> : undefined}\n        key={lastJob.id}\n      >\n        <Link\n          to={getPageUrl(AwxRoute.JobOutput, {\n            params: { id: lastJob.id, job_type: 'inventory' },\n          })}\n        >\n          <StatusLabel status={lastJob.status} />\n        </Link>\n      </Tooltip>\n    </PageDetail>\n  );\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport function useInventoryTypes() {\n  const { t } = useTranslation();\n  return useMemo(\n    () => ({\n      '': t('Inventory'),\n      smart: t('Smart inventory'),\n      constructed: t('Constructed inventory'),\n    }),\n    [t]\n  );\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport { MinusCircleIcon, PencilAltIcon, RocketIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  usePageAlertToaster,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxActiveUser } from '../../../common/useAwxActiveUser';\nimport { InventorySource } from '../../../interfaces/InventorySource';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useCancelIventoryUpdate } from './useCancelInventoryUpdate';\nimport { useDeleteInventorySources } from './useDeleteInventorySources';\n\ntype InventorySourceActionOptions = {\n  onInventorySourcesDeleted: (inventorySources: InventorySource[]) => void;\n  onInvUpdateCanceled: (inventorySources: InventorySource[]) => void;\n};\n\nexport function useInventorySourceActions({\n  onInventorySourcesDeleted,\n  onInvUpdateCanceled,\n}: InventorySourceActionOptions) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const deleteInventorySources = useDeleteInventorySources(onInventorySourcesDeleted);\n  const params = useParams<{ inventory_type: string }>();\n\n  const { activeAwxUser } = useAwxActiveUser();\n  const alertToaster = usePageAlertToaster();\n\n  const postRequest = usePostRequest();\n  const handleUpdate = useCallback(\n    async (invSrc: InventorySource) => {\n      try {\n        await postRequest(awxAPI`/inventory_sources/${invSrc.id.toString()}/update/`, {});\n      } catch (error) {\n        alertToaster.addAlert({\n          variant: 'danger',\n          title: t('Failed to update inventory source'),\n          children: error instanceof Error && error.message,\n          timeout: 5000,\n        });\n      }\n    },\n    [alertToaster, postRequest, t]\n  );\n\n  const cancelInventoryUpdate = useCancelIventoryUpdate(onInvUpdateCanceled);\n\n  return useMemo<IPageAction<InventorySource>[]>(() => {\n    const cannotDeleteInventorySource = (inventorySource: InventorySource): string => {\n      if (inventorySource?.status === 'running') {\n        return t(`The inventory source cannot be deleted due to the source currently running`);\n      }\n\n      if (\n        !inventorySource?.summary_fields?.user_capabilities?.delete &&\n        !activeAwxUser?.is_system_auditor\n      ) {\n        return t(`The inventory source cannot be deleted due to insufficient permission`);\n      }\n\n      return '';\n    };\n    const cannotEditInventorySource = (inventorySource: InventorySource): string =>\n      inventorySource?.summary_fields?.user_capabilities?.edit && activeAwxUser?.is_superuser\n        ? ''\n        : t(`The inventory source cannot be edited due to insufficient permission`);\n    const cannotLaunchInventorySourceUpdate = (inventorySource: InventorySource): string => {\n      return inventorySource.summary_fields.user_capabilities.start && activeAwxUser?.is_superuser\n        ? ''\n        : t(`The inventory source cannot be updated due to insufficient permission`);\n    };\n    const itemActions: IPageAction<InventorySource>[] = [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: PencilAltIcon,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        label: t('Edit inventory source'),\n        isDisabled: (inventorySource: InventorySource) =>\n          cannotEditInventorySource(inventorySource),\n        onClick: (inventorySource) =>\n          pageNavigate(AwxRoute.InventorySourceEdit, {\n            params: {\n              id: inventorySource.inventory,\n              inventory_type: params.inventory_type,\n              source_id: inventorySource.id,\n            },\n          }),\n      },\n\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: RocketIcon,\n        label: t('Launch inventory update'),\n        isPinned: true,\n        isHidden: (inventorySource: InventorySource) => {\n          const startPerms = inventorySource?.summary_fields.user_capabilities.start;\n          let job;\n          let unlaunchableStatus;\n          if (inventorySource.summary_fields?.current_job) {\n            job = inventorySource.summary_fields.current_job;\n          } else if (inventorySource.summary_fields?.last_job) {\n            job = inventorySource.summary_fields.last_job;\n          }\n          if (job) {\n            unlaunchableStatus = ['new', 'running', 'pending', 'waiting'].includes(job?.status);\n          }\n\n          return !startPerms || unlaunchableStatus ? true : false;\n        },\n        isDisabled: (inventorySource: InventorySource) =>\n          cannotLaunchInventorySourceUpdate(inventorySource),\n        onClick: (inventorySource) => handleUpdate(inventorySource),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: MinusCircleIcon,\n        label: t('Cancel inventory update'),\n        isPinned: true,\n        isHidden: (inventorySource: InventorySource) => {\n          const startPerms = inventorySource?.summary_fields.user_capabilities.start;\n          let job;\n          let unlaunchableStatus;\n          if (inventorySource.summary_fields?.current_job) {\n            job = inventorySource.summary_fields.current_job;\n          } else if (inventorySource.summary_fields?.last_job) {\n            job = inventorySource.summary_fields.last_job;\n          }\n          if (job) {\n            unlaunchableStatus = ['new', 'running', 'pending', 'waiting'].includes(job?.status);\n          }\n\n          return !startPerms || !unlaunchableStatus ? true : false;\n        },\n        isDisabled: (inventorySource: InventorySource) =>\n          cannotLaunchInventorySourceUpdate(inventorySource),\n        onClick: (inventorySource) => cancelInventoryUpdate([inventorySource]),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: TrashIcon,\n        label: t('Delete inventory source'),\n        isDisabled: (inventorySource: InventorySource) =>\n          cannotDeleteInventorySource(inventorySource),\n        onClick: (inventorySource) => deleteInventorySources([inventorySource]),\n        isDanger: true,\n      },\n    ];\n    return itemActions;\n  }, [\n    deleteInventorySources,\n    pageNavigate,\n    handleUpdate,\n    cancelInventoryUpdate,\n    activeAwxUser,\n    t,\n    params.inventory_type,\n  ]);\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { compareStrings } from '../../../../../framework';\nimport { useNameColumn } from '../../../../common/columns';\nimport { getItemKey, requestDelete } from '../../../../common/crud/Data';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { InventorySource } from '../../../interfaces/InventorySource';\nimport { useInventorySourceColumns } from './useInventorySourceColumns';\n\nexport function useDeleteInventorySources(\n  onComplete: (inventorySources: InventorySource[]) => void\n) {\n  const { t } = useTranslation();\n  const confirmationColumns = useInventorySourceColumns({ disableLinks: true, disableSort: true });\n  const deleteActionNameColumn = useNameColumn({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo(() => [deleteActionNameColumn], [deleteActionNameColumn]);\n  const bulkAction = useAwxBulkConfirmation<InventorySource>();\n\n  const cannotDeleteInventorySources = (inventorySource: InventorySource) => {\n    return inventorySource?.summary_fields?.user_capabilities?.delete\n      ? undefined\n      : t('The inventory source cannot be deleted due to insufficient permission.');\n  };\n\n  const deleteInventories = (inventorySources: InventorySource[]) => {\n    const undeletableInventorySources = inventorySources.filter(cannotDeleteInventorySources);\n    bulkAction({\n      title: t('Permanently delete inventory source', { count: inventorySources.length }),\n      confirmText: t('Yes, I confirm that I want to delete these {{count}} inventory sources.', {\n        count: inventorySources.length - undeletableInventorySources.length,\n      }),\n      actionButtonText: t('Delete inventory sources', { count: inventorySources.length }),\n      items: inventorySources.sort((l, r) => compareStrings(l.name, r.name)),\n      keyFn: getItemKey,\n      isDanger: true,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: (inventorySource: InventorySource, signal) =>\n        requestDelete(awxAPI`/inventory_sources/${inventorySource.id.toString()}/`, signal),\n      alertPrompts:\n        undeletableInventorySources.length > 0\n          ? [\n              t(\n                '{{count}} of the selected inventory sources cannot be deleted due to insufficient permission.',\n                {\n                  count: undeletableInventorySources.length,\n                }\n              ),\n            ]\n          : undefined,\n      isItemNonActionable: cannotDeleteInventorySources,\n    });\n  };\n  return deleteInventories;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { compareStrings } from '../../../../../framework';\nimport { useNameColumn } from '../../../../common/columns';\nimport { getItemKey } from '../../../../common/crud/Data';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { InventorySource } from '../../../interfaces/InventorySource';\nimport { useInventorySourceColumns } from './useInventorySourceColumns';\n\nexport function useCancelIventoryUpdate(onComplete: (inventorySources: InventorySource[]) => void) {\n  const { t } = useTranslation();\n  const bulkAction = useAwxBulkConfirmation<InventorySource>();\n  const requestPost = usePostRequest();\n  const confirmationColumns = useInventorySourceColumns({ disableLinks: true });\n  const deleteActionNameColumn = useNameColumn({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo(() => [deleteActionNameColumn], [deleteActionNameColumn]);\n\n  const cancelInventoryUpdate = (inventorySources: InventorySource[]) => {\n    bulkAction({\n      title: t('Cancel Inventory Update'),\n      confirmText: t('Yes, I confirm that I want to cancel inventory update.'),\n      actionButtonText: t('Cancel Update'),\n      items: inventorySources.sort((l, r) => compareStrings(l.name, r.name)),\n      keyFn: getItemKey,\n      isDanger: true,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: (inventorySource, signal) => {\n        let job;\n        if (inventorySource.summary_fields?.current_job) {\n          job = inventorySource.summary_fields.current_job;\n        } else if (inventorySource.summary_fields?.last_job) {\n          job = inventorySource.summary_fields.last_job;\n        }\n        return requestPost(awxAPI`/inventory_updates/${String(job?.id)}/cancel/`, signal);\n      },\n    });\n  };\n\n  return cancelInventoryUpdate;\n}\n","import { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageActions,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { PageRoutedTabs } from '../../../../common/PageRoutedTabs';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { AwxError } from '../../../common/AwxError';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { InventorySource } from '../../../interfaces/InventorySource';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useInventorySourceActions } from '../hooks/useInventorySourceActions';\n\nexport function InventorySourcePage() {\n  const { t } = useTranslation();\n  const params = useParams<{ id: string; inventory_type: string; source_id: string }>();\n  const {\n    data: inventorySource,\n    error,\n    refresh,\n  } = useGetItem<InventorySource>(awxAPI`/inventory_sources/`, params.source_id);\n  const pageNavigate = usePageNavigate();\n  const getPageUrl = useGetPageUrl();\n  const itemActions = useInventorySourceActions({\n    onInventorySourcesDeleted: () =>\n      pageNavigate(AwxRoute.InventorySources, {\n        params: { id: params.id, inventory_type: params.inventory_type },\n      }),\n    onInvUpdateCanceled: refresh,\n  });\n  if (error) return <AwxError error={error} handleRefresh={refresh} />;\n  if (!inventorySource) return <LoadingPage breadcrumbs tabs />;\n  return (\n    <PageLayout>\n      <PageHeader\n        title={inventorySource?.name}\n        breadcrumbs={[\n          { label: t('Inventories'), to: getPageUrl(AwxRoute.Inventories) },\n          {\n            label: `${inventorySource?.summary_fields.inventory.name}`,\n            to: getPageUrl(AwxRoute.InventoryDetails, {\n              params: {\n                id: inventorySource?.summary_fields.inventory.id,\n                inventory_type: 'inventory',\n              },\n            }),\n          },\n          {\n            label: t('Inventory Sources'),\n            to: getPageUrl(AwxRoute.InventorySources, {\n              params: { id: params.id, inventory_type: params.inventory_type },\n            }),\n          },\n          {\n            label: inventorySource?.name,\n          },\n        ]}\n        headerActions={\n          <PageActions<InventorySource>\n            actions={itemActions}\n            position={DropdownPosition.right}\n            selectedItem={inventorySource}\n          />\n        }\n      />\n      <PageRoutedTabs\n        backTab={{\n          label: t('Back to Inventory Sources'),\n          page: AwxRoute.InventorySources,\n          persistentFilterKey: 'inventory_sources',\n        }}\n        tabs={[\n          { label: t('Details'), page: AwxRoute.InventorySourceDetail },\n          { label: t('Schedules'), page: AwxRoute.InventorySourceSchedules },\n          { label: t('Notifications'), page: AwxRoute.InventorySourceNotifications },\n        ]}\n        params={params}\n      />\n    </PageLayout>\n  );\n}\n","import { RRule, Weekday } from 'rrule';\nimport { InventorySource } from '../../interfaces/InventorySource';\nimport { JobTemplate } from '../../interfaces/JobTemplate';\nimport { LaunchConfiguration } from '../../interfaces/LaunchConfiguration';\nimport { Project } from '../../interfaces/Project';\nimport { WorkflowJobTemplate } from '../../interfaces/WorkflowJobTemplate';\nimport { PromptFormValues } from '../../resources/templates/WorkflowVisualizer/types';\nimport { SystemJobTemplate } from '../../interfaces/SystemJobTemplate';\nimport { AwxRoute } from '../../main/AwxRoutes';\n\nexport enum Frequency {\n  YEARLY = 0,\n  MONTHLY = 1,\n  WEEKLY = 2,\n  DAILY = 3,\n  HOURLY = 4,\n  MINUTELY = 5,\n  SECONDLY = 6,\n}\n\nexport type RuleListItemType = { id: number; rule: RRule };\nexport type ScheduleResources =\n  | InventorySource\n  | SystemJobTemplate\n  | JobTemplate\n  | Project\n  | WorkflowJobTemplate;\nexport interface RuleFields {\n  id: number | undefined;\n  freq: Frequency;\n  interval: number | undefined;\n  wkst: Weekday;\n  byweekday: null;\n  byweekno: null;\n  bymonth: null;\n  bymonthday: null;\n  byyearday: null;\n  bysetpos: null;\n  byminute: null;\n  byhour: null;\n  until: { date: string; time: string } | null;\n  count: null;\n  rules: RuleListItemType[] | [];\n  exceptions: RuleListItemType[] | [];\n  endType: string | undefined;\n}\nexport interface ScheduleFormWizard {\n  resourceInventory?: number;\n  name: string;\n  description?: string;\n  schedule_type: string;\n  resource: ScheduleResources;\n  startDateTime: { date: string; time: string };\n  timezone: string;\n  rules: RuleListItemType[];\n  exceptions: RuleListItemType[] | [];\n  launch_config: LaunchConfiguration | null;\n  prompt: PromptFormValues;\n  schedule_days_to_keep: number;\n  survey: { [key: string]: string };\n  enabled: boolean;\n}\n\nexport type ScheduleResourceType =\n  | 'job-template'\n  | 'workflow-job-template'\n  | 'project_update'\n  | 'inventory_update'\n  | 'system_job';\n\nexport interface PreviewSchedule {\n  local?: string[];\n  utc?: string[];\n  rrule: string;\n}\n\nexport enum RuleType {\n  Rules = 'rules',\n  Exceptions = 'exceptions',\n}\n\nexport interface schedulePageUrl {\n  pageId: AwxRoute;\n  params: {\n    id: string;\n    schedule_id: string;\n    source_id?: string;\n    inventory_type?: string;\n  };\n}\n","import { Frequency, RRule } from 'rrule';\nexport const INVENTORY_TYPE = 'inventory';\nexport const RULES_DEFAULT_VALUES = {\n  freq: Frequency.YEARLY,\n  interval: 1,\n  wkst: RRule.SU,\n  byweekday: null,\n  byweekno: null,\n  bymonth: null,\n  bymonthday: null,\n  byyearday: null,\n  bysetpos: null,\n  until: { date: '', time: '' },\n  count: null,\n  byminute: null,\n  byhour: null,\n  endType: 'never',\n};\n\nexport const WEEKS_OF_YEAR = Array.from({ length: 52 }, (_, i) => i + 1).map((week) => ({\n  value: week,\n  label: `${week}`,\n}));\nexport const DAYS_OF_YEAR = Array.from(Array(366), (_, i) => i + 1).map((day) => ({\n  value: day,\n  label: `${day}`,\n}));\nexport const MINUTES_OF_HOUR = Array.from(Array(60), (_, i) => i).map((minute) => ({\n  value: minute,\n  label: `${minute}`,\n}));\n\nexport const DAYS_OF_MONTH = Array.from(Array(31), (_, i) => i + 1).map((day) => ({\n  value: day,\n  label: `${day}`,\n}));\n\nexport const HOURS_OF_DAY = Array.from(Array(24), (_, i) => i).map((hour) => ({\n  value: hour,\n  label: `${hour}`,\n}));\n","import {\n  DatePickerProps,\n  DatePicker,\n  isValidDate,\n  yyyyMMddFormat,\n  TimePicker,\n  TimePickerProps,\n  InputGroup,\n  InputGroupItem,\n} from '@patternfly/react-core';\n\nimport React, { FormEvent } from 'react';\nimport { PageFormGroup, PageFormGroupProps } from './PageFormGroup';\nexport type FormGroupDateTimePickerProps = Omit<\n  DatePickerProps,\n  'onChange' | 'placeholder' | 'value'\n> &\n  Omit<TimePickerProps, 'onChange' | 'placeholder' | 'value'> &\n  PageFormGroupProps & {\n    onTimeChange: (\n      event: React.FormEvent<HTMLInputElement>,\n      time: string,\n      hour?: number,\n      minute?: number,\n      seconds?: number,\n      isValid?: boolean\n    ) => void;\n    timePlaceHolder?: string;\n    timeValue: string;\n    onDateChange: (date: string) => void;\n    datePlaceHolder?: string;\n    dateValue: string;\n  };\n\nexport function FormGroupDateTimePicker(props: FormGroupDateTimePickerProps) {\n  const { dateValue, timeValue, datePlaceHolder, timePlaceHolder, onDateChange, onTimeChange, id } =\n    props;\n  const handleDateChange = (\n    inputDate: FormEvent<HTMLInputElement>,\n    value: string,\n    newDate?: Date\n  ) => {\n    if (!newDate) return;\n    if (isValidDate(newDate) && value === yyyyMMddFormat(newDate)) {\n      onDateChange(value);\n    }\n  };\n  return (\n    <PageFormGroup {...props} fieldId={id}>\n      <InputGroup>\n        <InputGroupItem>\n          <DatePicker\n            isDisabled={props.isDisabled}\n            placeholder={datePlaceHolder}\n            value={dateValue}\n            onChange={handleDateChange}\n          />\n        </InputGroupItem>\n        <InputGroupItem>\n          <TimePicker\n            isDisabled={props.isDisabled}\n            placeholder={timePlaceHolder}\n            time={timeValue}\n            inputProps={{ value: timeValue ?? '' }}\n            onChange={onTimeChange}\n          />\n        </InputGroupItem>\n      </InputGroup>\n    </PageFormGroup>\n  );\n}\n","import { ReactNode } from 'react';\nimport { Controller, FieldPath, FieldValues, useFormContext } from 'react-hook-form';\nimport { FormGroupDateTimePicker } from './FormGroupDateTimePicker';\n\nexport type PageFormDateTimePickerProps<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TFieldName;\n  datePlaceHolder?: string;\n  timePlaceHolder?: string;\n  label: string;\n  labelHelp?: string | string[] | ReactNode;\n  labelHelpTitle?: string;\n  isDisabled?: boolean;\n  isRequired?: boolean;\n};\nexport function PageFormDateTimePicker<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: PageFormDateTimePickerProps<TFieldValues, TFieldName>) {\n  const { control } = useFormContext<TFieldValues>();\n\n  return (\n    <Controller<TFieldValues, TFieldName>\n      name={props.name}\n      control={control}\n      shouldUnregister\n      render={({ field }) => {\n        return (\n          <FormGroupDateTimePicker\n            {...props}\n            id={props.name}\n            data-cy=\"dateTime\"\n            dateValue={field?.value?.date as string}\n            timeValue={field?.value?.time as string}\n            onDateChange={(date: string) => field.onChange({ ...field.value, date })}\n            datePlaceHolder={props.datePlaceHolder}\n            onTimeChange={(_event, time: string) => {\n              field.onChange({ ...field.value, time });\n            }}\n            timePlaceHolder={props.timePlaceHolder}\n            isRequired={props.isRequired}\n          />\n        );\n      }}\n    />\n  );\n}\n","import { ActionGroup, Button, Chip, ChipGroup } from '@patternfly/react-core';\nimport { DateTime } from 'luxon';\nimport { useFormContext, useWatch } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { RRule, datetime } from 'rrule';\nimport {\n  useGetFrequencyOptions,\n  useGetMonthOptions,\n  useGetWeekdayOptions,\n} from '../hooks/ruleHelpers';\nimport { RuleFields, RuleType, ScheduleFormWizard } from '../types';\nimport {\n  DAYS_OF_MONTH,\n  DAYS_OF_YEAR,\n  HOURS_OF_DAY,\n  MINUTES_OF_HOUR,\n  WEEKS_OF_YEAR,\n} from '../wizard/constants';\nimport { PageFormDateTimePicker } from '../../../../../framework/PageForm/Inputs/PageFormDateTimePicker';\nimport { usePageWizard } from '../../../../../framework/PageWizard/PageWizardProvider';\nimport { useGet24HourTime } from '../hooks/useGet24HourTime';\nimport { PageFormSection } from '../../../../../framework/PageForm/Utils/PageFormSection';\nimport { PageFormSelect, PageFormTextInput } from '../../../../../framework';\nimport { PageFormMultiSelect } from '../../../../../framework/PageForm/Inputs/PageFormMultiSelect';\nimport { PageFormSingleSelect } from '../../../../../framework/PageForm/Inputs/PageFormSingleSelect';\n\nexport function pad(num: number) {\n  if (typeof num === 'string') {\n    return num;\n  }\n  return num < 10 ? `0${num}` : num;\n}\nexport function RuleForm(\n  props: Readonly<{\n    title: string;\n    isOpen: boolean | number;\n    setIsOpen: (isOpen: boolean) => void;\n  }>\n) {\n  const { t } = useTranslation();\n  const get24Hour = useGet24HourTime();\n  const {\n    getValues,\n    reset,\n    formState: { defaultValues },\n    setValue,\n  } = useFormContext();\n  const { activeStep, wizardData } = usePageWizard();\n  const ruleId = typeof props.isOpen === 'number' && props.isOpen;\n  const endType = useWatch({ name: 'endType' }) as string;\n\n  const {\n    timezone = 'America/New_York',\n    startDateTime: { date, time },\n  } = wizardData as ScheduleFormWizard;\n  const isRulesStep = activeStep && activeStep.id === 'rules';\n  const weekdayOptions = useGetWeekdayOptions();\n  const frequencyOptions = useGetFrequencyOptions();\n  const monthOptions = useGetMonthOptions();\n\n  const handleAddItem = () => {\n    const values = getValues() as RuleFields;\n    delete values.endType;\n    delete values.id;\n    const { rules = [], exceptions = [], endType, until = null, ...rest } = values;\n    const start = DateTime.fromISO(`${date}`).set(get24Hour(time));\n    const { year, month, day, hour, minute } = start;\n    const dateString = `${year}${pad(month)}${pad(day)}T${pad(hour)}${pad(minute)}00`;\n    const rrulestring = `DTSTART;TZID=${timezone}:${dateString}`;\n    const ruleStart = RRule.fromString(rrulestring);\n    const rule = new RRule({ ...ruleStart.options, ...rest });\n    if (until !== null) {\n      const untilTime = until?.time;\n      const untilDate = until?.date;\n      if (untilDate && untilTime) {\n        const utcDate = DateTime.fromISO(`${untilDate}`).set(get24Hour(untilTime)).toUTC();\n        const { year, month, day, hour, minute } = utcDate;\n        rule.options.until = datetime(year, month, day, hour, minute);\n      } else {\n        if (untilDate) {\n          // This block is used when the user enters a date, but no time.\n          // We use the date given, and the current time based on the timezone given\n          // in the first step, or default to America/New_York.\n\n          const utcDate = DateTime.fromISO(`${untilDate}`).toUTC();\n          const { year, day, month, hour, minute } = utcDate;\n          rule.options.until = datetime(year, month, day, hour, minute);\n        }\n        if (untilTime) {\n          // This block is used when the user enters a time, but no date.\n          // We use the time given, and the tomorrow's date based on the timezone given\n          // in the first step, or default to America/New_York.\n\n          const { year, day, month, hour, minute } = DateTime.now()\n            .plus({ days: 1 })\n            .set(get24Hour(untilTime))\n            .toUTC();\n\n          rule.options.until = datetime(year, month, day, hour, minute);\n        }\n      }\n    }\n\n    const itemId = ruleId\n      ? ruleId\n      : isRulesStep\n        ? rules.length + 1 || 1\n        : exceptions.length + 1 || 1;\n    const ruleObject = { rule, id: itemId };\n    const index = isRulesStep\n      ? rules.findIndex((r) => r.id === ruleId)\n      : exceptions.findIndex((r) => r.id === ruleId);\n    if (isRulesStep) {\n      ruleId\n        ? setValue('rules', rules.splice(index, 1, ruleObject))\n        : setValue('rules', rules.push(ruleObject));\n    }\n    if (!isRulesStep) {\n      ruleId\n        ? setValue('exceptions', exceptions.splice(index, 1, ruleObject))\n        : setValue('exceptions', exceptions.push(ruleObject));\n    }\n\n    reset(\n      {\n        ...defaultValues,\n        rules,\n        exceptions,\n      },\n      { keepDefaultValues: true }\n    );\n    props.setIsOpen(false);\n  };\n  return (\n    <PageFormSection title={props.title}>\n      <PageFormSection>\n        <PageFormSelect<RuleFields>\n          name={`freq`}\n          isRequired\n          label={t('Frequency')}\n          labelHelp={t('This is the freq field.  It is required.')}\n          options={frequencyOptions}\n        />\n        <PageFormTextInput<RuleFields>\n          labelHelp={t('This is the interval field.')}\n          name={`interval`}\n          label={t('Interval')}\n          type=\"number\"\n        />\n        <PageFormSelect<RuleFields>\n          name={`wkst`}\n          label={t('Week start')}\n          labelHelp={t('This is the wkst field. Select first day of the week.')}\n          options={weekdayOptions}\n        />\n        <PageFormMultiSelect<RuleFields>\n          label={t('Weekdays')}\n          name={`byweekday`}\n          options={weekdayOptions}\n          placeholder={t('Select weekdays')}\n          labelHelp={\n            <>\n              <div>\n                {t(\n                  'This is the byweekday field. Select day(s) of the week on which to run the schedule.'\n                )}\n              </div>\n              <ChipGroup>\n                <Chip disabled>{t('Sunday')}</Chip>\n                <Chip disabled>{t('Wednesday')}</Chip>\n                <Chip disabled>{t('Friday')}</Chip>\n              </ChipGroup>\n            </>\n          }\n          disableSortOptions\n        />\n        <PageFormMultiSelect<RuleFields>\n          name={`bymonth`}\n          label={t('Months')}\n          options={monthOptions}\n          labelHelpTitle={t('Months')}\n          labelHelp={\n            <>\n              <div>\n                {t(\n                  'This is the bymonth field. This field is used to declare which months of the year the schedule should run.'\n                )}\n              </div>\n              <ChipGroup>\n                <Chip disabled>{t('June')}</Chip>\n                <Chip disabled>{t('August')}</Chip>\n                <Chip disabled>{t('January')}</Chip>\n              </ChipGroup>\n            </>\n          }\n          placeholder={t('Select months')}\n          disableSortOptions\n        />\n        <PageFormMultiSelect<RuleFields>\n          name={`byweekno`}\n          options={WEEKS_OF_YEAR}\n          placeholder={t('Select weeks')}\n          label={t('Annual week(s) number')}\n          labelHelp={\n            <>\n              <div>\n                {t(\n                  'This is the byweekno field. This field is used to declare numbered weeks of the year the schedule should run.'\n                )}\n              </div>\n              <ChipGroup>\n                <Chip disabled>17</Chip>\n                <Chip disabled>43</Chip>\n                <Chip disabled>52</Chip>\n              </ChipGroup>\n            </>\n          }\n          labelHelpTitle={t('Annual weeks(s) number')}\n          disableSortOptions\n        />\n        <PageFormMultiSelect<RuleFields>\n          name={`byminute`}\n          placeholder={t('Select hours')}\n          options={MINUTES_OF_HOUR}\n          label={t('Minute(s) of hour')}\n          labelHelp={\n            <>\n              <div>\n                {t(\n                  'This is the byminute field. This field is used to declare minute(s) of the hour the schedule should run.'\n                )}\n              </div>\n              <ChipGroup>\n                <Chip disabled>1</Chip>\n                <Chip disabled>37</Chip>\n                <Chip disabled>59</Chip>\n              </ChipGroup>\n            </>\n          }\n          labelHelpTitle={t('Minute(s) of hour')}\n          disableSortOptions\n        />\n        <PageFormMultiSelect<RuleFields>\n          name={`byhour`}\n          placeholder={t('Select hours')}\n          options={HOURS_OF_DAY}\n          label={t('Hour of day')}\n          labelHelp={\n            <>\n              <div>\n                {t(\n                  'This is the byhour field. This field is used to declare hours of day the schedule should run.'\n                )}\n              </div>\n              <ChipGroup>\n                <Chip disabled>0</Chip>\n                <Chip disabled>7</Chip>\n                <Chip disabled>18</Chip>\n              </ChipGroup>\n            </>\n          }\n          labelHelpTitle={t('Hour of day')}\n          disableSortOptions\n        />\n        <PageFormMultiSelect<RuleFields>\n          name={`bymonthday`}\n          placeholder={t('Select days')}\n          options={DAYS_OF_MONTH}\n          label={t('Month day(s)')}\n          labelHelp={\n            <>\n              <div>\n                {t(\n                  'This is the bymonthday field. This field is used to declare ordinal days number of the month the schedule should run.'\n                )}\n              </div>\n              <ChipGroup>\n                <Chip disabled>1</Chip>\n                <Chip disabled>15</Chip>\n                <Chip disabled>28</Chip>\n              </ChipGroup>\n            </>\n          }\n          labelHelpTitle={t('Month day(s)')}\n          disableSortOptions\n        />\n        <PageFormMultiSelect<RuleFields>\n          name={`byyearday`}\n          placeholder={t('Select days')}\n          options={DAYS_OF_YEAR}\n          label={t('Day(s) of year')}\n          labelHelp={\n            <>\n              <div>\n                {t(\n                  'This is the byyearday field. This field is used to declare ordinal number days of the year the schedule should run. Do not use commas between the selected values'\n                )}\n              </div>\n              <ChipGroup>\n                <Chip disabled>1</Chip>\n                <Chip disabled>235</Chip>\n                <Chip disabled>300</Chip>\n              </ChipGroup>\n            </>\n          }\n          labelHelpTitle={t('Day(s) of year')}\n          disableSortOptions\n        />\n        <PageFormMultiSelect<RuleFields>\n          placeholder={t('Select positions')}\n          options={DAYS_OF_YEAR}\n          name={`bysetpos`}\n          labelHelp={\n            <>\n              <div>\n                {t(\n                  'This is the bysetpos field. Use this field to filter down recurrence instances within a single interval of the rule. See the iCalendar RFC for bysetpos field more information.'\n                )}\n              </div>\n              <ChipGroup>\n                <Chip disabled>1</Chip>\n                <Chip disabled>235</Chip>\n                <Chip disabled>300</Chip>\n              </ChipGroup>\n            </>\n          }\n          labelHelpTitle={t('Occurrences')}\n          label={t('Occurrences')}\n          disableSortOptions\n        />\n        <PageFormSingleSelect\n          disableSortOptions\n          name=\"endType\"\n          label={t('Schedule ending type')}\n          placeholder={t('Method used to stop schedule')}\n          options={[\n            { value: 'never', label: t('Never'), description: t('Never ending schedule') },\n            { value: 'count', label: t('Count'), description: t('Stop after a number of runs') },\n            { value: 'until', label: t('Until'), description: t('Stop on a specific date') },\n          ]}\n          isRequired\n        />\n        {endType === 'count' && (\n          <PageFormTextInput<RuleFields>\n            labelHelpTitle={t('Count')}\n            label={t('Count')}\n            name={`count`}\n            placeholder=\"5\"\n            labelHelp={t('The number of time this rule should be used.')}\n            min={0}\n            max={999}\n            type=\"number\"\n            isRequired\n          />\n        )}\n\n        {endType === 'until' && (\n          <PageFormDateTimePicker<RuleFields>\n            name={`until`}\n            timePlaceHolder=\"HH:MM AM/PM\"\n            label={t('Until')}\n            labelHelpTitle={t('Until')}\n            labelHelp={t('Use this rule until the specified date/time')}\n          />\n        )}\n      </PageFormSection>\n\n      <ActionGroup className=\"pf-v5-u-pt-xl\">\n        <Button\n          variant=\"secondary\"\n          data-cy={ruleId ? 'update-rule-button' : 'add-rule-button'}\n          onClick={handleAddItem}\n        >\n          {ruleId\n            ? t(isRulesStep ? 'Update rule' : 'Update exception')\n            : t(isRulesStep ? 'Save rule' : 'Save exception')}\n        </Button>\n        <Button\n          data-cy=\"discard-rule-button\"\n          variant=\"secondary\"\n          isDanger\n          onClick={() => {\n            const { rules = [], exceptions = [] } = getValues() as RuleFields;\n            const ruleType: RuleType =\n              props.title === t('Define rules') ? RuleType.Rules : RuleType.Exceptions;\n            const ruleArray = ruleType === RuleType.Rules ? [...rules] : [...exceptions];\n            reset({ ...defaultValues, [`${ruleType}`]: ruleArray }, { keepDefaultValues: true });\n            props.setIsOpen(false);\n          }}\n        >\n          {t('Discard')}\n        </Button>\n      </ActionGroup>\n    </PageFormSection>\n  );\n}\n","import { DateTime } from 'luxon';\nimport { useCallback } from 'react';\n\nexport function useGet24HourTime() {\n  return useCallback((time: string): { hour: number; minute: number } => {\n    return {\n      hour: DateTime.fromFormat(time, 'h:mm a').hour,\n      minute: DateTime.fromFormat(time, 'h:mm a').minute,\n    };\n  }, []);\n}\n","import { useTranslation } from 'react-i18next';\nimport { Frequency, RRule } from 'rrule';\n\nexport function useGetFrequencyOptions() {\n  const { t } = useTranslation();\n  return [\n    { label: t('Yearly'), value: Frequency.YEARLY },\n    { label: t('Monthly'), value: Frequency.MONTHLY },\n    { label: t('Weekly'), value: Frequency.WEEKLY },\n    { label: t('Daily'), value: Frequency.DAILY },\n    { label: t('Hourly'), value: Frequency.HOURLY },\n    { label: t('Minutely'), value: Frequency.MINUTELY },\n  ];\n}\n\nexport function useGetWeekdayOptions() {\n  const { t } = useTranslation();\n  const weekdayOptions = [\n    {\n      value: RRule.SU,\n      label: t('Sunday'),\n    },\n    {\n      value: RRule.MO,\n      label: t('Monday'),\n    },\n    {\n      value: RRule.TU,\n      label: t('Tuesday'),\n    },\n    {\n      value: RRule.WE,\n      label: t('Wednesday'),\n    },\n    {\n      value: RRule.TH,\n      label: t('Thursday'),\n    },\n    {\n      value: RRule.FR,\n      label: t('Friday'),\n    },\n    {\n      value: RRule.SA,\n      label: t('Saturday'),\n    },\n  ];\n  return weekdayOptions;\n}\nexport function useGetBySetPosOptions() {\n  const { t } = useTranslation();\n  return [\n    { value: '', label: 'None' },\n    { value: '1', label: t('First') },\n    {\n      value: '2',\n\n      label: t('Second'),\n    },\n    { value: '3', label: t('Third') },\n    {\n      value: '4',\n\n      label: t('Fourth'),\n    },\n    { value: '5', label: t('Fifth') },\n    { value: '-1', label: t('Last') },\n  ];\n}\n\nexport function useGetMonthOptions() {\n  const { t } = useTranslation();\n  return [\n    {\n      value: 1,\n      label: t('January'),\n    },\n    {\n      value: 2,\n      label: t('February'),\n    },\n    {\n      value: 3,\n      label: t('March'),\n    },\n    {\n      value: 4,\n      label: t('April'),\n    },\n    {\n      value: 5,\n      label: t('May'),\n    },\n    {\n      value: 6,\n      label: t('June'),\n    },\n    {\n      value: 7,\n      label: t('July'),\n    },\n    {\n      value: 8,\n      label: t('August'),\n    },\n    {\n      value: 9,\n      label: t('September'),\n    },\n    {\n      value: 10,\n      label: t('October'),\n    },\n    {\n      value: 11,\n      label: t('November'),\n    },\n    {\n      value: 12,\n      label: t('December'),\n    },\n  ];\n}\n","import { LabelGroup as PFLabelGroup } from '@patternfly/react-core';\n\ntype LabelGroupWrapperState = {\n  headingRef: { current: { offsetWidth: number; scrollWidth: number } };\n};\n\n// fix button without type when rendering \"show more\" in forms\nexport class LabelGroupWrapper extends PFLabelGroup {\n  // @ts-expect-error Type '(e: React.MouseEvent<HTMLButtonElement>) => void' is not assignable to type '() => void'.\n  toggleCollapse = (event: React.MouseEvent<HTMLButtonElement>) => {\n    // Label isOverflowLabel renders a button, but not button type=button, breaks forms\n    event.preventDefault();\n\n    // original LabelGroup toggleCollapse, as of @patternfly/react-core 5.2.0, w/ ts fix\n    this.setState((prevState) => {\n      const obj = this as unknown as LabelGroupWrapperState;\n      const currentRef = obj.headingRef.current;\n\n      return {\n        isOpen: !prevState.isOpen,\n        isTooltipVisible: Boolean(currentRef && currentRef.offsetWidth < currentRef.scrollWidth),\n      };\n    });\n  };\n}\n","import { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { postRequest } from '../../../../common/crud/Data';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { Flex, FlexItem, Label } from '@patternfly/react-core';\nimport { DateTime } from 'luxon';\nimport { LabelGroupWrapper } from '../../../../common/label-group-wrapper';\n\n/**\n *\n * @param {string} rrule - RRule, or exrule as a string\n * @param {boolean}[hideColumnTitle] - A boolean used to determine whether we should the text\n * `Summary schedule` as this component is used by the RuleList.tsx, and by ScheduleDetails.tsx\n *\n */\nexport function ScheduleSummary(props: {\n  rrule: string;\n  isLocal: boolean;\n  hideColumnTitle?: boolean;\n}) {\n  const { t } = useTranslation();\n  const [preview, setPreview] = useState<{ local: string[]; utc: string[] }>();\n  useEffect(() => {\n    async function fetchPreview() {\n      const { local, utc } = await postRequest<{ local: string[]; utc: string[] }>(\n        awxAPI`/schedules/preview/`,\n        {\n          rrule: props.rrule,\n        }\n      );\n      setPreview({ local, utc });\n    }\n    if (props.rrule) {\n      void fetchPreview();\n    }\n  }, [props.rrule]);\n  const timesArray = !props.isLocal ? preview?.utc : preview?.local;\n\n  return (\n    <Flex>\n      {!props.hideColumnTitle && <FlexItem>{t('Schedule summary')}</FlexItem>}\n      <FlexItem>\n        <LabelGroupWrapper numLabels={5}>\n          {timesArray?.map((value, i) => {\n            return (\n              <Label key={i}>\n                {DateTime.fromISO(value, { setZone: true }).toLocaleString(\n                  DateTime.DATETIME_SHORT_WITH_SECONDS\n                )}\n              </Label>\n            );\n          })}\n        </LabelGroupWrapper>\n      </FlexItem>\n    </Flex>\n  );\n}\n","import { ToggleGroup, ToggleGroupItem } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport function TimezoneToggle(props: {\n  isLocal: boolean;\n  setIsLocal: (b: boolean) => void;\n  localTimezone: string;\n}) {\n  const { isLocal, setIsLocal } = props;\n  const { t } = useTranslation();\n\n  return (\n    <ToggleGroup isCompact>\n      <ToggleGroupItem\n        id=\"toggle-local\"\n        data-cy=\"toggle-local\"\n        aria-label={t('Toggle to {{localTimezone}}', { timezone: props.localTimezone })}\n        isSelected={props.isLocal}\n        text={props.localTimezone}\n        type=\"button\"\n        onChange={() => setIsLocal(true)}\n      />\n      <ToggleGroupItem\n        id=\"toggle-utc\"\n        data-cy=\"toggle-utc\"\n        aria-label={t('Toggle to UTC')}\n        isSelected={!isLocal}\n        text=\"UTC\"\n        type=\"button\"\n        onChange={() => setIsLocal(false)}\n      />\n    </ToggleGroup>\n  );\n}\n","import { useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ColumnModalOption,\n  CopyCell,\n  ITableColumn,\n  PageHeader,\n  PageTable,\n} from '../../../../../framework';\nimport { useAwxConfig } from '../../../common/useAwxConfig';\nimport { useGetDocsUrl } from '../../../common/util/useGetDocsUrl';\nimport { useRuleRowActions } from '../hooks/useRuleRowActions';\nimport { RuleListItemType } from '../types';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { ScheduleSummary } from './ScheduleSummary';\nimport { TimezoneToggle } from '../SchedulePage/TimezoneToggle';\n\nexport function RulesList(props: {\n  setIsOpen?: (isOpen: boolean | number) => void;\n  ruleType: string;\n  rules: RuleListItemType[];\n  timezone: string;\n  needsHeader?: boolean;\n  isLocalForDetails?: boolean;\n}) {\n  const [isLocal, setIsLocal] = useState(true);\n\n  const { t } = useTranslation();\n  const config = useAwxConfig();\n  const isExceptions = props.ruleType === 'exception';\n  const rowActions = useRuleRowActions(props.rules, props.setIsOpen);\n  const columns = useMemo<ITableColumn<RuleListItemType>[]>(\n    () => [\n      {\n        header:\n          props.ruleType === 'rules'\n            ? t('Next occurrence timestamps')\n            : t('Next exclusion timestamps'),\n        cell: (item: RuleListItemType) => {\n          return (\n            <ScheduleSummary\n              rrule={item.rule.toString()}\n              isLocal={props.isLocalForDetails !== undefined ? props.isLocalForDetails : isLocal}\n              hideColumnTitle\n            />\n          );\n        },\n      },\n      {\n        header: props.ruleType === 'rules' ? t('RRule') : t('Exrule'),\n        cell: (rule: RuleListItemType) => <CopyCell text={rule.rule.toString()} />,\n        modal: ColumnModalOption.hidden,\n        dashboard: ColumnModalOption.hidden,\n      },\n    ],\n    [t, props.ruleType, isLocal, props.isLocalForDetails]\n  );\n  const view = {\n    pageItems: props.rules,\n    keyFn: (item: RuleListItemType) => {\n      return item?.id?.toString();\n    },\n    tableColumns: columns,\n    itemCount: props.rules?.length || 0,\n  };\n  const description = isExceptions\n    ? t(\n        'Schedule exceptions are a component of an overall schedule.  A schedule exception is used to exclude dates from the schedule.  A schedule can have multiple exceptions.'\n      )\n    : t(\n        'Schedule rules are a component of an overall schedule.  A schedule rule is used to determine when a schedule will run.  A schedule can have multiple rules.'\n      );\n  const docUrl = useGetDocsUrl(config, 'schedules');\n  return (\n    <div>\n      {props.needsHeader ? (\n        <PageHeader\n          controls={\n            <TimezoneToggle\n              isLocal={isLocal}\n              setIsLocal={(b) => setIsLocal(b)}\n              localTimezone={props.timezone}\n            />\n          }\n          title={isExceptions ? t('Schedule Exceptions') : t('Schedule Rules')}\n          titleHelpTitle={isExceptions ? t('Schedule Exceptions') : t('Schedule Rules')}\n          titleHelp={t('Create as many schedule rules as you need.')}\n          titleDocLink={docUrl}\n          description={description}\n          headerActions={\n            <>\n              {t('iCalendar RFC ')}\n              <a\n                key=\"refDocLink\"\n                target=\"_blank\"\n                href=\"https://datatracker.ietf.org/doc/html/rfc5545\"\n                rel=\"noreferrer\"\n              >\n                {t('documentation')}\n              </a>\n            </>\n          }\n        />\n      ) : null}\n      <PageTable<RuleListItemType>\n        id=\"awx-schedule-rules-table\"\n        rowActions={rowActions}\n        errorStateTitle={isExceptions ? t('Error loading exceptions') : t('Error loading rules')}\n        emptyStateTitle={isExceptions ? t('No exceptions yet') : t('No rules yet')}\n        emptyStateDescription={\n          isExceptions\n            ? t('To get started, create an exception.')\n            : t('To get started, create an rule.')\n        }\n        emptyStateButtonIcon={<PlusCircleIcon />}\n        emptyStateButtonText={isExceptions ? t('Create exception') : t('Create Rule')}\n        emptyStateButtonClick={() => (props.setIsOpen ? props.setIsOpen(true) : null)}\n        defaultSubtitle={isExceptions ? t('Exceptions') : t('Rules')}\n        disablePagination\n        page={1}\n        perPage={1}\n        setPage={() => 1}\n        setPerPage={() => 1}\n        {...view}\n      />\n    </div>\n  );\n}\n","import { PencilAltIcon, TrashIcon } from '@patternfly/react-icons';\nimport { PageActionSelection, PageActionType } from '../../../../../framework';\nimport { useTranslation } from 'react-i18next';\nimport { RuleListItemType } from '../types';\nimport { useMemo } from 'react';\nimport { IPageAction } from '../../../../../framework';\nimport { useFormContext } from 'react-hook-form';\nimport { usePageWizard } from '../../../../../framework/PageWizard/PageWizardProvider';\nimport { RULES_DEFAULT_VALUES } from '../wizard/constants';\nimport { dateToInputDateTime } from '../../../../../framework/utils/dateTimeHelpers';\n\nexport function useRuleRowActions(\n  rules: RuleListItemType[],\n  setIsOpen?: (isOpen: boolean | number) => void\n) {\n  const { t } = useTranslation();\n  const context = useFormContext();\n  const wizard = usePageWizard();\n\n  return useMemo<IPageAction<RuleListItemType>[]>(() => {\n    if (!setIsOpen) return [];\n    const isExceptionStep = wizard.activeStep && wizard.activeStep.id === 'exceptions';\n    const existingRules = context.getValues('rules') as RuleListItemType[];\n    const existingExceptions = context.getValues('exceptions') as RuleListItemType[];\n\n    const deleteRule = (rule: RuleListItemType) => {\n      const filteredRules = rules.filter((item) => item.id !== rule.id);\n\n      isExceptionStep\n        ? context.setValue('exceptions', filteredRules)\n        : context.setValue('rules', filteredRules);\n      wizard.setStepData((prev) => {\n        isExceptionStep\n          ? (prev.exceptions = { ...RULES_DEFAULT_VALUES, exceptions: filteredRules })\n          : (prev.rules = { ...RULES_DEFAULT_VALUES, rule: filteredRules });\n        return {\n          ...prev,\n        };\n      });\n    };\n\n    return [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        isPinned: true,\n        icon: PencilAltIcon,\n        label: isExceptionStep ? t('Edit exception') : t('Edit rule'),\n        onClick: (r) => {\n          setIsOpen(r.id);\n          const rule = rules.find((item) => item.id === r.id);\n          let untilDateTime!: string[];\n          if (rule === undefined || !rule.rule) return;\n          if (rule?.rule?.options?.until !== null) {\n            untilDateTime = dateToInputDateTime(\n              rule?.rule?.options?.until?.toISOString() ?? '',\n              rule?.rule?.options?.tzid\n            );\n          }\n\n          const ruleData = {\n            ...rule.rule.options,\n            endType: rule.rule.options.count\n              ? 'count'\n              : rule.rule.options.until\n                ? 'until'\n                : 'never',\n            id: rule.id,\n            rules: existingRules || [],\n            exceptions: existingExceptions || [],\n            until:\n              rule?.rule?.options?.until !== null\n                ? { date: untilDateTime[0], time: untilDateTime[1] }\n                : null,\n          };\n          context.reset(ruleData);\n        },\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: TrashIcon,\n        label: isExceptionStep ? t('Delete exception') : t('Delete rule'),\n        isPinned: true,\n        onClick: (rule) => {\n          deleteRule(rule);\n        },\n        isDanger: true,\n      },\n    ];\n  }, [t, rules, context, wizard, setIsOpen]);\n}\n","import { Button } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { PageFormSection } from '../../../../../framework/PageForm/Utils/PageFormSection';\nimport { useEffect, useState } from 'react';\nimport { RuleForm } from '../components/RuleForm';\nimport { RulesList } from '../components/RulesList';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { useFormContext } from 'react-hook-form';\nimport { RuleListItemType, ScheduleFormWizard } from '../types';\nimport { usePageWizard } from '../../../../../framework/PageWizard/PageWizardProvider';\nimport { DateTime } from 'luxon';\nimport { RRule, datetime } from 'rrule';\n\nexport function RulesStep() {\n  const { t } = useTranslation();\n  const [isOpen, setIsOpen] = useState<boolean | number>(false);\n  const { setValue, getValues } = useFormContext();\n  const { wizardData } = usePageWizard();\n\n  const { timezone } = wizardData as ScheduleFormWizard;\n  const rules = getValues('rules') as RuleListItemType[];\n  const hasRules = rules?.length > 0;\n  useEffect(() => {\n    const {\n      timezone,\n      startDateTime: { date, time },\n    } = wizardData as ScheduleFormWizard;\n\n    const [startHour, startMinute] = time.split(':');\n    const isStartPM = time.includes('PM');\n    const start = DateTime.fromISO(`${date}`).set({\n      hour: isStartPM ? parseInt(startHour, 10) + 12 : parseInt(`${startHour}`, 10),\n      minute: parseInt(startMinute, 10),\n    });\n    const { year, month, day, hour, minute } = start;\n    const updatedRules = (rules || []).map(({ rule, id }) => {\n      const newRule = new RRule({\n        ...rule.options,\n        tzid: timezone,\n        dtstart: datetime(year, month, day, hour, minute),\n      });\n      return { rule: newRule, id };\n    });\n    setValue('rules', updatedRules);\n  }, [rules, wizardData, setValue]);\n  return (\n    <PageFormSection singleColumn>\n      {!isOpen && hasRules && (\n        <Button\n          data-cy=\"add-rule-toolbar-button\"\n          icon={<PlusCircleIcon />}\n          onClick={() => {\n            setIsOpen(true);\n          }}\n          variant=\"link\"\n        >\n          {t('Add rule')}\n        </Button>\n      )}\n      {(isOpen || !hasRules) && (\n        <RuleForm title={t('Define rules')} isOpen={isOpen} setIsOpen={setIsOpen} />\n      )}\n\n      {hasRules && (\n        <RulesList\n          needsHeader\n          timezone={timezone}\n          rules={rules}\n          ruleType=\"rules\"\n          setIsOpen={setIsOpen}\n        />\n      )}\n    </PageFormSection>\n  );\n}\n","import { Button } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { PageFormSection } from '../../../../../framework/PageForm/Utils/PageFormSection';\nimport { useEffect, useState } from 'react';\nimport { RuleForm } from '../components/RuleForm';\nimport { RulesList } from '../components/RulesList';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { useFormContext } from 'react-hook-form';\nimport { RuleListItemType, ScheduleFormWizard } from '../types';\nimport { usePageWizard } from '../../../../../framework/PageWizard/PageWizardProvider';\nimport { DateTime } from 'luxon';\nimport { RRule, datetime } from 'rrule';\n\nexport function ExceptionsStep() {\n  const { t } = useTranslation();\n  const [isOpen, setIsOpen] = useState<boolean | number>(false);\n  const { getValues, setValue } = useFormContext();\n  const exceptions = getValues('exceptions') as RuleListItemType[];\n  const hasExceptions = exceptions?.length > 0;\n  const { setStepData, wizardData } = usePageWizard();\n  const { rules, timezone } = wizardData as ScheduleFormWizard;\n\n  useEffect(() => {\n    setValue('rules', rules);\n    const {\n      startDateTime: { date, time },\n    } = wizardData as ScheduleFormWizard;\n\n    const [startHour, startMinute] = time.split(':');\n    const isStartPM = time.includes('PM');\n    const start = DateTime.fromISO(`${date}`).set({\n      hour: isStartPM ? parseInt(startHour, 10) + 12 : parseInt(`${startHour}`, 10),\n      minute: parseInt(startMinute, 10),\n    });\n    const { year, month, day, hour, minute } = start;\n    const updatedExceptions = (exceptions || []).map(({ rule, id }) => {\n      const newRule = new RRule({\n        ...rule.options,\n        tzid: timezone,\n        dtstart: datetime(year, month, day, hour, minute),\n      });\n      return { rule: newRule, id };\n    });\n\n    setValue('exceptions', updatedExceptions);\n  }, [setStepData, setValue, exceptions, timezone, rules, wizardData]);\n\n  return (\n    <PageFormSection singleColumn>\n      {!isOpen && hasExceptions && (\n        <Button\n          icon={<PlusCircleIcon />}\n          onClick={() => {\n            setIsOpen(true);\n          }}\n          variant=\"link\"\n        >\n          {t('Add exception')}\n        </Button>\n      )}\n      {isOpen && <RuleForm isOpen={isOpen} title={t('Define exceptions')} setIsOpen={setIsOpen} />}\n\n      {(hasExceptions || (!isOpen && !hasExceptions)) && (\n        <RulesList\n          rules={exceptions}\n          timezone={timezone}\n          needsHeader\n          ruleType=\"exception\"\n          setIsOpen={setIsOpen}\n        />\n      )}\n    </PageFormSection>\n  );\n}\n","import { useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { IToolbarFilter, usePageDialog } from '../../../../../framework';\nimport { SingleSelectDialog } from '../../../../../framework/PageDialogs/SingleSelectDialog';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxView } from '../../../common/useAwxView';\nimport { WorkflowJobTemplate } from '../../../interfaces/WorkflowJobTemplate';\nimport { useTemplateColumns } from './useTemplateColumns';\nimport {\n  useCreatedByToolbarFilter,\n  useDescriptionToolbarFilter,\n  useModifiedByToolbarFilter,\n  useNameToolbarFilter,\n} from '../../../common/awx-toolbar-filters';\n\nfunction SelectWorkflowJobTemplate(props: {\n  title: string;\n  onSelect: (template: WorkflowJobTemplate) => void;\n}) {\n  const nameToolbarFilter = useNameToolbarFilter();\n  const descriptionToolbarFilter = useDescriptionToolbarFilter();\n  const createdByToolbarFilter = useCreatedByToolbarFilter();\n  const modifiedByToolbarFilter = useModifiedByToolbarFilter();\n  const toolbarFilters = useMemo<IToolbarFilter[]>(\n    () => [\n      nameToolbarFilter,\n      descriptionToolbarFilter,\n      createdByToolbarFilter,\n      modifiedByToolbarFilter,\n    ],\n    [nameToolbarFilter, descriptionToolbarFilter, createdByToolbarFilter, modifiedByToolbarFilter]\n  );\n  const tableColumns = useTemplateColumns({ disableLinks: true });\n  const view = useAwxView<WorkflowJobTemplate>({\n    url: awxAPI`/workflow_job_templates/`,\n    toolbarFilters,\n    tableColumns,\n    disableQueryString: true,\n  });\n  return (\n    <SingleSelectDialog<WorkflowJobTemplate>\n      {...props}\n      toolbarFilters={toolbarFilters}\n      tableColumns={tableColumns}\n      view={view}\n    />\n  );\n}\n\nexport function useSelectWorkflowJobTemplate() {\n  const [_, setDialog] = usePageDialog();\n  const { t } = useTranslation();\n  const openSelectInventory = useCallback(\n    (onSelect: (template: WorkflowJobTemplate) => void) => {\n      setDialog(\n        <SelectWorkflowJobTemplate title={t('Select workflow job template')} onSelect={onSelect} />\n      );\n    },\n    [setDialog, t]\n  );\n  return openSelectInventory;\n}\n","import { useCallback } from 'react';\nimport { FieldPath, FieldPathValue, FieldValues, Path } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { PageFormAsyncSelect } from '../../../../../framework/PageForm/Inputs/PageFormAsyncSelect';\nimport { requestGet } from '../../../../common/crud/Data';\nimport { AwxItemsResponse } from '../../../common/AwxItemsResponse';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { WorkflowJobTemplate } from '../../../interfaces/WorkflowJobTemplate';\nimport { useSelectWorkflowJobTemplate } from '../hooks/useSelectWorkflowJobTemplate';\n\nexport function PageFormWorkflowJobTemplateSelect<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  isRequired?: boolean;\n  workflowJobTemplatePath?: string;\n  templateId?: number;\n}) {\n  const { t } = useTranslation();\n\n  const openSelectDialog = useSelectWorkflowJobTemplate();\n  const query = useCallback(async () => {\n    const response = await requestGet<AwxItemsResponse<WorkflowJobTemplate>>(\n      awxAPI`/workflow_job_templates/`.concat(`?page_size=200`)\n    );\n\n    return Promise.resolve({\n      total: response.count,\n      values: response.results as FieldPathValue<TFieldValues, Path<TFieldValues>>[],\n    });\n  }, []);\n\n  return (\n    <PageFormAsyncSelect<TFieldValues>\n      name={props.name}\n      id=\"workflow-job-template-select\"\n      label={t('Workflow job template')}\n      query={query}\n      valueToString={(value) => {\n        if (value && typeof value === 'string') {\n          return value;\n        }\n        return (value as WorkflowJobTemplate)?.name ?? '';\n      }}\n      placeholder={t('Select workflow job template')}\n      loadingPlaceholder={t('Loading workflow job templates...')}\n      loadingErrorText={t('Error loading workflow job templates')}\n      isRequired={props.isRequired}\n      limit={200}\n      openSelectDialog={openSelectDialog}\n    />\n  );\n}\n","import { useWatch } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport { RegularInventory } from '../../../interfaces/Inventory';\nimport { PageFormSection } from '../../../../../framework/PageForm/Utils/PageFormSection';\nimport { PageFormSelect } from '../../../../../framework';\nimport { PageFormJobTemplateSelect } from '../../../resources/templates/components/PageFormJobTemplateSelect';\nimport { PageFormWorkflowJobTemplateSelect } from '../../../resources/templates/components/PageFormWorkflowJobTemplateSelect';\nimport { PageFormInventorySelect } from '../../../resources/inventories/components/PageFormInventorySelect';\nimport { PageFormInventorySourceSelect } from '../../../resources/inventories/components/PageFormInventorySourceSelect';\nimport { PageFormProjectSelect } from '../../../resources/projects/components/PageFormProjectSelect';\nimport { PageFormManagementJobsSelect } from '../../../administration/management-jobs/components/PageFormManagementJobsSelect';\nimport { ScheduleFormWizard } from '../types';\nimport { Divider } from '@patternfly/react-core';\n\nexport function ScheduleTypeInputs() {\n  const { t } = useTranslation();\n  const params: { [string: string]: string } = useParams<{ id?: string; source_id?: string }>();\n\n  const resourceInventory = useWatch({ name: 'resourceInventory' }) as RegularInventory;\n  const scheduleType = useWatch({\n    name: 'schedule_type',\n  }) as string;\n  return (\n    <>\n      <PageFormSection>\n        <PageFormSelect<ScheduleFormWizard>\n          isRequired={!params['*']?.startsWith('schedules')}\n          labelHelpTitle={t('Resource type')}\n          labelHelp={t('Select a resource type onto which this schedule will be applied.')}\n          name=\"schedule_type\"\n          id=\"schedule_type\"\n          data-cy=\"schedule-type\"\n          label={t('Resource type')}\n          options={[\n            { label: t('Job template'), value: 'job_template' },\n            { label: t('Workflow job template'), value: 'workflow_job_template' },\n            { label: t('Inventory source'), value: 'inventory_source' },\n            { label: t('Project sync'), value: 'project' },\n            { label: t('Management job template'), value: 'management_job_template' },\n          ]}\n          placeholderText={t('Select job type')}\n        />\n\n        {scheduleType &&\n          {\n            job_template: (\n              <PageFormJobTemplateSelect<ScheduleFormWizard> isRequired name=\"resource\" />\n            ),\n            workflow_job_template: (\n              <PageFormWorkflowJobTemplateSelect<ScheduleFormWizard> isRequired name=\"resource\" />\n            ),\n            inventory_source: (\n              <>\n                <PageFormInventorySelect<ScheduleFormWizard>\n                  isRequired\n                  labelHelp={t(\n                    'First, select the inventory to which the desired inventory source belongs.'\n                  )}\n                  name=\"resourceInventory\"\n                />\n                {resourceInventory && resourceInventory?.id && (\n                  <PageFormInventorySourceSelect<ScheduleFormWizard>\n                    isRequired\n                    inventoryId={resourceInventory?.id}\n                    name=\"resource\"\n                  />\n                )}\n              </>\n            ),\n            project: <PageFormProjectSelect<ScheduleFormWizard> isRequired name=\"resource\" />,\n            management_job_template: (\n              <PageFormManagementJobsSelect<ScheduleFormWizard> isRequired name=\"resource\" />\n            ),\n          }[scheduleType]}\n      </PageFormSection>\n      <PageFormSection singleColumn>\n        <Divider />\n      </PageFormSection>\n    </>\n  );\n}\n","import { useWatch } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { useGetTimezones } from '../hooks/useGetTimezones';\nimport { useEffect, useState } from 'react';\nimport { PageFormSection } from '../../../../../framework/PageForm/Utils/PageFormSection';\nimport { PageFormTextInput } from '../../../../../framework';\nimport { ScheduleFormWizard } from '../types';\nimport { PageFormDateTimePicker } from '../../../../../framework/PageForm/Inputs/PageFormDateTimePicker';\nimport { PageFormSingleSelect } from '../../../../../framework/PageForm/Inputs/PageFormSingleSelect';\nimport { SystemJobTemplate } from '../../../interfaces/SystemJobTemplate';\n\nexport function ScheduleResourceInputs() {\n  const { t } = useTranslation();\n  const [timezoneMessage, setTimezoneMessage] = useState('');\n  const timeZone = useWatch({ name: 'timezone' }) as string;\n  const resource = useWatch({\n    name: 'resource',\n  }) as SystemJobTemplate;\n  const hasDaysToKeepField =\n    resource?.name &&\n    (resource.name.includes('Cleanup Activity Stream') ||\n      resource.name.includes('Cleanup Job Details'));\n  const { timeZones, links } = useGetTimezones();\n\n  useEffect(() => {\n    if (!links) {\n      return;\n    }\n\n    if (timeZone?.length && links[timeZone]) {\n      setTimezoneMessage(\n        t(`Warning: ${timeZone} is a link to ${links[timeZone]} and will be saved as that.`)\n      );\n    } else {\n      setTimezoneMessage('');\n    }\n  }, [timeZone, t, links]);\n\n  return (\n    <>\n      <PageFormSection>\n        <PageFormTextInput<ScheduleFormWizard>\n          name={'name'}\n          isRequired\n          label={t('Schedule name')}\n        />\n        <PageFormTextInput<ScheduleFormWizard> name={'description'} label={t('Description')} />\n        <PageFormDateTimePicker<ScheduleFormWizard>\n          label={t('Start date/time')}\n          name=\"startDateTime\"\n          isRequired\n        />\n        <PageFormSingleSelect<ScheduleFormWizard>\n          name=\"timezone\"\n          placeholder={t('Select a time zone')}\n          label={t('Time zone')}\n          options={timeZones}\n          helperText={timezoneMessage}\n          isRequired\n        />\n        {hasDaysToKeepField && (\n          <PageFormTextInput<ScheduleFormWizard>\n            name={'schedule_days_to_keep'}\n            isRequired\n            label={t('Days of data to keep')}\n            type=\"number\"\n            min={1}\n          />\n        )}\n      </PageFormSection>\n    </>\n  );\n}\n","import { useMemo } from 'react';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useGet } from '../../../../common/crud/useGet';\nexport function useGetTimezones() {\n  const { data } = useGet<{ zones: string[]; links: Record<string, string> }>(\n    awxAPI`/schedules/zoneinfo/`\n  );\n  const timeZones = useMemo(\n    () =>\n      (data?.zones || []).map((zone) => ({\n        value: zone,\n        key: zone,\n        label: zone,\n      })),\n    [data?.zones]\n  );\n  return { timeZones, links: data?.links };\n}\n","import { useParams } from 'react-router-dom';\nimport { ScheduleTypeInputs } from '../components/ScheduleTypeInputs';\nimport { ScheduleResourceInputs } from '../components/ScheduleResourceInputs';\nimport { useFormContext, useWatch } from 'react-hook-form';\nimport { ScheduleFormWizard, ScheduleResourceType, ScheduleResources } from '../types';\nimport { Dispatch, SetStateAction, useEffect } from 'react';\nimport { requestGet } from '../../../../common/crud/Data';\nimport { InventorySource } from '../../../interfaces/InventorySource';\nimport { PromptFormValues } from '../../../resources/templates/WorkflowVisualizer/types';\nimport { usePageWizard } from '../../../../../framework/PageWizard/PageWizardProvider';\nimport { PageWizardStep } from '../../../../../framework';\nimport { shouldHideOtherStep } from '../../../resources/templates/WorkflowVisualizer/wizard/helpers';\nimport { parseStringToTagArray } from '../../../resources/templates/JobTemplateFormHelpers';\nimport { LaunchConfiguration } from '../../../interfaces/LaunchConfiguration';\nimport { awxAPI } from '../../../common/api/awx-utils';\n\n/**\n *\n * @param {string}[resourceEndPoint] This used to fetch the resource to which the schedule belongs\n * @param {boolean}[isTopLevelSchedule] This is used to determine if we need to render the scheduleType\n * field and the resourceSelect field on the form.  If we did not get to the schedule create form from the top level\n * schedules list then we know which resource this schedule will belong to once it is created\n */\n\nexport function ScheduleSelectStep(props: {\n  resourceEndPoint?: string;\n  isTopLevelSchedule?: boolean;\n}) {\n  const isTopLevelScheduleForm = props.isTopLevelSchedule;\n\n  const params = useParams();\n  const { reset, getValues, setValue, formState, getFieldState, register, control } =\n    useFormContext<ScheduleFormWizard>();\n  const { defaultValues } = formState;\n  const resource = useWatch({ name: 'resource' }) as ScheduleResources;\n  const {\n    setWizardData,\n    setStepData,\n    stepData,\n    steps: allSteps,\n  } = usePageWizard() as {\n    setWizardData: Dispatch<SetStateAction<ScheduleFormWizard>>;\n    setStepData: (\n      data:\n        | Record<'details', Partial<ScheduleFormWizard>>\n        | Record<'promptStep', { prompt: PromptFormValues }>\n    ) => void;\n\n    stepData: {\n      details?: Partial<ScheduleFormWizard>;\n      promptStep?: { prompt: PromptFormValues };\n    };\n    wizardData: Partial<ScheduleFormWizard>;\n    visibleSteps: PageWizardStep[];\n    steps: PageWizardStep[];\n  };\n\n  // Register form fields\n  register('schedule_type');\n  register('resource');\n  register('prompt');\n  useEffect(() => {\n    if (resource || !params?.id || props.resourceEndPoint === undefined) return;\n    const getResource = async () => {\n      let scheduleResource: ScheduleResources;\n      if (params.source_id) {\n        scheduleResource = await requestGet<InventorySource>(\n          `${props.resourceEndPoint ?? ''}${params.source_id}/`\n        );\n      } else {\n        scheduleResource = await requestGet<ScheduleResources>(\n          `${props.resourceEndPoint ?? ''}${params?.id}/`\n        );\n      }\n      reset(\n        {\n          ...defaultValues,\n          schedule_type: scheduleResource.type,\n          resource: scheduleResource,\n        },\n        { keepDefaultValues: false }\n      );\n    };\n\n    void getResource();\n  }, [params, resource, defaultValues, props.resourceEndPoint, reset, setValue]);\n\n  const scheduleType = useWatch<ScheduleFormWizard>({\n    name: 'schedule_type',\n    control,\n    defaultValue: defaultValues?.schedule_type,\n  }) as ScheduleResourceType;\n\n  useEffect(() => {\n    const { isDirty, isTouched } = getFieldState('schedule_type');\n    const currentFormValues = getValues();\n\n    setValue('schedule_type', scheduleType, { shouldTouch: true });\n\n    if (isTouched && !isDirty) {\n      reset(undefined, {\n        keepDefaultValues: true,\n      });\n      setWizardData({ ...currentFormValues, launch_config: null });\n      setStepData({ ...stepData, details: currentFormValues });\n    }\n  }, [\n    scheduleType,\n    getFieldState,\n    setValue,\n    reset,\n    allSteps,\n    setWizardData,\n    setStepData,\n    getValues,\n    stepData,\n  ]);\n\n  useEffect(() => {\n    /** Only job templates and workflow job templates need to be able to fetch\n     * the launch configuration.\n     */\n    const resourceIsNotATemplate =\n      resource?.type !== 'job_template' && resource?.type !== 'workflow_job_template';\n\n    if (\n      !resource?.id ||\n      (resourceIsNotATemplate &&\n        !props.resourceEndPoint?.includes('/job_template') &&\n        !props.resourceEndPoint?.includes('/workflow_job_template'))\n    ) {\n      return;\n    }\n    const setLaunchToWizardData = async () => {\n      let endPoint = '';\n      resource.type === 'job_template'\n        ? (endPoint = awxAPI`/job_templates/${resource.id.toString()}/launch/`)\n        : resource.type === 'workflow_job_template'\n          ? (endPoint = awxAPI`/workflow_job_templates/${resource.id.toString()}/launch/`)\n          : (endPoint = `${props.resourceEndPoint ?? ''}/${resource.id.toString()}/launch/`);\n      let launchConfigValue = {} as PromptFormValues;\n\n      const launchConfigResults = await requestGet<LaunchConfiguration>(endPoint);\n\n      const {\n        job_tags = '',\n        skip_tags = '',\n        inventory,\n        ...defaults\n      } = launchConfigResults.defaults;\n\n      launchConfigValue = {\n        ...defaults,\n        instance_groups: defaults.instance_groups || [],\n        execution_environment: defaults.execution_environment?.id,\n        inventory: inventory?.id ? inventory : null,\n        job_tags: parseStringToTagArray(job_tags || ''),\n        skip_tags: parseStringToTagArray(skip_tags || ''),\n      };\n      const shouldShowPromptStep = !shouldHideOtherStep(launchConfigResults);\n      const shouldShowSurveyStep = launchConfigResults.survey_enabled;\n      if (shouldShowPromptStep || shouldShowSurveyStep) {\n        setWizardData((prev) => ({\n          ...prev,\n          launch_config: launchConfigResults,\n        }));\n\n        if (stepData.promptStep && resource) {\n          const { isDirty: isNodeTypeDirty } = getFieldState('schedule_type');\n          if (!isNodeTypeDirty && resource?.id === defaultValues?.resource?.id) {\n            setValue('prompt', { ...stepData.promptStep?.prompt });\n          } else {\n            /**  If the node type is not dirty and the node resource is not the same as the default value,\n             * and the wizard data is not the same as the default value, then reset the prompt to the default value\n             * else, set the prompt data to the current data.\n             */\n            setValue('prompt', launchConfigValue);\n          }\n        }\n      } else {\n        setWizardData((prev) => ({ ...prev, launch_config: null }));\n      }\n    };\n\n    void setLaunchToWizardData();\n  }, [\n    allSteps,\n    defaultValues,\n    getFieldState,\n    getValues,\n    resource,\n    scheduleType,\n    setValue,\n    setWizardData,\n    stepData,\n    isTopLevelScheduleForm,\n    props.resourceEndPoint,\n  ]);\n  return (\n    <>\n      {isTopLevelScheduleForm ? (\n        <>\n          <ScheduleTypeInputs />\n          {resource && <ScheduleResourceInputs />}\n        </>\n      ) : (\n        <ScheduleResourceInputs />\n      )}\n    </>\n  );\n}\n","import { Label } from 'dagre';\nimport { useCallback } from 'react';\nimport { useAbortController } from '../../../../../framework/hooks/useAbortController';\nimport { requestGet } from '../../../../common/crud/Data';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { AwxItemsResponse } from '../../../common/AwxItemsResponse';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { getAddedAndRemoved } from '../../../common/util/getAddedAndRemoved';\nimport { LaunchConfiguration } from '../../../interfaces/LaunchConfiguration';\nimport { Organization } from '../../../interfaces/Organization';\nimport { PromptFormValues } from '../../../resources/templates/WorkflowVisualizer/types';\n\nasync function getDefaultOrganization(): Promise<number> {\n  const itemsResponse = await requestGet<AwxItemsResponse<Organization>>(awxAPI`/organizations/`);\n  return itemsResponse.results[0].id || 1;\n}\nexport const useProcessLabels = () => {\n  const abortController = useAbortController();\n  const postDisassociate = usePostRequest<{ id: number; disassociate: boolean }>();\n  const postAssociateLabel = usePostRequest<\n    { name: string; organization: number } | { id: number }\n  >();\n\n  return useCallback(\n    async (\n      scheduleId: number,\n      labels: PromptFormValues['labels'],\n      launch_config: LaunchConfiguration | null,\n      organization?: number | null\n    ) => {\n      const hasLabelsPrompt = launch_config?.ask_labels_on_launch;\n      const existingLabels = launch_config?.defaults?.labels;\n\n      if (hasLabelsPrompt) {\n        const defaultOrganization = organization ?? (await getDefaultOrganization());\n\n        const { added, removed } = getAddedAndRemoved(\n          existingLabels || [],\n          labels || ([] as Label[])\n        );\n\n        const disassociationPromises = removed.map((label: { id: number }) =>\n          postDisassociate(\n            awxAPI`/schedules/${scheduleId.toString()}/labels/`,\n            {\n              id: label.id,\n              disassociate: true,\n            },\n            abortController.signal\n          )\n        );\n\n        const associationPromises = added.map(\n          (label: { name: string; id?: number; organization?: number }) =>\n            postAssociateLabel(\n              awxAPI`/schedules/${scheduleId.toString()}/labels/`,\n              label.id\n                ? { id: label.id }\n                : {\n                    name: label.name,\n                    organization: label?.organization ?? defaultOrganization,\n                  },\n              abortController.signal\n            )\n        );\n\n        await Promise.all([...disassociationPromises, ...associationPromises]);\n      } else if (existingLabels) {\n        const disassociationPromises = existingLabels.map((label: { id: number }) =>\n          postDisassociate(\n            awxAPI`/schedules/${scheduleId.toString()}/labels/`,\n            {\n              id: label.id,\n              disassociate: true,\n            },\n            abortController.signal\n          )\n        );\n        await Promise.all(disassociationPromises);\n      }\n    },\n    [postDisassociate, postAssociateLabel, abortController]\n  );\n};\n","import { useCallback } from 'react';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { Schedule } from '../../../interfaces/Schedule';\nimport { useProcessCredentials } from './useProcessCredentials';\nimport { useProcessInstanceGroups } from './useProcessInstanceGroups';\nimport { useProcessLabels } from './useProcessLabels';\nimport { StandardizedFormData } from '../wizard/ScheduleAddWizard';\nimport { stringifyTags } from '../../../resources/templates/JobTemplateFormHelpers';\nimport { useParams } from 'react-router-dom';\nimport { usePatchRequest } from '../../../../common/crud/usePatchRequest';\n\nexport type CreateSchedulePayload = {\n  name: string;\n  description?: string;\n  timezone: string;\n  rrule: string;\n  inventory?: number;\n  extra_data?: object;\n  scm_branch?: string;\n  job_type?: string;\n  job_tags?: string;\n  skip_tags?: string;\n  limit?: string;\n  diff_mode?: boolean;\n  verbosity?: number;\n  execution_environment?: number | null;\n  organization?: number | null;\n  forks?: number;\n  job_slice_count?: number;\n  timeout?: number;\n  credentials?:\n    | Credential[]\n    | {\n        id: number;\n        name: string;\n        credential_type: number;\n        passwords_needed?: string[];\n        vault_id?: string;\n      }[];\n  labels?: { name: string; id: number }[];\n  instance_groups?: { id: number; name: string }[];\n  unified_job_template?: number;\n};\n\nexport const useProcessSchedule = () => {\n  const params = useParams<{ id?: string; schedule_id: string }>();\n  const postAccessories = usePostAccessories();\n  const postSchedule = usePostRequest<CreateSchedulePayload, Schedule>();\n  const updateSchedule = usePatchRequest<CreateSchedulePayload, Schedule>();\n  return useCallback(\n    async (payloadData: StandardizedFormData) => {\n      const { resource, prompt, schedule_days_to_keep, survey, enabled, ...rest } = payloadData;\n      const request = (endPoint: string, payload: CreateSchedulePayload) => {\n        if (params.schedule_id && params.id) {\n          return updateSchedule(awxAPI`/schedules/${params.schedule_id.toString()}/`, {\n            ...payload,\n            unified_job_template: resource.id,\n          });\n        }\n        return postSchedule(endPoint, payload);\n      };\n\n      const {\n        execution_environment,\n        credentials,\n        job_tags,\n        skip_tags,\n        inventory,\n        ...restOfPrompt\n      } = prompt || { execution_environment: null, job_tags: '', skip_tags: '' };\n      const { type, id } = resource;\n      let schedule: Schedule;\n      const extraDataObject: { [key: string]: string } = {};\n      const hasJobTags = job_tags && job_tags?.length > 0;\n      const hasSkipTags = prompt && prompt?.skip_tags && prompt?.skip_tags?.length > 0;\n      schedule_days_to_keep && Object.assign(extraDataObject, { days: schedule_days_to_keep });\n      survey &&\n        Object.keys(survey).forEach((k: string) => {\n          extraDataObject[k] = survey[k];\n        });\n      const payload = {\n        ...rest,\n        ...restOfPrompt,\n        inventory: inventory?.id,\n        execution_environment: execution_environment,\n        skip_tags: hasSkipTags ? stringifyTags(prompt?.skip_tags) : undefined,\n        job_tags: hasJobTags ? stringifyTags(job_tags) : undefined,\n        enabled: enabled,\n        extra_data: extraDataObject,\n      };\n      switch (type) {\n        case 'inventory_source':\n          return {\n            schedule: await request(\n              awxAPI`/inventory_sources/${id.toString()}/schedules/`,\n              payload\n            ),\n          };\n        case 'project':\n          return {\n            schedule: await request(awxAPI`/projects/${id.toString()}/schedules/`, payload),\n          };\n        case 'system_job_template':\n          return {\n            schedule: await request(\n              awxAPI`/system_job_templates/${id.toString()}/schedules/`,\n              payload\n            ),\n          };\n        case 'workflow_job_template':\n          schedule = await request(\n            awxAPI`/workflow_job_templates/${id.toString()}/schedules/`,\n            payload\n          );\n          await postAccessories(schedule, payload);\n          return {\n            schedule,\n          };\n        default:\n          schedule = await request(awxAPI`/job_templates/${id.toString()}/schedules/`, payload);\n          await postAccessories(schedule, payload);\n\n          return {\n            schedule,\n          };\n      }\n    },\n    [params.schedule_id, updateSchedule, postSchedule, params.id, postAccessories]\n  );\n};\n\nexport function usePostAccessories() {\n  const processCredentials = useProcessCredentials();\n  const processInstanceGroups = useProcessInstanceGroups();\n  const processLabels = useProcessLabels();\n  return useCallback(\n    async (\n      schedule: Schedule,\n      payload: Pick<StandardizedFormData, 'launch_config'> &\n        Partial<\n          Pick<\n            StandardizedFormData['prompt'],\n            'credentials' | 'instance_groups' | 'labels' | 'organization'\n          >\n        >\n    ) => {\n      if (payload.credentials) {\n        await processCredentials(schedule.id, payload.credentials, payload.launch_config);\n      }\n      if (payload.instance_groups) {\n        await processInstanceGroups(schedule.id, payload.instance_groups, payload.launch_config);\n      }\n      if (payload.labels) {\n        await processLabels(\n          schedule.id,\n          payload.labels,\n          payload.launch_config,\n          payload.organization\n        );\n      }\n    },\n    [processCredentials, processInstanceGroups, processLabels]\n  );\n}\n","import { useCallback } from 'react';\nimport { useAbortController } from '../../../../../framework/hooks/useAbortController';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { getAddedAndRemoved } from '../../../common/util/getAddedAndRemoved';\nimport { Credential } from '../../../interfaces/Credential';\nimport { LaunchConfiguration } from '../../../interfaces/LaunchConfiguration';\nimport { PromptFormValues } from '../../../resources/templates/WorkflowVisualizer/types';\n\nexport const useProcessCredentials = () => {\n  const abortController = useAbortController();\n  const postDisassociate = usePostRequest<{ id: number; disassociate: boolean }>();\n  const postAssociateCredential = usePostRequest<{ id: number }, Credential>();\n\n  return useCallback(\n    async (\n      scheduleId: number,\n      credentials: PromptFormValues['credentials'],\n      launch_config: LaunchConfiguration | null\n    ) => {\n      const promptCredentials = credentials || [];\n      const templateCredentials = launch_config?.defaults.credentials || [];\n\n      if (promptCredentials) {\n        const { added, removed } = getAddedAndRemoved(\n          promptCredentials.length ? promptCredentials : ([] as { id: number }[]),\n          templateCredentials\n        );\n        const disassociationPromises = removed.map((credential: { id: number }) =>\n          postDisassociate(\n            awxAPI`/schedules/${scheduleId.toString()}/credentials/`,\n            {\n              id: credential.id,\n              disassociate: true,\n            },\n            abortController.signal\n          )\n        );\n\n        const associationPromises = added.map((credential) =>\n          postAssociateCredential(\n            awxAPI`/schedules/${scheduleId.toString()}/credentials/`,\n            {\n              id: credential.id,\n            },\n            abortController.signal\n          )\n        );\n\n        await Promise.all([...disassociationPromises, ...associationPromises]);\n      }\n    },\n    [postDisassociate, postAssociateCredential, abortController]\n  );\n};\n","import { useCallback } from 'react';\nimport { useAbortController } from '../../../../../framework/hooks/useAbortController';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { getAddedAndRemoved } from '../../../common/util/getAddedAndRemoved';\nimport { InstanceGroup } from '../../../interfaces/InstanceGroup';\nimport { LaunchConfiguration } from '../../../interfaces/LaunchConfiguration';\nimport { PromptFormValues } from '../../../resources/templates/WorkflowVisualizer/types';\n\nexport const useProcessInstanceGroups = () => {\n  const abortController = useAbortController();\n  const postDisassociate = usePostRequest<{ id: number; disassociate: boolean }>();\n  const postAssociateInstanceGroup = usePostRequest<{ id: number }, InstanceGroup>();\n\n  return useCallback(\n    async (\n      scheduleId: number,\n      instance_groups: PromptFormValues['instance_groups'],\n      launch_config: LaunchConfiguration | null\n    ) => {\n      const hasInstanceGroupsPrompt = launch_config?.ask_instance_groups_on_launch;\n      const existingInstanceGroups = launch_config?.defaults.instance_groups;\n\n      if (hasInstanceGroupsPrompt) {\n        const { added, removed } = getAddedAndRemoved(\n          existingInstanceGroups || [],\n          instance_groups || ([] as InstanceGroup[])\n        );\n\n        const disassociationPromises = removed.map((group: { id: number }) =>\n          postDisassociate(\n            awxAPI`/schedules/${scheduleId.toString()}/instance_groups/`,\n            {\n              id: group.id,\n              disassociate: true,\n            },\n            abortController.signal\n          )\n        );\n\n        const associationPromises = added.map((group) =>\n          postAssociateInstanceGroup(\n            awxAPI`/schedules/${scheduleId.toString()}/instance_groups/`,\n            {\n              id: group.id,\n            },\n            abortController.signal\n          )\n        );\n\n        await Promise.all([...disassociationPromises, ...associationPromises]);\n      } else if (existingInstanceGroups) {\n        const disassociationPromises = existingInstanceGroups.map((group: { id: number }) =>\n          postDisassociate(\n            awxAPI`/schedules/${scheduleId.toString()}/instance_groups/`,\n            {\n              id: group.id,\n              disassociate: true,\n            },\n            abortController.signal\n          )\n        );\n        await Promise.all(disassociationPromises);\n      }\n    },\n    [postDisassociate, postAssociateInstanceGroup, abortController]\n  );\n};\n","import { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { PageDetail, PageDetails, PageWizardStep, useGetPageUrl } from '../../../../../framework';\nimport { usePageWizard } from '../../../../../framework/PageWizard/PageWizardProvider';\nimport { PromptReviewDetails } from '../../../resources/templates/WorkflowVisualizer/wizard/PromptReviewDetails';\nimport { ScheduleFormWizard } from '../types';\nimport { PageFormSection } from '../../../../../framework/PageForm/Utils/PageFormSection';\nimport { RRule, RRuleSet } from 'rrule';\nimport { RulesList } from '../components/RulesList';\nimport { TimezoneToggle } from '../SchedulePage/TimezoneToggle';\nimport { useState } from 'react';\n\nconst ResourceLink: { [key: string]: string } = {\n  inventory_update: AwxRoute.InventorySourceDetail,\n  job: AwxRoute.JobTemplateDetails,\n  project: AwxRoute.ProjectDetails,\n  management_job_template: AwxRoute.ManagementJobSchedules,\n  workflow_approval: AwxRoute.WorkflowApprovalDetails,\n  workflow_job: AwxRoute.WorkflowJobTemplateDetails,\n};\n\nexport function ScheduleReviewStep() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const [isLocal, setIsLocal] = useState(true);\n\n  const { wizardData, visibleSteps } = usePageWizard() as {\n    wizardData: ScheduleFormWizard;\n    visibleSteps: PageWizardStep[];\n  };\n  const {\n    schedule_type,\n    resource,\n    schedule_days_to_keep,\n    name,\n    description,\n    startDateTime,\n    timezone,\n    exceptions,\n    rules,\n  } = wizardData;\n\n  const hasPromptDetails = Boolean(\n    visibleSteps.find((step) => step.id === 'promptStep' || step.id === 'survey')\n  );\n  const resourceTypeDetail = useGetScheduleTypeDetail(schedule_type);\n\n  let resourceDetailsLink = getPageUrl(ResourceLink[schedule_type], {\n    params: { id: resource?.id },\n  });\n\n  if (resource && 'type' in resource && resource.type === 'inventory_source') {\n    resourceDetailsLink = getPageUrl(AwxRoute.InventorySourceDetail, {\n      params: {\n        source_id: resource?.id,\n        id: resource?.inventory,\n        inventory_type:\n          resource?.summary_fields?.inventory.kind === ''\n            ? 'inventory'\n            : resource?.summary_fields?.inventory.kind,\n      },\n    });\n  }\n  const ruleSet = new RRuleSet();\n  ruleSet.options.dtstart;\n  rules.forEach(({ rule }, i) => {\n    const {\n      options: { dtstart, tzid, ...rest },\n    } = rule;\n    if (i === 0) {\n      ruleSet.rrule(new RRule({ ...rest, dtstart, tzid }));\n      return;\n    }\n    ruleSet.rrule(new RRule({ ...rest }));\n  });\n  exceptions.length > 0 &&\n    exceptions.forEach(({ rule }) => {\n      const {\n        options: { dtstart, tzid, ...rest },\n      } = rule;\n      ruleSet.exrule(new RRule({ ...rest }));\n    });\n\n  return (\n    <>\n      <PageFormSection title={t('Review')} singleColumn>\n        <PageDetails numberOfColumns={'two'} disablePadding>\n          <PageDetail label={t('Resource type')}>{resourceTypeDetail}</PageDetail>\n          <PageDetail label={t('Resource')}>\n            <Link to={resourceDetailsLink}>{resource?.name}</Link>\n          </PageDetail>\n          <PageDetail label={t('Name')}>{name}</PageDetail>\n          <PageDetail label={t('Description')}>{description}</PageDetail>\n          {startDateTime && (\n            <PageDetail label={t('Start date/time')}>\n              {startDateTime.date + ', ' + startDateTime.time}\n            </PageDetail>\n          )}\n\n          <PageDetail label={t('Local time zone')}>{timezone}</PageDetail>\n          <PageDetail label={t('Days of data to keep')}>{schedule_days_to_keep}</PageDetail>\n          {hasPromptDetails ? <PromptReviewDetails /> : null}\n        </PageDetails>\n        <PageDetail fullWidth label={t('Toggle timezone')}>\n          <TimezoneToggle isLocal={isLocal} setIsLocal={setIsLocal} localTimezone={timezone} />\n        </PageDetail>\n        <RulesList ruleType=\"rules\" rules={rules} timezone={timezone} isLocalForDetails={isLocal} />\n        {exceptions.length ? (\n          <RulesList\n            ruleType=\"exceptions\"\n            rules={exceptions}\n            timezone={timezone}\n            isLocalForDetails={isLocal}\n          />\n        ) : null}\n      </PageFormSection>\n    </>\n  );\n}\nfunction useGetScheduleTypeDetail(type: string) {\n  const { t } = useTranslation();\n  const typeMapping: { [key: string]: string } = {\n    job: t('Job Template'),\n    job_template: t('Job Template'),\n    workflow_job: t('Workflow Job Template'),\n    workflow_job_template: t('Workflow Job Template'),\n    project_update: t('Project Update'),\n    inventory_update: t('Inventory Update'),\n    system_job: t('Management Job'),\n    management_job_template: t('Management Job'),\n  };\n  return typeMapping[type];\n}\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Schedule } from '../../../interfaces/Schedule';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { schedulePageUrl } from '../types';\n\nexport function useGetScheduleUrl() {\n  const { t } = useTranslation();\n  return useCallback(\n    (route: string, schedule: Schedule) => {\n      const unified_job_type = schedule.summary_fields.unified_job_template.unified_job_type;\n      let params: { id: string; schedule_id: string; source_id?: string; inventory_type?: string } =\n        {\n          id: schedule.summary_fields.unified_job_template?.id.toString(),\n          schedule_id: schedule.id.toString(),\n        };\n      if (unified_job_type === 'inventory_update' && schedule.summary_fields.inventory?.id) {\n        params = {\n          id: schedule.summary_fields.inventory?.id.toString(),\n          source_id: schedule.summary_fields.unified_job_template.id.toString(),\n          schedule_id: schedule.id.toString(),\n          inventory_type: 'inventory',\n        };\n        return {\n          name: t('Inventory sync'),\n          details: {\n            pageId: AwxRoute.InventorySourceScheduleDetails,\n            params,\n          },\n          create: {\n            pageId: AwxRoute.InventorySourceScheduleCreate,\n            params,\n          },\n          edit: {\n            pageId: AwxRoute.InventorySourceScheduleEdit,\n            params,\n          },\n          resource: {\n            pageId: AwxRoute.InventorySourceDetail,\n            params,\n          },\n          scheduleList: { pageId: AwxRoute.InventorySourceSchedules, params },\n        }[route] as string | schedulePageUrl;\n      }\n      if (unified_job_type === 'job') {\n        return {\n          name: t('Playbook run'),\n          details: { pageId: AwxRoute.JobTemplateScheduleDetails, params },\n          create: { pageId: AwxRoute.JobTemplateScheduleCreate, params },\n          edit: { pageId: AwxRoute.JobTemplateScheduleEdit, params },\n          resource: { pageId: AwxRoute.JobTemplateDetails, params },\n          scheduleList: { pageId: AwxRoute.JobTemplateSchedules, params },\n        }[route] as string | schedulePageUrl;\n      }\n      if (unified_job_type === 'project_update') {\n        return {\n          name: t('Project update'),\n          details: { pageId: AwxRoute.ProjectScheduleDetails, params },\n          create: { pageId: AwxRoute.ProjectScheduleCreate, params },\n          edit: { pageId: AwxRoute.ProjectScheduleEdit, params },\n          resource: { pageId: AwxRoute.ProjectDetails, params },\n          scheduleList: { pageId: AwxRoute.ProjectSchedules, params },\n        }[route] as string | schedulePageUrl;\n      }\n      if (unified_job_type === 'system_job') {\n        return {\n          name: t('Management job'),\n          details: { pageId: AwxRoute.ManagementJobScheduleDetails, params },\n          create: { pageId: AwxRoute.ManagementJobScheduleCreate, params },\n          edit: { pageId: AwxRoute.ManagementJobScheduleEdit, params },\n          resource: { pageId: AwxRoute.ManagementJobSchedules, params },\n          scheduleList: { pageId: AwxRoute.ManagementJobSchedules, params },\n        }[route] as string | schedulePageUrl;\n      }\n      if (unified_job_type === 'workflow_job') {\n        return {\n          name: t('Workflow job'),\n          details: { pageId: AwxRoute.WorkflowJobTemplateScheduleDetails, params },\n          create: { pageId: AwxRoute.WorkflowJobTemplateScheduleCreate, params },\n          edit: { pageId: AwxRoute.WorkflowJobTemplateScheduleEdit, params },\n          resource: { pageId: AwxRoute.WorkflowJobTemplateDetails, params },\n          scheduleList: { pageId: AwxRoute.WorkflowJobTemplateSchedules, params },\n        }[route] as string | schedulePageUrl;\n      }\n      return '';\n    },\n    [t]\n  );\n}\n","import { useCallback } from 'react';\nimport { RRule, RRuleSet } from 'rrule';\nimport { RuleListItemType } from '../types';\n\nexport function useSetRRuleItemToRuleSet() {\n  return useCallback((rules: RuleListItemType[], exceptions: RuleListItemType[] | []) => {\n    const ruleset = new RRuleSet();\n\n    rules.forEach((r, i) => {\n      const {\n        rule: {\n          options: { dtstart, tzid, ...rest },\n        },\n      } = r;\n      if (i === 0) {\n        ruleset.rrule(new RRule({ ...rest, dtstart, tzid }));\n      } else {\n        ruleset.rrule(new RRule({ ...rest }));\n      }\n    });\n    if (exceptions.length) {\n      exceptions?.forEach((r) => {\n        const {\n          rule: {\n            options: { dtstart, tzid, ...rest },\n          },\n        } = r;\n        ruleset.exrule(new RRule({ ...rest }));\n      });\n    }\n    return ruleset;\n  }, []);\n}\n","import { useMemo } from 'react';\nimport { DateTime } from 'luxon';\nimport { useTranslation } from 'react-i18next';\nimport {\n  PageHeader,\n  PageLayout,\n  PageWizard,\n  PageWizardStep,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { useGetPageUrl } from '../../../../../framework/PageNavigation/useGetPageUrl';\nimport { dateToInputDateTime } from '../../../../../framework/utils/dateTimeHelpers';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { RuleFields, ScheduleFormWizard, schedulePageUrl } from '../types';\nimport { awxErrorAdapter } from '../../../common/adapters/awxErrorAdapter';\nimport { RulesStep } from './RulesStep';\nimport { ExceptionsStep } from './ExceptionsStep';\nimport { SurveyStep } from '../../../common/SurveyStep';\nimport { ScheduleSelectStep } from './ScheduleSelectStep';\nimport { NodePromptsStep as SchedulePromptsStep } from '../../../resources/templates/WorkflowVisualizer/wizard/NodePromptsStep';\nimport { WizardFormValues } from '../../../resources/templates/WorkflowVisualizer/types';\nimport { shouldHideOtherStep } from '../../../resources/templates/WorkflowVisualizer/wizard/helpers';\nimport { useProcessSchedule } from '../hooks/useProcessSchedules';\nimport { useNavigate } from 'react-router-dom';\nimport { Schedule } from '../../../interfaces/Schedule';\nimport { RequestError } from '../../../../common/crud/RequestError';\nimport { RULES_DEFAULT_VALUES } from './constants';\nimport { ScheduleReviewStep } from './ScheduleReviewStep';\nimport { useGetScheduleUrl } from '../hooks/useGetScheduleUrl';\nimport { useSetRRuleItemToRuleSet } from '../hooks/useSetRRuleItemToRuleSet';\nimport { postRequest } from '../../../../common/crud/Data';\nimport { awxAPI } from '../../../common/api/awx-utils';\n\nexport type StandardizedFormData = Omit<ScheduleFormWizard, 'rules' | 'exceptions'> & {\n  rrule: string;\n};\n\n/**\n *\n * @param {string}[resourceEndPoint] - This passed down to the ScheduleSelectStep so it can fetch the resource\n * to which the schedule belongs\n * @param {boolean}[isTopLevelSchedule] - This passed down to the ScheduleSelectStep to determine if we need to render\n * the scheduleType field and the resourceSelect field on the form.  If we did not get to the schedule create form from the top level\n * schedules list then we know which resource this schedule will belong to once it is created\n */\nexport function ScheduleAddWizard(props: {\n  resourceEndPoint?: string;\n  isTopLevelSchedule?: boolean;\n}) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const pageNavigate = usePageNavigate();\n  const navigate = useNavigate();\n  const processSchedules = useProcessSchedule();\n  const getScheduleUrl = useGetScheduleUrl();\n  const getRuleSet = useSetRRuleItemToRuleSet();\n\n  const now = DateTime.now();\n  const closestQuarterHour: DateTime = DateTime.fromMillis(\n    Math.ceil(now.toMillis() / 900000) * 900000\n  );\n\n  const [currentDate, time]: string[] = dateToInputDateTime(closestQuarterHour.toISO() as string);\n  const handleSubmit = async (formValues: ScheduleFormWizard) => {\n    const { rules, exceptions, ...rest } = formValues;\n    const ruleset = getRuleSet(rules, exceptions);\n\n    const data: StandardizedFormData = {\n      rrule: ruleset.toString().split('\\n').join(' '),\n      ...rest,\n    };\n    try {\n      const {\n        schedule,\n      }: {\n        schedule: Schedule;\n      } = await processSchedules(data);\n\n      const pageUrl = getScheduleUrl('details', schedule) as schedulePageUrl;\n      pageNavigate(pageUrl.pageId, { params: pageUrl.params });\n    } catch (error) {\n      const { fieldErrors } = awxErrorAdapter(error);\n      const missingResource = fieldErrors.find((err) => err?.name === 'resources_needed_to_start');\n      if (missingResource) {\n        const errors = {\n          __all__: [missingResource.message],\n        };\n        throw new RequestError('', '', 400, '', errors);\n      }\n    }\n  };\n\n  const onCancel = () => navigate(location.pathname.replace('create', ''));\n\n  const steps: PageWizardStep[] = useMemo(() => {\n    return [\n      {\n        id: 'details',\n        label: t('Details'),\n        inputs: <ScheduleSelectStep {...props} />,\n      },\n      {\n        id: 'promptStep',\n        label: t('Prompts'),\n        inputs: <SchedulePromptsStep />,\n        hidden: (wizardData: Partial<ScheduleFormWizard>) => {\n          const { resource, schedule_type, launch_config } = wizardData;\n          if (\n            (schedule_type === 'workflow_job_template' || schedule_type === 'job_template') &&\n            resource &&\n            launch_config\n          ) {\n            return shouldHideOtherStep(launch_config);\n          }\n          return true;\n        },\n      },\n      {\n        id: 'survey',\n        label: t('Survey'),\n        inputs: <SurveyStep />,\n        hidden: (wizardData: Partial<WizardFormValues>) => {\n          if (Object.keys(wizardData).length === 0) {\n            return true;\n          }\n          if (wizardData.launch_config?.survey_enabled) {\n            return false;\n          }\n          return true;\n        },\n      },\n      {\n        id: 'rules',\n        label: t('Rules'),\n        inputs: <RulesStep />,\n        validate: (formData: Partial<RuleFields>) => {\n          if (!formData?.rules?.length) {\n            const errors = {\n              __all__: [t('Schedules must have at least one rule.')],\n            };\n\n            throw new RequestError('', '', 400, '', errors);\n          }\n        },\n      },\n      {\n        id: 'exceptions',\n        label: t('Exceptions'),\n        inputs: <ExceptionsStep />,\n      },\n      {\n        id: 'review',\n        label: t('Review'),\n        inputs: <ScheduleReviewStep />,\n\n        validate: async (_formData: object, wizardData: Partial<ScheduleFormWizard>) => {\n          if (!wizardData?.rules?.length) {\n            const errors = {\n              __all__: [t('Schedules must have at least one rule.')],\n            };\n\n            throw new RequestError('', '', 400, '', errors);\n          }\n\n          const ruleset = getRuleSet(wizardData.rules, wizardData.exceptions ?? []);\n          const { utc, local } = await postRequest<{ utc: string[]; local: string[] }>(\n            awxAPI`/schedules/preview/`,\n            {\n              rrule: ruleset.toString().split('\\n').join(' '),\n            }\n          );\n          if (!local.length && !utc.length) {\n            const errors = {\n              __all__: [\n                t(\n                  'This schedule will never run.  If you have defined exceptions it is likely that the exceptions cancel out all the rules defined in the rules step.'\n                ),\n              ],\n            };\n\n            throw new RequestError('', '', 400, '', errors);\n          }\n        },\n      },\n    ];\n  }, [getRuleSet, t, props]);\n  const initialValues = {\n    details: {\n      name: '',\n      description: '',\n      schedule_type: '',\n      resource: '',\n      startDateTime: { date: currentDate, time: time },\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    },\n    rules: { ...RULES_DEFAULT_VALUES, rules: [] },\n    exceptions: { ...RULES_DEFAULT_VALUES, exceptions: [] },\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Create schedule')}\n        breadcrumbs={[\n          { label: t('Schedules'), to: getPageUrl(AwxRoute.Schedules) },\n          { label: t('Create schedule') },\n        ]}\n      />\n      <PageWizard<ScheduleFormWizard>\n        steps={steps}\n        singleColumn={false}\n        onCancel={onCancel}\n        defaultValue={initialValues}\n        onSubmit={handleSubmit}\n        errorAdapter={awxErrorAdapter}\n      />\n    </PageLayout>\n  );\n}\n","import { DateTimeCell, usePageNavigate } from '../../../framework';\nimport { PageDetail } from '../../../framework/PageDetails/PageDetail';\nimport { AwxRoute } from '../main/AwxRoutes';\n\ninterface User {\n  id: number;\n  username: string;\n  first_name: string;\n  last_name: string;\n}\n\nexport function UserDateDetail(props: { label: string; date: string; user: User }) {\n  const pageNavigate = usePageNavigate();\n  return (\n    <PageDetail label={props.label}>\n      <DateTimeCell\n        value={props.date}\n        author={props?.user.username}\n        onClick={() => pageNavigate(AwxRoute.UserDetails, { params: { id: props.user.id } })}\n      />\n    </PageDetail>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  CopyCell,\n  LoadingPage,\n  PageDetail,\n  PageDetails,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { formatDateString } from '../../../../../framework/utils/dateTimeHelpers';\nimport { LastModifiedPageDetail } from '../../../../common/LastModifiedPageDetail';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { AwxError } from '../../../common/AwxError';\nimport { UserDateDetail } from '../../../common/UserDateDetail';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { Schedule } from '../../../interfaces/Schedule';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { Divider, Label, LabelGroup } from '@patternfly/react-core';\nimport { parseStringToTagArray } from '../../../resources/templates/JobTemplateFormHelpers';\nimport { PageDetailCodeEditor } from '../../../../../framework/PageDetails/PageDetailCodeEditor';\nimport { RRuleSet, rrulestr } from 'rrule';\nimport { RulesList } from '../components/RulesList';\nimport { ScheduleSummary } from '../components/ScheduleSummary';\nimport { TimezoneToggle } from './TimezoneToggle';\nimport { useState } from 'react';\n\n/**\n *\n * @param {boolean} [isSystemJobTemplateSchedule] - This is used to determine we need to render the\n * created by / modified by values.  Since a system job template is create under the hood those\n * two fields do not apply\n *\n */\nexport function ScheduleDetails(props: { isSystemJobTemplateSchedule?: boolean }) {\n  const { t } = useTranslation();\n  const [isLocal, setIsLocal] = useState(true);\n\n  const params = useParams<{ id: string; schedule_id: string }>();\n  const pageNavigate = usePageNavigate();\n  const {\n    data: schedule,\n    error,\n    refresh,\n  } = useGetItem<Schedule>(awxAPI`/schedules/`, params.schedule_id);\n  const jobTags =\n    typeof schedule?.job_tags === 'string'\n      ? parseStringToTagArray(schedule?.job_tags)\n      : schedule?.job_tags;\n  const skipTags =\n    typeof schedule?.skip_tags === 'string'\n      ? parseStringToTagArray(schedule?.skip_tags)\n      : schedule?.skip_tags;\n\n  if (error) return <AwxError error={error} handleRefresh={refresh} />;\n  if (!schedule) return <LoadingPage breadcrumbs tabs />;\n\n  const hasDaysToKeep: boolean = JSON.stringify(schedule?.extra_data).includes('days');\n  const extraData = schedule?.extra_data as string | object;\n\n  const ruleSet = rrulestr(schedule.rrule, { forceset: true }) as RRuleSet;\n  const rules = ruleSet.rrules().map((rule, i) => ({ rule, id: i }));\n  const exceptions = ruleSet.exrules().map((rule, i) => ({ rule, id: i }));\n  return (\n    <>\n      <PageDetails numberOfColumns=\"multiple\">\n        <PageDetail label={t('Name')}>{schedule?.name}</PageDetail>\n        <PageDetail label={t('Description')}>{schedule?.description}</PageDetail>\n        <PageDetail label={t('First run')}>\n          {formatDateString(schedule?.dtstart, schedule.timezone)}\n        </PageDetail>\n        {schedule.next_run ? (\n          <PageDetail label={t('Next run')}>\n            {formatDateString(schedule?.next_run, schedule.timezone)}\n          </PageDetail>\n        ) : null}\n        {schedule.dtend ? (\n          <PageDetail label={t('Last run')}>\n            {formatDateString(schedule?.dtend, schedule.timezone)}\n          </PageDetail>\n        ) : null}\n        <PageDetail label={t('Time zone')}>{schedule?.timezone}</PageDetail>\n        <PageDetail label={t('RruleSet')} fullWidth>\n          <CopyCell text={schedule?.rrule.toString()} />\n        </PageDetail>\n        {!props.isSystemJobTemplateSchedule && (\n          <>\n            <UserDateDetail\n              label={t('Created')}\n              date={schedule.created}\n              user={schedule.summary_fields.created_by}\n            />\n            <LastModifiedPageDetail\n              value={schedule.modified}\n              author={schedule.summary_fields.modified_by?.username}\n              onClick={() =>\n                pageNavigate(AwxRoute.UserDetails, {\n                  params: { id: schedule.summary_fields.modified_by?.id },\n                })\n              }\n            />\n          </>\n        )}\n        <PageDetail fullWidth>\n          <Divider />\n        </PageDetail>\n        <PageDetail label={t('Inventory')}>{schedule.summary_fields.inventory?.name}</PageDetail>\n        <PageDetail label={t('Job type')}>{schedule.job_type}</PageDetail>\n        <PageDetail label={t('Limit')}>{schedule.limit}</PageDetail>\n        <PageDetail label={t('Forks')}>{schedule.forks}</PageDetail>\n        <PageDetail label={t('Verbosity')}>{schedule.verbosity}</PageDetail>\n        <PageDetail label={t('Show changes')}>{schedule.diff_mode ? t`On` : t`Off`}</PageDetail>\n        <PageDetail label={t('Job tags')} isEmpty={!schedule.job_tags}>\n          <LabelGroup>{jobTags?.map(({ name }) => <Label key={name}>{name}</Label>)}</LabelGroup>\n        </PageDetail>\n        <PageDetail label={t('Skip tags')} isEmpty={!schedule.skip_tags}>\n          <LabelGroup>{skipTags?.map(({ name }) => <Label key={name}>{name}</Label>)}</LabelGroup>\n        </PageDetail>\n        {!hasDaysToKeep && (\n          <PageDetail fullWidth>\n            <PageDetailCodeEditor\n              label={t('Extra variables')}\n              value={JSON.stringify(schedule.extra_data)}\n            />\n          </PageDetail>\n        )}\n        {hasDaysToKeep && (\n          <PageDetail fullWidth label={t('Days of data to keep')}>\n            {typeof extraData === 'string'\n              ? extraData.toString().replace('}', '').split(':')[1]\n              : schedule.extra_data.days?.toString()}\n          </PageDetail>\n        )}\n\n        {schedule && (\n          <>\n            <PageDetail fullWidth label={t('Toggle timezone')}>\n              <TimezoneToggle\n                isLocal={isLocal}\n                setIsLocal={setIsLocal}\n                localTimezone={schedule.timezone}\n              />\n            </PageDetail>\n\n            <ScheduleSummary rrule={schedule.rrule} isLocal={isLocal} />\n          </>\n        )}\n\n        <PageDetail fullWidth>\n          <RulesList\n            ruleType=\"rules\"\n            timezone={schedule.timezone}\n            rules={rules}\n            isLocalForDetails={isLocal}\n          />\n          {exceptions.length ? (\n            <RulesList\n              ruleType=\"exceptions\"\n              timezone={schedule.timezone}\n              rules={exceptions}\n              isLocalForDetails={isLocal}\n            />\n          ) : null}\n        </PageDetail>\n      </PageDetails>\n    </>\n  );\n}\n","import { useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { DateTimeCell, ITableColumn, TextCell, usePageNavigate } from '../../../../../framework';\nimport { useDescriptionColumn, useNameColumn, useTypeColumn } from '../../../../common/columns';\nimport { Schedule } from '../../../interfaces/Schedule';\nimport { useGetScheduleUrl } from './useGetScheduleUrl';\nimport { schedulePageUrl } from '../types';\n\nexport function useSchedulesColumns(options?: { disableSort?: boolean; disableLinks?: boolean }) {\n  const { t } = useTranslation();\n\n  const getScheduleUrl = useGetScheduleUrl();\n  const pageNavigate = usePageNavigate();\n\n  const typeColumn = useTypeColumn<Schedule>({\n    ...options,\n    makeReadable: (schedule: Schedule) => getScheduleUrl('name', schedule) as string,\n    sort: 'unified_job_template__polymorphic_ctype__model',\n  });\n  const nameClick = useCallback(\n    (schedule: Schedule) => {\n      const pageUrl = getScheduleUrl('details', schedule) as schedulePageUrl;\n      return pageNavigate(pageUrl.pageId, { params: pageUrl.params });\n    },\n    [getScheduleUrl, pageNavigate]\n  );\n  const nameColumn = useNameColumn({\n    ...options,\n    onClick: nameClick,\n  });\n  const relatedNameClick = useCallback(\n    (schedule: Schedule) => {\n      const pageUrl = getScheduleUrl('resource', schedule) as schedulePageUrl;\n      return pageNavigate(pageUrl.pageId, { params: pageUrl.params });\n    },\n    [getScheduleUrl, pageNavigate]\n  );\n  const descriptionColumn = useDescriptionColumn();\n  const tableColumns = useMemo<ITableColumn<Schedule>[]>(\n    () => [\n      nameColumn,\n      descriptionColumn,\n      {\n        header: t('Related resource'),\n        sort: 'unified_job_template',\n        cell: (schedule) => (\n          <TextCell\n            text={schedule.summary_fields.unified_job_template.name}\n            onClick={() => relatedNameClick(schedule)}\n          />\n        ),\n      },\n      typeColumn,\n      {\n        header: t('Next run'),\n        sort: 'next_run',\n        cell: (sched) => <DateTimeCell value={sched.next_run} />,\n      },\n    ],\n    [nameColumn, descriptionColumn, t, typeColumn, relatedNameClick]\n  );\n  return tableColumns;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { compareStrings } from '../../../../../framework';\nimport { useNameColumn } from '../../../../common/columns';\nimport { getItemKey, requestDelete } from '../../../../common/crud/Data';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { Schedule } from '../../../interfaces/Schedule';\nimport { useSchedulesColumns } from './useSchedulesColumns';\n\nexport function useDeleteSchedules(onComplete?: (schedules: Schedule[]) => void) {\n  const { t } = useTranslation();\n  const confirmationColumns = useSchedulesColumns({ disableLinks: true, disableSort: true });\n  const deleteActionNameColumn = useNameColumn({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo(() => [deleteActionNameColumn], [deleteActionNameColumn]);\n\n  const bulkAction = useAwxBulkConfirmation<Schedule>();\n  const deleteSchedules = (schedules: Schedule[]) => {\n    bulkAction({\n      title: t('Permanently delete schedule', { count: schedules.length }),\n      confirmText: t('Yes, I confirm that I want to delete these {{count}} schedules.', {\n        count: schedules.length,\n      }),\n      actionButtonText: t('Delete schedule', { count: schedules.length }),\n      items: schedules.sort((l, r) => compareStrings(l.name, r.name)),\n      keyFn: getItemKey,\n      isDanger: true,\n      confirmationColumns,\n      actionColumns: actionColumns,\n      onComplete,\n      actionFn: (schedule: Schedule, signal) =>\n        requestDelete(awxAPI`/schedules/${schedule.id.toString()}/`, signal),\n    });\n  };\n  return deleteSchedules;\n}\n","import { PencilAltIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  useGetPageUrl,\n} from '../../../../../framework';\nimport { requestPatch } from '../../../../common/crud/Data';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { cannotDeleteResource, cannotEditResource } from '../../../../common/utils/RBAChelpers';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { ActionsResponse, OptionsResponse } from '../../../interfaces/OptionsResponse';\nimport { Schedule } from '../../../interfaces/Schedule';\nimport { useGetScheduleUrl } from './useGetScheduleUrl';\nimport { useDeleteSchedules } from './useDeleteSchedules';\nimport { schedulePageUrl } from '../types';\nimport { ButtonVariant } from '@patternfly/react-core';\n\nexport function useSchedulesActions(options: {\n  onScheduleDeleteCompleted: (schedules: Schedule[]) => void;\n  onScheduleToggleCompleted: (schedule: Schedule) => void;\n  sublistEndpoint?: string;\n}) {\n  const { t } = useTranslation();\n  const deleteSchedule = useDeleteSchedules(options?.onScheduleDeleteCompleted);\n  const { data } = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/schedules/`);\n  const canCreateSchedule = Boolean(data && data.actions && data.actions['POST']);\n  const handleToggleSchedule: (schedule: Schedule, enabled: boolean) => Promise<void> = useCallback(\n    async (schedule, enabled) => {\n      const patchedSchedule = await requestPatch<Schedule>(\n        awxAPI`/schedules/${schedule.id.toString()}/`,\n        { enabled }\n      );\n      options.onScheduleToggleCompleted(patchedSchedule);\n    },\n    [options]\n  );\n\n  const getPageUrl = useGetPageUrl();\n\n  const getScheduleUrl = useGetScheduleUrl();\n\n  const editHref = useCallback(\n    (schedule: Schedule) => {\n      const pageUrl = getScheduleUrl('edit', schedule) as schedulePageUrl;\n      return getPageUrl(pageUrl.pageId, { params: pageUrl.params });\n    },\n    [getPageUrl, getScheduleUrl]\n  );\n\n  const rowActions = useMemo<IPageAction<Schedule>[]>(\n    () => [\n      {\n        isPinned: true,\n        ariaLabel: (isEnabled) =>\n          isEnabled ? t('Click to disable schedule') : t('Click to enable schedule'),\n        type: PageActionType.Switch,\n        selection: PageActionSelection.Single,\n        labelOff: t('Schedule disabled'),\n        label: t('Schedule enabled'),\n        isDisabled: (schedule) => cannotEditResource(schedule, t, canCreateSchedule),\n        onToggle: (schedule, enabled) => handleToggleSchedule(schedule, enabled),\n        isSwitchOn: (schedule) => schedule.enabled,\n      },\n      {\n        type: PageActionType.Link,\n        selection: PageActionSelection.Single,\n        icon: PencilAltIcon,\n        variant: ButtonVariant.primary,\n        label: t(`Edit schedule`),\n        isDisabled: (schedule) => cannotEditResource(schedule, t, canCreateSchedule),\n        href: (schedule) => editHref(schedule),\n        isPinned: true,\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: TrashIcon,\n        label: t('Delete schedule'),\n        isDisabled: (schedule) => cannotDeleteResource(schedule, t),\n        onClick: (schedule) => deleteSchedule([schedule]),\n        isDanger: true,\n      },\n    ],\n    [t, canCreateSchedule, handleToggleSchedule, editHref, deleteSchedule]\n  );\n  return rowActions;\n}\n","import { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { PageActions, PageHeader, PageLayout } from '../../../../../framework';\nimport { useGetPageUrl } from '../../../../../framework/PageNavigation/useGetPageUrl';\nimport { LoadingPage } from '../../../../../framework/components/LoadingPage';\nimport { useAbortController } from '../../../../../framework/hooks/useAbortController';\nimport { PageRoutedTabs } from '../../../../common/PageRoutedTabs';\nimport { requestGet } from '../../../../common/crud/Data';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { useViewActivityStream } from '../../../access/common/useViewActivityStream';\nimport { AwxError } from '../../../common/AwxError';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { Inventory } from '../../../interfaces/Inventory';\nimport { Schedule } from '../../../interfaces/Schedule';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useGetScheduleUrl } from '../hooks/useGetScheduleUrl';\nimport { useSchedulesActions } from '../hooks/useSchedulesActions';\nimport { ScheduleResources, schedulePageUrl } from '../types';\nimport { INVENTORY_TYPE } from '../wizard/constants';\n/**\n *\n * @param {{label:string, page:string}[]} tab - The page property in the page id that comes from AwxRoute\n * @param {{label: string; page: string; persistentFilterKey: string }} backTab\n * @param {{ label?: string; id?: string; to: string }[]} initialBreadCrumbs- We use this prop to build our the urls and\n * labels we need for the breadcrumbs\n * @param {string} resourceEndPoint - This is a url that is used to fetch the resource to which the schedule belongs.\n */\nexport function SchedulePage(props: {\n  tabs: { label: string; page: string }[];\n  backTab: { label: string; page: string; persistentFilterKey: string };\n  initialBreadCrumbs: { label?: string; id?: string; to: string }[];\n  resourceEndPoint: string;\n}) {\n  const viewActivityStreamAction = useViewActivityStream('schedule');\n\n  const abortController = useAbortController();\n  const [inventory, setInventory] = useState<Inventory | null>(null);\n  const isInventorySource = props.initialBreadCrumbs.some(({ id }) => id === 'inventory_sources');\n\n  const getPageUrl = useGetPageUrl();\n  const params = useParams<{ id: string; source_id?: string; schedule_id: string }>();\n  const {\n    error,\n    data: schedule,\n    refresh,\n  } = useGetItem<Schedule>(awxAPI`/schedules`, params.schedule_id);\n  const navigate = useNavigate();\n  const {\n    error: resourceError,\n    data: resource,\n    refresh: resourceRefresh,\n  } = useGetItem<ScheduleResources>(\n    `${props.resourceEndPoint}`,\n    isInventorySource ? params.source_id : params.id\n  );\n  const getScheduleURL = useGetScheduleUrl();\n  let urlId: {\n    id: AwxRoute;\n    params?: { id: string; schedule_id: string; source_id?: string; inventory_type?: string };\n  } = { id: AwxRoute.Schedules };\n  if (schedule) {\n    const { pageId, params } = getScheduleURL('scheduleList', schedule) as schedulePageUrl;\n    urlId = { id: pageId, params };\n  }\n  const itemActions = useSchedulesActions({\n    onScheduleDeleteCompleted: () => navigate(getPageUrl(urlId.id, { params: urlId.params })),\n    onScheduleToggleCompleted: refresh,\n  });\n\n  useEffect(() => {\n    void fetchInventory();\n    async function fetchInventory() {\n      if (!isInventorySource || !params.id) return;\n      await requestGet<Inventory>(awxAPI`/inventories/${params.id}/`, abortController.signal).then(\n        (inv) => {\n          setInventory(inv);\n        }\n      );\n    }\n  }, [isInventorySource, params.id, abortController.signal]);\n  const breadCrumbs = useMemo(() => {\n    const completedBreadcrumbs = props.initialBreadCrumbs.map((route) => {\n      const allParams = {\n        id: isInventorySource ? inventory?.id : resource?.id,\n        inventory_type: isInventorySource ? INVENTORY_TYPE : undefined,\n        source_id: isInventorySource ? resource?.id : undefined,\n      };\n\n      if (route.id === 'data') {\n        return {\n          label: `${resource?.name}`,\n          to: getPageUrl(route.to, {\n            params: allParams,\n          }),\n        };\n      }\n      if (route.id === 'inventory' && isInventorySource) {\n        return {\n          label: `${inventory?.name}`,\n          to: getPageUrl(route.to, {\n            params: {\n              id: inventory?.id,\n              inventory_type: isInventorySource ? INVENTORY_TYPE : undefined,\n              source_id: isInventorySource ? resource?.id : undefined,\n            },\n          }),\n        };\n      }\n      if (route.id === 'schedules') {\n        return {\n          label: route.label,\n          to: getPageUrl(route.to, {\n            params: allParams,\n          }),\n        };\n      }\n\n      if (route.id === 'inventory_sources') {\n        return {\n          label: route.label,\n          to: getPageUrl(route.to, {\n            params: {\n              id: inventory?.id,\n              inventory_type: isInventorySource ? INVENTORY_TYPE : undefined,\n            },\n          }),\n        };\n      }\n      return { label: route.label, to: getPageUrl(route.to) };\n    });\n\n    return [...completedBreadcrumbs, { label: schedule?.name }];\n  }, [\n    getPageUrl,\n    resource?.id,\n    resource?.name,\n    inventory?.id,\n    inventory?.name,\n    isInventorySource,\n    props.initialBreadCrumbs,\n    schedule?.name,\n  ]);\n\n  const relevantError = resourceError || error;\n  const relevantRefresh = refresh ?? resourceRefresh;\n  if (relevantError) {\n    return <AwxError error={relevantError} handleRefresh={relevantRefresh} />;\n  }\n  if (!schedule || !resource) return <LoadingPage breadcrumbs tabs />;\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={schedule?.name}\n        breadcrumbs={breadCrumbs}\n        headerActions={\n          <PageActions<Schedule>\n            actions={[...viewActivityStreamAction, ...itemActions]}\n            position={DropdownPosition.right}\n            selectedItem={schedule}\n          />\n        }\n      />\n      <PageRoutedTabs backTab={props.backTab} tabs={props.tabs} params={params} />\n    </PageLayout>\n  );\n}\n","import { useParams } from 'react-router-dom';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { TemplatesList } from '../../templates/TemplatesList';\n\nexport function InventoryJobTemplates() {\n  const { id = '' } = useParams<{ id: string }>();\n  return <TemplatesList url={awxAPI`/job_templates/`} inventoryId={id} />;\n}\n","import { Chip, ChipGroup } from '@patternfly/react-core';\nimport { useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { usePageNavigate, ITableColumn } from '../../../../../framework';\nimport { useNameColumn, useCreatedColumn, useModifiedColumn } from '../../../../common/columns';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { AwxHost } from '../../../interfaces/AwxHost';\nimport { useParams } from 'react-router-dom';\nimport { Sparkline } from '../../templates/components/Sparkline';\nimport { useInventoryNameColumn } from '../../../../common/columns';\n\nfunction useActivityColumn(name: 'Activity' | 'Recent jobs') {\n  const { t } = useTranslation();\n  const column: ITableColumn<AwxHost> = useMemo(\n    () => ({\n      header: name === 'Activity' ? t('Activity') : name === 'Recent jobs' ? t('Recent jobs') : '',\n      cell: (item) => <Sparkline jobs={item.summary_fields?.recent_jobs} />,\n      value: (item) =>\n        item.summary_fields?.recent_jobs && item.summary_fields?.recent_jobs?.length > 0,\n      card: 'hidden',\n      list: 'hidden',\n    }),\n    [t, name]\n  );\n  return column;\n}\n\nfunction useDescriptionColumn() {\n  const { t } = useTranslation();\n  const column = useMemo<ITableColumn<AwxHost>>(\n    () => ({\n      header: t('Description'),\n      type: 'description',\n      value: (host: AwxHost) => host.description,\n      list: 'description',\n      card: 'description',\n    }),\n    [t]\n  );\n  return column;\n}\n\nexport function useInventoriesHostsColumns(options?: {\n  disableSort?: boolean;\n  disableLinks?: boolean;\n}) {\n  const pageNavigate = usePageNavigate();\n  const params = useParams<{ inventory_type: string; id: string }>();\n  const nameClick = useCallback(\n    (host: AwxHost) =>\n      pageNavigate(AwxRoute.InventoryHostDetails, {\n        params: {\n          inventory_type: params.inventory_type,\n          id: params.id,\n          host_id: host.id,\n        },\n      }),\n    [pageNavigate, params.id, params.inventory_type]\n  );\n  const nameColumn = useNameColumn({\n    ...options,\n    onClick: nameClick,\n  });\n  const descriptionColumn = useDescriptionColumn();\n  const createdColumn = useCreatedColumn(options);\n  const modifiedColumn = useModifiedColumn(options);\n  const relatedGroupColumn = useRelatedGroupsColumn();\n  const recentJobs = useActivityColumn('Recent jobs');\n  const inventoryColumn = useInventoryNameColumn(AwxRoute.InventoryDetails, {\n    tableViewOption: undefined,\n  });\n\n  const tableColumns = useMemo<ITableColumn<AwxHost>[]>(() => {\n    let columns: ITableColumn<AwxHost>[] = [];\n\n    if (params.inventory_type === 'inventory') {\n      columns = [nameColumn, descriptionColumn, relatedGroupColumn, createdColumn, modifiedColumn];\n    }\n\n    if (\n      params.inventory_type === 'smart_inventory' ||\n      params.inventory_type === 'constructed_inventory'\n    ) {\n      recentJobs.sort = '';\n      inventoryColumn.sort = '';\n      columns = [nameColumn, recentJobs, inventoryColumn];\n    }\n    return columns;\n  }, [\n    nameColumn,\n    descriptionColumn,\n    relatedGroupColumn,\n    createdColumn,\n    modifiedColumn,\n    recentJobs,\n    inventoryColumn,\n    params.inventory_type,\n  ]);\n  return tableColumns;\n}\n\nexport function useInventoriesGroupHostsColumns(options?: {\n  disableSort?: boolean;\n  disableLinks?: boolean;\n}) {\n  const pageNavigate = usePageNavigate();\n  const params = useParams<{ inventory_type: string; id: string }>();\n  const nameClick = useCallback(\n    (host: AwxHost) =>\n      pageNavigate(AwxRoute.InventoryHostDetails, {\n        params: {\n          inventory_type: params.inventory_type,\n          id: params.id,\n          host_id: host.id,\n        },\n      }),\n    [pageNavigate, params.id, params.inventory_type]\n  );\n  const nameColumn = useNameColumn({\n    ...options,\n    onClick: nameClick,\n  });\n  const activityColumn = useActivityColumn('Activity');\n  const descriptionColumn = useDescriptionColumn();\n  const createdColumn = useCreatedColumn(options);\n  const modifiedColumn = useModifiedColumn(options);\n  const tableColumns = useMemo<ITableColumn<AwxHost>[]>(\n    () => [nameColumn, descriptionColumn, activityColumn, createdColumn, modifiedColumn],\n    [nameColumn, descriptionColumn, activityColumn, createdColumn, modifiedColumn]\n  );\n  return tableColumns;\n}\n\nfunction useRelatedGroupsColumn() {\n  const { t } = useTranslation();\n\n  const column: ITableColumn<AwxHost> = useMemo(\n    () => ({\n      header: t('Related groups'),\n      cell: (host) => {\n        const groups: { results: Array<{ id: number; name: string }>; count: number } = host\n          ?.summary_fields?.groups ?? {\n          results: [],\n          count: 0,\n        };\n        return (\n          <ChipGroup aria-label={t`Related groups`}>\n            {groups.results.map((group) => (\n              <Chip key={group.name} isReadOnly>\n                {group.name}\n              </Chip>\n            ))}\n          </ChipGroup>\n        );\n      },\n      sort: undefined,\n      defaultSortDirection: 'desc',\n    }),\n    [t]\n  );\n  return column;\n}\n","import { CubesIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport { PageLayout, PageTable, usePageNavigate } from '../../../../../framework';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { usePersistentFilters } from '../../../../common/PersistentFilters';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { AwxHost } from '../../../interfaces/AwxHost';\nimport { OptionsResponse, ActionsResponse } from '../../../interfaces/OptionsResponse';\nimport { useAwxView } from '../../../common/useAwxView';\nimport { useHostsFilters } from '../../hosts/hooks/useHostsFilters';\nimport { useInventoriesHostsToolbarActions } from '../hooks/useInventoriesHostsToolbarActions';\nimport { useHostsActions } from '../../hosts/hooks/useHostsActions';\nimport { useInventoriesHostsColumns } from '../hooks/useInventoriesHostsColumns';\n\nexport function InventoryHosts() {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const toolbarFilters = useHostsFilters();\n  const tableColumns = useInventoriesHostsColumns();\n  const params = useParams<{ id: string; inventory_type: string }>();\n  const view = useAwxView<AwxHost>({\n    url: awxAPI`/inventories/${params.id ?? ''}/hosts/`,\n    toolbarFilters,\n    tableColumns,\n  });\n  const toolbarActions = useInventoriesHostsToolbarActions(view);\n  const rowActions = useHostsActions(view.unselectItemsAndRefresh, view.updateItem);\n\n  const hostOptions = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/hosts/`).data;\n  const canCreateHost = Boolean(\n    hostOptions &&\n      hostOptions.actions &&\n      hostOptions.actions['POST'] &&\n      params.inventory_type === 'inventory'\n  );\n\n  let emptyStateTitle = '';\n  let emptyStateDescription = '';\n\n  if (params.inventory_type === 'inventory') {\n    emptyStateTitle = canCreateHost\n      ? t('There are currently no hosts added to this inventory.')\n      : t('You do not have permission to create a host.');\n\n    emptyStateDescription = canCreateHost\n      ? t('Please create a host by using the button below.')\n      : t('Please contact your organization administrator if there is an issue with your access.');\n  } else {\n    emptyStateTitle = t('No hosts Found');\n    emptyStateDescription = t('Please add hosts to populate this list');\n  }\n\n  usePersistentFilters('inventories');\n  return (\n    <PageLayout>\n      <PageTable<AwxHost>\n        id=\"awx-inventory-hosts-table\"\n        toolbarFilters={toolbarFilters}\n        toolbarActions={toolbarActions}\n        tableColumns={tableColumns}\n        rowActions={rowActions}\n        errorStateTitle={t('Error loading inventory hosts')}\n        emptyStateTitle={emptyStateTitle}\n        emptyStateDescription={emptyStateDescription}\n        emptyStateIcon={canCreateHost ? undefined : CubesIcon}\n        emptyStateButtonIcon={<PlusCircleIcon />}\n        emptyStateButtonText={canCreateHost ? t('Create host') : undefined}\n        emptyStateButtonClick={\n          canCreateHost\n            ? () =>\n                pageNavigate(AwxRoute.InventoryHostAdd, {\n                  params: { id: params.id, inventory_type: params.inventory_type },\n                })\n            : undefined\n        }\n        {...view}\n      />\n    </PageLayout>\n  );\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport { PlusCircleIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  IPageAction,\n  PageActionType,\n  PageActionSelection,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { cannotDeleteResources } from '../../../../common/utils/RBAChelpers';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { AwxHost } from '../../../interfaces/AwxHost';\nimport { OptionsResponse, ActionsResponse } from '../../../interfaces/OptionsResponse';\nimport { IAwxView } from '../../../common/useAwxView';\nimport { useDeleteHosts } from '../../hosts/hooks/useDeleteHosts';\nimport { useRunCommandAction } from './useInventoriesGroupsToolbarActions';\n\nexport function useInventoriesHostsToolbarActions(view: IAwxView<AwxHost>) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const deleteHosts = useDeleteHosts(view.unselectItemsAndRefresh);\n  const params = useParams<{ id: string; inventory_type: string }>();\n  const inventory_type = params.inventory_type;\n\n  const selectedItems = view.selectedItems || [];\n  const runCommandAction = useRunCommandAction<AwxHost>({\n    ...params,\n    selectedItems,\n    actionType: 'toolbar',\n  });\n\n  const hostOptions = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/hosts/`).data;\n  const canCreateHost = Boolean(hostOptions && hostOptions.actions && hostOptions.actions['POST']);\n\n  return useMemo<IPageAction<AwxHost>[]>(() => {\n    const actions: IPageAction<AwxHost>[] = [];\n\n    if (inventory_type === 'inventory') {\n      actions.push({\n        type: PageActionType.Button,\n        selection: PageActionSelection.None,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        icon: PlusCircleIcon,\n        label: t('Create host'),\n        onClick: () =>\n          pageNavigate(String(AwxRoute.InventoryHostAdd), {\n            params: { inventory_type: params.inventory_type, id: params.id },\n          }),\n        isDisabled: () =>\n          canCreateHost\n            ? undefined\n            : t(\n                'You do not have permission to create a host. Please contact your organization administrator if there is an issue with your access.'\n              ),\n      });\n    }\n\n    actions.push(runCommandAction);\n\n    if (inventory_type === 'inventory') {\n      actions.push({ type: PageActionType.Seperator });\n      actions.push({\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: TrashIcon,\n        label: t('Delete hosts'),\n        onClick: deleteHosts,\n        isDanger: true,\n        isDisabled: (hosts: AwxHost[]) => cannotDeleteResources(hosts, t),\n      });\n    }\n    return actions;\n  }, [\n    t,\n    deleteHosts,\n    pageNavigate,\n    params.inventory_type,\n    params.id,\n    canCreateHost,\n    runCommandAction,\n    inventory_type,\n  ]);\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport { PlusCircleIcon, RocketIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  IPageAction,\n  PageActionType,\n  PageActionSelection,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { cannotDeleteResources } from '../../../../common/utils/RBAChelpers';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { InventorySource } from '../../../interfaces/InventorySource';\nimport { OptionsResponse, ActionsResponse } from '../../../interfaces/OptionsResponse';\nimport { IAwxView } from '../../../common/useAwxView';\nimport { useDeleteSources } from '../../sources/hooks/useDeleteSources';\nimport { useAwxActiveUser } from '../../../common/useAwxActiveUser';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { usePageAlertToaster } from '../../../../../framework';\n\nexport function useInventoriesSourcesToolbarActions(\n  view: IAwxView<InventorySource>,\n  inventory_id: string\n) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const deleteSources = useDeleteSources(view.unselectItemsAndRefresh);\n  const params = useParams<{ id: string; inventory_type: string }>();\n\n  const sourceOptions = useOptions<OptionsResponse<ActionsResponse>>(\n    awxAPI`/inventory_sources/`\n  ).data;\n\n  const canCreateSource = Boolean(\n    sourceOptions && sourceOptions.actions && sourceOptions.actions['POST']\n  );\n\n  const { activeAwxUser } = useAwxActiveUser();\n\n  let cannotLaunchInventorySourcesUpdate: string = '';\n\n  if (view.pageItems === undefined || view.pageItems.length === 0) {\n    cannotLaunchInventorySourcesUpdate = t('There are no inventory sources to update');\n  }\n\n  if (\n    (view.pageItems &&\n      !view.pageItems.every((item) => item.summary_fields.user_capabilities.start)) ||\n    activeAwxUser?.is_system_auditor\n  ) {\n    cannotLaunchInventorySourcesUpdate = t(\n      `The inventory source cannot be updated due to insufficient permission`\n    );\n  }\n\n  const syncAll = useSyncAll(inventory_id, view.refresh);\n\n  return useMemo<IPageAction<InventorySource>[]>(\n    () => [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.None,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        icon: PlusCircleIcon,\n        label: t('Create source'),\n        onClick: () =>\n          pageNavigate(String(AwxRoute.InventorySourcesAdd), {\n            params: { inventory_type: params.inventory_type, id: params.id },\n          }),\n        isDisabled: () =>\n          canCreateSource\n            ? undefined\n            : t(\n                'You do not have permission to create a source. Please contact your organization administrator if there is an issue with your access.'\n              ),\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: TrashIcon,\n        label: t('Delete sources'),\n        onClick: deleteSources,\n        isDanger: true,\n        isDisabled: (sources: InventorySource[]) => cannotDeleteResources(sources, t),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.None,\n        icon: RocketIcon,\n        label: t('Launch inventory updates'),\n        onClick: syncAll,\n        isDisabled: () => cannotLaunchInventorySourcesUpdate,\n      },\n    ],\n    [\n      t,\n      deleteSources,\n      pageNavigate,\n      params.inventory_type,\n      params.id,\n      canCreateSource,\n      cannotLaunchInventorySourcesUpdate,\n      syncAll,\n    ]\n  );\n}\n\nfunction useSyncAll(inventory_id: string, refresh: () => Promise<void>): () => void {\n  const url = awxAPI`/inventories/${inventory_id}/update_inventory_sources/`;\n  const postRequest = usePostRequest();\n  const alertToaster = usePageAlertToaster();\n  const { t } = useTranslation();\n\n  return () => {\n    void (async () => {\n      try {\n        await postRequest(url, {});\n        void refresh();\n      } catch (error) {\n        alertToaster.addAlert({\n          variant: 'danger',\n          title: t('Failed to sync all inventory sources'),\n          children: error instanceof Error ? error.message : String(error),\n          timeout: 5000,\n        });\n      }\n    })();\n  };\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { compareStrings } from '../../../../../framework';\nimport { useNameColumn } from '../../../../common/columns';\nimport { getItemKey, requestDelete } from '../../../../common/crud/Data';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { InventorySource } from '../../../interfaces/InventorySource';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { useSourcesColumns } from './useSourcesColumns';\n\nexport function useDeleteSources(onComplete: (sources: InventorySource[]) => void) {\n  const { t } = useTranslation();\n  const confirmationColumns = useSourcesColumns({ disableLinks: true, disableSort: true });\n  const deleteActionNameColumn = useNameColumn({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo(() => [deleteActionNameColumn], [deleteActionNameColumn]);\n  const bulkAction = useAwxBulkConfirmation<InventorySource>();\n  const deleteSources = (sources: InventorySource[]) => {\n    bulkAction({\n      title: t('Permanently delete sources', { count: sources.length }),\n      confirmText: t('Yes, I confirm that I want to delete these {{count}} sources.', {\n        count: sources.length,\n      }),\n      actionButtonText: t('Delete sources', { count: sources.length }),\n      items: sources.sort((l, r) => compareStrings(l.name, r.name)),\n      keyFn: getItemKey,\n      isDanger: true,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: (source: InventorySource, signal) =>\n        requestDelete(awxAPI`/inventory_sources/${source.id.toString()}/`, signal),\n    });\n  };\n  return deleteSources;\n}\n","import { useCallback, useMemo } from 'react';\nimport { usePageNavigate, ITableColumn } from '../../../../../framework';\nimport {\n  useNameColumn,\n  useDescriptionColumn,\n  useCreatedColumn,\n  useModifiedColumn,\n} from '../../../../common/columns';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { InventorySource } from '../../../interfaces/InventorySource';\n\nexport function useSourcesColumns(options?: { disableSort?: boolean; disableLinks?: boolean }) {\n  const pageNavigate = usePageNavigate();\n  const nameClick = useCallback(\n    (source: InventorySource) =>\n      pageNavigate(AwxRoute.InventorySourceDetail, { params: { id: source.id } }),\n    [pageNavigate]\n  );\n  const nameColumn = useNameColumn({\n    ...options,\n    onClick: nameClick,\n  });\n  const descriptionColumn = useDescriptionColumn();\n  const createdColumn = useCreatedColumn(options);\n  const modifiedColumn = useModifiedColumn(options);\n  const tableColumns = useMemo<ITableColumn<InventorySource>[]>(\n    () => [nameColumn, descriptionColumn, createdColumn, modifiedColumn],\n    [nameColumn, descriptionColumn, createdColumn, modifiedColumn]\n  );\n  return tableColumns;\n}\n","import { CubesIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport { PageLayout, PageTable, usePageNavigate } from '../../../../../framework';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { usePersistentFilters } from '../../../../common/PersistentFilters';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { InventorySource } from '../../../interfaces/InventorySource';\nimport { OptionsResponse, ActionsResponse } from '../../../interfaces/OptionsResponse';\nimport { useAwxView } from '../../../common/useAwxView';\nimport { useInventorySourceFilters } from '../hooks/useInventorySourceFilters';\nimport { useInventoriesSourcesToolbarActions } from '../hooks/useInventoriesSourcesToolbarActions';\nimport { useInventorySourceActions } from '../hooks/useInventorySourceActions';\nimport { useInventorySourceColumns } from '../hooks/useInventorySourceColumns';\nimport { useCallback } from 'react';\nimport { useAwxWebSocketSubscription } from '../../../common/useAwxWebSocket';\n\ntype WebSocketMessage = {\n  group_name?: string;\n  type?: string;\n  status?: string;\n  inventory_id?: number;\n};\n\nexport function InventorySources() {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const tableColumns = useInventorySourceColumns();\n  const params = useParams<{ id: string; inventory_type: string }>();\n  const toolbarFilters = useInventorySourceFilters(\n    `inventories/${params.id ?? ''}/inventory_sources/`\n  );\n  const view = useAwxView<InventorySource>({\n    url: awxAPI`/inventories/${params.id ?? ''}/inventory_sources/`,\n    toolbarFilters,\n    tableColumns,\n  });\n\n  const toolbarActions = useInventoriesSourcesToolbarActions(view, params.id || '');\n  const rowActions = useInventorySourceActions({\n    onInventorySourcesDeleted: view.unselectItemsAndRefresh,\n    onInvUpdateCanceled: view.unselectItemsAndRefresh,\n  });\n\n  const sourceOptions = useOptions<OptionsResponse<ActionsResponse>>(\n    awxAPI`/inventory_sources/`\n  ).data;\n  const canCreateSource = Boolean(\n    sourceOptions && sourceOptions.actions && sourceOptions.actions['POST']\n  );\n\n  usePersistentFilters('inventories');\n\n  const handleWebSocketMessage = useCallback(\n    (message?: WebSocketMessage) => {\n      if (!message?.inventory_id) return;\n      switch (message?.group_name) {\n        case 'inventories':\n          switch (message?.status) {\n            case 'deleted':\n              void view.refresh();\n              break;\n          }\n          break;\n        case 'jobs':\n          switch (message?.type) {\n            case 'inventory_update':\n              void view.refresh();\n              break;\n          }\n          break;\n      }\n    },\n    [view]\n  );\n\n  useAwxWebSocketSubscription(\n    { control: ['limit_reached_1'], jobs: ['status_changed'], inventories: ['status_changed'] },\n    handleWebSocketMessage as (data: unknown) => void\n  );\n\n  return (\n    <PageLayout>\n      <PageTable<InventorySource>\n        id=\"awx-inventory-sources-table\"\n        toolbarFilters={toolbarFilters}\n        toolbarActions={toolbarActions}\n        tableColumns={tableColumns}\n        rowActions={rowActions}\n        errorStateTitle={t('Error loading inventory sources')}\n        emptyStateTitle={\n          canCreateSource\n            ? t('There are currently no sources added to this inventory.')\n            : t('You do not have permission to create a host')\n        }\n        emptyStateDescription={\n          canCreateSource\n            ? t('Please create a source by using the button below.')\n            : t(\n                'Please contact your organization administrator if there is an issue with your access.'\n              )\n        }\n        emptyStateIcon={canCreateSource ? undefined : CubesIcon}\n        emptyStateButtonIcon={<PlusCircleIcon />}\n        emptyStateButtonText={canCreateSource ? t('Create source') : undefined}\n        emptyStateButtonClick={\n          canCreateSource\n            ? () =>\n                pageNavigate(AwxRoute.InventorySourcesAdd, {\n                  params: { id: params.id, inventory_type: params.inventory_type },\n                })\n            : undefined\n        }\n        {...view}\n      />\n    </PageLayout>\n  );\n}\n","import {\n  useCreatedByToolbarFilter,\n  useModifiedByToolbarFilter,\n  useGroupTypeToolbarFilter,\n} from '../../../common/awx-toolbar-filters';\nimport { useDynamicToolbarFilters } from '../../../common/useDynamicFilters';\n\nexport function useGroupsFilters({\n  url,\n  queryParams,\n}: {\n  url?: string;\n  queryParams?: Record<string, string>;\n}) {\n  const createdByToolbarFilter = useCreatedByToolbarFilter();\n  const modifiedByToolbarFilter = useModifiedByToolbarFilter();\n  const groupTypeToolbarFilter = useGroupTypeToolbarFilter();\n  const toolbarFilters = useDynamicToolbarFilters({\n    optionsPath: url ? url : 'groups',\n    preFilledValueKeys: {\n      name: {\n        apiPath: url ? url : 'groups',\n        queryParams: queryParams ? queryParams : {},\n      },\n      id: {\n        apiPath: url ? url : 'groups',\n        queryParams: queryParams ? queryParams : {},\n      },\n    },\n    preSortedKeys: ['name', 'id', 'description', 'created-by', 'modified-by', 'group'],\n    additionalFilters: [modifiedByToolbarFilter, createdByToolbarFilter, groupTypeToolbarFilter],\n    removeFilters: ['inventory'],\n  });\n  return toolbarFilters;\n}\n","import { useTranslation } from 'react-i18next';\nimport { InventoryGroup } from '../../../interfaces/InventoryGroup';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { useMemo } from 'react';\nimport { PencilAltIcon } from '@patternfly/react-icons';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { cannotEditResource } from '../../../../common/utils/RBAChelpers';\nimport { useParams } from 'react-router-dom';\nimport { useRunCommandAction } from './useInventoriesGroupsToolbarActions';\n\nexport function useInventoriesGroupsActions() {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const params = useParams<{ id: string; inventory_type: string }>();\n\n  const runCommandAction = useRunCommandAction<InventoryGroup>(\n    { ...params, actionType: 'row' },\n    { isPinned: false }\n  );\n\n  return useMemo<IPageAction<InventoryGroup>[]>(() => {\n    if (params.inventory_type === 'constructed_inventory') {\n      return [];\n    }\n\n    return [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        isPinned: true,\n        icon: PencilAltIcon,\n        label: t('Edit group'),\n        onClick: (group) =>\n          pageNavigate(AwxRoute.InventoryGroupEdit, {\n            params: {\n              inventory_type: params.inventory_type,\n              id: group.inventory,\n              group_id: group.id,\n            },\n          }),\n        isDisabled: (group) => cannotEditResource(group, t),\n      },\n      runCommandAction,\n    ];\n  }, [t, pageNavigate, runCommandAction, params.inventory_type]);\n}\n","import { useTranslation } from 'react-i18next';\nimport { PageTable, usePageNavigate } from '../../../../../framework';\nimport { useGroupsFilters } from '../../groups/hooks/useGroupsFilters';\nimport { useParams } from 'react-router-dom';\nimport { useAwxView } from '../../../common/useAwxView';\nimport { InventoryGroup } from '../../../interfaces/InventoryGroup';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useInventoriesGroupsColumns } from '../hooks/useInventoriesGroupsColumns';\nimport { useInventoriesGroupsToolbarActions } from '../hooks/useInventoriesGroupsToolbarActions';\nimport { useInventoriesGroupsActions } from '../hooks/useInventoriesGroupsActions';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { ActionsResponse, OptionsResponse } from '../../../interfaces/OptionsResponse';\nimport { CubeIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\nexport function InventoryGroups() {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const tableColumns = useInventoriesGroupsColumns();\n  const params = useParams<{ id: string; inventory_type: string }>();\n  const toolbarFilters = useGroupsFilters({ url: `inventories/${params.id ?? ''}/groups` });\n  const view = useAwxView<InventoryGroup>({\n    url: awxAPI`/inventories/${params.id ?? ''}/groups/`,\n    toolbarFilters,\n    tableColumns,\n  });\n  const toolbarActions = useInventoriesGroupsToolbarActions(view);\n  const rowActions = useInventoriesGroupsActions();\n\n  const constructed_inventory = params.inventory_type === 'constructed_inventory' ? true : false;\n  const groupOptions = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/groups/`).data;\n  const canCreateGroup = Boolean(\n    groupOptions && groupOptions.actions && groupOptions.actions['POST'] && !constructed_inventory\n  );\n\n  return (\n    <PageTable<InventoryGroup>\n      id=\"awx-inventory-group-table\"\n      toolbarFilters={toolbarFilters}\n      toolbarActions={toolbarActions}\n      tableColumns={tableColumns}\n      rowActions={rowActions}\n      errorStateTitle={t('Error loading inventory groups')}\n      emptyStateTitle={\n        canCreateGroup\n          ? t('There are currently no groups added to this inventory.')\n          : constructed_inventory\n            ? t('No Items Found')\n            : t('You do not have permission to create a group')\n      }\n      emptyStateDescription={\n        canCreateGroup\n          ? t('Please create a group by using the button below.')\n          : constructed_inventory\n            ? t('Please add Items to populate this list')\n            : t(\n                'Please contact your organization administrator if there is an issue with your access.'\n              )\n      }\n      emptyStateIcon={canCreateGroup ? undefined : CubeIcon}\n      emptyStateButtonIcon={<PlusCircleIcon />}\n      emptyStateButtonText={canCreateGroup ? t('Create group') : undefined}\n      emptyStateButtonClick={\n        canCreateGroup\n          ? () =>\n              pageNavigate(AwxRoute.InventoryGroupCreate, {\n                params: { id: params.id, inventory_type: params.inventory_type },\n              })\n          : undefined\n      }\n      {...view}\n    />\n  );\n}\n","import { useCallback, useMemo } from 'react';\nimport { ITableColumn, usePageNavigate } from '../../../../../framework';\nimport { InventoryGroup } from '../../../interfaces/InventoryGroup';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useCreatedColumn, useModifiedColumn, useNameColumn } from '../../../../common/columns';\nimport { useTranslation } from 'react-i18next';\nimport { Chip, ChipGroup } from '@patternfly/react-core';\nimport { useParams } from 'react-router-dom';\n\nexport function useInventoriesGroupsColumns(options?: {\n  disableSort?: boolean;\n  disableLinks?: boolean;\n}) {\n  const pageNavigate = usePageNavigate();\n  const params = useParams();\n  const nameClick = useCallback(\n    (group: InventoryGroup) =>\n      pageNavigate(AwxRoute.InventoryGroupDetails, {\n        params: { inventory_type: params.inventory_type, id: group.inventory, group_id: group.id },\n      }),\n    [pageNavigate, params.inventory_type]\n  );\n  const nameColumn = useNameColumn({\n    ...options,\n    onClick: nameClick,\n  });\n  const createdColumn = useCreatedColumn(options);\n  const modifiedColumn = useModifiedColumn(options);\n  const relatedGroupColumn = useRelatedGroupsColumn();\n\n  const tableColumns = useMemo<ITableColumn<InventoryGroup>[]>(() => {\n    let columns: ITableColumn<InventoryGroup>[] = [];\n\n    if (params.inventory_type === 'inventory') {\n      columns = [nameColumn, relatedGroupColumn, createdColumn, modifiedColumn];\n    }\n\n    if (params.inventory_type === 'constructed_inventory') {\n      columns = [nameColumn];\n    }\n\n    return columns;\n  }, [nameColumn, relatedGroupColumn, createdColumn, modifiedColumn, params.inventory_type]);\n  return tableColumns;\n}\n\nfunction useRelatedGroupsColumn() {\n  const { t } = useTranslation();\n\n  const column: ITableColumn<InventoryGroup> = useMemo(\n    () => ({\n      header: t('Related groups'),\n      cell: (group) => {\n        const groups: { results: Array<{ id: number; name: string }>; count: number } = group\n          ?.summary_fields?.groups ?? {\n          results: [],\n          count: 0,\n        };\n        return (\n          <ChipGroup aria-label={t`Related groups`}>\n            {groups.results.map((group) => (\n              <Chip key={group.name} isReadOnly>\n                {group.name}\n              </Chip>\n            ))}\n          </ChipGroup>\n        );\n      },\n      sort: undefined,\n      defaultSortDirection: 'desc',\n    }),\n    [t]\n  );\n  return column;\n}\n","import { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageActions,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n} from '../../../../framework';\nimport { PageRoutedTabs } from '../../../common/PageRoutedTabs';\nimport { useGetItem } from '../../../common/crud/useGet';\nimport { AwxError } from '../../common/AwxError';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { InventoryGroup } from '../../interfaces/InventoryGroup';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { useInventoriesGroupActions } from '../inventories/hooks/useInventoriesGroupActions';\n\nexport function GroupPage() {\n  const { t } = useTranslation();\n  const params = useParams<{ id: string; inventory_type: string; group_id: string }>();\n  const {\n    error,\n    data: inventoryGroup,\n    refresh,\n  } = useGetItem<InventoryGroup>(awxAPI`/groups/`, params.group_id);\n\n  const getPageUrl = useGetPageUrl();\n\n  const actions = useInventoriesGroupActions();\n\n  if (error) return <AwxError error={error} handleRefresh={refresh} />;\n  if (!inventoryGroup) return <LoadingPage breadcrumbs tabs />;\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={inventoryGroup?.name}\n        breadcrumbs={[\n          { label: t('Inventories'), to: getPageUrl(AwxRoute.Inventories) },\n          {\n            label: `${inventoryGroup?.summary_fields.inventory.name}`,\n            to: getPageUrl(AwxRoute.InventoryDetails, {\n              params: {\n                id: inventoryGroup?.inventory,\n                inventory_type: params.inventory_type,\n              },\n            }),\n          },\n          {\n            label: t('Groups'),\n            to: getPageUrl(AwxRoute.InventoryGroups, {\n              params: {\n                id: inventoryGroup?.inventory,\n                inventory_type: params.inventory_type,\n              },\n            }),\n          },\n          { label: inventoryGroup?.name },\n        ]}\n        headerActions={\n          <PageActions<InventoryGroup>\n            actions={actions}\n            position={DropdownPosition.right}\n            selectedItem={inventoryGroup}\n          />\n        }\n      />\n      <PageRoutedTabs\n        backTab={{\n          label: t('Back to Groups'),\n          page: AwxRoute.InventoryGroups,\n          persistentFilterKey: 'groups',\n        }}\n        tabs={[\n          { label: t('Details'), page: AwxRoute.InventoryGroupDetails },\n          { label: t('Related Groups'), page: AwxRoute.InventoryGroupRelatedGroups },\n          { label: t('Hosts'), page: AwxRoute.InventoryGroupHost },\n        ]}\n        params={{\n          id: inventoryGroup.inventory,\n          inventory_type: params.inventory_type,\n          group_id: inventoryGroup.id,\n        }}\n      />\n    </PageLayout>\n  );\n}\n","import { useMemo } from 'react';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { InventoryGroup } from '../../../interfaces/InventoryGroup';\nimport { PencilAltIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { cannotDeleteResource, cannotEditResource } from '../../../../common/utils/RBAChelpers';\nimport { useParams } from 'react-router-dom';\nimport { useDeleteGroups } from '../../groups/hooks/useDeleteGroups';\nimport { ButtonVariant } from '@patternfly/react-core';\n\nexport function useInventoriesGroupActions() {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const params = useParams<{ id: string; inventory_type: string }>();\n\n  const onDelete = () => {\n    pageNavigate(AwxRoute.InventoryGroups, {\n      params: { inventory_type: params.inventory_type, id: params.id },\n    });\n  };\n\n  const deleteGroups = useDeleteGroups(onDelete);\n\n  return useMemo<IPageAction<InventoryGroup>[]>(\n    () => [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        isPinned: true,\n        icon: PencilAltIcon,\n        variant: ButtonVariant.primary,\n        label: t('Edit group'),\n        isHidden: () => params.inventory_type === 'constructed_inventory',\n        onClick: (group) =>\n          pageNavigate(AwxRoute.InventoryGroupEdit, {\n            params: {\n              inventory_type: params.inventory_type,\n              id: group.inventory,\n              group_id: group.id,\n            },\n          }),\n        isDisabled: (group) => cannotEditResource(group, t),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: TrashIcon,\n        label: t('Delete group'),\n        isHidden: () => params.inventory_type === 'constructed_inventory',\n        onClick: (group) => deleteGroups([group]),\n        isDisabled: (group) => cannotDeleteResource(group, t),\n        isDanger: true,\n      },\n    ],\n    [t, pageNavigate, params.inventory_type, deleteGroups]\n  );\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  PageActions,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { PageRoutedTabs } from '../../../../common/PageRoutedTabs';\nimport { AwxHost } from '../../../interfaces/AwxHost';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useGetHost } from '../../hosts/hooks/useGetHost';\nimport { useHostsActions } from '../../hosts/hooks/useHostsActions';\nimport { useGetInventory } from '../InventoryPage/InventoryPage';\n\nexport function InventoryHostPage() {\n  const { t } = useTranslation();\n  const params = useParams<{\n    id: string;\n    inventory_type: string;\n    host_id: string;\n  }>();\n\n  const inventory = useGetInventory(params.id, params.inventory_type);\n  const { host, refresh } = useGetHost(params.host_id as string);\n  const pageNavigate = usePageNavigate();\n\n  const itemActions = useHostsActions((_host) => {\n    pageNavigate(AwxRoute.InventoryHosts, {\n      params: { inventory_type: params.inventory_type, id: params.id },\n    });\n  }, refresh);\n\n  const getPageUrl = useGetPageUrl();\n\n  let tabs: Array<{ label: string; page: string }> = [];\n\n  if (params.inventory_type === 'inventory') {\n    tabs = [\n      { label: t('Details'), page: AwxRoute.InventoryHostDetails },\n      { label: t('Facts'), page: AwxRoute.InventoryHostFacts },\n      { label: t('Groups'), page: AwxRoute.InventoryHostGroups },\n      { label: t('Jobs'), page: AwxRoute.InventoryHostJobs },\n    ];\n  } else {\n    tabs = [{ label: t('Details'), page: AwxRoute.InventoryHostDetails }];\n  }\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={host?.name}\n        breadcrumbs={[\n          {\n            label: t('Inventories'),\n            to: getPageUrl(AwxRoute.Inventories),\n          },\n          {\n            label: t(`${inventory?.name}`),\n            to: getPageUrl(AwxRoute.InventoryDetails, {\n              params: { id: params.id, inventory_type: params.inventory_type },\n            }),\n          },\n          {\n            label: t('Hosts'),\n            to: getPageUrl(AwxRoute.InventoryHosts, {\n              params: { id: params.id, inventory_type: params.inventory_type },\n            }),\n          },\n          {\n            label: t(`${host?.name}`),\n          },\n        ]}\n        headerActions={\n          <PageActions<AwxHost>\n            actions={itemActions}\n            position={DropdownPosition.right}\n            selectedItem={host as AwxHost}\n          />\n        }\n      />\n      <PageRoutedTabs\n        backTab={{\n          label: t('Back to Hosts'),\n          page: AwxRoute.InventoryHosts,\n          persistentFilterKey: 'inventories',\n        }}\n        tabs={tabs}\n        params={params}\n      />\n    </PageLayout>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport {\n  PageFormDataEditor,\n  PageFormSubmitHandler,\n  PageFormTextInput,\n  usePageNavigate,\n} from '../../../../framework';\nimport { PageFormSection } from '../../../../framework/PageForm/Utils/PageFormSection';\nimport { usePostRequest } from '../../../common/crud/usePostRequest';\nimport { AwxPageForm } from '../../common/AwxPageForm';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport {\n  InventoryGroup,\n  InventoryGroupCreate,\n  InventoryGroupRelatedGroup,\n} from '../../interfaces/InventoryGroup';\nimport { AwxRoute } from '../../main/AwxRoutes';\n\nexport function GroupCreate() {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const pageNavigate = usePageNavigate();\n  const postRequest = usePostRequest<InventoryGroupCreate, InventoryGroup>();\n  const postParentGroup = usePostRequest<InventoryGroupRelatedGroup>();\n  const params = useParams<{ inventory_type: string; id: string; group_id: string }>();\n\n  const onSubmit: PageFormSubmitHandler<InventoryGroupCreate> = async (groupInput) => {\n    const { name, description, variables } = groupInput;\n    const createGroup: InventoryGroupCreate = {\n      name,\n      description: description ?? '',\n      inventory: parseInt(params.id as string),\n      variables: variables ?? '',\n    };\n    const newGroup = await postRequest(awxAPI`/groups/`, createGroup);\n\n    if (params.group_id) {\n      const parentGroup: InventoryGroupRelatedGroup = {\n        id: newGroup.id,\n      };\n      await postParentGroup(awxAPI`/groups/${params.group_id}/children/`, parentGroup);\n      pageNavigate(AwxRoute.InventoryGroupRelatedGroups, {\n        params: {\n          inventory_type: params.inventory_type,\n          id: newGroup.inventory,\n          group_id: params.group_id,\n        },\n      });\n    } else {\n      pageNavigate(AwxRoute.InventoryGroupDetails, {\n        params: {\n          inventory_type: params.inventory_type,\n          id: newGroup.inventory,\n          group_id: newGroup.id,\n        },\n      });\n    }\n  };\n\n  const onCancel = () => navigate(-1);\n  return (\n    <AwxPageForm<InventoryGroupCreate>\n      submitText={t('Create group')}\n      onSubmit={onSubmit}\n      cancelText={t('Cancel')}\n      onCancel={onCancel}\n      defaultValue={{\n        name: '',\n        description: '',\n        variables: '---\\n',\n      }}\n    >\n      <PageFormTextInput name=\"name\" label={t('Name')} placeholder={t('Enter name')} isRequired />\n      <PageFormTextInput\n        name=\"description\"\n        label={t('Description')}\n        placeholder={t('Enter description')}\n      />\n      <PageFormSection singleColumn>\n        <PageFormDataEditor name=\"variables\" label={t('Variables')} format=\"yaml\" />\n      </PageFormSection>\n    </AwxPageForm>\n  );\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport {\n  PageFormDataEditor,\n  PageFormSubmitHandler,\n  PageFormTextInput,\n  usePageNavigate,\n} from '../../../../framework';\nimport { PageFormSection } from '../../../../framework/PageForm/Utils/PageFormSection';\nimport { useGetItem } from '../../../common/crud/useGet';\nimport { usePatchRequest } from '../../../common/crud/usePatchRequest';\nimport { AwxPageForm } from '../../common/AwxPageForm';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { InventoryGroup, InventoryGroupCreate } from '../../interfaces/InventoryGroup';\nimport { AwxRoute } from '../../main/AwxRoutes';\n\nexport function GroupEdit() {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const patchRequest = usePatchRequest<InventoryGroupCreate, InventoryGroup>();\n  const pageNavigate = usePageNavigate();\n  const params = useParams<{ group_id: string }>();\n  const { data: group } = useGetItem<InventoryGroup>(awxAPI`/groups/`, params.group_id);\n\n  const defaultValue = useMemo(\n    () => ({\n      name: group?.name,\n      description: group?.description ?? '',\n      variables: group?.variables ?? '---\\n',\n    }),\n    [group]\n  );\n\n  const onSubmit: PageFormSubmitHandler<InventoryGroupCreate> = async (groupInput) => {\n    const { name, description, variables } = groupInput;\n    const editGroup: InventoryGroupCreate = {\n      name,\n      description,\n      variables,\n      inventory: group?.inventory ?? 0,\n    };\n    const editedGroup = await patchRequest(\n      awxAPI`/groups/${group?.id.toString() ?? ''}/`,\n      editGroup\n    );\n    pageNavigate(AwxRoute.InventoryGroupDetails, {\n      params: { inventory_type: 'inventory', id: editedGroup.inventory, group_id: editedGroup.id },\n    });\n  };\n\n  const onCancel = () => navigate(-1);\n  if (!group) {\n    return null;\n  }\n\n  return (\n    <AwxPageForm<InventoryGroupCreate>\n      submitText={t('Save group')}\n      onSubmit={onSubmit}\n      cancelText={t('Cancel')}\n      onCancel={onCancel}\n      defaultValue={defaultValue}\n    >\n      <PageFormTextInput name=\"name\" label={t('Name')} isRequired />\n      <PageFormTextInput name=\"description\" label={t('Description')} />\n      <PageFormSection singleColumn>\n        <PageFormDataEditor name=\"variables\" label={t('Variables')} format=\"yaml\" />\n      </PageFormSection>\n    </AwxPageForm>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { LoadingPage, PageHeader, PageLayout, useGetPageUrl } from '../../../../../framework';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useParams } from 'react-router-dom';\nimport { useGet, useGetItem } from '../../../../common/crud/useGet';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { AwxError } from '../../../common/AwxError';\nimport { Inventory } from '../../../interfaces/Inventory';\nimport { GroupCreate } from '../../groups/GroupCreate';\nimport { InventoryGroup } from '../../../interfaces/InventoryGroup';\nimport { GroupEdit } from '../../groups/GroupEdit';\n\ninterface GroupFormPageHeaderProps {\n  title: string;\n  breadcrumbs: Array<keyof BreadCrumbs>;\n  inventoryName?: string;\n  groupName?: string;\n  urlParams: Readonly<\n    Partial<{\n      inventory_type: string;\n      group_id: string;\n      id: string;\n    }>\n  >;\n}\n\ninterface BreadCrumbLink {\n  label: string;\n  to?: string;\n}\n\ntype BreadCrumbs = Record<string, BreadCrumbLink>;\n\nfunction GroupFormPageHeader(props: GroupFormPageHeaderProps) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n\n  const breadcrumbsParams = {\n    id: { id: props.urlParams.id },\n    inventory_type: { inventory_type: props.urlParams.inventory_type },\n    group_id: { group_id: props.urlParams.group_id },\n  };\n\n  const breadcrumbsObj: BreadCrumbs = {\n    inventories: { label: t('Inventories'), to: getPageUrl(AwxRoute.Inventories) },\n    inventory: {\n      label: `${props.inventoryName}`,\n      to: getPageUrl(AwxRoute.InventoryDetails, {\n        params: { ...breadcrumbsParams.id, ...breadcrumbsParams.inventory_type },\n      }),\n    },\n    groups: {\n      label: t('Groups'),\n      to: getPageUrl(AwxRoute.InventoryGroups, {\n        params: { ...breadcrumbsParams.id, ...breadcrumbsParams.inventory_type },\n      }),\n    },\n    group: {\n      label: `${props.groupName}`,\n      to: getPageUrl(AwxRoute.InventoryGroupDetails, {\n        params: {\n          ...breadcrumbsParams.id,\n          ...breadcrumbsParams.inventory_type,\n          ...breadcrumbsParams.group_id,\n        },\n      }),\n    },\n    relatedGroups: {\n      label: t('Related Groups'),\n      to: getPageUrl(AwxRoute.InventoryGroupRelatedGroups, {\n        params: {\n          ...breadcrumbsParams.id,\n          ...breadcrumbsParams.inventory_type,\n          ...breadcrumbsParams.group_id,\n        },\n      }),\n    },\n    createGroup: { label: t('Create group') },\n    editGroup: { label: t('Edit {{groupName}}', { groupName: props.groupName }) },\n  };\n\n  return (\n    <PageHeader\n      title={props.title}\n      breadcrumbs={props.breadcrumbs.map((breadcrumb) => breadcrumbsObj[breadcrumb])}\n    />\n  );\n}\n\nexport function CreateGroup() {\n  const { t } = useTranslation();\n  const params = useParams<{ inventory_type: string; id: string }>();\n  const {\n    error,\n    data: inventory,\n    refresh,\n  } = useGet<Inventory>(awxAPI`/inventories/${params.id?.toString() ?? ''}/`);\n\n  if (error) return <AwxError error={error} handleRefresh={refresh} />;\n  if (!inventory) return <LoadingPage breadcrumbs tabs />;\n\n  const breadcrumbs: Array<keyof BreadCrumbs> = [\n    'inventories',\n    'inventory',\n    'groups',\n    'createGroup',\n  ];\n\n  return (\n    <PageLayout>\n      <GroupFormPageHeader\n        title={t('Create group')}\n        breadcrumbs={breadcrumbs}\n        urlParams={params}\n        inventoryName={inventory?.name}\n      />\n      <GroupCreate />\n    </PageLayout>\n  );\n}\n\nexport function EditGroup() {\n  const { t } = useTranslation();\n  const params = useParams<{ inventory_type: string; group_id: string }>();\n  const {\n    error,\n    data: group,\n    refresh,\n  } = useGet<InventoryGroup>(awxAPI`/groups/${params.group_id?.toString() ?? ''}/`);\n\n  if (error) return <AwxError error={error} handleRefresh={refresh} />;\n  if (!group) return <LoadingPage breadcrumbs tabs />;\n\n  const breadcrumbs: Array<keyof BreadCrumbs> = ['inventories', 'inventory', 'groups', 'editGroup'];\n\n  return (\n    <PageLayout>\n      <GroupFormPageHeader\n        title={t('Edit {{groupName}}', { groupName: group?.name })}\n        breadcrumbs={breadcrumbs}\n        urlParams={params}\n        inventoryName={group?.summary_fields.inventory.name}\n        groupName={group?.name}\n      />\n      <GroupEdit />\n    </PageLayout>\n  );\n}\n\nexport function CreateRelatedGroup() {\n  const { t } = useTranslation();\n  const params = useParams<{ inventory_type: string; group_id: string; id: string }>();\n  const {\n    error,\n    data: inventoryGroup,\n    refresh,\n  } = useGetItem<InventoryGroup>(awxAPI`/groups/`, params.group_id);\n\n  if (error) return <AwxError error={error} handleRefresh={refresh} />;\n  if (!inventoryGroup) return <LoadingPage breadcrumbs tabs />;\n\n  const breadcrumbs: Array<keyof BreadCrumbs> = [\n    'inventories',\n    'inventory',\n    'groups',\n    'group',\n    'relatedGroups',\n    'createGroup',\n  ];\n\n  return (\n    <PageLayout>\n      <GroupFormPageHeader\n        title={t('Create group')}\n        breadcrumbs={breadcrumbs}\n        urlParams={params}\n        inventoryName={inventoryGroup?.summary_fields.inventory.name}\n        groupName={inventoryGroup?.name}\n      />\n      <GroupCreate />\n    </PageLayout>\n  );\n}\n","import { ReactElement, ReactNode, useCallback } from 'react';\nimport { FieldPath, FieldValues, useWatch } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { PageFormAsyncSelect } from '../../../../../framework/PageForm/Inputs/PageFormAsyncSelect';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { Inventory } from '../../../interfaces/Inventory';\nimport { Project } from '../../../interfaces/Project';\nimport { requestGet } from '../../../../common/crud/Data';\n\nexport function PageFormInventoryFileSelect<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  watch: string;\n  name: TFieldName;\n  isRequired?: boolean;\n  additionalControls?: ReactElement;\n  labelHelp?: string | string[] | ReactNode;\n}) {\n  const { t } = useTranslation();\n  const value = useWatch({ name: props.watch }) as Project;\n  const projectId = value?.id?.toString() ?? '';\n  const query = useCallback(async () => {\n    const response = projectId\n      ? await requestGet<Array<string>>(awxAPI`/projects/${projectId}/inventories/`)\n      : [];\n    const newResponse = response.map((str) => ({\n      name: str,\n    }));\n    return Promise.resolve({\n      total: newResponse.length,\n      values: [{ name: '/ (project root)' }, ...newResponse],\n    });\n  }, [projectId]);\n\n  return (\n    <PageFormAsyncSelect<TFieldValues>\n      name={props.name}\n      id=\"inventory\"\n      variant=\"typeahead\"\n      additionalControls={props.additionalControls}\n      label={t('Inventory file')}\n      query={query}\n      valueToString={(value) => (value as Inventory)?.name ?? ''}\n      placeholder={t('Select inventory file')}\n      labelHelpTitle={t('Inventory')}\n      labelHelp={\n        props.labelHelp ??\n        t('Select the inventory containing the playbook you want this job to execute.')\n      }\n      loadingPlaceholder={t('Loading inventories...')}\n      loadingErrorText={t('Error loading inventories')}\n      isRequired={props.isRequired}\n      limit={200}\n    />\n  );\n}\n","import { useWatch } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { PageFormDataEditor } from '../../../../framework';\nimport { PageFormCheckbox } from '../../../../framework/PageForm/Inputs/PageFormCheckbox';\nimport { PageFormSingleSelect } from '../../../../framework/PageForm/Inputs/PageFormSingleSelect';\nimport { PageFormTextInput } from '../../../../framework/PageForm/Inputs/PageFormTextInput';\nimport { PageFormHidden } from '../../../../framework/PageForm/Utils/PageFormHidden';\nimport { PageFormSection } from '../../../../framework/PageForm/Utils/PageFormSection';\nimport { PageFormCredentialSelect } from '../../access/credentials/components/PageFormCredentialSelect';\nimport { QueryParams } from '../../common/useAwxView';\nimport { InventorySourceForm } from '../../interfaces/InventorySource';\nimport { PageFormProjectSelect } from '../projects/components/PageFormProjectSelect';\nimport { PageFormInventoryFileSelect } from './component/PageFormInventoryFileSelect';\n\nexport function InventorySourceSubForm() {\n  const { t } = useTranslation();\n  const isUpdateOnLaunchEnabled = useWatch<InventorySourceForm>({\n    name: 'update_on_launch',\n  });\n  const source = useWatch<InventorySourceForm>({\n    name: 'source',\n  }) as string;\n  const sourceTypes = [\n    'ec2',\n    'gce',\n    'azure_rm',\n    'vmware',\n    'satellite6',\n    'openstack',\n    'rhv',\n    'controller',\n    'insights',\n    'terraform',\n    'openshift_virtualization',\n  ];\n\n  const handleQueryParams = (source: string): QueryParams => {\n    switch (source) {\n      case 'scm':\n        return {\n          credential_type__kind__in: 'cloud,kubernetes',\n        };\n      case 'ec2':\n        return {\n          credential_type__namespace: 'aws',\n        };\n      case 'openshift_virtualization':\n        return {\n          credential_type__namespace: 'kubernetes_bearer_token',\n        };\n      default:\n        return {\n          credential_type__namespace: source,\n        };\n    }\n  };\n\n  return (\n    <>\n      <PageFormHidden\n        watch=\"source\"\n        hidden={(type: string) => !sourceTypes.includes(type) && type !== 'scm'}\n      >\n        <PageFormSection title={t('Source Details')}>\n          <PageFormCredentialSelect<InventorySourceForm>\n            name=\"credential\"\n            label={t('Credential')}\n            labelHelp={t(\n              'Select credentials for accessing the nodes this job will be ran against. You can only select one credential of each type. For machine credentials (SSH), checking \"Prompt on launch\" without selecting credentials will require you to select a machine credential at run time. If you select credentials and check \"Prompt on launch\", the selected credential(s) become the defaults that can be updated at run time.'\n            )}\n            isRequired={sourceTypes.slice(1).includes(source)}\n            queryParams={handleQueryParams(source)}\n          />\n          <PageFormHidden watch=\"source\" hidden={(type: string) => type !== 'scm'}>\n            <PageFormProjectSelect<InventorySourceForm> name=\"source_project\" isRequired />\n            <PageFormInventoryFileSelect<InventorySourceForm>\n              watch=\"source_project\"\n              name=\"source_path\"\n              isRequired\n            />\n          </PageFormHidden>\n\n          <PageFormSingleSelect<InventorySourceForm>\n            placeholder={t('Select a verbosity value')}\n            name=\"verbosity\"\n            options={[\n              { value: '0', label: t('0 (Warning)') },\n              { value: '1', label: t('1 (Info)') },\n              { value: '2', label: t('2 (Debug)') },\n            ]}\n            defaultValue={'1'}\n            labelHelpTitle={t('Limit')}\n            labelHelp={t(\n              'Control the level of output Ansible will produce as the playbook executes.'\n            )}\n            label={t('Verbosity')}\n            isRequired\n          />\n          <PageFormTextInput<InventorySourceForm>\n            name=\"host_filter\"\n            labelHelp={t(\n              'Regular expression where only matching host names will be imported. The filter is applied as a post-processing step after any inventory plugin filters are applied.'\n            )}\n            label={t('Host filter')}\n          />\n          <PageFormTextInput<InventorySourceForm>\n            name=\"enabled_var\"\n            labelHelp={t(\n              \"Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified using dot notation, e.g: 'foo.bar'\"\n            )}\n            label={t('Enabled variable')}\n          />\n          <PageFormTextInput<InventorySourceForm>\n            name=\"enabled_value\"\n            labelHelp={t(\n              'This field is ignored unless an Enabled Variable is set. If the enabled variable matches this value, the host will be enabled on import.'\n            )}\n            label={t('Enabled value')}\n          />\n          <PageFormSection title={t('Update options')}>\n            <PageFormCheckbox<InventorySourceForm>\n              label={t('Overwrite')}\n              labelHelpTitle={t('Overwrite')}\n              labelHelp={t(\n                'If checked, any hosts and groups that were previously present on the external source but are now removed will be removed from the inventory. Hosts and groups that were not managed by the inventory source will be promoted to the next manually created group or if there is no manually created group to promote them into, they will be left in the \"all\" default group for the inventory. \\nWhen not checked, local child hosts and groups not found on the external source will remain untouched by the inventory update process.'\n              )}\n              name=\"overwrite\"\n            />\n            <PageFormCheckbox<InventorySourceForm>\n              label={t('Overwrite variables')}\n              labelHelpTitle={t('Overwrite variables')}\n              labelHelp={t(\n                'If checked, all variables for child groups and hosts will be removed and replaced by those found on the external source.\\nWhen not checked, a merge will be performed, combining local variables with those found on the external source.'\n              )}\n              name=\"overwrite_vars\"\n            />\n            <PageFormCheckbox<InventorySourceForm>\n              label={t('Update on Launch')}\n              labelHelpTitle={t('Update on launch')}\n              labelHelp={t(\n                'Each time a job runs using this inventory, refresh the inventory from the selected source before executing job tasks.'\n              )}\n              name=\"update_on_launch\"\n            />\n            {isUpdateOnLaunchEnabled ? (\n              <PageFormSection title={t('Cache timeout (seconds)')}>\n                <PageFormTextInput<InventorySourceForm>\n                  name=\"update_cache_timeout\"\n                  placeholder={t('0')}\n                  isRequired\n                  type=\"number\"\n                />\n              </PageFormSection>\n            ) : null}\n          </PageFormSection>\n          <PageFormSection singleColumn>\n            <PageFormDataEditor name=\"source_vars\" label={t('Source variables')} format=\"yaml\" />\n          </PageFormSection>\n        </PageFormSection>\n      </PageFormHidden>\n    </>\n  );\n}\n","import { useEffect, useMemo, useState } from 'react';\nimport { FieldValues, useFormContext, useWatch } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport {\n  PageFormSelect,\n  PageFormSubmitHandler,\n  PageFormTextInput,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { useGet } from '../../../common/crud/useGet';\nimport { useOptions } from '../../../common/crud/useOptions';\nimport { usePatchRequest } from '../../../common/crud/usePatchRequest';\nimport { usePostRequest } from '../../../common/crud/usePostRequest';\nimport { AwxPageForm } from '../../common/AwxPageForm';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { Inventory } from '../../interfaces/Inventory';\nimport {\n  InventorySource,\n  InventorySourceCreate,\n  InventorySourceForm,\n} from '../../interfaces/InventorySource';\nimport { ActionsResponse, OptionsResponse } from '../../interfaces/OptionsResponse';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { InventorySourceSubForm } from './InventorySourceSubForm';\nimport { PageFormSelectExecutionEnvironment } from '../../administration/execution-environments/components/PageFormSelectExecutionEnvironment';\n\nexport interface SourceFields extends FieldValues {\n  project: Omit<InventorySource, 'source'> & {\n    source?:\n      | ''\n      | 'scm'\n      | 'ec2'\n      | 'gce'\n      | 'azure_rm'\n      | 'vmware'\n      | 'satellite6'\n      | 'openstack'\n      | 'rhv'\n      | 'controller'\n      | 'insights'\n      | 'terraform'\n      | null;\n  };\n  id: number;\n}\n\nexport function CreateInventorySource() {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const navigate = useNavigate();\n  const postRequest = usePostRequest<InventorySourceCreate, InventorySource>();\n  const params = useParams<{ id: string }>();\n  const { data: inventory } = useGet<Inventory>(\n    awxAPI`/inventories/${params.id?.toString() ?? ''}/`\n  );\n\n  const onSubmit: PageFormSubmitHandler<InventorySourceForm> = async (values) => {\n    const formValues: InventorySourceCreate = {\n      ...values,\n      execution_environment: values?.execution_environment ? values.execution_environment : null,\n      source_path: values?.source_path?.name,\n      inventory: parseInt(params.id ?? ''),\n      source_project: values?.source_project?.id,\n    };\n\n    const source = await postRequest(awxAPI`/inventory_sources/`, formValues);\n\n    pageNavigate(AwxRoute.InventorySourceDetail, {\n      params: { source_id: source.id, inventory_type: inventory?.type, id: params.id },\n    });\n  };\n\n  const getPageUrl = useGetPageUrl();\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Create source')}\n        breadcrumbs={[\n          { label: t('Inventories'), to: getPageUrl(AwxRoute.Inventories) },\n          {\n            label: `${inventory?.name}`,\n            to: getPageUrl(AwxRoute.InventoryDetails, {\n              params: {\n                id: inventory?.id,\n                inventory_type: inventory?.type,\n              },\n            }),\n          },\n          {\n            label: t('Sources'),\n            to: getPageUrl(AwxRoute.InventorySources, {\n              params: {\n                id: inventory?.id,\n                inventory_type: inventory?.type,\n              },\n            }),\n          },\n          { label: t('Create source') },\n        ]}\n      />\n      <AwxPageForm\n        submitText={t('Create source')}\n        onSubmit={onSubmit}\n        onCancel={() => navigate(-1)}\n        defaultValue={{\n          name: '',\n          description: '',\n          credential: null,\n        }}\n      >\n        <InventorySourceInputs />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n\nexport function EditInventorySource() {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const navigate = useNavigate();\n  const patchRequest = usePatchRequest<InventorySourceCreate, InventorySource>();\n  const params = useParams<{ id: string; source_id: string }>();\n  const { data: inventory } = useGet<Inventory>(\n    awxAPI`/inventories/${params.id?.toString() ?? ''}/`\n  );\n\n  const { data: inventorySource } = useGet<InventorySource>(\n    awxAPI`/inventory_sources/${params.source_id?.toString() ?? ''}/`\n  );\n\n  const defaultValue: InventorySourceForm = useMemo(\n    () => ({\n      name: inventorySource?.name,\n      description: inventorySource?.description ?? '',\n      execution_environment: inventorySource?.summary_fields?.execution_environment?.id,\n      source: inventorySource?.source,\n      credential: inventorySource?.credential ?? null,\n      source_project: inventorySource?.summary_fields?.source_project,\n      source_path: {\n        name: inventorySource?.source_path,\n      },\n      verbosity: inventorySource?.verbosity,\n      host_filter: inventorySource?.host_filter,\n      enabled_var: inventorySource?.enabled_var,\n      enabled_value: inventorySource?.enabled_value,\n      overwrite: inventorySource?.overwrite,\n      overwrite_vars: inventorySource?.overwrite_vars,\n      update_on_launch: inventorySource?.update_on_launch,\n      update_cache_timeout: inventorySource?.update_cache_timeout,\n      source_vars: inventorySource?.source_vars,\n    }),\n    [inventorySource]\n  );\n\n  const onSubmit: PageFormSubmitHandler<InventorySourceForm> = async (values) => {\n    const formValues: InventorySourceCreate = {\n      ...values,\n      execution_environment: values?.execution_environment ? values.execution_environment : null,\n      source_path: values?.source_path?.name ?? '',\n      inventory: parseInt(params.id ?? ''),\n      source_project: values?.source_project?.id,\n    };\n\n    const source = await patchRequest(\n      awxAPI`/inventory_sources/${params.source_id ?? ''}/`,\n      formValues\n    );\n\n    pageNavigate(AwxRoute.InventorySourceDetail, {\n      params: { source_id: source.id, inventory_type: inventory?.type, id: params.id },\n    });\n  };\n\n  const getPageUrl = useGetPageUrl();\n\n  if (!inventorySource) {\n    return null;\n  }\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Edit {{sourceName}}', { sourceName: inventorySource?.name })}\n        breadcrumbs={[\n          { label: t('Inventories'), to: getPageUrl(AwxRoute.Inventories) },\n          {\n            label: `${inventory?.name}`,\n            to: getPageUrl(AwxRoute.InventoryDetails, {\n              params: {\n                id: inventory?.id,\n                inventory_type: inventory?.type,\n              },\n            }),\n          },\n          {\n            label: t('Sources'),\n            to: getPageUrl(AwxRoute.InventorySources, {\n              params: {\n                id: inventory?.id,\n                inventory_type: inventory?.type,\n              },\n            }),\n          },\n          { label: t('Edit {{sourceName}}', { sourceName: inventorySource?.name }) },\n        ]}\n      />\n      <AwxPageForm\n        submitText={t('Save source')}\n        onSubmit={onSubmit}\n        onCancel={() => navigate(-1)}\n        defaultValue={defaultValue}\n      >\n        <InventorySourceInputs />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n\nfunction InventorySourceInputs() {\n  const { t } = useTranslation();\n  const { data } = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/inventory_sources/`);\n  const source = useWatch<InventorySourceForm>({\n    name: 'source',\n  });\n  const formContext = useFormContext();\n  const [sourceType, setSourceType] = useState(source);\n\n  // remove the filter when mockups/functionality for file and constructed source types are ready\n  const scmTypeOptions = data?.actions?.GET?.source?.choices?.filter(([value, label]) => {\n    const ignoredSourceTypes = ['file', 'constructed'];\n    if (!ignoredSourceTypes.includes(value)) {\n      return {\n        label,\n        value,\n      };\n    }\n  });\n\n  useEffect(() => {\n    formContext.clearErrors();\n    if (sourceType !== source) {\n      formContext.resetField('credential', { defaultValue: null });\n      formContext.resetField('source_project', { defaultValue: {} });\n      formContext.resetField('source_path', { defaultValue: '' });\n      setSourceType(source);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [source]);\n  return (\n    <>\n      <PageFormTextInput name=\"name\" label={t('Name')} placeholder={t('Enter name')} isRequired />\n      <PageFormTextInput\n        label={t('Description')}\n        name=\"description\"\n        placeholder={t('Enter description')}\n      />\n      <PageFormSelectExecutionEnvironment\n        isRequired={source === 'terraform'}\n        name=\"execution_environment\"\n      />\n      <PageFormSelect<SourceFields>\n        isRequired\n        name=\"source\"\n        id=\"source_control_type\"\n        label={t('Source')}\n        options={\n          scmTypeOptions\n            ? scmTypeOptions.map(([value, label]) => ({\n                label: label,\n                value: value,\n              }))\n            : []\n        }\n        placeholderText={t('Select a source')}\n      />\n      <InventorySourceSubForm />\n    </>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport { DateTimeCell, PageDetail, PageDetails, usePageNavigate } from '../../../../framework';\nimport { PageDetailCodeEditor } from '../../../../framework/PageDetails/PageDetailCodeEditor';\nimport { LastModifiedPageDetail } from '../../../common/LastModifiedPageDetail';\nimport { useGetItem } from '../../../common/crud/useGet';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { InventoryGroup } from '../../interfaces/InventoryGroup';\nimport { AwxRoute } from '../../main/AwxRoutes';\n\nexport function GroupDetails() {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const params = useParams<{ group_id: string }>();\n  const { data: group } = useGetItem<InventoryGroup>(awxAPI`/groups/`, params.group_id);\n\n  return (\n    <PageDetails>\n      <PageDetail label={t('Name')}>{group?.name}</PageDetail>\n      <PageDetail label={t('Description')}>{group?.description}</PageDetail>\n      <PageDetail label={t('Created')}>\n        <DateTimeCell\n          value={group?.created}\n          author={group?.summary_fields?.created_by?.username}\n          onClick={() =>\n            pageNavigate(AwxRoute.UserDetails, {\n              params: { id: group?.summary_fields?.created_by?.id },\n            })\n          }\n        />\n      </PageDetail>\n      <LastModifiedPageDetail\n        value={group?.created}\n        author={group?.summary_fields?.created_by?.username}\n        onClick={() =>\n          pageNavigate(AwxRoute.UserDetails, {\n            params: { id: group?.summary_fields?.created_by?.id },\n          })\n        }\n      />\n      <PageDetailCodeEditor\n        label={t('Variables')}\n        showCopyToClipboard\n        toggleLanguage\n        value={group?.variables || '---'}\n      />\n    </PageDetails>\n  );\n}\n","import { useParams } from 'react-router-dom';\nimport { usePersistentFilters } from '../../../../common/PersistentFilters';\nimport { JobsList } from '../../../views/jobs/JobsList';\nimport { useHostsJobsColumns } from './hooks/useHostsJobsColumns';\n\nexport function InventoryHostJobs() {\n  usePersistentFilters('inventories');\n  const jobsColumns = useHostsJobsColumns();\n  const { host_id = '' } = useParams<{ host_id: string }>();\n  const queryParams = { job__hosts: host_id, not__launch_type: 'sync' };\n  return <JobsList queryParams={queryParams} columns={jobsColumns} />;\n}\n","import { useTranslation } from 'react-i18next';\nimport { ITableColumn, MultiSelectDialog } from '../../../../../framework';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxView } from '../../../common/useAwxView';\nimport { useGroupsFilters } from '../../groups/hooks/useGroupsFilters';\nimport { useCreatedColumn, useModifiedColumn, useNameColumn } from '../../../../common/columns';\nimport { useMemo } from 'react';\nimport { AwxHost } from '../../../interfaces/AwxHost';\n\nexport interface HostSelectModalProps {\n  groupId: string;\n  inventoryId: string;\n  onSelectedHosts: (groups: AwxHost[]) => Promise<void>;\n}\n\nexport function HostSelectDialog({ onSelectedHosts, groupId, inventoryId }: HostSelectModalProps) {\n  const { t } = useTranslation();\n  const nameColumn = useNameColumn();\n  const createdColumn = useCreatedColumn();\n  const modifiedColumn = useModifiedColumn();\n  const tableColumns = useMemo<ITableColumn<AwxHost>[]>(\n    () => [nameColumn, createdColumn, modifiedColumn],\n    [nameColumn, createdColumn, modifiedColumn]\n  );\n  const toolbarFilters = useGroupsFilters({\n    url: `inventories/${inventoryId}/hosts/?not__groups=${groupId}`,\n  });\n  const view = useAwxView<AwxHost>({\n    url: awxAPI`/inventories/${inventoryId}/hosts/?not__groups=${groupId}&order_by=name&page=1&page_size=5`,\n    toolbarFilters,\n    tableColumns,\n  });\n\n  return (\n    <MultiSelectDialog\n      title={t('Select host')}\n      onSelect={(hosts) => void onSelectedHosts(hosts)}\n      toolbarFilters={toolbarFilters}\n      tableColumns={tableColumns}\n      view={view}\n      confirmText={t('Add hosts')}\n    />\n  );\n}\n","import { CubesIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport { PageTable } from '../../../../framework';\nimport { useOptions } from '../../../common/crud/useOptions';\nimport { usePersistentFilters } from '../../../common/PersistentFilters';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { AwxHost } from '../../interfaces/AwxHost';\nimport { OptionsResponse, ActionsResponse } from '../../interfaces/OptionsResponse';\nimport { useAwxView } from '../../common/useAwxView';\nimport { useHostsFilters } from '../hosts/hooks/useHostsFilters';\nimport { useInventoriesGroupHostsColumns } from '../inventories/hooks/useInventoriesHostsColumns';\nimport { useHostsEmptyStateActions } from '../hosts/hooks/useHostsEmptyStateActions';\nimport { useInventoriesGroupsHostsToolbarActions } from '../inventories/hooks/useInventoriesGroupsHostsToolbarActions';\nimport { useInventoriesGroupsHostsActions } from '../inventories/hooks/useInventoriesGroupsHostsActions';\n\nexport function GroupHosts() {\n  const { t } = useTranslation();\n  const toolbarFilters = useHostsFilters();\n  const tableColumns = useInventoriesGroupHostsColumns();\n  const params = useParams<{ id: string; group_id: string; inventory_type: string }>();\n  const view = useAwxView<AwxHost>({\n    url: awxAPI`/groups/${params.group_id ?? ''}/all_hosts/`,\n    toolbarFilters,\n    tableColumns,\n  });\n  const toolbarActions = useInventoriesGroupsHostsToolbarActions(view);\n  const rowActions = useInventoriesGroupsHostsActions(view.refresh);\n  const emptyStateActions = useHostsEmptyStateActions(view);\n\n  const hostOptions = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/hosts/`).data;\n  const canCreateHost = Boolean(hostOptions && hostOptions.actions && hostOptions.actions['POST']);\n\n  usePersistentFilters('inventories');\n\n  return (\n    <PageTable<AwxHost>\n      id=\"awx-inventory-hosts-table\"\n      toolbarFilters={toolbarFilters}\n      toolbarActions={toolbarActions}\n      tableColumns={tableColumns}\n      rowActions={rowActions}\n      errorStateTitle={t('Error loading inventory hosts')}\n      emptyStateTitle={\n        canCreateHost\n          ? t('There are currently no hosts added to this inventory.')\n          : t('You do not have permission to create a host')\n      }\n      emptyStateDescription={\n        canCreateHost\n          ? t('Please add hosts by using the button below.')\n          : t(\n              'Please contact your organization administrator if there is an issue with your access.'\n            )\n      }\n      emptyStateIcon={canCreateHost ? undefined : CubesIcon}\n      emptyStateButtonIcon={<PlusCircleIcon />}\n      emptyStateButtonText={canCreateHost ? t('Create host') : undefined}\n      emptyStateActions={emptyStateActions}\n      {...view}\n    />\n  );\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  IPageAction,\n  PageActionType,\n  PageActionSelection,\n  usePageNavigate,\n  usePageAlertToaster,\n  usePageDialog,\n} from '../../../../../framework';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { AwxHost } from '../../../interfaces/AwxHost';\nimport { OptionsResponse, ActionsResponse } from '../../../interfaces/OptionsResponse';\nimport { IAwxView } from '../../../common/useAwxView';\nimport { useDisassociateHosts } from '../../hosts/hooks/useDisassociateHosts';\nimport { postRequest } from '../../../../common/crud/Data';\nimport { HostSelectDialog } from '../../hosts/hooks/useHostSelectDialog';\nimport { useRunCommandAction } from './useInventoriesGroupsToolbarActions';\n\nexport function useInventoriesGroupsHostsToolbarActions(view: IAwxView<AwxHost>) {\n  const [_, setDialog] = usePageDialog();\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const disassociateHosts = useDisassociateHosts(view.unselectItemsAndRefresh);\n  const params = useParams<{ id: string; group_id: string; inventory_type: string }>();\n  const alertToaster = usePageAlertToaster();\n\n  const runCommandAction = useRunCommandAction<AwxHost>({\n    ...params,\n    selectedItems: view.selectedItems || [],\n    actionType: 'toolbar',\n  });\n\n  const hostOptions = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/hosts/`).data;\n  const canCreateHost = Boolean(hostOptions && hostOptions.actions && hostOptions.actions['POST']);\n\n  const onSelectedHosts = useCallback(\n    async (selectedHosts: AwxHost[]) => {\n      for (const host of selectedHosts) {\n        try {\n          await postRequest(awxAPI`/groups/${params.group_id as string}/hosts/`, {\n            id: host.id,\n          }).then(() => void view.refresh());\n        } catch (err) {\n          alertToaster.addAlert({\n            variant: 'danger',\n            title: t(`Failed to add ${host.name} to related groups`),\n            children: err instanceof Error && err.message,\n          });\n        }\n      }\n      setDialog(undefined);\n    },\n    [setDialog, params.group_id, view, alertToaster, t]\n  );\n\n  return useMemo<IPageAction<AwxHost>[]>(() => {\n    const toolbarActions: IPageAction<AwxHost>[] = [\n      {\n        type: PageActionType.Dropdown,\n        selection: PageActionSelection.None,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        isHidden: () => params.inventory_type === 'constructed_inventory',\n        icon: PlusCircleIcon,\n        label: t('Add host'),\n        actions: [\n          {\n            type: PageActionType.Button,\n            selection: PageActionSelection.None,\n            label: t('Add existing host'),\n            onClick: () =>\n              setDialog(\n                <HostSelectDialog\n                  inventoryId={params.id as string}\n                  groupId={params.group_id as string}\n                  onSelectedHosts={onSelectedHosts}\n                />\n              ),\n          },\n          {\n            type: PageActionType.Button,\n            selection: PageActionSelection.None,\n            label: t('Create host'),\n            onClick: () =>\n              pageNavigate(AwxRoute.InventoryGroupHostAdd, {\n                params: {\n                  id: params?.id,\n                  inventory_type: params.inventory_type,\n                  group_id: params.group_id,\n                },\n              }),\n            isDisabled: () =>\n              canCreateHost\n                ? undefined\n                : t(\n                    'You do not have permission to create a host. Please contact your organization administrator if there is an issue with your access.'\n                  ),\n          },\n        ],\n      },\n      runCommandAction,\n    ];\n\n    const disassociateAction: IPageAction<AwxHost> = {\n      type: PageActionType.Button,\n      selection: PageActionSelection.Multiple,\n      isPinned: true,\n      label: t('Disassociate hosts'),\n      onClick: disassociateHosts,\n      isDisabled:\n        view.selectedItems.length === 0 ? t('Select at least one item from the list') : undefined,\n    };\n\n    if (params.inventory_type === 'inventory') {\n      toolbarActions.push(disassociateAction);\n    }\n    return toolbarActions;\n  }, [\n    t,\n    disassociateHosts,\n    view.selectedItems.length,\n    setDialog,\n    params.id,\n    params.group_id,\n    params.inventory_type,\n    onSelectedHosts,\n    pageNavigate,\n    canCreateHost,\n    runCommandAction,\n  ]);\n}\n","import { useTranslation } from 'react-i18next';\nimport { useNameColumn } from '../../../../common/columns';\nimport { useMemo } from 'react';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { compareStrings } from '../../../../../framework';\nimport { getItemKey, postRequest } from '../../../../common/crud/Data';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useParams } from 'react-router-dom';\nimport { useHostsColumns } from './useHostsColumns';\nimport { AwxHost } from '../../../interfaces/AwxHost';\n\nexport function useDisassociateHosts(onComplete: (hosts: AwxHost[]) => void) {\n  const { t } = useTranslation();\n  const confirmationColumns = useHostsColumns({ disableLinks: true, disableSort: true });\n  const deleteActionNameColumn = useNameColumn({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo(() => [deleteActionNameColumn], [deleteActionNameColumn]);\n  const params = useParams<{ group_id: string }>();\n  const bulkAction = useAwxBulkConfirmation<AwxHost>();\n  const disassociateHost = (hosts: AwxHost[]) => {\n    bulkAction({\n      title: t('Disassociate host from group?'),\n      confirmText: t('Yes, I confirm that I want to disassociate these {{count}} hosts.', {\n        count: hosts.length,\n      }),\n      actionButtonText: t('Disassociate hosts', { count: hosts.length }),\n      items: hosts.sort((l, r) => compareStrings(l.name, r.name)),\n      keyFn: getItemKey,\n      isDanger: true,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: (group: AwxHost, signal) =>\n        postRequest(\n          awxAPI`/groups/${params.group_id as string}/hosts/`,\n          { disassociate: true, id: group.id },\n          signal\n        ),\n    });\n  };\n  return disassociateHost;\n}\n","import { PencilAltIcon } from '@patternfly/react-icons';\nimport { useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { cannotEditResource } from '../../../../common/utils/RBAChelpers';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { AwxHost } from '../../../interfaces/AwxHost';\nimport { usePatchRequest } from '../../../../common/crud/usePatchRequest';\nimport { useParams } from 'react-router-dom';\n\nexport function useInventoriesGroupsHostsActions(onToggle: (() => Promise<void>) | (() => void)) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n\n  const patchRequest = usePatchRequest<{ enabled: boolean }, AwxHost>();\n\n  const params = useParams<{ id: string; inventory_type: string; host_id: string }>();\n\n  const handleToggleHost: (host: AwxHost, enabled: boolean) => Promise<void> = useCallback(\n    async (host, enabled) => {\n      await patchRequest(awxAPI`/hosts/${host.id.toString()}/`, { enabled });\n      await onToggle();\n      return Promise.resolve();\n    },\n    [onToggle, patchRequest]\n  );\n\n  return useMemo<IPageAction<AwxHost>[]>(\n    () => [\n      {\n        type: PageActionType.Switch,\n        ariaLabel: (isEnabled) =>\n          isEnabled ? t('Click to disable instance') : t('Click to enable instance'),\n        selection: PageActionSelection.Single,\n        onToggle: (host, enabled) => handleToggleHost(host, enabled),\n        isSwitchOn: (host: AwxHost) => (host.enabled ? true : false),\n        label: t('Enabled'),\n        labelOff: t('Disabled'),\n        showPinnedLabel: false,\n        isPinned: true,\n        isDisabled: (host) => cannotEditResource(host, t),\n        tooltip: t(\n          'Indicates if a host is available and should be included in running jobs. For hosts that are part of an external inventory, this may be reset by the inventory sync process.'\n        ),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        isPinned: true,\n        icon: PencilAltIcon,\n        label: t('Edit host'),\n        onClick: (host) =>\n          pageNavigate(AwxRoute.InventoryHostEdit, {\n            params: { id: params.id, inventory_type: params.inventory_type, host_id: host.id },\n          }),\n        isDisabled: (host) => cannotEditResource(host, t),\n        isHidden: (_host) => params.inventory_type === 'constructed_inventory',\n      },\n    ],\n    [t, handleToggleHost, pageNavigate, params.id, params.inventory_type]\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { AwxHost } from '../../../interfaces/AwxHost';\nimport { useCallback, useMemo } from 'react';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  usePageAlertToaster,\n  usePageDialog,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { ButtonVariant } from '@patternfly/react-core';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { ActionsResponse, OptionsResponse } from '../../../interfaces/OptionsResponse';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useParams } from 'react-router-dom';\nimport { HostSelectDialog } from './useHostSelectDialog';\nimport { IAwxView } from '../../../common/useAwxView';\nimport { postRequest } from '../../../../common/crud/Data';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\n\nexport function useHostsEmptyStateActions(view: IAwxView<AwxHost>) {\n  const [_, setDialog] = usePageDialog();\n  const { t } = useTranslation();\n  const params = useParams<{\n    id: string;\n    group_id: string;\n    inventory_type: string;\n    host_id: string;\n  }>();\n  const alertToaster = usePageAlertToaster();\n  const pageNavigate = usePageNavigate();\n\n  const hostOptions = useOptions<OptionsResponse<ActionsResponse>>(\n    awxAPI`/inventories/${params.id ?? ''}/hosts/`\n  ).data;\n  const canCreateHost = Boolean(hostOptions && hostOptions.actions && hostOptions.actions['POST']);\n\n  const onSelectedHosts = useCallback(\n    async (selectedHosts: AwxHost[]) => {\n      for (const host of selectedHosts) {\n        try {\n          await postRequest(awxAPI`/groups/${params.group_id as string}/hosts/`, {\n            id: host.id,\n          }).then(() => void view.refresh());\n        } catch (err) {\n          alertToaster.addAlert({\n            variant: 'danger',\n            title: t(`Failed to add ${host.name} to related groups`),\n            children: err instanceof Error && err.message,\n          });\n        }\n      }\n      setDialog(undefined);\n    },\n    [setDialog, params.group_id, alertToaster, t, view]\n  );\n\n  return useMemo<IPageAction<AwxHost>[]>(\n    () => [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.None,\n        variant: ButtonVariant.primary,\n        icon: PlusCircleIcon,\n        label: t('Add existing host'),\n        isPinned: true,\n        onClick: () =>\n          setDialog(\n            <HostSelectDialog\n              inventoryId={params.id as string}\n              groupId={params.group_id as string}\n              onSelectedHosts={onSelectedHosts}\n            />\n          ),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.None,\n        variant: ButtonVariant.primary,\n        icon: PlusCircleIcon,\n        label: t('Create host'),\n        isPinned: true,\n        onClick: () =>\n          params?.group_id\n            ? pageNavigate(AwxRoute.InventoryGroupHostAdd, {\n                params: {\n                  id: params.id,\n                  inventory_type: params.inventory_type,\n                  group_id: params.group_id,\n                },\n              })\n            : pageNavigate(AwxRoute.CreateHost),\n        isDisabled: () =>\n          canCreateHost\n            ? undefined\n            : t(\n                'You do not have permission to create a group. Please contact your organization administrator if there is an issue with your access.'\n              ),\n      },\n    ],\n    [\n      canCreateHost,\n      onSelectedHosts,\n      pageNavigate,\n      params.group_id,\n      params.id,\n      params.inventory_type,\n      setDialog,\n      t,\n    ]\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { InventoryGroup } from '../../../interfaces/InventoryGroup';\nimport { useNameColumn } from '../../../../common/columns';\nimport { useMemo } from 'react';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { compareStrings } from '../../../../../framework';\nimport { getItemKey, postRequest } from '../../../../common/crud/Data';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useGroupsColumns } from './useGroupsColumns';\nimport { useParams } from 'react-router-dom';\n\nexport function useDisassociateGroups(onComplete: (groups: InventoryGroup[]) => void) {\n  const { t } = useTranslation();\n  const confirmationColumns = useGroupsColumns({ disableLinks: true, disableSort: true });\n  const deleteActionNameColumn = useNameColumn({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo(() => [deleteActionNameColumn], [deleteActionNameColumn]);\n  const params = useParams<{ group_id: string }>();\n  const bulkAction = useAwxBulkConfirmation<InventoryGroup>();\n  const deleteGroups = (groups: InventoryGroup[]) => {\n    bulkAction({\n      title: t('Permanently disassociate groups', { count: groups.length }),\n      confirmText: t('Yes, I confirm that I want to disassociate these {{count}} groups.', {\n        count: groups.length,\n      }),\n      actionButtonText: t('Disassociate groups', { count: groups.length }),\n      items: groups.sort((l, r) => compareStrings(l.name, r.name)),\n      keyFn: getItemKey,\n      isDanger: true,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: (group: InventoryGroup, signal) =>\n        postRequest(\n          awxAPI`/groups/${params.group_id as string}/children/`,\n          { disassociate: parseInt(params.group_id ?? ''), id: group.id },\n          signal\n        ),\n    });\n  };\n  return deleteGroups;\n}\n","import { useCallback, useMemo } from 'react';\nimport { ITableColumn, usePageNavigate } from '../../../../../framework';\nimport { InventoryGroup } from '../../../interfaces/InventoryGroup';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useDescriptionColumn, useModifiedColumn, useNameColumn } from '../../../../common/columns';\n\nexport function useGroupsColumns(options?: { disableSort?: boolean; disableLinks?: boolean }) {\n  const pageNavigate = usePageNavigate();\n  const nameClick = useCallback(\n    (group: InventoryGroup) =>\n      pageNavigate(AwxRoute.InventoryGroupDetails, { params: { id: group.id } }),\n    [pageNavigate]\n  );\n  const nameColumn = useNameColumn({\n    ...options,\n    onClick: nameClick,\n  });\n  const createdColumn = useDescriptionColumn();\n  const modifiedColumn = useModifiedColumn(options);\n  const tableColumns = useMemo<ITableColumn<InventoryGroup>[]>(\n    () => [nameColumn, createdColumn, modifiedColumn],\n    [nameColumn, createdColumn, modifiedColumn]\n  );\n  return tableColumns;\n}\n","import { useTranslation } from 'react-i18next';\nimport { ITableColumn, MultiSelectDialog } from '../../../../../framework';\nimport { InventoryGroup } from '../../../interfaces/InventoryGroup';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxView } from '../../../common/useAwxView';\nimport { useGroupsFilters } from './useGroupsFilters';\nimport { useCreatedColumn, useModifiedColumn, useNameColumn } from '../../../../common/columns';\nimport { useMemo } from 'react';\n\nexport interface GroupSelectModalProps {\n  groupId: string;\n  onSelectedGroups: (groups: InventoryGroup[]) => Promise<void>;\n}\n\nexport function GroupSelectDialog({ onSelectedGroups, groupId }: GroupSelectModalProps) {\n  const { t } = useTranslation();\n  const toolbarFilters = useGroupsFilters({\n    url: `groups/${groupId}/potential_children`,\n    queryParams: {\n      not__id: groupId,\n      not__parents: groupId,\n    },\n  });\n  const nameColumn = useNameColumn();\n  const createdColumn = useCreatedColumn();\n  const modifiedColumn = useModifiedColumn();\n  const tableColumns = useMemo<ITableColumn<InventoryGroup>[]>(\n    () => [nameColumn, createdColumn, modifiedColumn],\n    [nameColumn, createdColumn, modifiedColumn]\n  );\n  const view = useAwxView<InventoryGroup>({\n    url: awxAPI`/groups/${groupId}/potential_children/?not__id=${groupId}&not__parents=${groupId}&order_by=name&page=1&page_size=5`,\n    toolbarFilters,\n    tableColumns,\n  });\n\n  return (\n    <MultiSelectDialog\n      title={t('Select groups')}\n      onSelect={(groups) => void onSelectedGroups(groups)}\n      toolbarFilters={toolbarFilters}\n      tableColumns={tableColumns}\n      view={view}\n      confirmText={t('Add groups')}\n    />\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { InventoryGroup } from '../../interfaces/InventoryGroup';\nimport { PageTable } from '../../../../framework';\nimport { CubeIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { useGroupsFilters } from './hooks/useGroupsFilters';\nimport { useParams } from 'react-router-dom';\nimport { useRelatedGroupsToolbarActions } from './hooks/useRelatedGroupsToolbarActions';\nimport { useInventoriesGroupsActions } from '../inventories/hooks/useInventoriesGroupsActions';\nimport { useOptions } from '../../../common/crud/useOptions';\nimport { ActionsResponse, OptionsResponse } from '../../interfaces/OptionsResponse';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { useAwxView } from '../../common/useAwxView';\nimport { useRelatedGroupsColumns } from './hooks/useRelatedGroupsColumns';\nimport { useRelatedGroupsEmptyStateActions } from './hooks/useRelatedGroupsEmptyStateActions';\n\nexport function GroupRelatedGroups() {\n  const { t } = useTranslation();\n  const tableColumns = useRelatedGroupsColumns();\n  const params = useParams<{ id: string; inventory_type: string; group_id: string }>();\n  const toolbarFilters = useGroupsFilters({ url: `groups/${params.group_id ?? ''}/children` });\n  const view = useAwxView<InventoryGroup>({\n    url: awxAPI`/groups/${params.group_id ?? ''}/children/`,\n    toolbarFilters,\n    tableColumns,\n  });\n  const toolbarActions = useRelatedGroupsToolbarActions(view);\n  const rowActions = useInventoriesGroupsActions();\n  const emptyStateActions = useRelatedGroupsEmptyStateActions(view);\n\n  const groupsOptions = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/groups/`).data;\n  const canCreateGroup = Boolean(\n    groupsOptions && groupsOptions.actions && groupsOptions.actions['POST']\n  );\n\n  const isConstructed = params.inventory_type === 'constructed_inventory';\n\n  return (\n    <PageTable<InventoryGroup>\n      id=\"awx-inventory-group-related-groups-table\"\n      toolbarFilters={toolbarFilters}\n      toolbarActions={toolbarActions}\n      tableColumns={tableColumns}\n      rowActions={rowActions}\n      errorStateTitle={t('Error loading related groups')}\n      emptyStateTitle={\n        canCreateGroup\n          ? isConstructed\n            ? t('No Related Groups Found')\n            : t('There are currently no groups related to this group.')\n          : t('You do not have permission to add related groups.')\n      }\n      emptyStateDescription={\n        canCreateGroup\n          ? isConstructed\n            ? t('Please add Related Groups to populate this list')\n            : t('Please add related groups by using the buttons below.')\n          : t(\n              'Please contact your organization administrator if there is an issue with your access.'\n            )\n      }\n      emptyStateIcon={canCreateGroup ? undefined : CubeIcon}\n      emptyStateButtonIcon={<PlusCircleIcon />}\n      emptyStateButtonText={canCreateGroup && !isConstructed ? t('Add related groups') : undefined}\n      emptyStateActions={emptyStateActions}\n      {...view}\n    />\n  );\n}\n","import { useCallback, useMemo } from 'react';\nimport { ITableColumn, usePageNavigate } from '../../../../../framework';\nimport { InventoryGroup } from '../../../interfaces/InventoryGroup';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useCreatedColumn, useModifiedColumn, useNameColumn } from '../../../../common/columns';\nimport { useParams } from 'react-router-dom';\n\nexport function useRelatedGroupsColumns(options?: {\n  disableSort?: boolean;\n  disableLinks?: boolean;\n}) {\n  const pageNavigate = usePageNavigate();\n  const params = useParams<{ inventory_type: string }>();\n  const nameClick = useCallback(\n    (group: InventoryGroup) =>\n      pageNavigate(AwxRoute.InventoryGroupDetails, {\n        params: { inventory_type: params.inventory_type, id: group.inventory, group_id: group.id },\n      }),\n    [pageNavigate, params.inventory_type]\n  );\n  const nameColumn = useNameColumn({\n    ...options,\n    onClick: nameClick,\n  });\n  const createdColumn = useCreatedColumn(options);\n  const modifiedColumn = useModifiedColumn(options);\n  const tableColumns = useMemo<ITableColumn<InventoryGroup>[]>(\n    () => [nameColumn, createdColumn, modifiedColumn],\n    [nameColumn, createdColumn, modifiedColumn]\n  );\n  return tableColumns;\n}\n","import { useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { IAwxView } from '../../../common/useAwxView';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  usePageAlertToaster,\n  usePageDialog,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { PlusCircleIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useParams } from 'react-router-dom';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { ActionsResponse, OptionsResponse } from '../../../interfaces/OptionsResponse';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { InventoryGroup } from '../../../interfaces/InventoryGroup';\nimport { ButtonVariant } from '@patternfly/react-core';\nimport { useDisassociateGroups } from './useDisassociateGroups';\nimport { GroupSelectDialog } from './useGroupSelectDialog';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { useRunCommandAction } from '../../inventories/hooks/useInventoriesGroupsToolbarActions';\n\nexport function useRelatedGroupsToolbarActions(view: IAwxView<InventoryGroup>) {\n  const [_, setDialog] = usePageDialog();\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const disassociateGroups = useDisassociateGroups(view.unselectItemsAndRefresh);\n  const params = useParams<{ id: string; inventory_type: string; group_id: string }>();\n  const postRequest = usePostRequest();\n  const alertToaster = usePageAlertToaster();\n\n  const isConstructed = params.inventory_type === 'constructed_inventory';\n\n  const runCommandAction = useRunCommandAction<InventoryGroup>({\n    ...params,\n    selectedItems: view.selectedItems || [],\n    actionType: 'toolbar',\n  });\n\n  const groupOptions = useOptions<OptionsResponse<ActionsResponse>>(\n    awxAPI`/inventories/${params.id ?? ''}/groups/`\n  ).data;\n  const canCreateGroup = Boolean(\n    groupOptions && groupOptions.actions && groupOptions.actions['POST']\n  );\n\n  const onSelectedGroups = useCallback(\n    async (selectedGroups: InventoryGroup[]) => {\n      for (const group of selectedGroups) {\n        try {\n          await postRequest(awxAPI`/groups/${params.group_id as string}/children/`, {\n            id: group.id,\n          }).then(() => void view.refresh());\n        } catch (err) {\n          alertToaster.addAlert({\n            variant: 'danger',\n            title: t(`Failed to add ${group.name} to related groups`),\n            children: err instanceof Error && err.message,\n          });\n        }\n      }\n      setDialog(undefined);\n    },\n    [setDialog, postRequest, params.group_id, view, alertToaster, t]\n  );\n\n  return useMemo<IPageAction<InventoryGroup>[]>(() => {\n    const items: IPageAction<InventoryGroup>[] = [];\n\n    if (isConstructed === false) {\n      items.push({\n        type: PageActionType.Dropdown,\n        selection: PageActionSelection.None,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        icon: PlusCircleIcon,\n        label: t('Add group'),\n        actions: [\n          {\n            type: PageActionType.Button,\n            selection: PageActionSelection.None,\n            label: t('Add existing group'),\n            onClick: () =>\n              setDialog(\n                <GroupSelectDialog\n                  groupId={params.group_id as string}\n                  onSelectedGroups={onSelectedGroups}\n                />\n              ),\n          },\n          {\n            type: PageActionType.Button,\n            selection: PageActionSelection.None,\n            label: t('Create group'),\n            isHidden: () => isConstructed,\n            onClick: () =>\n              pageNavigate(String(AwxRoute.InventoryGroupRelatedGroupsCreate), {\n                params: {\n                  inventory_type: params.inventory_type,\n                  id: params.id,\n                  group_id: params.group_id,\n                },\n              }),\n            isDisabled: () =>\n              canCreateGroup\n                ? undefined\n                : t(\n                    'You do not have permission to create a group. Please contact your organization administrator if there is an issue with your access.'\n                  ),\n          },\n        ],\n      });\n    }\n\n    items.push(runCommandAction);\n\n    if (isConstructed === false) {\n      items.push({ type: PageActionType.Seperator });\n      items.push({\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: TrashIcon,\n        label: t('Disassociate groups'),\n        onClick: disassociateGroups,\n        isDanger: true,\n        isDisabled:\n          view.selectedItems.length === 0 ? t('Select at least one item from the list') : undefined,\n      });\n    }\n    return items;\n  }, [\n    t,\n    disassociateGroups,\n    pageNavigate,\n    params.inventory_type,\n    params.id,\n    canCreateGroup,\n    runCommandAction,\n    view.selectedItems.length,\n    params.group_id,\n    onSelectedGroups,\n    setDialog,\n    isConstructed,\n  ]);\n}\n","import { useTranslation } from 'react-i18next';\nimport { InventoryGroup } from '../../../interfaces/InventoryGroup';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  usePageAlertToaster,\n  usePageDialog,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { useCallback, useMemo } from 'react';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useParams } from 'react-router-dom';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { ActionsResponse, OptionsResponse } from '../../../interfaces/OptionsResponse';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { GroupSelectDialog } from './useGroupSelectDialog';\nimport { postRequest } from '../../../../common/crud/Data';\nimport { ButtonVariant } from '@patternfly/react-core';\nimport { IAwxView } from '../../../common/useAwxView';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\n\nexport function useRelatedGroupsEmptyStateActions(view: IAwxView<InventoryGroup>) {\n  const [_, setDialog] = usePageDialog();\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const params = useParams<{ id: string; inventory_type: string; group_id: string }>();\n  const alertToaster = usePageAlertToaster();\n\n  const groupOptions = useOptions<OptionsResponse<ActionsResponse>>(\n    awxAPI`/inventories/${params.id ?? ''}/groups/`\n  ).data;\n  const canCreateGroup = Boolean(\n    groupOptions && groupOptions.actions && groupOptions.actions['POST']\n  );\n\n  const onSelectedGroups = useCallback(\n    async (selectedGroups: InventoryGroup[]) => {\n      for (const group of selectedGroups) {\n        try {\n          await postRequest(awxAPI`/groups/${params.group_id as string}/children/`, {\n            id: group.id,\n          }).then(() => void view.refresh());\n        } catch (err) {\n          alertToaster.addAlert({\n            variant: 'danger',\n            title: t(`Failed to add ${group.name} to related groups`),\n            children: err instanceof Error && err.message,\n          });\n        }\n      }\n      setDialog(undefined);\n    },\n    [setDialog, params.group_id, alertToaster, t, view]\n  );\n\n  return useMemo<IPageAction<InventoryGroup>[]>(() => {\n    if (params.inventory_type === 'constructed_inventory') {\n      return [];\n    }\n\n    return [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.None,\n        variant: ButtonVariant.primary,\n        icon: PlusCircleIcon,\n        label: t('Add existing group'),\n        isPinned: true,\n        onClick: () =>\n          setDialog(\n            <GroupSelectDialog\n              groupId={params.group_id as string}\n              onSelectedGroups={onSelectedGroups}\n            />\n          ),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.None,\n        variant: ButtonVariant.primary,\n        icon: PlusCircleIcon,\n        label: t('Create group'),\n        isPinned: true,\n        onClick: () =>\n          pageNavigate(String(AwxRoute.InventoryGroupRelatedGroupsCreate), {\n            params: {\n              inventory_type: params.inventory_type,\n              id: params.id,\n              group_id: params.group_id,\n            },\n          }),\n        isDisabled: () =>\n          canCreateGroup\n            ? undefined\n            : t(\n                'You do not have permission to create a group. Please contact your organization administrator if there is an issue with your access.'\n              ),\n      },\n    ];\n  }, [\n    canCreateGroup,\n    onSelectedGroups,\n    pageNavigate,\n    params.group_id,\n    params.id,\n    params.inventory_type,\n    setDialog,\n    t,\n  ]);\n}\n","import { CubesIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport { PageLayout, PageTable } from '../../../../framework';\nimport { usePersistentFilters } from '../../../common/PersistentFilters';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { useAwxView } from '../../common/useAwxView';\nimport { useNotificationFilters } from './hooks/useNotificationFilters';\nimport { useNotificationActions } from './hooks/useNotificationActions';\nimport { useNotificationsColumns } from './hooks/useNotificationColumns';\nimport { NotificationTemplate } from '../../interfaces/NotificationTemplate';\nimport { useGet } from '../../../common/crud/useGet';\nimport { AwxItemsResponse } from '../../common/AwxItemsResponse';\n\ninterface ResourceTypeMapper {\n  inventory_sources?: string;\n  projects?: string;\n  job_templates?: string;\n  workflow_job_templates?: string;\n  organizations?: string;\n  system_job_templates?: string;\n}\n\nexport function ResourceNotifications({ resourceType, id }: { resourceType: string; id?: string }) {\n  const { t } = useTranslation();\n\n  // modify to the specific resource id when adding a new resource that requires the notifications view\n  const resourceToParamMap: ResourceTypeMapper = {\n    inventory_sources: 'source_id',\n    projects: 'id',\n    job_templates: 'id',\n    workflow_job_templates: 'id',\n    organizations: 'id',\n    system_job_templates: 'id',\n  };\n\n  const resourceToErrorMsg: ResourceTypeMapper = {\n    inventory_sources: 'inventory source',\n    projects: 'project',\n    job_templates: 'job template',\n    workflow_job_templates: 'workflow job template',\n    organizations: 'organization',\n    system_job_templates: 'system job templates',\n  };\n\n  const params = useParams();\n  // The id in the URL may not be the id of the AWX resource so we support explicitly passing the id and then falling back to the URL id\n  const resourceId =\n    id ?? params[resourceToParamMap[resourceType as keyof ResourceTypeMapper] ?? ''];\n\n  const { data: notificationStarted, refresh: notificationStartedRefresh } = useGet<\n    AwxItemsResponse<NotificationTemplate>\n  >(awxAPI`/${resourceType}/${resourceId ?? ''}/notification_templates_started/`);\n\n  const { data: notificationSuccess, refresh: notificationSuccessRefresh } = useGet<\n    AwxItemsResponse<NotificationTemplate>\n  >(awxAPI`/${resourceType}/${resourceId ?? ''}/notification_templates_success/`);\n\n  const { data: notificationError, refresh: notificationErrorRefresh } = useGet<\n    AwxItemsResponse<NotificationTemplate>\n  >(awxAPI`/${resourceType}/${resourceId ?? ''}/notification_templates_error/`);\n\n  const approvalUrl =\n    resourceType === 'system_job_templates' ||\n    resourceType === 'job_templates' ||\n    resourceType === 'projects'\n      ? ''\n      : awxAPI`/${resourceType}/${resourceId ?? ''}/notification_templates_approvals/`;\n\n  const approval = useGet<AwxItemsResponse<NotificationTemplate>>(approvalUrl);\n  const { data: notificationApproval, refresh: notificationApprovalRefresh } =\n    resourceType === 'organizations' || resourceType === 'workflow_job_templates'\n      ? approval\n      : { data: { results: [] }, refresh: () => undefined };\n\n  const toolbarFilters = useNotificationFilters();\n  const tableColumns = useNotificationsColumns();\n  const rowActions = useNotificationActions({\n    notificationApproval: notificationApproval?.results,\n    notificationApprovalRefresh,\n    notificationStarted: notificationStarted?.results,\n    notificationStartedRefresh,\n    notificationSuccess: notificationSuccess?.results,\n    notificationSuccessRefresh,\n    notificationError: notificationError?.results,\n    notificationErrorRefresh,\n    resourceType,\n    resourceId,\n  });\n  const view = useAwxView<NotificationTemplate>({\n    url: awxAPI`/notification_templates/`,\n    toolbarFilters,\n    tableColumns,\n  });\n\n  usePersistentFilters('inventories');\n\n  return (\n    <PageLayout>\n      <PageTable<NotificationTemplate>\n        id=\"awx-inventory-sources-table\"\n        toolbarFilters={toolbarFilters}\n        tableColumns={tableColumns}\n        rowActions={rowActions}\n        errorStateTitle={t(\n          `Error loading ${\n            resourceToErrorMsg[resourceType as keyof ResourceTypeMapper]\n          } notifications`\n        )}\n        emptyStateTitle={t(\n          `There are currently no notifications added to this ${\n            resourceToErrorMsg[resourceType as keyof ResourceTypeMapper]\n          }.`\n        )}\n        emptyStateDescription={t(\n          'Please contact your organization administrator if there is an issue with your access.'\n        )}\n        emptyStateIcon={CubesIcon}\n        {...view}\n      />\n    </PageLayout>\n  );\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { IToolbarFilter, ToolbarFilterType } from '../../../../../framework';\nimport {\n  useCreatedByToolbarFilter,\n  useDescriptionToolbarFilter,\n  useModifiedByToolbarFilter,\n  useNameToolbarFilter,\n} from '../../../common/awx-toolbar-filters';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { ActionsResponse, OptionsResponse } from '../../../interfaces/OptionsResponse';\nimport { awxAPI } from '../../../common/api/awx-utils';\n\nexport function useNotificationFilters() {\n  const { t } = useTranslation();\n  const nameToolbarFilter = useNameToolbarFilter();\n  const descriptionToolbarFilter = useDescriptionToolbarFilter();\n  const createdByToolbarFilter = useCreatedByToolbarFilter();\n  const modifiedByToolbarFilter = useModifiedByToolbarFilter();\n  const { data } = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/notification_templates/`);\n  const notificationTypes = data?.actions?.GET?.notification_type?.choices?.map(\n    ([value, label]) => {\n      return {\n        label: t(label),\n        value,\n      };\n    }\n  );\n  const toolbarFilters = useMemo<IToolbarFilter[]>(\n    () => [\n      nameToolbarFilter,\n      descriptionToolbarFilter,\n      {\n        key: 'type',\n        label: t('Notification type'),\n        type: ToolbarFilterType.MultiSelect,\n        query: 'notification_type',\n\n        options: notificationTypes ?? [],\n        placeholder: t('Select types'),\n      },\n      createdByToolbarFilter,\n      modifiedByToolbarFilter,\n    ],\n    [\n      nameToolbarFilter,\n      descriptionToolbarFilter,\n      t,\n      createdByToolbarFilter,\n      modifiedByToolbarFilter,\n      notificationTypes,\n    ]\n  );\n  return toolbarFilters;\n}\n","import { useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ITableColumn, usePageNavigate } from '../../../../../framework';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useNameColumn } from '../../../../common/columns';\nimport { NotificationTemplate } from '../../../interfaces/NotificationTemplate';\nimport { capitalizeFirstLetter } from '../../../../../framework/utils/strings';\n\nexport function useNotificationsColumns(options?: {\n  disableSort?: boolean;\n  disableLinks?: boolean;\n}) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const nameClick = useCallback(\n    (notificationTemplate: NotificationTemplate) => {\n      return pageNavigate(AwxRoute.NotificationTemplateDetails, {\n        params: {\n          id: notificationTemplate.id,\n        },\n      });\n    },\n    [pageNavigate]\n  );\n  const nameColumn = useNameColumn({ ...options, onClick: nameClick });\n  const typeColumn = useMemo<ITableColumn<NotificationTemplate>>(\n    () => ({\n      header: t('Type'),\n      type: 'text',\n      value: (notificationTemplate: NotificationTemplate) => {\n        return capitalizeFirstLetter(notificationTemplate.notification_type as string);\n      },\n      card: 'subtitle',\n      list: 'subtitle',\n    }),\n    [t]\n  );\n  const tableColumns = useMemo<ITableColumn<NotificationTemplate>[]>(\n    () => [nameColumn, typeColumn],\n    [nameColumn, typeColumn]\n  );\n  return tableColumns;\n}\n","import { useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { IPageAction, PageActionSelection, PageActionType } from '../../../../../framework';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { NotificationTemplate } from '../../../interfaces/NotificationTemplate';\nimport { postRequest } from '../../../../common/crud/Data';\n\ninterface ToggleNotification {\n  id: number;\n  disassociate?: boolean;\n}\n\ninterface NotificationActionProps {\n  notificationApproval: Array<NotificationTemplate> | undefined;\n  notificationApprovalRefresh: () => undefined;\n  notificationStarted: Array<NotificationTemplate> | undefined;\n  notificationStartedRefresh: () => undefined;\n  notificationSuccess: Array<NotificationTemplate> | undefined;\n  notificationSuccessRefresh: () => undefined;\n  notificationError: Array<NotificationTemplate> | undefined;\n  notificationErrorRefresh: () => undefined;\n  resourceType: string;\n  resourceId: string | undefined;\n}\n\nexport function useNotificationActions({\n  notificationApproval,\n  notificationApprovalRefresh,\n  notificationStarted,\n  notificationStartedRefresh,\n  notificationSuccess,\n  notificationSuccessRefresh,\n  notificationError,\n  notificationErrorRefresh,\n  resourceType,\n  resourceId,\n}: NotificationActionProps) {\n  const { t } = useTranslation();\n\n  const toggleNotification = useCallback(\n    async (id: number, disassociate: boolean, status: string) => {\n      const postData: ToggleNotification = {\n        id,\n        disassociate: !disassociate,\n      };\n      if (disassociate) {\n        delete postData['disassociate'];\n      }\n      await postRequest(\n        awxAPI`/${resourceType}/${resourceId ?? ''}/notification_templates_${status}/`,\n        postData\n      );\n      notificationApprovalRefresh();\n      notificationStartedRefresh();\n      notificationSuccessRefresh();\n      notificationErrorRefresh();\n    },\n    [\n      resourceType,\n      resourceId,\n      notificationApprovalRefresh,\n      notificationStartedRefresh,\n      notificationSuccessRefresh,\n      notificationErrorRefresh,\n    ]\n  );\n\n  const isNotificationDisabled = (\n    notificationTemplate: NotificationTemplate,\n    notifications: Array<NotificationTemplate> = []\n  ) => {\n    for (const notification of notifications) {\n      if (notificationTemplate.id === notification.id) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const rowActions = useMemo<IPageAction<NotificationTemplate>[]>(() => {\n    const createNotificationAction = (\n      notificationType: string,\n      label: string,\n      status: string,\n      notifications?: Array<NotificationTemplate>\n    ): IPageAction<NotificationTemplate> => {\n      return {\n        isPinned: true,\n        ariaLabel: (isEnabled) =>\n          isEnabled\n            ? t(`Click to disable ${notificationType}`)\n            : t(`Click to enable ${notificationType}`),\n        type: PageActionType.Switch,\n        selection: PageActionSelection.Single,\n        labelOff: t(label),\n        label: t(label),\n        onToggle: (notificationTemplate: NotificationTemplate, enable: boolean) =>\n          toggleNotification(notificationTemplate.id, enable, status),\n        isSwitchOn: (notificationTemplate: NotificationTemplate) =>\n          isNotificationDisabled(notificationTemplate, notifications),\n        showPinnedLabel: true,\n        isReversed: true,\n      };\n    };\n    const notificationArray = [\n      createNotificationAction('start', 'Start', 'started', notificationStarted),\n      createNotificationAction('success', 'Success', 'success', notificationSuccess),\n      createNotificationAction('failure', 'Failure', 'error', notificationError),\n    ];\n\n    if (resourceType === 'organizations' || resourceType === 'workflow_job_templates') {\n      notificationArray.unshift(\n        createNotificationAction('approval', 'Approval', 'approvals', notificationApproval)\n      );\n    }\n    return notificationArray;\n  }, [\n    notificationStarted,\n    notificationSuccess,\n    notificationError,\n    resourceType,\n    t,\n    toggleNotification,\n    notificationApproval,\n  ]);\n  return rowActions;\n}\n","import { CubesIcon, ExclamationTriangleIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\nimport { useOutletContext, useParams } from 'react-router-dom';\nimport { PageTable, useGetPageUrl, usePageNavigate } from '../../../../framework';\nimport { usePersistentFilters } from '../../../common/PersistentFilters';\nimport { useOptions } from '../../../common/crud/useOptions';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { useAwxView } from '../../common/useAwxView';\nimport { ActionsResponse, OptionsResponse } from '../../interfaces/OptionsResponse';\nimport { Schedule } from '../../interfaces/Schedule';\nimport { useSchedulesActions } from './hooks/useSchedulesActions';\nimport { useSchedulesColumns } from './hooks/useSchedulesColumns';\nimport { useSchedulesFilter } from './hooks/useSchedulesFilter';\nimport { useScheduleToolbarActions } from './hooks/useSchedulesToolbarActions';\nimport { missingResources } from '../../resources/templates/hooks/useTemplateColumns';\nimport { JobTemplate } from '../../interfaces/JobTemplate';\n\n/**\n * @param {string} createSchedulePageId -  param used to build the create schedule url.\n * @param {string} [sublistEndPoint] - Optional - This is pertinent to only schedules list within a resource\n * - awxAPI/job_templates/:id/schedules\n * - awxAPI/workflow_job_templates/:id/schedules\n * - awxAPI/projects/:id/schedules\n * - awxAPI/inventory_sources/id/schedules\n * - awxAPI/system_job_templates/:id/schedules\n * @param {string} [resourceType] - Optional - This param is used to help persist filters.\n * The only resources that ca have a schedule are:\n * - Job Templates\n * - Workflow Job Templates\n * - Projects\n * - Inventory Sources - Only regular inventory can have an inventory source\n * - Management Jobs aka System Job Templates\n * @param {string} [url] - Optional - If this param exists it will always be awxAPI/schedules/\n * */\n\nexport function SchedulesList(props: {\n  createSchedulePageId: string;\n  sublistEndpoint?: string;\n  url?: string;\n  resourceType?: string;\n}) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const pageUrl = useGetPageUrl();\n  const params = useParams<{ inventory_type?: string; id?: string; source_id?: string }>();\n  const resourceId = params.source_id ?? params.id;\n\n  const compParams = useOutletContext<{ template: JobTemplate }>();\n  const isMissingResource: boolean = compParams?.template\n    ? missingResources(compParams?.template)\n    : false;\n\n  const apiEndPoint: string | undefined = props.sublistEndpoint\n    ? `${props.sublistEndpoint}/${resourceId}/schedules/`\n    : undefined;\n\n  const toolbarFilters = useSchedulesFilter({\n    url: props.url ? props.url : apiEndPoint,\n  });\n  const tableColumns = useSchedulesColumns();\n  const view = useAwxView<Schedule>({\n    url: apiEndPoint ?? awxAPI`/schedules/`,\n    toolbarFilters,\n    tableColumns,\n  });\n  usePersistentFilters(props.resourceType ? `${props.resourceType}-schedules` : 'schedules');\n\n  const { data } = useOptions<OptionsResponse<ActionsResponse>>(apiEndPoint ?? awxAPI`/schedules/`);\n  const canCreateSchedule = Boolean(data && data.actions && data.actions['POST']);\n\n  const toolbarActions = useScheduleToolbarActions(\n    view.unselectItemsAndRefresh,\n    pageUrl(props.createSchedulePageId, { params }),\n    isMissingResource\n  );\n  const rowActions = useSchedulesActions({\n    onScheduleDeleteCompleted: view.unselectItemsAndRefresh,\n    onScheduleToggleCompleted: view.updateItem,\n    sublistEndpoint: apiEndPoint,\n  });\n  return (\n    <PageTable<Schedule>\n      id=\"awx-schedules-table\"\n      toolbarFilters={toolbarFilters}\n      toolbarActions={toolbarActions}\n      tableColumns={tableColumns}\n      rowActions={rowActions}\n      errorStateTitle={t('Error loading schedules')}\n      emptyStateTitle={\n        canCreateSchedule\n          ? isMissingResource\n            ? t('Resources are missing from this template.')\n            : t('No schedules yet')\n          : t('You do not have permission to create a schedule')\n      }\n      emptyStateDescription={\n        canCreateSchedule\n          ? isMissingResource\n            ? undefined\n            : t('Please create a schedule by using the button below.')\n          : t(\n              'Please contact your organization administrator if there is an issue with your access.'\n            )\n      }\n      emptyStateNoDataIcon={\n        canCreateSchedule ? (isMissingResource ? ExclamationTriangleIcon : undefined) : CubesIcon\n      }\n      emptyStateButtonIcon={<PlusCircleIcon />}\n      emptyStateButtonText={\n        canCreateSchedule && !isMissingResource ? t('Create schedule') : undefined\n      }\n      emptyStateButtonClick={\n        canCreateSchedule && !isMissingResource\n          ? () => pageNavigate(props.createSchedulePageId, { params })\n          : undefined\n      }\n      {...view}\n    />\n  );\n}\n","import { awxApiPath } from '../../../common/api/awx-utils';\nimport {\n  useCreatedByToolbarFilter,\n  useModifiedByToolbarFilter,\n} from '../../../common/awx-toolbar-filters';\nimport { useDynamicToolbarFilters } from '../../../common/useDynamicFilters';\n\nexport function useSchedulesFilter({\n  url,\n}: {\n  url?: string;\n} = {}) {\n  const urlPath = url ? url.replace(awxApiPath, '') : '';\n  const optionsPath = urlPath || 'schedules';\n  const createdByToolbarFilter = useCreatedByToolbarFilter();\n  const modifiedByToolbarFilter = useModifiedByToolbarFilter();\n\n  const toolbarFilters = useDynamicToolbarFilters({\n    optionsPath: optionsPath,\n    preSortedKeys: ['name', 'id', 'created-by', 'modified-by'],\n    preFilledValueKeys: {\n      name: {\n        apiPath: optionsPath,\n      },\n      id: {\n        apiPath: optionsPath,\n      },\n    },\n    additionalFilters: [createdByToolbarFilter, modifiedByToolbarFilter],\n  });\n  return toolbarFilters;\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport { PlusCircleIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { IPageAction, PageActionSelection, PageActionType } from '../../../../../framework';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { ActionsResponse, OptionsResponse } from '../../../interfaces/OptionsResponse';\nimport { Schedule } from '../../../interfaces/Schedule';\nimport { useDeleteSchedules } from './useDeleteSchedules';\nimport { cannotDeleteResources } from '../../../../common/utils/RBAChelpers';\n\nexport function useScheduleToolbarActions(\n  onComplete: (schedules: Schedule[]) => void,\n  createUrl: string,\n  isMissingResource?: boolean\n) {\n  const { t } = useTranslation();\n  const { data } = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/schedules/`);\n  const canCreateSchedule = Boolean(data && data.actions && data.actions['POST']);\n\n  const deleteSchedules = useDeleteSchedules(onComplete);\n\n  const ScheduleToolbarActions = useMemo<IPageAction<Schedule>[]>(\n    () => [\n      {\n        type: PageActionType.Link,\n        selection: PageActionSelection.None,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        icon: PlusCircleIcon,\n        label: t('Create schedule'),\n        isDisabled: canCreateSchedule\n          ? isMissingResource\n            ? t('Resources are missing from this template.')\n            : undefined\n          : t(\n              'You do not have permission to create a schedule. Please contact your organization administrator if there is an issue with your access.'\n            ),\n        href: createUrl,\n      },\n\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: TrashIcon,\n        label: t('Delete schedules'),\n        onClick: deleteSchedules,\n        isDisabled: (schedules) => cannotDeleteResources(schedules, t),\n\n        isDanger: true,\n      },\n    ],\n    [canCreateSchedule, createUrl, deleteSchedules, t, isMissingResource]\n  );\n\n  return ScheduleToolbarActions;\n}\n","import { useParams } from 'react-router-dom';\nimport { usePersistentFilters } from '../../../../common/PersistentFilters';\nimport { JobsList } from '../../../views/jobs/JobsList';\nimport { useHostsJobsColumns } from '../../inventories/inventoryHostsPage/hooks/useHostsJobsColumns';\n\nexport function InventoryJobs() {\n  usePersistentFilters('inventories');\n  const jobsColumns = useHostsJobsColumns();\n  const { id = '' } = useParams<{ id: string }>();\n  const queryParams = {\n    not__launch_type: 'sync',\n    or__adhoccommand__inventory: id,\n    or__inventoryupdate__inventory_source__inventory: id,\n    or__job__inventory: id,\n    or__workflowjob__inventory: id,\n  };\n  return <JobsList queryParams={queryParams} columns={jobsColumns} />;\n}\n","import { LabelGroup } from '@patternfly/react-core';\nimport { useWatch } from 'react-hook-form';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport {\n  PageDetail,\n  PageDetails,\n  PageFormCheckbox,\n  PageFormDataEditor,\n  PageFormSelect,\n  PageFormSwitch,\n  PageFormTextInput,\n  useGetPageUrl,\n} from '../../../../../framework';\nimport { PageDetailCodeEditor } from '../../../../../framework/PageDetails/PageDetailCodeEditor';\nimport { PageFormSection } from '../../../../../framework/PageForm/Utils/PageFormSection';\nimport { usePageWizard } from '../../../../../framework/PageWizard/PageWizardProvider';\nimport { useGet, useGetItem } from '../../../../common/crud/useGet';\nimport { PageFormCredentialSelect } from '../../../access/credentials/components/PageFormCredentialSelect';\nimport { PageFormSelectExecutionEnvironment } from '../../../administration/execution-environments/components/PageFormSelectExecutionEnvironment';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { CredentialLabel } from '../../../common/CredentialLabel';\nimport { Credential } from '../../../interfaces/Credential';\nimport { RunCommandWizard } from '../../../interfaces/Inventory';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { ExecutionEnvironment } from '../../../interfaces/ExecutionEnvironment';\n\nexport function RunCommandDetailStep() {\n  const { t } = useTranslation();\n  const module = useWatch<RunCommandWizard>({\n    name: 'module_name',\n  });\n  const moduleOptions = [\n    { label: t('command'), value: 'command' },\n    { label: t('shell'), value: 'shell' },\n    { label: t('yum'), value: 'yum' },\n    { label: t('apt'), value: 'apt' },\n    { label: t('apt_key'), value: 'apt_key' },\n    { label: t('apt_repository'), value: 'apt_repository' },\n    { label: t('apt_rpm'), value: 'apt_rpm' },\n    { label: t('service'), value: 'service' },\n    { label: t('group'), value: 'group' },\n    { label: t('user'), value: 'user' },\n    { label: t('mount'), value: 'mount' },\n    { label: t('ping'), value: 'ping' },\n    { label: t('selinux'), value: 'selinux' },\n    { label: t('setup'), value: 'setup' },\n    { label: t('win_ping'), value: 'win_ping' },\n    { label: t('win_service'), value: 'win_service' },\n    { label: t('win_updates'), value: 'win_updates' },\n    { label: t('win_group'), value: 'win_group' },\n    { label: t('win_user'), value: 'win_user' },\n  ];\n\n  const verbosityOptions = [\n    { label: t('0 (Normal)'), value: '0' },\n    { label: t('1 (Verbose)'), value: '1' },\n    { label: t('2 (More Verbose)'), value: '2' },\n    { label: t('3 (Debug)'), value: '3' },\n    { label: t('4 (Connection Debug)'), value: '4' },\n    { label: t('5 (WinRM Debug)'), value: '5' },\n  ];\n\n  return (\n    <PageFormSection singleColumn>\n      <PageFormSelect\n        name=\"module_name\"\n        placeholderText={t('Select a module')}\n        isRequired\n        label={t('Module')}\n        options={moduleOptions}\n        labelHelpTitle={t('Module')}\n        labelHelp={t(`These are the modules that AWX supports running commands against.`)}\n      />\n      <PageFormTextInput\n        name=\"module_args\"\n        placeholder={t('Enter arguments')}\n        isRequired={module === 'command' || module === 'shell'}\n        label={t('Arguments')}\n        labelHelpTitle={t('Arguments')}\n        labelHelp={t(`These arguments are used with the specified module.`)}\n      />\n      <PageFormSelect\n        name=\"verbosity\"\n        label={t('Verbosity')}\n        options={verbosityOptions}\n        labelHelpTitle={t('Verbosity')}\n        labelHelp={t(\n          `These are the verbosity levels for standard out of the command run that are supported.`\n        )}\n      />\n      <PageFormTextInput\n        name=\"limit\"\n        label={t('Limit')}\n        labelHelpTitle={t('Limit')}\n        labelHelp={\n          <>\n            <Trans>\n              The pattern used to target hosts in the inventory. Leaving the field blank, all, and *\n              will all target all hosts in the inventory. You can find more information about\n              Ansible&aposs host patterns{' '}\n            </Trans>\n            <Trans>\n              <Link\n                to=\"https://docs.ansible.com/ansible/latest/user_guide/intro_patterns.html\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                here\n              </Link>\n            </Trans>\n          </>\n        }\n      />\n      <PageFormTextInput\n        name=\"forks\"\n        label={t('Forks')}\n        type=\"number\"\n        min={0}\n        labelHelpTitle={t('Forks')}\n        labelHelp={\n          <>\n            <Trans>\n              The number of parallel or simultaneous processes to use while executing the playbook.\n              Inputting no value will use the default value from the ansible configuration file. You\n              can find more information{' '}\n            </Trans>\n            <Trans>\n              <Link\n                to=\"https://docs.ansible.com/ansible/latest/installation_guide/intro_configuration.html#the-ansible-configuration-file\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                here\n              </Link>\n            </Trans>\n          </>\n        }\n      />\n      <PageFormSwitch\n        name=\"diff_mode\"\n        label={t('Show changes')}\n        labelHelpTitle={t('Show changes')}\n        labelHelp={t(\n          `If enabled, show the changes made by Ansible tasks, where supported. This is equivalent to Ansible’s --diff mode.`\n        )}\n      />\n      <PageFormCheckbox\n        name=\"become_enabled\"\n        label={t('Privilege escalation')}\n        labelHelpTitle={t('Privilege escalation')}\n        labelHelp={t(\n          `Enables creation of a provisioning callback URL. Using the URL a host can contact AWX and request a configuration update using this job template --become option to the  ansible command`\n        )}\n      />\n      <PageFormDataEditor\n        labelHelpTitle={t('Extra Variables')}\n        labelHelp={t(`Optional extra variables to be applied to run command`)}\n        format=\"yaml\"\n        label={t('Extra Variables')}\n        name=\"extra_vars\"\n      />\n    </PageFormSection>\n  );\n}\n\nexport function RunCommandExecutionEnvionment(props: { orgId: string }) {\n  const { t } = useTranslation();\n  return (\n    <PageFormSection>\n      <PageFormSelectExecutionEnvironment\n        name=\"execution_environment\"\n        label={t('Execution Environment')}\n        organizationId={Number(props.orgId) ?? ''}\n      />\n    </PageFormSection>\n  );\n}\n\nexport function RunCommandCredentialStep() {\n  const { t } = useTranslation();\n  return (\n    <PageFormSection>\n      <PageFormCredentialSelect\n        name=\"credential\"\n        label={t('Credential')}\n        labelHelp={t(\n          'Select the credential you want to use when accessing the remote hosts to run the command. Choose the credential containing the username and SSH key or password that Ansible will need to log into the remote hosts.'\n        )}\n        queryParams={{\n          credential_type__namespace: 'ssh',\n        }}\n        isRequired\n      />\n    </PageFormSection>\n  );\n}\n\nexport function RunCommandReviewStep() {\n  const { t } = useTranslation();\n  const { wizardData } = usePageWizard() as {\n    wizardData: RunCommandWizard;\n  };\n  const getPageUrl = useGetPageUrl();\n  const {\n    module_name,\n    module_args,\n    verbosity,\n    limit,\n    forks,\n    diff_mode,\n    become_enabled,\n    extra_vars,\n    execution_environment,\n    credential: credentialId,\n  } = wizardData;\n  const { data: credential } = useGet<Credential>(awxAPI`/credentials/${credentialId.toString()}/`);\n\n  const { data: fetchedEE } = useGetItem<ExecutionEnvironment>(\n    awxAPI`/execution_environments/`,\n    execution_environment\n  );\n\n  return (\n    <>\n      <PageFormSection title={t('Review')} singleColumn>\n        <PageDetails disablePadding>\n          <PageDetail label={t('Module')}>{module_name}</PageDetail>\n          <PageDetail label={t('Arguments')}>{module_args}</PageDetail>\n          <PageDetail label={t('Verbosity')}>{verbosity}</PageDetail>\n          <PageDetail label={t('Limit')}>{limit}</PageDetail>\n          <PageDetail label={t('Forks')}>{forks}</PageDetail>\n          <PageDetail label={t('Show changes')}>{diff_mode ? t('On') : t('Off')}</PageDetail>\n          <PageDetail label={t('Privilege escalation')}>\n            {become_enabled ? t('On') : t('Off')}\n          </PageDetail>\n          <PageDetailCodeEditor label={t('Extra vars')} value={extra_vars} />\n          {credential ? (\n            <PageDetail label={t('Credentials')} isEmpty={!credential}>\n              <LabelGroup>\n                <CredentialLabel\n                  credential={{\n                    name: credential.name,\n                    id: parseInt(credential.id.toString()),\n                    kind: 'ssh',\n                    cloud: false,\n                    description: credential.name,\n                  }}\n                  key={credential.id}\n                />\n              </LabelGroup>\n            </PageDetail>\n          ) : null}\n          <PageDetail label={t('Execution environment')}>\n            <Link\n              to={getPageUrl(AwxRoute.ExecutionEnvironmentDetails, {\n                params: { id: String(execution_environment) },\n              })}\n            >\n              {fetchedEE?.name}\n            </Link>\n          </PageDetail>\n        </PageDetails>\n      </PageFormSection>\n    </>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport {\n  PageHeader,\n  PageLayout,\n  PageWizard,\n  PageWizardStep,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { awxErrorAdapter } from '../../common/adapters/awxErrorAdapter';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport {\n  RunCommandCredentialStep,\n  RunCommandDetailStep,\n  RunCommandExecutionEnvionment,\n  RunCommandReviewStep,\n} from './components/RunCommandSteps';\nimport { Inventory, RunCommandWizard } from '../../interfaces/Inventory';\nimport { postRequest } from '../../../common/crud/Data';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { useGet } from '../../../common/crud/useGet';\nimport { useURLSearchParams } from '../../../../framework/components/useURLSearchParams';\n\nexport function InventoryRunCommand() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const { id } = useParams();\n  const [searchParams] = useURLSearchParams();\n  let limit = searchParams.get('limit') || 'all';\n  const storage = searchParams.get('storage');\n\n  if (storage) {\n    limit = localStorage.getItem('runCommandActionSelectedItems') || limit;\n  }\n\n  const pageNavigate = usePageNavigate();\n  const { data: inventory } = useGet<Inventory>(awxAPI`/inventories/${id as string}/`);\n\n  const navigate = useNavigate();\n\n  const onCancel = () => navigate(-1);\n\n  const handleSubmit = async (data: RunCommandWizard) => {\n    const eeId = data.execution_environment;\n    const runCommandObj = {\n      ...data,\n      verbosity: data.verbosity,\n      forks: data.forks,\n      credential: data.credential,\n      execution_environment: eeId,\n    };\n    const result: { id: string } = await postRequest(\n      awxAPI`/inventories/${id ?? ''}/ad_hoc_commands/`,\n      runCommandObj\n    );\n    pageNavigate(AwxRoute.JobOutput, { params: { id: result.id, job_type: 'command' } });\n  };\n\n  const steps: PageWizardStep[] = [\n    {\n      id: 'details',\n      label: t('Details'),\n      inputs: <RunCommandDetailStep />,\n    },\n    {\n      id: 'execution_environment',\n      label: t('Execution Environment'),\n      inputs: (\n        <RunCommandExecutionEnvionment\n          orgId={inventory?.summary_fields.organization.id.toString() ?? ''}\n        />\n      ),\n    },\n    {\n      id: 'credential',\n      label: t('Credential'),\n      inputs: <RunCommandCredentialStep />,\n    },\n    {\n      id: 'review',\n      label: t('Review'),\n      inputs: <RunCommandReviewStep />,\n    },\n  ];\n\n  const initialValues = {\n    details: {\n      module_name: '',\n      module_args: '',\n      verbosity: 0,\n      limit,\n      forks: 0,\n      diff_mode: false,\n      become_enabled: false,\n      extra_vars: '',\n    },\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Run command')}\n        breadcrumbs={[\n          { label: t('Inventories'), to: getPageUrl(AwxRoute.Inventories) },\n          { label: t('Run command') },\n        ]}\n      />\n      <PageWizard<RunCommandWizard>\n        steps={steps}\n        singleColumn={false}\n        onCancel={onCancel}\n        defaultValue={initialValues}\n        onSubmit={handleSubmit}\n        errorAdapter={awxErrorAdapter}\n      />\n    </PageLayout>\n  );\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport {\n  PageHeader,\n  PageLayout,\n  PageWizard,\n  PageWizardStep,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { useGetPageUrl } from '../../../../../framework/PageNavigation/useGetPageUrl';\nimport { dateToInputDateTime } from '../../../../../framework/utils/dateTimeHelpers';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { RuleFields, ScheduleFormWizard, schedulePageUrl } from '../types';\nimport { awxErrorAdapter } from '../../../common/adapters/awxErrorAdapter';\nimport { RulesStep } from './RulesStep';\nimport { RRuleSet, rrulestr } from 'rrule';\nimport { ExceptionsStep } from './ExceptionsStep';\nimport { SurveyStep } from '../../../common/SurveyStep';\nimport { NodePromptsStep as PromptsStep } from '../../../resources/templates/WorkflowVisualizer/wizard/NodePromptsStep';\nimport { WizardFormValues } from '../../../resources/templates/WorkflowVisualizer/types';\nimport { shouldHideOtherStep } from '../../../resources/templates/WorkflowVisualizer/wizard/helpers';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { Schedule } from '../../../interfaces/Schedule';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { RULES_DEFAULT_VALUES } from './constants';\nimport { ScheduleSelectStep } from './ScheduleSelectStep';\nimport { ScheduleReviewStep } from './ScheduleReviewStep';\nimport { StandardizedFormData } from './ScheduleAddWizard';\nimport { useProcessSchedule } from '../hooks/useProcessSchedules';\nimport { useGetScheduleUrl } from '../hooks/useGetScheduleUrl';\nimport { RequestError } from '../../../../common/crud/RequestError';\nimport { postRequest } from '../../../../common/crud/Data';\nimport { useSetRRuleItemToRuleSet } from '../hooks/useSetRRuleItemToRuleSet';\n\n/**\n *\n * @param {string} resourceEndPoint - This is passed down to the <ScheduleSelectStep/> so it can fetch the resource\n * to which the schedule belongs\n */\nexport function ScheduleEditWizard(props: { resourceEndPoint: string }) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const navigate = useNavigate();\n  const pageNavigate = usePageNavigate();\n  const processSchedules = useProcessSchedule();\n  const getScheduleUrl = useGetScheduleUrl();\n  const getRuleSet = useSetRRuleItemToRuleSet();\n  const params = useParams<{ id?: string; schedule_id?: string }>();\n\n  const { data: schedule } = useGetItem<Schedule>(awxAPI`/schedules/`, params.schedule_id);\n\n  const [startDate, time]: string[] = dateToInputDateTime(\n    schedule?.dtstart as string,\n    schedule?.timezone\n  );\n\n  const handleSubmit = async (formValues: ScheduleFormWizard) => {\n    const { rules, exceptions, ...rest } = formValues;\n    const ruleset = getRuleSet(rules, exceptions);\n\n    const data: StandardizedFormData = {\n      rrule: ruleset.toString().split('\\n').join(' '),\n      ...rest,\n    };\n\n    try {\n      const {\n        schedule,\n      }: {\n        schedule: Schedule;\n      } = await processSchedules(data);\n      const pageUrl = getScheduleUrl('details', schedule) as schedulePageUrl;\n      return pageNavigate(pageUrl.pageId, { params: pageUrl.params });\n    } catch (error) {\n      const { fieldErrors } = awxErrorAdapter(error);\n      const missingResource = fieldErrors.find((err) => err?.name === 'resources_needed_to_start');\n      if (missingResource) {\n        const errors = {\n          __all__: [missingResource.message],\n        };\n        throw new RequestError('', '', 400, '', errors);\n      }\n    }\n  };\n\n  const onCancel = () => navigate(-1);\n\n  const steps: PageWizardStep[] = useMemo(() => {\n    return [\n      {\n        id: 'details',\n        label: t('Details'),\n        inputs: <ScheduleSelectStep {...props} />,\n      },\n      {\n        id: 'promptStep',\n        label: t('Prompts'),\n        inputs: <PromptsStep />,\n        hidden: (wizardData: Partial<ScheduleFormWizard>) => {\n          const { launch_config, resource, schedule_type } = wizardData;\n          if (\n            (schedule_type === 'workflow_job' || schedule_type === 'job') &&\n            resource &&\n            launch_config\n          ) {\n            return shouldHideOtherStep(launch_config);\n          }\n          return true;\n        },\n      },\n      {\n        id: 'survey',\n        label: t('Survey'),\n        inputs: <SurveyStep />,\n        hidden: (wizardData: Partial<WizardFormValues>) => {\n          if (Object.keys(wizardData).length === 0) {\n            return true;\n          }\n          if (wizardData.launch_config?.survey_enabled) {\n            return false;\n          }\n          return true;\n        },\n      },\n      {\n        id: 'rules',\n        label: t('Rules'),\n        inputs: <RulesStep />,\n        validate: (formData: Partial<RuleFields>) => {\n          if (!formData?.rules?.length) {\n            const errors = {\n              __all__: [t('Schedules must have at least one rule.')],\n            };\n\n            throw new RequestError('', '', 400, '', errors);\n          }\n        },\n      },\n      {\n        id: 'exceptions',\n        label: t('Exceptions'),\n        inputs: <ExceptionsStep />,\n      },\n      {\n        id: 'review',\n        label: t('Review'),\n        inputs: <ScheduleReviewStep />,\n        validate: async (formData: object, wizardData: Partial<ScheduleFormWizard>) => {\n          if (!wizardData?.rules?.length) {\n            const errors = {\n              __all__: [t('Schedules must have at least one rule.')],\n            };\n\n            throw new RequestError('', '', 400, '', errors);\n          }\n\n          const ruleset = getRuleSet(wizardData.rules, wizardData.exceptions ?? []);\n\n          const { utc, local } = await postRequest<{ utc: string[]; local: string[] }>(\n            awxAPI`/schedules/preview/`,\n            {\n              rrule: ruleset.toString().split('\\n').join(' '),\n            }\n          );\n          if (!local.length && !utc.length) {\n            const errors = {\n              __all__: [\n                t(\n                  'This schedule will never run.  If you have defined exceptions it is likely that the exceptions cancel out all the rules defined in the rules step.'\n                ),\n              ],\n            };\n\n            throw new RequestError('', '', 400, '', errors);\n          }\n        },\n      },\n    ];\n  }, [getRuleSet, t, props]);\n\n  if (!schedule) return;\n  const ruleSet = rrulestr(schedule.rrule, { forceset: true }) as RRuleSet;\n  const rules = ruleSet.rrules().map((rule, i) => ({ rule, id: i + 1 }));\n  const exceptions = ruleSet.exrules().map((rule, i) => ({ rule, id: i + 1 }));\n\n  const currentValues = {\n    details: {\n      name: schedule?.name,\n      description: schedule?.description,\n      schedule_type: schedule?.summary_fields.unified_job_template.unified_job_type,\n      resource: schedule?.summary_fields.unified_job_template,\n      startDateTime: { date: startDate, time: time },\n      timezone: schedule?.timezone,\n      schedule_days_to_keep: schedule.extra_data.days,\n    },\n    promptStep: {\n      prompt: {},\n    },\n    rules: { ...RULES_DEFAULT_VALUES, rules },\n    exceptions: { ...RULES_DEFAULT_VALUES, exceptions },\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={\n          schedule?.name\n            ? t('Edit {{scheduleName}}', { scheduleName: schedule?.name })\n            : t('Schedule')\n        }\n        breadcrumbs={[\n          { label: t('Schedules'), to: getPageUrl(AwxRoute.Schedules) },\n          {\n            label: schedule?.name\n              ? t('Edit {{scheduleName}}', { scheduleName: schedule?.name })\n              : t('Schedule'),\n          },\n        ]}\n      />\n      <PageWizard<ScheduleFormWizard>\n        steps={steps}\n        singleColumn={false}\n        onCancel={onCancel}\n        defaultValue={currentValues}\n        onSubmit={handleSubmit}\n        errorAdapter={awxErrorAdapter}\n      />\n    </PageLayout>\n  );\n}\n","import { useParams } from 'react-router-dom';\nimport { TeamAccess } from '../../../../common/access/components/TeamAccess';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\nexport function InventoryTeamAccess() {\n  const params = useParams<{ id: string }>();\n  return (\n    <TeamAccess\n      service=\"awx\"\n      id={params.id || ''}\n      type={'inventory'}\n      addRolesRoute={AwxRoute.InventoryAddTeams as string}\n    />\n  );\n}\n","import { useParams } from 'react-router-dom';\nimport { UserAccess } from '../../../../common/access/components/UserAccess';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\nexport function InventoryUserAccess() {\n  const params = useParams<{ id: string }>();\n  return (\n    <UserAccess\n      service=\"awx\"\n      id={params.id || ''}\n      type={'inventory'}\n      addRolesRoute={AwxRoute.InventoryAddUsers}\n    />\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageHeader,\n  PageLayout,\n  PageWizard,\n  PageWizardStep,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { RoleAssignmentsReviewStep } from '../../../../common/access/RolesWizard/steps/RoleAssignmentsReviewStep';\nimport { postRequest } from '../../../../common/crud/Data';\nimport { useGet } from '../../../../common/crud/useGet';\nimport { AwxSelectRolesStep } from '../../../access/common/AwxRolesWizardSteps/AwxSelectRolesStep';\nimport { AwxSelectUsersStep } from '../../../access/common/AwxRolesWizardSteps/AwxSelectUsersStep';\nimport { awxErrorAdapter } from '../../../common/adapters/awxErrorAdapter';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkActionDialog } from '../../../common/useAwxBulkActionDialog';\nimport { AwxRbacRole } from '../../../interfaces/AwxRbacRole';\nimport { Inventory } from '../../../interfaces/Inventory';\nimport { AwxUser } from '../../../interfaces/User';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\ninterface WizardFormValues {\n  users: AwxUser[];\n  awxRoles: AwxRbacRole[];\n}\n\ninterface UserRolePair {\n  user: AwxUser;\n  role: AwxRbacRole;\n}\n\nexport function InventoryAddUsers() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const params = useParams<{ id: string }>();\n\n  const { data: inventory, isLoading } = useGet<Inventory>(\n    awxAPI`/inventories/${params.id ?? ''}/`\n  );\n  const userProgressDialog = useAwxBulkActionDialog<UserRolePair>();\n  const pageNavigate = usePageNavigate();\n\n  if (isLoading || !inventory) return <LoadingPage />;\n\n  const steps: PageWizardStep[] = [\n    {\n      id: 'users',\n      label: t('Select user(s)'),\n      inputs: (\n        <AwxSelectUsersStep\n          descriptionForUsersSelection={t(\n            'Select the user(s) that you want to give access to {{inventoryName}}.',\n            {\n              inventoryName: inventory?.name,\n            }\n          )}\n        />\n      ),\n      validate: (formData, _) => {\n        const { users } = formData as { users: AwxUser[] };\n        if (!users?.length) {\n          throw new Error(t('Select at least one user.'));\n        }\n      },\n    },\n    {\n      id: 'awxRoles',\n      label: t('Select roles to apply'),\n      inputs: (\n        <AwxSelectRolesStep\n          contentType=\"inventory\"\n          fieldNameForPreviousStep=\"users\"\n          descriptionForRoleSelection={t('Choose roles to apply to {{inventoryName}}.', {\n            inventoryName: inventory?.name,\n          })}\n        />\n      ),\n      validate: (formData, _) => {\n        const { awxRoles } = formData as { awxRoles: AwxRbacRole[] };\n        if (!awxRoles?.length) {\n          throw new Error(t('Select at least one role.'));\n        }\n      },\n    },\n    {\n      id: 'review',\n      label: t('Review'),\n      inputs: <RoleAssignmentsReviewStep />,\n    },\n  ];\n\n  const onSubmit = (data: WizardFormValues) => {\n    const { users, awxRoles } = data;\n    const items: UserRolePair[] = [];\n    for (const user of users) {\n      for (const role of awxRoles) {\n        items.push({ user, role });\n      }\n    }\n    return new Promise<void>((resolve) => {\n      userProgressDialog({\n        title: t('Add roles'),\n        keyFn: ({ user, role }) => `${user.id}_${role.id}`,\n        items,\n        actionColumns: [\n          { header: t('User'), cell: ({ user }) => user.username },\n          { header: t('Role'), cell: ({ role }) => role.name },\n        ],\n        actionFn: ({ user, role }) =>\n          postRequest(awxAPI`/role_user_assignments/`, {\n            user: user.id,\n            role_definition: role.id,\n            content_type: 'awx.inventory',\n            object_id: inventory.id,\n          }),\n        onComplete: () => {\n          resolve();\n        },\n        onClose: () => {\n          pageNavigate(AwxRoute.InventoryUserAccess, {\n            params: { id: inventory.id.toString() },\n          });\n        },\n      });\n    });\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Add roles')}\n        breadcrumbs={[\n          { label: t('Inventories'), to: getPageUrl(AwxRoute.Inventories) },\n          {\n            label: inventory?.name,\n            to: getPageUrl(AwxRoute.InventoryDetails, { params: { id: inventory?.id } }),\n          },\n          {\n            label: t('User Access'),\n            to: getPageUrl(AwxRoute.InventoryUserAccess, { params: { id: inventory?.id } }),\n          },\n          { label: t('Add roles') },\n        ]}\n      />\n      <PageWizard<WizardFormValues>\n        errorAdapter={awxErrorAdapter}\n        steps={steps}\n        onSubmit={onSubmit}\n        disableGrid\n        onCancel={() => {\n          pageNavigate(AwxRoute.InventoryUserAccess, { params: { id: inventory?.id } });\n        }}\n      />\n    </PageLayout>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageHeader,\n  PageLayout,\n  PageWizard,\n  PageWizardStep,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { RoleAssignmentsReviewStep } from '../../../../common/access/RolesWizard/steps/RoleAssignmentsReviewStep';\nimport { postRequest } from '../../../../common/crud/Data';\nimport { useGet } from '../../../../common/crud/useGet';\nimport { AwxSelectRolesStep } from '../../../access/common/AwxRolesWizardSteps/AwxSelectRolesStep';\nimport { AwxSelectTeamsStep } from '../../../access/common/AwxRolesWizardSteps/AwxSelectTeamsStep';\nimport { awxErrorAdapter } from '../../../common/adapters/awxErrorAdapter';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkActionDialog } from '../../../common/useAwxBulkActionDialog';\nimport { AwxRbacRole } from '../../../interfaces/AwxRbacRole';\nimport { Inventory } from '../../../interfaces/Inventory';\nimport { Team } from '../../../interfaces/Team';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\ninterface WizardFormValues {\n  teams: Team[];\n  awxRoles: AwxRbacRole[];\n}\n\ninterface TeamRolePair {\n  team: Team;\n  role: AwxRbacRole;\n}\n\nexport function InventoryAddTeams() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const params = useParams<{ id: string }>();\n  const pageNavigate = usePageNavigate();\n  const { data: inventory, isLoading } = useGet<Inventory>(\n    awxAPI`/inventories/${params.id ?? ''}/`\n  );\n  const userProgressDialog = useAwxBulkActionDialog<TeamRolePair>();\n\n  if (isLoading || !inventory) return <LoadingPage />;\n\n  const steps: PageWizardStep[] = [\n    {\n      id: 'teams',\n      label: t('Select team(s)'),\n      inputs: (\n        <AwxSelectTeamsStep\n          descriptionForTeamsSelection={t(\n            'Select the team(s) that you want to give access to {{inventoryName}}.',\n            {\n              inventoryName: inventory?.name,\n            }\n          )}\n        />\n      ),\n      validate: (formData, _) => {\n        const { teams } = formData as { teams: Team[] };\n        if (!teams?.length) {\n          throw new Error(t('Select at least one team.'));\n        }\n      },\n    },\n    {\n      id: 'roles',\n      label: t('Select roles to apply'),\n      inputs: (\n        <AwxSelectRolesStep\n          contentType=\"inventory\"\n          fieldNameForPreviousStep=\"teams\"\n          descriptionForRoleSelection={t('Choose roles to apply to {{inventoryName}}.', {\n            inventoryName: inventory?.name,\n          })}\n        />\n      ),\n      validate: (formData, _) => {\n        const { awxRoles } = formData as { awxRoles: AwxRbacRole[] };\n        if (!awxRoles?.length) {\n          throw new Error(t('Select at least one role.'));\n        }\n      },\n    },\n    {\n      id: 'review',\n      label: t('Review'),\n      inputs: <RoleAssignmentsReviewStep />,\n    },\n  ];\n\n  const onSubmit = async (data: WizardFormValues) => {\n    const { teams, awxRoles } = data;\n    const items: TeamRolePair[] = [];\n    for (const team of teams) {\n      for (const role of awxRoles) {\n        items.push({ team, role });\n      }\n    }\n    return new Promise<void>((resolve) => {\n      userProgressDialog({\n        title: t('Add roles'),\n        keyFn: ({ team, role }) => `${team.id}_${role.id}`,\n        items,\n        actionColumns: [\n          { header: t('Team'), cell: ({ team }) => team.name },\n          { header: t('Role'), cell: ({ role }) => role.name },\n        ],\n        actionFn: ({ team, role }) =>\n          postRequest(awxAPI`/role_team_assignments/`, {\n            team: team.id,\n            role_definition: role.id,\n            content_type: 'awx.inventory',\n            object_id: inventory.id,\n          }),\n        onComplete: () => {\n          resolve();\n        },\n        onClose: () => {\n          pageNavigate(AwxRoute.InventoryTeamAccess, {\n            params: { id: inventory.id.toString() },\n          });\n        },\n      });\n    });\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Add roles')}\n        breadcrumbs={[\n          { label: t('Inventories'), to: getPageUrl(AwxRoute.Inventories) },\n          {\n            label: inventory?.name,\n            to: getPageUrl(AwxRoute.InventoryDetails, { params: { id: inventory?.id } }),\n          },\n          {\n            label: t('Team Access'),\n            to: getPageUrl(AwxRoute.InventoryTeamAccess, { params: { id: inventory?.id } }),\n          },\n          { label: t('Add roles') },\n        ]}\n      />\n      <PageWizard<WizardFormValues>\n        errorAdapter={awxErrorAdapter}\n        steps={steps}\n        onSubmit={onSubmit}\n        disableGrid\n        onCancel={() => {\n          pageNavigate(AwxRoute.InventoryTeamAccess, { params: { id: inventory?.id } });\n        }}\n      />\n    </PageLayout>\n  );\n}\n","import { Label, LabelGroup } from '@patternfly/react-core';\nimport { Link, useOutletContext } from 'react-router-dom';\nimport {\n  DateTimeCell,\n  PageDetail,\n  PageDetails,\n  PageDetailsFromColumns,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { useJobsColumns } from './hooks/useJobsColumns';\nimport { PageDetailCodeEditor } from '../../../../framework/PageDetails/PageDetailCodeEditor';\nimport { useTranslation } from 'react-i18next';\nimport { StatusCell } from '../../../common/Status';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { LastModifiedPageDetail } from '../../../common/LastModifiedPageDetail';\nimport { Job } from '../../interfaces/Job';\nimport { useVerbosityString } from '../../common/useVerbosityString';\nimport { UnifiedJob } from '../../interfaces/UnifiedJob';\n\nexport function JobDetails() {\n  const { t } = useTranslation();\n  const columns = useJobsColumns();\n  const getPageUrl = useGetPageUrl();\n  const pageNavigate = usePageNavigate();\n  const { job } = useOutletContext<{ job: Job }>();\n\n  const verbosity = useVerbosityString(job.verbosity || 0);\n  const timeoutDefaultText = t`No timeout specified`;\n\n  return (\n    <PageDetails>\n      <PageDetailsFromColumns columns={columns} item={job as UnifiedJob} />\n      <PageDetail isEmpty={!job.playbook} label={t('Playbook')}>\n        {job.playbook}\n      </PageDetail>\n      <PageDetail\n        isEmpty={!job.summary_fields.project_update?.status}\n        label={t('Project update status')}\n      >\n        <StatusCell\n          status={job.summary_fields.project_update?.status}\n          to={`/jobs/project_update/${job.summary_fields.project_update?.id}`}\n        />\n      </PageDetail>\n      <PageDetail isEmpty={!job.scm_revision} label={t('Revision')}>\n        {job.scm_revision}\n      </PageDetail>\n      <PageDetail isEmpty={!job.controller_node} label={t('Controller node')}>\n        {job.controller_node}\n      </PageDetail>\n      <PageDetail\n        isEmpty={!job.execution_node}\n        label={t('Execution node')}\n        helpText={t('The execution node used to run the job.')}\n      >\n        {job.execution_node}\n      </PageDetail>\n      <PageDetail\n        helpText={t('Instance group used on this job run.')}\n        isEmpty={!job.summary_fields.instance_group?.is_container_group}\n        label={t('Instance group')}\n      >\n        <Link\n          to={getPageUrl(AwxRoute.InstanceGroupDetails, {\n            params: {\n              id: job.summary_fields?.instance_group?.id,\n            },\n          })}\n        >\n          {job.summary_fields?.instance_group?.name}\n        </Link>\n      </PageDetail>\n      <PageDetail\n        isEmpty={!job.summary_fields.instance_group?.is_container_group}\n        label={t('Container group')}\n      >\n        <Link\n          to={getPageUrl(AwxRoute.InstanceGroupDetails, {\n            params: {\n              id: job.summary_fields?.instance_group?.id,\n            },\n          })}\n        >\n          {job.summary_fields?.instance_group?.name}\n        </Link>\n      </PageDetail>\n      <PageDetail\n        label={t('Forks')}\n        helpText={t(\n          'The number of parallel or simultaneous processes to use while executing the playbook. An empty value, or a value less than 1 will use the Ansible default which is usually 5. The default number of forks can be overwritten with a change to ansible.cfg. Refer to the Ansible documentation for details about the configuration file.'\n        )}\n      >\n        {job.forks}\n      </PageDetail>\n      <PageDetail\n        label={t('Timeout')}\n        helpText={t(\n          'The amount of time (in seconds) to run before the job is canceled. Defaults to 0 for no job timeout.'\n        )}\n      >\n        {job.timeout === 0 ? timeoutDefaultText : job.timeout}\n      </PageDetail>\n      <PageDetail\n        label={t('Verbosity')}\n        helpText={t('Control the level of output Ansible will produce as the playbook executes.')}\n      >\n        {verbosity}\n      </PageDetail>\n      <PageDetail\n        label={t('Job tags')}\n        helpText={t('Job tags used during this job.')}\n        isEmpty={!job.job_tags}\n      >\n        <LabelGroup>\n          {job.job_tags?.split(',')?.map((tag) => <Label key={tag}>{tag}</Label>)}\n        </LabelGroup>\n      </PageDetail>\n      <PageDetail\n        helpText={t('Skip tags used during this job.')}\n        label={t('Skip tags')}\n        isEmpty={!job.skip_tags}\n      >\n        <LabelGroup>\n          {job.skip_tags?.split(',')?.map((tag) => <Label key={tag}>{tag}</Label>)}\n        </LabelGroup>\n      </PageDetail>\n      <PageDetail label={t('Module arguments')} isEmpty={!job.module_args}>\n        {job.module_args}\n      </PageDetail>\n      <PageDetail isEmpty={!job.summary_fields?.created_by?.username} label={t('Created')}>\n        <DateTimeCell\n          value={job.created}\n          author={job.summary_fields.created_by?.username}\n          onClick={() =>\n            pageNavigate(AwxRoute.UserDetails, {\n              params: { id: job.summary_fields?.created_by?.id },\n            })\n          }\n        />\n      </PageDetail>\n      <LastModifiedPageDetail\n        value={job.modified}\n        author={job.summary_fields?.modified_by?.username}\n        onClick={() =>\n          pageNavigate(AwxRoute.UserDetails, {\n            params: { id: job.summary_fields?.modified_by?.id },\n          })\n        }\n      />\n      <PageDetailCodeEditor\n        label={t`Extra variables`}\n        helpText={t(\n          'Extra variables used on this job.  This is the -e or --extra-vars command line parameter for ansible-playbook. Provide key/value pairs using either YAML or JSON. Refer to the documentation for example syntax.'\n        )}\n        showCopyToClipboard\n        data-cy=\"inventory-source-detail-variables\"\n        value={job.extra_vars ?? ''}\n      />\n    </PageDetails>\n  );\n}\n","import { useState, useMemo } from 'react';\nimport {\n  MenuToggle,\n  MenuToggleElement,\n  Select,\n  SelectOption,\n  SelectGroup,\n  SelectList,\n} from '@patternfly/react-core';\nimport { CheckCircleIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { Link, useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { stringIsUUID } from '../../common/util/strings';\nimport type { WorkflowJobNode } from '../../interfaces/WorkflowNode';\nimport { useGetPageUrl } from '../../../../framework';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { jobPaths } from './WorkflowOutput/WorkflowOutputNode';\n\ninterface WorkflowOutputNavigationProps {\n  workflowNodes: WorkflowJobNode[];\n}\n\nexport function WorkflowOutputNavigation(props: WorkflowOutputNavigationProps) {\n  const { t } = useTranslation();\n  const { id } = useParams<{ id: string }>();\n  const { workflowNodes } = props;\n  const getPageUrl = useGetPageUrl();\n\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [selected, setSelected] = useState<string | undefined>();\n  const [filteredNodes, setFilteredNodes] = useState<WorkflowJobNode[]>(workflowNodes);\n\n  const totalResults = workflowNodes.length || 0;\n\n  const statuses: Record<string, string[]> = useMemo(\n    () => ({\n      failed: ['error', 'failed'],\n      successful: ['successful'],\n    }),\n    []\n  );\n\n  const flatStatuses = useMemo(\n    () => Object.values(statuses).reduce((acc, cur) => [...acc, ...cur], []),\n    [statuses]\n  );\n\n  const onToggleClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const onSelect = (event: React.MouseEvent | undefined, v: string | number | undefined) => {\n    if (typeof v === 'undefined') return;\n\n    const value = v.toString();\n\n    if (value === selected) {\n      setSelected(undefined);\n      setFilteredNodes(workflowNodes);\n    } else {\n      setSelected(value);\n\n      if (!flatStatuses.includes(value)) return;\n\n      setFilteredNodes(\n        workflowNodes.filter(\n          (node) =>\n            node.summary_fields?.job?.status &&\n            statuses[value].includes(node.summary_fields?.job?.status) &&\n            node.job?.toString() !== id\n        )\n      );\n    }\n  };\n\n  const Toggle = (toggleRef: React.Ref<MenuToggleElement>) => (\n    <MenuToggle\n      ref={toggleRef}\n      onClick={onToggleClick}\n      isExpanded={isOpen}\n      style={\n        {\n          width: '180px',\n        } as React.CSSProperties\n      }\n    >\n      {t(`Workflow Job 1/{{totalResults}}`, { totalResults })}\n    </MenuToggle>\n  );\n\n  return (\n    <Select\n      id=\"select-workflow-navigation\"\n      isOpen={isOpen}\n      selected={selected}\n      onSelect={onSelect}\n      onOpenChange={(isOpen) => setIsOpen(isOpen)}\n      toggle={Toggle}\n      shouldFocusToggleOnSelect\n    >\n      <SelectGroup label={t`Workflow statuses`} key=\"workflow-status\" data-cy=\"workflow-status\">\n        <SelectList>\n          <SelectOption\n            value=\"failed\"\n            key=\"failed\"\n            icon={<ExclamationCircleIcon />}\n            description={t`Filter by failed jobs`}\n          >\n            {t`Failed`}\n          </SelectOption>\n          <SelectOption\n            value={'successful'}\n            icon={<CheckCircleIcon />}\n            key=\"successful\"\n            description={t`Filter by successful jobs`}\n          >\n            {t`Successful`}\n          </SelectOption>\n        </SelectList>\n      </SelectGroup>\n      <SelectGroup label={t`Workflow nodes`} key=\"workflow-nodes\" data-cy=\"workflow-nodes\">\n        <SelectList>\n          {filteredNodes.map((node: WorkflowJobNode) => (\n            <SelectOption\n              key={node.id}\n              to={getPageUrl(AwxRoute.JobOutput, {\n                params: {\n                  job_type: node.summary_fields.job?.type\n                    ? jobPaths[node.summary_fields.job?.type]\n                    : '',\n                  id: node.summary_fields.job?.id,\n                },\n              })}\n              component={Link}\n              value={node.summary_fields?.job?.name}\n            >\n              {stringIsUUID(node.identifier) ? node.summary_fields?.job?.name : node.identifier}\n            </SelectOption>\n          ))}\n        </SelectList>\n      </SelectGroup>\n    </Select>\n  );\n}\n","import { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { PageActions, PageHeader, useGetPageUrl, usePageNavigate } from '../../../../framework';\nimport { useJobHeaderActions } from './hooks/useJobHeaderActions';\nimport { Job } from '../../interfaces/Job';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { useTranslation } from 'react-i18next';\nimport { useGetJob } from './JobPage';\nimport { useParams } from 'react-router-dom';\nimport { WorkflowOutputNavigation } from './WorkflowOutputNavigation';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport { useGet } from '../../../common/crud/useGet';\nimport { AwxItemsResponse } from '../../common/AwxItemsResponse';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { WorkflowJobNode } from '../../interfaces/WorkflowNode';\n\nexport function JobHeader() {\n  const { t } = useTranslation();\n  const { id } = useParams<{ id: string }>();\n  const pageNavigate = usePageNavigate();\n  const getPageUrl = useGetPageUrl();\n  const params = useParams<{ id: string; job_type: string }>();\n  const { job } = useGetJob(params.id, params.job_type);\n\n  const wfJobId = job?.summary_fields?.source_workflow_job?.id;\n  const { data: workflowNodes } = useGet<AwxItemsResponse<WorkflowJobNode>>(\n    wfJobId ? awxAPI`/workflow_jobs/${wfJobId.toString()}/workflow_nodes/` : ''\n  );\n\n  const relevantNodes =\n    workflowNodes?.results.filter(\n      ({ job, summary_fields }) =>\n        job && job.toString() !== id && summary_fields?.job?.type !== 'workflow_approval'\n    ) ?? [];\n\n  const actions = useJobHeaderActions(() => pageNavigate(AwxRoute.Jobs));\n  return (\n    <PageHeader\n      title={job?.name}\n      breadcrumbs={[{ label: t('Jobs'), to: getPageUrl(AwxRoute.Jobs) }, { label: job?.name }]}\n      headerActions={\n        <Flex>\n          {relevantNodes?.length > 0 && (\n            <FlexItem>\n              <WorkflowOutputNavigation workflowNodes={relevantNodes} />\n            </FlexItem>\n          )}\n          <FlexItem>\n            <PageActions<Job>\n              actions={actions}\n              position={DropdownPosition.right}\n              selectedItem={job}\n            />\n          </FlexItem>\n        </Flex>\n      }\n    />\n  );\n}\n","import { downloadTextFile } from '../../../../../framework/utils/download-file';\nimport { requestCommon } from '../../../../common/crud/requestCommon';\nimport { createRequestError } from '../../../../common/crud/RequestError';\nimport { UnifiedJob } from '../../../interfaces/UnifiedJob';\n\nexport function useDownloadJobOutput() {\n  const downloadJobOutput = async (job: UnifiedJob) => {\n    const url = `${job.related.stdout}?format=txt_download`;\n    const result = await requestCommon({ url: url, method: 'GET' });\n    if (!result.ok) {\n      throw await createRequestError(result);\n    }\n    const content = await result.text();\n    downloadTextFile(job.name, content);\n  };\n\n  return downloadJobOutput;\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport { LoadingPage, PageLayout } from '../../../../framework';\nimport { PageRoutedTabs } from '../../../common/PageRoutedTabs';\nimport { useGet } from '../../../common/crud/useGet';\nimport { AwxError } from '../../common/AwxError';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { Job } from '../../interfaces/Job';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { JobHeader } from './JobHeader';\n\nexport function JobPage() {\n  const { t } = useTranslation();\n  const params = useParams<{ id: string; job_type: string }>();\n  const { job, isLoading, error, refreshJob } = useGetJob(params.id, params.job_type);\n\n  if (error) return <AwxError error={error} handleRefresh={refreshJob} />;\n  if (!job || isLoading) return <LoadingPage breadcrumbs tabs />;\n\n  return (\n    <PageLayout>\n      <JobHeader />\n      <PageRoutedTabs\n        backTab={{\n          label: t('Back to Jobs'),\n          page: AwxRoute.Jobs,\n          persistentFilterKey: 'jobs',\n        }}\n        tabs={[\n          { label: t('Output'), page: AwxRoute.JobOutput },\n          { label: t('Details'), page: AwxRoute.JobDetails },\n        ]}\n        params={params}\n        componentParams={{ job }}\n      />\n    </PageLayout>\n  );\n}\n\nexport function useGetJob(id?: string, type?: string) {\n  const apiPaths: { [key: string]: string } = {\n    project: 'project_updates',\n    inventory: 'inventory_updates',\n    playbook: 'jobs',\n    command: 'ad_hoc_commands',\n    management: 'system_jobs',\n    workflow: 'workflow_jobs',\n  };\n  const path = type ? apiPaths[type] : 'jobs';\n  const {\n    data: job,\n    refresh: refreshJob,\n    isLoading,\n    error,\n  } = useGet<Job>(id ? awxAPI`/${path}/${id}/` : '');\n  return { job, refreshJob, isLoading, error };\n}\n","import { Badge, Tooltip } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\nimport {\n  pfDanger,\n  pfInfo,\n  pfSuccess,\n  pfUnreachable,\n  pfWarning,\n} from '../../../../../framework/components/pfcolors';\nimport type { HostStatusCounts } from '../../../interfaces/Job';\nimport { WorkflowNode } from '../../../interfaces/WorkflowNode';\nimport { JobStatus } from './util';\n\nconst BarWrapper = styled.div`\n  background-color: var(--pf-v5-global--Color--light-300);\n  display: flex;\n  min-height: 7px;\n  margin-top: 16px;\n  margin-bottom: 8px;\n  width: 100%;\n`;\n\nconst BarSegment = styled.div<{ count: number }>`\n  background-color: ${(props) => props.color || 'inherit'};\n  flex-grow: ${(props: { count: number }) => props.count || 0};\n`;\nBarSegment.displayName = 'BarSegment';\n\nconst TooltipContent = styled.div`\n  align-items: center;\n  display: flex;\n\n  span.pf-v5-c-badge {\n    margin-left: 10px;\n  }\n`;\n\nconst Legend = styled.div`\n  display: flex;\n  gap: 16px;\n  justify-content: end;\n  font-size: var(--pf-v5-global--FontSize--sm);\n`;\nconst LegendBox = styled.span`\n  display: inline-block;\n  width: 10px;\n  height: 10px;\n  background-color: ${(props) => props.color};\n  margin-right: 8px;\n`;\n\ninterface StatusProps {\n  color: string;\n  label: string;\n}\n\ntype CommonStatusType = Record<'dark', StatusProps>;\ntype HostStatusCountType = 'ok' | 'skipped' | 'changed' | 'failures' | 'dark';\ntype HostStatusType = Record<HostStatusCountType, StatusProps>;\n\ntype WorkflowStatusType = Record<JobStatus, StatusProps>;\ntype WFNodesStatusProps = Partial<Record<JobStatus, number>>;\n\nexport function WorkflowNodesStatusBar(props: { nodes: WorkflowNode[] }) {\n  const { t } = useTranslation();\n\n  const workflowStatus: WorkflowStatusType = {\n    successful: {\n      color: pfSuccess,\n      label: t`Success`,\n    },\n    canceled: {\n      color: pfWarning,\n      label: t`Canceled`,\n    },\n    new: {\n      color: pfInfo,\n      label: t`New`,\n    },\n    pending: {\n      color: pfInfo,\n      label: t`Pending`,\n    },\n    waiting: {\n      color: pfInfo,\n      label: t`Waiting`,\n    },\n    running: {\n      color: pfInfo,\n      label: t`Running`,\n    },\n    error: {\n      color: pfDanger,\n      label: t`Error`,\n    },\n    failed: {\n      color: pfDanger,\n      label: t`Failed`,\n    },\n  };\n\n  const segments: WFNodesStatusProps = {};\n\n  props.nodes.map((node) => {\n    if (!node?.summary_fields?.job?.status) {\n      return;\n    }\n\n    const nodeStatus = node.summary_fields.job.status as JobStatus;\n\n    const nodeVal = segments[nodeStatus];\n    segments[nodeStatus] = nodeStatus in segments && nodeVal ? nodeVal + 1 : 1;\n  });\n\n  return <StatusBar counts={segments} status={workflowStatus} />;\n}\n\nexport function HostStatusBar(props: { counts: HostStatusCounts }) {\n  const { t } = useTranslation();\n\n  const hostStatus: HostStatusType = {\n    ok: {\n      color: pfSuccess,\n      label: t`Success`,\n    },\n    skipped: {\n      color: pfInfo,\n      label: t`Skipped`,\n    },\n    changed: {\n      color: pfWarning,\n      label: t`Changed`,\n    },\n    failures: {\n      color: pfDanger,\n      label: t`Failed`,\n    },\n    dark: {\n      color: pfUnreachable,\n      label: t`Unreachable`,\n    },\n  };\n\n  return <StatusBar counts={props.counts} status={hostStatus} />;\n}\n\ninterface StatusBarProps<T extends object, K> {\n  counts: T;\n  status: K;\n}\n\nfunction StatusBar<T extends object, K extends object>(props: StatusBarProps<T, K>) {\n  const { t } = useTranslation();\n  const { counts, status } = props;\n  const noData = Object.keys(counts).length === 0;\n  const totalCounts = Object.values(counts).reduce(\n    (sum: number, count: number) => sum + count,\n    0\n  ) as number;\n\n  const barSegments = Object.keys(status).map((key) => {\n    const count = (counts[key as keyof T] as number) || 0;\n    const jobStatus =\n      (status[key as keyof K] as StatusProps) ?? (status as CommonStatusType)['dark'];\n    return (\n      <Tooltip\n        key={key}\n        content={\n          <TooltipContent>\n            {jobStatus.label}\n            <Badge isRead>{count}</Badge>\n          </TooltipContent>\n        }\n      >\n        <BarSegment key={key} color={jobStatus.color} count={count} />\n      </Tooltip>\n    );\n  });\n\n  if (noData) {\n    return (\n      <BarWrapper data-cy=\"status-bar\">\n        <Tooltip content={t`Host status information for this job is unavailable.`}>\n          <BarSegment count={1} />\n        </Tooltip>\n      </BarWrapper>\n    );\n  }\n\n  return (\n    <>\n      <BarWrapper data-cy=\"status-bar\">{barSegments}</BarWrapper>\n      <Legend>\n        {Object.keys(counts).map((key) => (\n          <LegendItem\n            key={key}\n            color={\n              (status[key as keyof K] as StatusProps)?.color ??\n              (status as CommonStatusType)['dark'].color\n            }\n            label={\n              (status[key as keyof K] as StatusProps)?.label ??\n              (status as CommonStatusType)['dark'].label\n            }\n            percent={(((counts[key as keyof T] as number) ?? 0) / totalCounts) * 100}\n          />\n        ))}\n      </Legend>\n    </>\n  );\n}\n\nfunction LegendItem(props: { color: string; label: string; percent: number }) {\n  const { color, label, percent } = props;\n\n  return (\n    <div>\n      <LegendBox color={color} />\n      {label} {Math.round(percent)}%\n    </div>\n  );\n}\n","import { Skeleton } from '@patternfly/react-core';\nimport { useEffect } from 'react';\nimport './JobOutput.css';\n\nexport function JobOutputLoadingRow(props: {\n  counter: number;\n  queryJobOutputEvent: (counter: number) => void;\n}) {\n  useEffect(() => {\n    props.queryJobOutputEvent(props.counter);\n  }, [props]);\n\n  return (\n    <div className=\"output-grid-row\">\n      <div className=\"expand-column\"></div>\n      <div className=\"stdout-column\">\n        <Skeleton>{`Loading ${props.counter}`}</Skeleton>\n      </div>\n    </div>\n  );\n}\n","import Anser from 'anser';\nimport './Ansi.css';\n\n/** Ansi displays input with ansi colors using patternfly theme colors */\nexport function Ansi(props: { input: string }) {\n  const data = Anser.ansiToJson(props.input, ansiOptions);\n  return (\n    <>\n      {data.map((entry, index) => (\n        <span key={index} className={entry.fg ? `${entry.fg}-fg` : undefined}>\n          {entry.content}\n        </span>\n      ))}\n    </>\n  );\n}\n\nconst ansiOptions = { json: true, remove_empty: true, use_classes: true };\n","import styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  border-radius: 1em;\n  background-color: white;\n  font-size: 0.6rem;\n  width: max-content;\n  padding: 0em 1em;\n  margin-left: auto;\n  margin-right: -0.3em;\n  color: black;\n`;\n\nexport function JobEventEllipsis() {\n  return <Wrapper>...</Wrapper>;\n}\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { Label } from '@patternfly/react-core';\nimport { AngleRightIcon } from '@patternfly/react-icons';\nimport useResizeObserver from '@react-hook/resize-observer';\nimport { Dispatch, SetStateAction, useRef } from 'react';\nimport styled from 'styled-components';\nimport { Ansi } from '../../../../common/Ansi';\nimport { JobEvent } from '../../../interfaces/JobEvent';\nimport './JobOutput.css';\nimport { ICollapsed } from './JobOutputEvents';\nimport { JobEventEllipsis } from './JobEventEllipsis';\n\nconst LineNumberGutter = styled.div`\n  position: sticky;\n  left: 0px;\n  display: flex;\n  gap: 8px;\n  padding-block: 2px;\n  padding-inline: 8px;\n  border-right: 1px solid var(--pf-v5-global--BorderColor--100);\n  background-color: var(--pf-v5-global--BackgroundColor--200);\n  z-index: 1;\n\n  .pf-v5-theme-dark & {\n    background-color: var(--pf-v5-global--BackgroundColor--100);\n  }\n`;\nconst ExpandButton = styled.button`\n  background-color: unset;\n  border: 0;\n  line-height: 1;\n  align-self: start;\n`;\nconst LineNumber = styled.div`\n  flex: 1;\n  text-align: right;\n`;\nconst StdOutColumn = styled.div`\n  padding-block: 2px;\n  padding-inline: 16px;\n`;\n\nexport function JobOutputRow(props: {\n  index: number;\n  row: IJobOutputRow;\n  collapsed: ICollapsed;\n  setCollapsed: (uuid: string, counter: number, collapsed: boolean) => void;\n  setHeight: (index: number, height: number) => void;\n  canCollapseEvents?: boolean;\n  onClick: Dispatch<SetStateAction<IJobOutputRow | null>>;\n}) {\n  const { index, row, collapsed, setCollapsed, canCollapseEvents } = props;\n  const ref = useRef<HTMLTableRowElement>(null);\n  useResizeObserver(ref, () => props.setHeight(index, ref.current?.clientHeight ?? 0));\n  const isCollapsed = collapsed[row.uuid ?? ''] === true;\n  const isClickableRow = !row.canCollapse && row.taskUuid !== '' && row.taskUuid !== row.uuid;\n\n  return (\n    <div\n      style={{ cursor: isClickableRow ? 'pointer' : 'auto' }}\n      ref={ref}\n      className=\"output-grid-row\"\n      role=\"button\"\n      tabIndex={0}\n      onClick={() => {\n        props.onClick(row);\n      }}\n    >\n      <LineNumberGutter>\n        {canCollapseEvents && row.canCollapse && (\n          <ExpandButton onClick={() => setCollapsed(row.uuid, row.counter, !isCollapsed)}>\n            <AngleRightIcon\n              style={{\n                transform: isCollapsed ? 'rotate(0deg)' : 'rotate(90deg)',\n                transition: 'transform',\n              }}\n            />\n          </ExpandButton>\n        )}\n\n        <LineNumber>\n          {row.line}\n          {row.canCollapse && isCollapsed && <JobEventEllipsis />}\n        </LineNumber>\n      </LineNumberGutter>\n      <StdOutColumn>\n        <Ansi input={row.stdout} />\n        {row.isHeaderLine && row.canCollapse && (\n          <>\n            &nbsp; <Label isCompact>{new Date(row.created ?? '').toLocaleTimeString()}</Label>\n          </>\n        )}\n      </StdOutColumn>\n    </div>\n  );\n}\n\nexport interface IJobOutputRow {\n  counter: number;\n  uuid: string;\n  playUuid: string;\n  taskUuid: string;\n  line: number | undefined;\n  stdout: string;\n  eventLine: number;\n  canCollapse: boolean;\n  isHeaderLine: boolean;\n  created?: string;\n}\n\nexport function jobEventToRows(jobEvent: JobEvent): IJobOutputRow[] {\n  const playUuid = (jobEvent.event_data as { play_uuid?: string }).play_uuid ?? '';\n  const taskUuid = (jobEvent.event_data as { task_uuid?: string }).task_uuid ?? '';\n  if (!jobEvent.counter) return [];\n  if (!jobEvent.stdout) return [];\n\n  const lines = jobEvent.stdout.split('\\r\\n');\n  let canCollapse = false;\n\n  switch (jobEvent.event) {\n    case 'playbook_on_play_start':\n    case 'playbook_on_task_start':\n    case 'playbook_on_stats':\n      canCollapse = playUuid !== '' || taskUuid !== '';\n  }\n\n  let isHeaderLine = false;\n  let foundHeaderLine = false;\n  return lines.map((stdout, eventLine) => {\n    if (jobEvent.parent_uuid) {\n      if (stdout) {\n        isHeaderLine = !foundHeaderLine;\n        foundHeaderLine = true;\n      } else {\n        isHeaderLine = false;\n      }\n    }\n    const jobOutputRow: IJobOutputRow = {\n      line: jobEvent.start_line! + eventLine,\n      counter: jobEvent.counter,\n      stdout,\n      uuid: jobEvent.uuid ?? '',\n      playUuid: playUuid ?? '',\n      taskUuid: taskUuid ?? '',\n      eventLine,\n      canCollapse: canCollapse && isHeaderLine,\n      isHeaderLine,\n      created: jobEvent.created,\n    };\n    return jobOutputRow;\n  });\n}\n\nexport function tracebackToRows(output: string): IJobOutputRow[] {\n  const lines = output.split('\\n');\n  return lines.map((stdout, eventLine) => {\n    const jobOutputRow: IJobOutputRow = {\n      line: undefined,\n      counter: 0,\n      stdout,\n      uuid: '',\n      playUuid: '',\n      taskUuid: '',\n      eventLine,\n      canCollapse: false,\n      isHeaderLine: false,\n      created: undefined,\n    };\n    return jobOutputRow;\n  });\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button } from '@patternfly/react-core';\nimport {\n  AngleDoubleUpIcon,\n  AngleDoubleDownIcon,\n  AngleUpIcon,\n  AngleDownIcon,\n  AngleRightIcon,\n} from '@patternfly/react-icons';\nimport styled from 'styled-components';\n\nconst ControllsWrapper = styled.div`\n  display: flex;\n  height: 35px;\n  border: 1px solid #d7d7d7;\n  width: 100%;\n  justify-content: space-between;\n`;\n\nconst ScrollWrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`;\nconst ExpandCollapseWrapper = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  & > Button {\n    padding-left: 8px;\n  }\n`;\n\ninterface IPageControlsProps {\n  onScrollFirst: () => void;\n  onScrollLast: () => void;\n  onScrollNext: () => void;\n  onScrollPrevious: () => void;\n  toggleExpandCollapseAll: () => void;\n  isAllCollapsed: boolean;\n  isFlatMode: boolean;\n  isTemplateJob: boolean;\n}\n\nexport function PageControls(props: IPageControlsProps) {\n  const {\n    onScrollFirst,\n    onScrollLast,\n    onScrollNext,\n    onScrollPrevious,\n    toggleExpandCollapseAll,\n    isAllCollapsed,\n    isFlatMode,\n    isTemplateJob,\n  } = props;\n  const { t } = useTranslation();\n\n  return (\n    <ControllsWrapper>\n      <ExpandCollapseWrapper>\n        {!isFlatMode && isTemplateJob && (\n          <Button\n            aria-label={isAllCollapsed ? t`Expand job events` : t`Collapse all job events`}\n            variant=\"plain\"\n            type=\"button\"\n            onClick={toggleExpandCollapseAll}\n          >\n            {isAllCollapsed ? <AngleRightIcon /> : <AngleDownIcon />}\n          </Button>\n        )}\n      </ExpandCollapseWrapper>\n      <ScrollWrapper>\n        <Button\n          ouiaId=\"job-output-scroll-previous-button\"\n          aria-label={t`Scroll previous`}\n          onClick={onScrollPrevious}\n          variant=\"plain\"\n        >\n          <AngleUpIcon />\n        </Button>\n        <Button\n          ouiaId=\"job-output-scroll-next-button\"\n          aria-label={t`Scroll next`}\n          onClick={onScrollNext}\n          variant=\"plain\"\n        >\n          <AngleDownIcon />\n        </Button>\n        <Button\n          ouiaId=\"job-output-scroll-first-button\"\n          aria-label={t`Scroll first`}\n          onClick={onScrollFirst}\n          variant=\"plain\"\n        >\n          <AngleDoubleUpIcon />\n        </Button>\n        <Button\n          ouiaId=\"job-output-scroll-last-button\"\n          aria-label={t`Scroll last`}\n          onClick={onScrollLast}\n          variant=\"plain\"\n        >\n          <AngleDoubleDownIcon />\n        </Button>\n      </ScrollWrapper>\n    </ControllsWrapper>\n  );\n}\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport type { IFilterState, IToolbarFilter } from '../../../../../framework';\nimport { requestGet } from '../../../../common/crud/Data';\nimport { AwxItemsResponse } from '../../../common/AwxItemsResponse';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxWebSocketSubscription } from '../../../common/useAwxWebSocket';\nimport { Job } from '../../../interfaces/Job';\nimport { JobEvent } from '../../../interfaces/JobEvent';\n\ntype WebSocketMessage = {\n  group_name?: string;\n  type?: string;\n  status?: string;\n  inventory_id?: number;\n  unified_job_id?: number;\n};\n\nconst WS_EVENTS_BATCH_SIZE = 15;\nconst runningJobTypes: string[] = ['new', 'pending', 'waiting', 'running'];\n\nexport function useJobOutput(\n  job: Job,\n  reloadJob: () => void,\n  toolbarFilters: IToolbarFilter[],\n  filterState: IFilterState,\n  pageSize: number\n) {\n  const isQuerying = useRef({ querying: false });\n  const missingEvents = useRef({} as { [key: number]: boolean });\n  const queryTimeout = useRef(undefined as ReturnType<typeof setTimeout> | undefined);\n  const [jobEventCount, setJobEventCount] = useState(1);\n  const [jobEvents, setJobEvents] = useState<Record<number, JobEvent>>({});\n\n  const getJobOutputEvent = useCallback(\n    (counter: number) => {\n      return jobEvents[counter];\n    },\n    [jobEvents]\n  );\n\n  const isFiltered = Object.keys(filterState).length > 0;\n  const isJobRunning = !job.status || runningJobTypes.includes(job.status);\n\n  const fetchEvents = useCallback(\n    (qsParts: string[]) => {\n      const eventsSlug = job.type === 'job' ? 'job_events' : 'events';\n      isQuerying.current.querying = true;\n\n      void requestGet<AwxItemsResponse<JobEvent>>(\n        awxAPI`/${job.type}s/${job.id.toString()}/${eventsSlug}/`.concat(`?${qsParts.join('&')}`)\n      )\n        .then((itemsResponse) => {\n          if (!isJobRunning) {\n            setJobEventCount(itemsResponse.count);\n          }\n          setJobEvents((jobEvents) => {\n            jobEvents = { ...jobEvents };\n            let i = Object.keys(jobEvents).length + 1;\n            for (const jobEvent of itemsResponse.results) {\n              if (isFiltered) {\n                jobEvents[i] = jobEvent;\n                i++;\n              } else {\n                jobEvents[jobEvent.counter] = jobEvent;\n              }\n            }\n            return jobEvents;\n          });\n        })\n        .catch()\n        .finally(() => {\n          isQuerying.current.querying = false;\n        });\n    },\n    [job.id, job.type, isJobRunning, isFiltered]\n  );\n\n  const queryJobOutputEvent = useCallback(\n    (counter: number) => {\n      const jobEvent = jobEvents[counter + 1];\n      if (jobEvent || isQuerying.current.querying) {\n        return jobEvent;\n      }\n      if (isJobRunning) {\n        missingEvents.current[counter + 1] = true;\n        if (!queryTimeout.current) {\n          queryTimeout.current = setTimeout(() => {\n            const eventCounters = Object.keys(missingEvents.current).filter((counter) => {\n              return !jobEvents[Number(counter)];\n            });\n            if (eventCounters.length > 0) {\n              const qsParts = ['order_by=counter', `counter__in=${eventCounters.join(',')}`];\n              fetchEvents(qsParts);\n            }\n            missingEvents.current = {};\n            queryTimeout.current = undefined;\n          }, 2500);\n        }\n        return jobEvent;\n      }\n\n      const page = Math.floor((counter + 1) / pageSize) + 1;\n      const filterString = getFiltersQueryString(toolbarFilters, filterState);\n      const qsParts = ['order_by=counter', `page=${page}`, `page_size=${pageSize}`];\n      if (filterString) {\n        qsParts.push(filterString);\n      }\n      fetchEvents(qsParts);\n      return jobEvent;\n    },\n    [jobEvents, pageSize, filterState, toolbarFilters, isJobRunning, fetchEvents]\n  );\n\n  const batchedEvents = useRef([] as JobEvent[]);\n  const batchTimeout = useRef(undefined as ReturnType<typeof setTimeout> | undefined);\n  const addBatchedEvents = useCallback(() => {\n    if (isFiltered) {\n      return;\n    }\n    const maxCounter = batchedEvents.current.reduce(\n      (max, event) => Math.max(max, event.counter),\n      jobEventCount\n    );\n    setJobEvents((jobEvents) => {\n      batchedEvents.current.forEach((message: JobEvent) => {\n        jobEvents[message.counter] = message;\n      });\n      batchedEvents.current = [];\n      return jobEvents;\n    });\n    setJobEventCount(maxCounter);\n  }, [isFiltered, jobEventCount]);\n\n  const eventGroup = `${job.type}_events`;\n  const handleWebSocketMessage = useCallback(\n    (message?: WebSocketMessage) => {\n      if (message?.group_name === eventGroup) {\n        const jobEvent = message as JobEvent;\n        batchedEvents.current.push(jobEvent);\n        clearTimeout(batchTimeout.current);\n        if (batchedEvents.current.length >= WS_EVENTS_BATCH_SIZE) {\n          addBatchedEvents();\n        } else {\n          batchTimeout.current = setTimeout(addBatchedEvents, 500);\n        }\n      }\n      if (message?.group_name === 'jobs' && message?.unified_job_id === job.id && message?.status) {\n        reloadJob();\n      }\n    },\n    [addBatchedEvents, eventGroup, reloadJob, job.id]\n  );\n  useAwxWebSocketSubscription(\n    {\n      control: ['limit_reached_1'],\n      jobs: ['summary', 'status_changed'],\n      [eventGroup]: [job.id],\n    },\n    handleWebSocketMessage as (message: unknown) => void\n  );\n\n  useEffect(() => {\n    setJobEventCount(1);\n    setJobEvents({});\n  }, [filterState]);\n\n  return { jobEventCount, getJobOutputEvent, queryJobOutputEvent, jobEvents };\n}\n\nfunction getFiltersQueryString(toolbarFilters: IToolbarFilter[], filterState: IFilterState) {\n  if (!filterState) {\n    return '';\n  }\n  const parts = [];\n  for (const key in filterState) {\n    const toolbarFilter = toolbarFilters?.find((filter) => filter.key === key);\n    if (toolbarFilter) {\n      const values = filterState[key];\n      if (values && values.length > 0) {\n        if (values.length > 1) {\n          parts.push(values.map((value) => `or__${toolbarFilter.query}=${value}`).join('&'));\n        } else {\n          parts.push(`${toolbarFilter.query}=${values.join(',')}`);\n        }\n      }\n    }\n  }\n  return parts.join('&');\n}\n","import { JobEvent } from '../../../interfaces/JobEvent';\n\nexport type JobStatus =\n  | 'new'\n  | 'pending'\n  | 'waiting'\n  | 'running'\n  | 'successful'\n  | 'failed'\n  | 'error'\n  | 'canceled';\n\nconst runningJobTypes: string[] = ['new', 'pending', 'waiting', 'running'];\n\nexport function isJobRunning(jobStatus?: JobStatus) {\n  return !jobStatus || runningJobTypes.includes(jobStatus);\n}\n\nexport function isHostEvent(jobEvent: JobEvent) {\n  const { event, event_data, host, type } = jobEvent;\n  let isHost;\n\n  if (typeof host === 'number' || (event_data && event_data.res)) {\n    isHost = true;\n  } else if (type === 'project_update_event' && event !== 'runner_on_skipped' && event_data?.host) {\n    isHost = true;\n  } else {\n    isHost = false;\n  }\n  return isHost;\n}\n","import { Modal, Tab, TabTitleText, Tabs } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { PageDetail, PageDetails } from '../../../../../framework';\nimport { StatusCell } from '../../../../common/Status';\n\nimport { PageDetailCodeEditor } from '../../../../../framework/PageDetails/PageDetailCodeEditor';\nimport { EmptyStateNoData } from '../../../../../framework/components/EmptyStateNoData';\nimport { JobEvent } from '../../../interfaces/JobEvent';\nimport { useState } from 'react';\n\nconst processCodeEditorValue = (value: JobEvent) => {\n  let codeEditorValue;\n\n  if (!value.event_data?.res) {\n    codeEditorValue = '';\n  } else if (typeof value.event_data?.res === 'string') {\n    codeEditorValue = value.event_data?.res;\n  } else if (Array.isArray(value.event_data?.res)) {\n    codeEditorValue = value.event_data?.res.join(' ');\n  } else {\n    codeEditorValue = value.event_data?.res;\n  }\n  return codeEditorValue;\n};\n\nconst getStdOutValue = (hostEvent: JobEvent) => {\n  const taskAction = hostEvent?.event_data?.task_action;\n  const res = hostEvent?.event_data?.res;\n\n  let stdOut = '';\n  if (taskAction === 'debug' && res?.result?.stdout) {\n    stdOut = res.result.stdout as string;\n  } else if (taskAction === 'yum' && Array.isArray(res?.results)) {\n    stdOut = res.results.join('\\n');\n  } else if (res?.stdout) {\n    stdOut = Array.isArray(res.stdout) ? res.stdout.join(' ') : (res.stdout as string);\n  }\n  return stdOut;\n};\n\nexport function HostEventModal(props: {\n  onClose: () => void;\n  hostEvent: JobEvent;\n  isOpen: boolean;\n}) {\n  const { onClose, hostEvent, isOpen = false } = props;\n  const { t } = useTranslation();\n  const [activeTabKey, setActiveTabKey] = useState<number>(0);\n\n  const handleTabClick = (tabIndex: number) => {\n    setActiveTabKey(tabIndex);\n  };\n\n  const jsonObj = processCodeEditorValue(hostEvent);\n  const stdErr: string | undefined = hostEvent?.event_data?.res?.stderr;\n  const stdOut: string = getStdOutValue(hostEvent);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={t`Host Details`}\n      aria-label={t`Host details modal`}\n      width=\"75%\"\n      ouiaId=\"host-event-modal\"\n    >\n      <Tabs\n        aria-label={t`Tabs`}\n        activeKey={activeTabKey}\n        onSelect={(_e, t) => handleTabClick(t as number)}\n        ouiaId=\"host-event-tabs\"\n      >\n        <Tab\n          aria-label={t`Details tab`}\n          ouiaId=\"details-tab\"\n          eventKey={0}\n          title={<TabTitleText>{t`Details`}</TabTitleText>}\n        >\n          <PageDetails>\n            <PageDetail isEmpty={!hostEvent.event_data?.host} label={t('Host')}>\n              {hostEvent?.event_data?.host}\n            </PageDetail>\n            <PageDetail label={t('Status')}>\n              <StatusCell status={processEventStatus(hostEvent)} />\n            </PageDetail>\n            <PageDetail isEmpty={!hostEvent.play} label={t('Play')}>\n              {hostEvent?.play}\n            </PageDetail>\n            <PageDetail isEmpty={!hostEvent.task} label={t('Task')}>\n              {hostEvent?.task}\n            </PageDetail>\n            <PageDetail isEmpty={!hostEvent.event_data?.task_action} label={t('Module')}>\n              {hostEvent?.event_data?.task_action}\n            </PageDetail>\n          </PageDetails>\n        </Tab>\n        <Tab\n          eventKey={1}\n          title={<TabTitleText>{t`Data`}</TabTitleText>}\n          aria-label={t`Data tab`}\n          ouiaId=\"data-tab\"\n        >\n          {activeTabKey === 1 && jsonObj ? (\n            <PageDetailCodeEditor showCopyToClipboard value={JSON.stringify(jsonObj, null, 2)} />\n          ) : (\n            <EmptyStateNoData description={t('There is no data')} title={t`No Data Available`} />\n          )}\n        </Tab>\n        {stdOut?.length ? (\n          <Tab\n            eventKey={2}\n            title={<TabTitleText>{t`Output`}</TabTitleText>}\n            aria-label={t`Output tab`}\n            ouiaId=\"standard-out-tab\"\n          >\n            <PageDetailCodeEditor value={stdOut} />\n          </Tab>\n        ) : null}\n        {stdErr?.length ? (\n          <Tab\n            eventKey={3}\n            title={<TabTitleText>{t`Standard Error`}</TabTitleText>}\n            aria-label={t`Standard error tab`}\n            ouiaId=\"standard-error-tab\"\n          >\n            <PageDetailCodeEditor value={stdErr} />\n          </Tab>\n        ) : null}\n      </Tabs>\n    </Modal>\n  );\n}\n\nfunction processEventStatus(event: JobEvent) {\n  let status = '';\n  if (event.event === 'runner_on_unreachable') {\n    status = 'unreachable';\n  }\n  // equiv to 'runner_on_error' && 'runner_on_failed'\n  if (event.failed) {\n    status = 'failed';\n  }\n  if (\n    event.event === 'runner_on_ok' ||\n    event.event === 'runner_on_async_ok' ||\n    event.event === 'runner_item_on_ok'\n  ) {\n    status = 'ok';\n  }\n  // if 'ok' and 'changed' are both true, show 'changed'\n  if (event.changed) {\n    status = 'changed';\n  }\n  if (event.event === 'runner_on_skipped') {\n    status = 'skipped';\n  }\n  return status;\n}\n","import { useMemo, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { type IFilterState, type IToolbarFilter } from '../../../../../framework';\nimport { Job } from '../../../interfaces/Job';\nimport './JobOutput.css';\nimport { JobOutputLoadingRow } from './JobOutputLoadingRow';\nimport { IJobOutputRow, JobOutputRow, jobEventToRows, tracebackToRows } from './JobOutputRow';\nimport { PageControls } from './PageControls';\nimport { useJobOutput } from './useJobOutput';\nimport {\n  IJobOutputChildrenSummary,\n  useJobOutputChildrenSummary,\n} from './useJobOutputChildrenSummary';\nimport { useScrollControls } from './useScrollControls';\nimport { useVirtualizedList } from './useVirtualized';\nimport { isHostEvent, isJobRunning } from './util';\nimport { HostEventModal } from './HostEventModal';\n\nexport interface ICollapsed {\n  [uuid: string]: boolean;\n}\n\nconst ScrollContainer = styled.div`\n  overflow: auto;\n  backgroundcolor: var(--pf-v5-global--BackgroundColor--100);\n  font-size: var(--pf-v5-global--FontSize--sm);\n  border-bottom: 1px solid var(--pf-v5-global--BorderColor--100);\n`;\n\ninterface IJobOutputEventsProps {\n  job: Job;\n  reloadJob: () => void;\n  toolbarFilters: IToolbarFilter[];\n  filterState: IFilterState;\n  isFollowModeEnabled: boolean;\n  setIsFollowModeEnabled: (isFollowModeEnabled: boolean) => void;\n}\n\nexport function JobOutputEvents(props: IJobOutputEventsProps) {\n  const {\n    job,\n    reloadJob,\n    toolbarFilters,\n    filterState,\n    isFollowModeEnabled,\n    setIsFollowModeEnabled,\n  } = props;\n\n  const [hostModalData, setHostModalData] = useState<IJobOutputRow | null>(null);\n  const isFiltered = Object.keys(filterState).length > 0;\n\n  const { childrenSummary, isFlatMode } = useJobOutputChildrenSummary(\n    job,\n    isJobRunning(job.status) || isFiltered\n  );\n  const { jobEventCount, getJobOutputEvent, queryJobOutputEvent } = useJobOutput(\n    job,\n    reloadJob,\n    toolbarFilters,\n    filterState,\n    50\n  );\n\n  const jobOutputRows = useMemo(() => {\n    const jobOutputRows: (IJobOutputRow | number)[] = [];\n    if (job.result_traceback) {\n      for (const row of tracebackToRows(job.result_traceback)) {\n        jobOutputRows.push(row);\n      }\n    }\n    for (let counter = 1; counter <= jobEventCount; counter++) {\n      const jobEvent = getJobOutputEvent(counter);\n      if (!jobEvent) jobOutputRows.push(counter);\n      else\n        for (const row of jobEventToRows(jobEvent)) {\n          jobOutputRows.push(row);\n        }\n    }\n    return jobOutputRows;\n  }, [getJobOutputEvent, jobEventCount, job.result_traceback]);\n\n  const [collapsed, setCollapsedState] = useState<ICollapsed>({});\n  const setCollapsed = (uuid: string, counter: number, collapsed: boolean) => {\n    setCollapsedState((collapsedState) => ({\n      ...collapsedState,\n      [uuid]: collapsed,\n      [counter]: collapsed,\n    }));\n    if (collapsed === false) {\n      setCollapsedAll(false);\n    }\n  };\n\n  const [collapsedAll, setCollapsedAll] = useState(false);\n  const toggleExpandCollapseAll = () => {\n    setCollapsedAll(!collapsedAll);\n\n    // find play and expand/collapse it\n    let found = false;\n    visibleItems.forEach((visibleItem) => {\n      if (typeof visibleItem === 'number' || found === true) {\n        return;\n      }\n\n      if (visibleItem.canCollapse && visibleItem.isHeaderLine) {\n        if (visibleItem.stdout.startsWith('PLAY')) {\n          found = true;\n          setCollapsed(visibleItem.playUuid, visibleItem.counter, !collapsedAll);\n        }\n      }\n    });\n  };\n\n  const nonCollapsedRows = useNonCollapsedRows(\n    isFlatMode,\n    childrenSummary,\n    collapsed,\n    jobOutputRows\n  );\n\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { beforeRowsHeight, visibleItems, setRowHeight, afterRowsHeight } = useVirtualizedList(\n    containerRef,\n    nonCollapsedRows\n  );\n\n  const canCollapseEvents = childrenSummary?.event_processing_finished && childrenSummary.is_tree;\n  const estimatedMaxLines = jobOutputRows.length * 5;\n  const outputLineChars = String(estimatedMaxLines).length;\n\n  const { scrollToTop, scrollToBottom, scrollPageDown, scrollPageUp } = useScrollControls(\n    containerRef,\n    isFollowModeEnabled,\n    setIsFollowModeEnabled,\n    jobOutputRows.length,\n    isJobRunning(job.status)\n  );\n\n  const visibleHostIndex = visibleItems.findIndex(\n    (el) => typeof el === 'object' && el.uuid === hostModalData?.uuid\n  );\n  const visibleHost = visibleItems[visibleHostIndex];\n  const visibleHostCounter = typeof visibleHost === 'object' && visibleHost.counter;\n\n  const selectedRowHostData = visibleHostCounter\n    ? getJobOutputEvent(visibleHostCounter)\n    : undefined;\n\n  const isHostModalOpen =\n    hostModalData?.counter &&\n    isHostEvent(getJobOutputEvent(hostModalData.counter)) &&\n    hostModalData.uuid !== hostModalData.taskUuid;\n\n  return (\n    <>\n      <PageControls\n        onScrollFirst={scrollToTop}\n        onScrollLast={scrollToBottom}\n        onScrollNext={scrollPageDown}\n        onScrollPrevious={scrollPageUp}\n        toggleExpandCollapseAll={() => toggleExpandCollapseAll()}\n        isFlatMode={isFlatMode}\n        isTemplateJob={job.type === 'job'}\n        isAllCollapsed={collapsedAll}\n      />\n      <ScrollContainer ref={containerRef} tabIndex={0}>\n        <pre>\n          <div\n            className=\"output-grid\"\n            style={{ '--output-line-chars': outputLineChars } as { [key: string]: string | number }}\n          >\n            <div style={{ height: beforeRowsHeight }} />\n            {visibleItems.map((row, index) => {\n              if (typeof row === 'number') {\n                const counter = row as unknown as number;\n\n                return (\n                  <JobOutputLoadingRow\n                    key={counter}\n                    counter={counter}\n                    queryJobOutputEvent={queryJobOutputEvent}\n                  />\n                );\n              }\n\n              return (\n                <JobOutputRow\n                  key={`${row.counter}-${row.eventLine}-${index}`}\n                  index={index}\n                  row={row}\n                  collapsed={collapsed}\n                  setCollapsed={setCollapsed}\n                  setHeight={setRowHeight}\n                  onClick={setHostModalData}\n                  canCollapseEvents={canCollapseEvents}\n                />\n              );\n            })}\n            <div style={{ height: afterRowsHeight }} />\n          </div>\n        </pre>\n      </ScrollContainer>\n      {isHostModalOpen && selectedRowHostData !== undefined && (\n        <HostEventModal\n          isOpen\n          onClose={() => setHostModalData(null)}\n          hostEvent={selectedRowHostData}\n        />\n      )}\n    </>\n  );\n}\n\nfunction useNonCollapsedRows(\n  isFlatMode: boolean,\n  childrenSummary: IJobOutputChildrenSummary | undefined,\n  collapsed: ICollapsed,\n  jobOutputRows: (IJobOutputRow | number)[]\n) {\n  return useMemo(() => {\n    return jobOutputRows.filter((row) => {\n      if (isFlatMode) {\n        return true;\n      }\n\n      // If row is a number, it has not loaded and is the counter for the event\n      if (typeof row !== 'number') {\n        // Only collapse the row if it is not the main event for the play or task,\n        // which should still show\n        if (collapsed[row.playUuid] && row.playUuid !== row.uuid) return false;\n        if (collapsed[row.taskUuid] && row.taskUuid !== row.uuid) return false;\n\n        return true;\n      }\n\n      if (!childrenSummary) {\n        return true;\n      }\n\n      for (const counterKey in childrenSummary.children_summary) {\n        const summary = childrenSummary.children_summary[counterKey];\n        if (!summary) {\n          return true;\n        }\n        const counter = Number(counterKey);\n\n        if (counter >= row) {\n          return true;\n        }\n        if (counter + summary.numChildren > row && collapsed[counter]) {\n          return false;\n        }\n      }\n      return true;\n    });\n  }, [isFlatMode, childrenSummary, collapsed, jobOutputRows]);\n}\n","import { useGet } from '../../../../common/crud/useGet';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { Job } from '../../../interfaces/Job';\n\nexport interface IJobOutputChildrenSummary {\n  children_summary: { [counter: string]: { rowNumber: number; numChildren: number } };\n  meta_event_nested_uuid: object;\n  event_processing_finished: boolean;\n  is_tree: boolean;\n}\n\nexport function useJobOutputChildrenSummary(job: Job, forceFlatMode: boolean) {\n  let isFlatMode = forceFlatMode || job.type !== 'job';\n\n  const response = useGet<IJobOutputChildrenSummary>(\n    awxAPI`/jobs/${job.id.toString()}/job_events/children_summary/`\n  );\n  const { data, error } = response;\n\n  if (error) {\n    isFlatMode = true;\n  }\n  return {\n    childrenSummary: isFlatMode || !data ? undefined : data,\n    isFlatMode: isFlatMode || !data,\n  };\n}\n","import useResizeObserver from '@react-hook/resize-observer';\nimport { RefObject, useCallback, useEffect, useState } from 'react';\n\nexport function useVirtualizedList<T>(containerRef: RefObject<HTMLElement>, items: T[]) {\n  const scrollBuffer = 400;\n  const [scrollTop, setScrollTop] = useState(0);\n  const [containerHeight, setContainerHeight] = useState(0);\n\n  const onScroll = useCallback(() => {\n    if (!containerRef.current) return;\n    setScrollTop(containerRef.current.scrollTop);\n    setContainerHeight(containerRef.current.clientHeight);\n  }, [containerRef]);\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const el = containerRef.current;\n    el.addEventListener('scroll', onScroll);\n\n    return () => {\n      el.removeEventListener('scroll', onScroll);\n    };\n  }, [containerRef, onScroll]);\n\n  const onResize = useCallback(() => {\n    if (!containerRef.current) return;\n    setContainerHeight(containerRef.current.clientHeight);\n  }, [containerRef]);\n  useResizeObserver(containerRef, () => onResize());\n\n  const [rowHeights, setRowHeights] = useState<Record<number, number | undefined>>({});\n  const [minRowHeight, setMinRowHeight] = useState(24);\n  const setRowHeight = useCallback(\n    (index: number, height: number) => {\n      setRowHeights((heights) => {\n        const existingHeight = heights[index];\n        if (existingHeight === height) return heights;\n        if (minRowHeight > height) setMinRowHeight(height);\n        const newHeights = { ...heights };\n        newHeights[index] = height;\n        return newHeights;\n      });\n    },\n    [minRowHeight]\n  );\n\n  const totalRowCount = items.length;\n\n  let totalHeight = 0;\n  let rowIndex = 0;\n  while (rowIndex < totalRowCount) {\n    const height = rowHeights[rowIndex];\n    const rowHeight = height === undefined ? minRowHeight : height;\n    if (totalHeight + rowHeight >= scrollTop - scrollBuffer) break;\n    totalHeight += rowHeight;\n    rowIndex++;\n  }\n  const beforeRowsCount = rowIndex;\n  const beforeRowsHeight = totalHeight;\n\n  const maxVisibleHeight = scrollTop + containerHeight + scrollBuffer;\n  let visibleRowsCount = 0;\n  while (rowIndex < totalRowCount) {\n    const height = rowHeights[rowIndex];\n    const rowHeight = height === undefined ? minRowHeight : height;\n    totalHeight += rowHeight;\n    rowIndex++;\n    visibleRowsCount++;\n    if (totalHeight >= maxVisibleHeight) break;\n  }\n\n  const visibleRowsHeight = totalHeight - beforeRowsHeight;\n\n  while (rowIndex < totalRowCount) {\n    const height = rowHeights[rowIndex];\n    const rowHeight = height === undefined ? minRowHeight : height;\n    totalHeight += rowHeight;\n    rowIndex++;\n  }\n\n  const afterRowsHeight = totalHeight - beforeRowsHeight - visibleRowsHeight;\n\n  const visibleItems = items.slice(beforeRowsCount, beforeRowsCount + visibleRowsCount);\n\n  return {\n    beforeRowsCount,\n    beforeRowsHeight,\n    visibleItems,\n    setRowHeight,\n    afterRowsHeight,\n  };\n}\n","import { RefObject, useEffect, useState } from 'react';\n\nfunction isAtBottom(el: HTMLElement) {\n  const { clientHeight, scrollHeight, scrollTop } = el;\n  const scrollTopMax = scrollHeight - clientHeight;\n  return scrollTop >= scrollTopMax;\n}\n\nexport function useScrollControls(\n  containerRef: RefObject<HTMLElement>,\n  isFollowModeEnabled: boolean,\n  setIsFollowModeEnabled: (value: boolean) => void,\n  numRows: number,\n  isJobRunning: boolean\n) {\n  const [numTicksAtBottom, setNumTicksAtBottom] = useState(0);\n\n  /* Keep scrolled to bottom if follow mode is enabled */\n  useEffect(() => {\n    if (!isFollowModeEnabled) {\n      return;\n    }\n    const interval = setInterval(() => {\n      if (containerRef.current) {\n        containerRef.current.scrollTo({ top: containerRef.current.scrollHeight });\n      }\n    }, 200);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [isFollowModeEnabled, containerRef]);\n\n  /* If job isn't running, wait a short delay to ensure view stays scrolled\n     all the way to the bottom; then disable follow mode */\n  useEffect(() => {\n    if (!isFollowModeEnabled || isJobRunning) {\n      return;\n    }\n    const interval = setInterval(() => {\n      if (!containerRef.current) {\n        return;\n      }\n      if (numTicksAtBottom >= 3) {\n        setIsFollowModeEnabled(false);\n        return;\n      }\n\n      if (isAtBottom(containerRef.current)) {\n        setNumTicksAtBottom((prev) => prev + 1);\n      } else {\n        setNumTicksAtBottom(0);\n      }\n    }, 200);\n    const failSafe = setTimeout(() => {\n      setIsFollowModeEnabled(false);\n    }, 1200);\n\n    return () => {\n      clearInterval(interval);\n      clearTimeout(failSafe);\n    };\n  }, [isFollowModeEnabled, isJobRunning, containerRef, numTicksAtBottom, setIsFollowModeEnabled]);\n\n  const scrollToTop = () => {\n    containerRef.current?.scrollTo({ top: 0 });\n    setIsFollowModeEnabled(false);\n  };\n\n  const scrollToBottom = () => {\n    if (!containerRef.current) {\n      return;\n    }\n    containerRef.current.scrollTo({ top: containerRef.current.scrollHeight });\n    setIsFollowModeEnabled(true);\n  };\n\n  const scrollPageDown = () => {\n    if (!containerRef.current) {\n      return;\n    }\n    const { height } = containerRef.current.getBoundingClientRect();\n    containerRef.current?.scrollBy({ top: height - 48 });\n  };\n\n  const scrollPageUp = () => {\n    if (!containerRef.current) {\n      return;\n    }\n    const { height } = containerRef.current.getBoundingClientRect();\n    containerRef.current?.scrollBy({ top: (height - 48) * -1 });\n    setIsFollowModeEnabled(false);\n  };\n\n  return {\n    scrollToTop,\n    scrollToBottom,\n    scrollPageDown,\n    scrollPageUp,\n  };\n}\n","import { Dispatch, SetStateAction } from 'react';\nimport { Toolbar, ToolbarContent, Button } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IFilterState,\n  PageToolbarFilters,\n} from '../../../../../framework/PageToolbar/PageToolbarFilter';\nimport { IToolbarFilter } from '../../../../../framework';\nimport { JobStatus, isJobRunning } from './util';\n\ninterface IJobOutputToolbarProps {\n  toolbarFilters: IToolbarFilter[];\n  filterState: IFilterState;\n  setFilterState: Dispatch<SetStateAction<IFilterState>>;\n  jobStatus?: JobStatus;\n  isFollowModeEnabled: boolean;\n  setIsFollowModeEnabled: (value: boolean) => void;\n}\n\nexport function JobOutputToolbar(props: IJobOutputToolbarProps) {\n  const {\n    toolbarFilters,\n    filterState,\n    setFilterState,\n    jobStatus,\n    isFollowModeEnabled,\n    setIsFollowModeEnabled,\n  } = props;\n  const { t } = useTranslation();\n\n  const handleFollowToggle = () => {\n    if (isFollowModeEnabled) {\n      setIsFollowModeEnabled(false);\n    } else {\n      setIsFollowModeEnabled(true);\n    }\n  };\n\n  return (\n    <Toolbar clearAllFilters={() => setFilterState({})}>\n      <ToolbarContent>\n        <PageToolbarFilters\n          toolbarFilters={toolbarFilters}\n          filterState={filterState}\n          setFilterState={setFilterState}\n        />\n        {isJobRunning(jobStatus) ? (\n          <Button\n            variant={isFollowModeEnabled ? 'secondary' : 'primary'}\n            onClick={handleFollowToggle}\n          >\n            {isFollowModeEnabled ? t('Unfollow') : t('Follow')}\n          </Button>\n        ) : null}\n      </ToolbarContent>\n    </Toolbar>\n  );\n}\n","import { Badge, Flex, FlexItem, Split, SplitItem, ButtonVariant } from '@patternfly/react-core';\nimport { ProjectDiagramIcon } from '@patternfly/react-icons';\nimport { DateTime, Duration } from 'luxon';\nimport { useEffect, useState, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\nimport { StatusLabel } from '../../../../common/Status';\nimport { Job } from '../../../interfaces/Job';\nimport {\n  PageActionType,\n  IPageActionButton,\n  usePageNavigate,\n  PageActionSelection,\n} from '../../../../../framework';\nimport { PageActionButton } from '../../../../../framework/PageActions/PageActionButton';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\nconst HeaderTitle = styled.div`\n  display: inline-flex;\n  align-items: baseline;\n  gap: 10px;\n\n  h1 {\n    font-weight: var(--pf-v5-global--FontWeight--bold);\n  }\n`;\n\nexport function JobStatusBar(props: { job: Job }) {\n  const { job } = props;\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const [activeJobElapsedTime, setActiveJobElapsedTime] = useState('00:00:00');\n\n  useEffect(() => {\n    let secTimer: ReturnType<typeof setInterval>; // eslint-disable-line prefer-const\n    if (job.finished) {\n      return () => clearInterval(secTimer);\n    }\n\n    secTimer = setInterval(() => {\n      const elapsedTime = calculateElapsed(job.started);\n      setActiveJobElapsedTime(elapsedTime);\n    }, 1000);\n\n    return () => clearInterval(secTimer);\n  }, [job.started, job.finished]);\n\n  const playCount = job.playbook_counts?.play_count;\n  const taskCount = job.playbook_counts?.task_count;\n  const darkCount = job.host_status_counts?.dark;\n  const failureCount = job.host_status_counts?.failures;\n  const totalHostCount = job.host_status_counts\n    ? Object.keys(job.host_status_counts || {}).reduce(\n        (sum, key) => sum + (job.host_status_counts[key as 'ok' | 'failures' | 'dark'] as number),\n        0\n      )\n    : 0;\n\n  const elapsed = job.finished\n    ? Duration.fromObject({ seconds: Number(job.elapsed) }).toFormat('hh:mm:ss')\n    : activeJobElapsedTime;\n\n  const viewWFVisAction = useMemo<IPageActionButton>(\n    () => ({\n      type: PageActionType.Button,\n      selection: PageActionSelection.None,\n      variant: ButtonVariant.primary,\n      icon: ProjectDiagramIcon,\n      label: t('View workflow visualizer'),\n      onClick: () =>\n        pageNavigate(AwxRoute.WorkflowVisualizer, {\n          params: { id: job.unified_job_template },\n        }),\n    }),\n    [t, job.unified_job_template, pageNavigate]\n  );\n\n  return (\n    <Split hasGutter>\n      <SplitItem isFilled>\n        <HeaderTitle>\n          <h1>{job.name}</h1>\n          <StatusLabel status={job.status} dataCy=\"job-status-label\" />\n        </HeaderTitle>\n      </SplitItem>\n      <SplitItem>\n        <Flex>\n          {job.type === 'workflow_job' && <PageActionButton iconOnly action={viewWFVisAction} />}\n          <Count label={t('Plays')} count={playCount} />\n          <Count label={t('Tasks')} count={taskCount} />\n          <Count label={t('Hosts')} count={totalHostCount} />\n          <Count label={t('Unreachable')} count={darkCount} />\n          <Count label={t('Failed')} count={failureCount} />\n          <FlexItem>\n            {t('Elapsed')} <Badge isRead>{elapsed}</Badge>\n          </FlexItem>\n        </Flex>\n      </SplitItem>\n    </Split>\n  );\n}\n\nfunction Count(props: { label: string; count?: number }) {\n  const { label, count } = props;\n  if (!count) {\n    return null;\n  }\n\n  return (\n    <FlexItem>\n      {label} <Badge isRead>{count}</Badge>\n    </FlexItem>\n  );\n}\n\nconst calculateElapsed = (started: string | undefined) => {\n  if (!started) {\n    return '';\n  }\n\n  const now = DateTime.now();\n  const duration = now\n    .diff(DateTime.fromISO(`${started}`), ['milliseconds', 'seconds', 'minutes', 'hours'])\n    .toObject();\n\n  return Duration.fromObject({ ...duration }).toFormat('hh:mm:ss');\n};\n","import { PageSection, Skeleton } from '@patternfly/react-core';\nimport { useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { IFilterState, ToolbarFilterType, type IToolbarFilter } from '../../../../../framework';\nimport { Job } from '../../../interfaces/Job';\nimport { useGetJob } from '../JobPage';\nimport { HostStatusBar, WorkflowNodesStatusBar } from './StatusBar';\nimport './JobOutput.css';\nimport { JobOutputEvents } from './JobOutputEvents';\nimport { JobOutputToolbar } from './JobOutputToolbar';\nimport { JobStatusBar } from './JobStatusBar';\nimport { isJobRunning } from './util';\nimport { WorkflowOutput } from '../WorkflowOutput/WorkflowOutput';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxGetAllPages } from '../../../common/useAwxGetAllPages';\nimport { WorkflowNode } from '../../../interfaces/WorkflowNode';\n\nconst Section = styled(PageSection)`\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 204px);\n`;\n\nexport function JobOutput() {\n  const params = useParams<{ id: string; job_type: string }>();\n  const { job, refreshJob } = useGetJob(params.id, params.job_type);\n\n  if (!job) {\n    return null;\n  }\n  return <JobOutputInner job={job} reloadJob={refreshJob} />;\n}\n\nexport function JobOutputInner(props: { job: Job; reloadJob: () => void }) {\n  const { job, reloadJob } = props;\n  const toolbarFilters = useOutputFilters();\n  const [filterState, setFilterState] = useState<IFilterState>({});\n  const isRunning = isJobRunning(job.status);\n  const [isFollowModeEnabled, setIsFollowModeEnabled] = useState(isRunning);\n\n  const { results: workflowNodes, refresh } = useAwxGetAllPages<WorkflowNode>(\n    awxAPI`/workflow_jobs/${props.job.id.toString() || ''}/workflow_nodes/`\n  );\n\n  if (!job) {\n    return <Skeleton />;\n  }\n  return (\n    <Section variant=\"light\">\n      <JobStatusBar job={job} />\n      {job.type === 'workflow_job' ? (\n        <WorkflowNodesStatusBar nodes={workflowNodes || []} />\n      ) : (\n        <>\n          <HostStatusBar counts={job.host_status_counts || {}} />\n          <JobOutputToolbar\n            toolbarFilters={toolbarFilters}\n            filterState={filterState}\n            setFilterState={setFilterState}\n            jobStatus={job.status}\n            isFollowModeEnabled={isFollowModeEnabled}\n            setIsFollowModeEnabled={setIsFollowModeEnabled}\n          />\n        </>\n      )}\n      {job.type === 'workflow_job' ? (\n        <WorkflowOutput job={job} reloadJob={reloadJob} refreshNodeStatus={refresh} />\n      ) : (\n        <JobOutputEvents\n          job={job}\n          reloadJob={reloadJob}\n          toolbarFilters={toolbarFilters}\n          filterState={filterState}\n          isFollowModeEnabled={isFollowModeEnabled}\n          setIsFollowModeEnabled={setIsFollowModeEnabled}\n        />\n      )}\n    </Section>\n  );\n}\n\nfunction useOutputFilters() {\n  const { t } = useTranslation();\n\n  return useMemo<IToolbarFilter[]>(\n    () => [\n      {\n        key: 'stdout',\n        label: t('Search output'),\n        type: ToolbarFilterType.MultiText,\n        query: 'stdout__icontains',\n        placeholder: t('Filter by keyword'),\n        comparison: 'contains',\n      },\n      {\n        key: 'event',\n        label: t('Event'),\n        type: ToolbarFilterType.MultiSelect,\n        query: 'event',\n        placeholder: t('Select event type'),\n        options: [\n          { value: 'debug', label: t('Debug') },\n          { value: 'deprecated', label: t('Deprecated') },\n          { value: 'error', label: t('Error') },\n          { value: 'runner_on_file_diff', label: t('File Difference') },\n          { value: 'playbook_on_setup', label: t('Gathering Facts') },\n          { value: 'runner_on_async_failed', label: t('Host Async Failure') },\n          { value: 'runner_on_async_ok', label: t('Host Async OK') },\n          { value: 'runner_on_failed', label: t('Host Failed') },\n          { value: 'runner_on_error', label: t('Host Failure') },\n          { value: 'runner_on_ok', label: t('Host OK') },\n          { value: 'runner_on_async_poll', label: t('Host Polling') },\n          { value: 'runner_retry', label: t('Host Retry') },\n          { value: 'runner_on_skipped', label: t('Host Skipped') },\n          { value: 'runner_on_start', label: t('Host Started') },\n          { value: 'runner_on_unreachable', label: t('Host Unreachable') },\n          { value: 'playbook_on_include', label: t('Including File') },\n          { value: 'runner_item_on_failed', label: t('Item Failed') },\n          { value: 'runner_item_on_ok', label: t('Item OK') },\n          { value: 'runner_item_on_skipped', label: t('Item Skipped') },\n          { value: 'playbook_on_no_hosts_matched', label: t('No Hosts Matched') },\n          { value: 'playbook_on_no_hosts_remaining', label: t('No Hosts Remaining') },\n          { value: 'runner_on_no_hosts', label: t('No Hosts Remaining') },\n          { value: 'playbook_on_play_start', label: t('Play Started') },\n          { value: 'playbook_on_stats', label: t('Playbook Complete') },\n          { value: 'playbook_on_start', label: t('Playbook Started') },\n          { value: 'playbook_on_notify', label: t('Running Handlers') },\n          { value: 'system_warning', label: t('System Warning') },\n          { value: 'playbook_on_task_start', label: t('Task Started') },\n          { value: 'playbook_on_vars_prompt', label: t('Variables Prompted') },\n          { value: 'verbose', label: t('Verbose') },\n          { value: 'warning', label: t('Warning') },\n        ],\n      },\n    ],\n    [t]\n  );\n}\n","import { PageHeader, PageLayout } from '../../../../framework';\n\nimport { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { usePersistentFilters } from '../../../common/PersistentFilters';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { useAwxConfig } from '../../common/useAwxConfig';\nimport { useAwxView } from '../../common/useAwxView';\nimport { useAwxWebSocketSubscription } from '../../common/useAwxWebSocket';\nimport { useGetDocsUrl } from '../../common/util/useGetDocsUrl';\nimport { UnifiedJob } from '../../interfaces/UnifiedJob';\nimport { useJobsColumns } from './hooks/useJobsColumns';\nimport { useJobsFilters } from './hooks/useJobsFilters';\nimport { ActivityStreamIcon } from '../../common/ActivityStreamIcon';\nimport { JobsList } from './JobsList';\n\nexport function Jobs() {\n  const { t } = useTranslation();\n  const product: string = process.env.PRODUCT ?? t('AWX');\n  const tableColumns = useJobsColumns();\n\n  usePersistentFilters('jobs');\n  const config = useAwxConfig();\n  const toolbarFilters = useJobsFilters();\n  const view = useAwxView<UnifiedJob>({\n    url: awxAPI`/unified_jobs/`,\n    toolbarFilters,\n    tableColumns,\n  });\n\n  // const [showGraph, setShowGraph] = useState(false);\n\n  const { refresh } = view;\n  const handleWebSocketMessage = useCallback(\n    (message?: { group_name?: string; type?: string }) => {\n      switch (message?.group_name) {\n        case 'jobs':\n          switch (message?.type) {\n            case 'job':\n              void refresh();\n              break;\n            case 'workflow_job':\n              void refresh();\n              break;\n            case 'project_update':\n              void refresh();\n              break;\n          }\n          break;\n      }\n    },\n    [refresh]\n  );\n  useAwxWebSocketSubscription(\n    { control: ['limit_reached_1'], jobs: ['status_changed'], schedules: ['changed'] },\n    handleWebSocketMessage as (data: unknown) => void\n  );\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Jobs')}\n        titleHelpTitle={t('Jobs')}\n        titleHelp={t(\n          `A job is an instance of {{product}} launching an Ansible playbook against an inventory of hosts.`,\n          { product }\n        )}\n        titleDocLink={useGetDocsUrl(config, 'jobs')}\n        description={t(\n          `A job is an instance of {{product}} launching an Ansible playbook against an inventory of hosts.`,\n          { product }\n        )}\n        headerActions={<ActivityStreamIcon type={'job'} />}\n      />\n      <JobsList columns={tableColumns} />\n    </PageLayout>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { PageFormGrid, PageFormTextInput } from '../../../../../../framework';\nimport { usePageWizard } from '../../../../../../framework/PageWizard/PageWizardProvider';\nimport type { TemplateLaunch } from '../TemplateLaunchWizard';\nimport { ConditionalField } from './ConditionalField';\nimport { LaunchConfiguration } from '../../../../interfaces/LaunchConfiguration';\nimport { RelaunchConfig } from '../RelaunchTemplateWithPasswords';\n\nexport function CredentialPasswordsStep<T extends LaunchConfiguration | RelaunchConfig>(props: {\n  config: T;\n}) {\n  const { config } = props;\n  const { t } = useTranslation();\n  const { wizardData } = usePageWizard();\n  const {\n    prompt: { credentials },\n  } = wizardData as TemplateLaunch;\n  const vaultsThatPrompt: string[] = [];\n  let showCredentialPasswordSsh = false;\n  let showCredentialPasswordPrivilegeEscalation = false;\n  let showCredentialPasswordPrivateKeyPassphrase = false;\n\n  if (\n    !('ask_credential_on_launch' in config && config.ask_credential_on_launch) &&\n    'passwords_needed_to_start' in config &&\n    config.passwords_needed_to_start\n  ) {\n    config.passwords_needed_to_start.forEach((password: string) => {\n      if (password === 'ssh_password') {\n        showCredentialPasswordSsh = true;\n      } else if (password === 'become_password') {\n        showCredentialPasswordPrivilegeEscalation = true;\n      } else if (password === 'ssh_key_unlock') {\n        showCredentialPasswordPrivateKeyPassphrase = true;\n      } else if (password.startsWith('vault_password')) {\n        const vaultId = password.split(/\\.(.+)/)[1] || '';\n        vaultsThatPrompt.push(vaultId);\n      }\n    });\n  } else if (credentials) {\n    credentials.forEach((credential) => {\n      if (!('inputs' in credential) && 'defaults' in config) {\n        const launchConfigCredential = config.defaults.credentials.find(\n          (defaultCred) => defaultCred.id === credential.id\n        );\n\n        if (launchConfigCredential && launchConfigCredential?.passwords_needed.length > 0) {\n          if (launchConfigCredential.passwords_needed.includes('ssh_password')) {\n            showCredentialPasswordSsh = true;\n          }\n          if (launchConfigCredential.passwords_needed.includes('become_password')) {\n            showCredentialPasswordPrivilegeEscalation = true;\n          }\n          if (launchConfigCredential.passwords_needed.includes('ssh_key_unlock')) {\n            showCredentialPasswordPrivateKeyPassphrase = true;\n          }\n\n          const vaultPasswordIds = launchConfigCredential.passwords_needed\n            .filter((passwordNeeded) => passwordNeeded.startsWith('vault_password'))\n            .map((vaultPassword) => vaultPassword.split(/\\.(.+)/)[1] || '');\n\n          vaultsThatPrompt.push(...vaultPasswordIds);\n        }\n      } else {\n        const inputCheck = 'inputs' in credential;\n        if (inputCheck && credential?.inputs?.password === 'ASK') {\n          showCredentialPasswordSsh = true;\n        }\n\n        if (inputCheck && credential?.inputs?.become_password === 'ASK') {\n          showCredentialPasswordPrivilegeEscalation = true;\n        }\n\n        if (inputCheck && credential?.inputs?.ssh_key_unlock === 'ASK') {\n          showCredentialPasswordPrivateKeyPassphrase = true;\n        }\n\n        if (inputCheck && credential?.inputs?.vault_password === 'ASK') {\n          vaultsThatPrompt.push(credential.inputs.vault_id?.toString() ?? '');\n        }\n      }\n    });\n  }\n\n  return (\n    <PageFormGrid isVertical singleColumn>\n      <ConditionalField isHidden={!showCredentialPasswordSsh}>\n        <PageFormTextInput<TemplateLaunch>\n          id=\"launch-ssh-password\"\n          label={t('SSH password')}\n          name=\"credential_passwords.ssh_password\"\n          placeholder={t('Enter a password')}\n          type=\"password\"\n          isRequired\n        />\n      </ConditionalField>\n      <ConditionalField isHidden={!showCredentialPasswordPrivateKeyPassphrase}>\n        <PageFormTextInput<TemplateLaunch>\n          id=\"launch-private-key-passphrase\"\n          label={t('Private key password')}\n          name=\"credential_passwords.ssh_key_unlock\"\n          placeholder={t('Enter a password')}\n          type=\"password\"\n          isRequired\n        />\n      </ConditionalField>\n      <ConditionalField isHidden={!showCredentialPasswordPrivilegeEscalation}>\n        <PageFormTextInput<TemplateLaunch>\n          id=\"launch-privilege-escalation-password\"\n          label={t`Privilege escalation password`}\n          name=\"credential_passwords.become_password\"\n          placeholder={t('Enter a password')}\n          type=\"password\"\n          isRequired\n        />\n      </ConditionalField>\n      {vaultsThatPrompt.map((credId) => {\n        const passwordKey = `vault_password${credId !== '' ? `.${credId}` : ''}`;\n        return (\n          <PageFormTextInput<TemplateLaunch>\n            key={credId}\n            id={`launch-vault-password-${credId}`}\n            label={credId === '' ? t`Vault password` : t(`Vault password | {{credId}}`, { credId })}\n            name={`credential_passwords.${passwordKey}`}\n            placeholder={t('Enter a password')}\n            type=\"password\"\n            isRequired\n          />\n        );\n      })}\n    </PageFormGrid>\n  );\n}\n","import { Label, LabelGroup } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { PageDetail, PageDetails, useGetPageUrl } from '../../../../../../framework';\nimport { PageDetailCodeEditor } from '../../../../../../framework/PageDetails/PageDetailCodeEditor';\nimport { usePageWizard } from '../../../../../../framework/PageWizard/PageWizardProvider';\nimport { jsonToYaml, yamlToJson } from '../../../../../../framework/utils/codeEditorUtils';\nimport { useGet, useGetItem } from '../../../../../common/crud/useGet';\nimport { CredentialLabel } from '../../../../common/CredentialLabel';\nimport { awxAPI } from '../../../../common/api/awx-utils';\nimport { useVerbosityString } from '../../../../common/useVerbosityString';\nimport type { Credential } from '../../../../interfaces/Credential';\nimport { ExecutionEnvironment } from '../../../../interfaces/ExecutionEnvironment';\nimport { Inventory } from '../../../../interfaces/Inventory';\nimport type { JobTemplate } from '../../../../interfaces/JobTemplate';\nimport { Survey } from '../../../../interfaces/Survey';\nimport { WorkflowJobTemplate } from '../../../../interfaces/WorkflowJobTemplate';\nimport { AwxRoute } from '../../../../main/AwxRoutes';\nimport type { TemplateLaunch } from '../TemplateLaunchWizard';\nimport { ConditionalField } from './ConditionalField';\n\nfunction getSurveySpecUrl(template: JobTemplate | WorkflowJobTemplate) {\n  if (!template) return '';\n  switch (template?.type) {\n    case 'job_template':\n      return awxAPI`/job_templates/${template?.id.toString()}/survey_spec/`;\n    case 'workflow_job_template':\n      return awxAPI`/workflow_job_templates/${template?.id.toString()}/survey_spec/`;\n    default:\n      return '';\n  }\n}\n\nfunction maskPasswords(vars: { [key: string]: string | string[] }, passwordKeys: string[]) {\n  const updated = { ...vars };\n  passwordKeys.forEach((key) => {\n    if (typeof updated[key] !== 'undefined') {\n      updated[key] = '$encrypted$';\n    }\n  });\n  return updated;\n}\n\nfunction processSurvey(\n  extra_vars: string | null,\n  survey: { [key: string]: string | string[] },\n  surveyConfig: Survey | null\n): string {\n  const extraVarsObj = extra_vars ? (JSON.parse(yamlToJson(extra_vars)) as object) : {};\n  const updatedSurvey: { [key: string]: string | string[] } = { ...survey };\n\n  if (surveyConfig?.spec) {\n    const passwordFields = surveyConfig.spec\n      .filter((q) => q.type === 'password')\n      .map((q) => q.variable);\n\n    const maskedSurveyPasswords = maskPasswords(survey, passwordFields);\n    Object.keys(maskedSurveyPasswords).forEach((passwordKey) => {\n      updatedSurvey[passwordKey] = maskedSurveyPasswords[passwordKey];\n    });\n  }\n\n  const mergedData: { [key: string]: string | string[] | { name: string }[] } = {\n    ...extraVarsObj,\n    ...updatedSurvey,\n  };\n\n  return jsonToYaml(JSON.stringify(mergedData));\n}\n\nexport function TemplateLaunchReviewStep(props: { template: JobTemplate }) {\n  const { template } = props;\n  const { t } = useTranslation();\n  const { wizardData } = usePageWizard();\n  const getPageUrl = useGetPageUrl();\n  const { prompt = undefined, survey } = wizardData as TemplateLaunch;\n  const { data: surveyConfig } = useGet<Survey>(getSurveySpecUrl(template));\n\n  const { data: ee } = useGetItem<ExecutionEnvironment>(\n    awxAPI`/execution_environments/`,\n    prompt?.execution_environment ?? ''\n  );\n  const { data: fullInventory } = useGetItem<Inventory>(\n    awxAPI`/inventories/`,\n    prompt?.inventory?.id ?? ''\n  );\n\n  let extraVarDetails = prompt?.extra_vars || '{}';\n  if (survey) {\n    extraVarDetails = processSurvey(prompt?.extra_vars ?? '', survey, surveyConfig ?? null);\n  }\n\n  const verbosityString = useVerbosityString(prompt?.verbosity);\n\n  const inventoryUrlPaths: { [key: string]: string } = {\n    '': 'inventory',\n    smart: 'smart_inventory',\n    constructed: 'constructed_inventory',\n  };\n  return (\n    <PageDetails numberOfColumns=\"multiple\">\n      <PageDetail label={t('Name')}>{template.name}</PageDetail>\n      <PageDetail label={t('Job type')}>{prompt?.job_type}</PageDetail>\n      <PageDetail label={t('Organization')} isEmpty={!template.summary_fields.organization}>\n        <Link\n          to={getPageUrl(AwxRoute.OrganizationDetails, {\n            params: { id: template.summary_fields?.organization?.id },\n          })}\n        >\n          {template.summary_fields?.organization?.name}\n        </Link>\n      </PageDetail>\n      <ConditionalField isHidden={!fullInventory}>\n        <PageDetail label={t`Inventory`} isEmpty={!fullInventory?.id}>\n          <Link\n            to={getPageUrl(AwxRoute.InventoryDetails, {\n              params: {\n                id: fullInventory?.id,\n                inventory_type: inventoryUrlPaths[fullInventory?.kind as string],\n              },\n            })}\n          >\n            {prompt?.inventory?.name}\n          </Link>\n        </PageDetail>\n      </ConditionalField>\n      {template.type === 'job_template' && (\n        <PageDetail label={t`Project`} isEmpty={!template.summary_fields.project}>\n          <Link\n            to={getPageUrl(AwxRoute.ProjectDetails, {\n              params: { id: template.summary_fields?.project?.id },\n            })}\n          >\n            {template.summary_fields.project?.name}\n          </Link>\n        </PageDetail>\n      )}\n      <PageDetail label={t`Execution environment`} isEmpty={isEmpty(prompt?.execution_environment)}>\n        <Link\n          to={getPageUrl(AwxRoute.ExecutionEnvironmentDetails, {\n            params: prompt?.execution_environment ? { id: prompt?.execution_environment } : {},\n          })}\n        >\n          {ee?.name}\n        </Link>\n      </PageDetail>\n      <PageDetail label={t('Source control branch')}>{prompt?.scm_branch}</PageDetail>\n      {template.type === 'job_template' && (\n        <PageDetail label={t('Playbook')}>{template?.playbook}</PageDetail>\n      )}\n      <PageDetail label={t('Credentials')} isEmpty={isEmpty(prompt?.credentials)}>\n        <LabelGroup>\n          {prompt?.credentials?.map((credential) => (\n            <CredentialDetail credentialID={credential.id} key={credential.id} />\n          ))}\n        </LabelGroup>\n      </PageDetail>\n      <PageDetail\n        label={t`Instance groups`}\n        helpText={t`The instance groups for this job template to run on.`}\n        isEmpty={isEmpty(prompt?.instance_groups)}\n      >\n        <LabelGroup>\n          {prompt?.instance_groups?.map((ig) => (\n            <Label color=\"blue\" key={ig.id}>\n              <Link\n                to={getPageUrl(AwxRoute.InstanceGroupDetails, {\n                  params: {\n                    id: ig.id,\n                  },\n                })}\n              >\n                {ig.name}\n              </Link>\n            </Label>\n          ))}\n        </LabelGroup>\n      </PageDetail>\n      <PageDetail label={t('Forks')}>{prompt?.forks || 0}</PageDetail>\n      <PageDetail label={t('Limit')}>{prompt?.limit}</PageDetail>\n      <PageDetail label={t('Verbosity')}>{verbosityString}</PageDetail>\n      <PageDetail label={t('Timeout')}>{prompt?.timeout || 0}</PageDetail>\n      <PageDetail label={t('Show changes')}>{prompt?.diff_mode ? t`On` : t`Off`}</PageDetail>\n      <PageDetail label={t('Job slicing')}>{prompt?.job_slice_count}</PageDetail>\n      <PageDetail label={t('Labels')} isEmpty={isEmpty(prompt?.labels)}>\n        <LabelGroup>\n          {prompt?.labels?.map((label) => <Label key={label.id}>{label.name}</Label>)}\n        </LabelGroup>\n      </PageDetail>\n      <PageDetail label={t('Job tags')} isEmpty={isEmpty(prompt?.job_tags)}>\n        <LabelGroup>\n          {prompt?.job_tags?.map(({ name }) => <Label key={name}>{name}</Label>)}\n        </LabelGroup>\n      </PageDetail>\n      <PageDetail label={t('Skip tags')} isEmpty={isEmpty(prompt?.skip_tags)}>\n        <LabelGroup>\n          {prompt?.skip_tags?.map(({ name }) => <Label key={name}>{name}</Label>)}\n        </LabelGroup>\n      </PageDetail>\n      <PageDetailCodeEditor label={t('Extra vars')} value={extraVarDetails} />\n    </PageDetails>\n  );\n}\n\nexport function CredentialDetail({ credentialID }: { credentialID: number }) {\n  const { data: credentialData } = useGet<Credential>(\n    awxAPI`/credentials/${credentialID.toString()}/`\n  );\n  if (!credentialData) return null;\n  return <CredentialLabel credential={credentialData} key={credentialID} />;\n}\n\nfunction isEmpty(value: undefined | null | object[] | object | number): boolean {\n  if (value === undefined || value === null) {\n    return true;\n  }\n  if (Array.isArray(value)) {\n    return value.length === 0;\n  }\n  if (typeof value === 'object') {\n    return Object.keys(value).length === 0 || Object.values(value).every(isEmpty);\n  }\n  return false;\n}\n","import { useNavigate, useParams } from 'react-router-dom';\nimport { useGetJobOutputUrl } from '../../../views/jobs/useGetJobOutputUrl';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport {\n  LoadingPage,\n  PageDetail,\n  PageDetails,\n  PageHeader,\n  PageLayout,\n  PageWizard,\n  PageWizardStep,\n  useGetPageUrl,\n  usePageAlertToaster,\n} from '../../../../../framework';\nimport { useTranslation } from 'react-i18next';\nimport { useGet } from '../../../../common/crud/useGet';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { UnifiedJob } from '../../../interfaces/UnifiedJob';\nimport { Job } from '../../../interfaces/Job';\nimport { AwxError } from '../../../common/AwxError';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { awxErrorAdapter } from '../../../common/adapters/awxErrorAdapter';\nimport { CredentialPasswordsStep } from './steps';\nimport { LabelGroup } from '@patternfly/react-core';\nimport { CredentialDetail } from './steps/TemplateLaunchReviewStep';\nexport interface LaunchPayload {\n  credential_passwords: { [key: string]: string };\n}\n\nexport interface RelaunchConfig {\n  passwords_needed_to_start: string[];\n  retry_counts: { all: number; failed: number };\n}\n\nexport function RelaunchTemplate() {\n  const params = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  const getJobOutputUrl = useGetJobOutputUrl();\n  const getPageUrl = useGetPageUrl();\n  const postRequest = usePostRequest<LaunchPayload, UnifiedJob>();\n  const alertToaster = usePageAlertToaster();\n  const { t } = useTranslation();\n  const {\n    data: config,\n    error: configError,\n    refresh: configRefresh,\n  } = useGet<RelaunchConfig>(awxAPI`/jobs/${params?.id || ''}/relaunch/`);\n  const {\n    data: template,\n    error: templateError,\n    refresh: templateRefresh,\n  } = useGet<Job>(awxAPI`/jobs/${params?.id || ''}/`);\n\n  const handleSubmit = async (formValues: LaunchPayload) => {\n    if (formValues) {\n      try {\n        const job = await postRequest(awxAPI`/jobs/${params?.id || ''}/relaunch/`, formValues);\n        if (job) {\n          navigate(getJobOutputUrl(job));\n        }\n      } catch (err) {\n        alertToaster.addAlert({\n          variant: 'danger',\n          title: t('Failure to launch'),\n          children: err instanceof Error && err.message,\n        });\n      }\n    }\n  };\n\n  const refresh = configRefresh || templateRefresh;\n  const error = configError || templateError;\n  if (error) return <AwxError error={error} handleRefresh={refresh} />;\n  if (!config || !template) return <LoadingPage breadcrumbs tabs />;\n  const initialValues: {\n    credential_passwords: { [key: string]: '' };\n  } = {\n    credential_passwords: {},\n  };\n  config.passwords_needed_to_start.forEach((i) => (initialValues['credential_passwords'][i] = ''));\n  const steps: PageWizardStep[] = [\n    {\n      id: 'credential-passwords',\n      label: t('Credential Passwords'),\n      inputs: <CredentialPasswordsStep<RelaunchConfig> config={config} />,\n    },\n    {\n      id: 'review',\n      label: t('Review'),\n      element: (\n        <PageDetails numberOfColumns=\"multiple\">\n          <PageDetail label={t('Name')}>{template.name}</PageDetail>\n          <PageDetail label={t('Credentials')}>\n            <LabelGroup>\n              {template.summary_fields.credentials?.map((credential) => (\n                <CredentialDetail credentialID={credential.id} key={credential.id} />\n              ))}\n            </LabelGroup>\n          </PageDetail>\n        </PageDetails>\n      ),\n    },\n  ];\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Relaunch job with passwords')}\n        breadcrumbs={[\n          { label: t('Jobs'), to: getPageUrl(AwxRoute.Jobs) },\n          {\n            label: template.name,\n            to: getPageUrl(AwxRoute.JobDetails, {\n              params: { job_type: 'playbook', id: params.id },\n            }),\n          },\n        ]}\n      />\n      <PageWizard<LaunchPayload>\n        steps={steps}\n        defaultValue={initialValues}\n        onSubmit={handleSubmit}\n        errorAdapter={awxErrorAdapter}\n      />\n    </PageLayout>\n  );\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport { PageHeader, PageLayout, useGetPageUrl } from '../../../../../framework';\nimport { LoadingPage } from '../../../../../framework/components/LoadingPage';\nimport { PageRoutedTabs } from '../../../../common/PageRoutedTabs';\nimport { useGet, useGetItem } from '../../../../common/crud/useGet';\nimport { AwxError } from '../../../common/AwxError';\nimport { AwxItemsResponse } from '../../../common/AwxItemsResponse';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxActiveUser } from '../../../common/useAwxActiveUser';\nimport { Organization } from '../../../interfaces/Organization';\nimport { SystemJobTemplate } from '../../../interfaces/SystemJobTemplate';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\nexport function ManagementJobPage() {\n  const { t } = useTranslation();\n  const params = useParams<{ id: string }>();\n  const {\n    error,\n    data: systemJobTemplate,\n    refresh,\n  } = useGetItem<SystemJobTemplate>(awxAPI`/system_job_templates`, params.id);\n\n  const getPageUrl = useGetPageUrl();\n  const { activeAwxUser } = useAwxActiveUser();\n\n  const {\n    data: isNotifAdmin,\n    error: isNotifAdminError,\n    refresh: refreshNotifAdmin,\n  } = useGet<AwxItemsResponse<Organization>>(\n    awxAPI`/organizations/?role_level=notification_admin_role`\n  );\n\n  if (error) return <AwxError error={error} handleRefresh={refresh} />;\n  if (isNotifAdminError)\n    return <AwxError error={isNotifAdminError} handleRefresh={refreshNotifAdmin} />;\n\n  if (!(systemJobTemplate && isNotifAdmin)) return <LoadingPage breadcrumbs tabs />;\n\n  const tabs = [{ label: t('Schedules'), page: AwxRoute.ManagementJobSchedules }];\n\n  if (activeAwxUser?.is_system_auditor || (isNotifAdmin && isNotifAdmin.results.length > 0)) {\n    tabs.push({ label: t('Notifications'), page: AwxRoute.ManagementJobNotifications });\n  }\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={systemJobTemplate?.name}\n        breadcrumbs={[\n          { label: t('Management Jobs'), to: getPageUrl(AwxRoute.ManagementJobs) },\n          { label: systemJobTemplate?.name },\n        ]}\n        headerActions={[]}\n      />\n      <PageRoutedTabs\n        backTab={{\n          label: t('Back to Management Jobs'),\n          page: AwxRoute.ManagementJobs,\n          persistentFilterKey: 'management-jobs',\n        }}\n        tabs={tabs}\n        params={{ id: systemJobTemplate.id }}\n      />\n    </PageLayout>\n  );\n}\n","import { t } from 'i18next';\nimport { PageFormSubmitHandler, PageFormTextInput } from '../../../../../framework';\nimport { Modal } from '@patternfly/react-core';\nimport { AwxPageForm } from '../../../common/AwxPageForm';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { SystemJobTemplate } from '../../../interfaces/SystemJobTemplate';\nimport { useGetJobOutputUrl } from '../../../views/jobs/useGetJobOutputUrl';\nimport { useNavigate } from 'react-router-dom';\nimport { UnifiedJob } from '../../../interfaces/UnifiedJob';\n\nexport interface ManagementJobsRetainDataModalProps {\n  id: number;\n}\n\nexport interface ManagementJobRetainDaysInput {\n  extra_vars: {\n    days: number;\n  };\n}\n\nexport function ManagementJobsRetainDataModal(\n  props: ManagementJobsRetainDataModalProps & { popDialog: () => void }\n) {\n  const postRequest = usePostRequest<ManagementJobRetainDaysInput, SystemJobTemplate>();\n  const navigate = useNavigate();\n  const getJobOutputUrl = useGetJobOutputUrl();\n\n  const onSubmit: PageFormSubmitHandler<ManagementJobRetainDaysInput> = async (\n    retainInput: ManagementJobRetainDaysInput\n  ) => {\n    const newJob = await postRequest(\n      awxAPI`/system_job_templates/${String(props.id)}/launch/`,\n      retainInput\n    );\n    props.popDialog();\n    navigate(getJobOutputUrl(newJob as unknown as UnifiedJob));\n  };\n\n  const onCancel = () => props.popDialog();\n\n  const MAX_RETENTION = 99999;\n  const MIN_RETENTION = 0;\n\n  return (\n    <Modal\n      aria-label={t`Launch management job`}\n      variant=\"small\"\n      position=\"default\"\n      title={t`Launch management job`}\n      titleIconVariant=\"info\"\n      hasNoBodyWrapper\n      isOpen\n      onClose={() => props.popDialog()}\n    >\n      <AwxPageForm\n        submitText={t('Launch')}\n        onSubmit={onSubmit}\n        cancelText={t('Cancel')}\n        onCancel={onCancel}\n        singleColumn\n        defaultValue={{ extra_vars: { days: 30 } }}\n      >\n        <span>{t('Set how many days of data should be retained.')}</span>\n        <PageFormTextInput\n          name=\"extra_vars.days\"\n          label={t('Retention Days')}\n          placeholder={t('Enter days')}\n          isRequired\n          type=\"number\"\n          min={MIN_RETENTION}\n          max={MAX_RETENTION}\n        />\n      </AwxPageForm>\n    </Modal>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { PageHeader, PageLayout, PageTable } from '../../../../framework';\nimport { SystemJobTemplate } from '../../interfaces/SystemJobTemplate';\nimport { useAwxConfig } from '../../common/useAwxConfig';\nimport { useGetDocsUrl } from '../../common/util/useGetDocsUrl';\nimport { useManagementJobFilters } from './hooks/useManagementJobFilters';\nimport { useManagementJobColumns } from './hooks/useManagementJobColumns';\nimport { useAwxView } from '../../common/useAwxView';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { useManagementJobRowActions } from './hooks/useManagementJobRowActions';\n\nexport function ManagementJobs() {\n  const { t } = useTranslation();\n  const config = useAwxConfig();\n  const toolbarFilters = useManagementJobFilters();\n  const tableColumns = useManagementJobColumns();\n  const rowActions = useManagementJobRowActions();\n\n  const view = useAwxView<SystemJobTemplate>({\n    url: awxAPI`/system_job_templates/`,\n    toolbarFilters,\n    tableColumns,\n  });\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Management Jobs')}\n        description={t(\n          'Management jobs assist in the cleaning of old data including system tracking information, tokens, job histories, and activity streams.'\n        )}\n        titleHelpTitle={t('Management Jobs')}\n        titleHelp={t(\n          'Management jobs assist in the cleaning of old data including system tracking information, tokens, job histories, and activity streams.'\n        )}\n        titleDocLink={useGetDocsUrl(config, 'managementJobs')}\n      />\n      <PageTable<SystemJobTemplate>\n        id=\"awx-management-jobs\"\n        toolbarFilters={toolbarFilters}\n        tableColumns={tableColumns}\n        rowActions={rowActions}\n        errorStateTitle={t('Error loading management jobs')}\n        emptyStateTitle=\"No management jobs yet\"\n        {...view}\n      />\n    </PageLayout>\n  );\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport { RocketIcon } from '@patternfly/react-icons';\nimport { useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { IPageAction, PageActionSelection, PageActionType } from '../../../../../framework';\nimport { SystemJobTemplate } from '../../../interfaces/SystemJobTemplate';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useGetJobOutputUrl } from '../../../views/jobs/useGetJobOutputUrl';\nimport { useNavigate } from 'react-router-dom';\nimport { UnifiedJob } from '../../../interfaces/UnifiedJob';\nimport { useManagementJobPrompt } from './useManagementJobPrompt';\n\nexport function useManagementJobRowActions() {\n  const { t } = useTranslation();\n\n  const openManagementJobsModal = useManagementJobPrompt();\n  const postRequest = usePostRequest();\n  const getJobOutputUrl = useGetJobOutputUrl();\n  const navigate = useNavigate();\n\n  const launchManagementJob = useCallback(\n    async (managementJob: SystemJobTemplate) => {\n      if (\n        managementJob.job_type === 'cleanup_activitystream' ||\n        managementJob.job_type === 'cleanup_jobs'\n      ) {\n        openManagementJobsModal({ id: managementJob.id });\n      } else {\n        const newJob = await postRequest(\n          awxAPI`/system_job_templates/${String(managementJob.id)}/launch/`,\n          {}\n        );\n        navigate(getJobOutputUrl(newJob as UnifiedJob));\n      }\n    },\n    [openManagementJobsModal, getJobOutputUrl, navigate, postRequest]\n  );\n\n  return useMemo<IPageAction<SystemJobTemplate>[]>(() => {\n    const actions: IPageAction<SystemJobTemplate>[] = [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        variant: ButtonVariant.secondary,\n        isPinned: true,\n        icon: RocketIcon,\n        label: t(`Launch management job`),\n        onClick: launchManagementJob,\n      },\n    ];\n    return actions;\n  }, [t, launchManagementJob]);\n}\n","import { useState, useEffect } from 'react';\nimport { usePageDialogs } from '../../../../../framework';\nimport {\n  ManagementJobsRetainDataModalProps,\n  ManagementJobsRetainDataModal,\n} from '../components/ManagementJobsRetainDataModal';\n\nexport function useManagementJobPrompt() {\n  const { pushDialog, popDialog } = usePageDialogs();\n  const [props, setProps] = useState<ManagementJobsRetainDataModalProps>();\n  useEffect(() => {\n    if (props) {\n      pushDialog(<ManagementJobsRetainDataModal {...{ ...props, popDialog: popDialog }} />);\n    } else {\n      popDialog();\n    }\n  }, [props, pushDialog, popDialog]);\n  return setProps;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ITableColumn, TextCell } from '../../../../../framework';\nimport { NotificationTemplate } from '../../../interfaces/NotificationTemplate';\nimport { StatusCell } from '../../../../common/Status';\nimport { useOrganizationNameColumn } from '../../../../common/columns';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useGetPageUrl } from '../../../../../framework';\nimport { RunningNotificationsType } from './useNotifiersRowActions';\n\nexport function useNotifiersColumns(params?: { runningNotifications?: RunningNotificationsType }) {\n  const { t } = useTranslation();\n\n  const organizationColumn = useOrganizationNameColumn(AwxRoute.OrganizationDetails);\n  const getPageUrl = useGetPageUrl();\n  const runningNotifications = params?.runningNotifications;\n\n  const tableColumns = useMemo<ITableColumn<NotificationTemplate>[]>(\n    () => [\n      {\n        header: t('Name'),\n        cell: (template: NotificationTemplate) => (\n          <TextCell\n            text={template.name}\n            to={getPageUrl(AwxRoute.NotificationTemplateDetails, {\n              params: { id: template.id },\n            })}\n          />\n        ),\n\n        sort: 'name',\n        card: 'name',\n        list: 'name',\n        defaultSortDirection: 'asc',\n        defaultSort: true,\n      },\n      {\n        header: t('Status'),\n        cell: (template: NotificationTemplate) => {\n          if (runningNotifications && runningNotifications[template.id]) {\n            return <StatusCell status={'running'}></StatusCell>;\n          }\n          return (\n            <StatusCell\n              status={\n                template.summary_fields?.recent_notifications &&\n                template.summary_fields.recent_notifications.length > 0\n                  ? template.summary_fields?.recent_notifications[0].status\n                  : undefined\n              }\n            />\n          );\n        },\n      },\n      {\n        header: t('Type'),\n        cell: (template: NotificationTemplate) => <TextCell text={template.notification_type} />,\n        sort: 'notification_type',\n      },\n      organizationColumn,\n    ],\n    [t, organizationColumn, getPageUrl, runningNotifications]\n  );\n  return tableColumns;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { compareStrings } from '../../../../../framework';\nimport { useNameColumn } from '../../../../common/columns';\nimport { getItemKey, requestDelete } from '../../../../common/crud/Data';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { useNotifiersColumns } from './useNotifiersColumns';\nimport { NotificationTemplate } from '../../../interfaces/NotificationTemplate';\n\nexport function useDeleteNotifiers(onComplete: (notification: NotificationTemplate[]) => void) {\n  const { t } = useTranslation();\n  const confirmationColumns = useNotifiersColumns();\n  const deleteActionNameColumn = useNameColumn({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo(() => [deleteActionNameColumn], [deleteActionNameColumn]);\n  const bulkAction = useAwxBulkConfirmation<NotificationTemplate>();\n  const deleteNotifications = (notification: NotificationTemplate[]) => {\n    bulkAction({\n      title: t('Delete notifiers', { count: notification.length }),\n      confirmText: t('Yes, I confirm that I want to delete these {{count}} notifiers.', {\n        count: notification.length,\n      }),\n      actionButtonText: t('Delete notifiers', { count: notification.length }),\n      items: notification.sort((l, r) => compareStrings(l.name, r.name)),\n      keyFn: getItemKey,\n      isDanger: true,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: (notification: NotificationTemplate, signal) =>\n        requestDelete(awxAPI`/notification_templates/${notification.id.toString()}/`, signal),\n    });\n  };\n  return deleteNotifications;\n}\n","import { CopyIcon, PencilAltIcon, BellIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  usePageAlertToaster,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { NotificationTemplate } from '../../../interfaces/NotificationTemplate';\nimport { useDeleteNotifiers } from './useDeleteNotifiers';\nimport { useCopyNotifier } from './useCopyNotifier';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport {\n  cannotCopyResource,\n  cannotDeleteResource,\n  cannotEditResource,\n} from '../../../../common/utils/RBAChelpers';\nimport { postRequest } from '../../../../common/crud/Data';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { ButtonVariant } from '@patternfly/react-core';\n\nexport type RunningNotificationsType = { [key: string]: string };\n\nexport function useNotifiersRowActions(params: {\n  onComplete?: (notification: NotificationTemplate[]) => void;\n  onNotifierCopied?: () => void;\n  onNotifierStartTest?: (template_id: string, notificationId: string) => void;\n  type?: 'detail' | 'list';\n  runningNotifications?: RunningNotificationsType;\n}) {\n  const { onComplete, onNotifierCopied, onNotifierStartTest, type, runningNotifications } = params;\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const deleteNotifiers = useDeleteNotifiers(onComplete || (() => {}));\n  const copyNotifier = useCopyNotifier(onNotifierCopied || (() => {}));\n  const alertToaster = usePageAlertToaster();\n\n  return useMemo<IPageAction<NotificationTemplate>[]>(() => {\n    return [\n      // Edit form not yet implemented\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: PencilAltIcon,\n        variant: ButtonVariant.primary,\n        label: t(`Edit notifier`),\n        onClick: (notification) =>\n          pageNavigate(AwxRoute.EditNotificationTemplate, {\n            params: { id: notification.id },\n          }),\n        isDisabled: (notification) => cannotEditResource(notification, t),\n        isDanger: false,\n        isPinned: true,\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: BellIcon,\n        label: t(`Test notifier`),\n        isDisabled: (notification) => {\n          const found = runningNotifications?.[notification.id];\n          return found !== undefined ? t(`Disabled while test is running.`) : undefined;\n        },\n        onClick: (notification: NotificationTemplate) => {\n          void (async () => {\n            try {\n              const result = await postRequest<{ id: number }>(\n                awxAPI`/notification_templates/${notification.id.toString()}/test/`,\n                {}\n              );\n              onNotifierStartTest?.(notification.id.toString(), result.id.toString());\n            } catch (error) {\n              alertToaster.addAlert({\n                variant: 'danger',\n                title: t('Failed to test notifier'),\n                children: error instanceof Error && error.message,\n              });\n            }\n          })();\n        },\n        isDanger: false,\n        isPinned: true,\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: CopyIcon,\n        label: t(`Copy notifier`),\n        onClick: (notification: NotificationTemplate) => copyNotifier(notification),\n        isDisabled: (notification) => cannotCopyResource(notification, t),\n        isDanger: false,\n        isPinned: false,\n        isHidden: () => type === 'detail',\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: TrashIcon,\n        label: t(`Delete notifier`),\n        onClick: (notification: NotificationTemplate) => deleteNotifiers([notification]),\n        isDisabled: (notification) => cannotDeleteResource(notification, t),\n        isDanger: true,\n      },\n    ];\n  }, [\n    pageNavigate,\n    copyNotifier,\n    deleteNotifiers,\n    type,\n    t,\n    onNotifierStartTest,\n    alertToaster,\n    runningNotifications,\n  ]);\n}\n","import { AlertProps } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { usePageAlertToaster } from '../../../../../framework';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { NotificationTemplate } from '../../../interfaces/NotificationTemplate';\n\nexport function useCopyNotifier(onComplete: () => void) {\n  const { t } = useTranslation();\n  const postRequest = usePostRequest();\n  const alertToaster = usePageAlertToaster();\n\n  const copyNotifier = (notification: NotificationTemplate) => {\n    const alert: AlertProps = {\n      variant: 'success',\n      title: t(`${notification.name} copied.`),\n      timeout: 2000,\n    };\n    postRequest(awxAPI`/notification_templates/${notification.id.toString()}/copy/`, {\n      name: `${notification.name} @ ${new Date()\n        .toTimeString()\n        .replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, '$1')}`,\n    })\n      .then(() => {\n        alertToaster.addAlert(alert);\n      })\n      .catch((error) => {\n        alertToaster.replaceAlert(alert, {\n          variant: 'danger',\n          title: t('Failed to copy notifier'),\n          children: error instanceof Error && error.message,\n        });\n      })\n      .finally(onComplete);\n  };\n  return copyNotifier;\n}\n","import { useState } from 'react';\nimport { RunningNotificationsType } from './useNotifiersRowActions';\nimport { NotificationTemplate } from '../../../interfaces/NotificationTemplate';\nimport { usePageAlertToaster } from '../../../../../framework';\nimport { useTranslation } from 'react-i18next';\n\nexport function useNotificationsWatch() {\n  // key:value = notification_template_id:notification_id\n  const [runningNotifications, setRunningNotifications] = useState<RunningNotificationsType>({});\n  const alertToaster = usePageAlertToaster();\n  const { t } = useTranslation();\n\n  return {\n    runningNotifications,\n    setRunningNotifications,\n    onNotifierStartTest: (template_id: string, notificationId: string) => {\n      const obj = { ...runningNotifications };\n      obj[template_id] = notificationId;\n      setRunningNotifications(obj);\n    },\n    checkNotifiers: (notificationsTemplate: NotificationTemplate[]) => {\n      if (!notificationsTemplate) {\n        return;\n      }\n\n      const obj = { ...runningNotifications };\n      notificationsTemplate.forEach((notificationTemplate) => {\n        // search for notification id\n        const notificationId = runningNotifications[notificationTemplate.id.toString()];\n        const notifications = notificationTemplate.summary_fields?.recent_notifications;\n        const notification = notifications.find(\n          (notification) => notification.id.toString() === notificationId\n        );\n\n        if (notification && notification.status !== 'pending') {\n          alertToaster.addAlert({\n            variant: notification.status === 'failed' ? 'danger' : 'success',\n            title: t('{{name}} (id {{id}})', {\n              name: notificationTemplate.name,\n              id: notificationId,\n            }),\n            children: <div>{notification.error}</div>,\n          });\n\n          delete obj[notificationTemplate.id];\n        }\n      });\n      setRunningNotifications(obj);\n    },\n  };\n}\n","import { useTranslation } from 'react-i18next';\nimport { PageHeader, PageLayout, PageTable, usePageNavigate } from '../../../../framework';\nimport { useAwxConfig } from '../../common/useAwxConfig';\nimport { useGetDocsUrl } from '../../common/util/useGetDocsUrl';\nimport { ActivityStreamIcon } from '../../common/ActivityStreamIcon';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { useNotifiersFilters } from './hooks/useNotifiersFilters';\nimport { useNotifiersColumns } from './hooks/useNotifiersColumns';\nimport { NotificationTemplate } from '../../interfaces/NotificationTemplate';\nimport { useAwxView } from '../../common/useAwxView';\nimport { useNotifiersToolbarActions } from './hooks/useNotifiersToolbarActions';\nimport { useNotifiersRowActions } from './hooks/useNotifiersRowActions';\nimport { useOptions } from '../../../common/crud/useOptions';\nimport { ActionsResponse, OptionsResponse } from '../../interfaces/OptionsResponse';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { useNotificationsWatch } from './hooks/useNotificationsWatch';\nimport { useEffect } from 'react';\n\nexport function Notifiers() {\n  const { t } = useTranslation();\n  const { runningNotifications, onNotifierStartTest, checkNotifiers } = useNotificationsWatch();\n  const toolbarFilters = useNotifiersFilters();\n  const tableColumns = useNotifiersColumns({ runningNotifications });\n  const view = useAwxView<NotificationTemplate>({\n    url: awxAPI`/notification_templates/`,\n    toolbarFilters,\n    tableColumns,\n  });\n  const config = useAwxConfig();\n  const pageNavigate = usePageNavigate();\n\n  const toolbarActions = useNotifiersToolbarActions(view.unselectItemsAndRefresh);\n\n  const rowActions = useNotifiersRowActions({\n    onComplete: view.unselectItemsAndRefresh,\n    onNotifierCopied: () => {\n      void view.refresh();\n    },\n    onNotifierStartTest,\n    type: 'list',\n    runningNotifications,\n  });\n\n  const notificationsOptions = useOptions<OptionsResponse<ActionsResponse>>(\n    awxAPI`/notification_templates/`\n  ).data;\n  const canAddNotificationTemplate = Boolean(\n    notificationsOptions && notificationsOptions.actions && notificationsOptions.actions['POST']\n  );\n\n  useEffect(() => {\n    if (view.pageItems) {\n      checkNotifiers(view.pageItems);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [view.pageItems]);\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Notifiers')}\n        description={t('Configure custom notifications to be sent based on predefined events.')}\n        titleHelpTitle={t('Notifiers')}\n        titleHelp={t('Configure custom notifications to be sent based on predefined events.')}\n        titleDocLink={useGetDocsUrl(config, 'notifiers')}\n        headerActions={<ActivityStreamIcon type={'notification_template'} />}\n      />\n      <PageTable\n        id=\"awx-host-metrics-table\"\n        toolbarFilters={toolbarFilters}\n        tableColumns={tableColumns}\n        toolbarActions={toolbarActions}\n        rowActions={rowActions}\n        errorStateTitle={t('Error loading notifiers')}\n        emptyStateTitle={\n          canAddNotificationTemplate\n            ? t('No notifiers found.')\n            : t('You do not have permission to create notifiers.')\n        }\n        emptyStateDescription={\n          canAddNotificationTemplate\n            ? t('Please create notifiers to populate this list.')\n            : t(\n                'Please contact your organization administrator if there is an issue with your access.'\n              )\n        }\n        emptyStateButtonIcon={<PlusCircleIcon />}\n        emptyStateButtonText={canAddNotificationTemplate ? t('Create notifier') : undefined}\n        emptyStateButtonClick={\n          canAddNotificationTemplate\n            ? () => pageNavigate(AwxRoute.AddNotificationTemplate)\n            : undefined\n        }\n        {...view}\n      />\n    </PageLayout>\n  );\n}\n","import {\n  useCreatedByToolbarFilter,\n  useModifiedByToolbarFilter,\n} from '../../../common/awx-toolbar-filters';\nimport { useDynamicToolbarFilters } from '../../../common/useDynamicFilters';\n\nexport function useNotifiersFilters() {\n  const createdByToolbarFilter = useCreatedByToolbarFilter();\n  const modifiedByToolbarFilter = useModifiedByToolbarFilter();\n  const toolbarFilters = useDynamicToolbarFilters({\n    optionsPath: 'notification_templates',\n    preSortedKeys: ['name', 'id', 'created-by', 'modified-by'],\n    preFilledValueKeys: {\n      name: { apiPath: 'notification_templates' },\n      id: { apiPath: 'notification_templates' },\n    },\n    additionalFilters: [createdByToolbarFilter, modifiedByToolbarFilter],\n  });\n  return toolbarFilters;\n}\n","import { PlusCircleIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { useDeleteNotifiers } from './useDeleteNotifiers';\nimport { NotificationTemplate } from '../../../interfaces/NotificationTemplate';\nimport { ButtonVariant } from '@patternfly/react-core';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { cannotDeleteResources } from '../../../../common/utils/RBAChelpers';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { ActionsResponse, OptionsResponse } from '../../../interfaces/OptionsResponse';\nimport { awxAPI } from '../../../common/api/awx-utils';\n\nexport function useNotifiersToolbarActions(\n  onComplete: (notification: NotificationTemplate[]) => void\n) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const deleteNotifiers = useDeleteNotifiers(onComplete);\n\n  const notificationsOptions = useOptions<OptionsResponse<ActionsResponse>>(\n    awxAPI`/notification_templates/`\n  ).data;\n  const canAddNotificationTemplate = Boolean(\n    notificationsOptions && notificationsOptions.actions && notificationsOptions.actions['POST']\n  );\n\n  return useMemo<IPageAction<NotificationTemplate>[]>(\n    () => [\n      // Add form not yet implemented\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.None,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        icon: PlusCircleIcon,\n        label: t('Create notifier'),\n        onClick: () => pageNavigate(AwxRoute.AddNotificationTemplate),\n        isDisabled: () =>\n          canAddNotificationTemplate\n            ? undefined\n            : t(\n                `You do not have permission to add notifiers. Please contact your organization administrator if there is an issue with your access.`\n              ),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: TrashIcon,\n        label: t('Delete notifiers'),\n        onClick: deleteNotifiers,\n        isDisabled: (notification) => cannotDeleteResources(notification, t),\n        isDanger: true,\n      },\n    ],\n    [canAddNotificationTemplate, pageNavigate, deleteNotifiers, t]\n  );\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  PageFormCheckbox,\n  PageFormDataEditor,\n  PageFormTextArea,\n  PageFormTextInput,\n} from '../../../../framework';\n\nimport { NotificationTemplate } from '../../interfaces/NotificationTemplate';\n\nimport { PageFormSingleSelect } from '../../../../framework/PageForm/Inputs/PageFormSingleSelect';\nimport { PageFormGroup } from '../../../../framework/PageForm/Inputs/PageFormGroup';\nimport { TFunction } from 'i18next';\nimport { FieldPathByValue } from 'react-hook-form';\n\nexport function InnerForm(props: { notification_type: string }) {\n  const notification_type = props.notification_type;\n  if (notification_type === 'email') {\n    return <EmailForm />;\n  }\n\n  if (notification_type === 'slack') {\n    return <SlackForm />;\n  }\n\n  if (notification_type === 'twilio') {\n    return <TwilioForm />;\n  }\n\n  if (notification_type === 'pagerduty') {\n    return <PagerdutyForm />;\n  }\n\n  if (notification_type === 'grafana') {\n    return <GrafanaForm />;\n  }\n\n  if (notification_type === 'webhook') {\n    return <WebhookForm />;\n  }\n\n  if (notification_type === 'mattermost') {\n    return <MattermostForm />;\n  }\n\n  if (notification_type === 'rocketchat') {\n    return <RocketchatForm />;\n  }\n\n  if (notification_type === 'irc') {\n    return <IrcForm />;\n  }\n\n  return <></>;\n}\n\nfunction EmailForm() {\n  const { t } = useTranslation();\n  return (\n    <>\n      <PageFormTextInput<NotificationTemplate>\n        type={'text'}\n        name={'notification_configuration.username'}\n        label={t('Username')}\n      />\n\n      <PageFormTextInput<NotificationTemplate>\n        type={'password'}\n        name={'notification_configuration.password'}\n        label={t('Password')}\n      />\n\n      <PageFormTextInput<NotificationTemplate>\n        type={'text'}\n        name={'notification_configuration.host'}\n        label={t('Host')}\n        isRequired\n      />\n\n      <PageFormTextArea<NotificationTemplate>\n        name={'notification_configuration.recipients'}\n        label={t('Recipient list')}\n        isRequired\n        labelHelp={getLabelHelp('email', 'recipients', t)}\n      />\n\n      <PageFormTextInput<NotificationTemplate>\n        type={'text'}\n        name={'notification_configuration.sender'}\n        label={t('Sender email')}\n        isRequired\n        validate={(value) => validateEmail(value, t)}\n      />\n\n      <PageFormTextInput<NotificationTemplate>\n        type={'number'}\n        name={'notification_configuration.port'}\n        label={t('Port')}\n        isRequired\n        validate={(value) => validateNumber(value, 1, 65535, t)}\n      />\n\n      <PageFormTextInput<NotificationTemplate>\n        type={'number'}\n        name={'notification_configuration.timeout'}\n        label={t('Timeout')}\n        isRequired\n        validate={(value) => validateNumber(value, 1, 120, t)}\n        labelHelp={getLabelHelp('email', 'timeout', t)}\n      />\n\n      <PageFormGroup\n        label={t('Email options ')}\n        labelHelpTitle={t('Email options')}\n        labelHelp={\n          <Trans>\n            See Django{' '}\n            <a href=\"https://docs.djangoproject.com/en/4.0/ref/settings/#std:setting-EMAIL_USE_TLS\">\n              documentation\n            </a>{' '}\n            for more information.\n          </Trans>\n        }\n      >\n        <PageFormCheckbox<NotificationTemplate>\n          name={'notification_configuration.use_tls'}\n          label={t('Use TLS')}\n        />\n\n        <PageFormCheckbox<NotificationTemplate>\n          name={'notification_configuration.use_ssl'}\n          label={t('Use SSL')}\n        />\n      </PageFormGroup>\n    </>\n  );\n}\n\nfunction SlackForm() {\n  const { t } = useTranslation();\n  return (\n    <>\n      <PageFormTextInput<NotificationTemplate>\n        type={'password'}\n        name={'notification_configuration.token'}\n        label={t('Token')}\n        isRequired\n      />\n\n      <PageFormTextArea<NotificationTemplate>\n        name={'notification_configuration.channels'}\n        label={t('Destination channels')}\n        isRequired\n        labelHelp={getLabelHelp('slack', 'channels', t)}\n      />\n\n      <PageFormTextInput<NotificationTemplate>\n        name={'notification_configuration.hex_color'}\n        label={t('Notification color')}\n        labelHelp={getLabelHelp('slack', 'hex_color', t)}\n      />\n    </>\n  );\n}\n\nfunction TwilioForm() {\n  const { t } = useTranslation();\n  return (\n    <>\n      <PageFormTextInput<NotificationTemplate>\n        type={'text'}\n        name={'notification_configuration.account_sid'}\n        label={t('Account SID')}\n        isRequired\n      />\n\n      <PageFormTextInput<NotificationTemplate>\n        type={'password'}\n        name={'notification_configuration.account_token'}\n        label={t('Account token')}\n        isRequired\n      />\n\n      <PageFormTextInput<NotificationTemplate>\n        type={'text'}\n        name={'notification_configuration.from_number'}\n        label={t('Source phone number')}\n        validate={(value) => twilioPhoneNumber(value, t)}\n        isRequired\n        labelHelp={getLabelHelp('twilio', 'from_number', t)}\n      />\n\n      <PageFormTextArea<NotificationTemplate>\n        name={'notification_configuration.to_numbers'}\n        label={t('Destination SMS numbers')}\n        validate={(value) => twilioPhoneNumber(value, t)}\n        labelHelp={getLabelHelp('twilio', 'to_numbers', t)}\n        isRequired\n      />\n    </>\n  );\n}\n\nfunction PagerdutyForm() {\n  const { t } = useTranslation();\n  return (\n    <>\n      <PageFormTextInput<NotificationTemplate>\n        type={'text'}\n        name={'notification_configuration.subdomain'}\n        label={t('Pagerduty subdomain')}\n        isRequired\n      />\n\n      <PageFormTextInput<NotificationTemplate>\n        type={'password'}\n        name={'notification_configuration.token'}\n        label={t('API token')}\n        isRequired\n      />\n\n      <PageFormTextInput<NotificationTemplate>\n        type={'text'}\n        name={'notification_configuration.service_key'}\n        label={t('API service/integration key')}\n        isRequired\n      />\n\n      <PageFormTextInput<NotificationTemplate>\n        type={'text'}\n        name={'notification_configuration.client_name'}\n        label={t('Client identifier')}\n        isRequired\n      />\n    </>\n  );\n}\n\nfunction GrafanaForm() {\n  const { t } = useTranslation();\n  return (\n    <>\n      <PageFormTextInput<NotificationTemplate>\n        type={'text'}\n        name={'notification_configuration.grafana_url'}\n        label={t('Grafana URL')}\n        labelHelp={getLabelHelp('grafana', 'grafana_url', t)}\n        isRequired\n      />\n\n      <PageFormTextInput<NotificationTemplate>\n        type={'password'}\n        name={'notification_configuration.grafana_key'}\n        label={t('Grafana API key')}\n        isRequired\n      />\n\n      <PageFormTextInput<NotificationTemplate>\n        name={'notification_configuration.dashboardId'}\n        label={t('ID of the dashboard')}\n      />\n\n      <PageFormTextInput<NotificationTemplate>\n        name={'notification_configuration.panelId'}\n        label={t('ID of the panel')}\n      />\n\n      <PageFormTextArea<NotificationTemplate>\n        name={'notification_configuration.annotation_tags'}\n        label={t('Tags for the annotation')}\n        labelHelp={getLabelHelp('grafana', 'annotation_tags', t)}\n      />\n\n      <PageFormCheckbox<NotificationTemplate>\n        name={'notification_configuration.grafana_no_verify_ssl'}\n        label={t('Disable SSL verification')}\n      />\n    </>\n  );\n}\n\nfunction WebhookForm() {\n  const { t } = useTranslation();\n  const headersPath = 'notification_configuration.headers' as FieldPathByValue<\n    NotificationTemplate,\n    string | object | null | undefined\n  >;\n\n  return (\n    <>\n      <PageFormTextInput<NotificationTemplate>\n        type={'text'}\n        name={'notification_configuration.username'}\n        label={t('Username')}\n      />\n\n      <PageFormTextInput<NotificationTemplate>\n        type={'password'}\n        name={'notification_configuration.password'}\n        label={t('Basic auth password')}\n      />\n\n      <PageFormTextInput<NotificationTemplate>\n        type={'text'}\n        name={'notification_configuration.url'}\n        label={t('Target URL')}\n        isRequired\n        validate={(item) => validateUrl(item, t)}\n      />\n\n      <PageFormCheckbox<NotificationTemplate>\n        name={'notification_configuration.disable_ssl_verification'}\n        label={t('Disable SSL verification ')}\n      />\n\n      <PageFormDataEditor<NotificationTemplate>\n        name={headersPath}\n        label={t('HTTP headers')}\n        format=\"object\"\n        labelHelp={getLabelHelp('webhook', 'headers', t)}\n        labelHelpTitle={t('HTTP headers')}\n      />\n\n      <PageFormSingleSelect<NotificationTemplate>\n        name={'notification_configuration.http_method'}\n        label={t('HTTP method')}\n        placeholder={t('Choose an HTTP method')}\n        isRequired\n        options={[\n          { label: 'POST', value: 'POST' },\n          { label: 'PUT', value: 'PUT' },\n        ]}\n      />\n    </>\n  );\n}\n\nfunction MattermostForm() {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <PageFormTextInput<NotificationTemplate>\n        type={'text'}\n        name={'notification_configuration.mattermost_url'}\n        label={t('Target URL')}\n        isRequired\n        validate={(item) => validateUrl(item, t)}\n      />\n\n      <PageFormTextInput<NotificationTemplate>\n        type={'text'}\n        name={'notification_configuration.mattermost_username'}\n        label={t('Username')}\n      />\n\n      <PageFormTextInput<NotificationTemplate>\n        type={'text'}\n        name={'notification_configuration.mattermost_channel'}\n        label={t('Channel')}\n      />\n\n      <PageFormTextInput<NotificationTemplate>\n        type={'text'}\n        name={'notification_configuration.mattermost_icon_url'}\n        label={t('Icon URL')}\n        validate={(item) => validateUrl(item, t)}\n      />\n\n      <PageFormCheckbox<NotificationTemplate>\n        name={'notification_configuration.mattermost_no_verify_ssl'}\n        label={t('Verify SSL')}\n      />\n    </>\n  );\n}\n\nfunction RocketchatForm() {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <PageFormTextInput<NotificationTemplate>\n        type={'text'}\n        name={'notification_configuration.rocketchat_url'}\n        label={t('Target URL')}\n        isRequired\n        validate={(item) => validateUrl(item, t)}\n      />\n\n      <PageFormTextInput<NotificationTemplate>\n        type={'text'}\n        name={'notification_configuration.rocketchat_username'}\n        label={t('Username')}\n      />\n\n      <PageFormTextInput<NotificationTemplate>\n        type={'text'}\n        name={'notification_configuration.rocketchat_icon_url'}\n        label={t('Icon URL')}\n        validate={(item) => validateUrl(item, t)}\n      />\n\n      <PageFormCheckbox<NotificationTemplate>\n        name={'notification_configuration.rocketchat_no_verify_ssl'}\n        label={t('Disable SSL verification')}\n      />\n    </>\n  );\n}\n\nfunction IrcForm() {\n  const { t } = useTranslation();\n  return (\n    <>\n      <PageFormTextInput<NotificationTemplate>\n        type={'password'}\n        name={'notification_configuration.password'}\n        label={t('IRC server password')}\n      />\n\n      <PageFormTextInput<NotificationTemplate>\n        type=\"number\"\n        name={'notification_configuration.port'}\n        label={t('IRC server port')}\n        isRequired\n      />\n\n      <PageFormTextInput<NotificationTemplate>\n        type={'text'}\n        name={'notification_configuration.server'}\n        label={t('IRC server address')}\n        isRequired\n        validate={(item) => validateUrl(item, t)}\n      />\n\n      <PageFormTextInput<NotificationTemplate>\n        type={'text'}\n        name={'notification_configuration.nickname'}\n        label={t('IRC nick')}\n        isRequired\n      />\n\n      <PageFormTextArea<NotificationTemplate>\n        name={'notification_configuration.targets'}\n        label={t('Destination channels or users')}\n        isRequired\n        labelHelp={getLabelHelp('irc', 'targets', t)}\n      />\n\n      <PageFormCheckbox<NotificationTemplate>\n        name={'notification_configuration.use_ssl'}\n        label={t('Disable SSL verification ')}\n      />\n    </>\n  );\n}\n\nexport function getLabelHelp(\n  notification_type: string,\n  key: string,\n  t: TFunction<'translation', undefined>\n) {\n  if (notification_type === 'email' && key === 'recipients') {\n    return t(\n      'Use one email address per line to create a recipient list for this type of notification.'\n    );\n  }\n\n  if (notification_type === 'email' && key === 'timeout') {\n    return t(\n      'The amount of time (in seconds) before the email notification stops trying to reach the host and times out. Ranges from 1 to 120 seconds.'\n    );\n  }\n\n  if (notification_type === 'slack' && key === 'channels') {\n    return (\n      <Trans>\n        One Slack channel per line. The pound symbol (#) is required for channels. To respond to or\n        start a thread to a specific message add the parent message Id to the channel where the\n        parent message Id is 16 digits. A dot (.) must be manually inserted after the 10th digit.\n        ie:#destination-channel, 1231257890.006423. See Slack{' '}\n        <a href=\"https://api.slack.com/messaging/retrieving#individual_messages\">documentation</a>{' '}\n        for more information.\n      </Trans>\n    );\n  }\n\n  if (notification_type === 'slack' && key === 'hex_color') {\n    return t(\n      'Specify a notification color. Acceptable colors are hex color code (example: #3af or #789abc).'\n    );\n  }\n\n  if (notification_type === 'twilio' && key === 'from_number') {\n    return t(\n      'The number associated with the \"Messaging Service\" in Twilio with the format +18005550199.'\n    );\n  }\n\n  if (notification_type === 'twilio' && key === 'to_numbers') {\n    return t(\n      'Use one phone number per line to specify where to route SMS messages. Phone numbers should be formatted +11231231234.'\n    );\n  }\n\n  if (notification_type === 'grafana' && key === 'grafana_url') {\n    return t(\n      'The base URL of the Grafana server - the /api/annotations endpoint will be added automatically to the base Grafana URL.'\n    );\n  }\n\n  if (notification_type === 'grafana' && key === 'annotation_tags') {\n    return t('Use one annotation tag per line, without commas.');\n  }\n\n  if (notification_type === 'webhook' && key === 'headers') {\n    return t(\n      'Specify HTTP Headers in JSON or YAML format. Refer to the Ansible Controller documentation for example syntax.'\n    );\n  }\n\n  if (notification_type === 'irc' && key === 'targets') {\n    return t(\n      'Use one IRC channel or username per line. The pound symbol (#) for channels, and the at (@) symbol for users, are not required.'\n    );\n  }\n\n  return null;\n}\n\nfunction validateNumber(\n  str: string,\n  min: number,\n  max: number,\n  t: TFunction<'translation', undefined>\n) {\n  const val = Number.parseInt(str, 10);\n  if (val >= min && val <= max) {\n    return undefined;\n  }\n\n  return t('This field must be a number and have a value between {{min}} and {{max}}', {\n    min,\n    max,\n  });\n}\n\nexport function twilioPhoneNumber(value: string, t: TFunction<'translation', undefined>) {\n  if (value === '') {\n    return undefined;\n  }\n\n  const phoneNumbers = value?.split('\\n');\n  let error = undefined;\n\n  phoneNumbers?.forEach((v) => {\n    if (v === '') {\n      return;\n    }\n\n    if (!/^\\s*(?:\\+?(\\d{1,3}))?[. (]*(\\d{7,12})$/.test(v)) {\n      error = t('Please enter valid phone numbers.');\n    }\n  });\n  return error;\n}\n\nfunction validateEmail(value: string, t: TFunction<'translation', undefined>) {\n  // copied from old app to keep app consistent\n  // This isn't a perfect validator. It's likely to let a few\n  // invalid (though unlikely) email addresses through.\n\n  // This is ok, because the server will always do strict validation for us.\n\n  if (value === '') {\n    return undefined;\n  }\n  const splitVals = value?.split('@');\n\n  if (splitVals.length >= 2) {\n    if (splitVals[0] && splitVals[1]) {\n      // We get here if the string has an '@' that is enclosed by\n      // non-empty substrings\n      return undefined;\n    }\n  }\n\n  return t('Invalid email address');\n}\n\nexport function validateUrl(value: string, t: TFunction<'translation', undefined>) {\n  if (!value) {\n    return undefined;\n  }\n  // URL regex from https://urlregex.com/\n  if (\n    // eslint-disable-next-line max-len\n    !/((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w\\-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)/.test(\n      value\n    )\n  ) {\n    return t`Please enter a valid URL`;\n  }\n  return undefined;\n}\n","import { useFormContext } from 'react-hook-form';\nimport { PageFormTextArea } from '../../../../framework';\nimport { useTranslation } from 'react-i18next';\nimport { useState } from 'react';\n\nimport { PageFormTextInput } from '../../../../framework';\n\nimport { NotificationTemplate } from '../../interfaces/NotificationTemplate';\nimport { NotificationTemplateEdit } from './NotifierForm';\nimport { getDefaultMessages } from './notifierFormMessagesHelpers';\n\nexport function NotifierFormMessages(props: {\n  customize_messages: boolean;\n  data: NotificationTemplate | NotificationTemplateEdit | undefined;\n}) {\n  const { t } = useTranslation();\n  const formContext = useFormContext<NotificationTemplate>();\n  const notification_type = formContext.getValues('notification_type');\n  const [oldType, setOldType] = useState('');\n\n  let type_changed = false;\n\n  if (oldType) {\n    if (notification_type !== oldType) {\n      if (oldType !== '') {\n        type_changed = true;\n      }\n      setOldType(notification_type || '');\n    }\n  }\n\n  let hasMessages = true;\n  let hasBody = false;\n\n  if (notification_type === 'email' || notification_type === 'pagerduty') {\n    hasBody = true;\n  }\n\n  if (notification_type === 'webhook') {\n    hasBody = true;\n    hasMessages = false;\n  }\n\n  const { data, customize_messages } = props;\n\n  const defaultMessages = getDefaultMessages(notification_type);\n  const setValue = formContext.setValue;\n  const getValues = formContext.getValues;\n\n  if (type_changed && customize_messages === true) {\n    setValue('messages', defaultMessages);\n  }\n\n  if (customize_messages === true && type_changed === false) {\n    // For error.message\n    if (hasMessages) {\n      if (!data?.messages?.error?.message) {\n        setValue('messages.error.message', defaultMessages.error.message);\n      } else {\n        if (!getValues('messages.error.message')) {\n          setValue('messages.error.message', data.messages.error.message);\n        }\n      }\n    }\n\n    if (hasBody) {\n      // For error.body\n      if (!data?.messages?.error?.body) {\n        setValue('messages.error.body', defaultMessages.error.body);\n      } else {\n        if (!getValues('messages.error.body')) {\n          setValue('messages.error.body', data.messages.error.body);\n        }\n      }\n    }\n\n    if (hasMessages) {\n      // For started.message\n      if (!data?.messages?.started?.message) {\n        setValue('messages.started.message', defaultMessages.started.message);\n      } else {\n        if (!getValues('messages.started.message')) {\n          setValue('messages.started.message', data.messages.started.message);\n        }\n      }\n    }\n\n    if (hasBody) {\n      // For started.body\n      if (!data?.messages?.started?.body) {\n        setValue('messages.started.body', defaultMessages.started.body);\n      } else {\n        if (!getValues('messages.started.body')) {\n          setValue('messages.started.body', data.messages.started.body);\n        }\n      }\n    }\n\n    if (hasMessages) {\n      // For success.message\n      if (!data?.messages?.success?.message) {\n        setValue('messages.success.message', defaultMessages.success.message);\n      } else {\n        if (!getValues('messages.success.message')) {\n          setValue('messages.success.message', data.messages.success.message);\n        }\n      }\n    }\n\n    if (hasBody) {\n      // For success.body\n      if (!data?.messages?.success?.body) {\n        setValue('messages.success.body', defaultMessages.success.body);\n      } else {\n        if (!getValues('messages.success.body')) {\n          setValue('messages.success.body', data.messages.success.body);\n        }\n      }\n    }\n\n    if (hasMessages) {\n      // For workflow_approval.approved.message\n      if (!data?.messages?.workflow_approval?.approved?.message) {\n        setValue(\n          'messages.workflow_approval.approved.message',\n          defaultMessages.workflow_approval.approved.message\n        );\n      } else {\n        if (!getValues('messages.workflow_approval.approved.message')) {\n          setValue(\n            'messages.workflow_approval.approved.message',\n            data.messages.workflow_approval.approved.message\n          );\n        }\n      }\n    }\n\n    if (hasBody) {\n      // For workflow_approval.approved.body\n      if (!data?.messages?.workflow_approval?.approved?.body) {\n        setValue(\n          'messages.workflow_approval.approved.body',\n          defaultMessages.workflow_approval.approved.body\n        );\n      } else {\n        if (!getValues('messages.workflow_approval.approved.body')) {\n          setValue(\n            'messages.workflow_approval.approved.body',\n            data.messages.workflow_approval.approved.body\n          );\n        }\n      }\n    }\n\n    if (hasMessages) {\n      // For workflow_approval.denied.message\n      if (!data?.messages?.workflow_approval?.denied?.message) {\n        setValue(\n          'messages.workflow_approval.denied.message',\n          defaultMessages.workflow_approval.denied.message\n        );\n      } else {\n        if (!getValues('messages.workflow_approval.denied.message')) {\n          setValue(\n            'messages.workflow_approval.denied.message',\n            data.messages.workflow_approval.denied.message\n          );\n        }\n      }\n    }\n\n    if (hasBody) {\n      if (!data?.messages?.workflow_approval?.denied?.body) {\n        // For workflow_approval.denied.body\n        setValue(\n          'messages.workflow_approval.denied.body',\n          defaultMessages.workflow_approval.denied.body\n        );\n      } else {\n        if (!getValues('messages.workflow_approval.denied.body')) {\n          setValue(\n            'messages.workflow_approval.denied.body',\n            data.messages.workflow_approval.denied.body\n          );\n        }\n      }\n    }\n\n    if (hasMessages) {\n      // For workflow_approval.running.message\n      if (!data?.messages?.workflow_approval?.running?.message) {\n        setValue(\n          'messages.workflow_approval.running.message',\n          defaultMessages.workflow_approval.running.message\n        );\n      } else {\n        if (!getValues('messages.workflow_approval.running.message')) {\n          setValue(\n            'messages.workflow_approval.running.message',\n            data.messages.workflow_approval.running.message\n          );\n        }\n      }\n    }\n\n    if (hasBody) {\n      // For workflow_approval.running.body\n      if (!data?.messages?.workflow_approval?.running?.body) {\n        setValue(\n          'messages.workflow_approval.running.body',\n          defaultMessages.workflow_approval.running.body\n        );\n      } else {\n        if (!getValues('messages.workflow_approval.running.body')) {\n          setValue(\n            'messages.workflow_approval.running.body',\n            data.messages.workflow_approval.running.body\n          );\n        }\n      }\n    }\n\n    if (hasMessages) {\n      // For workflow_approval.timed_out.message\n      if (!data?.messages?.workflow_approval?.timed_out?.message) {\n        setValue(\n          'messages.workflow_approval.timed_out.message',\n          defaultMessages.workflow_approval.timed_out.message\n        );\n      } else {\n        if (!getValues('messages.workflow_approval.timed_out.message')) {\n          setValue(\n            'messages.workflow_approval.timed_out.message',\n            data.messages.workflow_approval.timed_out.message\n          );\n        }\n      }\n    }\n\n    if (hasBody) {\n      // For workflow_approval.timed_out.body\n      if (!data?.messages?.workflow_approval?.timed_out?.body) {\n        setValue(\n          'messages.workflow_approval.timed_out.body',\n          defaultMessages.workflow_approval.timed_out.body\n        );\n      } else {\n        if (!getValues('messages.workflow_approval.timed_out.body')) {\n          setValue(\n            'messages.workflow_approval.timed_out.body',\n            data.messages.workflow_approval.timed_out.body\n          );\n        }\n      }\n    }\n  }\n\n  if (customize_messages !== true) {\n    return <></>;\n  }\n\n  return (\n    <>\n      {hasMessages && (\n        <PageFormTextInput<NotificationTemplate>\n          name=\"messages.started.message\"\n          label={t('Start message')}\n        />\n      )}\n      {hasBody && (\n        <PageFormTextArea<NotificationTemplate>\n          name=\"messages.started.body\"\n          label={t('Start message body')}\n        />\n      )}\n\n      {hasMessages && (\n        <PageFormTextInput<NotificationTemplate>\n          name=\"messages.success.message\"\n          label={t('success message')}\n        />\n      )}\n\n      {hasBody && (\n        <PageFormTextArea<NotificationTemplate>\n          name=\"messages.success.body\"\n          label={t('success message body')}\n        />\n      )}\n\n      {hasMessages && (\n        <PageFormTextInput<NotificationTemplate>\n          name=\"messages.error.message\"\n          label={t('Error message')}\n        />\n      )}\n\n      {hasBody && (\n        <PageFormTextArea<NotificationTemplate>\n          name=\"messages.error.body\"\n          label={t('Error message body')}\n        />\n      )}\n\n      {hasMessages && (\n        <PageFormTextInput<NotificationTemplate>\n          name=\"messages.workflow_approval.approved.message\"\n          label={t('Workflow approved message')}\n        />\n      )}\n\n      {hasBody && (\n        <PageFormTextArea<NotificationTemplate>\n          name=\"messages.workflow_approval.approved.body\"\n          label={t('Workflow approved body')}\n        />\n      )}\n\n      {hasMessages && (\n        <PageFormTextInput<NotificationTemplate>\n          name=\"messages.workflow_approval.denied.message\"\n          label={t('Workflow denied message')}\n        />\n      )}\n\n      {hasBody && (\n        <PageFormTextArea<NotificationTemplate>\n          name=\"messages.workflow_approval.denied.body\"\n          label={t('Workflow denied message body')}\n        />\n      )}\n\n      {hasMessages && (\n        <PageFormTextInput<NotificationTemplate>\n          name=\"messages.workflow_approval.running.message\"\n          label={t('Workflow pending message')}\n        />\n      )}\n\n      {hasBody && (\n        <PageFormTextArea<NotificationTemplate>\n          name=\"messages.workflow_approval.running.body\"\n          label={t('Workflow pending message body')}\n        />\n      )}\n\n      {hasMessages && (\n        <PageFormTextInput<NotificationTemplate>\n          name=\"messages.workflow_approval.timed_out.message\"\n          label={t('Workflow timed out message')}\n        />\n      )}\n\n      {hasBody && (\n        <PageFormTextArea<NotificationTemplate>\n          name=\"messages.workflow_approval.timed_out.body\"\n          label={t('Workflow timed out message body')}\n        />\n      )}\n    </>\n  );\n}\n\ntype NotificationType = {\n  message?: string | undefined;\n  body?: string | undefined;\n};\n\ntype WorkflowApprovalMessages = {\n  denied: NotificationType;\n  running: NotificationType;\n  approved: NotificationType;\n  timed_out: NotificationType;\n};\n\nexport type MessagesType = {\n  error: NotificationType;\n  started: NotificationType;\n  success: NotificationType;\n  workflow_approval: WorkflowApprovalMessages;\n};\n\nexport function areMessagesEmpty(data: NotificationTemplate) {\n  if (\n    data?.messages?.error?.message ||\n    data?.messages?.error?.body ||\n    data?.messages?.started?.message ||\n    data?.messages?.started?.body ||\n    data?.messages?.success?.message ||\n    data?.messages?.success?.body ||\n    data?.messages?.workflow_approval?.approved?.message ||\n    data?.messages?.workflow_approval?.approved?.body ||\n    data?.messages?.workflow_approval?.denied?.message ||\n    data?.messages?.workflow_approval?.denied?.body ||\n    data?.messages?.workflow_approval?.running?.message ||\n    data?.messages?.workflow_approval?.running?.body ||\n    data?.messages?.workflow_approval?.timed_out?.message ||\n    data?.messages?.workflow_approval?.timed_out?.body\n  ) {\n    return false;\n  }\n\n  return true;\n}\n","import { MessagesType } from './NotifierFormMessages';\n\nexport function getDefaultMessages(notification_type: string | null) {\n  let obj: MessagesType = {\n    started: {},\n    success: {},\n    error: {},\n    workflow_approval: { denied: {}, running: {}, approved: {}, timed_out: {} },\n  };\n\n  if (notification_type !== 'webhook') {\n    obj = {\n      started: {\n        message: `{{ job_friendly_name }} #{{ job.id }} '{{ job.name }}' {{ job.status }}: {{ url }}`,\n      },\n      success: {\n        message: `{{ job_friendly_name }} #{{ job.id }} '{{ job.name }}' {{ job.status }}: {{ url }}`,\n      },\n      error: {\n        message: `{{ job_friendly_name }} #{{ job.id }} '{{ job.name }}' {{ job.status }}: {{ url }}`,\n      },\n      workflow_approval: {\n        denied: {\n          message: `The approval node \"{{ approval_node_name }}\" was denied. {{ workflow_url }}`,\n        },\n        running: {\n          message: `The approval node \"{{ approval_node_name }}\" needs review. This node can be viewed at: {{ workflow_url }}`,\n        },\n        approved: {\n          message: `The approval node \"{{ approval_node_name }}\" was approved. {{ workflow_url }}`,\n        },\n        timed_out: {\n          message: `The approval node \"{{ approval_node_name }}\" has timed out. {{ workflow_url }}`,\n        },\n      },\n    };\n  }\n\n  if (notification_type === 'email') {\n    obj.error.body =\n      obj.started.body =\n      obj.success.body =\n        `{{ job_friendly_name }} #{{ job.id }} had status {{ job.status }}, view details at {{ url }}\n      \n  {{ job_metadata }}`;\n  }\n\n  if (notification_type === 'pagerduty' || notification_type === 'webhook') {\n    obj.error.body = obj.started.body = obj.success.body = `{{ job_metadata }}`;\n  }\n\n  if (notification_type === 'email' || notification_type === 'pagerduty') {\n    obj.workflow_approval.approved.body = `The approval node \"{{ approval_node_name }}\" was approved. {{ workflow_url }}\n  \n  {{ job_metadata }}`;\n\n    obj.workflow_approval.denied.body = `The approval node \"{{ approval_node_name }}\" was denied. {{ workflow_url }}\n    \n  {{ job_metadata }}`;\n\n    obj.workflow_approval.running.body = `The approval node \"{{ approval_node_name }}\" needs review. This approval node can be viewed at: {{ workflow_url }}\n    \n  {{ job_metadata }}`;\n\n    obj.workflow_approval.timed_out.body = `The approval node \"{{ approval_node_name }}\" has timed out. {{ workflow_url }}\n    \n  {{ job_metadata }}`;\n  }\n\n  if (notification_type === 'webhook') {\n    obj.workflow_approval.approved.body = `{\"body\": \"The approval node \"{{ approval_node_name }}\" was approved. {{ workflow_url }}\"}`;\n    obj.workflow_approval.denied.body = `{\"body\": \"The approval node \"{{ approval_node_name }}\" was denied. {{ workflow_url }}\"}`;\n    obj.workflow_approval.running.body = `{\"body\": \"The approval node \"{{ approval_node_name }}\" needs review. This node can be viewed at: {{ workflow_url }}\"}`;\n    obj.workflow_approval.timed_out.body = `{\"body\": \"The approval node \"{{ approval_node_name }}\" has timed out. {{ workflow_url }}\"}`;\n  }\n\n  return obj;\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport {\n  ICatalogBreadcrumb,\n  LoadingPage,\n  PageFormSubmitHandler,\n  PageFormSwitch,\n  PageFormTextInput,\n  PageHeader,\n  PageLayout,\n  getPatternflyColor,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { PageFormGroup } from '../../../../framework/PageForm/Inputs/PageFormGroup';\nimport { PageFormSingleSelect } from '../../../../framework/PageForm/Inputs/PageFormSingleSelect';\nimport { PageFormSection } from '../../../../framework/PageForm/Utils/PageFormSection';\nimport { PageFormWatch } from '../../../../framework/PageForm/Utils/PageFormWatch';\nimport { useGet } from '../../../common/crud/useGet';\nimport { useOptions } from '../../../common/crud/useOptions';\nimport { usePatchRequest } from '../../../common/crud/usePatchRequest';\nimport { usePostRequest } from '../../../common/crud/usePostRequest';\nimport { PageFormSelectOrganization } from '../../access/organizations/components/PageFormOrganizationSelect';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { AwxError } from '../../common/AwxError';\nimport { AwxPageForm } from '../../common/AwxPageForm';\nimport { NotificationTemplate } from '../../interfaces/NotificationTemplate';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { InnerForm } from './NotifierFormInner';\nimport { NotifierFormMessages, areMessagesEmpty } from './NotifierFormMessages';\n\nexport function EditNotifier() {\n  return <NotifierForm mode={'edit'} />;\n}\n\nexport function AddNotifier() {\n  return <NotifierForm mode={'add'} />;\n}\n\nexport type NotificationTemplateOptions = {\n  actions: {\n    GET: {\n      notification_configuration: Record<\n        string,\n        Record<string, { label: string; type: string; default: unknown }>\n      >;\n    };\n  };\n};\n\nexport type NotificationTemplateEdit = Omit<NotificationTemplate, 'id'> & {\n  customize_messages?: boolean;\n};\nexport type CustomizeMessageType = NotificationTemplate & { customize_messages?: boolean };\n\n// TODO - finish rest of the form in the next PR\nfunction NotifierForm(props: { mode: 'add' | 'edit' }) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const { mode } = props;\n  const params = useParams<{ id: string }>();\n  const getUrl = mode === 'add' ? '' : awxAPI`/notification_templates/${params.id || ''}/`;\n  const notifierRequest = useGet<NotificationTemplate>(getUrl);\n  const navigate = useNavigate();\n  const pageNavigate = usePageNavigate();\n  const [messagesError, setMessagesError] = useState<string>('');\n\n  const patchRequest = usePatchRequest();\n  const postRequest = usePostRequest();\n\n  const optionsRequest = useOptions<NotificationTemplateOptions>(awxAPI`/notification_templates/`);\n\n  if (notifierRequest.error) {\n    return <AwxError error={notifierRequest.error} />;\n  }\n\n  if (optionsRequest.error) {\n    return <AwxError error={optionsRequest.error} />;\n  }\n\n  if (!notifierRequest.data && mode === 'edit') {\n    return <LoadingPage />;\n  }\n\n  if (!optionsRequest.data) {\n    return <LoadingPage />;\n  }\n\n  const defaultValue = mode === 'add' ? {} : notifierRequest.data;\n\n  if (defaultValue && mode === 'edit') {\n    arraysToString(defaultValue as NotificationTemplate);\n  }\n\n  const defaultValueMessages = defaultValue as NotificationTemplate;\n  const messagesEmpty = areMessagesEmpty(defaultValueMessages);\n\n  if (defaultValue && messagesEmpty) {\n    (defaultValue as CustomizeMessageType).customize_messages = false;\n  }\n\n  const breadcrumbs: ICatalogBreadcrumb[] = [\n    { label: t('Notifiers'), to: getPageUrl(AwxRoute.NotificationTemplates) },\n    {\n      label:\n        mode === 'add'\n          ? t('Create notifier')\n          : notifierRequest?.data?.name\n            ? t(`Edit ${notifierRequest.data.name}`)\n            : t('Edit notifier'),\n    },\n  ];\n\n  if (defaultValue && !messagesEmpty) {\n    (defaultValue as CustomizeMessageType).customize_messages = true;\n  }\n\n  const onSubmit: PageFormSubmitHandler<NotificationTemplate> = async (formData) => {\n    try {\n      const data: NotificationTemplate | NotificationTemplateEdit =\n        mode === 'add'\n          ? formData\n          : ({\n              description: formData.description,\n              messages: formData.messages,\n              name: formData.name,\n              notification_configuration: formData.notification_configuration,\n              notification_type: formData.notification_type,\n              organization: formData.organization,\n              customize_messages: (formData as CustomizeMessageType).customize_messages,\n            } as NotificationTemplateEdit);\n\n      stringToArrays(data);\n\n      if ((data as CustomizeMessageType).customize_messages === false) {\n        data.messages = null;\n      }\n      delete (data as CustomizeMessageType).customize_messages;\n\n      let fieldValue;\n      // fix notification data types\n      const fields =\n        optionsRequest.data?.actions.GET.notification_configuration[data.notification_type || ''];\n      if (fields) {\n        const notification_configuration = data.notification_configuration;\n        for (const field in fields) {\n          if (!notification_configuration[field]) {\n            fieldValue = fields[field];\n            notification_configuration[field] = '';\n          }\n\n          // convert them\n          fieldValue = fields[field];\n          if (fieldValue.type === 'int') {\n            const value = notification_configuration[field];\n            if (typeof value === 'string') {\n              notification_configuration[field] = Number.parseInt(value, 10);\n            }\n          }\n\n          if (fieldValue.type === 'bool' && notification_configuration[field] === '') {\n            notification_configuration[field] = false;\n          }\n        }\n      }\n\n      if (data.notification_type === 'webhook') {\n        if (!data.notification_configuration.headers) {\n          data.notification_configuration.headers = {};\n        }\n      }\n\n      let result: { id?: number } = {};\n      if (mode === 'add') {\n        result = (await postRequest(awxAPI`/notification_templates/`, data)) as { id: number };\n      } else {\n        await patchRequest(awxAPI`/notification_templates/${formData.id?.toString() || ''}/`, data);\n      }\n\n      const id = mode === 'add' ? result?.id : formData.id;\n      pageNavigate(AwxRoute.NotificationTemplateDetails, { params: { id } });\n    } catch (e: unknown) {\n      const ex = e as { body?: { messages?: string } };\n      if (ex?.body?.messages) {\n        const mess = JSON.stringify(ex.body.messages, null, 4);\n        setMessagesError(mess);\n      }\n      throw ex;\n    }\n  };\n\n  const job_friendly_name = '{{job_friendly_name}}';\n  const url = '{{url}}';\n  const status = '{{status}}';\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={\n          mode === 'add'\n            ? t('Create notifier')\n            : notifierRequest?.data?.name\n              ? t(`Edit ${notifierRequest.data.name}`)\n              : t('Edit notifier')\n        }\n        breadcrumbs={breadcrumbs}\n      />\n      <AwxPageForm<NotificationTemplate>\n        submitText={t('Save notifier')}\n        onSubmit={onSubmit}\n        cancelText={t('Cancel')}\n        onCancel={() => navigate(-1)}\n        defaultValue={defaultValue}\n      >\n        <PageFormSection>\n          <PageFormTextInput<NotificationTemplate>\n            name=\"name\"\n            label={t('Name')}\n            placeholder={t('Enter a name')}\n            isRequired\n            maxLength={150}\n          />\n          <PageFormTextInput<NotificationTemplate>\n            name=\"description\"\n            label={t('Description')}\n            placeholder={t('Enter a description')}\n          />\n          <PageFormSelectOrganization<NotificationTemplate> name=\"organization\" isRequired />\n          <PageFormSingleSelect\n            name=\"notification_type\"\n            id=\"notification_type\"\n            label={t(`Type`)}\n            placeholder={t('Choose a notification type')}\n            isRequired={true}\n            options={[\n              { value: 'email', label: t('Email') },\n              { value: 'grafana', label: t('Grafana') },\n              { value: 'irc', label: t('IRC') },\n              { value: 'mattermost', label: t('Mattermost') },\n              { value: 'pagerduty', label: t('Pagerduty') },\n              { value: 'rocketchat', label: t('Rocket.Chat') },\n              { value: 'slack', label: t('Slack') },\n              { value: 'twilio', label: t('Twilio') },\n              { value: 'webhook', label: t('Webhook') },\n            ]}\n          />\n        </PageFormSection>\n        <PageFormSection>\n          <PageFormWatch watch=\"notification_type\">\n            {(notification_type: string) => (\n              <>\n                <PageFormGroup label={t('Type Details')}>\n                  <InnerForm notification_type={notification_type} />\n                </PageFormGroup>\n              </>\n            )}\n          </PageFormWatch>\n        </PageFormSection>\n        <PageFormSection>\n          <PageFormSwitch\n            labelHelp={\n              <Trans>\n                Use custom messages to change the content of notifications sent when a job starts,\n                succeeds, or fails. Use curly braces to access information about the job: <br />\n                <br />\n                {{ job_friendly_name }}, {{ url }}, {{ status }}.<br />\n                <br />\n                You may apply a number of possible variables in the message. For more information,\n                refer to the{' '}\n                <a href=\"https://docs.ansible.com/automation-controller/latest/html/userguide/notifications.html#create-custom-notifications\">\n                  Ansible Controller Documentation.\n                </a>\n              </Trans>\n            }\n            name={'customize_messages'}\n            label={t('Customize messages')}\n          />\n        </PageFormSection>\n\n        <PageFormSection singleColumn>\n          <PageFormWatch watch=\"customize_messages\">\n            {(customize_messages: boolean) => {\n              return (\n                <>\n                  <div style={{ color: getPatternflyColor('red') }}>{messagesError}</div>\n                  {\n                    <NotifierFormMessages\n                      customize_messages={customize_messages}\n                      data={notifierRequest.data}\n                    />\n                  }\n                </>\n              );\n            }}\n          </PageFormWatch>\n        </PageFormSection>\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n\nfunction arraysToString(data: NotificationTemplate) {\n  if (!data.notification_configuration) {\n    return;\n  }\n\n  for (const key in data.notification_configuration) {\n    if (!isList(key, data.notification_type || '')) {\n      continue;\n    }\n\n    // transform array of strings into string\n    const arr = data?.notification_configuration[key] as string[];\n    if (arr && arr.join) {\n      data.notification_configuration[key] = arr.join('\\n');\n    }\n  }\n}\n\nfunction stringToArrays(data: NotificationTemplate | NotificationTemplateEdit) {\n  if (!data.notification_configuration) {\n    return;\n  }\n\n  for (const key in data.notification_configuration) {\n    if (!isList(key, data.notification_type || '')) {\n      continue;\n    }\n\n    // transform array of strings into string\n    const str = data?.notification_configuration[key] as string;\n    if (str && str.split) {\n      data.notification_configuration[key] = str.split('\\n');\n    }\n  }\n}\n\nfunction isList(key: string, notification_type: string) {\n  if (key === 'recipients' && notification_type === 'email') {\n    return true;\n  }\n\n  if (key === 'channels' && notification_type === 'slack') {\n    return true;\n  }\n\n  if (key === 'to_numbers' && notification_type === 'twilio') {\n    return true;\n  }\n\n  if (key === 'annotation_tags' && notification_type === 'grafana') {\n    return true;\n  }\n\n  if (key === 'targets' && notification_type === 'irc') {\n    return true;\n  }\n\n  return false;\n}\n","import { useOutletContext } from 'react-router-dom';\nimport { PageDetail, Scrollable, useGetPageUrl } from '../../../../../framework';\nimport { PageDetails } from '../../../../../framework';\nimport { NotificationTemplate } from '../../../interfaces/NotificationTemplate';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { t } from 'i18next';\nimport { TextArea } from '@patternfly/react-core';\nimport { DateTimeCell } from '../../../../../framework';\nimport { usePageNavigate } from '../../../../../framework';\nimport { StatusLabel } from '../../../../common/Status';\nimport { getLabelHelp } from '../NotifierFormInner';\n\nexport function NotificationDetails() {\n  const { t } = useTranslation();\n  const { notificationTemplate, runningTest } = useOutletContext<{\n    notificationTemplate: NotificationTemplate;\n    runningTest: boolean;\n  }>();\n  const getPageUrl = useGetPageUrl();\n  const pageNavigate = usePageNavigate();\n\n  const status =\n    notificationTemplate.summary_fields.recent_notifications.length > 0\n      ? notificationTemplate.summary_fields.recent_notifications[0].status\n      : '';\n  return (\n    <>\n      <Scrollable>\n        <PageDetails disableScroll={true}>\n          <PageDetail label={t('Name')}>{notificationTemplate.name}</PageDetail>\n          <PageDetail label={t('Description')}>{notificationTemplate.description}</PageDetail>\n          {status && (\n            <PageDetail label={t('Status')}>\n              {runningTest === false && <StatusLabel status={status} />}\n              {runningTest === true && <StatusLabel status={'running'} />}\n            </PageDetail>\n          )}\n          <PageDetail label={t('Created')}>\n            <DateTimeCell\n              value={notificationTemplate.created}\n              author={notificationTemplate.summary_fields?.created_by?.username}\n              onClick={() =>\n                pageNavigate(AwxRoute.UserDetails, {\n                  params: { id: notificationTemplate.summary_fields?.created_by?.id },\n                })\n              }\n            />\n          </PageDetail>\n          <PageDetail label={t('Last modified')}>\n            <DateTimeCell\n              value={notificationTemplate.modified}\n              author={notificationTemplate.summary_fields?.modified_by?.username}\n              onClick={() =>\n                pageNavigate(AwxRoute.UserDetails, {\n                  params: { id: notificationTemplate.summary_fields?.modified_by?.id },\n                })\n              }\n            />\n          </PageDetail>\n\n          <PageDetail label={t('Organization')}>\n            <Link\n              to={getPageUrl(AwxRoute.OrganizationDetails, {\n                params: { id: notificationTemplate.summary_fields.organization.id },\n              })}\n            >\n              {notificationTemplate.summary_fields.organization.name}\n            </Link>\n          </PageDetail>\n          <PageDetail label={t('Notification type')}>\n            {notificationTemplate.notification_type}\n          </PageDetail>\n\n          <RenderInnerDetail notificationTemplate={notificationTemplate} />\n        </PageDetails>\n        {notificationTemplate.messages && (\n          <RenderMessages notificationTemplate={notificationTemplate} />\n        )}\n      </Scrollable>\n    </>\n  );\n}\n\nfunction RenderMessages(props: { notificationTemplate: NotificationTemplate }) {\n  const messages = props.notificationTemplate.messages;\n  return (\n    <>\n      <PageDetails numberOfColumns=\"single\" disableScroll={true}>\n        {messages?.started?.message && (\n          <PageDetail label={t('Start message')}>{messages?.started?.message}</PageDetail>\n        )}\n\n        {messages?.started?.body && (\n          <PageDetail label={t('Start message body')}>{messages?.started?.body}</PageDetail>\n        )}\n\n        {messages?.success?.message && (\n          <PageDetail label={t('Success message')}>{messages?.success?.message}</PageDetail>\n        )}\n\n        {messages?.success?.body && (\n          <PageDetail label={t('Success message body')}>{messages?.success?.body}</PageDetail>\n        )}\n\n        {messages?.error?.message && (\n          <PageDetail label={t('Error message')}>{messages?.error?.message}</PageDetail>\n        )}\n\n        {messages?.error?.body && (\n          <PageDetail label={t('Error message body')}>{messages?.error?.body}</PageDetail>\n        )}\n\n        {messages?.workflow_approval?.approved?.message && (\n          <PageDetail label={t('Workflow approved message')}>\n            {messages?.workflow_approval?.approved?.message}\n          </PageDetail>\n        )}\n\n        {messages?.workflow_approval?.approved?.body && (\n          <PageDetail label={t('Workflow approved message body')}>\n            {messages?.workflow_approval?.approved?.body}\n          </PageDetail>\n        )}\n\n        {messages?.workflow_approval?.denied?.message && (\n          <PageDetail label={t('Workflow denied message')}>\n            {messages?.workflow_approval?.denied?.message}\n          </PageDetail>\n        )}\n\n        {messages?.workflow_approval?.denied?.body && (\n          <PageDetail label={t('Workflow denied message body')}>\n            {messages?.workflow_approval?.denied?.body}\n          </PageDetail>\n        )}\n\n        {messages?.workflow_approval?.running?.message && (\n          <PageDetail label={t('Workflow pending message')}>\n            {messages?.workflow_approval?.running?.message}\n          </PageDetail>\n        )}\n\n        {messages?.workflow_approval?.running?.body && (\n          <PageDetail label={t('Workflow pending message body')}>\n            {messages?.workflow_approval?.running?.body}\n          </PageDetail>\n        )}\n\n        {messages?.workflow_approval?.timed_out?.message && (\n          <PageDetail label={t('Workflow timed out message')}>\n            {messages?.workflow_approval?.timed_out?.message}\n          </PageDetail>\n        )}\n\n        {messages?.workflow_approval?.timed_out?.body && (\n          <PageDetail label={t('Workflow timed out message body')}>\n            {messages?.workflow_approval?.timed_out?.body}\n          </PageDetail>\n        )}\n      </PageDetails>\n    </>\n  );\n}\n\nfunction RenderInnerDetail(props: { notificationTemplate: NotificationTemplate }) {\n  const { notificationTemplate } = props;\n  return (\n    <>\n      {Object.keys(notificationTemplate.notification_configuration || {}).map((key) => {\n        try {\n          let value = notificationTemplate.notification_configuration[key] as\n            | string\n            | string[]\n            | { [key: string]: unknown };\n\n          let object = false;\n          let list = false;\n          if (Array.isArray(value)) {\n            list = true;\n            value = value.join('\\n');\n          } else {\n            if (typeof value === 'object') {\n              value = JSON.stringify(value, undefined, 2);\n              object = true;\n            }\n          }\n\n          if (value === undefined) {\n            value = '';\n          }\n\n          // this is password field which should be hidden\n          if (value === '$encrypted$') {\n            return <></>;\n          }\n\n          let caption = returnCaption(notificationTemplate.notification_type, key);\n\n          if (!caption) {\n            caption = key;\n          }\n\n          // label help\n          const labelHelp = getLabelHelp(notificationTemplate.notification_type || '', key, t);\n\n          if (!list && !object) {\n            return (\n              <PageDetail key={key} label={caption} helpText={labelHelp}>\n                {value.toString()}\n              </PageDetail>\n            );\n          } else {\n            return (\n              <PageDetail key={key} label={caption} helpText={labelHelp}>\n                <TextArea value={value.toString()} contentEditable={false} rows={3} />\n              </PageDetail>\n            );\n          }\n        } catch (err) {\n          return (\n            <PageDetail key={key} label={key}>\n              {t('Error displaying field')}\n            </PageDetail>\n          );\n        }\n      })}\n    </>\n  );\n}\n\nfunction returnCaption(notification_type: string | null, key: string) {\n  if (notification_type === 'email') {\n    if (key === 'username') return t('Username');\n    if (key === 'password') return t('Password');\n    if (key === 'host') return t('Host');\n    if (key === 'recipients') return t('Recipient list');\n    if (key === 'sender') return t('Sender email');\n    if (key === 'port') return t('Port');\n    if (key === 'timeout') return t('Timeout');\n    if (key === 'use_tls') return t('Use TLS');\n    if (key === 'use_ssl') return t('Use SSL');\n  }\n\n  if (notification_type === 'slack') {\n    if (key === 'token') return t('Token');\n    if (key === 'channels') return t('Destination Channels');\n    if (key === 'hex_color') return t('Notification color');\n  }\n\n  if (notification_type === 'twilio') {\n    if (key === 'account_sid') return t('Account SID');\n    if (key === 'account_token') return t('Account Token');\n    if (key === 'from_number') return t('Source Phone Number');\n    if (key === 'to_numbers') return t('Destination SMS Numbers');\n  }\n\n  if (notification_type === 'pagerduty') {\n    if (key === 'subdomain') return t('Pagerduty subdomain');\n    if (key === 'service_key') return t('API Service/Integration Key');\n    if (key === 'client_name') return t('Client Identifier');\n  }\n\n  if (notification_type === 'grafana') {\n    if (key === 'grafana_url') return t('Grafana URL');\n    if (key === 'grafana_key') return t('Grafana API Key');\n    if (key === 'dashboardId') return t('ID of the dashboard');\n    if (key === 'panelId') return t('ID of the panel');\n    if (key === 'annotation_tags') return t('Tags for the annotation');\n    if (key === 'grafana_no_verify_ssl') return t('Disable SSL verification');\n  }\n\n  if (notification_type === 'webhook') {\n    if (key === 'username') return t('Username');\n    if (key === 'password') return t('Basic auth password');\n    if (key === 'url') return t('Target URL');\n    if (key === 'disable_ssl_verification') return t('Disable SSL verification ');\n    if (key === 'http_method') return t('HTTP Method');\n    if (key === 'headers') return t('Headers');\n  }\n\n  if (notification_type === 'mattermost') {\n    if (key === 'mattermost_url') return t('Target URL');\n    if (key === 'mattermost_username') return t('Username');\n    if (key === 'mattermost_channel') return t('Channel');\n    if (key === 'mattermost_icon_url') return t('Icon URL');\n    if (key === 'mattermost_no_verify_ssl') return t('Verify SSL');\n  }\n\n  if (notification_type === 'rocketchat') {\n    if (key === 'rocketchat_url') return t('Target URL');\n    if (key === 'rocketchat_username') return t('Username');\n    if (key === 'rocketchat_icon_url') return t('Icon URL');\n    if (key === 'rocketchat_no_verify_ssl') return t('Disable SSL verification');\n  }\n\n  if (notification_type === 'irc') {\n    if (key === 'server') return t('IRC Server Address');\n    if (key === 'nickname') return t('IRC Nick');\n    if (key === 'targets') return t('Destination Channels or Users');\n    if (key === 'password') return t('IRC Server Password');\n    if (key === 'port') return t('IRC Server Port');\n    if (key === 'use_ssl') return t('Disable SSL verification ');\n  }\n\n  return '';\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  PageActions,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { LoadingPage } from '../../../../../framework/components/LoadingPage';\nimport { PageRoutedTabs } from '../../../../common/PageRoutedTabs';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { useViewActivityStream } from '../../../access/common/useViewActivityStream';\nimport { AwxError } from '../../../common/AwxError';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { NotificationTemplate } from '../../../interfaces/NotificationTemplate';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useNotificationsWatch } from '../hooks/useNotificationsWatch';\nimport { useNotifiersRowActions } from '../hooks/useNotifiersRowActions';\n\nexport function NotificationPage() {\n  const { t } = useTranslation();\n  const params = useParams<{ id: string }>();\n  const activityStream = useViewActivityStream('notification_template');\n  const { runningNotifications, onNotifierStartTest, checkNotifiers } = useNotificationsWatch();\n\n  // set refresh interval to be faster when test is running\n  const {\n    error,\n    data: notificationTemplate,\n    refresh,\n  } = useGetItem<NotificationTemplate>(awxAPI`/notification_templates`, params.id, {\n    refreshInterval: runningNotifications[params.id || ''] === undefined ? 5000 : 2000,\n  });\n\n  const pageNavigate = usePageNavigate();\n\n  const getPageUrl = useGetPageUrl();\n  const pageActions = useNotifiersRowActions({\n    onComplete: () => {\n      pageNavigate(AwxRoute.NotificationTemplates);\n    },\n    onNotifierStartTest,\n    type: 'detail',\n    runningNotifications,\n  });\n\n  useEffect(() => {\n    if (notificationTemplate) {\n      checkNotifiers([notificationTemplate]);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [notificationTemplate]);\n\n  if (error) return <AwxError error={error} handleRefresh={refresh} />;\n  if (!notificationTemplate) return <LoadingPage breadcrumbs tabs />;\n\n  // search for notification id\n  const notificationId = runningNotifications[notificationTemplate.id.toString()];\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={notificationTemplate?.name}\n        breadcrumbs={[\n          { label: t('Notifiers'), to: getPageUrl(AwxRoute.NotificationTemplates) },\n          { label: notificationTemplate?.name },\n        ]}\n        headerActions={\n          <PageActions<NotificationTemplate>\n            actions={[...activityStream, ...pageActions]}\n            position={DropdownPosition.right}\n            selectedItem={notificationTemplate}\n          />\n        }\n      />\n      <PageRoutedTabs\n        backTab={{\n          label: t('Back to Notifiers'),\n          page: AwxRoute.NotificationTemplates,\n          persistentFilterKey: 'credential-types',\n        }}\n        tabs={[\n          { label: t('Details'), page: AwxRoute.NotificationTemplateDetails },\n          { label: t('Team Access'), page: AwxRoute.NotificationTemplateTeamAccess },\n          { label: t('User Access'), page: AwxRoute.NotificationTemplateUserAccess },\n        ]}\n        params={params}\n        componentParams={{\n          notificationTemplate,\n          runningTest: notificationId === undefined ? false : true,\n        }}\n      />\n    </PageLayout>\n  );\n}\n","import { AwxRoute } from '../../../main/AwxRoutes';\nimport { useParams } from 'react-router-dom';\nimport { TeamAccess } from '../../../../common/access/components/TeamAccess';\n\nexport function NotificationTeamAccess() {\n  const params = useParams<{ id: string }>();\n  return (\n    <TeamAccess\n      service=\"awx\"\n      id={params.id || ''}\n      type={'notificationtemplate'}\n      addRolesRoute={AwxRoute.NotificationAddTeams as string}\n    />\n  );\n}\n","import { AwxRoute } from '../../../main/AwxRoutes';\nimport { useParams } from 'react-router-dom';\nimport { UserAccess } from '../../../../common/access/components/UserAccess';\n\nexport function NotificationUserAccess() {\n  const params = useParams<{ id: string }>();\n  return (\n    <UserAccess\n      service=\"awx\"\n      id={params.id || ''}\n      type={'notificationtemplate'}\n      addRolesRoute={AwxRoute.NotificationAddUsers as string}\n    />\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageHeader,\n  PageLayout,\n  PageWizard,\n  PageWizardStep,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { AwxSelectUsersStep } from '../../../access/common/AwxRolesWizardSteps/AwxSelectUsersStep';\nimport { AwxSelectRolesStep } from '../../../access/common/AwxRolesWizardSteps/AwxSelectRolesStep';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useGet } from '../../../../common/crud/useGet';\nimport { postRequest } from '../../../../common/crud/Data';\nimport { AwxUser } from '../../../interfaces/User';\nimport { RoleAssignmentsReviewStep } from '../../../../common/access/RolesWizard/steps/RoleAssignmentsReviewStep';\nimport { AwxRbacRole } from '../../../interfaces/AwxRbacRole';\nimport { useAwxBulkActionDialog } from '../../../common/useAwxBulkActionDialog';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { NotificationTemplate } from '../../../interfaces/NotificationTemplate';\n\ninterface WizardFormValues {\n  users: AwxUser[];\n  awxRoles: AwxRbacRole[];\n}\n\ninterface UserRolePair {\n  user: AwxUser;\n  role: AwxRbacRole;\n}\n\nexport function NotifierAddUsers() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const params = useParams<{ id: string }>();\n\n  const { data: credential, isLoading } = useGet<NotificationTemplate>(\n    awxAPI`/notification_templates/${params.id ?? ''}/`\n  );\n  const userProgressDialog = useAwxBulkActionDialog<UserRolePair>();\n  const pageNavigate = usePageNavigate();\n\n  if (isLoading || !credential) return <LoadingPage />;\n\n  const steps: PageWizardStep[] = [\n    {\n      id: 'users',\n      label: t('Select user(s)'),\n      inputs: (\n        <AwxSelectUsersStep\n          descriptionForUsersSelection={t(\n            'Select the user(s) that you want to give access to {{credentialName}}.',\n            {\n              credentialName: credential?.name,\n            }\n          )}\n        />\n      ),\n      validate: (formData, _) => {\n        const { users } = formData as { users: AwxUser[] };\n        if (!users?.length) {\n          throw new Error(t('Select at least one user.'));\n        }\n      },\n    },\n    {\n      id: 'awxRoles',\n      label: t('Select roles to apply'),\n      inputs: (\n        <AwxSelectRolesStep\n          contentType=\"notificationtemplate\"\n          fieldNameForPreviousStep=\"users\"\n          descriptionForRoleSelection={t('Choose roles to apply to {{credentialName}}.', {\n            credentialName: credential?.name,\n          })}\n        />\n      ),\n      validate: (formData, _) => {\n        const { awxRoles } = formData as { awxRoles: AwxRbacRole[] };\n        if (!awxRoles?.length) {\n          throw new Error(t('Select at least one role.'));\n        }\n      },\n    },\n    {\n      id: 'review',\n      label: t('Review'),\n      inputs: <RoleAssignmentsReviewStep />,\n    },\n  ];\n\n  const onSubmit = (data: WizardFormValues) => {\n    const { users, awxRoles } = data;\n    const items: UserRolePair[] = [];\n    for (const user of users) {\n      for (const role of awxRoles) {\n        items.push({ user, role });\n      }\n    }\n    return new Promise<void>((resolve) => {\n      userProgressDialog({\n        title: t('Add roles'),\n        keyFn: ({ user, role }) => `${user.id}_${role.id}`,\n        items,\n        actionColumns: [\n          { header: t('User'), cell: ({ user }) => user.username },\n          { header: t('Role'), cell: ({ role }) => role.name },\n        ],\n        actionFn: ({ user, role }) =>\n          postRequest(awxAPI`/role_user_assignments/`, {\n            user: user.id,\n            role_definition: role.id,\n            content_type: 'awx.notificationtemplate',\n            object_id: credential.id,\n          }),\n        onComplete: () => {\n          resolve();\n        },\n        onClose: () => {\n          pageNavigate(AwxRoute.NotificationTemplateUserAccess, {\n            params: { id: credential.id.toString() },\n          });\n        },\n      });\n    });\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Add roles')}\n        breadcrumbs={[\n          { label: t('Notifiers'), to: getPageUrl(AwxRoute.NotificationTemplates) },\n          {\n            label: credential?.name,\n            to: getPageUrl(AwxRoute.NotificationTemplateDetails, {\n              params: { id: credential?.id },\n            }),\n          },\n          {\n            label: t('User Access'),\n            to: getPageUrl(AwxRoute.NotificationTemplateUserAccess, {\n              params: { id: credential?.id },\n            }),\n          },\n          { label: t('Add roles') },\n        ]}\n      />\n      <PageWizard<WizardFormValues>\n        steps={steps}\n        onSubmit={onSubmit}\n        disableGrid\n        onCancel={() => {\n          pageNavigate(AwxRoute.NotificationTemplateUserAccess, { params: { id: credential?.id } });\n        }}\n      />\n    </PageLayout>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport {\n  LoadingPage,\n  PageHeader,\n  PageLayout,\n  PageWizard,\n  PageWizardStep,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { AwxSelectTeamsStep } from '../../../access/common/AwxRolesWizardSteps/AwxSelectTeamsStep';\nimport { Team } from '../../../interfaces/Team';\nimport { AwxSelectRolesStep } from '../../../access/common/AwxRolesWizardSteps/AwxSelectRolesStep';\nimport { useParams } from 'react-router-dom';\nimport { useGet } from '../../../../common/crud/useGet';\nimport { postRequest } from '../../../../common/crud/Data';\nimport { RoleAssignmentsReviewStep } from '../../../../common/access/RolesWizard/steps/RoleAssignmentsReviewStep';\nimport { AwxRbacRole } from '../../../interfaces/AwxRbacRole';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useAwxBulkActionDialog } from '../../../common/useAwxBulkActionDialog';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { NotificationTemplate } from '../../../interfaces/NotificationTemplate';\n\ninterface WizardFormValues {\n  teams: Team[];\n  awxRoles: AwxRbacRole[];\n}\n\ninterface TeamRolePair {\n  team: Team;\n  role: AwxRbacRole;\n}\n\nexport function NotifierAddTeams() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const params = useParams<{ id: string }>();\n  const pageNavigate = usePageNavigate();\n  const { data: credential, isLoading } = useGet<NotificationTemplate>(\n    awxAPI`/notification_templates/${params.id ?? ''}/`\n  );\n  const userProgressDialog = useAwxBulkActionDialog<TeamRolePair>();\n\n  if (isLoading || !credential) return <LoadingPage />;\n\n  const steps: PageWizardStep[] = [\n    {\n      id: 'teams',\n      label: t('Select team(s)'),\n      inputs: (\n        <AwxSelectTeamsStep\n          descriptionForTeamsSelection={t(\n            'Select the team(s) that you want to give access to {{credentialName}}.',\n            {\n              credentialName: credential?.name,\n            }\n          )}\n        />\n      ),\n      validate: (formData, _) => {\n        const { teams } = formData as { teams: Team[] };\n        if (!teams?.length) {\n          throw new Error(t('Select at least one team.'));\n        }\n      },\n    },\n    {\n      id: 'roles',\n      label: t('Select roles to apply'),\n      inputs: (\n        <AwxSelectRolesStep\n          contentType=\"notificationtemplate\"\n          fieldNameForPreviousStep=\"teams\"\n          descriptionForRoleSelection={t('Choose roles to apply to {{credentialName}}.', {\n            credentialName: credential?.name,\n          })}\n        />\n      ),\n      validate: (formData, _) => {\n        const { awxRoles } = formData as { awxRoles: AwxRbacRole[] };\n        if (!awxRoles?.length) {\n          throw new Error(t('Select at least one role.'));\n        }\n      },\n    },\n    {\n      id: 'review',\n      label: t('Review'),\n      inputs: <RoleAssignmentsReviewStep />,\n    },\n  ];\n\n  const onSubmit = async (data: WizardFormValues) => {\n    const { teams, awxRoles } = data;\n    const items: TeamRolePair[] = [];\n    for (const team of teams) {\n      for (const role of awxRoles) {\n        items.push({ team, role });\n      }\n    }\n    return new Promise<void>((resolve) => {\n      userProgressDialog({\n        title: t('Add roles'),\n        keyFn: ({ team, role }) => `${team.id}_${role.id}`,\n        items,\n        actionColumns: [\n          { header: t('Team'), cell: ({ team }) => team.name },\n          { header: t('Role'), cell: ({ role }) => role.name },\n        ],\n        actionFn: ({ team, role }) =>\n          postRequest(awxAPI`/role_team_assignments/`, {\n            team: team.id,\n            role_definition: role.id,\n            content_type: 'awx.notificationtemplate',\n            object_id: credential.id,\n          }),\n        onComplete: () => {\n          resolve();\n        },\n        onClose: () => {\n          pageNavigate(AwxRoute.NotificationTemplateTeamAccess, {\n            params: { id: credential.id.toString() },\n          });\n        },\n      });\n    });\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Add roles')}\n        breadcrumbs={[\n          { label: t('Notifiers'), to: getPageUrl(AwxRoute.NotificationTemplates) },\n          {\n            label: credential?.name,\n            to: getPageUrl(AwxRoute.NotificationTemplateDetails, {\n              params: { id: credential?.id },\n            }),\n          },\n          {\n            label: t('Team Access'),\n            to: getPageUrl(AwxRoute.NotificationTemplateTeamAccess, {\n              params: { id: credential?.id },\n            }),\n          },\n          { label: t('Add roles') },\n        ]}\n      />\n      <PageWizard<WizardFormValues>\n        steps={steps}\n        onSubmit={onSubmit}\n        disableGrid\n        onCancel={() => {\n          pageNavigate(AwxRoute.NotificationTemplateTeamAccess, { params: { id: credential?.id } });\n        }}\n      />\n    </PageLayout>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport useSWR from 'swr';\nimport {\n  PageFormSubmitHandler,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { PageFormTextInput } from '../../../../framework/PageForm/Inputs/PageFormTextInput';\nimport { requestGet, requestPatch, swrOptions } from '../../../common/crud/Data';\nimport { usePostRequest } from '../../../common/crud/usePostRequest';\nimport { useInvalidateCacheOnUnmount } from '../../../common/useInvalidateCache/useInvalidateCache';\nimport { PageFormSelectExecutionEnvironment } from '../../administration/execution-environments/components/PageFormSelectExecutionEnvironment';\nimport { PageFormInstanceGroupSelect } from '../../administration/instance-groups/components/PageFormInstanceGroupSelect';\nimport { AwxPageForm } from '../../common/AwxPageForm';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { getAddedAndRemoved } from '../../common/util/getAddedAndRemoved';\nimport { InstanceGroup } from '../../interfaces/InstanceGroup';\nimport { Organization } from '../../interfaces/Organization';\nimport { AwxRoute } from '../../main/AwxRoutes';\n\ntype IOrganizationData = Organization & {\n  instanceGroups?: InstanceGroup[];\n};\n\nexport function CreateOrganization() {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const pageNavigate = usePageNavigate();\n  useInvalidateCacheOnUnmount();\n\n  const postRequest = usePostRequest<{ id: number }, Organization>();\n\n  const onSubmit: PageFormSubmitHandler<IOrganizationData> = async (values) => {\n    const { instanceGroups, ...organization } = values;\n    const createdOrganization = await postRequest(awxAPI`/organizations/`, organization);\n    const igRequests = [];\n    for (const ig of values.instanceGroups || []) {\n      igRequests.push(\n        postRequest(awxAPI`/organizations/${createdOrganization.id.toString()}/instance_groups/`, {\n          id: ig.id,\n        })\n      );\n    }\n    await Promise.all(igRequests);\n    pageNavigate(AwxRoute.OrganizationDetails, { params: { id: createdOrganization.id } });\n  };\n  const onCancel = () => navigate(-1);\n  const getPageUrl = useGetPageUrl();\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Create organization')}\n        breadcrumbs={[\n          { label: t('Organizations'), to: getPageUrl(AwxRoute.Organizations) },\n          { label: t('Create organization') },\n        ]}\n      />\n      <AwxPageForm submitText={t('Create organization')} onSubmit={onSubmit} onCancel={onCancel}>\n        <OrganizationInputs />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n\nexport function EditOrganization() {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const pageNavigate = usePageNavigate();\n\n  const params = useParams<{ id?: string }>();\n  const id = Number(params.id);\n  const postRequest = usePostRequest();\n\n  const { data: organization } = useSWR<Organization>(\n    awxAPI`/organizations/${id.toString()}/`,\n    requestGet,\n    swrOptions\n  );\n  const { data: igResponse } = useSWR<{ results: InstanceGroup[] }>(\n    awxAPI`/organizations/${id.toString()}/instance_groups/`,\n    requestGet,\n    swrOptions\n  );\n  const originalInstanceGroups = igResponse?.results;\n\n  useInvalidateCacheOnUnmount();\n\n  const onSubmit: PageFormSubmitHandler<IOrganizationData> = async (values) => {\n    const { instanceGroups, ...organization } = values;\n    const { added, removed } = getAddedAndRemoved(\n      originalInstanceGroups || [],\n      instanceGroups || []\n    );\n    const editedOrganization = await requestPatch<Organization>(\n      awxAPI`/organizations/${id.toString()}/`,\n      organization\n    );\n    const disassociateRequests = [];\n    for (const ig of removed || []) {\n      disassociateRequests.push(\n        postRequest(awxAPI`/organizations/${editedOrganization.id.toString()}/instance_groups/`, {\n          id: ig.id,\n          disassociate: true,\n        })\n      );\n    }\n    await Promise.all(disassociateRequests);\n    const igRequests = [];\n    for (const ig of added || []) {\n      igRequests.push(\n        postRequest(awxAPI`/organizations/${editedOrganization.id.toString()}/instance_groups/`, {\n          id: ig.id,\n        })\n      );\n    }\n    await Promise.all(igRequests);\n    pageNavigate(AwxRoute.OrganizationDetails, { params: { id: editedOrganization.id } });\n  };\n  const onCancel = () => navigate(-1);\n  const getPageUrl = useGetPageUrl();\n  return (\n    <PageLayout>\n      <PageHeader\n        title={\n          organization?.name\n            ? t('Edit {{organizationName}}', { organizationName: organization?.name })\n            : t('Organization')\n        }\n        breadcrumbs={[\n          { label: t('Organizations'), to: getPageUrl(AwxRoute.Organizations) },\n          {\n            label: organization?.name\n              ? t('Edit {{organizationName}}', { organizationName: organization?.name })\n              : t('Organization'),\n          },\n        ]}\n      />\n      {organization ? (\n        <AwxPageForm\n          submitText={t('Save organization')}\n          onSubmit={onSubmit}\n          onCancel={onCancel}\n          defaultValue={{\n            ...organization,\n            instanceGroups: originalInstanceGroups ?? [],\n          }}\n        >\n          <OrganizationInputs orgId={organization.id} />\n        </AwxPageForm>\n      ) : null}\n    </PageLayout>\n  );\n}\n\nfunction OrganizationInputs(props: { orgId?: number }) {\n  const { t } = useTranslation();\n  const { orgId } = props;\n  return (\n    <>\n      <PageFormTextInput<IOrganizationData>\n        label={t('Name')}\n        name=\"name\"\n        placeholder={t('Enter name')}\n        isRequired\n      />\n      <PageFormTextInput<IOrganizationData>\n        label={t('Description')}\n        name=\"description\"\n        placeholder={t('Enter description')}\n      />\n      <PageFormInstanceGroupSelect<IOrganizationData>\n        name=\"instanceGroups\"\n        labelHelp={t(`Select the instance groups for this organization to run on.`)}\n      />\n      <PageFormSelectExecutionEnvironment<IOrganizationData>\n        name=\"default_environment\"\n        label={t('Execution environment')}\n        organizationId={orgId}\n      />\n      {/* TODO: galaxyCredentials */}\n    </>\n  );\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { useParams } from 'react-router-dom';\nimport { UserAccess } from '../../../../common/access/components/UserAccess';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nexport function OrganizationUserAccess() {\n  const params = useParams<{ id: string }>();\n  return (\n    <UserAccess\n      service=\"awx\"\n      id={params.id || ''}\n      type={'organization'}\n      addRolesRoute={AwxRoute.OrganizationAddUsers}\n    />\n  );\n}\n","import { Label, LabelGroup } from '@patternfly/react-core';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useParams } from 'react-router-dom';\nimport {\n  PageDetail,\n  PageDetails,\n  PageDetailsFromColumns,\n  useGetPageUrl,\n} from '../../../../../framework';\nimport { LoadingPage } from '../../../../../framework/components/LoadingPage';\nimport { useGet, useGetItem } from '../../../../common/crud/useGet';\nimport { CredentialLabel } from '../../../common/CredentialLabel';\nimport { ExecutionEnvironmentDetail } from '../../../common/ExecutionEnvironmentDetail';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { Credential } from '../../../interfaces/Credential';\nimport { InstanceGroup } from '../../../interfaces/InstanceGroup';\nimport { Organization } from '../../../interfaces/Organization';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useOrganizationsColumns } from '../Organizations';\n\nfunction useGalaxyCredentials(orgId: string) {\n  const { data } = useGet<{ results: Credential[] }>(\n    awxAPI`/organizations/${orgId}/galaxy_credentials/`\n  );\n  return data?.results ?? [];\n}\n\nfunction useInstanceGroups(orgId: string) {\n  const { data } = useGet<{ results: InstanceGroup[] }>(\n    awxAPI`/organizations/${orgId}/instance_groups/`\n  );\n  return data?.results ?? [];\n}\n\nexport function OrganizationDetails() {\n  const { t } = useTranslation();\n  const params = useParams<{ id: string }>();\n  const { data: organization } = useGetItem<Organization>(awxAPI`/organizations/`, params.id);\n  const getPageUrl = useGetPageUrl();\n\n  const columns = useOrganizationsColumns();\n  const galaxyCredentials = useGalaxyCredentials(params.id || '0');\n  const instanceGroups = useInstanceGroups(params.id || '0');\n\n  const detailColumns = useMemo(\n    () => columns.filter((col) => col.id !== 'execution-environment'),\n    [columns]\n  );\n\n  if (!organization) {\n    return <LoadingPage />;\n  }\n\n  // TODO look up license type from context (TBD) and add max hosts\n  return (\n    <PageDetails>\n      <PageDetailsFromColumns columns={detailColumns} item={organization}>\n        <ExecutionEnvironmentDetail\n          verifyMissingVirtualEnv\n          virtualEnvironment={organization.custom_virtualenv || undefined}\n          executionEnvironment={organization.summary_fields?.default_environment}\n          isDefaultEnvironment\n          helpText={t`The execution environment that will be used for jobs\n          inside of this organization. This will be used a fallback when\n          an execution environment has not been explicitly assigned at the\n          project, job template or workflow level.`}\n        />\n        <PageDetail\n          label={t`Instance groups`}\n          helpText={t`The instance groups for this organization to run on.`}\n          isEmpty={instanceGroups.length === 0}\n        >\n          <LabelGroup>\n            {instanceGroups.map((ig) => (\n              <Label color=\"blue\" key={ig.id}>\n                <Link\n                  to={getPageUrl(AwxRoute.InstanceGroupDetails, {\n                    params: {\n                      id: ig.id,\n                    },\n                  })}\n                >\n                  {ig.name}\n                </Link>\n              </Label>\n            ))}\n          </LabelGroup>\n        </PageDetail>\n        <PageDetail label={t('Galaxy credentials')} isEmpty={galaxyCredentials.length === 0}>\n          <LabelGroup>\n            {galaxyCredentials?.map((credential) => (\n              <CredentialLabel credential={credential} key={credential.id} />\n            ))}\n          </LabelGroup>\n        </PageDetail>\n      </PageDetailsFromColumns>\n    </PageDetails>\n  );\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { ButtonVariant } from '@patternfly/react-core';\nimport { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { PencilAltIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  PageActions,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { LoadingPage } from '../../../../../framework/components/LoadingPage';\nimport { PageRoutedTabs } from '../../../../common/PageRoutedTabs';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { AwxError } from '../../../common/AwxError';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { Organization } from '../../../interfaces/Organization';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useViewActivityStream } from '../../common/useViewActivityStream';\nimport { useDeleteOrganizations } from '../hooks/useDeleteOrganizations';\n\nexport function OrganizationPage() {\n  const { t } = useTranslation();\n  const params = useParams<{ id: string }>();\n  const {\n    data: organization,\n    error,\n    refresh,\n  } = useGetItem<Organization>(awxAPI`/organizations/`, params.id);\n  const pageNavigate = usePageNavigate();\n\n  const deleteOrganizations = useDeleteOrganizations((deleted: Organization[]) => {\n    if (deleted.length > 0) {\n      pageNavigate(AwxRoute.Organizations);\n    }\n  });\n\n  const activityStream = useViewActivityStream('organization');\n  const itemActions: IPageAction<Organization>[] = useMemo(() => {\n    const itemActions: IPageAction<Organization>[] = [\n      ...activityStream,\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        icon: PencilAltIcon,\n        label: t('Edit organization'),\n        onClick: (organization) =>\n          pageNavigate(AwxRoute.EditOrganization, { params: { id: organization.id } }),\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: TrashIcon,\n        label: t('Delete organization'),\n        onClick: (organization) => {\n          if (!organization) return;\n          deleteOrganizations([organization]);\n        },\n        isDanger: true,\n      },\n    ];\n    return itemActions;\n  }, [deleteOrganizations, pageNavigate, t, activityStream]);\n\n  const getPageUrl = useGetPageUrl();\n\n  if (error) return <AwxError error={error} handleRefresh={refresh} />;\n  if (!organization) return <LoadingPage breadcrumbs tabs />;\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={organization?.name}\n        breadcrumbs={[\n          { label: t('Organizations'), to: getPageUrl(AwxRoute.Organizations) },\n          { label: organization?.name },\n        ]}\n        headerActions={\n          <PageActions<Organization>\n            actions={itemActions}\n            position={DropdownPosition.right}\n            selectedItem={organization}\n          />\n        }\n      />\n      {organization && <OrganizationPageTabs organization={organization} />}\n    </PageLayout>\n  );\n}\n\nexport function OrganizationPageTabs(props: { organization: Organization }) {\n  const { organization } = props;\n  const { t } = useTranslation();\n  return (\n    <PageRoutedTabs\n      backTab={{\n        label: t('Back to Organizations'),\n        page: AwxRoute.Organizations,\n        persistentFilterKey: 'organizations',\n      }}\n      tabs={[\n        { label: t('Details'), page: AwxRoute.OrganizationDetails },\n        { label: t('Users Access'), page: AwxRoute.OrganizationUsersAccess },\n        { label: t('Teams Access'), page: AwxRoute.OrganizationTeamsAccess },\n        { label: t('Execution Environments'), page: AwxRoute.OrganizationExecutionEnvironments },\n        { label: t('Notifications'), page: AwxRoute.OrganizationNotifications },\n      ]}\n      params={{ id: organization.id }}\n    />\n  );\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { useParams } from 'react-router-dom';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { TeamAccess } from '../../../../common/access/components/TeamAccess';\nimport { useTranslation } from 'react-i18next';\n\nexport function OrganizationTeamsAccess() {\n  const params = useParams<{ id: string }>();\n  const { t } = useTranslation();\n  return (\n    <TeamAccess\n      service=\"awx\"\n      id={params.id || ''}\n      type={'organization'}\n      addRoleButtonText={t('Add team')}\n      removeRoleText={t('Remove team')}\n      removeConfirmationText={(count: number) =>\n        t('Yes, I confirm that I want to remove these {{count}} teams.', { count })\n      }\n      addRolesRoute={AwxRoute.OrganizationAddTeams as string}\n    />\n  );\n}\n","import { ExecutionEnvironmentsList } from '../../../administration/execution-environments/ExecutionEnvironmentsList';\nimport { useParams } from 'react-router-dom';\nimport { awxAPI } from '../../../common/api/awx-utils';\n\nexport function OrganizationExecutionEnvironments() {\n  const { id = '' } = useParams<{ id: string }>();\n  return (\n    <ExecutionEnvironmentsList\n      url={awxAPI`/organizations/${id}/execution_environments/`}\n      hideOrgColumn={true}\n    />\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageHeader,\n  PageLayout,\n  PageWizard,\n  PageWizardStep,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { RoleAssignmentsReviewStep } from '../../../../common/access/RolesWizard/steps/RoleAssignmentsReviewStep';\nimport { postRequest } from '../../../../common/crud/Data';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { AwxSelectRolesStep } from '../../../access/common/AwxRolesWizardSteps/AwxSelectRolesStep';\nimport { AwxSelectUsersStep } from '../../../access/common/AwxRolesWizardSteps/AwxSelectUsersStep';\nimport { awxErrorAdapter } from '../../../common/adapters/awxErrorAdapter';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkActionDialog } from '../../../common/useAwxBulkActionDialog';\nimport { AwxRbacRole } from '../../../interfaces/AwxRbacRole';\nimport { AwxUser } from '../../../interfaces/User';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { Organization } from '../../../interfaces/Organization';\n\ninterface WizardFormValues {\n  users: AwxUser[];\n  awxRoles: AwxRbacRole[];\n}\n\ninterface UserRolePair {\n  user: AwxUser;\n  role: AwxRbacRole;\n}\n\nexport function OrganizationAddUsers() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const params = useParams<{ id: string }>();\n\n  const { data: organization, isLoading } = useGetItem<Organization>(\n    awxAPI`/organizations/`,\n    params.id\n  );\n  const userProgressDialog = useAwxBulkActionDialog<UserRolePair>();\n  const pageNavigate = usePageNavigate();\n\n  if (isLoading || !organization) return <LoadingPage />;\n\n  const steps: PageWizardStep[] = [\n    {\n      id: 'users',\n      label: t('Select user(s)'),\n      inputs: (\n        <AwxSelectUsersStep\n          descriptionForUsersSelection={t(\n            'Select the user(s) that you want to give access to {{organizationName}}.',\n            {\n              organizationName: organization?.name,\n            }\n          )}\n        />\n      ),\n      validate: (formData, _) => {\n        const { users } = formData as { users: AwxUser[] };\n        if (!users?.length) {\n          throw new Error(t('Select at least one user.'));\n        }\n      },\n    },\n    {\n      id: 'awxRoles',\n      label: t('Select roles to apply'),\n      inputs: (\n        <AwxSelectRolesStep\n          contentType=\"organization\"\n          fieldNameForPreviousStep=\"users\"\n          descriptionForRoleSelection={t('Choose roles to apply to {{organizationName}}.', {\n            organizationName: organization?.name,\n          })}\n        />\n      ),\n      validate: (formData, _) => {\n        const { awxRoles } = formData as { awxRoles: AwxRbacRole[] };\n        if (!awxRoles?.length) {\n          throw new Error(t('Select at least one role.'));\n        }\n      },\n    },\n    {\n      id: 'review',\n      label: t('Review'),\n      inputs: <RoleAssignmentsReviewStep />,\n    },\n  ];\n\n  const onSubmit = (data: WizardFormValues) => {\n    const { users, awxRoles } = data;\n    const items: UserRolePair[] = [];\n    for (const user of users) {\n      for (const role of awxRoles) {\n        items.push({ user, role });\n      }\n    }\n    return new Promise<void>((resolve) => {\n      userProgressDialog({\n        title: t('Add roles'),\n        keyFn: ({ user, role }) => `${user.id}_${role.id}`,\n        items,\n        actionColumns: [\n          { header: t('User'), cell: ({ user }) => user.username },\n          { header: t('Role'), cell: ({ role }) => role.name },\n        ],\n        actionFn: ({ user, role }) =>\n          postRequest(awxAPI`/role_user_assignments/`, {\n            user: user.id,\n            role_definition: role.id,\n            content_type: 'awx.organization',\n            object_id: organization.id,\n          }),\n        onComplete: () => {\n          resolve();\n        },\n        onClose: () => {\n          pageNavigate(AwxRoute.OrganizationUsersAccess, {\n            params: { id: organization.id.toString() },\n          });\n        },\n      });\n    });\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Add roles')}\n        breadcrumbs={[\n          { label: t('Organization'), to: getPageUrl(AwxRoute.Organizations) },\n          {\n            label: organization?.name,\n            to: getPageUrl(AwxRoute.OrganizationDetails, { params: { id: organization?.id } }),\n          },\n          {\n            label: t('User Access'),\n            to: getPageUrl(AwxRoute.OrganizationUsersAccess, { params: { id: organization?.id } }),\n          },\n          { label: t('Add roles') },\n        ]}\n      />\n      <PageWizard<WizardFormValues>\n        errorAdapter={awxErrorAdapter}\n        steps={steps}\n        onSubmit={onSubmit}\n        disableGrid\n        onCancel={() => {\n          pageNavigate(AwxRoute.OrganizationUsersAccess, { params: { id: organization?.id } });\n        }}\n      />\n    </PageLayout>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageHeader,\n  PageLayout,\n  PageWizard,\n  PageWizardStep,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { RoleAssignmentsReviewStep } from '../../../../common/access/RolesWizard/steps/RoleAssignmentsReviewStep';\nimport { postRequest } from '../../../../common/crud/Data';\nimport { useGet } from '../../../../common/crud/useGet';\nimport { AwxSelectRolesStep } from '../../../access/common/AwxRolesWizardSteps/AwxSelectRolesStep';\nimport { AwxSelectTeamsStep } from '../../../access/common/AwxRolesWizardSteps/AwxSelectTeamsStep';\nimport { awxErrorAdapter } from '../../../common/adapters/awxErrorAdapter';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkActionDialog } from '../../../common/useAwxBulkActionDialog';\nimport { AwxRbacRole } from '../../../interfaces/AwxRbacRole';\nimport { Organization } from '../../../interfaces/Organization';\nimport { Team } from '../../../interfaces/Team';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\ninterface WizardFormValues {\n  teams: Team[];\n  awxRoles: AwxRbacRole[];\n}\n\ninterface TeamRolePair {\n  team: Team;\n  role: AwxRbacRole;\n}\n\nexport function OrganizationAddTeams() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const params = useParams<{ id: string }>();\n  const pageNavigate = usePageNavigate();\n  const { data: organization, isLoading } = useGet<Organization>(\n    awxAPI`/organizations/${params.id ?? ''}/`\n  );\n  const userProgressDialog = useAwxBulkActionDialog<TeamRolePair>();\n\n  if (isLoading || !organization) return <LoadingPage />;\n\n  const steps: PageWizardStep[] = [\n    {\n      id: 'teams',\n      label: t('Select team(s)'),\n      inputs: (\n        <AwxSelectTeamsStep\n          descriptionForTeamsSelection={t(\n            'Select the team(s) that you want to give access to {{organizationName}}.',\n            {\n              organizationName: organization?.name,\n            }\n          )}\n        />\n      ),\n      validate: (formData, _) => {\n        const { teams } = formData as { teams: Team[] };\n        if (!teams?.length) {\n          throw new Error(t('Select at least one team.'));\n        }\n      },\n    },\n    {\n      id: 'roles',\n      label: t('Select roles to apply'),\n      inputs: (\n        <AwxSelectRolesStep\n          contentType=\"organization\"\n          fieldNameForPreviousStep=\"teams\"\n          descriptionForRoleSelection={t('Choose roles to apply to {{organizationName}}.', {\n            organizationName: organization?.name,\n          })}\n        />\n      ),\n      validate: (formData, _) => {\n        const { awxRoles } = formData as { awxRoles: AwxRbacRole[] };\n        if (!awxRoles?.length) {\n          throw new Error(t('Select at least one role.'));\n        }\n      },\n    },\n    {\n      id: 'review',\n      label: t('Review'),\n      inputs: <RoleAssignmentsReviewStep />,\n    },\n  ];\n\n  const onSubmit = async (data: WizardFormValues) => {\n    const { teams, awxRoles } = data;\n    const items: TeamRolePair[] = [];\n    for (const team of teams) {\n      for (const role of awxRoles) {\n        items.push({ team, role });\n      }\n    }\n    return new Promise<void>((resolve) => {\n      userProgressDialog({\n        title: t('Add roles'),\n        keyFn: ({ team, role }) => `${team.id}_${role.id}`,\n        items,\n        actionColumns: [\n          { header: t('Team'), cell: ({ team }) => team.name },\n          { header: t('Role'), cell: ({ role }) => role.name },\n        ],\n        actionFn: ({ team, role }) =>\n          postRequest(awxAPI`/role_team_assignments/`, {\n            team: team.id,\n            role_definition: role.id,\n            content_type: 'awx.organization',\n            object_id: organization.id,\n          }),\n        onComplete: () => {\n          resolve();\n        },\n        onClose: () => {\n          pageNavigate(AwxRoute.OrganizationTeamsAccess, {\n            params: { id: organization.id.toString() },\n          });\n        },\n      });\n    });\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Add roles')}\n        breadcrumbs={[\n          { label: t('Organizations'), to: getPageUrl(AwxRoute.Organizations) },\n          {\n            label: organization?.name,\n            to: getPageUrl(AwxRoute.OrganizationDetails, { params: { id: organization?.id } }),\n          },\n          {\n            label: t('Team Access'),\n            to: getPageUrl(AwxRoute.OrganizationTeamsAccess, { params: { id: organization?.id } }),\n          },\n          { label: t('Add roles') },\n        ]}\n      />\n      <PageWizard<WizardFormValues>\n        errorAdapter={awxErrorAdapter}\n        steps={steps}\n        onSubmit={onSubmit}\n        disableGrid\n        onCancel={() => {\n          pageNavigate(AwxRoute.OrganizationTeamsAccess, { params: { id: organization?.id } });\n        }}\n      />\n    </PageLayout>\n  );\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport {\n  LabelGroup,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n} from '@patternfly/react-core';\nimport { useCallback } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { Link, useParams } from 'react-router-dom';\nimport {\n  CopyCell,\n  DateTimeCell,\n  LoadingPage,\n  PageDetail,\n  PageDetails,\n  TextCell,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { StandardPopover } from '../../../../../framework/components/StandardPopover';\nimport { LastModifiedPageDetail } from '../../../../common/LastModifiedPageDetail';\nimport { StatusCell } from '../../../../common/Status';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { ScmType } from '../../../../common/scm';\nimport { AwxError } from '../../../common/AwxError';\nimport { CredentialLabel } from '../../../common/CredentialLabel';\nimport { ExecutionEnvironmentDetail } from '../../../common/ExecutionEnvironmentDetail';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxConfig } from '../../../common/useAwxConfig';\nimport { useAwxWebSocketSubscription } from '../../../common/useAwxWebSocket';\nimport { useGetDocsUrl } from '../../../common/util/useGetDocsUrl';\nimport { Project } from '../../../interfaces/Project';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\nexport function ProjectDetails(props: { projectId?: string; disableScroll?: boolean }) {\n  const { t } = useTranslation();\n  const params = useParams<{ id: string }>();\n  const urlId = props?.projectId ? props.projectId : params.id;\n  const { error, data: project, refresh } = useGetItem<Project>(awxAPI`/projects`, urlId);\n  const pageNavigate = usePageNavigate();\n  const config = useAwxConfig();\n  const getPageUrl = useGetPageUrl();\n\n  const handleWebSocketMessage = useCallback(\n    (message?: { group_name?: string; type?: string }) => {\n      switch (message?.group_name) {\n        case 'jobs':\n          switch (message?.type) {\n            case 'job':\n            case 'workflow_job':\n            case 'project_update':\n              void refresh();\n              break;\n          }\n          break;\n      }\n    },\n    [refresh]\n  );\n  useAwxWebSocketSubscription(\n    { control: ['limit_reached_1'], jobs: ['status_changed'] },\n    handleWebSocketMessage as (data: unknown) => void\n  );\n\n  const brand: string = process.env.BRAND ?? 'AWX';\n  const product: string = process.env.PRODUCT ?? t('Ansible');\n  const signatureValidationHelpText = t`Enable content signing to verify that the content has remained secure when a project is synced. If the content has been tampered with, the job will not run.`;\n  const playbookDirectoryHelpText = t`Select from the list of directories found in the project base path. Together the base path and the playbook directory provide the full path used to locate playbooks.`;\n  const cacheTimeoutHelpText = t`Time in seconds to consider a project\n  to be current. During job runs and callbacks the task\n  system will evaluate the timestamp of the latest project\n  update. If it is older than cache timeout, it is not\n  considered current, and a new project update will be\n  performed.`;\n  const defaultEnvironmentHelpText = t`The execution environment that will be used for jobs\n  inside of this organization. This will be used a fallback when\n  an execution environment has not been explicitly assigned at the\n  project, job template or workflow level.`;\n  const sourceControlRefspecHelpBlock = (\n    <span>\n      {t`A refspec to fetch (passed to the Ansible git\n            module). This parameter allows access to references via\n            the branch field not otherwise available.`}\n      <br />\n      <br />\n      {t`Note: This field assumes the remote name is \"origin\".`}\n      <br />\n      <br />\n      {t`Examples include:`}\n      <ul style={{ margin: '10px 0 10px 20px' }}>\n        <Trans>\n          <li>\n            <code>refs/*:refs/remotes/origin/*</code>\n          </li>\n          <li>\n            <code>refs/pull/62/head:refs/remotes/origin/pull/62/head</code>\n          </li>\n        </Trans>\n      </ul>\n      {t`The first fetches all references. The second\n            fetches the Github pull request number 62, in this example\n            the branch needs to be \"pull/62/head\".`}\n      <br />\n      <br />\n      {t`For more information, refer to the`}{' '}\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href={useGetDocsUrl(config, 'managePlaybooksSC')}\n      >\n        {t`Documentation.`}\n      </a>\n    </span>\n  );\n  const basePathHelpBlock = (\n    <>\n      <p>\n        {t(\n          'Base path used for locating playbooks. Directories found inside this path will be listed in the playbook directory drop-down. Together the base path and selected playbook directory provide the full path used to locate playbooks.'\n        )}\n      </p>\n      <br></br>\n      <p>\n        <Trans>\n          Change PROJECTS_ROOT when deploying {{ product }} {{ brand }} to change this location.\n        </Trans>\n      </p>\n    </>\n  );\n  const scmUrlHelpBlock = (\n    <>\n      <p>{t('Example URLs for GIT Source Control include:')}</p>\n      <Trans>\n        <code>\n          https://github.com/ansible/ansible.git git@github.com:ansible/ansible.git\n          git://servername.example.com/ansible.git\n        </code>\n      </Trans>\n      <p>\n        {t(\n          'Note: When using SSH protocol for GitHub or Bitbucket, enter an SSH key only, do not enter a username (other than git). Additionally, GitHub and Bitbucket do not support password authentication when using SSH. GIT read only protocol (git://) does not use username or password information.'\n        )}\n      </p>\n    </>\n  );\n  const renderOptions = (options: Project) => (\n    <TextList component={TextListVariants.ul}>\n      {options.scm_clean && (\n        <TextListItem component={TextListItemVariants.li}>\n          {t`Discard local changes before syncing`}\n          <StandardPopover\n            header={''}\n            content={t`Remove any local modifications prior to performing an update.`}\n          />\n        </TextListItem>\n      )}\n      {options.scm_delete_on_update && (\n        <TextListItem component={TextListItemVariants.li}>\n          {t`Delete the project before syncing`}\n          <StandardPopover\n            header={''}\n            content={t`Delete the local repository in its entirety prior to\n                  performing an update. Depending on the size of the\n                  repository this may significantly increase the amount\n                  of time required to complete an update.`}\n          />\n        </TextListItem>\n      )}\n      {options.scm_track_submodules && (\n        <TextListItem component={TextListItemVariants.li}>\n          {t`Track submodules latest commit on branch`}\n          <StandardPopover\n            header={''}\n            content={t`Submodules will track the latest commit on\n                  their master branch (or other branch specified in\n                  .gitmodules). If no, submodules will be kept at\n                  the revision specified by the main project.\n                  This is equivalent to specifying the --remote\n                  flag to git submodule update.`}\n          />\n        </TextListItem>\n      )}\n      {options.scm_update_on_launch && (\n        <TextListItem component={TextListItemVariants.li}>\n          {t`Update revision on job launch`}\n          <StandardPopover\n            header={''}\n            content={t`Each time a job runs using this project, update the\n                  revision of the project prior to starting the job.`}\n          />\n        </TextListItem>\n      )}\n      {options.allow_override && (\n        <TextListItem component={TextListItemVariants.li}>\n          {t`Allow branch override`}\n          <StandardPopover\n            header={''}\n            content={t`Allow changing the Source Control branch or revision in a job\n                    template that uses this project.`}\n          />\n        </TextListItem>\n      )}\n    </TextList>\n  );\n  if (error) return <AwxError error={error} handleRefresh={refresh} />;\n  if (!project) return <LoadingPage breadcrumbs tabs />;\n  return (\n    <PageDetails disableScroll={props.disableScroll}>\n      <PageDetail label={t('Name')}>\n        {props.projectId ? (\n          <Link to={getPageUrl(AwxRoute.ProjectDetails, { params: { id: props.projectId } })}>\n            {project.name}\n          </Link>\n        ) : (\n          project.name\n        )}\n      </PageDetail>\n      <PageDetail label={t('Description')}>{project.description}</PageDetail>\n      {project.summary_fields?.organization?.name && (\n        <PageDetail label={t('Organization')}>\n          <TextCell\n            text={project.summary_fields?.organization?.name}\n            to={getPageUrl(AwxRoute.OrganizationDetails, {\n              params: { id: project.summary_fields?.organization?.id },\n            })}\n          />\n        </PageDetail>\n      )}\n      <PageDetail label={t('Last job status')}>\n        {project.summary_fields?.current_job || project.summary_fields?.last_job ? (\n          <StatusCell\n            status={project.status}\n            to={getPageUrl(AwxRoute.JobOutput, {\n              params: {\n                job_type: project.type,\n                id: project.summary_fields?.current_job?.id ?? project.summary_fields?.last_job?.id,\n              },\n            })}\n          />\n        ) : (\n          <StatusCell status={project.status} />\n        )}\n      </PageDetail>\n      <PageDetail label={t('Source control type')}>\n        <ScmType scmType={project.scm_type} />\n      </PageDetail>\n      {project.scm_revision && (\n        <PageDetail label={t('Source control revision')}>\n          <CopyCell text={project.scm_revision} />\n        </PageDetail>\n      )}\n      <PageDetail label={t('Source control URL')} helpText={scmUrlHelpBlock}>\n        {project.scm_url}\n      </PageDetail>\n      <PageDetail label={t('Source control branch')}>{project.scm_branch}</PageDetail>\n      <PageDetail label={t('Source control refspec')} helpText={sourceControlRefspecHelpBlock}>\n        {project.scm_refspec}\n      </PageDetail>\n      {project.summary_fields.signature_validation_credential && (\n        <PageDetail\n          label={t('Content signature validation credential')}\n          helpText={signatureValidationHelpText}\n        >\n          <LabelGroup>\n            <CredentialLabel\n              credential={project.summary_fields.signature_validation_credential}\n              key={project.summary_fields.signature_validation_credential.id}\n            />\n          </LabelGroup>\n        </PageDetail>\n      )}\n      {project.summary_fields.credential && (\n        <PageDetail label={t('Source control credential')}>\n          <LabelGroup>\n            <CredentialLabel\n              credential={project.summary_fields.credential}\n              key={project.summary_fields.credential.id}\n            />\n          </LabelGroup>\n        </PageDetail>\n      )}\n      <PageDetail label={t('Cache timeout')} helpText={cacheTimeoutHelpText}>\n        {`${project.scm_update_cache_timeout} seconds`}\n      </PageDetail>\n      {project.summary_fields.default_environment && (\n        <ExecutionEnvironmentDetail\n          virtualEnvironment={project.custom_virtualenv || undefined}\n          executionEnvironment={project.summary_fields.default_environment}\n          isDefaultEnvironment\n          helpText={defaultEnvironmentHelpText}\n        />\n      )}\n      <PageDetail label={t('Project base path')} helpText={basePathHelpBlock}>\n        {config?.project_base_dir}\n      </PageDetail>\n      <PageDetail label={t('Playbook directory')} helpText={playbookDirectoryHelpText}>\n        {project.local_path}\n      </PageDetail>\n      <PageDetail label={t('Created')}>\n        <DateTimeCell\n          value={project.created}\n          author={project.summary_fields?.created_by?.username}\n          onClick={() =>\n            pageNavigate(AwxRoute.UserDetails, {\n              params: { id: project.summary_fields?.created_by?.id },\n            })\n          }\n        />\n      </PageDetail>\n      <LastModifiedPageDetail\n        value={project.modified}\n        author={project.summary_fields?.modified_by?.username}\n        onClick={() =>\n          pageNavigate(AwxRoute.UserDetails, {\n            params: { id: project.summary_fields?.modified_by?.id },\n          })\n        }\n      />\n      {(project.scm_clean ||\n        project.scm_delete_on_update ||\n        project.scm_track_submodules ||\n        project.scm_update_on_launch ||\n        project.allow_override) && (\n        <PageDetail label={t('Enabled options')}>{renderOptions(project)}</PageDetail>\n      )}\n    </PageDetails>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { PageFormCheckbox, PageFormTextInput } from '../../../../../framework';\nimport { PageFormHidden } from '../../../../../framework/PageForm/Utils/PageFormHidden';\nimport { PageFormSection } from '../../../../../framework/PageForm/Utils/PageFormSection';\nimport { Project } from '../../../interfaces/Project';\n\nexport function ScmTypeOptions(props: { hideAllowOverride?: boolean }) {\n  const { t } = useTranslation();\n  return (\n    <PageFormSection title={t('Options')}>\n      <PageFormCheckbox<Project>\n        id=\"option-scm-clean\"\n        label={t('Clean')}\n        labelHelpTitle={t('Clean')}\n        labelHelp={t('Remove any local modifications prior to performing an update.')}\n        name=\"scm_clean\"\n      />\n      <PageFormCheckbox<Project>\n        id=\"option-scm-delete-on-update\"\n        label={t('Delete')}\n        labelHelpTitle={t('Delete')}\n        labelHelp={t(\n          'Delete the local repository in its entirety prior to performing an update. Depending on the size of the repository this may significantly increase the amount of time required to complete an update.'\n        )}\n        name=\"scm_delete_on_update\"\n      />\n      <PageFormHidden watch=\"scm_type\" hidden={(type: string) => type !== 'git'}>\n        <PageFormCheckbox<Project>\n          id=\"option-scm-track-submodules\"\n          label={t('Track submodules')}\n          labelHelpTitle={t('Track submodules')}\n          labelHelp={t(\n            'Submodules will track the latest commit on their master branch (or other branch specified in .gitmodules). If no, submodules will be kept at the revision specified by the main project. This is equivalent to specifying the --remote flag to git submodule update.'\n          )}\n          name=\"scm_track_submodules\"\n        />\n      </PageFormHidden>\n      <PageFormCheckbox<Project>\n        id=\"option-scm-update-on-launch\"\n        label={t('Update revision on launch')}\n        labelHelp={t(\n          'Each time a job runs using this project, update the revision of the project prior to starting the job.'\n        )}\n        name=\"scm_update_on_launch\"\n      />\n      {!props.hideAllowOverride && (\n        <PageFormCheckbox<Project>\n          id=\"option-allow-override\"\n          label={t('Allow branch override')}\n          labelHelp={t(\n            'Allow changing the source control branch or revision in a job template that uses this project.'\n          )}\n          name=\"allow_override\"\n        />\n      )}\n      <PageFormHidden\n        watch=\"scm_update_on_launch\"\n        hidden={(scmUpdateOnLaunch?: boolean) => !scmUpdateOnLaunch}\n      >\n        <PageFormSection title={t('Option Details')}>\n          <PageFormTextInput<Project>\n            name=\"scm_update_cache_timeout\"\n            type=\"number\"\n            labelHelp={t(\n              'Time in seconds to consider a project to be current. During job runs and callbacks the task system will evaluate the timestamp of the latest project update. If it is older than Cache Timeout, it is not considered current, and a new project update will be performed.'\n            )}\n            label={t('Cache Timeout')}\n            min=\"0\"\n          />\n        </PageFormSection>\n      </PageFormHidden>\n    </PageFormSection>\n  );\n}\n","import { Trans, useTranslation } from 'react-i18next';\nimport { PageFormTextInput } from '../../../../../framework';\nimport { PageFormHidden } from '../../../../../framework/PageForm/Utils/PageFormHidden';\nimport { PageFormSection } from '../../../../../framework/PageForm/Utils/PageFormSection';\nimport { PageFormCredentialSelect } from '../../../access/credentials/components/PageFormCredentialSelect';\nimport { Project } from '../../../interfaces/Project';\nimport { ScmTypeOptions } from './ScmTypeOptions';\n\nexport function ArchiveSubForm() {\n  const { t } = useTranslation();\n  const archiveSourceControlUrlHelp = (\n    <Trans i18nKey=\"archiveSourceControlUrlHelp\">\n      <span>\n        Example URLs for Remote Archive Source Control include:\n        <ul>\n          <li>\n            <code>https://github.com/username/project/archive/v0.0.1.tar.gz</code>\n          </li>\n          <li>\n            <code>https://github.com/username/project/archive/v0.0.2.zip</code>\n          </li>\n        </ul>\n      </span>\n    </Trans>\n  );\n\n  return (\n    <PageFormHidden watch=\"scm_type\" hidden={(type: string) => type !== 'archive'}>\n      <PageFormSection title={t('Type Details')}>\n        <PageFormTextInput<Project>\n          name=\"scm_url\"\n          label={t('Source control URL')}\n          labelHelpTitle={t('Source control URL')}\n          labelHelp={archiveSourceControlUrlHelp}\n          isRequired\n        />\n        <PageFormCredentialSelect<Project>\n          name=\"credential\"\n          label={t('Source control credential')}\n          queryParams={{\n            credential_type__namespace: 'scm',\n          }}\n        />\n        <ScmTypeOptions />\n      </PageFormSection>\n    </PageFormHidden>\n  );\n}\n","import { Trans, useTranslation } from 'react-i18next';\nimport { PageFormTextInput } from '../../../../../framework';\nimport { PageFormHidden } from '../../../../../framework/PageForm/Utils/PageFormHidden';\nimport { PageFormSection } from '../../../../../framework/PageForm/Utils/PageFormSection';\nimport { PageFormCredentialSelect } from '../../../access/credentials/components/PageFormCredentialSelect';\nimport { useAwxConfig } from '../../../common/useAwxConfig';\nimport { useGetDocsUrl } from '../../../common/util/useGetDocsUrl';\nimport { Project } from '../../../interfaces/Project';\nimport { ScmTypeOptions } from './ScmTypeOptions';\n\nexport function GitSubForm() {\n  const { t } = useTranslation();\n  const config = useAwxConfig();\n\n  const gitSourceControlUrlHelp = (\n    <Trans i18nKey=\"gitSourceControlUrlHelp\">\n      <span>\n        Example URLs for GIT Source Control include:\n        <ul>\n          <li>\n            <code>https://github.com/ansible/ansible.git</code>\n          </li>\n          <li>\n            <code>git@github.com:ansible/ansible.git</code>\n          </li>\n          <li>\n            <code>git://servername.example.com/ansible.git</code>\n          </li>\n        </ul>\n        Note: When using SSH protocol for GitHub or Bitbucket, enter an SSH key only, do not enter a\n        username (other than git). Additionally, GitHub and Bitbucket do not support password\n        authentication when using SSH. GIT read only protocol (git://) does not use username or\n        password information.\n      </span>\n    </Trans>\n  );\n  const sourceControlRefspecHelp = (\n    <Trans i18nKey=\"sourceControlRefspecHelp\">\n      <span>\n        A refspec to fetch (passed to the Ansible git module). This parameter allows access to\n        references via the branch field not otherwise available.\n        <br />\n        <br />\n        Note: This field assumes the remote name is &quot;origin&quot;.\n        <br />\n        <br />\n        Examples include:\n        <ul style={{ margin: '10px 0 10px 20px' }}>\n          <li>\n            <code>refs/*:refs/remotes/origin/*</code>\n          </li>\n          <li>\n            <code>refs/pull/62/head:refs/remotes/origin/pull/62/head</code>\n          </li>\n        </ul>\n        The first fetches all references. The second fetches the Github pull request number 62, in\n        this example the branch needs to be &quot;pull/62/head&quot;.\n        <br />\n        <br />\n        {t`For more information, refer to the`}{' '}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href={useGetDocsUrl(config, 'managePlaybooksSC')}\n        >\n          {t`Documentation.`}\n        </a>\n      </span>\n    </Trans>\n  );\n\n  return (\n    <PageFormHidden watch=\"scm_type\" hidden={(type: string) => type !== 'git'}>\n      <PageFormSection title={t('Type Details')}>\n        <PageFormTextInput<Project>\n          name=\"scm_url\"\n          label={t('Source control URL')}\n          labelHelpTitle={t('Source control URL')}\n          labelHelp={gitSourceControlUrlHelp}\n          isRequired\n        />\n        <PageFormTextInput<Project>\n          name=\"scm_branch\"\n          label={t('Source control branch/tag/commit')}\n          labelHelpTitle={t('Source control branch/tag/commit')}\n          labelHelp={t(\n            'Branch to checkout. In addition to branches, you can input tags, commit hashes, and arbitrary refs. Some commit hashes and refs may not be available unless you also provide a custom refspec.'\n          )}\n        />\n        <PageFormTextInput<Project>\n          name=\"scm_refspec\"\n          label={t('Source control refspec')}\n          labelHelpTitle={t('Source control refspec')}\n          labelHelp={sourceControlRefspecHelp}\n        />\n        <PageFormCredentialSelect<Project>\n          name=\"credential\"\n          label={t('Source control credential')}\n          queryParams={{\n            credential_type__namespace: 'scm',\n          }}\n        />\n        <ScmTypeOptions />\n      </PageFormSection>\n    </PageFormHidden>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { PageFormHidden } from '../../../../../framework/PageForm/Utils/PageFormHidden';\nimport { PageFormSection } from '../../../../../framework/PageForm/Utils/PageFormSection';\nimport { PageFormCredentialSelect } from '../../../access/credentials/components/PageFormCredentialSelect';\nimport { Project } from '../../../interfaces/Project';\nimport { ScmTypeOptions } from './ScmTypeOptions';\n\nexport function InsightsSubForm() {\n  const { t } = useTranslation();\n\n  return (\n    <PageFormHidden watch=\"scm_type\" hidden={(type: string) => type !== 'insights'}>\n      <PageFormSection title={t('Type Details')}>\n        <PageFormCredentialSelect<Project>\n          name=\"credential\"\n          label={t('Insights credential')}\n          isRequired\n          queryParams={{\n            credential_type__namespace: 'insights',\n          }}\n        />\n        <ScmTypeOptions hideAllowOverride />\n      </PageFormSection>\n    </PageFormHidden>\n  );\n}\n","import { Alert } from '@patternfly/react-core';\nimport { Trans, useTranslation } from 'react-i18next';\nimport useSWR from 'swr';\nimport { PageFormSelect, PageFormTextInput } from '../../../../../framework';\nimport { PageFormHidden } from '../../../../../framework/PageForm/Utils/PageFormHidden';\nimport { PageFormSection } from '../../../../../framework/PageForm/Utils/PageFormSection';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { Project } from '../../../interfaces/Project';\n\ninterface IConfigData {\n  project_base_dir: string | null;\n  project_local_paths?: string[];\n}\n\nexport function ManualSubForm(props: { localPath?: string }) {\n  const { t } = useTranslation();\n  const { data: config } = useSWR<IConfigData>(awxAPI`/config/`, (url: string) =>\n    fetch(url).then((r) => r.json())\n  );\n  const brand: string = process.env.BRAND ?? 'AWX';\n  const product: string = process.env.PRODUCT ?? t('Ansible');\n  const basePathHelpBlock = (\n    <Trans i18nKey=\"basePathHelpBlock\">\n      <p>\n        Base path used for locating playbooks. Directories found inside this path will be listed in\n        the playbook directory drop-down. Together the base path and selected playbook directory\n        provide the full path used to locate playbooks.\n      </p>\n      <br></br>\n      <p>\n        Change PROJECTS_ROOT when deploying {product} {brand} to change this location.\n      </p>\n    </Trans>\n  );\n  const noPlaybookDirectoriesAlert = (\n    <Trans i18nKey=\"noPlaybookDirectoriesAlert\">\n      <p>\n        There are no available playbook directories in {config?.project_base_dir ?? ''}. Either that\n        directory is empty, or all of the contents are already assigned to other projects. Create a\n        new directory there and make sure the playbook files can be read by the &quot;awx&quot;\n        system user, or have {product} {brand} directly retrieve your playbooks from source control\n        using the Source Control Type option above.\n      </p>\n    </Trans>\n  );\n  const projectLocalPaths = config?.project_local_paths\n    ? config?.project_local_paths.map((path) => ({\n        label: path,\n        value: path,\n      }))\n    : [];\n  const localPath =\n    typeof props.localPath === 'string' && props.localPath.length > 0\n      ? [\n          {\n            label: props.localPath,\n            value: props.localPath,\n          },\n        ]\n      : [];\n  const options = [...projectLocalPaths, ...localPath];\n\n  return (\n    <PageFormHidden watch=\"scm_type\" hidden={(type: string) => type !== 'manual'}>\n      <PageFormSection title={t('Type Details')}>\n        {options.length === 0 && (\n          <PageFormSection singleColumn>\n            <Alert\n              title={t`WARNING: `}\n              variant=\"warning\"\n              isInline\n              ouiaId=\"project-manual-subform-alert\"\n            >\n              {noPlaybookDirectoriesAlert}\n            </Alert>\n          </PageFormSection>\n        )}\n        <PageFormTextInput<Project>\n          name=\"base_dir\"\n          label={t('Project base path')}\n          placeholder={config?.project_base_dir ?? ''}\n          labelHelpTitle={t('Project base path')}\n          labelHelp={basePathHelpBlock}\n          isReadOnly\n        />\n        <PageFormSelect<Project>\n          isRequired\n          name=\"local_path\"\n          id=\"project_local_path\"\n          label={t('Playbook directory')}\n          options={options}\n          placeholderText={t('Choose a playbook directory')}\n          labelHelpTitle={t('Playbook directory')}\n          labelHelp={t(\n            'Select from the list of directories found in the project base path. Together the base path and the playbook directory provide the full path used to locate playbooks.'\n          )}\n        />\n      </PageFormSection>\n    </PageFormHidden>\n  );\n}\n","import { Trans, useTranslation } from 'react-i18next';\nimport { PageFormTextInput } from '../../../../../framework';\nimport { PageFormHidden } from '../../../../../framework/PageForm/Utils/PageFormHidden';\nimport { PageFormSection } from '../../../../../framework/PageForm/Utils/PageFormSection';\nimport { PageFormCredentialSelect } from '../../../access/credentials/components/PageFormCredentialSelect';\nimport { Project } from '../../../interfaces/Project';\nimport { ScmTypeOptions } from './ScmTypeOptions';\n\nexport function SvnSubForm() {\n  const { t } = useTranslation();\n  const svnSourceControlUrlHelp = (\n    <Trans i18nKey=\"svnSourceControlUrlHelp\">\n      <span>\n        Example URLs for Subversion Source Control include:\n        <ul>\n          <li>\n            <code>https://github.com/ansible/ansible</code>\n          </li>\n          <li>\n            <code>svn://servername.example.com/path</code>\n          </li>\n          <li>\n            <code>svn+ssh://servername.example.com/path</code>\n          </li>\n        </ul>\n      </span>\n    </Trans>\n  );\n\n  return (\n    <PageFormHidden watch=\"scm_type\" hidden={(type: string) => type !== 'svn'}>\n      <PageFormSection title={t('Type Details')}>\n        <PageFormTextInput<Project>\n          name=\"scm_url\"\n          label={t('Source control URL')}\n          labelHelpTitle={t('Source control URL')}\n          labelHelp={svnSourceControlUrlHelp}\n          isRequired\n        />\n        <PageFormTextInput\n          name=\"scm_branch\"\n          label={t('Revision number')}\n          labelHelp={t(\n            'Branch to checkout. In addition to branches, you can input tags, commit hashes, and arbitrary refs. Some commit hashes and refs may not be available unless you also provide a custom refspec.'\n          )}\n        />\n        <PageFormCredentialSelect<Project>\n          name=\"credential\"\n          label={t('Source control credential')}\n          queryParams={{\n            credential_type__namespace: 'scm',\n          }}\n        />\n        <ScmTypeOptions />\n      </PageFormSection>\n    </PageFormHidden>\n  );\n}\n","import { useEffect } from 'react';\nimport { useFormContext, useWatch } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport {\n  PageFormSelect,\n  PageFormSubmitHandler,\n  PageFormTextInput,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { requestPatch } from '../../../../common/crud/Data';\nimport { useGet } from '../../../../common/crud/useGet';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { PageFormCredentialSelect } from '../../../access/credentials/components/PageFormCredentialSelect';\nimport { PageFormSelectOrganization } from '../../../access/organizations/components/PageFormOrganizationSelect';\nimport { PageFormSelectExecutionEnvironment } from '../../../administration/execution-environments/components/PageFormSelectExecutionEnvironment';\nimport { AwxPageForm } from '../../../common/AwxPageForm';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { ActionsResponse, OptionsResponse } from '../../../interfaces/OptionsResponse';\nimport { Project } from '../../../interfaces/Project';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { ArchiveSubForm } from '../ProjectSubForms/ArchiveSubForm';\nimport { GitSubForm } from '../ProjectSubForms/GitSubForm';\nimport { InsightsSubForm } from '../ProjectSubForms/InsightsSubForm';\nimport { ManualSubForm } from '../ProjectSubForms/ManualSubForm';\nimport { SvnSubForm } from '../ProjectSubForms/SvnSubForm';\n\nconst defaultValues: Partial<Project> = {\n  base_dir: '',\n  credential: null,\n  local_path: '',\n  scm_branch: '',\n  scm_clean: false,\n  scm_delete_on_update: false,\n  scm_track_submodules: false,\n  scm_refspec: '',\n  scm_type: '',\n  scm_update_cache_timeout: 0,\n  scm_update_on_launch: false,\n  scm_url: '',\n  signature_validation_credential: null,\n  default_environment: null,\n};\n\nexport function CreateProject() {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const navigate = useNavigate();\n  const postRequest = usePostRequest<Project>();\n  const onSubmit: PageFormSubmitHandler<Project> = async (project: Project) => {\n    if (project.scm_type === 'manual') {\n      project.scm_type = '';\n    }\n    // Create new project\n    const newProject = await postRequest(awxAPI`/projects/`, project);\n\n    pageNavigate(AwxRoute.ProjectDetails, { params: { id: newProject.id } });\n  };\n\n  const getPageUrl = useGetPageUrl();\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Create project')}\n        breadcrumbs={[\n          { label: t('Projects'), to: getPageUrl(AwxRoute.Projects) },\n          { label: t('Create project') },\n        ]}\n      />\n      <AwxPageForm\n        submitText={t('Create project')}\n        onSubmit={onSubmit}\n        onCancel={() => navigate(-1)}\n        defaultValue={defaultValues as Project}\n      >\n        <ProjectInputs />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n\nexport function EditProject() {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const pageNavigate = usePageNavigate();\n  const params = useParams<{ id?: string }>();\n  const id = Number(params.id);\n  const { data: project } = useGet<Project>(awxAPI`/projects/${id.toString()}/`);\n\n  if (project && project.scm_type === '') {\n    project.scm_type = 'manual';\n  }\n\n  const onSubmit: PageFormSubmitHandler<Project> = async (project: Project) => {\n    if (project.scm_type === 'manual') {\n      project.scm_type = '';\n    }\n\n    // Update project\n    const updatedProject = await requestPatch<Project>(\n      awxAPI`/projects/${id.toString()}/`,\n      project\n    );\n\n    pageNavigate(AwxRoute.ProjectDetails, { params: { id: updatedProject.id } });\n  };\n\n  const getPageUrl = useGetPageUrl();\n\n  if (!project) {\n    return (\n      <PageLayout>\n        <PageHeader\n          breadcrumbs={[\n            { label: t('Projects'), to: getPageUrl(AwxRoute.Projects) },\n            { label: t('Edit Project') },\n          ]}\n        />\n      </PageLayout>\n    );\n  }\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={\n          project?.name ? t('Edit {{projectName}}', { projectName: project?.name }) : t('Project')\n        }\n        breadcrumbs={[\n          { label: t('Projects'), to: getPageUrl(AwxRoute.Projects) },\n          {\n            label: project?.name\n              ? t('Edit {{projectName}}', { projectName: project?.name })\n              : t('Project'),\n          },\n        ]}\n      />\n      <AwxPageForm<Project>\n        submitText={t('Save project')}\n        onSubmit={onSubmit}\n        onCancel={() => navigate(-1)}\n        defaultValue={project}\n      >\n        <ProjectInputs project={project} />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst scmFormFieldDefaults: { [key: string]: any } = {\n  scm_url: '',\n  scm_branch: '',\n  scm_refspec: '',\n  credential: null,\n  signature_validation_credential: null,\n  scm_clean: false,\n  scm_delete_on_update: false,\n  scm_track_submodules: false,\n  scm_update_on_launch: false,\n  allow_override: false,\n  scm_update_cache_timeout: 0,\n};\n\nfunction ProjectInputs(props: { project?: Project }) {\n  const { t } = useTranslation();\n  const organizationId = useWatch<Project, 'organization'>({ name: 'organization' });\n  const { data } = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/projects/`);\n  const scmTypeOptions = data?.actions?.GET?.scm_type?.choices;\n  const scmType = useWatch<Project, 'scm_type'>({ name: 'scm_type' });\n  const { project } = props;\n  const { setValue } = useFormContext();\n\n  // Reset SCM fields when the source control type is changed\n  useEffect(() => {\n    const resetSCMTypeFields = () => {\n      if (project !== undefined && scmType && scmType === project.scm_type) {\n        Object.keys(scmFormFieldDefaults).forEach((field) => {\n          setValue(`${field}`, project[field as keyof Project]);\n        });\n      } else {\n        Object.keys(scmFormFieldDefaults).forEach((field) => {\n          setValue(`${field}`, scmFormFieldDefaults[field]);\n        });\n      }\n    };\n    resetSCMTypeFields();\n  }, [project, scmType, setValue]);\n\n  return (\n    <>\n      <PageFormTextInput<Project>\n        name=\"name\"\n        label={t('Name')}\n        placeholder={t('Enter name')}\n        isRequired\n      />\n      <PageFormTextInput<Project>\n        label={t('Description')}\n        name=\"description\"\n        placeholder={t('Enter description')}\n      />\n      <PageFormSelectOrganization<Project> name=\"organization\" isRequired />\n      <PageFormSelectExecutionEnvironment<Project>\n        name=\"default_environment\"\n        organizationId={organizationId}\n        label={t('Execution environment')}\n        isDisabled={\n          organizationId === undefined\n            ? t('Select an organization before editing the default execution environment.')\n            : undefined\n        }\n      />\n      <PageFormSelect<Project>\n        isRequired\n        name=\"scm_type\"\n        id=\"source_control_type\"\n        label={t('Source control type')}\n        options={\n          scmTypeOptions\n            ? scmTypeOptions.map(([value, label]) => ({\n                label: label,\n                value: value === '' ? 'manual' : value,\n              }))\n            : []\n        }\n        placeholderText={t('Choose a Source Control Type')}\n      />\n      <PageFormCredentialSelect<Project>\n        id=\"signature_validation_credential\"\n        name=\"signature_validation_credential\"\n        label={t('Content signature validation credential')}\n        labelHelp={t(\n          'Enable content signing to verify that the content has remained secure when a project is synced. If the content has been tampered with, the job will not run.'\n        )}\n        queryParams={{\n          credential_type__namespace: 'gpg_public_key',\n        }}\n      />\n      <ManualSubForm\n        localPath={props.project?.local_path ? props.project?.local_path : undefined}\n      />\n      <GitSubForm />\n      <SvnSubForm />\n      <ArchiveSubForm />\n      <InsightsSubForm />\n    </>\n  );\n}\n","import { useParams } from 'react-router-dom';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { TemplatesList } from '../../templates/TemplatesList';\n\nexport function ProjectJobTemplates() {\n  const { id = '' } = useParams<{ id: string }>();\n  return <TemplatesList url={awxAPI`/job_templates/`} projectId={id} />;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { compareStrings } from '../../../../../framework';\nimport { useNameColumn } from '../../../../common/columns';\nimport { getItemKey } from '../../../../common/crud/Data';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { Project } from '../../../interfaces/Project';\nimport { useProjectsColumns } from './useProjectsColumns';\n\nexport function useCancelProjects(onComplete?: (projects: Project[]) => void) {\n  const { t } = useTranslation();\n  const confirmationColumns = useProjectsColumns({ disableLinks: true, disableSort: true });\n  const cancelActionNameColumn = useNameColumn({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo(() => [cancelActionNameColumn], [cancelActionNameColumn]);\n  const bulkAction = useAwxBulkConfirmation<Project>();\n  const postRequest = usePostRequest();\n\n  function isProjectRunning(status: string) {\n    return ['pending', 'waiting', 'running'].includes(status);\n  }\n  const cannotCancelProjectDueToPermissions = (project: Project) => {\n    if (!project.summary_fields?.user_capabilities?.start)\n      return t(`The project sync cannot be canceled due to insufficient permission`);\n    return '';\n  };\n  const cannotCancelProjectDueToStatus = (project: Project) => {\n    if (!isProjectRunning(project.status ?? ''))\n      return t(`The project sync cannot be canceled because it is not running`);\n    return '';\n  };\n\n  const cancelProjects = (projects: Project[]) => {\n    const uncancellableProjectsDueToStatus: Project[] = projects.filter(\n      cannotCancelProjectDueToStatus\n    );\n    const runningProjects: Project[] = projects.filter((project) =>\n      isProjectRunning(project.status ?? '')\n    );\n    const uncancellableProjectsDueToPermissions: Project[] = runningProjects.filter(\n      cannotCancelProjectDueToPermissions\n    );\n\n    bulkAction({\n      title: t('Cancel project sync', { count: projects.length }),\n      confirmText: t('Yes, I confirm that I want to cancel these {{count}} project sync jobs.', {\n        count:\n          projects.length -\n          uncancellableProjectsDueToPermissions.length -\n          uncancellableProjectsDueToStatus.length,\n      }),\n      actionButtonText: t('Cancel project sync', { count: projects.length }),\n      items: projects.sort((l, r) => compareStrings(l.name, r.name)),\n      alertPrompts:\n        uncancellableProjectsDueToStatus.length || uncancellableProjectsDueToPermissions.length\n          ? [\n              ...(uncancellableProjectsDueToStatus.length\n                ? [\n                    t(\n                      '{{count}} of the selected project sync jobs cannot be canceled because they are not running.',\n                      {\n                        count: uncancellableProjectsDueToStatus.length,\n                      }\n                    ),\n                  ]\n                : []),\n              ...(uncancellableProjectsDueToPermissions.length\n                ? [\n                    t(\n                      '{{count}} of the selected project sync jobs cannot be cancelled due to insufficient permissions.',\n                      {\n                        count: uncancellableProjectsDueToPermissions.length,\n                      }\n                    ),\n                  ]\n                : []),\n            ]\n          : undefined,\n      isItemNonActionable: (item: Project) =>\n        cannotCancelProjectDueToStatus(item)\n          ? cannotCancelProjectDueToStatus(item)\n          : cannotCancelProjectDueToPermissions(item),\n      keyFn: getItemKey,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: (project: Project) =>\n        postRequest(\n          awxAPI`/project_updates/${\n            project.summary_fields?.current_update?.id.toString() ?? ''\n          }/cancel/`,\n          {}\n        ),\n    });\n  };\n  return cancelProjects;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { compareStrings } from '../../../../../framework';\nimport { useNameColumn } from '../../../../common/columns';\nimport { getItemKey, requestDelete } from '../../../../common/crud/Data';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { Project } from '../../../interfaces/Project';\nimport { useProjectsColumns } from './useProjectsColumns';\n\nexport function useDeleteProjects(onComplete: (projects: Project[]) => void) {\n  const { t } = useTranslation();\n  const confirmationColumns = useProjectsColumns({ disableLinks: true, disableSort: true });\n  const deleteActionNameColumn = useNameColumn({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo(() => [deleteActionNameColumn], [deleteActionNameColumn]);\n  const bulkAction = useAwxBulkConfirmation<Project>();\n  const deleteProjects = (projects: Project[]) => {\n    bulkAction({\n      title: t('Permanently delete projects', { count: projects.length }),\n      confirmText: t('Yes, I confirm that I want to delete these {{count}} projects.', {\n        count: projects.length,\n      }),\n      actionButtonText: t('Delete projects', { count: projects.length }),\n      items: projects.sort((l, r) => compareStrings(l.name, r.name)),\n      keyFn: getItemKey,\n      isDanger: true,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: (project: Project, signal) =>\n        requestDelete(awxAPI`/projects/${project.id.toString()}/`, signal),\n    });\n  };\n  return deleteProjects;\n}\n","import { AlertProps, ButtonVariant } from '@patternfly/react-core';\nimport {\n  CopyIcon,\n  MinusCircleIcon,\n  PencilAltIcon,\n  SyncIcon,\n  TrashIcon,\n} from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  usePageAlertToaster,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { Project } from '../../../interfaces/Project';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useCancelProjects } from './useCancelProjects';\nimport { useDeleteProjects } from './useDeleteProjects';\n\nexport function useProjectActions(\n  onComplete: (projects: Project[]) => void,\n  showToastMessage?: boolean\n) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const deleteProjects = useDeleteProjects(onComplete);\n  const cancelProjects = useCancelProjects();\n  const alertToaster = usePageAlertToaster();\n  const postRequest = usePostRequest();\n\n  return useMemo<IPageAction<Project>[]>(() => {\n    const cannotCancelProjectDueToStatus = (project: Project) =>\n      ['pending', 'waiting', 'running'].includes(project.status ?? '')\n        ? ''\n        : t(`The project sync cannot be canceled because it is not running`);\n    const cannotCancelProjectDueToPermissions = (project: Project) =>\n      project?.summary_fields?.user_capabilities?.start\n        ? ''\n        : t(`The project sync cannot be canceled due to insufficient permission`);\n    const cannotDeleteProject = (project: Project) =>\n      project?.summary_fields?.user_capabilities?.delete\n        ? ''\n        : t(`The project cannot be deleted due to insufficient permission`);\n    const cannotEditProject = (project: Project) =>\n      project?.summary_fields?.user_capabilities?.edit\n        ? ''\n        : t(`The project cannot be edited due to insufficient permission`);\n    const cannotSyncProject = (project: Project) => {\n      if (project.scm_type === '') {\n        return t(`Cannot sync project`);\n      }\n      if (project.scm_type && !project?.summary_fields?.user_capabilities?.start) {\n        return t(`The project cannot be synced due to insufficient permission`);\n      }\n      if (['pending', 'waiting', 'running'].includes(project.status ?? '')) {\n        return t(`The project cannot be synced because a sync job is currently running`);\n      }\n      return '';\n    };\n    const cannotCopyProject = (project: Project) =>\n      project?.summary_fields?.user_capabilities?.copy\n        ? ''\n        : t(`The project cannot be copied due to insufficient permission`);\n\n    return [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        isPinned: true,\n        variant: ButtonVariant.secondary,\n        icon: MinusCircleIcon,\n        label: t(`Cancel project sync`),\n        isDisabled: (project: Project) =>\n          cannotCancelProjectDueToPermissions(project) || cannotCancelProjectDueToStatus(project),\n        isHidden: (project: Project) => Boolean(cannotCancelProjectDueToStatus(project)),\n        onClick: (project: Project) => cancelProjects([project]),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        isPinned: true,\n        variant: ButtonVariant.primary,\n        icon: SyncIcon,\n        label: t('Sync project'),\n        isDisabled: cannotSyncProject,\n        isHidden: (project: Project) => Boolean(!cannotCancelProjectDueToStatus(project)),\n        onClick: (project: Project) => {\n          const alert: AlertProps = {\n            variant: 'success',\n            title: t(`Syncing ${project.name}.`),\n            timeout: 2000,\n          };\n          postRequest(awxAPI`/projects/${project?.id.toString() ?? ''}/update/`, {\n            id: project.id,\n          })\n            .then(() => {\n              showToastMessage ? alertToaster.addAlert(alert) : null;\n            })\n            .catch((error) => {\n              alertToaster.addAlert({\n                variant: 'danger',\n                title: t('Failed to sync project'),\n                children: error instanceof Error && error.message,\n              });\n            });\n        },\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        isPinned: true,\n        icon: PencilAltIcon,\n        label: t('Edit project'),\n        isDisabled: (project: Project) => cannotEditProject(project),\n        onClick: (project) => pageNavigate(AwxRoute.EditProject, { params: { id: project.id } }),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: CopyIcon,\n        label: t('Copy project'),\n        isDisabled: (project: Project) => cannotCopyProject(project),\n        onClick: (project: Project) => {\n          const alert: AlertProps = {\n            variant: 'success',\n            title: t(`${project.name} copied.`),\n            timeout: 2000,\n          };\n          postRequest(awxAPI`/projects/${project?.id.toString() ?? ''}/copy/`, {\n            name: `${project.name} @ ${new Date()\n              .toTimeString()\n              .replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, '$1')}`,\n          })\n            .then(() => {\n              alertToaster.addAlert(alert);\n            })\n            .catch((error) => {\n              alertToaster.replaceAlert(alert, {\n                variant: 'danger',\n                title: t('Failed to copy project'),\n                children: error instanceof Error && error.message,\n              });\n            });\n        },\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: TrashIcon,\n        label: t('Delete project'),\n        isDisabled: (project: Project) => cannotDeleteProject(project),\n        onClick: (project) => deleteProjects([project]),\n        isDanger: true,\n      },\n    ];\n  }, [\n    alertToaster,\n    cancelProjects,\n    deleteProjects,\n    showToastMessage,\n    pageNavigate,\n    postRequest,\n    t,\n  ]);\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  PageActions,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { LoadingPage } from '../../../../../framework/components/LoadingPage';\nimport { PageRoutedTabs } from '../../../../common/PageRoutedTabs';\nimport { useGet } from '../../../../common/crud/useGet';\nimport { useViewActivityStream } from '../../../access/common/useViewActivityStream';\nimport { AwxError } from '../../../common/AwxError';\nimport { AwxItemsResponse } from '../../../common/AwxItemsResponse';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxActiveUser } from '../../../common/useAwxActiveUser';\nimport { Organization } from '../../../interfaces/Organization';\nimport { Project } from '../../../interfaces/Project';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useProjectActions } from '../hooks/useProjectActions';\n\nexport function ProjectPage() {\n  const { t } = useTranslation();\n  const params = useParams<{ id: string }>();\n  const activityStream = useViewActivityStream('project');\n  const {\n    error: projectError,\n    data: project,\n    refresh: projectRefresh,\n    isLoading: isProjectLoading,\n  } = useGet<Project>(awxAPI`/projects/${params.id ?? ''}/`);\n  const pageNavigate = usePageNavigate();\n  const itemActions = useProjectActions(() => pageNavigate(AwxRoute.Projects));\n  const { activeAwxUser } = useAwxActiveUser();\n  const {\n    data: isNotifAdmin,\n    error: isNotifAdminError,\n    refresh: refreshNotifAdmin,\n    isLoading: isNotifAdminLoading,\n  } = useGet<AwxItemsResponse<Organization>>(awxAPI`/organizations/`, {\n    role_level: 'notification_admin_role',\n  });\n  const error = isNotifAdminError || projectError;\n  const getPageUrl = useGetPageUrl();\n  const tabs: { label: string; page: string }[] = useMemo(() => {\n    const tabs = [\n      { label: t('Details'), page: AwxRoute.ProjectDetails },\n      { label: t('Schedules'), page: AwxRoute.ProjectSchedules },\n      { label: t('Job Templates'), page: AwxRoute.ProjectJobTemplates },\n      { label: t('User Access'), page: AwxRoute.ProjectUsers },\n      { label: t('Team Access'), page: AwxRoute.ProjectTeams },\n    ];\n    if (activeAwxUser?.is_system_auditor || (isNotifAdmin && isNotifAdmin.results.length > 0)) {\n      tabs.push({ label: t('Notifications'), page: AwxRoute.ProjectNotifications });\n    }\n    return tabs;\n  }, [t, activeAwxUser, isNotifAdmin]);\n  if (error) return <AwxError error={error} handleRefresh={projectRefresh || refreshNotifAdmin} />;\n  if (!project || isProjectLoading || isNotifAdminLoading) return <LoadingPage breadcrumbs tabs />;\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={project?.name}\n        breadcrumbs={[\n          { label: t('Projects'), to: getPageUrl(AwxRoute.Projects) },\n          { label: project?.name },\n        ]}\n        headerActions={\n          <PageActions<Project>\n            actions={[...activityStream, ...itemActions]}\n            position={DropdownPosition.right}\n            selectedItem={project}\n          />\n        }\n      />\n\n      <PageRoutedTabs\n        backTab={{\n          label: t('Back to Projects'),\n          page: AwxRoute.Projects,\n          persistentFilterKey: 'projects',\n        }}\n        tabs={tabs}\n        params={{ id: project.id }}\n      />\n    </PageLayout>\n  );\n}\n","import { CubesIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageHeader, PageLayout, PageTable, usePageNavigate } from '../../../../framework';\nimport { usePersistentFilters } from '../../../common/PersistentFilters';\nimport { useOptions } from '../../../common/crud/useOptions';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { useAwxConfig } from '../../common/useAwxConfig';\nimport { useAwxView } from '../../common/useAwxView';\nimport { useAwxWebSocketSubscription } from '../../common/useAwxWebSocket';\nimport { useGetDocsUrl } from '../../common/util/useGetDocsUrl';\nimport { ActionsResponse, OptionsResponse } from '../../interfaces/OptionsResponse';\nimport { Project } from '../../interfaces/Project';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { useProjectActions } from './hooks/useProjectActions';\nimport { useProjectToolbarActions } from './hooks/useProjectToolbarActions';\nimport { useProjectsColumns } from './hooks/useProjectsColumns';\nimport { useProjectsFilters } from './hooks/useProjectsFilters';\nimport { ActivityStreamIcon } from '../../common/ActivityStreamIcon';\n\nexport function Projects() {\n  const { t } = useTranslation();\n  const product: string = process.env.PRODUCT ?? t('AWX');\n  const pageNavigate = usePageNavigate();\n  const toolbarFilters = useProjectsFilters();\n  const tableColumns = useProjectsColumns();\n  const view = useAwxView<Project>({\n    url: awxAPI`/projects/`,\n    toolbarFilters,\n    tableColumns,\n  });\n  const showToastMessage = true;\n  const toolbarActions = useProjectToolbarActions(view.unselectItemsAndRefresh);\n  const rowActions = useProjectActions(view.unselectItemsAndRefresh, showToastMessage);\n  const { data } = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/projects/`);\n  const canCreateProject = Boolean(data && data.actions && data.actions['POST']);\n  const { refresh } = view;\n  usePersistentFilters('projects');\n\n  const handleWebSocketMessage = useCallback(\n    (message?: { group_name?: string; type?: string }) => {\n      switch (message?.group_name) {\n        case 'jobs':\n          switch (message?.type) {\n            case 'job':\n              void refresh();\n              break;\n            case 'workflow_job':\n              void refresh();\n              break;\n            case 'project_update':\n              void refresh();\n              break;\n          }\n          break;\n      }\n    },\n    [refresh]\n  );\n  useAwxWebSocketSubscription(\n    { control: ['limit_reached_1'], jobs: ['status_changed'] },\n    handleWebSocketMessage as (data: unknown) => void\n  );\n  const config = useAwxConfig();\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Projects')}\n        titleHelpTitle={t('Projects')}\n        titleHelp={t(\n          `A project is a logical collection of Ansible playbooks, represented in {{product}}. You can manage playbooks and playbook directories by either placing them manually under the Project Base Path on your {{product}} server, or by placing your playbooks into a source code management (SCM) system supported by {{product}}, including Git, Subversion, Mercurial, and Red Hat Insights.`,\n          { product }\n        )}\n        titleDocLink={useGetDocsUrl(config, 'projects')}\n        description={t(\n          `A project is a logical collection of Ansible playbooks, represented in {{product}}.`,\n          { product }\n        )}\n        headerActions={<ActivityStreamIcon type={'project'} />}\n      />\n      <PageTable<Project>\n        id=\"awx-projects-table\"\n        toolbarFilters={toolbarFilters}\n        toolbarActions={toolbarActions}\n        tableColumns={tableColumns}\n        rowActions={rowActions}\n        errorStateTitle={t('Error loading projects')}\n        emptyStateTitle={\n          canCreateProject\n            ? t('There are currently no projects added to your organization.')\n            : t('You do not have permission to create a project')\n        }\n        emptyStateDescription={\n          canCreateProject\n            ? t('Please create a project by using the button below.')\n            : t(\n                'Please contact your organization administrator if there is an issue with your access.'\n              )\n        }\n        emptyStateIcon={canCreateProject ? undefined : CubesIcon}\n        emptyStateButtonIcon={<PlusCircleIcon />}\n        emptyStateButtonText={canCreateProject ? t('Create project') : undefined}\n        emptyStateButtonClick={\n          canCreateProject ? () => pageNavigate(AwxRoute.CreateProject) : undefined\n        }\n        {...view}\n        defaultSubtitle={t('Project')}\n      />\n    </PageLayout>\n  );\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport { BanIcon, PlusCircleIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  useGetPageUrl,\n} from '../../../../../framework';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { ActionsResponse, OptionsResponse } from '../../../interfaces/OptionsResponse';\nimport { Project } from '../../../interfaces/Project';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useCancelProjects } from './useCancelProjects';\nimport { useDeleteProjects } from './useDeleteProjects';\n\nexport function useProjectToolbarActions(onComplete: (projects: Project[]) => void) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const { data } = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/projects/`);\n  const canCreateProject = Boolean(data && data.actions && data.actions['POST']);\n\n  const deleteProjects = useDeleteProjects(onComplete);\n  const cancelProjects = useCancelProjects(onComplete);\n\n  const ProjectToolbarActions = useMemo<IPageAction<Project>[]>(\n    () => [\n      {\n        type: PageActionType.Link,\n        selection: PageActionSelection.None,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        icon: PlusCircleIcon,\n        label: t('Create project'),\n        isDisabled: canCreateProject\n          ? undefined\n          : t(\n              'You do not have permission to create a project. Please contact your organization administrator if there is an issue with your access.'\n            ),\n        href: getPageUrl(AwxRoute.CreateProject),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: BanIcon,\n        label: t('Cancel projects'),\n        onClick: cancelProjects,\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: TrashIcon,\n        label: t('Delete projects'),\n        onClick: deleteProjects,\n        isDanger: true,\n      },\n    ],\n    [canCreateProject, cancelProjects, deleteProjects, getPageUrl, t]\n  );\n\n  return ProjectToolbarActions;\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { useParams } from 'react-router-dom';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { TeamAccess } from '../../../../common/access/components/TeamAccess';\nexport function ProjectTeams() {\n  const params = useParams<{ id: string }>();\n\n  return (\n    <TeamAccess\n      service={'awx'}\n      id={params.id || ''}\n      type={'project'}\n      addRolesRoute={AwxRoute.ProjectAddTeams}\n    />\n  );\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { useParams } from 'react-router-dom';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { UserAccess } from '../../../../common/access/components/UserAccess';\nexport function ProjectUsers() {\n  const params = useParams<{ id: string }>();\n\n  return (\n    <UserAccess\n      service={'awx'}\n      id={params.id || ''}\n      type={'project'}\n      addRolesRoute={AwxRoute.ProjectAddUsers}\n    />\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageHeader,\n  PageLayout,\n  PageWizard,\n  PageWizardStep,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { Project } from '../../../interfaces/Project';\nimport { useGet } from '../../../../common/crud/useGet';\nimport { postRequest } from '../../../../common/crud/Data';\nimport { AwxUser } from '../../../interfaces/User';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { RoleAssignmentsReviewStep } from '../../../../common/access/RolesWizard/steps/RoleAssignmentsReviewStep';\nimport { useAwxBulkActionDialog } from '../../../common/useAwxBulkActionDialog';\nimport { AwxSelectUsersStep } from '../../../access/common/AwxRolesWizardSteps/AwxSelectUsersStep';\nimport { AwxSelectRolesStep } from '../../../access/common/AwxRolesWizardSteps/AwxSelectRolesStep';\n\ninterface AwxRole {\n  id: string;\n  name: string;\n}\ninterface WizardFormValues {\n  users: AwxUser[];\n  awxRoles: AwxRole[];\n}\n\ninterface UserRolePair {\n  user: AwxUser;\n  role: AwxRole;\n}\n\nexport function AwxProjectAddUsers() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const params = useParams<{ id: string }>();\n\n  const { data: project, isLoading } = useGet<Project>(awxAPI`/projects/${params.id ?? ''}/`);\n  const userProgressDialog = useAwxBulkActionDialog<UserRolePair>();\n  const pageNavigate = usePageNavigate();\n\n  if (isLoading || !project) return <LoadingPage />;\n\n  const steps: PageWizardStep[] = [\n    {\n      id: 'users',\n      label: t('Select user(s)'),\n      inputs: (\n        <AwxSelectUsersStep\n          descriptionForUsersSelection={t(\n            'Select the user(s) that you want to give access to {{projectName}}.',\n            {\n              projectName: project?.name,\n            }\n          )}\n        />\n      ),\n      validate: (formData, _) => {\n        const { users } = formData as { users: AwxUser[] };\n        if (!users?.length) {\n          throw new Error(t('Select at least one user.'));\n        }\n      },\n    },\n    {\n      id: 'awxRoles',\n      label: t('Select roles to apply'),\n      inputs: (\n        <AwxSelectRolesStep\n          contentType=\"project\"\n          fieldNameForPreviousStep=\"users\"\n          descriptionForRoleSelection={t('Choose roles to apply to {{projectName}}.', {\n            projectName: project?.name,\n          })}\n        />\n      ),\n      validate: (formData, _) => {\n        const { awxRoles } = formData as { awxRoles: AwxRole[] };\n        if (!awxRoles?.length) {\n          throw new Error(t('Select at least one role.'));\n        }\n      },\n    },\n    {\n      id: 'review',\n      label: t('Review'),\n      inputs: <RoleAssignmentsReviewStep />,\n    },\n  ];\n\n  const onSubmit = (data: WizardFormValues) => {\n    const { users, awxRoles } = data;\n    const items: UserRolePair[] = [];\n    for (const user of users) {\n      for (const role of awxRoles) {\n        items.push({ user, role });\n      }\n    }\n    return new Promise<void>((resolve) => {\n      userProgressDialog({\n        title: t('Add roles'),\n        keyFn: ({ user, role }) => `${user.id}_${role.id}`,\n        items,\n        actionColumns: [\n          { header: t('User'), cell: ({ user }) => user.username },\n          { header: t('Role'), cell: ({ role }) => role.name },\n        ],\n        actionFn: ({ user, role }) =>\n          postRequest(awxAPI`/role_user_assignments/`, {\n            user: user.id,\n            role_definition: role.id,\n            content_type: 'project',\n            object_id: project.id,\n          }),\n        onComplete: () => {\n          resolve();\n        },\n        onClose: () => {\n          pageNavigate(AwxRoute.ProjectUsers, {\n            params: { id: project.id.toString() },\n          });\n        },\n      });\n    });\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Add roles')}\n        breadcrumbs={[\n          { label: t('Projects'), to: getPageUrl(AwxRoute.Projects) },\n          {\n            label: project?.name,\n            to: getPageUrl(AwxRoute.ProjectDetails, { params: { id: project?.id } }),\n          },\n          {\n            label: t('Users '),\n            to: getPageUrl(AwxRoute.ProjectUsers, { params: { id: project?.id } }),\n          },\n          { label: t('Add roles') },\n        ]}\n      />\n      <PageWizard<WizardFormValues>\n        steps={steps}\n        onSubmit={onSubmit}\n        disableGrid\n        onCancel={() => {\n          pageNavigate(AwxRoute.ProjectUsers, { params: { id: project?.id } });\n        }}\n      />\n    </PageLayout>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport {\n  LoadingPage,\n  PageHeader,\n  PageLayout,\n  PageWizard,\n  PageWizardStep,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { Team } from '../../../interfaces/Team';\nimport { useParams } from 'react-router-dom';\nimport { useGet } from '../../../../common/crud/useGet';\nimport { Project } from '../../../interfaces/Project';\nimport { postRequest } from '../../../../common/crud/Data';\nimport { RoleAssignmentsReviewStep } from '../../../../common/access/RolesWizard/steps/RoleAssignmentsReviewStep';\nimport { useAwxBulkActionDialog } from '../../../common/useAwxBulkActionDialog';\nimport { AwxSelectTeamsStep } from '../../../access/common/AwxRolesWizardSteps/AwxSelectTeamsStep';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { AwxSelectRolesStep } from '../../../access/common/AwxRolesWizardSteps/AwxSelectRolesStep';\n\ninterface AwxRole {\n  id: string;\n  name: string;\n}\n\ninterface WizardFormValues {\n  teams: Team[];\n  awxRoles: AwxRole[];\n}\n\ninterface TeamRolePair {\n  team: Team;\n  role: AwxRole;\n}\n\nexport function AwxProjectAddTeams() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const params = useParams<{ id: string }>();\n  const pageNavigate = usePageNavigate();\n  const { data: project, isLoading } = useGet<Project>(awxAPI`/projects/${params.id ?? ''}/`);\n  const userProgressDialog = useAwxBulkActionDialog<TeamRolePair>();\n\n  if (isLoading || !project) return <LoadingPage />;\n\n  const steps: PageWizardStep[] = [\n    {\n      id: 'teams',\n      label: t('Select team(s)'),\n      inputs: (\n        <AwxSelectTeamsStep\n          descriptionForTeamsSelection={t(\n            'Select the team(s) that you want to give access to {{projectName}}.',\n            {\n              projectName: project?.name,\n            }\n          )}\n        />\n      ),\n      validate: (formData, _) => {\n        const { teams } = formData as { teams: Team[] };\n        if (!teams?.length) {\n          throw new Error(t('Select at least one team.'));\n        }\n      },\n    },\n    {\n      id: 'roles',\n      label: t('Select roles to apply'),\n      inputs: (\n        <AwxSelectRolesStep\n          contentType=\"project\"\n          fieldNameForPreviousStep=\"teams\"\n          descriptionForRoleSelection={t('Choose roles to apply to {{projectName}}.', {\n            projectName: project?.name,\n          })}\n        />\n      ),\n      validate: (formData, _) => {\n        const { awxRoles } = formData as { awxRoles: AwxRole[] };\n        if (!awxRoles?.length) {\n          throw new Error(t('Select at least one role.'));\n        }\n      },\n    },\n    {\n      id: 'review',\n      label: t('Review'),\n      inputs: <RoleAssignmentsReviewStep />,\n    },\n  ];\n\n  const onSubmit = async (data: WizardFormValues) => {\n    const { teams, awxRoles } = data;\n    const items: TeamRolePair[] = [];\n    for (const team of teams) {\n      for (const role of awxRoles) {\n        items.push({ team, role });\n      }\n    }\n    return new Promise<void>((resolve) => {\n      userProgressDialog({\n        title: t('Add roles'),\n        keyFn: ({ team, role }) => `${team.id}_${role.id}`,\n        items,\n        actionColumns: [\n          { header: t('Team'), cell: ({ team }) => team.name },\n          { header: t('Role'), cell: ({ role }) => role.name },\n        ],\n        actionFn: ({ team, role }) =>\n          postRequest(awxAPI`/role_team_assignments/`, {\n            team: team.id,\n            role_definition: role.id,\n            content_type: 'project',\n            object_id: project.id,\n          }),\n        onComplete: () => {\n          resolve();\n        },\n        onClose: () => {\n          pageNavigate(AwxRoute.ProjectTeams, {\n            params: { id: project.id.toString() },\n          });\n        },\n      });\n    });\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Add roles')}\n        breadcrumbs={[\n          { label: t('Projects'), to: getPageUrl(AwxRoute.Projects) },\n          {\n            label: project?.name,\n            to: getPageUrl(AwxRoute.ProjectDetails, { params: { id: project?.id } }),\n          },\n          {\n            label: t('Team Access'),\n            to: getPageUrl(AwxRoute.ProjectTeams, { params: { id: project?.id } }),\n          },\n          { label: t('Add roles') },\n        ]}\n      />\n      <PageWizard<WizardFormValues>\n        steps={steps}\n        onSubmit={onSubmit}\n        disableGrid\n        onCancel={() => {\n          pageNavigate(AwxRoute.ProjectTeams, { params: { id: project?.id } });\n        }}\n      />\n    </PageLayout>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { PageHeader, PageLayout } from '../../../../framework';\nimport { ActivityStreamIcon } from '../../common/ActivityStreamIcon';\nimport { useAwxConfig } from '../../common/useAwxConfig';\nimport { useGetDocsUrl } from '../../common/util/useGetDocsUrl';\nimport { SchedulesList } from './SchedulesList';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { AwxRoute } from '../../main/AwxRoutes';\n\nexport function Schedules(props: { sublistEndpoint?: string }) {\n  const { t } = useTranslation();\n  const config = useAwxConfig();\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Schedules')}\n        titleHelpTitle={t('Schedules')}\n        titleHelp={t(\n          'Schedules are used to launch jobs on a regular basis. They can be used to launch jobs against machines, synchronize with inventory sources, and import project content from a version control system.'\n        )}\n        titleDocLink={useGetDocsUrl(config, 'schedules')}\n        description={t(\n          'Schedules are used to launch jobs on a regular basis. They can be used to launch jobs against machines, synchronize with inventory sources, and import project content from a version control system.'\n        )}\n        headerActions={<ActivityStreamIcon type={'schedule'} />}\n      />\n      <SchedulesList\n        createSchedulePageId={AwxRoute.CreateSchedule}\n        sublistEndpoint={props.sublistEndpoint}\n        url={awxAPI`/schedules/`}\n      />\n    </PageLayout>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { PageHeader, PageLayout, useGetPageUrl, usePageNavigate } from '../../../../framework';\nimport { PageFormTextArea } from '../../../../framework/PageForm/Inputs/PageFormTextArea';\nimport { PageFormTextInput } from '../../../../framework/PageForm/Inputs/PageFormTextInput';\nimport { PageFormSubmitHandler } from '../../../../framework/PageForm/PageForm';\nimport { PageFormSection } from '../../../../framework/PageForm/Utils/PageFormSection';\nimport { useGet } from '../../../common/crud/useGet';\nimport { usePatchRequest } from '../../../common/crud/usePatchRequest';\nimport { usePostRequest } from '../../../common/crud/usePostRequest';\nimport { AwxPageForm } from '../../common/AwxPageForm';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { Team } from '../../interfaces/Team';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { PageFormSelectOrganization } from '../organizations/components/PageFormOrganizationSelect';\n\nexport function CreateTeam() {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const navigate = useNavigate();\n  const postRequest = usePostRequest<Team>();\n  const onSubmit: PageFormSubmitHandler<Team> = async (team) => {\n    const createdTeam = await postRequest(awxAPI`/teams/`, team);\n    pageNavigate(AwxRoute.TeamDetails, { params: { id: createdTeam.id } });\n  };\n  const getPageUrl = useGetPageUrl();\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Create team')}\n        breadcrumbs={[\n          { label: t('Teams'), to: getPageUrl(AwxRoute.Teams) },\n          { label: t('Create team') },\n        ]}\n      />\n      <AwxPageForm submitText={t('Create team')} onSubmit={onSubmit} onCancel={() => navigate(-1)}>\n        <TeamInputs />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n\nexport function EditTeam() {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const params = useParams<{ id?: string }>();\n  const id = Number(params.id);\n  const { data: team } = useGet<Team>(awxAPI`/teams/${id.toString()}/`);\n  const patchRequest = usePatchRequest<Team, Team>();\n  const onSubmit: PageFormSubmitHandler<Team> = async (team) => {\n    await patchRequest(awxAPI`/teams/${id.toString()}/`, team);\n    navigate(-1);\n  };\n  const getPageUrl = useGetPageUrl();\n  if (!team) {\n    return (\n      <PageLayout>\n        <PageHeader\n          breadcrumbs={[\n            { label: t('Teams'), to: getPageUrl(AwxRoute.Teams) },\n            { label: t('Edit Team') },\n          ]}\n        />\n      </PageLayout>\n    );\n  }\n  return (\n    <PageLayout>\n      <PageHeader\n        title={team?.name ? t('Edit {{teamName}}', { teamName: team?.name }) : t('Team')}\n        breadcrumbs={[\n          { label: t('Teams'), to: getPageUrl(AwxRoute.Teams) },\n          { label: team?.name ? t('Edit {{teamName}}', { teamName: team?.name }) : t('Team') },\n        ]}\n      />\n      <AwxPageForm\n        submitText={t('Save team')}\n        onSubmit={onSubmit}\n        onCancel={() => navigate(-1)}\n        defaultValue={team}\n      >\n        <TeamInputs />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n\nfunction TeamInputs() {\n  const { t } = useTranslation();\n  return (\n    <>\n      <PageFormTextInput<Team>\n        name=\"name\"\n        label={t('Name')}\n        placeholder={t('Enter name')}\n        isRequired\n      />\n      <PageFormSelectOrganization<Team> name=\"organization\" isRequired />\n      <PageFormSection singleColumn>\n        <PageFormTextArea<Team>\n          name=\"description\"\n          label={t('Description')}\n          placeholder={t('Enter description')}\n        />\n      </PageFormSection>\n    </>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom';\nimport { DateTimeCell, LabelsCell, PageDetail, PageDetails } from '../../../framework';\nimport { LastModifiedPageDetail } from '../LastModifiedPageDetail';\n\nexport type TeamDetailsType = {\n  name: string;\n  id: number;\n} & Partial<{\n  description: string;\n  created: string;\n  created_at: string;\n  created_on: string;\n  modified_on: string;\n  modified: string;\n  modified_at: string;\n  summary_fields: {\n    organization?: {\n      id: number;\n      name: string;\n      description?: string;\n    };\n    created_by?: {\n      id: number;\n      username: string;\n      first_name: string;\n      last_name: string;\n    };\n    modified_by?: {\n      id: number;\n      username: string;\n      first_name: string;\n      last_name: string;\n    };\n    [key: string]: unknown;\n  };\n}>;\n\nexport function TeamDetails<T extends TeamDetailsType>(props: {\n  team: T;\n  // URL for routing to organization details page\n  organizationDetailsUrl?: string;\n  // URL for routing to details page for user who created the team\n  createdByUserDetailsUrl?: string;\n  // URL for routing to details page for user who last modified the team\n  modifiedByUserDetailsUrl?: string;\n}) {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { team, organizationDetailsUrl, createdByUserDetailsUrl, modifiedByUserDetailsUrl } = props;\n\n  return (\n    <PageDetails>\n      <PageDetail label={t('Name')}>{team.name}</PageDetail>\n      {team.description && <PageDetail label={t('Description')}>{team.description}</PageDetail>}\n      {team.summary_fields?.organization && (\n        <PageDetail label={t('Organization')}>\n          {organizationDetailsUrl ? (\n            <LabelsCell\n              labelsWithLinks={[\n                { name: team.summary_fields?.organization?.name, link: organizationDetailsUrl },\n              ]}\n            />\n          ) : (\n            <LabelsCell labels={[team.summary_fields?.organization?.name]} />\n          )}\n        </PageDetail>\n      )}\n      {(team.created || team.created_on || team.created_at) && (\n        <PageDetail label={t('Created')}>\n          <DateTimeCell\n            author={team.summary_fields?.created_by?.username}\n            value={team.created ?? team.created_on ?? team.created_at}\n            onClick={\n              createdByUserDetailsUrl\n                ? () => {\n                    navigate(createdByUserDetailsUrl);\n                  }\n                : undefined\n            }\n          />\n        </PageDetail>\n      )}\n      {(team.modified || team.modified_on || team.modified_at) && (\n        <LastModifiedPageDetail\n          author={team.summary_fields?.modified_by?.username}\n          value={team.modified ?? team.modified_on ?? team.modified_at}\n          onClick={\n            modifiedByUserDetailsUrl\n              ? () => {\n                  navigate(modifiedByUserDetailsUrl);\n                }\n              : undefined\n          }\n        />\n      )}\n    </PageDetails>\n  );\n}\n","import { useParams } from 'react-router-dom';\nimport { useGetPageUrl } from '../../../../../framework';\nimport { TeamDetails, TeamDetailsType } from '../../../../common/access/TeamDetails';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { Team } from '../../../interfaces/Team';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\nexport function AwxTeamDetails() {\n  const params = useParams<{ id: string }>();\n  const { data: team } = useGetItem<Team>(awxAPI`/teams`, params.id);\n  const getPageUrl = useGetPageUrl();\n\n  return team ? (\n    <TeamDetails\n      team={team as TeamDetailsType}\n      organizationDetailsUrl={getPageUrl(AwxRoute.OrganizationDetails, {\n        params: { id: (team.summary_fields?.organization?.id ?? '').toString() },\n      })}\n      createdByUserDetailsUrl={getPageUrl(AwxRoute.UserDetails, {\n        params: { id: (team.summary_fields?.created_by?.id ?? 0).toString() },\n      })}\n      modifiedByUserDetailsUrl={getPageUrl(AwxRoute.UserDetails, {\n        params: {\n          id: (team.summary_fields?.modified_by?.id ?? 0).toString(),\n        },\n      })}\n    />\n  ) : null;\n}\n","import { useParams } from 'react-router-dom';\nimport { UserAccess } from '../../../../common/access/components/UserAccess';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useTranslation } from 'react-i18next';\n\nexport function TeamAccess() {\n  const params = useParams<{ id: string }>();\n  const { t } = useTranslation();\n  return (\n    <UserAccess\n      service=\"awx\"\n      addRoleButtonText={t('Add users')}\n      removeRoleText={t('Remove users')}\n      removeConfirmationText={(count: number) =>\n        t('Yes, I confirm that I want to remove these {{count}} users.', { count })\n      }\n      id={params.id || ''}\n      type={'team'}\n      addRolesRoute={AwxRoute.TeamAddMembers}\n    />\n  );\n}\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { AwxUser } from '../../../interfaces/User';\nimport { type ResourceType } from '../../common/types';\nimport { useAddUsersToResources } from './useAddUsersToResources';\nimport { useSelectUsers } from './useSelectUsers';\n\nexport function useSelectUsersAddTeams(onClose?: (users: AwxUser[]) => void) {\n  const { t } = useTranslation();\n  const selectUsers = useSelectUsers();\n  const addUsersToResources = useAddUsersToResources();\n  const selectUsersAddTeams = useCallback(\n    (teams: ResourceType[]) => {\n      selectUsers(t('Add users to teams', { count: teams.length }), (users: AwxUser[]) => {\n        addUsersToResources(users, teams, onClose);\n      });\n    },\n    [addUsersToResources, onClose, selectUsers, t]\n  );\n  return selectUsersAddTeams;\n}\n","import { useCallback, useMemo } from 'react';\nimport { ITableColumn, usePageNavigate } from '../../../../../framework';\nimport {\n  useCreatedColumn,\n  useDescriptionColumn,\n  useIdColumn,\n  useModifiedColumn,\n  useNameColumn,\n  useOrganizationNameColumn,\n} from '../../../../common/columns';\nimport { Team } from '../../../interfaces/Team';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\nexport function useTeamsColumns(options?: { disableLinks?: boolean; disableSort?: boolean }) {\n  const pageNavigate = usePageNavigate();\n  const nameColumnClick = useCallback(\n    (team: Team) => pageNavigate(AwxRoute.TeamDetails, { params: { id: team.id } }),\n    [pageNavigate]\n  );\n  const idColumn = useIdColumn();\n  const nameColumn = useNameColumn({ ...options, onClick: nameColumnClick });\n  const descriptionColumn = useDescriptionColumn();\n\n  const organizationColumn = useOrganizationNameColumn(AwxRoute.OrganizationDetails, options);\n  const createdColumn = useCreatedColumn(options);\n  const modifiedColumn = useModifiedColumn(options);\n  const tableColumns = useMemo<ITableColumn<Team>[]>(\n    () => [\n      idColumn,\n      nameColumn,\n      organizationColumn,\n      descriptionColumn,\n      createdColumn,\n      modifiedColumn,\n    ],\n    [createdColumn, descriptionColumn, idColumn, modifiedColumn, nameColumn, organizationColumn]\n  );\n  return tableColumns;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { compareStrings } from '../../../../../framework';\nimport { useNameColumn, useOrganizationNameColumn } from '../../../../common/columns';\nimport { getItemKey, requestDelete } from '../../../../common/crud/Data';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { Team } from '../../../interfaces/Team';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useTeamsColumns } from './useTeamsColumns';\n\nexport function useDeleteTeams(onComplete: (teams: Team[]) => void) {\n  const { t } = useTranslation();\n  const confirmationColumns = useTeamsColumns({ disableLinks: true, disableSort: true });\n  const deleteActionNameColumn = useNameColumn({ disableLinks: true, disableSort: true });\n  const deleteActionOrganizationColumn = useOrganizationNameColumn(AwxRoute.OrganizationDetails, {\n    disableLinks: true,\n    disableSort: true,\n  });\n  const actionColumns = useMemo(\n    () => [deleteActionNameColumn, deleteActionOrganizationColumn],\n    [deleteActionNameColumn, deleteActionOrganizationColumn]\n  );\n\n  const cannotDeleteTeam = (team: Team) => {\n    return team?.summary_fields?.user_capabilities?.delete\n      ? undefined\n      : t('The team cannot be deleted due to insufficient permissions.');\n  };\n\n  const bulkAction = useAwxBulkConfirmation<Team>();\n\n  const deleteTeams = (teams: Team[]) => {\n    const undeletableTeams = teams.filter(cannotDeleteTeam);\n\n    bulkAction({\n      title: t('Permanently delete teams', { count: teams.length }),\n      confirmText: t('Yes, I confirm that I want to delete these {{count}} teams.', {\n        count: teams.length - undeletableTeams.length,\n      }),\n      actionButtonText: t('Delete teams', { count: teams.length }),\n      items: teams.sort((l, r) => compareStrings(l.name, r.name)),\n      alertPrompts:\n        undeletableTeams.length > 0\n          ? [\n              t(\n                '{{count}} of the selected teams cannot be deleted due to insufficient permissions.',\n                {\n                  count: undeletableTeams.length,\n                }\n              ),\n            ]\n          : undefined,\n      isItemNonActionable: cannotDeleteTeam,\n      keyFn: getItemKey,\n      isDanger: true,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: (team: Team, signal) =>\n        requestDelete(awxAPI`/teams/${team.id.toString()}/`, signal),\n    });\n  };\n  return deleteTeams;\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport { MinusCircleIcon, PencilAltIcon, PlusCircleIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { useAwxActiveUser } from '../../../common/useAwxActiveUser';\nimport { Team } from '../../../interfaces/Team';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useSelectAndRemoveUsersFromTeam } from '../../users/hooks/useSelectAndRemoveUsersFromTeam';\nimport { useSelectUsersAddTeams } from '../../users/hooks/useSelectUsersAddTeams';\nimport { useDeleteTeams } from './useDeleteTeams';\n\nexport function useTeamActions(options: {\n  onTeamsDeleted: (teams: Team[]) => void;\n  isDetailsPageAction?: boolean;\n}) {\n  const { onTeamsDeleted } = options;\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const deleteTeams = useDeleteTeams(onTeamsDeleted);\n  const selectUsersAddTeams = useSelectUsersAddTeams();\n  const selectAndRemoveUsersFromTeam = useSelectAndRemoveUsersFromTeam();\n  const { activeAwxUser } = useAwxActiveUser();\n\n  return useMemo(() => {\n    const cannotDeleteTeam = (team: Team) =>\n      team?.summary_fields?.user_capabilities?.delete\n        ? ''\n        : t(`The team cannot be deleted due to insufficient permissions.`);\n    const cannotEditTeam = (team: Team) =>\n      team?.summary_fields?.user_capabilities?.edit\n        ? ''\n        : t(`The team cannot be edited due to insufficient permissions.`);\n    const cannotRemoveUsers = (team: Team) =>\n      activeAwxUser?.is_superuser || team?.summary_fields?.user_capabilities?.edit\n        ? ''\n        : t(\n            `You do not have permission to remove users. Please contact your organization administrator if there is an issue with your access.`\n          );\n    const cannotAddUsers = (team: Team) =>\n      activeAwxUser?.is_superuser || team?.summary_fields?.user_capabilities?.edit\n        ? ''\n        : t(\n            `You do not have permission to add users. Please contact your organization administrator if there is an issue with your access.`\n          );\n\n    const actions: IPageAction<Team>[] = [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        icon: PencilAltIcon,\n        label: t('Edit team'),\n        isDisabled: (team: Team) => cannotEditTeam(team),\n        onClick: (team) => pageNavigate(AwxRoute.EditTeam, { params: { id: team.id } }),\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: PlusCircleIcon,\n        label: t('Add users to teams'),\n        isDisabled: (team: Team) => cannotAddUsers(team),\n        onClick: (team) => selectUsersAddTeams([team]),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: MinusCircleIcon,\n        label: t('Remove users from teams'),\n        isDisabled: (team: Team) => cannotRemoveUsers(team),\n        onClick: (team) => selectAndRemoveUsersFromTeam(team),\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: TrashIcon,\n        label: t('Delete team'),\n        isDisabled: (team: Team) => cannotDeleteTeam(team),\n        onClick: (team) => deleteTeams([team]),\n        isDanger: true,\n      },\n    ];\n    return actions;\n  }, [\n    activeAwxUser?.is_superuser,\n    deleteTeams,\n    pageNavigate,\n    selectAndRemoveUsersFromTeam,\n    selectUsersAddTeams,\n    t,\n  ]);\n}\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { Team } from '../../../interfaces/Team';\nimport { AwxUser } from '../../../interfaces/User';\nimport { useRemoveUsersFromResource } from '../../common/useRemoveUserFromResource';\nimport { useSelectUsers } from './useSelectUsers';\n\nexport function useSelectAndRemoveUsersFromTeam(onClose?: (users: AwxUser[]) => void) {\n  const { t } = useTranslation();\n  const selectUsers = useSelectUsers();\n  const removeUsersFromTeams = useRemoveUsersFromResource();\n\n  const selectUsersRemoveTeams = useCallback(\n    (team: Team) => {\n      selectUsers(\n        t('Remove users from team'),\n        (users: AwxUser[]) => {\n          removeUsersFromTeams(users, team, onClose);\n        },\n        t('Remove user(s)'),\n        awxAPI`/teams/${team.id.toString()}/access_list/`\n      );\n    },\n    [removeUsersFromTeams, onClose, selectUsers, t]\n  );\n  return selectUsersRemoveTeams;\n}\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { compareStrings } from '../../../../framework';\nimport { usePostRequest } from '../../../common/crud/usePostRequest';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { useAwxActiveUser } from '../../common/useAwxActiveUser';\nimport { useAwxBulkConfirmation } from '../../common/useAwxBulkConfirmation';\nimport { AwxUser } from '../../interfaces/User';\nimport { useUsersColumns } from '../users/hooks/useUsersColumns';\nimport { type ResourceType } from './types';\n\nexport function useRemoveUsersFromResource() {\n  const { t } = useTranslation();\n  const { activeAwxUser } = useAwxActiveUser();\n  const confirmationColumns = useUsersColumns();\n  const removeUserConfirmationDialog = useAwxBulkConfirmation<AwxUser>();\n\n  const postRequest = usePostRequest();\n\n  const removeUsersFromResource = useCallback(\n    (users: AwxUser[], resource: ResourceType, onComplete?: (users: AwxUser[]) => void) => {\n      const canRemoveUsers: boolean =\n        activeAwxUser?.is_superuser || resource?.summary_fields?.user_capabilities?.edit;\n      const cannotRemoveUser = (user: AwxUser) => {\n        if (user.is_superuser) {\n          return t('System administrators have unrestricted access to all resources.');\n        }\n        if (user.is_system_auditor) {\n          return t('System auditors have read access to all resources.');\n        }\n        if (!canRemoveUsers) {\n          return t('The user cannot be deleted due to insufficient permissions.');\n        }\n        return undefined;\n      };\n      const undeletableUsers = users.filter(cannotRemoveUser);\n      const titleMap: { [key: string]: string } = {\n        organization: 'Remove user from organization',\n        team: 'Remove user from team',\n      };\n      const title = resource.type ? titleMap[resource.type] : 'Remove user';\n\n      removeUserConfirmationDialog({\n        title: t(title, { count: users.length }),\n        confirmText: t('Yes, I confirm that I want to remove these {{count}} users.', {\n          count: users.length - undeletableUsers.length,\n        }),\n        actionButtonText: t('Remove user', { count: users.length }),\n        items: users.sort((l, r) => compareStrings(l.username, r.username)),\n        keyFn: (user: AwxUser) => user.id,\n        alertPrompts:\n          undeletableUsers.length > 0\n            ? [\n                t(\n                  '{{count}} of the selected users cannot be deleted due to insufficient permissions.',\n                  {\n                    count: undeletableUsers.length,\n                  }\n                ),\n              ]\n            : undefined,\n        isItemNonActionable: cannotRemoveUser,\n        isDanger: true,\n        confirmationColumns,\n        actionColumns: [{ header: 'User', cell: (user: AwxUser) => user.username }],\n        onComplete,\n        actionFn: async (user: AwxUser, signal: AbortSignal) => {\n          if (user.user_roles) {\n            for (const role of user.user_roles) {\n              await postRequest(\n                awxAPI`/users/${user.id.toString()}/roles/`,\n                {\n                  id: role.id,\n                  disassociate: true,\n                },\n                signal\n              );\n            }\n          }\n        },\n      });\n    },\n    [activeAwxUser?.is_superuser, confirmationColumns, removeUserConfirmationDialog, postRequest, t]\n  );\n  return removeUsersFromResource;\n}\n","import { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  PageActions,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { LoadingPage } from '../../../../../framework/components/LoadingPage';\nimport { PageRoutedTabs } from '../../../../common/PageRoutedTabs';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { AwxError } from '../../../common/AwxError';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { Team } from '../../../interfaces/Team';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useViewActivityStream } from '../../common/useViewActivityStream';\nimport { useTeamActions } from '../hooks/useTeamActions';\n\nexport function TeamPage() {\n  const { t } = useTranslation();\n  const params = useParams<{ id: string }>();\n  const { error, data: team, refresh } = useGetItem<Team>(awxAPI`/teams`, params.id);\n  const pageNavigate = usePageNavigate();\n  const itemActions = useTeamActions({\n    onTeamsDeleted: () => pageNavigate(AwxRoute.Teams),\n    isDetailsPageAction: true,\n  });\n  const viewActivityStreamAction = useViewActivityStream('team');\n  const getPageUrl = useGetPageUrl();\n\n  if (error) return <AwxError error={error} handleRefresh={refresh} />;\n  if (!team) return <LoadingPage breadcrumbs tabs />;\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={team?.name}\n        breadcrumbs={[{ label: t('Teams'), to: getPageUrl(AwxRoute.Teams) }, { label: team?.name }]}\n        headerActions={\n          <PageActions<Team>\n            actions={[...viewActivityStreamAction, ...itemActions]}\n            position={DropdownPosition.right}\n            selectedItem={team}\n          />\n        }\n      />\n      <PageRoutedTabs\n        backTab={{\n          label: t('Back to Teams'),\n          page: AwxRoute.Teams,\n          persistentFilterKey: 'teams',\n        }}\n        tabs={[\n          { label: t('Details'), page: AwxRoute.TeamDetails },\n          { label: t('Users'), page: AwxRoute.TeamMembers },\n          { label: t('Roles'), page: AwxRoute.TeamRoles },\n        ]}\n        params={{ id: team.id }}\n      />\n    </PageLayout>\n  );\n}\n","import { CubesIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\nimport { PageHeader, PageLayout, PageTable, usePageNavigate } from '../../../../framework';\nimport { usePersistentFilters } from '../../../common/PersistentFilters';\nimport { useOptions } from '../../../common/crud/useOptions';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { useAwxConfig } from '../../common/useAwxConfig';\nimport { useAwxView } from '../../common/useAwxView';\nimport { useGetDocsUrl } from '../../common/util/useGetDocsUrl';\nimport { ActionsResponse, OptionsResponse } from '../../interfaces/OptionsResponse';\nimport { Team } from '../../interfaces/Team';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { useTeamActions } from './hooks/useTeamActions';\nimport { useTeamToolbarActions } from './hooks/useTeamToolbarActions';\nimport { useTeamsColumns } from './hooks/useTeamsColumns';\nimport { useTeamsFilters } from './hooks/useTeamsFilters';\nimport { ActivityStreamIcon } from '../../common/ActivityStreamIcon';\n\nexport function Teams() {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const toolbarFilters = useTeamsFilters();\n  const tableColumns = useTeamsColumns();\n  const view = useAwxView<Team>({ url: awxAPI`/teams/`, toolbarFilters, tableColumns });\n  const toolbarActions = useTeamToolbarActions(view);\n  const rowActions = useTeamActions({ onTeamsDeleted: view.unselectItemsAndRefresh });\n  const { data } = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/teams/`);\n  const canCreateTeam = Boolean(data && data.actions && data.actions['POST']);\n  usePersistentFilters('teams');\n  const config = useAwxConfig();\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Teams')}\n        titleHelpTitle={t('Teams')}\n        titleHelp={[\n          t(\n            'A team is a subdivision of an organization with associated users, projects, credentials, and permissions.'\n          ),\n          t(\n            'Teams provide a means to implement role-based access control schemes and delegate responsibilities across organizations.'\n          ),\n          t(\n            'For instance, permissions may be granted to a whole team rather than each user on the team.'\n          ),\n        ]}\n        titleDocLink={useGetDocsUrl(config, 'teams')}\n        description={t(\n          'A team is a subdivision of an organization with associated users, projects, credentials, and permissions.'\n        )}\n        headerActions={<ActivityStreamIcon type={'team'} />}\n      />\n      <PageTable<Team>\n        id=\"awx-teams-table\"\n        toolbarFilters={toolbarFilters}\n        toolbarActions={toolbarActions}\n        tableColumns={tableColumns}\n        rowActions={rowActions}\n        errorStateTitle={t('Error loading teams')}\n        emptyStateTitle={\n          canCreateTeam\n            ? t('There are currently no teams added to your organization.')\n            : t('You do not have permission to create a team')\n        }\n        emptyStateDescription={\n          canCreateTeam\n            ? t('Please create a team by using the button below.')\n            : t(\n                'Please contact your organization administrator if there is an issue with your access.'\n              )\n        }\n        emptyStateIcon={canCreateTeam ? undefined : CubesIcon}\n        emptyStateButtonIcon={<PlusCircleIcon />}\n        emptyStateButtonText={canCreateTeam ? t('Create team') : undefined}\n        emptyStateButtonClick={canCreateTeam ? () => pageNavigate(AwxRoute.CreateTeam) : undefined}\n        {...view}\n        defaultSubtitle={t('Team')}\n      />\n    </PageLayout>\n  );\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport { PlusCircleIcon, SyncIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  useGetPageUrl,\n} from '../../../../../framework';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { IAwxView } from '../../../common/useAwxView';\nimport { ActionsResponse, OptionsResponse } from '../../../interfaces/OptionsResponse';\nimport { Team } from '../../../interfaces/Team';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useSelectUsersAddTeams } from '../../users/hooks/useSelectUsersAddTeams';\nimport { useDeleteTeams } from './useDeleteTeams';\n\nexport function useTeamToolbarActions(view: IAwxView<Team>) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const deleteTeams = useDeleteTeams(view.unselectItemsAndRefresh);\n  const selectUsersAddTeams = useSelectUsersAddTeams();\n  // const selectUsersRemoveTeams = useSelectUsersRemoveTeams();\n  const { data } = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/teams/`);\n  const canCreateTeam = Boolean(data && data.actions && data.actions['POST']);\n\n  return useMemo<IPageAction<Team>[]>(\n    () => [\n      {\n        type: PageActionType.Link,\n        selection: PageActionSelection.None,\n        isPinned: true,\n        variant: ButtonVariant.primary,\n        icon: PlusCircleIcon,\n        label: t('Create team'),\n        isDisabled: canCreateTeam\n          ? undefined\n          : t(\n              'You do not have permission to create a team. Please contact your organization administrator if there is an issue with your access.'\n            ),\n        href: getPageUrl(AwxRoute.CreateTeam),\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: PlusCircleIcon,\n        label: t('Add users to teams'),\n        onClick: () => selectUsersAddTeams(view.selectedItems),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.None,\n        icon: SyncIcon,\n        label: t('Refresh'),\n        onClick: () => void view.refresh(),\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: TrashIcon,\n        label: t('Delete teams'),\n        onClick: deleteTeams,\n        isDanger: true,\n      },\n    ],\n    [canCreateTeam, deleteTeams, getPageUrl, selectUsersAddTeams, t, view]\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { LoadingPage, PageFormSelect } from '../../../../../framework';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { usePageWizard } from '../../../../../framework/PageWizard/PageWizardProvider';\nimport { awxAPI } from '../../../common/api/awx-utils';\n\ntype ContentTypeOption = [string, string];\n\nexport function AwxSelectResourceTypeStep() {\n  const { t } = useTranslation();\n  const { wizardData, setStepData, setWizardData } = usePageWizard();\n  const { data, isLoading } = useOptions<{\n    actions: { GET: { content_type: { choices: ContentTypeOption[] } } };\n  }>(awxAPI`/role_definitions/`);\n\n  if (isLoading || !data) {\n    return <LoadingPage />;\n  }\n\n  const options: ContentTypeOption[] = data?.actions?.GET?.content_type?.choices || [];\n\n  return (\n    <PageFormSelect\n      label={t('Resource type')}\n      name=\"resourceType\"\n      options={options\n        .filter(([value, _]) => value?.startsWith('awx.'))\n        .map(([value, display_name]) => ({\n          value,\n          label: display_name,\n        }))}\n      onChange={(option?: string) => {\n        // Reset wizard/step data if the resource type selection was changed\n        if ((wizardData as { [key: string]: unknown })['resourceType'] !== option) {\n          setWizardData({});\n          setStepData({});\n        }\n      }}\n      placeholderText={t('Select a resource type')}\n      isRequired\n    />\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { ITableColumn, IToolbarFilter, ToolbarFilterType } from '../../../../../framework';\nimport { usePageWizard } from '../../../../../framework/PageWizard/PageWizardProvider';\nimport { useMemo } from 'react';\nimport { PageMultiSelectList } from '../../../../../framework/PageTable/PageMultiSelectList';\nimport { Title } from '@patternfly/react-core';\nimport styled from 'styled-components';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxMultiSelectListView } from '../../../common/useAwxMultiSelectListView';\nimport { Credential } from '../../../interfaces/Credential';\nimport { ExecutionEnvironment } from '../../../interfaces/ExecutionEnvironment';\nimport { InstanceGroup } from '../../../interfaces/InstanceGroup';\nimport { Inventory } from '../../../interfaces/Inventory';\nimport { JobTemplate } from '../../../interfaces/JobTemplate';\nimport { NotificationTemplate } from '../../../interfaces/NotificationTemplate';\nimport { Project } from '../../../interfaces/Project';\nimport { WorkflowJobTemplate } from '../../../interfaces/WorkflowJobTemplate';\n\nexport type AwxResourceType =\n  | Credential\n  | ExecutionEnvironment\n  | InstanceGroup\n  | Inventory\n  | JobTemplate\n  | NotificationTemplate\n  | Project\n  | WorkflowJobTemplate;\n\nconst resourceToEndpointMapping: { [key: string]: string } = {\n  'awx.credential': awxAPI`/credentials/`,\n  'awx.executionenvironment': awxAPI`/execution_environments/`,\n  'awx.instancegroup': awxAPI`/instance_groups/`,\n  'awx.inventory': awxAPI`/inventories/`,\n  'awx.jobtemplate': awxAPI`/job_templates/`,\n  'awx.notificationtemplate': awxAPI`/notification_templates/`,\n  'awx.project': awxAPI`/projects/`,\n  'awx.workflowjobtemplate': awxAPI`/workflow_job_templates/`,\n};\n\nconst StyledTitle = styled(Title)`\n  margin-bottom: 1rem;\n`;\n\n/** Roles wizard step for selecting resources based on the resourceType selected */\nexport function AwxSelectResourcesStep() {\n  const { wizardData } = usePageWizard();\n  const { t } = useTranslation();\n  const { resourceType } = wizardData as { [key: string]: unknown };\n\n  const resourceToTitleMapping = useMemo<{ [key: string]: string }>(() => {\n    return {\n      'awx.credential': t('Select credentials'),\n      'awx.executionenvironment': t('Select execution environments'),\n      'awx.instancegroup': t('Select instance groups'),\n      'awx.inventory': t('Select inventories'),\n      'awx.jobtemplate': t('Select job templates'),\n      'awx.notificationtemplate': t('Select notification templates'),\n      'awx.project': t('Select projects'),\n      'awx.workflowjobtemplate': t('Select workflow job templates'),\n    };\n  }, [t]);\n  const tableColumns = useMemo<ITableColumn<AwxResourceType>[]>(\n    () => [\n      {\n        header: t('Name'),\n        type: 'text',\n        value: (item: AwxResourceType) => item.name,\n        sort: 'name',\n      },\n    ],\n    [t]\n  );\n  const toolbarFilters = useMemo<IToolbarFilter[]>(\n    () => [\n      {\n        key: 'name',\n        label: t('Name'),\n        type: ToolbarFilterType.MultiText,\n        query: 'name__contains',\n        comparison: 'contains',\n      },\n    ],\n    [t]\n  );\n\n  const view = useAwxMultiSelectListView<AwxResourceType>(\n    {\n      url: resourceToEndpointMapping[resourceType as string],\n      queryParams:\n        /** Filter out managed and global execution environments as they do not support role assignments */\n        resourceType === 'awx.executionenvironment'\n          ? {\n              not__organization: 'null',\n              managed: 'false',\n            }\n          : undefined,\n      toolbarFilters,\n      tableColumns,\n    },\n    'resources'\n  );\n\n  return (\n    <>\n      <StyledTitle headingLevel=\"h1\">{resourceToTitleMapping[resourceType as string]}</StyledTitle>\n      <h2 style={{ marginTop: '1rem', marginBottom: '1rem' }}>\n        {t(\n          \"Choose the resources that will be receiving new roles. You'll be able to select the roles to apply in the next step. Note that the resources chosen here will receive all roles chosen in the next step.\"\n        )}\n      </h2>\n      <PageMultiSelectList\n        view={view}\n        tableColumns={tableColumns}\n        toolbarFilters={toolbarFilters}\n        labelForSelectedItems={t('Selected')}\n      />\n    </>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { PageWizard, PageWizardStep } from '../../../../framework';\nimport { RoleAssignmentsReviewStep } from '../../../common/access/RolesWizard/steps/RoleAssignmentsReviewStep';\nimport { postRequest } from '../../../common/crud/Data';\nimport { useAwxBulkActionDialog } from '../../common/useAwxBulkActionDialog';\nimport { AwxSelectResourceTypeStep } from './AwxRolesWizardSteps/AwxSelectResourceTypeStep';\nimport {\n  AwxResourceType,\n  AwxSelectResourcesStep,\n} from './AwxRolesWizardSteps/AwxSelectResourcesStep';\nimport { AwxSelectRolesStep } from './AwxRolesWizardSteps/AwxSelectRolesStep';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { AwxRbacRole } from '../../interfaces/AwxRbacRole';\n\ninterface WizardFormValues {\n  resourceType: string;\n  resources: AwxResourceType[];\n  awxRoles: AwxRbacRole[];\n}\n\ninterface ResourceRolePair {\n  resource: AwxResourceType;\n  role: AwxRbacRole;\n}\n\ninterface RoleResponse {\n  role_definition: number;\n  content_type: string;\n  object_id: number;\n  user?: string;\n  team?: string;\n}\n\nexport function AwxAddRoles(params: { id: string; type: 'team' | 'user'; onClose: () => void }) {\n  const { t } = useTranslation();\n  const progressDialog = useAwxBulkActionDialog<ResourceRolePair>();\n\n  const steps: PageWizardStep[] = [\n    {\n      id: 'resource-type',\n      label: t('Select a resource type'),\n      inputs: <AwxSelectResourceTypeStep />,\n    },\n    {\n      id: 'resources',\n      label: t('Select resources'),\n      inputs: <AwxSelectResourcesStep />,\n      validate: (formData, _) => {\n        const { resources } = formData as { resources: AwxResourceType[] };\n        if (!resources?.length) {\n          throw new Error(t('Select at least one resource.'));\n        }\n      },\n    },\n    {\n      id: 'roles',\n      label: t('Select roles to apply'),\n      inputs: <AwxSelectRolesStep fieldNameForPreviousStep=\"resources\" />,\n      validate: (formData, _) => {\n        const { awxRoles } = formData as { awxRoles: AwxRbacRole[] };\n        if (!awxRoles?.length) {\n          throw new Error(t('Select at least one role.'));\n        }\n      },\n    },\n    { id: 'review', label: t('Review'), element: <RoleAssignmentsReviewStep /> },\n  ];\n\n  const onSubmit = (data: WizardFormValues) => {\n    const { resources, awxRoles, resourceType } = data;\n    const items: ResourceRolePair[] = [];\n    for (const resource of resources) {\n      for (const role of awxRoles) {\n        items.push({ resource, role });\n      }\n    }\n    return new Promise<void>((resolve) => {\n      progressDialog({\n        title: t('Add roles'),\n        keyFn: ({ resource, role }) => `${resource.id}_${role.id}`,\n        items,\n        actionColumns: [\n          { header: t('Resource name'), cell: ({ resource }) => resource.name },\n          { header: t('Role'), cell: ({ role }) => role.name },\n        ],\n        actionFn: ({ resource, role }) => {\n          const data: RoleResponse = {\n            role_definition: role.id,\n            content_type: resourceType,\n            object_id: resource.id,\n          };\n          params.type === 'user' ? (data.user = params.id) : (data.team = params.id);\n          return postRequest(awxAPI`/role_${params.type}_assignments/`, data);\n        },\n        onComplete: () => {\n          resolve();\n        },\n        onClose: params.onClose,\n      });\n    });\n  };\n\n  return (\n    <PageWizard<WizardFormValues>\n      steps={steps}\n      onSubmit={onSubmit}\n      onCancel={params.onClose}\n      disableGrid\n    />\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  PageLayout,\n  PageHeader,\n  usePageNavigate,\n  LoadingPage,\n  useGetPageUrl,\n} from '../../../../framework';\nimport { useGet } from '../../../common/crud/useGet';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { AwxAddRoles } from '../common/AwxAddRoles';\n\nexport function AwxAddTeamRoles(props: { id?: string; teamRolesRoute?: string }) {\n  const { t } = useTranslation();\n  const params = useParams<{ id: string }>();\n  const getPageUrl = useGetPageUrl();\n  const pageNavigate = usePageNavigate();\n  const { data: team, isLoading } = useGet<{ id: string; name: string }>(\n    awxAPI`/teams/${props.id || params.id || ''}/`\n  );\n\n  if (isLoading || !team) return <LoadingPage />;\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Add roles')}\n        breadcrumbs={[\n          { label: t('Teams'), to: getPageUrl(AwxRoute.Teams) },\n          {\n            label: team.name,\n            to: getPageUrl(AwxRoute.TeamDetails, { params: { id: 1 } }),\n          },\n          {\n            label: t('Roles'),\n            to: getPageUrl(AwxRoute.TeamRoles, { params: { id: 1 } }),\n          },\n          { label: t('Add roles') },\n        ]}\n      />\n      <AwxAddRoles\n        id={team.id.toString()}\n        type={'team'}\n        onClose={() => {\n          pageNavigate(props.teamRolesRoute || AwxRoute.TeamRoles, {\n            params: { id: team.id },\n          });\n        }}\n      />\n    </PageLayout>\n  );\n}\n","export enum EdaRoute {\n  Eda = 'eda',\n\n  Overview = 'eda-overview',\n\n  RuleAudits = 'eda-rule-audits',\n  RuleAuditPage = 'eda-rule-audit-page',\n  RuleAuditDetails = 'eda-rule-audit-details',\n  RuleAuditActions = 'eda-rule-audit-actions',\n  RuleAuditEvents = 'eda-rule-audit-events',\n\n  RulebookActivations = 'eda-rulebook-activations',\n  CreateRulebookActivation = 'eda-create-rulebook-activation',\n  RulebookActivationPage = 'eda-rulebook-activation-page',\n  RulebookActivationDetails = 'eda-rulebook-activation-details',\n  RulebookActivationHistory = 'eda-rulebook-activation-history',\n  RulebookActivationInstancePage = 'eda-rulebook-activation-instance-page',\n  RulebookActivationInstanceDetails = 'eda-rulebook-activation-instance-details',\n  RulebookActivationTeamAccess = 'eda-rulebook-activation-team-access',\n  RulebookActivationUserAccess = 'eda-rulebook-activation-user-access',\n  RulebookActivationAddTeams = 'eda-rulebook-activation-add-teams',\n  RulebookActivationAddUsers = 'eda-rulebook-activation-add-users',\n\n  Projects = 'eda-projects',\n  CreateProject = 'eda-create-project',\n  EditProject = 'eda-edit-project',\n  ProjectPage = 'eda-project-page',\n  ProjectDetails = 'eda-project-details',\n  ProjectTeamAccess = 'eda-project-project-team-access',\n  ProjectUserAccess = 'eda-project-project-user-access',\n  ProjectAddUsers = 'eda-project-add-users',\n  ProjectAddTeams = 'eda-project-add-teams',\n\n  DecisionEnvironments = 'eda-decision-environments',\n  CreateDecisionEnvironment = 'eda-create-decision-environment',\n  EditDecisionEnvironment = 'eda-edit-decision-environment',\n  DecisionEnvironmentPage = 'eda-decision-environment-page',\n  DecisionEnvironmentDetails = 'eda-decision-environment-details',\n  DecisionEnvironmentTeamAccess = 'eda-decision-environments-team-access',\n  DecisionEnvironmentUserAccess = 'eda-decision-environments-user-access',\n  DecisionEnvironmentAddTeams = 'eda-decision-environments-add-teams',\n  DecisionEnvironmentAddUsers = 'eda-decision-environments-add-users',\n\n  Credentials = 'eda-credentials',\n  CreateCredential = 'eda-create-credential',\n  EditCredential = 'eda-edit-credential',\n  CredentialPage = 'eda-credential-page',\n  CredentialDetails = 'eda-credential-details',\n  CredentialTeamAccess = 'eda-credential-team-access',\n  CredentialUserAccess = 'eda-credential-user-access',\n  CredentialAddTeams = 'eda-credential-add-teams',\n  CredentialAddUsers = 'eda-credential-add-users',\n\n  CredentialTypes = 'eda-credential-types',\n  CreateCredentialType = 'eda-create-credential-type',\n  EditCredentialType = 'eda-edit-credential-type',\n  CredentialTypePage = 'eda-credential-type-page',\n  CredentialTypeDetails = 'eda-credential-type-details',\n  CredentialTypeCredentials = 'eda-credential-type-credentials',\n\n  Access = 'eda-access',\n  Users = 'eda-users',\n  CreateUser = 'eda-create-user',\n  EditUser = 'eda-edit-user',\n  EditCurrentUser = 'eda-edit-current-user',\n  UserPage = 'eda-user-page',\n  MyPage = 'eda-me-page',\n  MyDetails = 'eda-my-details',\n  UserDetails = 'eda-user-details',\n  UserRoles = 'eda-user-roles',\n  UserAddRoles = 'eda-user-add-roles',\n\n  Organizations = 'eda-organizations',\n  CreateOrganization = 'eda-create-organization',\n  EditOrganization = 'eda-edit-organization',\n  OrganizationPage = 'eda-organization-page',\n  OrganizationDetails = 'eda-organization-details',\n\n  Roles = 'eda-roles',\n  CreateRole = 'eda-create-role',\n  EditRole = 'eda-edit-role',\n  RolePage = 'eda-role-page',\n  RoleDetails = 'eda-role-details',\n\n  EventStreams = 'eda-event-streams',\n  CreateEventStream = 'eda-create-event-stream',\n  EditEventStream = 'eda-edit-event-stream',\n  EventStreamPage = 'eda-event-stream-page',\n  EventStreamDetails = 'eda-event-stream-details',\n  EventStreamActivations = 'eda-event-stream-activations',\n  EventStreamTeamAccess = 'eda-event-stream-team-access',\n  EventStreamUserAccess = 'eda-event-stream-user-access',\n  EventStreamAddTeams = 'eda-event-stream-add-teams',\n  EventStreamAddUsers = 'eda-event-stream-add-users',\n\n  Settings = 'eda-settings',\n  SettingsPreferences = 'eda-settings-preferences',\n\n  TeamAddRoles = 'eda-team-add-roles',\n  TeamPage = 'eda-team-page',\n  TeamRoles = 'eda-team-roles',\n  Teams = 'eda-teams',\n  CreateTeam = 'eda-create-team',\n  EditTeam = 'eda-edit-team',\n  TeamDetails = 'eda-team-details',\n\n  Login = 'eda-login',\n}\n","export enum HubRoute {\n  Hub = 'hub',\n\n  Overview = 'hub-overview',\n\n  // Automation Content\n  Namespaces = 'hub-namespaces',\n  CreateNamespace = 'hub-create-namespace',\n  EditNamespace = 'hub-edit-namespace',\n  NamespacePage = 'hub-namespace-page',\n  NamespaceCollections = 'hub-namespace-collections',\n  NamespaceDetails = 'hub-namespace-details',\n  NamespaceCLI = 'hub-namespace-cli',\n  NamespaceTeamAccess = 'hub-namespace-team-access',\n  NamespaceUserAccess = 'hub-namespace-user-access',\n  NamespaceAddUsers = 'hub-namespace-add-users',\n  NamespaceAddTeams = 'hub-namespace-add-teams',\n\n  CollectionSignatureUpload = 'hub-signature-upload',\n  Collections = 'hub-collections',\n  UploadCollection = 'hub-create-collection',\n  CollectionPage = 'hub-collection-page',\n  CollectionDetails = 'hub-collection-details',\n  CollectionInstall = 'hub-collection-install',\n  CollectionDocumentation = 'hub-collection-documentation',\n  CollectionDocumentationContent = 'hub-collection-documentation-content',\n  CollectionContents = 'hub-collection-contents',\n  CollectionImportLog = 'hub-collection-page-import-log',\n  CollectionDistributions = 'hub-collection-distributions',\n  CollectionDependencies = 'hub-collection-dependencies',\n\n  ExecutionEnvironments = 'hub-execution-environments',\n  EditExecutionEnvironment = 'hub-edit-execution-environment',\n  CreateExecutionEnvironment = 'hub-create-execution-environment',\n  ExecutionEnvironmentPage = 'hub-execution-environment-page',\n  ExecutionEnvironmentDetails = 'hub-create-execution-environment-details',\n  ExecutionEnvironmentActivity = 'hub-create-execution-environment-activity',\n  ExecutionEnvironmentImages = 'hub-create-execution-environment-images',\n  ExecutionEnvironmentImagePage = 'hub-create-execution-environment-image-page',\n  ExecutionEnvironmentImageDetails = 'hub-create-execution-environment-image-details',\n  ExecutionEnvironmentAddTeams = 'hub-execution-environment-add-teams',\n  ExecutionEnvironmentAddUsers = 'hub-execution-environment-add-users',\n  ExecutionEnvironmentTeamAccess = 'hub-execution-environment-team-access',\n  ExecutionEnvironmentUserAccess = 'hub-execution-environment-user-access',\n\n  SignatureKeys = 'hub-signature-keys',\n\n  // Administration\n  Repositories = 'hub-repositories',\n  CreateRepository = 'hub-create-repository',\n  EditRepository = 'hub-edit-repository',\n  RepositoryPage = 'hub-repository-page',\n  RepositoryDetails = 'hub-repository-page-details',\n  RepositoryCollectionVersion = 'hub-repository-page-collection-version',\n  RepositoryVersions = 'hub-repository-page-versions',\n  RepositoryVersionPage = 'hub-repository-page-version-page',\n  RepositoryVersionDetails = 'hub-repository-page-version-page-details',\n  RepositoryVersionCollections = 'hub-repository-page-version-page-collections',\n  RepositoryDistributions = 'hub-repository-page-distributions',\n  RepositoryAddTeams = 'hub-repository-add-teams',\n  RepositoryAddUsers = 'hub-repository-add-users',\n  RepositoryTeamAccess = 'hub-repository-team-access',\n  RepositoryUserAccess = 'hub-repository-user-access',\n\n  RemoteRegistries = 'hub-remote-registries',\n  CreateRemoteRegistry = 'hub-create-remote-registry',\n  EditRemoteRegistry = 'hub-edit-remote-registry',\n  RemoteRegistryPage = 'hub-remote-registry-page',\n  RemoteRegistryDetails = 'hub-remote-registry-details',\n\n  Tasks = 'hub-tasks',\n  TaskPage = 'hub-task-page',\n\n  Approvals = 'hub-approvals',\n\n  Remotes = 'hub-remotes',\n  CreateRemote = 'hub-create-remote',\n  EditRemote = 'hub-edit-remote',\n  RemotePage = 'hub-remote-page',\n  RemoteDetails = 'hub-remote-details',\n  RemoteAddTeams = 'hub-remote-add-teams',\n  RemoteAddUsers = 'hub-remote-add-users',\n  RemoteTeamAccess = 'hub-remote-add-team-access',\n  RemoteUserAccess = 'hub-remote-user-access',\n\n  // Access\n  Access = 'hub-access',\n  Organizations = 'hub-organizations',\n  // Teams\n  Teams = 'hub-teams',\n  TeamPage = 'hub-team-page',\n  TeamRoles = 'hub-team-roles',\n  TeamAddRoles = 'hub-team-add-roles',\n  TeamDetails = 'hub-team-details',\n\n  // Users\n  Users = 'hub-users',\n  UserPage = 'hub-user-page',\n  UserRoles = 'hub-user-roles',\n  UserAddRoles = 'hub-user-add-roles',\n  UserDetails = 'hub-user-details',\n\n  APIToken = 'hub-api-token',\n  MyImports = 'hub-my-imports',\n  Roles = 'hub-roles',\n  CreateRole = 'hub-create-role',\n  RolePage = 'hub-role-page',\n  RoleDetails = 'hub-role-details',\n  EditRole = 'hub-edit-role',\n\n  Settings = 'hub-settings',\n  SettingsPreferences = 'hub-settings-preferences',\n\n  Login = 'hub-login',\n}\n","import { useTranslation } from 'react-i18next';\nimport { TeamAssignment } from '../interfaces/TeamAssignment';\nimport { UserAssignment } from '../interfaces/UserAssignment';\nimport { useMapContentTypeToDisplayName } from '../../../common/access/hooks/useMapContentTypeToDisplayName';\nimport { ColumnPriority, LoadingPage, ToolbarFilterType } from '../../../../framework';\nimport { useOptions } from '../../../common/crud/useOptions';\nimport { useMemo } from 'react';\nimport { edaAPI } from '../../../eda/common/eda-utils';\nimport { awxAPI } from '../../../awx/common/api/awx-utils';\nimport { Access } from './Access';\nimport { useGetLinkToResourcePage } from '../hooks/useGetLinkToResourcePage';\nimport { PageSelectOption } from '../../../../framework/PageInputs/PageSelectOption';\nimport { hubAPI } from '../../../hub/common/api/formatPath';\n\ninterface ContentTypeOption {\n  value: string;\n  display_name: string;\n}\n\n// The AWX role_definitions OPTIONS request has a different response structure than EDA\ntype ContentTypeOptionTuple = [string, string];\n\nexport function ResourceAccess(props: {\n  service: 'awx' | 'eda' | 'hub';\n  id: string;\n  type: 'user-roles' | 'team-roles';\n  addRolesRoute?: string;\n}) {\n  const { id, type, addRolesRoute, service } = props;\n  const { t } = useTranslation();\n  const getDisplayName = useMapContentTypeToDisplayName();\n  const roleDefinitionsURL =\n    service === 'awx'\n      ? awxAPI`/role_definitions/`\n      : service === 'eda'\n        ? edaAPI`/role_definitions/`\n        : hubAPI`/_ui/v2/role_definitions/`;\n  const roleUserAssignmentsURL =\n    service === 'awx'\n      ? awxAPI`/role_user_assignments/`\n      : service === 'eda'\n        ? edaAPI`/role_user_assignments/`\n        : hubAPI`/_ui/v2/role_user_assignments/`;\n  const roleTeamAssignmentsURL =\n    service === 'awx'\n      ? awxAPI`/role_team_assignments/`\n      : service === 'eda'\n        ? edaAPI`/role_team_assignments/`\n        : hubAPI`/_ui/v2/role_team_assignments/`;\n  const { data, isLoading } = useOptions<{\n    actions: { POST: { content_type: { choices: ContentTypeOption[] } } };\n  }>(roleDefinitionsURL);\n  const getLinkToResourcePage = useGetLinkToResourcePage();\n\n  // This filter applies to a user/team's roles list to filter based on the resource types\n  const contentTypeFilterOptions = useMemo(() => {\n    const options: ContentTypeOption[] | ContentTypeOptionTuple[] =\n      data?.actions?.POST?.content_type?.choices || [];\n    const optionsArray: PageSelectOption<string>[] = [];\n    (options as ContentTypeOption[] | ContentTypeOptionTuple[])?.forEach((option) => {\n      if ((option as ContentTypeOption)?.value) {\n        optionsArray.push({\n          value:\n            (option as ContentTypeOption).value.split('.').pop() ||\n            (option as ContentTypeOption).value,\n          label: getDisplayName((option as ContentTypeOption).value, { isTitleCase: true }),\n        });\n      } else if (option && (option as ContentTypeOptionTuple)[0] !== null) {\n        optionsArray.push({\n          value:\n            (option as ContentTypeOptionTuple)[0].split('.').pop() ||\n            (option as ContentTypeOptionTuple)[0],\n          label: getDisplayName((option as ContentTypeOptionTuple)[0], { isTitleCase: true }),\n        });\n      }\n    });\n    return optionsArray;\n  }, [data?.actions?.POST?.content_type?.choices, getDisplayName]);\n\n  if (isLoading || !data) {\n    return <LoadingPage />;\n  }\n\n  return (\n    <Access\n      service={service}\n      tableColumnFunctions={{\n        name: {\n          function: (assignment: TeamAssignment | UserAssignment) =>\n            assignment.summary_fields.content_object?.name,\n          label: t('Resource name'),\n          to: (assignment: TeamAssignment | UserAssignment) =>\n            getLinkToResourcePage({\n              contentType: assignment.content_type,\n              objectId:\n                service === 'hub'\n                  ? assignment.summary_fields?.content_object?.name\n                  : assignment.object_id,\n            }),\n        },\n      }}\n      additionalTableColumns={[\n        {\n          header: t('Type'),\n          type: 'description',\n          sort: 'content_type',\n          value: (item) => getDisplayName(item.content_type, { isTitleCase: true }),\n          priority: ColumnPriority.last,\n        },\n      ]}\n      additionalTableFilters={[\n        {\n          key: 'content-type',\n          label: t('Resource type'),\n          type: ToolbarFilterType.MultiSelect,\n          placeholder: t('Select type'),\n          query: 'content_type__model__contains',\n          options: contentTypeFilterOptions,\n          disableSortOptions: true,\n        },\n      ]}\n      url={type === 'user-roles' ? roleUserAssignmentsURL : roleTeamAssignmentsURL}\n      id={id}\n      addRolesRoute={addRolesRoute}\n      accessListType={type}\n    />\n  );\n}\n","import { useCallback } from 'react';\nimport { useGetPageUrl } from '../../../../framework';\nimport { AwxRoute } from '../../../awx/main/AwxRoutes';\nimport { EdaRoute } from '../../../eda/main/EdaRoutes';\nimport { HubRoute } from '../../../hub/main/HubRoutes';\n\nexport function useGetLinkToResourcePage() {\n  const getPageUrl = useGetPageUrl();\n  return useCallback(\n    (options: { contentType: string | null; objectId: string | number | null }) => {\n      const { contentType, objectId } = options;\n      if (contentType === null || objectId === null) {\n        // Content type and object ID will be null for the System Auditor role\n        return undefined;\n      }\n      const resourceToEndpointMapping: { [key: string]: string } = {\n        'eda.edacredential': getPageUrl(EdaRoute.CredentialDetails, { params: { id: objectId } }),\n        'eda.project': getPageUrl(EdaRoute.ProjectDetails, { params: { id: objectId } }),\n        'eda.activation': getPageUrl(EdaRoute.RulebookActivationDetails, {\n          params: { id: objectId },\n        }),\n        'eda.rulebookprocess': getPageUrl(EdaRoute.RulebookActivationInstanceDetails, {\n          params: { id: objectId },\n        }),\n        'eda.credentialtype': getPageUrl(EdaRoute.CredentialTypeDetails, {\n          params: { id: objectId },\n        }),\n        'eda.decisionenvironment': getPageUrl(EdaRoute.DecisionEnvironmentDetails, {\n          params: { id: objectId },\n        }),\n        'eda.auditrule': getPageUrl(EdaRoute.RuleAuditDetails, { params: { id: objectId } }),\n        'awx.credential': getPageUrl(AwxRoute.CredentialDetails, { params: { id: objectId } }),\n        'awx.executionenvironment': getPageUrl(AwxRoute.ExecutionEnvironmentDetails, {\n          params: { id: objectId },\n        }),\n        'awx.instancegroup': getPageUrl(AwxRoute.InstanceGroupDetails, {\n          params: { id: objectId },\n        }),\n        'awx.inventory': getPageUrl(AwxRoute.InventoryDetails, { params: { id: objectId } }),\n        'awx.jobtemplate': getPageUrl(AwxRoute.JobTemplateDetails, { params: { id: objectId } }),\n        'awx.notificationtemplate': getPageUrl(AwxRoute.NotificationTemplateDetails, {\n          params: { id: objectId },\n        }),\n        'awx.workflowjobtemplate': getPageUrl(AwxRoute.WorkflowJobTemplateDetails, {\n          params: { id: objectId },\n        }),\n        'awx.project': getPageUrl(AwxRoute.ProjectDetails, { params: { id: objectId } }),\n        'galaxy.namespace': getPageUrl(HubRoute.NamespaceDetails, { params: { id: objectId } }),\n        'galaxy.ansiblerepository': getPageUrl(HubRoute.RepositoryDetails, {\n          params: { id: objectId },\n        }),\n        'galaxy.containernamespace': getPageUrl(HubRoute.ExecutionEnvironmentDetails, {\n          params: { id: objectId },\n        }),\n        'galaxy.containerrepository': getPageUrl(HubRoute.ExecutionEnvironmentDetails, {\n          params: { id: objectId },\n        }),\n        'galaxy.collectionremote': getPageUrl(HubRoute.RemoteDetails, { params: { id: objectId } }),\n      };\n      return resourceToEndpointMapping[contentType] ?? undefined;\n    },\n    [getPageUrl]\n  );\n}\n","import { useParams } from 'react-router-dom';\nimport { ResourceAccess } from '../../../../common/access/components/ResourceAccess';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\nexport function AwxTeamRoles(props: { id?: string; addRolesRoute?: string }) {\n  const params = useParams<{ id: string }>();\n  return (\n    <ResourceAccess\n      service={'awx'}\n      id={props.id || params.id || ''}\n      type=\"team-roles\"\n      addRolesRoute={props.addRolesRoute || AwxRoute.AddRolesToTeam}\n    />\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageHeader,\n  PageLayout,\n  PageWizard,\n  PageWizardStep,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { RoleAssignmentsReviewStep } from '../../../../common/access/RolesWizard/steps/RoleAssignmentsReviewStep';\nimport { postRequest } from '../../../../common/crud/Data';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { AwxSelectRolesStep } from '../../../access/common/AwxRolesWizardSteps/AwxSelectRolesStep';\nimport { AwxSelectUsersStep } from '../../../access/common/AwxRolesWizardSteps/AwxSelectUsersStep';\nimport { awxErrorAdapter } from '../../../common/adapters/awxErrorAdapter';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkActionDialog } from '../../../common/useAwxBulkActionDialog';\nimport { AwxRbacRole } from '../../../interfaces/AwxRbacRole';\nimport { AwxUser } from '../../../interfaces/User';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { Team } from '../../../interfaces/Team';\n\ninterface WizardFormValues {\n  users: AwxUser[];\n  awxRoles: AwxRbacRole[];\n}\n\ninterface UserRolePair {\n  user: AwxUser;\n  role: AwxRbacRole;\n}\n\nexport function TeamMembersAdd() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const params = useParams<{ id: string }>();\n\n  const { data: team, isLoading } = useGetItem<Team>(awxAPI`/teams/`, params.id);\n  const userProgressDialog = useAwxBulkActionDialog<UserRolePair>();\n  const pageNavigate = usePageNavigate();\n\n  if (isLoading || !team) return <LoadingPage />;\n\n  const steps: PageWizardStep[] = [\n    {\n      id: 'users',\n      label: t('Select user(s)'),\n      inputs: (\n        <AwxSelectUsersStep\n          descriptionForUsersSelection={t(\n            'Select the user(s) that you want to give access to {{teamName}}.',\n            {\n              teamName: team?.name,\n            }\n          )}\n        />\n      ),\n      validate: (formData, _) => {\n        const { users } = formData as { users: AwxUser[] };\n        if (!users?.length) {\n          throw new Error(t('Select at least one user.'));\n        }\n      },\n    },\n    {\n      id: 'awxRoles',\n      label: t('Select roles to apply'),\n      inputs: (\n        <AwxSelectRolesStep\n          contentType=\"team\"\n          fieldNameForPreviousStep=\"users\"\n          descriptionForRoleSelection={t('Choose roles to apply to {{teamName}}.', {\n            teamName: team?.name,\n          })}\n        />\n      ),\n      validate: (formData, _) => {\n        const { awxRoles } = formData as { awxRoles: AwxRbacRole[] };\n        if (!awxRoles?.length) {\n          throw new Error(t('Select at least one role.'));\n        }\n      },\n    },\n    {\n      id: 'review',\n      label: t('Review'),\n      inputs: <RoleAssignmentsReviewStep />,\n    },\n  ];\n\n  const onSubmit = (data: WizardFormValues) => {\n    const { users, awxRoles } = data;\n    const items: UserRolePair[] = [];\n    for (const user of users) {\n      for (const role of awxRoles) {\n        items.push({ user, role });\n      }\n    }\n    return new Promise<void>((resolve) => {\n      userProgressDialog({\n        title: t('Add users'),\n        keyFn: ({ user, role }) => `${user.id}_${role.id}`,\n        items,\n        actionColumns: [\n          { header: t('User'), cell: ({ user }) => user.username },\n          { header: t('Role'), cell: ({ role }) => role.name },\n        ],\n        actionFn: ({ user, role }) =>\n          postRequest(awxAPI`/role_user_assignments/`, {\n            user: user.id,\n            role_definition: role.id,\n            content_type: 'awx.team',\n            object_id: team.id,\n          }),\n        onComplete: () => {\n          resolve();\n        },\n        onClose: () => {\n          pageNavigate(AwxRoute.TeamMembers, {\n            params: { id: team.id.toString() },\n          });\n        },\n      });\n    });\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Add users')}\n        breadcrumbs={[\n          { label: t('Teams'), to: getPageUrl(AwxRoute.Teams) },\n          {\n            label: team?.name,\n            to: getPageUrl(AwxRoute.TeamDetails, { params: { id: team?.id } }),\n          },\n          {\n            label: t('User Access'),\n            to: getPageUrl(AwxRoute.TeamMembers, { params: { id: team?.id } }),\n          },\n          { label: t('Add users') },\n        ]}\n      />\n      <PageWizard<WizardFormValues>\n        errorAdapter={awxErrorAdapter}\n        steps={steps}\n        onSubmit={onSubmit}\n        disableGrid\n        onCancel={() => {\n          pageNavigate(AwxRoute.TeamMembers, { params: { id: team?.id } });\n        }}\n      />\n    </PageLayout>\n  );\n}\n","import { Button } from '@patternfly/react-core';\nimport { SyncAltIcon } from '@patternfly/react-icons';\nimport { useCallback, useEffect } from 'react';\nimport { useFormContext, useWatch } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { PageFormSelect, PageFormTextInput } from '../../../../../framework';\nimport { PageFormSection } from '../../../../../framework/PageForm/Utils/PageFormSection';\nimport { postRequest, requestGet } from '../../../../common/crud/Data';\nimport { PageFormCredentialSelect } from '../../../access/credentials/components/PageFormCredentialSelect';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { JobTemplateForm } from '../../../interfaces/JobTemplateForm';\nimport { WorkflowJobTemplateForm } from '../../../interfaces/WorkflowJobTemplate';\nimport { useWebhookServiceOptions } from './WebhookService';\n\ninterface WebhookKey {\n  webhook_key: string;\n}\n\nexport function WebhookSubForm(props: {\n  templateType: 'job_templates' | 'workflow_job_templates';\n}) {\n  const { t } = useTranslation();\n  const params = useParams<{ id?: string }>();\n  const { setValue, getValues, reset } = useFormContext();\n  const webhookKey = useWatch({ name: 'webhook_key' }) as string;\n  const webhookService = useWatch({ name: 'webhook_service' }) as string;\n  const isWebhookEnabled = useWatch({ name: 'isWebhookEnabled' }) as boolean;\n  const { templateType } = props;\n\n  const { pathname } = useLocation();\n  const webhookServices = useWebhookServiceOptions();\n\n  useEffect(() => {\n    async function handleFetchWebhookKey() {\n      const whkData = await requestGet<WebhookKey>(\n        awxAPI`/${templateType}/${params.id ?? ''}/webhook_key/`\n      );\n      reset({\n        ...getValues(),\n        webhook_key: whkData.webhook_key || webhookKey || (getValues('webhook_key') as string),\n      });\n    }\n    if (!pathname.endsWith('/create')) void handleFetchWebhookKey();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (webhookService)\n      setValue(\n        'related.webhook_receiver',\n        pathname.endsWith('/create')\n          ? t`a new webhook url will be generated on save.`.toUpperCase()\n          : `${document.location.origin}${awxAPI`/${templateType}/`}${\n              params.id as string\n            }/${webhookService}/`\n      );\n\n    if (pathname.endsWith('/create'))\n      setValue('webhook_key', t`a new webhook key will be generated on save.`.toUpperCase());\n  }, [webhookService, setValue, pathname, params.id, t, templateType]);\n\n  const handleGenerateWebhookKey = useCallback(async () => {\n    if (isWebhookEnabled && params.id) {\n      const { webhook_key: webhookKey } = await postRequest<WebhookKey>(\n        awxAPI`/${templateType}/${params.id}/webhook_key/`,\n        {}\n      );\n      setValue('webhook_key', webhookKey);\n      return;\n    }\n  }, [isWebhookEnabled, setValue, params, templateType]);\n\n  const isUpdateKeyDisabled =\n    pathname.endsWith('/create') || webhookKey === 'A NEW WEBHOOK KEY WILL BE GENERATED ON SAVE.';\n  return (\n    <PageFormSection title={t('Webhook details')}>\n      <PageFormSelect<JobTemplateForm>\n        name=\"webhook_service\"\n        label={t('Webhook service')}\n        options={webhookServices}\n        isRequired={isWebhookEnabled}\n        placeholderText={t('Select a webhook service')}\n      />\n      <PageFormTextInput<JobTemplateForm>\n        name=\"related.webhook_receiver\"\n        isDisabled={!params.id || !webhookService}\n        label={t('Webhook URL')}\n        isReadOnly\n        placeholder={t('Select a webhook service')}\n      />\n      <PageFormTextInput<JobTemplateForm>\n        name=\"webhook_key\"\n        label={t('Webhook key')}\n        isReadOnly\n        button={\n          <Button\n            ouiaId=\"update-webhook-key-button\"\n            isDisabled={isUpdateKeyDisabled}\n            variant=\"tertiary\"\n            aria-label={t`Update webhook key`}\n            onClick={() => {\n              void handleGenerateWebhookKey();\n            }}\n          >\n            <SyncAltIcon />\n          </Button>\n        }\n      />\n      {webhookService ? (\n        <PageFormCredentialSelect<JobTemplateForm | WorkflowJobTemplateForm>\n          id=\"webhook_credential\"\n          name=\"webhook_credential\"\n          label={t('Webhook credential')}\n          placeholder={t('Select webhook credential')}\n          isDisabled={!webhookService ? t('Disabled') : undefined}\n          queryParams={{\n            credential_type__namespace: `${webhookService}_token`,\n          }}\n        />\n      ) : null}\n    </PageFormSection>\n  );\n}\n","import { FormSection } from '@patternfly/react-core';\n\nimport { useEffect, useState } from 'react';\nimport { useFormContext, useWatch } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { PageFormDataEditor, PageFormSelect } from '../../../../framework';\nimport { PageFormCheckbox } from '../../../../framework/PageForm/Inputs/PageFormCheckbox';\nimport { PageFormCreatableSelect } from '../../../../framework/PageForm/Inputs/PageFormCreatableSelect';\nimport { PageFormSwitch } from '../../../../framework/PageForm/Inputs/PageFormSwitch';\nimport { PageFormTextInput } from '../../../../framework/PageForm/Inputs/PageFormTextInput';\nimport { PageFormSection } from '../../../../framework/PageForm/Utils/PageFormSection';\nimport { requestGet } from '../../../common/crud/Data';\nimport { PageFormCredentialSelect } from '../../access/credentials/components/PageFormCredentialSelect';\nimport { PageFormSelectExecutionEnvironment } from '../../administration/execution-environments/components/PageFormSelectExecutionEnvironment';\nimport { PageFormInstanceGroupSelect } from '../../administration/instance-groups/components/PageFormInstanceGroupSelect';\nimport { PageFormLabelSelect } from '../../common/PageFormLabelSelect';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { JobTemplateForm } from '../../interfaces/JobTemplateForm';\nimport { PageFormInventorySelect } from '../inventories/components/PageFormInventorySelect';\nimport { PageFormProjectSelect } from '../projects/components/PageFormProjectSelect';\nimport { WebhookSubForm } from './components/WebhookSubForm';\n\n// This list below comes from the previous AWX code\n//https//github.com / ansible / awx / blob / c760577855bf2afacc58579e743111552dae38ef / awx / ui / src / api / models / CredentialTypes.js#L10\nconst acceptableCredentialKinds = [\n  'machine',\n  'cloud',\n  'net',\n  'ssh',\n  'vault',\n  'kubernetes',\n  'cryptography',\n];\n\nexport function JobTemplateInputs(props: { jobtemplate?: JobTemplateForm }) {\n  const { jobtemplate } = props;\n  const { t } = useTranslation();\n  const { setValue, getValues, reset } = useFormContext<JobTemplateForm>();\n  const [playbookOptions, setPlaybookOptions] = useState<string[]>();\n  const projectPath = useWatch<JobTemplateForm, 'project'>({ name: 'project' });\n  const isProvisioningCallbackEnabled = useWatch<JobTemplateForm, 'isProvisioningCallbackEnabled'>({\n    name: 'isProvisioningCallbackEnabled',\n  });\n  const isWebhookEnabled = useWatch<JobTemplateForm, 'isWebhookEnabled'>({\n    name: 'isWebhookEnabled',\n  });\n  const isInventoryPrompted = useWatch<JobTemplateForm, 'ask_inventory_on_launch'>({\n    name: 'ask_inventory_on_launch',\n  });\n  const askJobTypeOnLaunch = useWatch<JobTemplateForm, 'ask_job_type_on_launch'>({\n    name: 'ask_job_type_on_launch',\n  });\n  const organization = useWatch<JobTemplateForm, 'organization'>({ name: 'organization' });\n  const organizationId = organization ?? projectPath?.organization;\n  useEffect(() => {\n    reset(getValues());\n  }, [isProvisioningCallbackEnabled, reset, getValues]);\n\n  useEffect(() => {\n    async function handleFetchPlaybooks() {\n      if (projectPath) {\n        const playbooks = await requestGet<string[]>(\n          awxAPI`/projects/${projectPath.id.toString()}/playbooks/`\n        );\n        return setPlaybookOptions(playbooks);\n      }\n    }\n    handleFetchPlaybooks().catch(() => 'there was an error');\n  }, [projectPath, setValue]);\n\n  return (\n    <>\n      <PageFormTextInput<JobTemplateForm>\n        name=\"name\"\n        label={t('Name')}\n        isRequired\n        placeholder={t('Add a name for this job template')}\n      />\n      <PageFormTextInput<JobTemplateForm>\n        name=\"description\"\n        label={t('Description')}\n        placeholder={t('Add a description for this job template')}\n      />\n      <PageFormSelect<JobTemplateForm>\n        isRequired={!askJobTypeOnLaunch}\n        additionalControls={\n          <PageFormCheckbox label={t('Prompt on launch')} name=\"ask_job_type_on_launch\" />\n        }\n        labelHelpTitle={t('Job type')}\n        labelHelp={t('Select a job type for this job template.')}\n        name=\"job_type\"\n        id=\"job_type\"\n        label={t('Job type')}\n        options={[\n          { label: t('Check'), value: 'check' },\n          { label: t('Run'), value: 'run' },\n        ]}\n        placeholderText={t('Select job type')}\n      />\n      <PageFormInventorySelect<JobTemplateForm>\n        additionalControls={\n          <PageFormCheckbox label={t('Prompt on launch')} name=\"ask_inventory_on_launch\" />\n        }\n        name=\"inventory\"\n        isRequired={!isInventoryPrompted}\n      />\n      <PageFormProjectSelect<JobTemplateForm> name=\"project\" isRequired />\n\n      <PageFormSelect<JobTemplateForm>\n        name=\"playbook\"\n        id=\"playbook\"\n        labelHelpTitle={t('Playbook')}\n        labelHelp={t('Select the playbook to be executed by this job.')}\n        placeholderText={t('Add a project, then select a playbook')}\n        label={t('Playbook')}\n        isRequired\n        isDisabled={!playbookOptions?.length}\n        options={playbookOptions?.map((playbook) => ({ label: playbook, value: playbook })) ?? []}\n      />\n\n      {projectPath?.allow_override ? (\n        <PageFormTextInput<JobTemplateForm>\n          name=\"scm_branch\"\n          placeholder={t('Add a source control branch')}\n          labelHelpTitle={t('Source control branch')}\n          labelHelp={t(\n            'Branch to use in job run. Project default used if blank. Only allowed if project allow_override field is set to true.'\n          )}\n          additionalControls={\n            <PageFormCheckbox label={t('Prompt on launch')} name=\"ask_scm_branch_on_launch\" />\n          }\n          label={t('Source control branch')}\n        />\n      ) : null}\n      <PageFormSelectExecutionEnvironment<JobTemplateForm>\n        name=\"execution_environment.id\"\n        organizationId={organizationId}\n        additionalControls={\n          <PageFormCheckbox\n            label={t('Prompt on launch')}\n            name=\"ask_execution_environment_on_launch\"\n          />\n        }\n      />\n      <PageFormCredentialSelect<JobTemplateForm>\n        name=\"credentials\"\n        additionalControls={\n          <PageFormCheckbox label={t('Prompt on launch')} name=\"ask_credential_on_launch\" />\n        }\n        label={t('Credentials')}\n        placeholder={t('Select credentials')}\n        labelHelp={t(\n          'Select credentials for accessing the nodes this job will be ran against. You can only select one credential of each type. For machine credentials (SSH), checking \"Prompt on launch\" without selecting credentials will require you to select a machine credential at run time. If you select credentials and check \"Prompt on launch\", the selected credential(s) become the defaults that can be updated at run time.'\n        )}\n        isMultiple\n        queryParams={{ credential_type__kind__in: acceptableCredentialKinds.join(',') }}\n      />\n      <PageFormLabelSelect\n        labelHelpTitle={t('Labels')}\n        labelHelp={t(\n          `Optional labels that describe this job template, such as \"dev\" or \"test\". Labels can be used to group and filter job templates and completed jobs.`\n        )}\n        name=\"labels\"\n        additionalControls={\n          <PageFormCheckbox label={t('Prompt on launch')} name=\"ask_labels_on_launch\" />\n        }\n      />\n      <PageFormTextInput<JobTemplateForm>\n        placeholder={t('Add number of forks')}\n        additionalControls={\n          <PageFormCheckbox label={t('Prompt on launch')} name=\"ask_forks_on_launch\" />\n        }\n        name=\"forks\"\n        labelHelpTitle={t('Forks')}\n        labelHelp={t(\n          'The number of parallel or simultaneous processes to use while executing the playbook. An empty value, or a value less than 1 will use the Ansible default which is usually 5. The default number of forks can be overwritten with a change to ansible.cfg. Refer to the Ansible documentation for details about the configuration file.'\n        )}\n        type=\"number\"\n        label={t('Forks')}\n      />\n      <PageFormTextInput<JobTemplateForm>\n        placeholder={t('Add a limit to reduce number of hosts.')}\n        additionalControls={\n          <PageFormCheckbox label={t('Prompt on launch')} name=\"ask_limit_on_launch\" />\n        }\n        name=\"limit\"\n        labelHelpTitle={t('Limit')}\n        labelHelp={t(\n          'Provide a host pattern to further constrain the list of hosts that will be managed or affected by the playbook. Multiple patterns are allowed. Refer to Ansible documentation for more information and examples on patterns.'\n        )}\n        label={t('Limit')}\n      />\n      <PageFormTextInput<JobTemplateForm>\n        placeholder={t('Select a verbosity value')}\n        additionalControls={\n          <PageFormCheckbox label={t('Prompt on launch')} name=\"ask_verbosity_on_launch\" />\n        }\n        name=\"verbosity\"\n        type=\"number\"\n        labelHelpTitle={t('Verbosity')}\n        labelHelp={t('Control the level of output Ansible will produce as the playbook executes.')}\n        label={t('Verbosity')}\n      />\n      <PageFormTextInput<JobTemplateForm>\n        placeholder={t('Add a job slicing value')}\n        additionalControls={\n          <PageFormCheckbox label={t('Prompt on launch')} name=\"ask_job_slice_count_on_launch\" />\n        }\n        labelHelpTitle={t('Job slicing')}\n        labelHelp={t(\n          'Divide the work done by this job template into the specified number of job slices, each running the same tasks against a portion of the inventory.'\n        )}\n        name=\"job_slice_count\"\n        type=\"number\"\n        label={t('Job slicing')}\n      />\n      <PageFormTextInput<JobTemplateForm>\n        placeholder={t('Add a timeout value')}\n        type=\"number\"\n        labelHelpTitle={t('Timeout')}\n        labelHelp={t(\n          'The amount of time (in seconds) to run before the job is canceled. Defaults to 0 for no job timeout.'\n        )}\n        additionalControls={\n          <PageFormCheckbox label={t('Prompt on launch')} name=\"ask_timeout_on_launch\" />\n        }\n        name=\"timeout\"\n        label={t('Timeout')}\n      />\n      <PageFormSwitch<JobTemplateForm>\n        id=\"show-changes\"\n        name=\"diff_mode\"\n        label={t('Show changes')}\n        labelHelpTitle={t('Show changes')}\n        labelHelp={t(\n          `If enabled, show the changes made by Ansible tasks, where supported. This is equivalent to Ansible's --diff mode.`\n        )}\n        additionalControls={\n          <PageFormCheckbox label={t('Prompt on launch')} name=\"ask_diff_mode_on_launch\" />\n        }\n      />\n      <PageFormInstanceGroupSelect<JobTemplateForm>\n        additionalControls={\n          <PageFormCheckbox label={t('Prompt on launch')} name=\"ask_instance_groups_on_launch\" />\n        }\n        name=\"instance_groups\"\n        labelHelp={t(`Select the instance groups for this job template to run on.`)}\n      />\n      <PageFormCreatableSelect<JobTemplateForm>\n        labelHelpTitle={t('Job tags')}\n        labelHelp={t(\n          'Tags are useful when you have a large playbook, and you want to run a specific part of a play or task. Use commas to separate multiple tags. Refer to the documentation for details on the usage of tags.'\n        )}\n        name=\"job_tags\"\n        additionalControls={\n          <PageFormCheckbox label={t('Prompt on launch')} name=\"ask_tags_on_launch\" />\n        }\n        placeholderText={t('Select or create job tags')}\n        label={t('Job tags')}\n        options={jobtemplate?.job_tags ?? [{ value: '', label: '', name: '' }]}\n      />\n      <PageFormCreatableSelect<JobTemplateForm>\n        labelHelpTitle={t('Skip tags')}\n        labelHelp={t(\n          'Skip tags are useful when you have a large playbook, and you want to skip specific parts of a play or task. Use commas to separate multiple tags. Refer to the documentation for details on the usage of tags.'\n        )}\n        additionalControls={\n          <PageFormCheckbox label={t('Prompt on launch')} name=\"ask_skip_tags_on_launch\" />\n        }\n        name=\"skip_tags\"\n        placeholderText={t('Select or create skip tags')}\n        label={t('Skip tags')}\n        options={jobtemplate?.skip_tags ?? [{ value: '', label: '', name: '' }]}\n      />\n      <PageFormSection singleColumn>\n        <PageFormDataEditor<JobTemplateForm>\n          additionalControls={\n            <PageFormCheckbox label={t('Prompt on launch')} name=\"ask_variables_on_launch\" />\n          }\n          labelHelpTitle={t('Extra Variables')}\n          labelHelp={t(`Optional extra variables to be applied to job template.`)}\n          format=\"yaml\"\n          label={t('Extra variables')}\n          name=\"extra_vars\"\n        />\n      </PageFormSection>\n      <PageFormCheckbox<JobTemplateForm> label={t('Privilege escalation')} name=\"become_enabled\" />\n      <PageFormCheckbox<JobTemplateForm>\n        label={t('Provisioning callback')}\n        name=\"isProvisioningCallbackEnabled\"\n      />\n      <PageFormCheckbox<{ isWebhookEnabled: boolean }>\n        label={t('Enable webhook')}\n        name=\"isWebhookEnabled\"\n      />\n      <PageFormCheckbox<JobTemplateForm> label={t('Concurrent jobs')} name=\"allow_simultaneous\" />\n      <PageFormCheckbox<JobTemplateForm> label={t('Enable fact storage')} name=\"use_fact_cache\" />\n      <PageFormCheckbox<JobTemplateForm>\n        label={t('Prevent instance group fallback')}\n        name=\"prevent_instance_group_fallback\"\n      />\n      {isProvisioningCallbackEnabled ? (\n        <FormSection title={t('Provisioning callback details')}>\n          {jobtemplate?.related.callback ? (\n            <PageFormTextInput<JobTemplateForm>\n              name=\"related.callback\"\n              isDisabled\n              placeholder={t('Add a callback URL')}\n              label={t('Provisioning callback URL')}\n            />\n          ) : null}\n          <PageFormTextInput<JobTemplateForm>\n            name=\"host_config_key\"\n            placeholder={t('Add a host config key')}\n            isRequired={!!isProvisioningCallbackEnabled}\n            label={t('Host config key')}\n          />\n        </FormSection>\n      ) : null}\n      {isWebhookEnabled ? <WebhookSubForm templateType=\"job_templates\" /> : null}\n    </>\n  );\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSWRConfig } from 'swr';\nimport {\n  PageFormSubmitHandler,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { LoadingPage } from '../../../../framework/components/LoadingPage';\nimport { postRequest, requestGet, requestPatch } from '../../../common/crud/Data';\nimport { useGet } from '../../../common/crud/useGet';\nimport { usePostRequest } from '../../../common/crud/usePostRequest';\nimport { AwxError } from '../../common/AwxError';\nimport { AwxItemsResponse } from '../../common/AwxItemsResponse';\nimport { AwxPageForm } from '../../common/AwxPageForm';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { getAddedAndRemoved } from '../../common/util/getAddedAndRemoved';\nimport { Credential } from '../../interfaces/Credential';\nimport { InstanceGroup } from '../../interfaces/InstanceGroup';\nimport { JobTemplate } from '../../interfaces/JobTemplate';\nimport { JobTemplateCreate, JobTemplateForm } from '../../interfaces/JobTemplateForm';\nimport { Label } from '../../interfaces/Label';\nimport { Organization } from '../../interfaces/Organization';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { getJobTemplateDefaultValues, stringifyTags } from './JobTemplateFormHelpers';\nimport { JobTemplateInputs } from './JobTemplateInputs';\n\nexport function EditJobTemplate() {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const params = useParams<{ id?: string }>();\n  const id = Number(params.id);\n  const {\n    data: jobTemplate,\n    error: jobTemplateError,\n    refresh: jobTemplateRefresh,\n    isLoading: isJobTemplateLoading,\n  } = useGet<JobTemplate>(awxAPI`/job_templates/${id.toString()}/`);\n  const {\n    data: instanceGroups,\n    error: instanceGroupsError,\n    isLoading: isInstanceGroupsLoading,\n    refresh: instanceGroupRefresh,\n  } = useGet<AwxItemsResponse<InstanceGroup>>(\n    awxAPI`/job_templates/${id.toString()}/instance_groups/`\n  );\n\n  const defaultValues = useMemo(\n    () => getJobTemplateDefaultValues(t, jobTemplate, instanceGroups?.results ?? []),\n    [t, jobTemplate, instanceGroups]\n  );\n  const { cache } = useSWRConfig();\n  const onSubmit: PageFormSubmitHandler<JobTemplateForm> = async (values: JobTemplateForm) => {\n    const {\n      credentials,\n      labels,\n      instance_groups,\n      webhook_key,\n      webhook_url,\n      isProvisioningCallbackEnabled,\n      isWebhookEnabled,\n      host_config_key,\n      ...rest\n    } = values;\n    const formValues = {\n      ...rest,\n      project: values.project.id,\n      execution_environment: values.execution_environment?.id || null,\n      inventory: values.inventory?.id || null,\n      job_tags: stringifyTags(values.job_tags) ?? '',\n      skip_tags: stringifyTags(values.skip_tags) ?? '',\n      webhook_credential: values.webhook_credential || null,\n      webhook_service: isWebhookEnabled ? values.webhook_service : null,\n      host_config_key: isProvisioningCallbackEnabled ? host_config_key : null,\n    };\n    await requestPatch<JobTemplateForm>(awxAPI`/job_templates/${id.toString()}/`, formValues);\n    (cache as unknown as { clear: () => void }).clear?.();\n    const promises = [];\n\n    promises.push(submitCredentials(jobTemplate as JobTemplate, credentials));\n    promises.push(submitLabels(jobTemplate as JobTemplate, labels));\n    promises.push(submitInstanceGroups(id, instance_groups));\n    await Promise.all(promises);\n    pageNavigate(AwxRoute.JobTemplateDetails, { params: { id } });\n  };\n\n  const getPageUrl = useGetPageUrl();\n\n  const jobTemplateFormError = jobTemplateError || instanceGroupsError;\n  if (jobTemplateFormError instanceof Error) {\n    return (\n      <AwxError\n        error={jobTemplateFormError}\n        handleRefresh={jobTemplateError ? jobTemplateRefresh : instanceGroupRefresh}\n      />\n    );\n  }\n  if (isJobTemplateLoading || isInstanceGroupsLoading) return <LoadingPage />;\n  return (\n    <PageLayout>\n      <PageHeader\n        title={\n          jobTemplate?.name\n            ? t('Edit {{jobtemplateName}}', { jobtemplateName: jobTemplate?.name })\n            : t('Job Template')\n        }\n        breadcrumbs={[\n          { label: t('Templates'), to: getPageUrl(AwxRoute.Templates) },\n          {\n            label: jobTemplate?.name\n              ? t('Edit {{jobtemplateName}}', { jobtemplateName: jobTemplate?.name })\n              : t('Job Template'),\n          },\n        ]}\n      />\n      <AwxPageForm<JobTemplateForm>\n        submitText={t('Save job template')}\n        onSubmit={onSubmit}\n        onCancel={() => pageNavigate(AwxRoute.JobTemplateDetails, { params: { id } })}\n        defaultValue={defaultValues}\n      >\n        <JobTemplateInputs jobtemplate={defaultValues} />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\nexport function CreateJobTemplate() {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const pageNavigate = usePageNavigate();\n  const postRequest = usePostRequest<JobTemplateCreate, JobTemplate>();\n  const defaultValues = useMemo(() => getJobTemplateDefaultValues(t, {} as JobTemplate), [t]);\n\n  const onSubmit: PageFormSubmitHandler<JobTemplateForm> = async (values) => {\n    const { credentials, labels, instance_groups, webhook_key, webhook_url, ...rest } = values;\n    const formValues = {\n      ...rest,\n      project: values.project.id,\n      execution_environment: values.execution_environment?.id\n        ? values.execution_environment?.id\n        : null,\n      inventory: values.inventory?.id || null,\n      job_tags: stringifyTags(values.job_tags) ?? '',\n      skip_tags: stringifyTags(values.skip_tags) ?? '',\n      webhook_credential: values.webhook_credential || null,\n    };\n\n    const template = await postRequest(awxAPI`/job_templates/`, formValues);\n    const promises = [];\n    if (credentials?.length > 0) {\n      promises.push(submitCredentials(template, credentials));\n    }\n    if (labels && labels?.length > 0) {\n      promises.push(submitLabels(template, labels));\n    }\n    if (instance_groups.length > 0) {\n      promises.push(submitInstanceGroups(template.id, instance_groups));\n    }\n    if (promises.length > 0) await Promise.all(promises);\n\n    pageNavigate(AwxRoute.JobTemplateDetails, { params: { id: template.id } });\n  };\n\n  const getPageUrl = useGetPageUrl();\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Create job template')}\n        breadcrumbs={[\n          { label: t('Templates'), to: getPageUrl(AwxRoute.Templates) },\n          { label: t('Create job template') },\n        ]}\n      />\n      <AwxPageForm<JobTemplateForm>\n        submitText={t('Create job template')}\n        onSubmit={onSubmit}\n        onCancel={() => navigate(-1)}\n        defaultValue={defaultValues}\n      >\n        <JobTemplateInputs />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n\nasync function submitCredentials(\n  template: JobTemplate,\n  newCredentials: Pick<Credential, 'id' | 'name' | 'cloud' | 'description' | 'kind'>[]\n) {\n  const { added, removed } = getAddedAndRemoved(\n    template?.summary_fields?.credentials ?? ([] as Credential[]),\n    newCredentials\n  );\n\n  const disassociateCredentials = removed.map((cred) =>\n    postRequest(awxAPI`/job_templates/${template?.id?.toString()}/credentials/`, {\n      id: cred.id,\n      disassociate: true,\n    })\n  );\n  const disassociatePromise = await Promise.all(disassociateCredentials);\n  const associateCredentials = added.map((cred: { id: number }) =>\n    postRequest(awxAPI`/job_templates/${template?.id?.toString()}/credentials/`, {\n      id: cred.id,\n    })\n  );\n\n  const associatePromise = await Promise.all(associateCredentials);\n  return Promise.all([disassociatePromise, associatePromise]);\n}\n\nasync function submitLabels(template: JobTemplate, labels: Label[]) {\n  const { added, removed } = getAddedAndRemoved(\n    template.summary_fields?.labels?.results || ([] as Label[]),\n    labels ?? ([] as Label[])\n  );\n\n  let orgId = template.summary_fields?.organization?.id;\n  if (!template.summary_fields?.organization?.id) {\n    // eslint-disable-next-line no-useless-catch\n    try {\n      const data = await requestGet<AwxItemsResponse<Organization>>(awxAPI`/organizations/`);\n      orgId = data.results[0].id;\n    } catch (err) {\n      throw err;\n    }\n  }\n  const disassociationPromises = removed.map((label: { id: number }) =>\n    postRequest(awxAPI`/job_templates/${template.id.toString()}/labels/`, {\n      id: label.id,\n      disassociate: true,\n    })\n  );\n  const associationPromises = added.map((label: { name: string }) =>\n    postRequest(awxAPI`/job_templates/${template.id.toString()}/labels/`, {\n      name: label.name,\n      organization: orgId,\n    })\n  );\n\n  const results = await Promise.all([...disassociationPromises, ...associationPromises]);\n  return results;\n}\nasync function submitInstanceGroups(templateId: number, newInstanceGroups: InstanceGroup[]) {\n  const originalInstanceGroups = await requestGet<AwxItemsResponse<InstanceGroup>>(\n    awxAPI`/job_templates/${templateId.toString()}/instance_groups/`\n  );\n  if (!isEqual(newInstanceGroups, originalInstanceGroups.results)) {\n    for (const group of originalInstanceGroups.results) {\n      await postRequest(awxAPI`/job_templates/${templateId.toString()}/instance_groups/`, {\n        id: group.id,\n        disassociate: true,\n      });\n    }\n    for (const group of newInstanceGroups) {\n      await await postRequest(awxAPI`/job_templates/${templateId.toString()}/instance_groups/`, {\n        id: group.id,\n      });\n    }\n  }\n}\n\nfunction isEqual(array1: InstanceGroup[], array2: InstanceGroup[]) {\n  return (\n    array1.length === array2.length &&\n    array1.every((element, index) => element.id === array2[index].id)\n  );\n}\n","import {\n  Label,\n  LabelGroup,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useNavigate, useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageDetail,\n  PageDetails,\n  useGetPageUrl,\n  getPatternflyColor,\n} from '../../../../../framework';\nimport { PageDetailCodeEditor } from '../../../../../framework/PageDetails/PageDetailCodeEditor';\nimport { LastModifiedPageDetail } from '../../../../common/LastModifiedPageDetail';\nimport { useGet, useGetItem } from '../../../../common/crud/useGet';\nimport { AwxError } from '../../../common/AwxError';\nimport { CredentialLabel } from '../../../common/CredentialLabel';\nimport { UserDateDetail } from '../../../common/UserDateDetail';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useVerbosityString } from '../../../common/useVerbosityString';\nimport { InstanceGroup } from '../../../interfaces/InstanceGroup';\nimport { JobTemplate } from '../../../interfaces/JobTemplate';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { WebhookService } from '../components/WebhookService';\nimport styled from 'styled-components';\n\nconst DangerText = styled.span`\n  color: ${getPatternflyColor('danger')};\n`;\n\nconst DeletedDetail = () => {\n  const { t } = useTranslation();\n  return <DangerText>{t`Deleted`}</DangerText>;\n};\n\nfunction useInstanceGroups(templateId: string) {\n  const { data } = useGet<{ results: InstanceGroup[] }>(\n    awxAPI`/job_templates/${templateId}/instance_groups/`\n  );\n  return data?.results ?? [];\n}\n\nexport function TemplateDetails(props: { templateId?: string; disableScroll?: boolean }) {\n  const { t } = useTranslation();\n  const params = useParams<{ id: string }>();\n\n  const urlId = props?.templateId ? props.templateId : params.id;\n  const { error, data: template, refresh } = useGetItem<JobTemplate>(awxAPI`/job_templates`, urlId);\n  const instanceGroups = useInstanceGroups(urlId || '0');\n  const getPageUrl = useGetPageUrl();\n  const history = useNavigate();\n\n  const verbosity: string = useVerbosityString(template?.verbosity);\n  if (error) return <AwxError error={error} handleRefresh={refresh} />;\n  if (!template) return <LoadingPage breadcrumbs tabs />;\n  const { summary_fields: summaryFields, ask_inventory_on_launch: askInventoryOnLaunch } = template;\n\n  const showOptionsField =\n    template.become_enabled ||\n    template.host_config_key ||\n    template.allow_simultaneous ||\n    template.use_fact_cache ||\n    template.webhook_service ||\n    template.prevent_instance_group_fallback;\n\n  const inventoryUrlPaths: { [key: string]: string } = {\n    '': 'inventory',\n    smart: 'smart_inventory',\n    constructed: 'constructed_inventory',\n  };\n\n  return (\n    <PageDetails disableScroll={props.disableScroll}>\n      <PageDetail label={t('Name')}>\n        {props.templateId ? (\n          <Link to={getPageUrl(AwxRoute.JobTemplateDetails, { params: { id: props.templateId } })}>\n            {template.name}\n          </Link>\n        ) : (\n          template.name\n        )}\n      </PageDetail>\n      <PageDetail label={t('Description')}>{template.description}</PageDetail>\n      <PageDetail\n        label={t('Job type')}\n        helpText={t(\n          'For job templates, select run to execute the playbook. Select check to only check playbook syntax, test environment setup, and report problems without executing the playbook.'\n        )}\n      >\n        {template.job_type}\n      </PageDetail>\n      <PageDetail label={t('Organization')}>\n        {summaryFields.organization ? (\n          <Link\n            to={getPageUrl(AwxRoute.OrganizationDetails, {\n              params: { id: template.summary_fields?.organization?.id },\n            })}\n          >\n            {summaryFields.organization?.name}\n          </Link>\n        ) : (\n          <DeletedDetail />\n        )}\n      </PageDetail>\n      <PageDetail\n        label={t('Inventory')}\n        isEmpty={!summaryFields.inventory && askInventoryOnLaunch}\n        helpText={t('Select the inventory containing the hosts you want this job to manage.')}\n      >\n        {summaryFields.inventory ? (\n          <Link\n            to={getPageUrl(AwxRoute.InventoryDetails, {\n              params: {\n                id: summaryFields.inventory?.id,\n                inventory_type: inventoryUrlPaths[summaryFields.inventory?.kind],\n              },\n            })}\n          >\n            {summaryFields.inventory?.name}\n          </Link>\n        ) : (\n          <DeletedDetail />\n        )}\n      </PageDetail>\n      <PageDetail\n        label={t`Project`}\n        helpText={t('Select the project containing the playbook you want this job to execute.')}\n      >\n        {summaryFields.project ? (\n          <Link\n            to={getPageUrl(AwxRoute.ProjectDetails, { params: { id: summaryFields.project?.id } })}\n          >\n            {summaryFields.project?.name}\n          </Link>\n        ) : (\n          <DeletedDetail />\n        )}\n      </PageDetail>\n      <PageDetail\n        label={t`Execution environment`}\n        isEmpty={!summaryFields.resolved_environment}\n        helpText={t(\n          'The execution environment that will be used when launching this job template. The resolved execution environment can be overridden by explicitly assigning a different one to this job template.'\n        )}\n      >\n        <Link\n          to={getPageUrl(AwxRoute.ExecutionEnvironmentDetails, {\n            params: { id: summaryFields.resolved_environment?.id },\n          })}\n        >\n          {summaryFields.resolved_environment?.name}\n        </Link>\n      </PageDetail>\n      <PageDetail label={t('Source control branch')}>{template.scm_branch}</PageDetail>\n      <PageDetail\n        label={t('Playbook')}\n        helpText={t('Select the playbook to be executed by this job.')}\n      >\n        {template.playbook}\n      </PageDetail>\n      <PageDetail label={t('Credentials')} isEmpty={!summaryFields.credentials?.length}>\n        <LabelGroup>\n          {summaryFields.credentials?.map((credential) => (\n            <CredentialLabel credential={credential} key={credential.id} />\n          ))}\n        </LabelGroup>\n      </PageDetail>\n      <PageDetail\n        label={t`Instance groups`}\n        helpText={t`The instance groups for this job template to run on.`}\n        isEmpty={!instanceGroups?.length}\n      >\n        <LabelGroup>\n          {instanceGroups?.map((ig) => (\n            <Label color=\"blue\" key={ig.id}>\n              <Link\n                to={getPageUrl(AwxRoute.InstanceGroupDetails, {\n                  params: {\n                    id: ig.id,\n                  },\n                })}\n              >\n                {ig.name}\n              </Link>\n            </Label>\n          ))}\n        </LabelGroup>\n      </PageDetail>\n      <PageDetail\n        label={t('Forks')}\n        helpText={\n          <span>\n            {t(\n              `The number of parallel or simultaneous processes to use while executing the playbook. An empty value, or a value less than 1 will use the Ansible default which is usually 5. The default number of forks can be overwritten with a change to`\n            )}{' '}\n            <code>ansible.cfg</code>.{' '}\n            {t(`Refer to the Ansible documentation for details about the configuration file.`)}\n          </span>\n        }\n      >\n        {template.forks || 0}\n      </PageDetail>\n      <PageDetail label={t('Limit')}>{template.limit}</PageDetail>\n      <PageDetail\n        label={t('Verbosity')}\n        helpText={t('Control the level of output Ansible will produce as the playbook executes.')}\n      >\n        {verbosity}\n      </PageDetail>\n      <PageDetail\n        label={t('Timeout')}\n        helpText={t(\n          'The amount of time (in seconds) to run before the job is canceled. Defaults to 0 for no job timeout.'\n        )}\n      >\n        {template.timeout || 0}\n      </PageDetail>\n      <PageDetail\n        label={t('Show changes')}\n        helpText={t(\n          `If enabled, show the changes made by Ansible tasks, where supported. This is equivalent to Ansible's --diff mode.`\n        )}\n      >\n        {template.diff_mode ? t`On` : t`Off`}\n      </PageDetail>\n      <PageDetail\n        label={t('Job slicing')}\n        helpText={t(\n          'Divide the work done by this job template into the specified number of job slices, each running the same tasks against a portion of the inventory.'\n        )}\n      >\n        {template.job_slice_count}\n      </PageDetail>\n      <PageDetail label={t('Host config key')}>{template.host_config_key}</PageDetail>\n      <PageDetail label={t('Provisioning callback URL')} isEmpty={!template.host_config_key}>\n        {`${window.location.origin} ${template.url}callback/`}\n      </PageDetail>\n      <PageDetail label={t('Webhook service')} isEmpty={!template.webhook_service}>\n        <WebhookService service={template.webhook_service} />\n      </PageDetail>\n      {summaryFields.webhook_credential && (\n        <PageDetail label={t('Webhook credential')} isEmpty={!summaryFields.webhook_credential}>\n          <CredentialLabel credential={summaryFields?.webhook_credential} />\n        </PageDetail>\n      )}\n      <UserDateDetail\n        label={t('Created')}\n        date={template.created}\n        user={template.summary_fields.created_by}\n      />\n      <LastModifiedPageDetail\n        value={template.modified}\n        author={template.summary_fields.modified_by?.username}\n        onClick={() =>\n          history(\n            getPageUrl(AwxRoute.UserDetails, {\n              params: { id: (template.summary_fields?.modified_by?.id ?? 0).toString() },\n            })\n          )\n        }\n      />\n      <PageDetail label={t('Labels')} isEmpty={!summaryFields.labels?.results?.length}>\n        <LabelGroup>\n          {summaryFields.labels?.results?.map((label) => (\n            <Label key={label.id}>{label.name}</Label>\n          ))}\n        </LabelGroup>\n      </PageDetail>\n      <PageDetail label={t('Job tags')} isEmpty={!template.job_tags}>\n        <LabelGroup>\n          {template.job_tags.split(',')?.map((tag) => <Label key={tag}>{tag}</Label>)}\n        </LabelGroup>\n      </PageDetail>\n      <PageDetail label={t('Skip tags')} isEmpty={!template.skip_tags}>\n        <LabelGroup>\n          {template.skip_tags.split(',')?.map((tag) => <Label key={tag}>{tag}</Label>)}\n        </LabelGroup>\n      </PageDetail>\n      <PageDetailCodeEditor\n        label={t('Extra variables')}\n        value={template.extra_vars}\n        helpText={t(\n          'Pass extra command line variables to the playbook. This is the -e or --extra-vars command line parameter for ansible-playbook. Provide key/value pairs using either YAML or JSON. Refer to the documentation for example syntax.'\n        )}\n      />\n      <PageDetail\n        label={t('Enabled options')}\n        isEmpty={!showOptionsField}\n        helpText={\n          <>\n            <p>{t`Concurrent jobs: If enabled, simultaneous runs of this job template will be allowed.`}</p>\n            <p>{t`Fact storage: If enabled, this will store gathered facts so they can be viewed at the host level. Facts are persisted and injected into the fact cache at runtime.`}</p>\n            <p>{t`Privilege escalation: If enabled, run this playbook as an administrator.`}</p>\n            <p>{t`Provisioning callbacks: Enables creation of a provisioning callback URL. Using the URL a host can contact Ansible AWX and request a configuration update using this job template.`}</p>\n            <p>{t`Webhooks: Enable webhook for this template.`}</p>\n            <p>{t`Prevent Instance Group Fallback: If enabled, the job template will prevent adding any inventory or organization instance groups to the list of preferred instances groups to run on.`}</p>\n          </>\n        }\n      >\n        <TextList component={TextListVariants.ul}>\n          {template.become_enabled && (\n            <TextListItem component={TextListItemVariants.li}>\n              {t`Privilege Escalation`}\n            </TextListItem>\n          )}\n          {template.host_config_key && (\n            <TextListItem component={TextListItemVariants.li}>\n              {t`Provisioning Callbacks`}\n            </TextListItem>\n          )}\n          {template.allow_simultaneous && (\n            <TextListItem component={TextListItemVariants.li}>{t`Concurrent jobs`}</TextListItem>\n          )}\n          {template.use_fact_cache && (\n            <TextListItem component={TextListItemVariants.li}>{t`Fact storage`}</TextListItem>\n          )}\n          {template.webhook_service && (\n            <TextListItem component={TextListItemVariants.li}>{t`Webhooks`}</TextListItem>\n          )}\n          {template.prevent_instance_group_fallback && (\n            <TextListItem component={TextListItemVariants.li}>\n              {t`Prevent instance group fallback`}\n            </TextListItem>\n          )}\n        </TextList>\n      </PageDetail>\n    </PageDetails>\n  );\n}\n","import { useEffect } from 'react';\nimport type { TemplateLaunch } from '../TemplateLaunchWizard';\nimport { NodePromptsStep } from '../../WorkflowVisualizer/wizard/NodePromptsStep';\nimport { usePageWizard } from '../../../../../../framework/PageWizard/PageWizardProvider';\n\nexport function TemplateLaunchPromptStep(props: { defaultValues: TemplateLaunch }) {\n  const { setWizardData } = usePageWizard();\n\n  useEffect(() => {\n    setWizardData((prev: TemplateLaunch) => {\n      const hasPreviousPromptValues = prev?.prompt && Object.entries(prev?.prompt)?.length;\n\n      return {\n        ...props.defaultValues,\n        prompt: hasPreviousPromptValues ? prev.prompt : props.defaultValues.prompt,\n      };\n    });\n  }, [setWizardData, props.defaultValues]);\n\n  return <NodePromptsStep />;\n}\n","import { useTranslation } from 'react-i18next';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageHeader,\n  PageLayout,\n  PageWizard,\n  PageWizardStep,\n  useGetPageUrl,\n  usePageAlertToaster,\n} from '../../../../../framework';\nimport { yamlToJson } from '../../../../../framework/utils/codeEditorUtils';\nimport { useGet } from '../../../../common/crud/useGet';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { AwxError } from '../../../common/AwxError';\nimport { SurveyStep } from '../../../common/SurveyStep';\nimport { awxErrorAdapter } from '../../../common/adapters/awxErrorAdapter';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport type { JobTemplate } from '../../../interfaces/JobTemplate';\nimport type { LaunchConfiguration } from '../../../interfaces/LaunchConfiguration';\nimport type { UnifiedJob } from '../../../interfaces/UnifiedJob';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useGetJobOutputUrl } from '../../../views/jobs/useGetJobOutputUrl';\nimport { parseStringToTagArray } from '../JobTemplateFormHelpers';\nimport { useLabelPayload } from '../hooks/useLabelPayload';\nimport { TemplateLaunchPromptStep } from './steps/TemplateLaunchPromptStep';\nimport { PromptFormValues } from '../WorkflowVisualizer/types';\nimport { CredentialPasswordsStep, TemplateLaunchReviewStep } from './steps';\nimport { requestGet } from '../../../../common/crud/Data';\nimport { AwxItemsResponse } from '../../../common/AwxItemsResponse';\nimport { RequestError } from '../../../../common/crud/RequestError';\nimport { Credential } from '../../../interfaces/Credential';\nimport { shouldHideOtherStep } from '../WorkflowVisualizer/wizard/helpers';\n\nexport const formFieldToLaunchConfig = {\n  job_type: 'ask_job_type_on_launch',\n  inventory: 'ask_inventory_on_launch',\n  credentials: 'ask_credential_on_launch',\n  execution_environment: 'ask_execution_environment_on_launch',\n  instance_groups: 'ask_instance_groups_on_launch',\n  scm_branch: 'ask_scm_branch_on_launch',\n  forks: 'ask_forks_on_launch',\n  diff_mode: 'ask_diff_mode_on_launch',\n  job_slice: 'ask_job_slice_count_on_launch',\n  labels: 'ask_labels_on_launch',\n  limit: 'ask_limit_on_launch',\n  skip_tags: 'ask_skip_tags_on_launch',\n  job_tags: 'ask_tags_on_launch',\n  timeout: 'ask_timeout_on_launch',\n  extra_vars: 'ask_variables_on_launch',\n  verbosity: 'ask_verbosity_on_launch',\n};\n\nexport interface TemplateLaunch {\n  resource: JobTemplate;\n  prompt: PromptFormValues;\n  survey: { [key: string]: string | string[] };\n  credential_passwords: { [key: string]: string };\n  launch_config: LaunchConfiguration;\n}\n\ninterface LaunchPayload {\n  credentials: number[];\n  credential_passwords: { [key: string]: string };\n  diff_mode: boolean;\n  execution_environment: number;\n  extra_vars: string | { [key: string]: string | string[] };\n  forks: number;\n  instance_groups: number[];\n  inventory: number;\n  job_slice_count: number;\n  job_tags: string;\n  job_type: string;\n  labels: number[];\n  limit: string;\n  scm_branch: string;\n  skip_tags: string;\n  timeout: number;\n  verbosity: number;\n}\ntype LaunchPayloadProperty = keyof LaunchPayload;\n\nexport function LaunchTemplate({ jobType }: { jobType: string }) {\n  const { t } = useTranslation();\n  const postRequest = usePostRequest<Partial<LaunchPayload>, UnifiedJob>();\n  const createLabelPayload = useLabelPayload();\n\n  const alertToaster = usePageAlertToaster();\n\n  const navigate = useNavigate();\n  const params = useParams<{ id: string }>();\n  const resourceId = params.id?.toString() ?? '';\n  const {\n    data: template,\n    error: getTemplateError,\n    refresh: getTemplateRefresh,\n  } = useGet<JobTemplate>(awxAPI`/${jobType}/${resourceId}/`);\n  const {\n    data: config,\n    error: getLaunchError,\n    refresh: getLaunchRefresh,\n  } = useGet<LaunchConfiguration>(awxAPI`/${jobType}/${resourceId}/launch/`);\n  const error = getTemplateError || getLaunchError;\n  const refresh = getTemplateRefresh || getLaunchRefresh;\n  const getJobOutputUrl = useGetJobOutputUrl();\n\n  if (error) return <AwxError error={error} handleRefresh={refresh} />;\n  if (!config || !template) return <LoadingPage breadcrumbs tabs />;\n  const handleSubmit = async (formValues: TemplateLaunch) => {\n    if (formValues) {\n      const { credential_passwords = {}, prompt = undefined, survey } = formValues;\n\n      try {\n        const labelPayload = await createLabelPayload(prompt?.labels || [], template);\n\n        let payload: Partial<LaunchPayload> = {};\n        const setValue = <K extends LaunchPayloadProperty>(key: K, value: LaunchPayload[K]) => {\n          const isValid = typeof value !== 'undefined' && value !== null;\n          if (!isValid) {\n            return;\n          }\n\n          if (jobType === 'workflow_job_templates') {\n            if (\n              config[formFieldToLaunchConfig[key as keyof unknown] as keyof LaunchConfiguration] ||\n              config.survey_enabled\n            ) {\n              payload[key] = value;\n            }\n            return;\n          }\n\n          payload[key] = value;\n        };\n        if (prompt !== undefined) {\n          setValue(\n            'credentials',\n            (prompt?.credentials || []).map((cred) => Number(cred.id))\n          );\n          setValue('credential_passwords', credential_passwords);\n          setValue('diff_mode', prompt.diff_mode);\n          prompt?.execution_environment &&\n            setValue('execution_environment', prompt.execution_environment);\n          setValue('extra_vars', prompt?.extra_vars);\n          setValue('forks', prompt?.forks);\n          setValue(\n            'instance_groups',\n            prompt.instance_groups?.map(({ id }) => id)\n          );\n          prompt.inventory?.id && setValue('inventory', prompt.inventory?.id);\n          setValue('job_slice_count', prompt.job_slice_count);\n          setValue('job_tags', prompt.job_tags?.map((tag) => tag.name).join(','));\n          setValue('job_type', prompt.job_type);\n          setValue('limit', prompt.limit);\n          setValue('scm_branch', prompt.scm_branch);\n          setValue('skip_tags', prompt.skip_tags?.map((tag) => tag.name).join(','));\n          setValue('timeout', prompt.timeout);\n          setValue('verbosity', prompt.verbosity);\n        }\n        if (labelPayload.length > 0) {\n          setValue('labels', labelPayload);\n        }\n\n        if (config.survey_enabled && jobType === 'job_templates') {\n          const extraVarsObj = prompt?.extra_vars\n            ? (JSON.parse(yamlToJson(prompt?.extra_vars)) as object)\n            : {};\n          setValue('extra_vars', {\n            ...extraVarsObj,\n            ...survey,\n          });\n        }\n\n        if (jobType === 'workflow_job_templates') {\n          const extraVarsObj = prompt?.extra_vars\n            ? (JSON.parse(yamlToJson(prompt?.extra_vars)) as object)\n            : {};\n\n          payload = {\n            ...payload,\n            extra_vars: { ...extraVarsObj, ...survey },\n          };\n        }\n\n        const job = await postRequest(awxAPI`/${jobType}/${resourceId}/launch/`, payload);\n        if (job) {\n          navigate(getJobOutputUrl(job));\n        }\n      } catch (err) {\n        alertToaster.addAlert({\n          variant: 'danger',\n          title: t('Failure to launch'),\n          children: err instanceof Error && err.message,\n        });\n      }\n    }\n  };\n  return (\n    <LaunchWizard\n      template={template}\n      config={config}\n      handleSubmit={handleSubmit}\n      jobType={jobType}\n    />\n  );\n}\n\nexport function LaunchWizard({\n  template,\n  config,\n  handleSubmit,\n  jobType,\n}: {\n  template: JobTemplate;\n  config: LaunchConfiguration;\n  handleSubmit: (values: TemplateLaunch) => Promise<void>;\n  jobType: string;\n}) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const { defaults } = config;\n  const readOnlyLabels = defaults?.labels?.map((label) => ({\n    ...label,\n    isReadOnly: true,\n  }));\n\n  const initialValues = {\n    resource: template,\n    credential_passwords: {},\n    prompt: {\n      inventory: defaults.inventory.id ? defaults.inventory : null,\n      credentials: defaults?.credentials,\n      execution_environment: defaults.execution_environment?.id,\n      instance_groups: defaults.instance_groups,\n      diff_mode: defaults.diff_mode,\n      scm_branch: defaults.scm_branch,\n      extra_vars: defaults.extra_vars,\n      forks: defaults.forks,\n      job_slice_count: defaults.job_slice_count,\n      job_tags: parseStringToTagArray(defaults.job_tags),\n      job_type: defaults.job_type,\n      labels: readOnlyLabels,\n      limit: defaults.limit,\n      skip_tags: parseStringToTagArray(defaults.skip_tags),\n      timeout: defaults.timeout,\n      verbosity: defaults.verbosity,\n    },\n    launch_config: config,\n    survey: {},\n  };\n  const credentialVaultId = function (\n    selectedCredential:\n      | Credential\n      | {\n          id: number;\n          name: string;\n          credential_type: number;\n          passwords_needed?: string[];\n          vault_id?: string;\n        }\n  ) {\n    if (\n      selectedCredential &&\n      'inputs' in selectedCredential &&\n      'vault_id' in selectedCredential['inputs']\n    ) {\n      return selectedCredential.inputs.vault_id;\n    }\n    if (selectedCredential && 'vault_id' in selectedCredential) {\n      return selectedCredential.vault_id;\n    }\n    return undefined;\n  };\n\n  const steps: PageWizardStep[] = [\n    {\n      id: 'nodePromptsStep',\n      label: t('Prompts'),\n      inputs: <TemplateLaunchPromptStep defaultValues={initialValues} />,\n      hidden: () => shouldHideOtherStep(config),\n      validate: async (formData) => {\n        const missingCredentialTypes: string[] = [];\n        await requestGet<AwxItemsResponse<Credential>>(\n          awxAPI`/job_templates/${template.id?.toString()}/credentials/`\n        ).then(({ results: originalCredentials }) => {\n          const {\n            prompt: { credentials: selectedCredentials },\n          } = formData as TemplateLaunch;\n          if (originalCredentials.length > 0 && selectedCredentials) {\n            originalCredentials.forEach((originalCredential) => {\n              if (\n                !selectedCredentials.find((selectedCredential) => {\n                  const selectedCredentialVaultID = credentialVaultId(selectedCredential);\n                  const originalCredentialVaultID = credentialVaultId(originalCredential);\n                  return (\n                    (selectedCredential?.credential_type === originalCredential?.credential_type &&\n                      !selectedCredentialVaultID &&\n                      !originalCredentialVaultID) ||\n                    (originalCredentialVaultID &&\n                      selectedCredentialVaultID === originalCredentialVaultID)\n                  );\n                })\n              ) {\n                missingCredentialTypes.push(\n                  originalCredential?.inputs?.vault_id\n                    ? `${originalCredential?.summary_fields.credential_type.name} | ${originalCredential.inputs.vault_id}`\n                    : originalCredential?.summary_fields.credential_type.name\n                );\n              }\n            });\n          }\n          if (missingCredentialTypes.length > 0) {\n            const errors = {\n              __all__: [\n                t(\n                  `Job Template default credentials must be replaced with one of the same type.  Please select a credential for the following types in order to proceed: ${missingCredentialTypes.join(\n                    ', '\n                  )}`\n                ),\n              ],\n            };\n            throw new RequestError('', '', 400, '', errors);\n          }\n\n          return undefined;\n        });\n      },\n    },\n    {\n      id: 'credential_passwords',\n      label: t('Credential Passwords'),\n      hidden: (wizardValues: Partial<TemplateLaunch>) => {\n        const { prompt = {} } = wizardValues;\n        if (!prompt && !config) return true;\n        const credentials =\n          'credentials' in prompt\n            ? (wizardValues?.prompt?.credentials as Credential[])\n            : (config.defaults.credentials as unknown as Credential[]);\n\n        const launchConfigAsksCredentials = config.ask_credential_on_launch;\n        const launchConfigRequiresPasswords = config.passwords_needed_to_start?.length > 0;\n        if (!launchConfigAsksCredentials && launchConfigRequiresPasswords) {\n          // show step if the template requires passwords but doesn't prompt for credentials\n          return false;\n        }\n\n        const showCredentialPasswordsStep = credentials?.some((credential: Credential) => {\n          if (!credential.inputs) {\n            const launchConfigCredential = config.defaults.credentials?.find(\n              (defaultCred) => JSON.stringify(defaultCred.id) === JSON.stringify(credential.id)\n            );\n            return launchConfigCredential && launchConfigCredential?.passwords_needed?.length > 0;\n          }\n\n          const passwordInputs = [\n            'password',\n            'become_password',\n            'ssh_key_unlock',\n            'vault_password',\n          ];\n          return passwordInputs.some((inputName) => credential.inputs?.[inputName] === 'ASK');\n        });\n\n        return !showCredentialPasswordsStep;\n      },\n      inputs: <CredentialPasswordsStep<LaunchConfiguration> config={config} />,\n    },\n    {\n      id: 'survey',\n      label: t('Survey'),\n      hidden: () => !config?.survey_enabled,\n      inputs: <SurveyStep jobType={jobType} templateId={template.id.toString()} />,\n    },\n    {\n      id: 'review',\n      label: t('Review'),\n      element: <TemplateLaunchReviewStep template={template} />,\n    },\n  ];\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Prompt on Launch')}\n        breadcrumbs={[\n          { label: t('Templates'), to: getPageUrl(AwxRoute.Templates) },\n          {\n            label: template.name,\n            to: getPageUrl(AwxRoute.JobTemplateDetails, { params: { id: template.id } }),\n          },\n        ]}\n      />\n      <PageWizard<TemplateLaunch>\n        steps={steps}\n        defaultValue={initialValues}\n        onSubmit={handleSubmit}\n        errorAdapter={awxErrorAdapter}\n      />\n    </PageLayout>\n  );\n}\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { usePageAlertToaster } from '../../../../../framework';\nimport { requestGet } from '../../../../common/crud/Data';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { AwxItemsResponse } from '../../../common/AwxItemsResponse';\n\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport type { JobTemplate } from '../../../interfaces/JobTemplate';\nimport type { Label } from '../../../interfaces/Label';\nimport type { Organization } from '../../../interfaces/Organization';\n\ntype LabelPayload = (\n  labels: { name: string; id?: number }[],\n  template: JobTemplate\n) => Promise<number[]>;\n\nexport function useLabelPayload() {\n  const { t } = useTranslation();\n  const alertToaster = usePageAlertToaster();\n  const postRequest = usePostRequest<{ name: string; organization: number }, Label>();\n\n  return useCallback<LabelPayload>(\n    async (labels: { name: string; id?: number }[], template: JobTemplate) => {\n      let createdLabels: Label[] = [];\n      let organizationId = template?.summary_fields?.organization?.id;\n      const existingLabels = labels.filter((label) => label.id);\n      const newLabels = labels.filter((label) => !label.id);\n\n      try {\n        if (!organizationId) {\n          const data = await requestGet<AwxItemsResponse<Organization>>(awxAPI`/organizations/`);\n          organizationId = data.results[0].id;\n        }\n\n        const labelRequests = [];\n        for (const label of newLabels || []) {\n          labelRequests.push(\n            postRequest(awxAPI`/labels/`, {\n              name: label.name,\n              organization: organizationId,\n            })\n          );\n        }\n\n        createdLabels = await Promise.all(labelRequests);\n      } catch (err) {\n        alertToaster.addAlert({\n          variant: 'danger',\n          title: t('Failed to create new label'),\n          children: err instanceof Error && err.message,\n        });\n      }\n\n      const labelIds = [...existingLabels, ...createdLabels]\n        .map((label) => label.id)\n        .filter((id) => typeof id === 'number' && !isNaN(id)) as number[];\n\n      return labelIds;\n    },\n    [t, alertToaster, postRequest]\n  );\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  PageActions,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { LoadingPage } from '../../../../../framework/components/LoadingPage';\nimport { PageRoutedTabs } from '../../../../common/PageRoutedTabs';\nimport { useGet, useGetItem } from '../../../../common/crud/useGet';\nimport { useViewActivityStream } from '../../../access/common/useViewActivityStream';\nimport { AwxError } from '../../../common/AwxError';\nimport { AwxItemsResponse } from '../../../common/AwxItemsResponse';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxActiveUser } from '../../../common/useAwxActiveUser';\nimport { JobTemplate } from '../../../interfaces/JobTemplate';\nimport { Organization } from '../../../interfaces/Organization';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useTemplateActions } from '../hooks/useTemplateActions';\n\nexport function TemplatePage() {\n  const { t } = useTranslation();\n  const activityStream = useViewActivityStream(\n    'job_template+workflow_job_template+workflow_job_template_node'\n  );\n\n  const { activeAwxUser } = useAwxActiveUser();\n  const params = useParams<{ id: string }>();\n  const {\n    error: templateError,\n    data: template,\n    isLoading: isTemplateLoading,\n    refresh,\n  } = useGetItem<JobTemplate>(awxAPI`/job_templates`, params.id);\n  const {\n    data: isNotifAdmin,\n    error: isNotifAdminError,\n    refresh: refreshNotifAdmin,\n    isLoading: isNotifAdminLoading,\n  } = useGet<AwxItemsResponse<Organization>>(\n    awxAPI`/organizations/?role_level=notification_admin_role`\n  );\n  const getPageUrl = useGetPageUrl();\n  const pageNavigate = usePageNavigate();\n  const itemActions = useTemplateActions({\n    onTemplatesDeleted: () => pageNavigate(AwxRoute.Templates),\n  });\n\n  const error = isNotifAdminError || templateError;\n  const tabs: { label: string; page: string }[] = useMemo(() => {\n    const tabs = [\n      { label: t('Details'), page: AwxRoute.JobTemplateDetails },\n      { label: t('Team Access'), page: AwxRoute.JobTemplateTeamAccess },\n      { label: t('User Access'), page: AwxRoute.JobTemplateUserAccess },\n      { label: t('Schedules'), page: AwxRoute.JobTemplateSchedules },\n      { label: t('Jobs'), page: AwxRoute.JobTemplateJobs },\n      { label: t('Survey'), page: AwxRoute.JobTemplateSurvey },\n    ];\n    if (activeAwxUser?.is_system_auditor || (isNotifAdmin && isNotifAdmin.results.length > 0)) {\n      tabs.push({ label: t('Notifications'), page: AwxRoute.JobTemplateNotifications });\n    }\n    return tabs;\n  }, [t, activeAwxUser, isNotifAdmin]);\n  if (error) return <AwxError error={error} handleRefresh={refresh || refreshNotifAdmin} />;\n  if (isTemplateLoading || isNotifAdminLoading) return <LoadingPage breadcrumbs tabs />;\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={template?.name}\n        breadcrumbs={[\n          { label: t('Templates'), to: getPageUrl(AwxRoute.Templates) },\n          { label: template?.name },\n        ]}\n        headerActions={\n          <PageActions<JobTemplate>\n            actions={[...activityStream, ...itemActions]}\n            position={DropdownPosition.right}\n            selectedItem={template}\n          />\n        }\n      />\n      <PageRoutedTabs\n        backTab={{\n          label: t('Back to Templates'),\n          page: AwxRoute.Templates,\n          persistentFilterKey: 'templates',\n        }}\n        tabs={tabs}\n        params={{ id: template?.id }}\n        componentParams={{ template }}\n      />\n    </PageLayout>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { PageHeader, PageLayout } from '../../../../framework';\nimport { usePersistentFilters } from '../../../common/PersistentFilters';\nimport { useAwxConfig } from '../../common/useAwxConfig';\nimport { useGetDocsUrl } from '../../common/util/useGetDocsUrl';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { TemplatesList } from './TemplatesList';\nimport { ActivityStreamIcon } from '../../common/ActivityStreamIcon';\n\nexport function Templates() {\n  const { t } = useTranslation();\n\n  usePersistentFilters('templates');\n  const config = useAwxConfig();\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Templates')}\n        titleHelpTitle={t('Templates')}\n        titleHelp={t(\n          'A job template is a definition and set of parameters for running an Ansible job. Job templates are useful to execute the same job many times. Job templates also encourage the reuse of Ansible playbook content and collaboration between teams.'\n        )}\n        titleDocLink={useGetDocsUrl(config, 'templates')}\n        description={t(\n          'A job template is a definition and set of parameters for running an Ansible job.'\n        )}\n        headerActions={\n          <ActivityStreamIcon\n            type={'job_template+workflow_job_template+workflow_job_template_node'}\n          />\n        }\n      />\n      <TemplatesList url={awxAPI`/unified_job_templates/`} />\n    </PageLayout>\n  );\n}\n","import { useEffect } from 'react';\nimport { useFormContext, useWatch } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { PageFormCheckbox, PageFormDataEditor, PageFormTextInput } from '../../../../framework';\nimport { PageFormCreatableSelect } from '../../../../framework/PageForm/Inputs/PageFormCreatableSelect';\nimport { PageFormSection } from '../../../../framework/PageForm/Utils/PageFormSection';\nimport { PageFormSelectOrganization } from '../../access/organizations/components/PageFormOrganizationSelect';\nimport { PageFormLabelSelect } from '../../common/PageFormLabelSelect';\nimport { WorkflowJobTemplateForm } from '../../interfaces/WorkflowJobTemplate';\nimport { PageFormInventorySelect } from '../inventories/components/PageFormInventorySelect';\nimport { WebhookSubForm } from './components/WebhookSubForm';\n\nexport function WorkflowJobTemplateInputs(props: {\n  workflowJobTemplate?: WorkflowJobTemplateForm;\n}) {\n  const { workflowJobTemplate } = props;\n  const { setValue } = useFormContext<WorkflowJobTemplateForm>();\n  const isWebhookEnabled = useWatch<WorkflowJobTemplateForm>({ name: 'isWebhookEnabled' });\n  useEffect(() => {\n    if (!isWebhookEnabled) {\n      setValue('webhook_service', undefined);\n      setValue('webhook_credential', null);\n    }\n  }, [isWebhookEnabled, setValue]);\n  const { t } = useTranslation();\n  return (\n    <>\n      <PageFormTextInput<WorkflowJobTemplateForm>\n        name=\"name\"\n        label={t('Name')}\n        isRequired\n        placeholder={t('Add a name for this workflow job template')}\n      />\n      <PageFormTextInput<WorkflowJobTemplateForm>\n        name=\"description\"\n        label={t('Description')}\n        placeholder={t('Add a description for this workflow job template')}\n      />\n      <PageFormSelectOrganization<WorkflowJobTemplateForm> name=\"organization\" />\n      <PageFormInventorySelect<WorkflowJobTemplateForm>\n        additionalControls={\n          <PageFormCheckbox label={t('Prompt on launch')} name=\"ask_inventory_on_launch\" />\n        }\n        name=\"inventory\"\n      />\n      <PageFormTextInput<WorkflowJobTemplateForm>\n        placeholder={t('Add a limit to reduce number of hosts.')}\n        additionalControls={\n          <PageFormCheckbox label={t('Prompt on launch')} name=\"ask_limit_on_launch\" />\n        }\n        name=\"limit\"\n        labelHelpTitle={t('Limit')}\n        labelHelp={t(\n          'Provide a host pattern to further constrain the list of hosts that will be managed or affected by the playbook. Multiple patterns are allowed. Refer to Ansible documentation for more information and examples on patterns.'\n        )}\n        label={t('Limit')}\n      />\n      <PageFormTextInput<WorkflowJobTemplateForm>\n        name=\"scm_branch\"\n        placeholder={t('Add a source control branch')}\n        labelHelpTitle={t('Source control branch')}\n        labelHelp={t(\n          'Branch to use in job run. Project default used if blank. Only allowed if project allow_override field is set to true.'\n        )}\n        additionalControls={\n          <PageFormCheckbox label={t('Prompt on launch')} name=\"ask_scm_branch_on_launch\" />\n        }\n        label={t('Source control branch')}\n      />\n\n      <PageFormLabelSelect<WorkflowJobTemplateForm>\n        labelHelpTitle={t('Labels')}\n        labelHelp={t(\n          `Optional labels that describe this job template, such as 'dev' or 'test'. Labels can be used to group and filter job templates and completed jobs.`\n        )}\n        name=\"labels\"\n        additionalControls={\n          <PageFormCheckbox label={t('Prompt on launch')} name=\"ask_labels_on_launch\" />\n        }\n      />\n      <PageFormCreatableSelect<WorkflowJobTemplateForm>\n        labelHelpTitle={t('Job tags')}\n        labelHelp={t(\n          'Tags are useful when you have a large playbook, and you want to run a specific part of a play or task. Use commas to separate multiple tags. Refer to the documentation for details on the usage of tags.'\n        )}\n        name=\"job_tags\"\n        additionalControls={\n          <PageFormCheckbox label={t('Prompt on launch')} name=\"ask_tags_on_launch\" />\n        }\n        placeholderText={t('Select or create job tags')}\n        label={t('Job tags')}\n        options={workflowJobTemplate?.job_tags ?? [{ value: '', label: '' }]}\n      />\n      <PageFormCreatableSelect<WorkflowJobTemplateForm>\n        labelHelpTitle={t('Skip tags')}\n        labelHelp={t(\n          'Skip tags are useful when you have a large playbook, and you want to skip specific parts of a play or task. Use commas to separate multiple tags. Refer to the documentation for details on the usage of tags.'\n        )}\n        additionalControls={\n          <PageFormCheckbox label={t('Prompt on launch')} name=\"ask_skip_tags_on_launch\" />\n        }\n        name=\"skip_tags\"\n        placeholderText={t('Select or create skip tags')}\n        label={t('Skip tags')}\n        options={workflowJobTemplate?.skip_tags ?? [{ value: '', label: '' }]}\n      />\n      <PageFormSection singleColumn>\n        <PageFormDataEditor<WorkflowJobTemplateForm>\n          additionalControls={\n            <PageFormCheckbox label={t('Prompt on launch')} name=\"ask_variables_on_launch\" />\n          }\n          labelHelpTitle={t('Extra Variables')}\n          labelHelp={t(`Optional extra variables to be applied to job template.`)}\n          format=\"yaml\"\n          label={t('Extra variables')}\n          name=\"extra_vars\"\n        />\n      </PageFormSection>\n      <PageFormSection title={t('Options')}>\n        <PageFormCheckbox<WorkflowJobTemplateForm>\n          label={t('Enable webhook')}\n          name=\"isWebhookEnabled\"\n        />\n        <PageFormCheckbox<WorkflowJobTemplateForm>\n          label={t('Enable concurrent jobs')}\n          name=\"allow_simultaneous\"\n        />\n      </PageFormSection>\n\n      {isWebhookEnabled ? <WebhookSubForm templateType=\"workflow_job_templates\" /> : null}\n    </>\n  );\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport { useSWRConfig } from 'swr';\nimport {\n  PageFormSubmitHandler,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { LoadingPage } from '../../../../framework/components/LoadingPage';\nimport { postRequest, requestGet, requestPatch } from '../../../common/crud/Data';\nimport { useGet } from '../../../common/crud/useGet';\nimport { usePostRequest } from '../../../common/crud/usePostRequest';\nimport { AwxError } from '../../common/AwxError';\nimport { AwxItemsResponse } from '../../common/AwxItemsResponse';\nimport { AwxPageForm } from '../../common/AwxPageForm';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { getAddedAndRemoved } from '../../common/util/getAddedAndRemoved';\nimport { Label } from '../../interfaces/Label';\nimport { Organization } from '../../interfaces/Organization';\nimport {\n  WorkflowJobTemplate,\n  WorkflowJobTemplateCreate,\n  WorkflowJobTemplateForm,\n} from '../../interfaces/WorkflowJobTemplate';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { parseStringToTagArray, stringifyTags } from './JobTemplateFormHelpers';\nimport { WorkflowJobTemplateInputs } from './WorkflowJobTemplateInputs';\n\nexport function EditWorkflowJobTemplate() {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const getPageUrl = useGetPageUrl();\n  const params = useParams<{ id?: string }>();\n\n  const id = Number(params.id);\n  const {\n    data: workflowJobTemplate,\n    error: wfjtError,\n    refresh: wfjtRefresh,\n    isLoading: isWfjtLoading,\n  } = useGet<WorkflowJobTemplate>(awxAPI`/workflow_job_templates/${id.toString()}/`);\n\n  const onSubmit: PageFormSubmitHandler<WorkflowJobTemplateForm> = async (\n    values: WorkflowJobTemplateForm\n  ) => {\n    const { labels, ...rest } = values;\n\n    await requestPatch<WorkflowJobTemplateForm>(awxAPI`/workflow_job_templates/${id.toString()}/`, {\n      ...rest,\n      inventory: values.inventory?.id || null,\n      job_tags: stringifyTags(values.job_tags) ?? '',\n      organization: values?.organization,\n      skip_tags: stringifyTags(values.skip_tags) ?? '',\n      webhook_credential: values.webhook_credential?.id || null,\n      webhook_service: values.webhook_service || '',\n    });\n    (cache as unknown as { clear: () => void }).clear?.();\n\n    await submitLabels(workflowJobTemplate as WorkflowJobTemplate, labels);\n    pageNavigate(AwxRoute.WorkflowJobTemplateDetails, { params: { id: id.toString() } });\n  };\n\n  const defaultValues = useMemo(() => {\n    if (!workflowJobTemplate) return;\n    return {\n      allow_simultaneous: workflowJobTemplate.allow_simultaneous || false,\n      ask_inventory_on_launch: workflowJobTemplate.ask_inventory_on_launch || false,\n      ask_labels_on_launch: workflowJobTemplate.ask_labels_on_launch || false,\n      ask_limit_on_launch: workflowJobTemplate.ask_limit_on_launch || false,\n      ask_scm_branch_on_launch: workflowJobTemplate.ask_scm_branch_on_launch || false,\n      ask_skip_tags_on_launch: workflowJobTemplate.ask_skip_tags_on_launch || false,\n      ask_tags_on_launch: workflowJobTemplate.ask_tags_on_launch || false,\n      ask_variables_on_launch: workflowJobTemplate.ask_variables_on_launch || false,\n      description: workflowJobTemplate.description || '',\n      extra_vars: workflowJobTemplate.extra_vars || '---',\n      inventory: workflowJobTemplate.summary_fields.inventory || null,\n      isWebhookEnabled: Boolean(workflowJobTemplate.related?.webhook_receiver),\n      job_tags: parseStringToTagArray(workflowJobTemplate.job_tags || ''),\n      organization: workflowJobTemplate?.organization || null,\n      labels: workflowJobTemplate.summary_fields?.labels?.results || [],\n      limit: workflowJobTemplate.limit || '',\n      name: workflowJobTemplate.name || '',\n      scm_branch: workflowJobTemplate.scm_branch || '',\n      skip_tags: parseStringToTagArray(workflowJobTemplate.skip_tags || ''),\n      webhook_credential: workflowJobTemplate.summary_fields.webhook_credential || null,\n      webhook_key: t('a new webhook key will be generated on save.').toUpperCase(),\n      webhook_url: workflowJobTemplate.related?.webhook_receiver\n        ? `${document.location.origin}${workflowJobTemplate.related.webhook_receiver}`\n        : t('a new webhook url will be generated on save.').toUpperCase(),\n      webhook_receiver: workflowJobTemplate.related.webhook_receiver,\n      webhook_service: workflowJobTemplate.webhook_service || '',\n    };\n  }, [t, workflowJobTemplate]);\n  const { cache } = useSWRConfig();\n\n  if (wfjtError instanceof Error) {\n    return <AwxError error={wfjtError} handleRefresh={wfjtRefresh} />;\n  }\n  if (isWfjtLoading) return <LoadingPage />;\n  return (\n    <PageLayout>\n      <PageHeader\n        title={\n          workflowJobTemplate?.name\n            ? t('Edit {{workflowjobtemplateName}}', {\n                workflowjobtemplateName: workflowJobTemplate?.name,\n              })\n            : t('Workflow Job Template')\n        }\n        breadcrumbs={[\n          { label: t('Templates'), to: getPageUrl(AwxRoute.Templates) },\n          {\n            label: workflowJobTemplate?.name\n              ? t('Edit {{workflowjobtemplateName}}', {\n                  workflowjobtemplateName: workflowJobTemplate?.name,\n                })\n              : t('Workflow Job Template'),\n          },\n        ]}\n      />\n      <AwxPageForm<WorkflowJobTemplateForm>\n        submitText={t('Save workflow job template')}\n        onSubmit={onSubmit}\n        onCancel={() => pageNavigate(AwxRoute.WorkflowJobTemplateDetails, { params: { id } })}\n        defaultValue={defaultValues}\n      >\n        <WorkflowJobTemplateInputs workflowJobTemplate={defaultValues} />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n\nexport function CreateWorkflowJobTemplate() {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const postRequest = usePostRequest<WorkflowJobTemplateCreate, WorkflowJobTemplate>();\n\n  const onSubmit: PageFormSubmitHandler<WorkflowJobTemplateForm> = async (values) => {\n    const { labels, webhook_credential, ...rest } = values;\n\n    const template = await postRequest(awxAPI`/workflow_job_templates/`, {\n      ...rest,\n      inventory: values.inventory?.id,\n      job_tags: stringifyTags(values.job_tags || ''),\n      organization: (values?.organization as number) || undefined,\n      skip_tags: stringifyTags(values.skip_tags || ''),\n      webhook_credential: webhook_credential?.id ?? null,\n    });\n\n    await submitLabels(template, labels);\n\n    pageNavigate(AwxRoute.WorkflowVisualizer, {\n      params: { id: template.id.toString() },\n    });\n  };\n\n  const defaultValues = useMemo(\n    () => ({\n      job_tags: parseStringToTagArray('') || [],\n      skip_tags: parseStringToTagArray('') || [],\n      extra_vars: '---\\n',\n      webhook_key: t('a new webhook key will be generated on save.').toUpperCase(),\n      webhook_url: t('a new webhook url will be generated on save.').toUpperCase(),\n    }),\n    [t]\n  );\n\n  const getPageUrl = useGetPageUrl();\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Create workflow job template')}\n        breadcrumbs={[\n          { label: t('Templates'), to: getPageUrl(AwxRoute.Templates) },\n          { label: t('Create workflow job template') },\n        ]}\n      />\n      <AwxPageForm<WorkflowJobTemplateForm>\n        submitText={t('Create workflow job template')}\n        onSubmit={onSubmit}\n        onCancel={() => pageNavigate(AwxRoute.Templates)}\n        defaultValue={defaultValues}\n      >\n        <WorkflowJobTemplateInputs />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n\nasync function submitLabels(\n  template: WorkflowJobTemplate,\n  labels: { id: number; name: string }[] | []\n) {\n  const { added, removed } = getAddedAndRemoved(\n    template.summary_fields?.labels?.results || ([] as Label[]),\n    labels ?? ([] as Label[])\n  );\n\n  let orgId = template?.organization;\n  if (!template.summary_fields?.organization?.id) {\n    // eslint-disable-next-line no-useless-catch\n    try {\n      const data = await requestGet<AwxItemsResponse<Organization>>(awxAPI`/organizations/`);\n      orgId = data.results[0].id;\n    } catch (err) {\n      throw err;\n    }\n  }\n  const disassociationPromises = removed.map((label: { id: number }) =>\n    postRequest(awxAPI`/workflow_job_templates/${template.id.toString()}/labels/`, {\n      id: label.id,\n      disassociate: true,\n    })\n  );\n  const associationPromises = added.map((label: { name: string }) =>\n    postRequest(awxAPI`/workflow_job_templates/${template.id.toString()}/labels/`, {\n      name: label.name,\n      organization: orgId,\n    })\n  );\n\n  const results = await Promise.all([...disassociationPromises, ...associationPromises]);\n  return results;\n}\n","import {\n  Label,\n  LabelGroup,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useNavigate, useParams } from 'react-router-dom';\nimport { LoadingPage, PageDetail, PageDetails, useGetPageUrl } from '../../../../../framework';\nimport { PageDetailCodeEditor } from '../../../../../framework/PageDetails/PageDetailCodeEditor';\nimport { LastModifiedPageDetail } from '../../../../common/LastModifiedPageDetail';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { AwxError } from '../../../common/AwxError';\nimport { CredentialLabel } from '../../../common/CredentialLabel';\nimport { UserDateDetail } from '../../../common/UserDateDetail';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { WorkflowJobTemplate } from '../../../interfaces/WorkflowJobTemplate';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { WebhookService } from '../components/WebhookService';\n\nexport function WorkflowJobTemplateDetails(props: {\n  templateId?: string;\n  disableScroll?: boolean;\n}) {\n  const { t } = useTranslation();\n  const params = useParams<{ id: string }>();\n  const urlId = props?.templateId ? props.templateId : params.id;\n  const {\n    data: template,\n    error,\n    refresh,\n  } = useGetItem<WorkflowJobTemplate>(awxAPI`/workflow_job_templates/`, urlId);\n  const getPageUrl = useGetPageUrl();\n  const history = useNavigate();\n  if (error) return <AwxError error={error} handleRefresh={refresh} />;\n  if (!template) return <LoadingPage breadcrumbs tabs />;\n\n  const { summary_fields: summaryFields } = template;\n\n  const showOptionsField = template.allow_simultaneous || template.webhook_service;\n\n  const inventoryUrlPaths: { [key: string]: string } = {\n    '': 'inventory',\n    smart: 'smart_inventory',\n    constructed: 'constructed_inventory',\n  };\n\n  return (\n    <PageDetails disableScroll={props.disableScroll}>\n      <PageDetail label={t('Name')}>\n        {props.templateId ? (\n          <Link\n            to={getPageUrl(AwxRoute.WorkflowJobTemplateDetails, {\n              params: { id: props.templateId },\n            })}\n          >\n            {template.name}\n          </Link>\n        ) : (\n          template.name\n        )}\n      </PageDetail>\n      <PageDetail label={t('Description')}>{template.description}</PageDetail>\n      <PageDetail label={t('Organization')} isEmpty={!summaryFields.organization}>\n        <Link\n          to={getPageUrl(AwxRoute.OrganizationDetails, {\n            params: { id: summaryFields.organization?.id },\n          })}\n        >\n          {summaryFields.organization?.name}\n        </Link>\n      </PageDetail>\n      <PageDetail label={t('Inventory')} isEmpty={!summaryFields.inventory}>\n        {summaryFields.inventory ? (\n          <Link\n            to={getPageUrl(AwxRoute.InventoryDetails, {\n              params: {\n                id: summaryFields.inventory?.id,\n                inventory_type: inventoryUrlPaths[summaryFields.inventory.kind],\n              },\n            })}\n          >\n            {summaryFields.inventory?.name}\n          </Link>\n        ) : null}\n      </PageDetail>\n\n      <PageDetail label={t('Webhook service')} isEmpty={!template.webhook_service}>\n        <WebhookService service={template.webhook_service} />\n      </PageDetail>\n      {summaryFields.webhook_credential && (\n        <PageDetail label={t('Webhook credential')} isEmpty={!summaryFields.webhook_credential}>\n          <CredentialLabel credential={summaryFields?.webhook_credential} />\n        </PageDetail>\n      )}\n      <UserDateDetail\n        label={t('Created')}\n        date={template.created}\n        user={template.summary_fields.created_by}\n      />\n      <LastModifiedPageDetail\n        value={template.modified}\n        author={template.summary_fields.modified_by?.username}\n        onClick={() =>\n          history(\n            getPageUrl(AwxRoute.UserDetails, {\n              params: { id: (template.summary_fields?.modified_by?.id ?? 0).toString() },\n            })\n          )\n        }\n      />\n      <PageDetail label={t('Labels')} isEmpty={!summaryFields.labels?.results?.length}>\n        <LabelGroup>\n          {summaryFields.labels.results.map((label) => (\n            <Label key={label.id}>{label.name}</Label>\n          ))}\n        </LabelGroup>\n      </PageDetail>\n      <PageDetail label={t('Job tags')} isEmpty={!template.job_tags}>\n        <LabelGroup>\n          {template.job_tags?.split(',').map((tag) => <Label key={tag}>{tag}</Label>)}\n        </LabelGroup>\n      </PageDetail>\n      <PageDetail label={t('Skip tags')} isEmpty={!template.skip_tags}>\n        <LabelGroup>\n          {template.skip_tags?.split(',').map((tag) => <Label key={tag}>{tag}</Label>)}\n        </LabelGroup>\n      </PageDetail>\n      <PageDetailCodeEditor label={t('Extra vars')} value={template.extra_vars} />\n      <PageDetail label={t('Enabled options')} isEmpty={!showOptionsField}>\n        <TextList component={TextListVariants.ul}>\n          {template.allow_simultaneous && (\n            <TextListItem component={TextListItemVariants.li}>{t`Concurrent jobs`}</TextListItem>\n          )}\n          {template.webhook_service && (\n            <TextListItem component={TextListItemVariants.li}>{t`Webhooks`}</TextListItem>\n          )}\n        </TextList>\n      </PageDetail>\n    </PageDetails>\n  );\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  PageActions,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { LoadingPage } from '../../../../../framework/components/LoadingPage';\nimport { PageRoutedTabs } from '../../../../common/PageRoutedTabs';\nimport { useGet, useGetItem } from '../../../../common/crud/useGet';\nimport { useViewActivityStream } from '../../../access/common/useViewActivityStream';\nimport { AwxError } from '../../../common/AwxError';\nimport { AwxItemsResponse } from '../../../common/AwxItemsResponse';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxActiveUser } from '../../../common/useAwxActiveUser';\nimport { Organization } from '../../../interfaces/Organization';\nimport { WorkflowJobTemplate } from '../../../interfaces/WorkflowJobTemplate';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useTemplateActions } from '../hooks/useTemplateActions';\n\nexport function WorkflowJobTemplatePage() {\n  const { t } = useTranslation();\n  const activityStream = useViewActivityStream(\n    'job_template+workflow_job_template+workflow_job_template_node'\n  );\n  const params = useParams<{ id: string }>();\n  const { activeAwxUser } = useAwxActiveUser();\n  const {\n    error: templateError,\n    data: template,\n    isLoading: isTemplateLoading,\n    refresh,\n  } = useGetItem<WorkflowJobTemplate>(awxAPI`/workflow_job_templates`, params.id);\n\n  const {\n    data: isNotifAdmin,\n    error: isNotifAdminError,\n    refresh: refreshNotifAdmin,\n    isLoading: isNotifAdminLoading,\n  } = useGet<AwxItemsResponse<Organization>>(\n    awxAPI`/organizations/?role_level=notification_admin_role`\n  );\n  const getPageUrl = useGetPageUrl();\n  const pageNavigate = usePageNavigate();\n  const itemActions = useTemplateActions({\n    onTemplatesDeleted: () => pageNavigate(AwxRoute.Templates),\n  });\n  const error = isNotifAdminError || templateError;\n\n  const tabs: ({ label: string; page: string } | false)[] = useMemo(\n    () => [\n      { label: t('Details'), page: AwxRoute.WorkflowJobTemplateDetails },\n      { label: t('Team Access'), page: AwxRoute.WorkflowJobTemplateTeamAccess },\n      { label: t('User Access'), page: AwxRoute.WorkflowJobTemplateUserAccess },\n      { label: t('Schedules'), page: AwxRoute.WorkflowJobTemplateSchedules },\n      { label: t('Jobs'), page: AwxRoute.WorkflowJobTemplateJobs },\n      { label: t('Survey'), page: AwxRoute.WorkflowJobTemplateSurvey },\n      activeAwxUser?.is_system_auditor || (isNotifAdmin && isNotifAdmin.results.length > 0)\n        ? { label: t('Notifications'), page: AwxRoute.WorkflowJobTemplateNotifications }\n        : false,\n    ],\n\n    [t, activeAwxUser, isNotifAdmin]\n  );\n\n  if (error) return <AwxError error={error} handleRefresh={refresh || refreshNotifAdmin} />;\n  if (!template || isTemplateLoading || isNotifAdminLoading)\n    return <LoadingPage breadcrumbs tabs />;\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={template?.name}\n        breadcrumbs={[\n          { label: t('Templates'), to: getPageUrl(AwxRoute.Templates) },\n          { label: template?.name },\n        ]}\n        headerActions={\n          <PageActions<WorkflowJobTemplate>\n            actions={[...activityStream, ...itemActions]}\n            position={DropdownPosition.right}\n            selectedItem={template}\n          />\n        }\n      />\n      <PageRoutedTabs\n        backTab={{\n          label: t('Back to Templates'),\n          page: AwxRoute.Templates,\n          persistentFilterKey: 'templates',\n        }}\n        tabs={tabs}\n        params={{ id: template.id }}\n        componentParams={{ template }}\n      />\n    </PageLayout>\n  );\n}\n","import { useParams } from 'react-router-dom';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { TeamAccess } from '../../../../common/access/components/TeamAccess';\n\nexport function WorkflowJobTemplateTeamAccess() {\n  const params = useParams<{ id: string }>();\n  return (\n    <TeamAccess\n      service=\"awx\"\n      id={params.id || ''}\n      type={'workflowjobtemplate'}\n      addRolesRoute={AwxRoute.WorkflowJobTemplateAddTeams}\n    />\n  );\n}\n","import { useParams } from 'react-router-dom';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { UserAccess } from '../../../../common/access/components/UserAccess';\n\nexport function WorkflowJobTemplateUserAccess() {\n  const params = useParams<{ id: string }>();\n  return (\n    <UserAccess\n      service=\"awx\"\n      id={params.id || ''}\n      type={'workflowjobtemplate'}\n      addRolesRoute={AwxRoute.WorkflowJobTemplateAddUsers}\n    />\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageHeader,\n  PageLayout,\n  PageWizard,\n  PageWizardStep,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { AwxSelectTeamsStep } from '../../access/common/AwxRolesWizardSteps/AwxSelectTeamsStep';\nimport { Team } from '../../interfaces/Team';\nimport { AwxSelectRolesStep } from '../../access/common/AwxRolesWizardSteps/AwxSelectRolesStep';\nimport { useGet } from '../../../common/crud/useGet';\nimport { WorkflowJobTemplate } from '../../interfaces/WorkflowJobTemplate';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { postRequest } from '../../../common/crud/Data';\nimport { RoleAssignmentsReviewStep } from '../../../common/access/RolesWizard/steps/RoleAssignmentsReviewStep';\nimport { Role } from '../../interfaces/Role';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { awxErrorAdapter } from '../../common/adapters/awxErrorAdapter';\nimport { useAwxBulkActionDialog } from '../../common/useAwxBulkActionDialog';\n\ninterface WizardFormValues {\n  teams: Team[];\n  awxRoles: Role[];\n}\n\ninterface TeamRolePair {\n  team: Team;\n  role: Role;\n}\n\nexport function WorkflowJobTemplateAddTeams() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const params = useParams<{ id: string }>();\n  const pageNavigate = usePageNavigate();\n  const { data: template, isLoading } = useGet<WorkflowJobTemplate>(\n    awxAPI`/workflow_job_templates/${params.id ?? ''}/`\n  );\n  const teamRoleProgressDialog = useAwxBulkActionDialog<TeamRolePair>();\n\n  if (isLoading || !template) return <LoadingPage />;\n\n  const steps: PageWizardStep[] = [\n    {\n      id: 'teams',\n      label: t('Select team(s)'),\n      inputs: (\n        <AwxSelectTeamsStep\n          descriptionForTeamsSelection={t(\n            'Select the team(s) that you want to give access to {{templateName}}.',\n            {\n              templateName: template?.name,\n            }\n          )}\n        />\n      ),\n      validate: (formData, _) => {\n        const { teams } = formData as WizardFormValues;\n        if (!teams?.length) {\n          throw new Error(t('Select at least one team.'));\n        }\n      },\n    },\n    {\n      id: 'roles',\n      label: t('Select roles to apply'),\n      inputs: (\n        <AwxSelectRolesStep\n          contentType=\"workflowjobtemplate\"\n          fieldNameForPreviousStep=\"teams\"\n          descriptionForRoleSelection={t('Choose roles to apply to {{templateName}}.', {\n            templateName: template?.name,\n          })}\n        />\n      ),\n      validate: (formData, _) => {\n        const { awxRoles } = formData as WizardFormValues;\n        if (!awxRoles?.length) {\n          throw new Error(t('Select at least one role.'));\n        }\n      },\n    },\n    {\n      id: 'review',\n      label: t('Review'),\n      inputs: <RoleAssignmentsReviewStep />,\n    },\n  ];\n\n  const onSubmit = async (data: WizardFormValues) => {\n    const { teams, awxRoles } = data;\n    const items: TeamRolePair[] = [];\n    for (const team of teams) {\n      for (const role of awxRoles) {\n        items.push({ team, role });\n      }\n    }\n    return new Promise<void>((resolve) => {\n      teamRoleProgressDialog({\n        title: t('Add roles'),\n        keyFn: ({ team, role }) => `${team.id}_${role.id}`,\n        items,\n        actionColumns: [\n          { header: t('Team'), cell: ({ team }) => team.name },\n          { header: t('Role'), cell: ({ role }) => role.name },\n        ],\n        actionFn: ({ team, role }) =>\n          postRequest(awxAPI`/role_team_assignments/`, {\n            team: team.id,\n            role_definition: role.id,\n            content_type: 'workflowjobtemplate',\n            object_id: template.id,\n          }),\n        onComplete: () => {\n          resolve();\n        },\n        onClose: () => {\n          pageNavigate(AwxRoute.WorkflowJobTemplateTeamAccess, {\n            params: { id: template.id.toString() },\n          });\n        },\n      });\n    });\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Add roles')}\n        breadcrumbs={[\n          { label: t('Templates'), to: getPageUrl(AwxRoute.Templates) },\n          {\n            label: template?.name,\n            to: getPageUrl(AwxRoute.WorkflowJobTemplateDetails, { params: { id: template?.id } }),\n          },\n          {\n            label: t('Team Access'),\n            to: getPageUrl(AwxRoute.WorkflowJobTemplateTeamAccess, {\n              params: { id: template?.id },\n            }),\n          },\n          { label: t('Add roles') },\n        ]}\n      />\n      <PageWizard<WizardFormValues>\n        steps={steps}\n        onSubmit={onSubmit}\n        disableGrid\n        onCancel={() => {\n          pageNavigate(AwxRoute.WorkflowJobTemplateTeamAccess, { params: { id: template?.id } });\n        }}\n        errorAdapter={awxErrorAdapter}\n      />\n    </PageLayout>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageHeader,\n  PageLayout,\n  PageWizard,\n  PageWizardStep,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { AwxSelectUsersStep } from '../../access/common/AwxRolesWizardSteps/AwxSelectUsersStep';\nimport { AwxSelectRolesStep } from '../../access/common/AwxRolesWizardSteps/AwxSelectRolesStep';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { useGet } from '../../../common/crud/useGet';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { postRequest } from '../../../common/crud/Data';\nimport { WorkflowJobTemplate } from '../../interfaces/WorkflowJobTemplate';\nimport { AwxUser } from '../../interfaces/User';\nimport { Role } from '../../interfaces/Role';\nimport { RoleAssignmentsReviewStep } from '../../../common/access/RolesWizard/steps/RoleAssignmentsReviewStep';\nimport { awxErrorAdapter } from '../../common/adapters/awxErrorAdapter';\nimport { useAwxBulkActionDialog } from '../../common/useAwxBulkActionDialog';\n\ninterface WizardFormValues {\n  users: AwxUser[];\n  awxRoles: Role[];\n}\n\ninterface UserRolePair {\n  user: AwxUser;\n  role: Role;\n}\n\nexport function WorkflowJobTemplateAddUsers() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const params = useParams<{ id: string }>();\n\n  const { data: template, isLoading } = useGet<WorkflowJobTemplate>(\n    awxAPI`/workflow_job_templates/${params.id ?? ''}/`\n  );\n  const userProgressDialog = useAwxBulkActionDialog<UserRolePair>();\n  const pageNavigate = usePageNavigate();\n\n  if (isLoading || !template) return <LoadingPage />;\n\n  const steps: PageWizardStep[] = [\n    {\n      id: 'users',\n      label: t('Select user(s)'),\n      inputs: (\n        <AwxSelectUsersStep\n          descriptionForUsersSelection={t(\n            'Select the user(s) that you want to give access to {{templateName}}.',\n            {\n              templateName: template?.name,\n            }\n          )}\n        />\n      ),\n      validate: (formData, _) => {\n        const { users } = formData as WizardFormValues;\n        if (!users?.length) {\n          throw new Error(t('Select at least one user.'));\n        }\n      },\n    },\n    {\n      id: 'roles',\n      label: t('Select roles to apply'),\n      inputs: (\n        <AwxSelectRolesStep\n          contentType=\"workflowjobtemplate\"\n          fieldNameForPreviousStep=\"users\"\n          descriptionForRoleSelection={t('Choose roles to apply to {{templateName}}.', {\n            templateName: template?.name,\n          })}\n        />\n      ),\n      validate: (formData, _) => {\n        const { awxRoles } = formData as WizardFormValues;\n        if (!awxRoles?.length) {\n          throw new Error(t('Select at least one role.'));\n        }\n      },\n    },\n    {\n      id: 'review',\n      label: t('Review'),\n      inputs: <RoleAssignmentsReviewStep />,\n    },\n  ];\n\n  const onSubmit = (data: WizardFormValues) => {\n    const { users, awxRoles } = data;\n    const items: UserRolePair[] = [];\n    for (const user of users) {\n      for (const role of awxRoles) {\n        items.push({ user, role });\n      }\n    }\n    return new Promise<void>((resolve) => {\n      userProgressDialog({\n        title: t('Add roles'),\n        keyFn: ({ user, role }) => `${user.id}_${role.id}`,\n        items,\n        actionColumns: [\n          { header: t('User'), cell: ({ user }) => user.username },\n          { header: t('Role'), cell: ({ role }) => role.name },\n        ],\n        actionFn: ({ user, role }) =>\n          postRequest(awxAPI`/role_user_assignments/`, {\n            user: user.id,\n            role_definition: role.id,\n            content_type: 'workflowjobtemplate',\n            object_id: template.id,\n          }),\n        onComplete: () => {\n          resolve();\n        },\n        onClose: () => {\n          pageNavigate(AwxRoute.WorkflowJobTemplateUserAccess, {\n            params: { id: template.id.toString() },\n          });\n        },\n      });\n    });\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Add roles')}\n        breadcrumbs={[\n          { label: t('Templates'), to: getPageUrl(AwxRoute.Templates) },\n          {\n            label: template?.name,\n            to: getPageUrl(AwxRoute.WorkflowJobTemplateDetails, { params: { id: template?.id } }),\n          },\n          {\n            label: t('User Access'),\n            to: getPageUrl(AwxRoute.WorkflowJobTemplateUserAccess, {\n              params: { id: template?.id },\n            }),\n          },\n          { label: t('Add roles') },\n        ]}\n      />\n      <PageWizard<WizardFormValues>\n        steps={steps}\n        onSubmit={onSubmit}\n        disableGrid\n        onCancel={() => {\n          pageNavigate(AwxRoute.WorkflowJobTemplateUserAccess, { params: { id: template?.id } });\n        }}\n        errorAdapter={awxErrorAdapter}\n      />\n    </PageLayout>\n  );\n}\n","import {\n  CREATE_CONNECTOR_DROP_TYPE,\n  DropTargetSpec,\n  EDGE_DRAG_TYPE,\n  Graph,\n  GraphElement,\n  GraphElementProps,\n  GraphModel,\n  Node,\n  NodeModel,\n  NodeStatus,\n  TargetType,\n  WithCreateConnectorProps,\n  isNode,\n  nodeDragSourceSpec,\n  withContextMenu,\n  withCreateConnector,\n  withDndDrop,\n  withDragNode,\n  withSelection,\n} from '@patternfly/react-topology';\nimport { FunctionComponent, useCallback } from 'react';\nimport { GraphNode, GraphNodeData } from '../types';\nimport { useCreateConnector } from './useCreateConnector';\nimport { CONNECTOR_SOURCE_DROP, CONNECTOR_TARGET_DROP, START_NODE_ID } from '../constants';\nimport { CustomNode, NodeContextMenu } from '../components';\nimport { useHandleCollectNodeProps } from './useHandleCollectNodeProps';\n\nexport function useCreateNodeComponent(): () => FunctionComponent<\n  Omit<WithCreateConnectorProps & GraphElementProps, keyof WithCreateConnectorProps>\n> {\n  const createConnector = useCreateConnector();\n  const nodeContextMenu = useCallback(\n    (element: GraphNode) => [<NodeContextMenu key=\"nodeContext\" element={element} />],\n    []\n  );\n\n  const handleCollectNodeProps = useHandleCollectNodeProps();\n\n  const nodeDropTargetSpec = useCallback(\n    (\n      accept?: TargetType\n    ): DropTargetSpec<\n      GraphElement,\n      GraphNodeData,\n      { edgeDragging?: boolean },\n      GraphElementProps\n    > => ({\n      accept: accept || [EDGE_DRAG_TYPE, CREATE_CONNECTOR_DROP_TYPE],\n      collect: handleCollectNodeProps,\n    }),\n    [handleCollectNodeProps]\n  );\n  return useCallback(\n    () =>\n      withCreateConnector(\n        (\n          source: Node<NodeModel, GraphNodeData>,\n          target: Node<NodeModel, GraphNodeData> | Graph<GraphModel, GraphModel>\n        ) => {\n          if (!isNode(target)) return;\n\n          const nodeStatus = target.getNodeStatus();\n          if (nodeStatus === NodeStatus.danger) {\n            return;\n          }\n\n          // If the target node is a root node\n          // Hide the edge from the start node to the target node\n          if (target.getTargetEdges().length === 1) {\n            const edge = target.getTargetEdges()[0];\n            if (edge.getSource().getId() === START_NODE_ID) {\n              edge.setVisible(false);\n            }\n          }\n\n          createConnector(source, target);\n        }\n      )(\n        withContextMenu(nodeContextMenu)(\n          withDndDrop(\n            nodeDropTargetSpec([\n              CONNECTOR_SOURCE_DROP,\n              CONNECTOR_TARGET_DROP,\n              CREATE_CONNECTOR_DROP_TYPE,\n            ])\n          )(withDragNode(nodeDragSourceSpec('node', true, true))(withSelection()(CustomNode)))\n        )\n      ),\n    [createConnector, nodeContextMenu, nodeDropTargetSpec]\n  );\n}\n","import { Graph, GraphModel, Node, NodeModel, isNode } from '@patternfly/react-topology';\nimport { EdgeStatus, GraphNodeData } from '../types';\nimport { useCallback } from 'react';\nimport { useCreateEdge } from './useCreateEdge';\n\nexport function useCreateConnector() {\n  const createEdge = useCreateEdge();\n  return useCallback(\n    (\n      source: Node<NodeModel, GraphNodeData>,\n      target: Node<NodeModel, GraphNodeData> | Graph<GraphModel, GraphModel>\n    ) => {\n      const model = source.getController().toModel();\n      const controller = source.getController();\n      if (!isNode(target)) {\n        return;\n      }\n      if (!model.edges) {\n        model.edges = [];\n      }\n      const edge = createEdge(source.getId(), target.getId(), EdgeStatus.info);\n      model.edges.push(edge);\n      source.setState({ modified: true });\n      controller.setState({ ...controller.getState(), modified: true });\n      controller.fromModel(model, true);\n      controller.getGraph().layout();\n    },\n    [createEdge]\n  );\n}\n","import {\n  DropTargetMonitor,\n  GraphElementProps,\n  Node,\n  NodeModel,\n  NodeShape,\n  NodeStatus,\n  action,\n} from '@patternfly/react-topology';\nimport { useCallback } from 'react';\nimport { useTargetNodeAncestors } from './useTargetNodeAncestors';\nimport { GraphNodeData } from '../types';\n\nexport function useHandleCollectNodeProps() {\n  const targetNodeAncestors = useTargetNodeAncestors();\n  return useCallback(\n    (monitor: DropTargetMonitor, props: GraphElementProps) => {\n      const isDragging = monitor.isDragging();\n\n      const target = monitor.getDropResult() as Node;\n      const nodeStatus = target?.getNodeStatus() || NodeStatus.default;\n\n      const sourceNode = monitor.getItem() as Node;\n\n      if (!isDragging) {\n        const iteratedNode = props.element as Node<NodeModel, GraphNodeData>;\n        action(() => {\n          iteratedNode.setNodeShape(NodeShape.circle);\n          iteratedNode.setNodeStatus(NodeStatus.default);\n        })();\n      }\n      if (isDragging) {\n        targetNodeAncestors(sourceNode);\n      }\n      return {\n        ...props,\n        canDrop: nodeStatus !== NodeStatus.danger,\n        edgeDragging: isDragging,\n      };\n    },\n    [targetNodeAncestors]\n  );\n}\n","import {\n  ElementModel,\n  GraphElement,\n  NodeShape,\n  NodeStatus,\n  action,\n} from '@patternfly/react-topology';\nimport { useCallback } from 'react';\nimport { WorkflowNode } from '../../../../interfaces/WorkflowNode';\n\nexport function useTargetNodeAncestors() {\n  return useCallback((source: GraphElement<ElementModel, { resource: WorkflowNode }>) => {\n    if (!source?.getGraph?.()) return;\n    const nodes = source.getGraph().getNodes();\n    const links = source.getGraph().getEdges();\n    const newNodes = [...nodes];\n    const parentMap: Record<string, { parents: string[]; traversed: boolean }> = {};\n    const invalidLinkTargetIds: string[] = [];\n    // Find and mark any ancestors as disabled to prevent cycles\n    links.forEach((link) => {\n      // id=1 is our artificial root node so we don't care about that\n      if (link.getSource().getId() === 'startNode') {\n        return;\n      }\n      if (link.getSource().getId() === source.getId()) {\n        // Disables direct children from the add link process\n        invalidLinkTargetIds.push(link.getTarget().getId());\n      }\n      if (!parentMap[link.getTarget().getId()]) {\n        parentMap[link.getTarget().getId()] = {\n          parents: [],\n          traversed: false,\n        };\n      }\n      parentMap[link.getTarget().getId()].parents.push(link.getSource().getId());\n    });\n\n    const getAncestors = (id: string) => {\n      if (parentMap[id] && !parentMap[id].traversed) {\n        parentMap[id].parents.forEach((parentId) => {\n          invalidLinkTargetIds.push(parentId);\n          getAncestors(parentId);\n        });\n        parentMap[id].traversed = true;\n      }\n    };\n\n    getAncestors(source.getId());\n\n    // Filter out the duplicates\n    invalidLinkTargetIds\n      .filter((element, index, array) => index === array.indexOf(element))\n      .forEach((ancestorId) => {\n        newNodes.forEach((node) => {\n          if (node.getId() === ancestorId) {\n            action(() => {\n              node.setNodeShape(NodeShape.hexagon);\n              node.setNodeStatus(NodeStatus.danger);\n            })();\n          }\n        });\n      });\n  }, []);\n}\n","import { useCallback, useEffect, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ComponentFactory,\n  DagreLayout,\n  DefaultGroup,\n  EdgeModel,\n  Graph,\n  GraphComponent,\n  Model,\n  ModelKind,\n  NodeShape,\n  SELECTION_EVENT,\n  TopologyControlBar,\n  Visualization,\n  VisualizationProvider,\n  VisualizationSurface,\n  action,\n  createTopologyControlButtons,\n  defaultControlButtonsOptions,\n  withContextMenu,\n  withPanZoom,\n  withSelection,\n  TopologyView as PFTopologyView,\n  ElementModel,\n  Edge,\n  NodeStatus,\n  LabelPosition,\n} from '@patternfly/react-topology';\nimport { EmptyStateNoData } from '../../../../../framework/components/EmptyStateNoData';\nimport type { WorkflowJobTemplate } from '../../../interfaces/WorkflowJobTemplate';\nimport type { WorkflowNode } from '../../../interfaces/WorkflowNode';\nimport {\n  AddNodeButton,\n  CustomEdge,\n  EdgeContextMenu,\n  Legend,\n  WorkflowVisualizerToolbar,\n  ToolbarHeader,\n  Sidebar,\n} from './components';\nimport { EdgeStatus } from './types';\nimport { ViewOptionsContext, ViewOptionsProvider } from './ViewOptionsProvider';\nimport { useCreateEdge, useDedupeOldNodes } from './hooks';\nimport { getNodeLabel } from './wizard/helpers';\nimport { GRAPH_ID, NODE_DIAMETER, START_NODE_ID } from './constants';\nimport { useCreateNodeComponent } from './hooks/useCreateNodeComponent';\nimport { styled } from 'styled-components';\nimport { greyBadgeLabel } from '../../../views/jobs/WorkflowOutput/WorkflowOutput';\n\nconst TopologyView = styled(PFTopologyView)`\n  .pf-v5-c-divider {\n    display: none;\n  }\n`;\nexport const graphModel: Model = {\n  nodes: [],\n  edges: [],\n  graph: {\n    id: GRAPH_ID,\n    type: 'graph',\n    layout: 'Dagre',\n    visible: false,\n  },\n};\n\ninterface TopologyProps {\n  data: {\n    workflowNodes: WorkflowNode[];\n    template: WorkflowJobTemplate;\n  };\n}\n\nexport const WorkflowTopology = ({ data: { workflowNodes = [], template } }: TopologyProps) => {\n  const { t } = useTranslation();\n  const dedupeOldNodes = useDedupeOldNodes();\n  const createEdge = useCreateEdge();\n  const createNodeComponent = useCreateNodeComponent();\n  const handleSelectedNode = useCallback(\n    (clickedNodeIdentifier: string[]) => {\n      const clickedNodeData = workflowNodes.find(\n        (node) => node.id.toString() === clickedNodeIdentifier[0]\n      );\n      return clickedNodeData;\n    },\n    [workflowNodes]\n  );\n  const edgeContextMenu = useCallback(\n    (\n      element: Edge<\n        ElementModel,\n        {\n          tag: string;\n          isNew: boolean;\n          tagStatus: EdgeStatus;\n          endTerminalStatus: EdgeStatus;\n          originalStatus: EdgeStatus;\n        }\n      >\n    ) => [<EdgeContextMenu key=\"edgeContext\" element={element} />],\n    []\n  );\n  const baselineComponentFactory: ComponentFactory = useCallback(\n    (kind: ModelKind, type: string) => {\n      switch (type) {\n        case 'group':\n          return DefaultGroup;\n        default:\n          switch (kind) {\n            case ModelKind.graph:\n              return withPanZoom()(withSelection()(GraphComponent));\n            case ModelKind.node:\n              return createNodeComponent();\n            case ModelKind.edge:\n              return withContextMenu(edgeContextMenu)(withSelection()(CustomEdge));\n            default:\n              return undefined;\n          }\n      }\n    },\n    [createNodeComponent, edgeContextMenu]\n  );\n\n  const createVisualization = useCallback(() => {\n    const newVisualization = new Visualization();\n    newVisualization.setFitToScreenOnLayout(true);\n    newVisualization.registerComponentFactory(baselineComponentFactory);\n    newVisualization.registerLayoutFactory(\n      (type: string, graph: Graph) =>\n        new DagreLayout(graph, {\n          edgesep: 100,\n          marginx: 20,\n          marginy: 20,\n          rankdir: 'LR',\n          ranker: 'network-simplex',\n          ranksep: 200,\n        })\n    );\n    newVisualization.fromModel(graphModel, false);\n    newVisualization.addEventListener(SELECTION_EVENT, handleSelectedNode);\n    return newVisualization;\n  }, [baselineComponentFactory, handleSelectedNode]);\n\n  const visualizationRef = useRef<Visualization>(createVisualization());\n  const visualization = visualizationRef.current;\n\n  useEffect(() => {\n    const edges: EdgeModel[] = [];\n    const startNode = {\n      id: START_NODE_ID,\n      type: START_NODE_ID,\n      label: t('Start'),\n      width: NODE_DIAMETER,\n      height: NODE_DIAMETER,\n      data: {\n        resource: { always_nodes: [] },\n      },\n    };\n    const nodes = workflowNodes.map((n) => {\n      const nodeId = n.id.toString();\n      const nodeType = 'node';\n      const nodeName = n.summary_fields?.unified_job_template?.name || '';\n      const nodeLabel = getNodeLabel(nodeName, n.identifier) || t('Deleted');\n\n      n.success_nodes.forEach((id) => {\n        edges.push(createEdge(nodeId, id.toString(), EdgeStatus.success));\n      });\n      n.failure_nodes.forEach((id) => {\n        edges.push(createEdge(nodeId, id.toString(), EdgeStatus.danger));\n      });\n      n.always_nodes.forEach((id) => {\n        edges.push(createEdge(nodeId, id.toString(), EdgeStatus.info));\n      });\n\n      const node = {\n        id: nodeId,\n        type: nodeType,\n        label: nodeLabel,\n        width: NODE_DIAMETER,\n        height: NODE_DIAMETER,\n        shape: NodeShape.circle,\n        status: NodeStatus.default,\n        labelPosition: LabelPosition.bottom,\n        data: {\n          resource: n,\n        },\n      };\n\n      if (n.all_parents_must_converge) {\n        return { ...node, data: { ...node.data, ...greyBadgeLabel } };\n      }\n\n      return node;\n    });\n    const nonRootNodes = edges.map((edge) => edge.target);\n    const rootNodes = nodes?.filter(\n      (node) => !nonRootNodes.includes(node.id) && node.id !== START_NODE_ID\n    );\n    rootNodes.forEach((node) => {\n      edges.push(createEdge(START_NODE_ID, node.id, EdgeStatus.info));\n    });\n\n    const model = {\n      edges,\n      nodes: [startNode, ...nodes],\n      graph: {\n        id: GRAPH_ID,\n        type: 'graph',\n        layout: 'Dagre',\n        visible: true,\n      },\n    };\n\n    dedupeOldNodes(visualization);\n\n    visualization.fromModel(model, true);\n    visualization.getGraph().reset();\n    visualization.getGraph().layout();\n  }, [t, visualization, createEdge, workflowNodes, dedupeOldNodes]);\n\n  return (\n    <VisualizationProvider controller={visualization}>\n      <ViewOptionsProvider>\n        {/* tools provider name */}\n        <ViewOptionsContext.Consumer>\n          {({ isFullScreen, isEmpty, isLegendOpen, toggleLegend, sidebarMode }) => {\n            return (\n              <TopologyView\n                data-cy=\"workflow-visualizer\"\n                contextToolbar={isFullScreen ? null : <ToolbarHeader />}\n                viewToolbar={<WorkflowVisualizerToolbar />}\n                controlBar={\n                  !isEmpty && (\n                    <TopologyControlBar\n                      controlButtons={createTopologyControlButtons({\n                        ...defaultControlButtonsOptions,\n                        zoomInCallback: action(() => {\n                          visualization.getGraph().scaleBy(4 / 3);\n                        }),\n                        zoomOutCallback: action(() => {\n                          visualization.getGraph().scaleBy(0.75);\n                        }),\n                        fitToScreenCallback: action(() => {\n                          visualization.getGraph().fit(80);\n                        }),\n                        resetViewCallback: action(() => {\n                          visualization.getGraph().reset();\n                          visualization.getGraph().layout();\n                        }),\n                        legend: true,\n                        legendCallback: toggleLegend,\n                      })}\n                    />\n                  )\n                }\n                sideBarOpen={sidebarMode !== undefined}\n                sideBarResizable\n                sideBar={<Sidebar />}\n                minSideBarSize={'50%'}\n              >\n                {isEmpty ? (\n                  <div style={{ flex: '1 0 100%' }}>\n                    <EmptyStateNoData\n                      button={<AddNodeButton variant=\"primary\" />}\n                      title={t('There are currently no nodes in this workflow')}\n                      description={t('Add a node by clicking the button below')}\n                    />\n                  </div>\n                ) : (\n                  <>\n                    {isLegendOpen && <Legend />}\n                    <VisualizationSurface\n                      state={{\n                        workflowTemplate: template,\n                        RBAC: {\n                          edit: template.summary_fields.user_capabilities.edit,\n                          start: template.summary_fields.user_capabilities.start,\n                        },\n                      }}\n                    />\n                  </>\n                )}\n              </TopologyView>\n            );\n          }}\n        </ViewOptionsContext.Consumer>\n      </ViewOptionsProvider>\n    </VisualizationProvider>\n  );\n};\n","import { useCallback } from 'react';\nimport { GraphElement, Controller, action } from '@patternfly/react-topology';\n\n/*\n  This function is designed to deduplicate stale nodes after fetching new nodes from the API.\n\n  Explanation:\n  The topology library expects node IDs to be immutable. It uses the old ID as a key in the\n  list of `this.elements`. This poses an issue when trying to remove a node using the new ID. \n  Additionally, the library creates an additional node with the new ID since it doesn't find \n  an existing node with the new ID in the list of `this.elements`. This results in duplicate nodes. \n\n  To address this issue, we've implemented this workaround to clean up and deduplicate stale nodes.\n*/\n\ntype IController = Controller & {\n  elements: { [id: string]: GraphElement };\n};\nexport function useDedupeOldNodes() {\n  return useCallback((controller: IController) => {\n    const staleNodeKeys = Object.keys(controller?.elements).filter((key) =>\n      key.endsWith('-unsavedNode')\n    );\n    staleNodeKeys.forEach((key) => {\n      const staleNode = controller.getElementById(key);\n      if (staleNode) {\n        action(() => {\n          staleNode.setId(key);\n          controller.removeElement(staleNode);\n        })();\n      }\n    });\n  }, []);\n}\n","import { Bullseye, EmptyState, EmptyStateHeader, Icon, Spinner } from '@patternfly/react-core';\nimport { ShareAltIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport { getPatternflyColor } from '../../../../../framework';\nimport { useAwxGetAllPages } from '../../../common/useAwxGetAllPages';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { AwxError } from '../../../common/AwxError';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { WorkflowTopology } from './WorkflowTopology';\nimport type { WorkflowJobTemplate } from '../../../interfaces/WorkflowJobTemplate';\nimport type { WorkflowNode } from '../../../interfaces/WorkflowNode';\n\nexport function WorkflowVisualizer() {\n  const { t } = useTranslation();\n  const { id } = useParams<{ id: string }>();\n  const {\n    results: workflowNodes,\n    error: workflowNodeError,\n    isLoading: workflowNodeIsLoading,\n    refresh: workflowNodeRefresh,\n  } = useAwxGetAllPages<WorkflowNode>(awxAPI`/workflow_job_templates/${id ?? ''}/workflow_nodes/`);\n\n  const {\n    data: workflowJobTemplate,\n    error: workflowError,\n    refresh: workflowRefresh,\n    isLoading: workflowIsLoading,\n  } = useGetItem<WorkflowJobTemplate>(awxAPI`/workflow_job_templates/`, id);\n\n  const error = workflowError || workflowNodeError;\n  if (error) {\n    return <AwxError error={error} handleRefresh={workflowRefresh || workflowNodeRefresh} />;\n  }\n\n  if (workflowIsLoading || workflowNodeIsLoading || !workflowJobTemplate || !workflowNodes) {\n    return (\n      <Bullseye>\n        <EmptyState>\n          <EmptyStateHeader\n            titleText={t('Please wait until the Workflow Visualizer is populated.')}\n            headingLevel=\"h4\"\n            icon={\n              <Icon\n                size=\"xl\"\n                style={{\n                  paddingBottom: '40px',\n                  color: getPatternflyColor('grey'),\n                }}\n              >\n                <ShareAltIcon />\n              </Icon>\n            }\n          >\n            <Spinner />\n          </EmptyStateHeader>\n        </EmptyState>\n      </Bullseye>\n    );\n  }\n\n  return (\n    <WorkflowTopology\n      data={{\n        workflowNodes,\n        template: workflowJobTemplate,\n      }}\n    />\n  );\n}\n","import { useParams } from 'react-router-dom';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { TeamAccess } from '../../../../common/access/components/TeamAccess';\n\nexport function TemplateTeamAccess() {\n  const params = useParams<{ id: string }>();\n  return (\n    <TeamAccess\n      service=\"awx\"\n      id={params.id || ''}\n      type={'jobtemplate'}\n      addRolesRoute={AwxRoute.JobTemplateAddTeams}\n    />\n  );\n}\n","import { useParams } from 'react-router-dom';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { UserAccess } from '../../../../common/access/components/UserAccess';\n\nexport function TemplateUserAccess() {\n  const params = useParams<{ id: string }>();\n  return (\n    <UserAccess\n      service=\"awx\"\n      id={params.id || ''}\n      type={'jobtemplate'}\n      addRolesRoute={AwxRoute.JobTemplateAddUsers}\n    />\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageHeader,\n  PageLayout,\n  PageWizard,\n  PageWizardStep,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { RoleAssignmentsReviewStep } from '../../../common/access/RolesWizard/steps/RoleAssignmentsReviewStep';\nimport { postRequest } from '../../../common/crud/Data';\nimport { useGet } from '../../../common/crud/useGet';\nimport { AwxSelectRolesStep } from '../../access/common/AwxRolesWizardSteps/AwxSelectRolesStep';\nimport { AwxSelectTeamsStep } from '../../access/common/AwxRolesWizardSteps/AwxSelectTeamsStep';\nimport { awxErrorAdapter } from '../../common/adapters/awxErrorAdapter';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { useAwxBulkActionDialog } from '../../common/useAwxBulkActionDialog';\nimport { JobTemplate } from '../../interfaces/JobTemplate';\nimport { Role } from '../../interfaces/Role';\nimport { Team } from '../../interfaces/Team';\nimport { AwxRoute } from '../../main/AwxRoutes';\n\ninterface WizardFormValues {\n  teams: Team[];\n  awxRoles: Role[];\n}\n\ninterface TeamRolePair {\n  team: Team;\n  role: Role;\n}\n\nexport function JobTemplateAddTeams() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const params = useParams<{ id: string }>();\n  const pageNavigate = usePageNavigate();\n  const { data: template, isLoading } = useGet<JobTemplate>(\n    awxAPI`/job_templates/${params.id ?? ''}/`\n  );\n  const teamRoleProgressDialog = useAwxBulkActionDialog<TeamRolePair>();\n\n  if (isLoading || !template) return <LoadingPage />;\n\n  const steps: PageWizardStep[] = [\n    {\n      id: 'teams',\n      label: t('Select team(s)'),\n      inputs: (\n        <AwxSelectTeamsStep\n          descriptionForTeamsSelection={t(\n            'Select the team(s) that you want to give access to {{templateName}}.',\n            {\n              templateName: template?.name,\n            }\n          )}\n        />\n      ),\n      validate: (formData, _) => {\n        const { teams } = formData as WizardFormValues;\n        if (!teams?.length) {\n          throw new Error(t('Select at least one team.'));\n        }\n      },\n    },\n    {\n      id: 'roles',\n      label: t('Select roles to apply'),\n      inputs: (\n        <AwxSelectRolesStep\n          contentType=\"jobtemplate\"\n          fieldNameForPreviousStep=\"teams\"\n          descriptionForRoleSelection={t('Choose roles to apply to {{templateName}}.', {\n            templateName: template?.name,\n          })}\n        />\n      ),\n      validate: (formData, _) => {\n        const { awxRoles } = formData as WizardFormValues;\n        if (!awxRoles?.length) {\n          throw new Error(t('Select at least one role.'));\n        }\n      },\n    },\n    {\n      id: 'review',\n      label: t('Review'),\n      inputs: <RoleAssignmentsReviewStep />,\n    },\n  ];\n\n  const onSubmit = async (data: WizardFormValues) => {\n    const { teams, awxRoles } = data;\n    const items: TeamRolePair[] = [];\n    for (const team of teams) {\n      for (const role of awxRoles) {\n        items.push({ team, role });\n      }\n    }\n    return new Promise<void>((resolve) => {\n      teamRoleProgressDialog({\n        title: t('Add roles'),\n        keyFn: ({ team, role }) => `${team.id}_${role.id}`,\n        items,\n        actionColumns: [\n          { header: t('Team'), cell: ({ team }) => team.name },\n          { header: t('Role'), cell: ({ role }) => role.name },\n        ],\n        actionFn: ({ team, role }) =>\n          postRequest(awxAPI`/role_team_assignments/`, {\n            team: team.id,\n            role_definition: role.id,\n            content_type: 'jobtemplate',\n            object_id: template.id,\n          }),\n        onComplete: () => {\n          resolve();\n        },\n        onClose: () => {\n          pageNavigate(AwxRoute.JobTemplateTeamAccess, {\n            params: { id: template.id.toString() },\n          });\n        },\n      });\n    });\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Add roles')}\n        breadcrumbs={[\n          { label: t('Templates'), to: getPageUrl(AwxRoute.Templates) },\n          {\n            label: template?.name,\n            to: getPageUrl(AwxRoute.JobTemplateDetails, { params: { id: template?.id } }),\n          },\n          {\n            label: t('Team Access'),\n            to: getPageUrl(AwxRoute.JobTemplateTeamAccess, { params: { id: template?.id } }),\n          },\n          { label: t('Add roles') },\n        ]}\n      />\n      <PageWizard<WizardFormValues>\n        errorAdapter={awxErrorAdapter}\n        steps={steps}\n        onSubmit={onSubmit}\n        disableGrid\n        onCancel={() => {\n          pageNavigate(AwxRoute.JobTemplateTeamAccess, { params: { id: template?.id } });\n        }}\n      />\n    </PageLayout>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageHeader,\n  PageLayout,\n  PageWizard,\n  PageWizardStep,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { AwxSelectUsersStep } from '../../access/common/AwxRolesWizardSteps/AwxSelectUsersStep';\nimport { AwxSelectRolesStep } from '../../access/common/AwxRolesWizardSteps/AwxSelectRolesStep';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { useGet } from '../../../common/crud/useGet';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { postRequest } from '../../../common/crud/Data';\nimport { JobTemplate } from '../../interfaces/JobTemplate';\nimport { AwxUser } from '../../interfaces/User';\nimport { Role } from '../../interfaces/Role';\nimport { RoleAssignmentsReviewStep } from '../../../common/access/RolesWizard/steps/RoleAssignmentsReviewStep';\nimport { useAwxBulkActionDialog } from '../../common/useAwxBulkActionDialog';\n\ninterface WizardFormValues {\n  users: AwxUser[];\n  awxRoles: Role[];\n}\n\ninterface UserRolePair {\n  user: AwxUser;\n  role: Role;\n}\n\nexport function JobTemplateAddUsers() {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const params = useParams<{ id: string }>();\n\n  const { data: template, isLoading } = useGet<JobTemplate>(\n    awxAPI`/job_templates/${params.id ?? ''}/`\n  );\n  const userProgressDialog = useAwxBulkActionDialog<UserRolePair>();\n  const pageNavigate = usePageNavigate();\n\n  if (isLoading || !template) return <LoadingPage />;\n\n  const steps: PageWizardStep[] = [\n    {\n      id: 'users',\n      label: t('Select user(s)'),\n      inputs: (\n        <AwxSelectUsersStep\n          descriptionForUsersSelection={t(\n            'Select the user(s) that you want to give access to {{templateName}}.',\n            {\n              templateName: template?.name,\n            }\n          )}\n        />\n      ),\n      validate: (formData, _) => {\n        const { users } = formData as WizardFormValues;\n        if (!users?.length) {\n          throw new Error(t('Select at least one user.'));\n        }\n      },\n    },\n    {\n      id: 'roles',\n      label: t('Select roles to apply'),\n      inputs: (\n        <AwxSelectRolesStep\n          contentType=\"jobtemplate\"\n          fieldNameForPreviousStep=\"users\"\n          descriptionForRoleSelection={t('Choose roles to apply to {{templateName}}.', {\n            templateName: template?.name,\n          })}\n        />\n      ),\n      validate: (formData, _) => {\n        const { awxRoles } = formData as WizardFormValues;\n        if (!awxRoles?.length) {\n          throw new Error(t('Select at least one role.'));\n        }\n      },\n    },\n    {\n      id: 'review',\n      label: t('Review'),\n      inputs: <RoleAssignmentsReviewStep />,\n    },\n  ];\n\n  const onSubmit = (data: WizardFormValues) => {\n    const { users, awxRoles } = data;\n    const items: UserRolePair[] = [];\n    for (const user of users) {\n      for (const role of awxRoles) {\n        items.push({ user, role });\n      }\n    }\n    return new Promise<void>((resolve) => {\n      userProgressDialog({\n        title: t('Add roles'),\n        keyFn: ({ user, role }) => `${user.id}_${role.id}`,\n        items,\n        actionColumns: [\n          { header: t('User'), cell: ({ user }) => user.username },\n          { header: t('Role'), cell: ({ role }) => role.name },\n        ],\n        actionFn: ({ user, role }) =>\n          postRequest(awxAPI`/role_user_assignments/`, {\n            user: user.id,\n            role_definition: role.id,\n            content_type: 'jobtemplate',\n            object_id: template.id,\n          }),\n        onComplete: () => {\n          resolve();\n        },\n        onClose: () => {\n          pageNavigate(AwxRoute.JobTemplateUserAccess, {\n            params: { id: template.id.toString() },\n          });\n        },\n      });\n    });\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Add roles')}\n        breadcrumbs={[\n          { label: t('Templates'), to: getPageUrl(AwxRoute.Templates) },\n          {\n            label: template?.name,\n            to: getPageUrl(AwxRoute.JobTemplateDetails, { params: { id: template?.id } }),\n          },\n          {\n            label: t('User Access'),\n            to: getPageUrl(AwxRoute.JobTemplateUserAccess, { params: { id: template?.id } }),\n          },\n          { label: t('Add roles') },\n        ]}\n      />\n      <PageWizard<WizardFormValues>\n        steps={steps}\n        onSubmit={onSubmit}\n        disableGrid\n        onCancel={() => {\n          pageNavigate(AwxRoute.JobTemplateUserAccess, { params: { id: template?.id } });\n        }}\n      />\n    </PageLayout>\n  );\n}\n","import { useParams } from 'react-router-dom';\nimport { usePersistentFilters } from '../../../../common/PersistentFilters';\nimport { JobsList } from '../../../views/jobs/JobsList';\nimport { useHostsJobsColumns } from '../../inventories/inventoryHostsPage/hooks/useHostsJobsColumns';\n\nexport function TemplateJobs(props: { resourceType: 'job_templates' | 'workflow_job_templates' }) {\n  const { resourceType } = props;\n  usePersistentFilters('inventories');\n  const jobsColumns = useHostsJobsColumns();\n  const { id = '' } = useParams<{ id: string }>();\n  const queryParams = {\n    [resourceType === 'job_templates'\n      ? 'job__job_template'\n      : 'workflow_job__workflow_job_template']: id,\n    not__launch_type: 'sync',\n  };\n  return <JobsList queryParams={queryParams} columns={jobsColumns} />;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Chip, ChipGroup, Icon, Flex, Tooltip } from '@patternfly/react-core';\nimport { AsteriskIcon } from '@patternfly/react-icons';\nimport { ITableColumn, TextCell, useGetPageUrl } from '../../../../../framework';\nimport type { Spec } from '../../../interfaces/Survey';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\nexport function useSurveyColumns(_options?: {\n  templateType?: 'job_template' | 'workflow_job_template';\n  id?: string;\n}) {\n  const { t } = useTranslation();\n  const { templateType, id } = _options ?? {};\n\n  const getPageUrl = useGetPageUrl();\n\n  return useMemo<ITableColumn<Spec>[]>(\n    () => [\n      {\n        header: t('Name'),\n        cell: (question) => (\n          <Flex flexWrap={{ default: 'nowrap' }}>\n            <TextCell\n              text={question?.question_name}\n              iconAlign=\"right\"\n              icon={\n                question.required ? (\n                  <Tooltip content={t('Required')}>\n                    <Icon status=\"danger\" iconSize=\"sm\" data-cy=\"survey-question-required\">\n                      <AsteriskIcon />\n                    </Icon>\n                  </Tooltip>\n                ) : null\n              }\n              to={getPageUrl(\n                templateType === 'job_template'\n                  ? AwxRoute.EditJobTemplateSurvey\n                  : AwxRoute.EditWorkflowJobTemplateSurvey,\n                { params: { id }, query: { question_variable: question.variable } }\n              )}\n            />\n          </Flex>\n        ),\n        card: 'name',\n        list: 'name',\n      },\n      {\n        header: t('Type'),\n        cell: (question) => <TextCell text={question?.type} />,\n        card: 'subtitle',\n        list: 'subtitle',\n      },\n      {\n        header: t('Default'),\n        card: 'subtitle',\n        list: 'subtitle',\n        cell: (question) => {\n          if (\n            question.default === null ||\n            question.default === undefined ||\n            question.default === ''\n          ) {\n            return null;\n          }\n          if (question.type !== 'multiselect') {\n            return question.default;\n          }\n          return (\n            <ChipGroup>\n              {question.default\n                .toString()\n                .split('\\n')\n                .map((chip) => (\n                  <Chip key={chip} isReadOnly ouiaId={`${question.variable}-${chip}`}>\n                    {chip}\n                  </Chip>\n                ))}\n            </ChipGroup>\n          );\n        },\n      },\n    ],\n    [t, getPageUrl, id, templateType]\n  );\n}\n","import { useState } from 'react';\nimport styled from 'styled-components';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Checkbox, Modal, ModalBoxBody, ModalVariant } from '@patternfly/react-core';\nimport { usePageDialog, PageTable, usePageAlertToaster } from '../../../../../framework';\nimport { usePaged } from '../../../../../framework/PageTable/useTableItems';\nimport { awxErrorAdapter } from '../../../common/adapters/awxErrorAdapter';\nimport { useDeleteSurvey } from './useDeleteSurvey';\nimport { useSurveyColumns } from './useSurveyColumns';\nimport type { Spec } from '../../../interfaces/Survey';\nimport { useParams } from 'react-router-dom';\nimport { JobTemplate } from '../../../interfaces/JobTemplate';\nimport { WorkflowJobTemplate } from '../../../interfaces/WorkflowJobTemplate';\n\nconst ModalBodyDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  max-height: 560px;\n  overflow: hidden;\n  border-top: thin solid var(--pf-v5-global--BorderColor--100);\n`;\nconst ConfirmBoxDiv = styled.div`\n  margin-left: 32px;\n  height: 64px;\n  display: flex;\n  align-items: center;\n`;\n\nexport function useDeleteSurveyDialog(\n  onComplete: (questions: Spec[]) => void,\n  templateType?: (JobTemplate | WorkflowJobTemplate)['type']\n) {\n  const { t } = useTranslation();\n  const [_, setDialog] = usePageDialog();\n  const alertToaster = usePageAlertToaster();\n  const { id } = useParams<{ id?: string }>();\n\n  const onError = (error: unknown) => {\n    const { genericErrors, fieldErrors } = awxErrorAdapter(error);\n    alertToaster.addAlert({\n      variant: 'danger',\n      title: t('Failed to delete survey questions'),\n      children: (\n        <>\n          {genericErrors?.map((err) => err.message)}\n          {fieldErrors?.map((err) => err.message)}\n        </>\n      ),\n    });\n  };\n\n  const deleteSurveyDialog = (questions: Spec[]) => {\n    setDialog(\n      <DeleteSurveyDialog\n        questions={questions}\n        onClose={() => setDialog(undefined)}\n        onComplete={onComplete}\n        onError={onError}\n        id={id}\n        templateType={templateType}\n      />\n    );\n  };\n  return deleteSurveyDialog;\n}\n\nfunction DeleteSurveyDialog(props: {\n  questions: Spec[];\n  onClose: () => void;\n  onComplete: (questions: Spec[]) => void;\n  onError: (err: unknown) => void;\n  id?: string;\n  templateType?: (JobTemplate | WorkflowJobTemplate)['type'];\n}) {\n  const { questions, onClose, onComplete, onError, id, templateType } = props;\n  const { t } = useTranslation();\n  const pagination = usePaged(questions);\n  const modalColumns = useSurveyColumns();\n  const deleteSurvey = useDeleteSurvey({ onClose, onComplete, onError, id, templateType });\n  const [confirmed, setConfirmed] = useState(false);\n\n  return (\n    <Modal\n      isOpen\n      hasNoBodyWrapper\n      titleIconVariant=\"warning\"\n      title={t('Permanently delete survey questions')}\n      aria-label={t('Delete survey')}\n      ouiaId=\"delete-survey-dialog\"\n      data-cy=\"delete-survey-dialog\"\n      variant={ModalVariant.medium}\n      onClose={props.onClose}\n      actions={[\n        <Button\n          data-cy=\"survey-modal-delete-button\"\n          ouiaId=\"survey-modal-delete-button\"\n          key=\"delete\"\n          variant=\"danger\"\n          onClick={() => void deleteSurvey(questions)}\n          aria-label={t`Confirm delete`}\n          isAriaDisabled={!confirmed}\n        >\n          {t(`Delete`)}\n        </Button>,\n        <Button\n          ouiaId=\"delete-survey-modal-cancel-button\"\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onClose}\n        >\n          {t(`Cancel`)}\n        </Button>,\n      ]}\n    >\n      {questions.length > 0 && (\n        <ModalBoxBody style={{ paddingLeft: 0, paddingRight: 0 }}>\n          <ModalBodyDiv>\n            <PageTable<Spec>\n              key=\"items\"\n              pageItems={pagination.paged}\n              itemCount={questions.length}\n              tableColumns={modalColumns}\n              keyFn={(question) => question.variable}\n              compact\n              errorStateTitle={t`Error`}\n              emptyStateTitle={t`No items`}\n              autoHidePagination={true}\n              disableBodyPadding\n              {...pagination}\n            />\n          </ModalBodyDiv>\n          <ConfirmBoxDiv>\n            <Checkbox\n              id=\"confirm\"\n              ouiaId=\"confirm\"\n              label={t('Yes, I confirm that I want to remove these {{count}} survey questions.', {\n                count: questions.length,\n              })}\n              isChecked={confirmed}\n              onChange={(_event, val) => setConfirmed(val)}\n            />\n          </ConfirmBoxDiv>\n        </ModalBoxBody>\n      )}\n    </Modal>\n  );\n}\n","import { useCallback } from 'react';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useDeleteRequest } from '../../../../common/crud/useDeleteRequest';\nimport { useGet } from '../../../../common/crud/useGet';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport type { Spec, Survey } from '../../../interfaces/Survey';\nimport { JobTemplate } from '../../../interfaces/JobTemplate';\nimport { WorkflowJobTemplate } from '../../../interfaces/WorkflowJobTemplate';\n\nexport function useDeleteSurvey(props: {\n  onClose: () => void;\n  onComplete: (questions: Spec[]) => void;\n  onError: (err: unknown) => void;\n  id?: string;\n  templateType?: (JobTemplate | WorkflowJobTemplate)['type'];\n}) {\n  const { onClose, onComplete, onError, id, templateType } = props;\n  const postRequest = usePostRequest();\n  const deleteRequest = useDeleteRequest();\n\n  const surveySpecEndpoint = id\n    ? awxAPI`/${templateType === 'job_template' ? 'job_templates' : 'workflow_job_templates'}/${id}/survey_spec/`\n    : '';\n\n  const { data } = useGet<Survey>(surveySpecEndpoint);\n\n  return useCallback(\n    async (surveyQuestions: Spec[]) => {\n      try {\n        if (data) {\n          const updatedSurvey = {\n            name: data?.name,\n            description: data?.description,\n            spec: data?.spec?.filter((q) => !surveyQuestions.includes(q)),\n          };\n\n          if (surveyQuestions.length === data.spec?.length) {\n            await deleteRequest(surveySpecEndpoint);\n          } else {\n            await postRequest(surveySpecEndpoint, updatedSurvey);\n          }\n        }\n      } catch (error) {\n        onError(error);\n      } finally {\n        onComplete(surveyQuestions);\n        onClose();\n      }\n    },\n    [data, deleteRequest, onError, postRequest, onClose, onComplete, surveySpecEndpoint]\n  );\n}\n","import { useMemo, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport { Switch } from '@patternfly/react-core';\nimport { PlusCircleIcon, TrashIcon, CubesIcon, PencilAltIcon } from '@patternfly/react-icons';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  PageTable,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { requestPatch } from '../../../../common/crud/Data';\n\nimport type { Spec } from '../../../interfaces/Survey';\nimport type { JobTemplate } from '../../../interfaces/JobTemplate';\nimport type { WorkflowJobTemplate } from '../../../interfaces/WorkflowJobTemplate';\n\nimport { useDeleteSurveyDialog } from '../hooks/useDeleteSurveyDialog';\nimport { useSurveyView } from '../hooks/useSurveyView';\nimport { useSurveyColumns } from '../hooks/useSurveyColumns';\nimport { useSurveyToolbarActions } from '../hooks/useSurveyToolbarActions';\nimport styled from 'styled-components';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\nconst SurveySwitch = styled(Switch)`\n  margin: 0 16px;\n  align-self: center;\n`;\n\nexport function TemplateSurvey({ resourceType }: { resourceType: string }) {\n  const params = useParams<{ id: string }>();\n  const { data: template, refresh } = useGetItem<JobTemplate | WorkflowJobTemplate>(\n    awxAPI`/${resourceType}/`,\n    params.id\n  );\n\n  const handleToggleSurvey = useCallback(\n    async (enabled: boolean) => {\n      if (!template) return;\n\n      const url =\n        template.type === 'job_template'\n          ? awxAPI`/job_templates/${template.id.toString()}/`\n          : awxAPI`/workflow_job_templates/${template.id.toString()}/`;\n\n      await requestPatch(url, {\n        survey_enabled: enabled,\n      });\n\n      refresh();\n    },\n    [template, refresh]\n  );\n\n  if (!template) {\n    return null;\n  }\n\n  return <TemplateSurveyInternal template={template} onToggleSurvey={handleToggleSurvey} />;\n}\n\nexport function TemplateSurveyInternal({\n  template,\n  onToggleSurvey,\n}: {\n  template: JobTemplate | WorkflowJobTemplate;\n  onToggleSurvey: (enabled: boolean) => Promise<void>;\n}) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n\n  const view = useSurveyView({\n    url:\n      template.type === 'job_template'\n        ? awxAPI`/job_templates/${template.id.toString()}/survey_spec/`\n        : awxAPI`/workflow_job_templates/${template.id.toString()}/survey_spec/`,\n  });\n\n  const canCreateSurvey = template.summary_fields.user_capabilities.edit;\n  const canDeleteSurvey = template.summary_fields.user_capabilities.delete;\n\n  const tableColumns = useSurveyColumns({\n    templateType: template.type,\n    id: template.id.toString(),\n  });\n  const toolbarActions = useSurveyToolbarActions(view, template.type);\n  const deleteQuestions = useDeleteSurveyDialog(view.unselectItemsAndRefresh, template.type);\n\n  const rowActions = useMemo<IPageAction<Spec>[]>(\n    () => [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        isPinned: true,\n        icon: PencilAltIcon,\n        label: t('Edit survey question'),\n        isDisabled: () =>\n          canCreateSurvey ? undefined : t('You do not have permission to edit this question.'),\n        onClick: (question) => {\n          pageNavigate(\n            template.type === 'job_template'\n              ? AwxRoute.EditJobTemplateSurvey\n              : AwxRoute.EditWorkflowJobTemplateSurvey,\n            {\n              params: { id: template.id.toString() },\n              query: { question_variable: question.variable },\n            }\n          );\n        },\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: TrashIcon,\n        label: t('Delete survey question'),\n        isDisabled: () =>\n          canDeleteSurvey ? undefined : t('You do not have permission to delete this question.'),\n        onClick: (question) => deleteQuestions([question]),\n        isDanger: true,\n      },\n    ],\n    [t, canCreateSurvey, canDeleteSurvey, deleteQuestions, pageNavigate, template.id, template.type]\n  );\n\n  return (\n    <PageTable<Spec>\n      id=\"awx-survey-table\"\n      toolbarActions={toolbarActions}\n      tableColumns={tableColumns}\n      rowActions={rowActions}\n      errorStateTitle={t('Error loading survey')}\n      emptyStateTitle={\n        canCreateSurvey\n          ? t('There are currently no survey questions.')\n          : t('You do not have permission to create a survey.')\n      }\n      emptyStateDescription={\n        canCreateSurvey\n          ? t('Create a survey question by clicking the button below.')\n          : t(\n              'Please contact your organization administrator if there is an issue with your access.'\n            )\n      }\n      emptyStateIcon={canCreateSurvey ? undefined : CubesIcon}\n      emptyStateButtonText={canCreateSurvey ? t('Create survey question') : undefined}\n      emptyStateButtonIcon={canCreateSurvey ? <PlusCircleIcon /> : undefined}\n      emptyStateButtonClick={\n        canCreateSurvey\n          ? () => {\n              pageNavigate(\n                template.type === 'job_template'\n                  ? AwxRoute.AddJobTemplateSurvey\n                  : AwxRoute.AddWorkflowJobTemplateSurvey,\n                {\n                  params: { id: template.id.toString() },\n                }\n              );\n            }\n          : undefined\n      }\n      {...view}\n      toolbarContent={\n        <SurveySwitch\n          label={t('Survey enabled')}\n          labelOff={t('Survey disabled')}\n          id=\"survey-switch\"\n          data-cy=\"survey-switch\"\n          aria-label=\"Survey enabled\"\n          hasCheckIcon\n          isChecked={template.survey_enabled ?? false}\n          onChange={(_, enabled) => void onToggleSurvey(enabled)}\n        />\n      }\n    />\n  );\n}\n","import useSWR from 'swr';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { ISelected, IView, useView, useSelected } from '../../../../../framework';\nimport { swrOptions, useFetcher } from '../../../../common/crud/Data';\nimport { RequestError } from '../../../../common/crud/RequestError';\nimport type { Spec } from '../../../interfaces/Survey';\n\nexport type ISurveyView = IView &\n  ISelected<Spec> & {\n    itemCount: number | undefined;\n    pageItems: Spec[] | undefined;\n    refresh: () => Promise<void>;\n    selectItemsAndRefresh: (items: Spec[]) => void;\n    unselectItemsAndRefresh: (items: Spec[]) => void;\n    updateItem: (item: Spec) => void;\n  };\n\ninterface SurveySpecResponse {\n  name?: string;\n  description?: string;\n  spec?: Spec[];\n}\n\nexport function useSurveyView(options: { url: string }): ISurveyView {\n  const { url } = options;\n\n  const view = useView({ disableQueryString: true });\n  const itemCountRef = useRef<{ itemCount: number | undefined }>({ itemCount: undefined });\n\n  const fetcher = useFetcher();\n  const response = useSWR<SurveySpecResponse>(url, fetcher, swrOptions);\n  const { data, mutate } = response;\n  const refresh = useCallback(async () => {\n    await mutate().finally(() => {});\n  }, [mutate]);\n  useSWR<SurveySpecResponse>(url, fetcher, swrOptions);\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  let error: Error | undefined = response.error;\n  if (error instanceof RequestError) {\n    if (error.statusCode === 404 && view.page > 1) {\n      view.setPage(1);\n      error = undefined;\n    }\n  }\n\n  function getSpecKey(item: { variable: string }) {\n    return item?.variable;\n  }\n\n  const selection = useSelected<Spec>(data?.spec ?? [], getSpecKey);\n\n  if (data && data.spec !== undefined) {\n    itemCountRef.current.itemCount = data.spec.length;\n  } else if (data && data.spec === undefined) {\n    itemCountRef.current.itemCount = 0;\n  }\n\n  const selectItemsAndRefresh = useCallback(\n    (items: Spec[]) => {\n      selection.selectItems(items);\n      void refresh();\n    },\n    [refresh, selection]\n  );\n\n  const unselectItemsAndRefresh = useCallback(\n    (items: Spec[]) => {\n      selection.unselectItems(items);\n      void refresh();\n    },\n    [refresh, selection]\n  );\n\n  const [items, setItems] = useState<Spec[] | undefined>(undefined);\n  useEffect(() => {\n    setItems(data?.spec);\n  }, [data?.spec]);\n\n  const updateItem = useCallback(\n    (item: Spec) => {\n      if (!items) return;\n      const index = items?.findIndex((i) => i.variable === item.variable);\n      if (index !== -1) {\n        const newItems = [...items];\n        newItems[index] = item;\n        setItems(newItems);\n      }\n    },\n    [items]\n  );\n\n  return useMemo(() => {\n    return {\n      error,\n      refresh,\n      itemCount: itemCountRef.current.itemCount,\n      pageItems: items,\n      ...view,\n      ...selection,\n      selectItemsAndRefresh,\n      unselectItemsAndRefresh,\n      updateItem,\n    };\n  }, [\n    error,\n    items,\n    refresh,\n    selectItemsAndRefresh,\n    selection,\n    unselectItemsAndRefresh,\n    updateItem,\n    view,\n  ]);\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ButtonVariant } from '@patternfly/react-core';\nimport { PlusCircleIcon, TrashIcon, CogIcon } from '@patternfly/react-icons';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useDeleteSurveyDialog } from './useDeleteSurveyDialog';\nimport type { ISurveyView } from './useSurveyView';\nimport type { Spec } from '../../../interfaces/Survey';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useParams } from 'react-router-dom';\nimport { useManageSurveyQuestions } from './useManageSurveyQuestions';\nimport type { OptionsResponse, ActionsResponse } from '../../../interfaces/OptionsResponse';\nimport { JobTemplate } from '../../../interfaces/JobTemplate';\nimport { WorkflowJobTemplate } from '../../../interfaces/WorkflowJobTemplate';\n\nexport function useSurveyToolbarActions(\n  view: ISurveyView,\n  templateType: (JobTemplate | WorkflowJobTemplate)['type']\n) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const { id } = useParams<{ id: string }>();\n  const deleteQuestions = useDeleteSurveyDialog(view.unselectItemsAndRefresh, templateType);\n\n  const isJobTemplate = templateType === 'job_template';\n\n  const { openManageQuestionOrder } = useManageSurveyQuestions(isJobTemplate);\n\n  const { data: options } = useOptions<OptionsResponse<ActionsResponse>>(\n    id\n      ? awxAPI`/${isJobTemplate ? 'job_templates' : 'workflow_job_templates'}/${id.toString()}/`\n      : ''\n  );\n  const canModifySurvey = Boolean(options && options.actions && options.actions['PUT']);\n\n  return useMemo<IPageAction<Spec>[]>(\n    () => [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.None,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        icon: PlusCircleIcon,\n        label: t('Create survey question'),\n        isDisabled: canModifySurvey\n          ? undefined\n          : t(\n              'You do not have permission to create a question. Please contact your system administrator if there is an issue with your access.'\n            ),\n        onClick: () => {\n          pageNavigate(\n            isJobTemplate ? AwxRoute.AddJobTemplateSurvey : AwxRoute.AddWorkflowJobTemplateSurvey,\n            {\n              params: { id },\n            }\n          );\n        },\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.None,\n        icon: CogIcon,\n        label: t('Manage question order'),\n        onClick: openManageQuestionOrder,\n        isDisabled: canModifySurvey\n          ? undefined\n          : t(\n              'You do not have permission to reorder questions. Please contact your system administrator if there is an issue with your access.'\n            ),\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: TrashIcon,\n        label: t('Delete survey questions'),\n        onClick: deleteQuestions,\n        isDanger: true,\n        isDisabled: canModifySurvey\n          ? undefined\n          : t(\n              'You do not have permission to delete survey questions. Please contact your system administrator if there is an issue with your access.'\n            ),\n      },\n    ],\n    [t, openManageQuestionOrder, deleteQuestions, canModifySurvey, id, pageNavigate, isJobTemplate]\n  );\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useManageItems } from '../../../../../framework/components/useManagedItems';\nimport { useGet } from '../../../../common/crud/useGet';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { Spec, Survey } from '../../../interfaces/Survey';\nimport { useParams } from 'react-router-dom';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\n\nexport function useManageSurveyQuestions(isJobTemplate: boolean) {\n  const { t } = useTranslation();\n  const params = useParams<{ id: string }>();\n  const postRequest = usePostRequest();\n  const endpoint = awxAPI`/${isJobTemplate ? 'job_templates' : 'workflow_job_templates'}/${params.id?.toString() ?? ''}/survey_spec/`;\n  const columns = useMemo(\n    () => [\n      {\n        header: t('Name'),\n        cell: (spec: Spec) => spec.question_name,\n      },\n      {\n        header: t('Defaults'),\n        cell: (spec: Spec) => spec.default,\n      },\n    ],\n    [t]\n  );\n\n  const { data, refresh } = useGet<Survey>(endpoint);\n  const { openManageItems: openManageQuestionOrder } = useManageItems({\n    id: `survey-question-template-${params.id}`,\n    title: 'Manage question order',\n    description: t('To reorder the survey questions drag and drop them in the desired location.'),\n    items: data?.spec ?? [],\n    keyFn: (spec: Spec) => spec.question_name,\n    columns,\n    hideSelection: true,\n    onSubmit: (items) => {\n      void (async () => {\n        void (await postRequest(endpoint, {\n          ...data,\n          spec: items,\n        }));\n        refresh();\n      })();\n    },\n  });\n\n  return useMemo(\n    () => ({\n      openManageQuestionOrder,\n    }),\n    [openManageQuestionOrder]\n  );\n}\n","import {\n  Button,\n  Grid,\n  GridItem,\n  FormHelperText,\n  HelperText,\n  HelperTextItem,\n  TextInput,\n  ValidatedOptions,\n  Divider,\n  Stack,\n  Radio,\n  Flex,\n  FlexItem,\n  Checkbox,\n} from '@patternfly/react-core';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { PageFormGroup } from '../../../framework/PageForm/Inputs/PageFormGroup';\nimport { Controller, useFieldArray, useFormContext, useWatch } from 'react-hook-form';\nimport { PlusCircleIcon, TrashIcon } from '@patternfly/react-icons';\nimport styled from 'styled-components';\nimport { useEffect } from 'react';\nimport { useGetDocsUrl } from './util/useGetDocsUrl';\nimport { useAwxConfig } from './useAwxConfig';\n\nconst DividerWithSpace = styled(Divider)`\n  padding-top: var(--pf-v5-global--spacer--md);\n  padding-bottom: var(--pf-v5-global--spacer--md);\n`;\n\nexport type MultipleChoiceFieldType = 'multiplechoice' | 'multiselect';\n\ninterface IProps {\n  type: MultipleChoiceFieldType;\n}\n\nexport interface ChoiceOption {\n  name: string;\n  id: string;\n  default: boolean;\n}\n\nexport function MultipleChoiceField(props: IProps) {\n  const { t } = useTranslation();\n  const config = useAwxConfig();\n\n  const { type } = props;\n\n  const docsURL = useGetDocsUrl(config, 'jobTemplateSurveys');\n\n  const emptyChoiceMsg = t('Choice option cannot be empty.');\n  const duplicateChoiceMsg = t('Choice option already exists.');\n  const defaultOptLabel = t('Default option');\n\n  const { control, setValue, setError, clearErrors, getFieldState } = useFormContext();\n\n  const { fields, append, remove, update, replace } = useFieldArray({\n    control,\n    name: 'formattedChoices',\n  });\n\n  const choices = fields as ChoiceOption[];\n  const updatedChoices = (useWatch({ name: 'formattedChoices' }) as ChoiceOption[]) ?? [];\n\n  const addChoice = (useWatch({ name: 'add-choice' }) as string) ?? '';\n\n  const plainChoices = updatedChoices.map((choice) => choice.name);\n\n  const handleAdd = () => {\n    if (addChoice.length <= 0) {\n      setError('add-choice', { message: emptyChoiceMsg });\n      return;\n    }\n\n    if (plainChoices.includes(addChoice)) {\n      setError('add-choice', { message: duplicateChoiceMsg });\n      return;\n    }\n\n    append({ name: addChoice, default: false });\n    setValue('add-choice', '');\n    clearErrors('add-choice');\n  };\n\n  useEffect(() => {\n    if (type === 'multiplechoice' && choices.filter((c) => c.default).length > 1)\n      replace(updatedChoices.map((choice) => ({ ...choice, default: false })));\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [type]);\n\n  return (\n    <PageFormGroup\n      fieldId={'multiple-choice-options'}\n      label={t('Multiple Choice Options')}\n      labelHelp={\n        <Trans>\n          Refer to the{' '}\n          <a href={docsURL} target=\"_blank\" rel=\"noreferrer\">\n            documentation\n          </a>{' '}\n          for more information.\n        </Trans>\n      }\n      isRequired={true}\n    >\n      <Grid hasGutter>\n        <GridItem span={10}>\n          <Controller\n            name={`add-choice`}\n            control={control}\n            render={({ field, fieldState: { error } }) => (\n              <Stack hasGutter>\n                <TextInput\n                  id={'add-choice-input'}\n                  data-cy={'add-choice-input'}\n                  aria-label={t('Add choice input')}\n                  {...field}\n                  placeholder={t('Enter multiple choice option')}\n                  onKeyUp={(e) => {\n                    if (e.key === 'Enter') {\n                      handleAdd();\n                    }\n                  }}\n                />\n                {error?.message && (\n                  <FormHelperText>\n                    <HelperText>\n                      <HelperTextItem variant=\"error\">{error.message}</HelperTextItem>\n                    </HelperText>\n                  </FormHelperText>\n                )}\n              </Stack>\n            )}\n          />\n        </GridItem>\n        <GridItem span={2}>\n          <Button\n            type=\"button\"\n            variant=\"plain\"\n            aria-label={t('Add choice')}\n            data-cy={'add-choice'}\n            onClick={handleAdd}\n            isDisabled={plainChoices.includes(addChoice) || addChoice?.length === 0}\n          >\n            <PlusCircleIcon />\n          </Button>\n        </GridItem>\n      </Grid>\n\n      <DividerWithSpace />\n\n      {choices.map((choice, index) => (\n        <Flex\n          columnGap={{ default: 'columnGapNone' }}\n          alignContent={{ default: 'alignContentSpaceBetween' }}\n          key={choice.id}\n          style={{ marginBottom: 'var(--pf-v5-global--spacer--sm)' }}\n        >\n          <FlexItem flex={{ default: 'flex_1' }}>\n            <Stack>\n              <Controller\n                name={`formattedChoices[${index}].name`}\n                control={control}\n                rules={{\n                  validate: {\n                    required: (v: string) => {\n                      const { isTouched } = getFieldState(`formattedChoices[${index}].name`);\n\n                      if (v.length <= 0) return emptyChoiceMsg;\n\n                      if (isTouched && plainChoices.filter((pc) => pc === v).length > 1)\n                        return duplicateChoiceMsg;\n                    },\n                  },\n                }}\n                render={({ field, fieldState: { error } }) => (\n                  <>\n                    <TextInput\n                      validated={error?.message ? ValidatedOptions.error : undefined}\n                      id={`choice-option-${index}`}\n                      data-cy={`choice-option-${index}`}\n                      aria-label={t('Choice option')}\n                      {...field}\n                    />\n                    {error?.message && (\n                      <FormHelperText>\n                        <HelperText>\n                          <HelperTextItem variant=\"error\">{error.message}</HelperTextItem>\n                        </HelperText>\n                      </FormHelperText>\n                    )}\n                  </>\n                )}\n              />\n            </Stack>\n          </FlexItem>\n          <FlexItem>\n            <Flex style={{ maxWidth: '180px' }} gap={{ default: 'gapNone' }}>\n              <FlexItem>\n                <Button\n                  type=\"button\"\n                  variant=\"plain\"\n                  aria-label={t('Remove choice')}\n                  data-cy={`remove-choice-${index}`}\n                  onClick={() => {\n                    remove(index);\n                  }}\n                >\n                  <TrashIcon />\n                </Button>\n              </FlexItem>\n              <FlexItem>\n                <Controller\n                  control={control}\n                  name={`formattedChoices[${index}].default`}\n                  render={({ field }) => (\n                    <>\n                      {type === 'multiplechoice' ? (\n                        <Radio\n                          {...field}\n                          data-cy={`choice-radio-${index}`}\n                          id={`choice-radio-${index}`}\n                          label={defaultOptLabel}\n                          onChange={() => {\n                            replace(\n                              updatedChoices.map((choice, i) => ({\n                                ...choice,\n                                default: index === i ? true : false,\n                              }))\n                            );\n                          }}\n                          onClick={() => {\n                            if (choice.default === true)\n                              update(index, { ...choice, default: false });\n                          }}\n                          isChecked={choice.default}\n                          isDisabled={updatedChoices[index]?.name.length <= 0}\n                        />\n                      ) : (\n                        <Checkbox\n                          {...field}\n                          data-cy={`choice-checkbox-${index}`}\n                          id={`choice-checkbox-${index}`}\n                          label={defaultOptLabel}\n                          isChecked={choice.default}\n                          onClick={() => update(index, { ...choice, default: !choice.default })}\n                          isDisabled={updatedChoices[index]?.name.length <= 0}\n                        />\n                      )}\n                    </>\n                  )}\n                />\n              </FlexItem>\n            </Flex>\n          </FlexItem>\n        </Flex>\n      ))}\n    </PageFormGroup>\n  );\n}\n","import { useEffect } from 'react';\nimport { useFormContext, useWatch } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageFormCheckbox,\n  PageFormSelect,\n  PageFormSubmitHandler,\n  PageFormTextArea,\n  PageFormTextInput,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { PageFormGroup } from '../../../../../framework/PageForm/Inputs/PageFormGroup';\nimport { PageFormSection } from '../../../../../framework/PageForm/Utils/PageFormSection';\nimport { useURLSearchParams } from '../../../../../framework/components/useURLSearchParams';\nimport { useGet } from '../../../../common/crud/useGet';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { AwxError } from '../../../common/AwxError';\nimport { AwxPageForm } from '../../../common/AwxPageForm';\nimport {\n  ChoiceOption,\n  MultipleChoiceField,\n  MultipleChoiceFieldType,\n} from '../../../common/MultipleChoiceField';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { Spec, Survey } from '../../../interfaces/Survey';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\ntype ResourceType = 'job_templates' | 'workflow_job_templates';\n\nconst minDefault = 0;\nconst maxDefault = 1024;\n\nexport function EditTemplateSurveyForm({ resourceType }: { resourceType: ResourceType }) {\n  const [searchParams] = useURLSearchParams();\n\n  const questionVariable = searchParams.get('question_variable');\n\n  return (\n    <TemplateSurveyForm\n      mode=\"edit\"\n      resourceType={resourceType}\n      questionVariable={questionVariable}\n    />\n  );\n}\n\nexport function AddTemplateSurveyForm({ resourceType }: { resourceType: ResourceType }) {\n  return <TemplateSurveyForm mode=\"add\" resourceType={resourceType} />;\n}\n\ninterface IProps {\n  resourceType: ResourceType;\n  mode: 'add' | 'edit';\n  questionVariable?: string | null;\n}\n\ninterface FormSpec extends Spec {\n  formattedChoices?: ChoiceOption[];\n}\n\nexport function TemplateSurveyForm(props: IProps) {\n  const { t } = useTranslation();\n  const { id } = useParams<{ id: string }>();\n  const pageNavigate = usePageNavigate();\n  const postRequest = usePostRequest<Survey>();\n\n  const { resourceType, mode, questionVariable } = props;\n\n  const pageNavigateSurveyRoute = () =>\n    pageNavigate(\n      resourceType === 'job_templates'\n        ? AwxRoute.JobTemplateSurvey\n        : AwxRoute.WorkflowJobTemplateSurvey,\n      { params: { id } }\n    );\n\n  if (!questionVariable && mode !== 'add') pageNavigateSurveyRoute();\n\n  const {\n    error,\n    data: survey,\n    isLoading,\n    refresh,\n  } = useGet<Survey>(awxAPI`/${resourceType}/${id ?? ''}/survey_spec/`);\n\n  if (error) return <AwxError error={error} handleRefresh={refresh} />;\n\n  if (isLoading) return <LoadingPage />;\n\n  let question: Spec | undefined;\n  if (mode === 'edit' && questionVariable) {\n    question = survey?.spec.find((q) => q.variable === questionVariable);\n\n    if (!question) pageNavigateSurveyRoute();\n  }\n\n  if (mode === 'edit' && !question) return null;\n\n  const isMultiSelect = (type: string) => type === 'multiselect' || type === 'multiplechoice';\n\n  const displayDuplicateError = (question: Spec, setError: (error: string) => void) => {\n    setError(\n      t(`Survey already contains a question with variable named \"{{question}}\".`, {\n        question: question.variable,\n      })\n    );\n  };\n\n  let formattedChoices;\n  if (question && isMultiSelect(question.type)) {\n    const choices = Array.isArray(question.choices)\n      ? question.choices\n      : question.choices.split('\\n');\n    const defaults = Array.isArray(question?.default)\n      ? question.default\n      : question.default.toString().split('\\n');\n\n    formattedChoices = choices?.map((c, i) => ({\n      name: c,\n      default: defaults?.includes(c) ?? false,\n      id: i.toString(),\n    }));\n  }\n\n  const initialValues: FormSpec = {\n    question_name: question?.question_name || '',\n    question_description: question?.question_description || '',\n    required: question ? question?.required : true,\n    type: question?.type ?? 'text',\n    variable: question?.variable || '',\n    min: question?.min || minDefault,\n    max: question?.max || maxDefault,\n    default: question?.default ?? '',\n    choices: question?.choices ?? [],\n    formattedChoices,\n    new_question: !question,\n  };\n\n  const onSubmit: PageFormSubmitHandler<FormSpec & { 'add-choice'?: string }> = async (\n    newQuestion,\n    setError,\n    setFieldError\n  ) => {\n    const updatedSurvey = {\n      name: survey?.name ?? '',\n      description: survey?.description ?? '',\n      spec: survey?.spec ?? [],\n    };\n\n    if (\n      ['multiplechoice', 'multiselect'].includes(newQuestion.type) &&\n      !newQuestion.formattedChoices?.length\n    ) {\n      setFieldError('add-choice', {\n        message: t`Multiple choices require at least one answer.`,\n      });\n      return;\n    }\n\n    const defaultValue = newQuestion.default\n      ? newQuestion.type === 'integer'\n        ? Number(newQuestion.default)\n        : newQuestion.type === 'float'\n          ? parseFloat(newQuestion.default.toString())\n          : newQuestion?.default?.toString()\n      : '';\n\n    let question: Spec = {\n      max: Number(newQuestion.max),\n      min: Number(newQuestion.min),\n      new_question: newQuestion.new_question,\n      type: newQuestion.type,\n      default: defaultValue,\n      required: newQuestion.required,\n      variable: newQuestion.variable,\n      question_name: newQuestion.question_name,\n      question_description: newQuestion.question_description,\n      choices: newQuestion.choices,\n    };\n\n    const isDuplicate = updatedSurvey.spec.some((q) => q.variable === newQuestion.variable);\n\n    let questions: Spec[];\n\n    if (mode === 'add' && isDuplicate) {\n      displayDuplicateError(question, setError);\n      return;\n    }\n\n    if (Array.isArray(newQuestion.formattedChoices) && isMultiSelect(question.type)) {\n      const choices = newQuestion.formattedChoices?.map((choice) => choice.name) ?? [];\n\n      const defaults =\n        newQuestion.formattedChoices\n          ?.filter((choice) => choice.default)\n          .map((choice) => choice.name)\n          .join('\\n') ?? '';\n\n      question = { ...question, choices, default: defaults };\n    }\n\n    if (mode === 'add') {\n      questions = [...updatedSurvey.spec, question];\n    } else {\n      questions = [...updatedSurvey.spec];\n\n      const selectedQuestionIndex = questions.findIndex(\n        (question) => question.variable === initialValues.variable\n      );\n\n      if (initialValues.variable !== question.variable && isDuplicate) {\n        displayDuplicateError(question, setError);\n        return;\n      }\n\n      if (selectedQuestionIndex === -1) {\n        setError(t(`Survey question not found.`));\n      }\n\n      questions[selectedQuestionIndex] = question;\n    }\n\n    const postBody: Survey = {\n      ...updatedSurvey,\n      spec: questions,\n    };\n\n    try {\n      await postRequest(awxAPI`/${resourceType}/${id ?? ''}/survey_spec/`, postBody);\n      pageNavigateSurveyRoute();\n    } catch (err) {\n      setError(t`Failed to create new survey question.`);\n    }\n  };\n\n  return (\n    <AwxPageForm\n      onSubmit={onSubmit}\n      onCancel={() => pageNavigateSurveyRoute()}\n      submitText={mode === 'add' ? t('Create survey question') : t('Save survey question')}\n      defaultValue={initialValues}\n      disableSubmitOnEnter\n    >\n      <TemplateSurveyInputs />\n    </AwxPageForm>\n  );\n}\n\nfunction TemplateSurveyInputs() {\n  const { t } = useTranslation();\n\n  const answerType = useWatch({ name: 'type' }) as string;\n\n  return (\n    <>\n      <PageFormTextInput\n        id=\"question-name\"\n        name=\"question_name\"\n        type=\"text\"\n        label={t`Question`}\n        isRequired\n      />\n      <PageFormTextInput\n        id=\"question-description\"\n        name=\"question_description\"\n        type=\"text\"\n        label={t`Description`}\n      />\n      <PageFormTextInput\n        id=\"question-variable\"\n        name=\"variable\"\n        type=\"text\"\n        label={t`Answer variable name`}\n        validate={(variable: string) => {\n          if (/\\s/.test(variable)) {\n            return t`This field must not contain spaces.`;\n          }\n          return undefined;\n        }}\n        isRequired\n        labelHelp={t`The suggested format for variable names is lowercase and underscore-separated (for example, foo_bar, user_id, host_name, etc.). Variable names with spaces are not allowed.`}\n      />\n\n      <PageFormSelect\n        name=\"type\"\n        id=\"question-type\"\n        data-cy=\"question-type\"\n        label={t('Answer type')}\n        placeholderText={t('Enter answer type')}\n        options={[\n          { value: 'text', label: t('Text') },\n          { value: 'textarea', label: t('Textarea') },\n          { value: 'password', label: t('Password') },\n          { value: 'multiplechoice', label: t('Multiple Choice (single select)') },\n          { value: 'multiselect', label: t('Multiple Choice (multiple select)') },\n          { value: 'integer', label: t('Integer') },\n          { value: 'float', label: t('Float') },\n        ]}\n        isRequired\n        labelHelp={t`Choose an answer type or format you want as the prompt for the user. Refer to the Ansible Controller Documentation for more additional information about each option.`}\n      />\n\n      <PageFormGroup label={t('Options')}>\n        <PageFormCheckbox\n          id=\"question-required\"\n          data-cy=\"question-required\"\n          label={t`Required`}\n          name=\"required\"\n        />\n      </PageFormGroup>\n\n      {answerType && <SelectedAnswerType answer={answerType} />}\n    </>\n  );\n}\n\nfunction SelectedAnswerType({ answer }: { answer: string }) {\n  const { t } = useTranslation();\n\n  const { setValue, reset } = useFormContext();\n\n  useEffect(() => {\n    setValue('min', minDefault);\n    setValue('max', maxDefault);\n    reset(undefined, { keepValues: true, keepErrors: false });\n  }, [answer, setValue, reset]);\n\n  const min = Number(useWatch({ name: 'min' }));\n  const max = Number(useWatch({ name: 'max' }));\n\n  return (\n    <PageFormSection>\n      {['text', 'textarea', 'password'].includes(answer) && (\n        <>\n          <PageFormTextInput id=\"question-min\" name=\"min\" type=\"number\" label={t`Minimum length`} />\n          <PageFormTextInput id=\"question-max\" name=\"max\" type=\"number\" label={t`Maximum length`} />\n        </>\n      )}\n      {['integer', 'float'].includes(answer) && (\n        <>\n          <PageFormTextInput id=\"question-min\" name=\"min\" type=\"number\" label={t`Minimum`} />\n          <PageFormTextInput id=\"question-max\" name=\"max\" type=\"number\" label={t`Maximum`} />\n        </>\n      )}\n      {['text', 'integer', 'float'].includes(answer) && (\n        <PageFormTextInput\n          id=\"question-default\"\n          name=\"default\"\n          min={min}\n          max={max}\n          maxLength={max}\n          minLength={min}\n          type={answer === 'text' ? 'text' : 'number'}\n          label={t`Default answer`}\n          validate={(value: string) => {\n            if (answer === 'integer') {\n              const num = parseFloat(value);\n              if (!Number.isInteger(num) && /[^0-9]/.test(value)) {\n                return t`This field must be an integer.`;\n              }\n              return undefined;\n            }\n          }}\n        />\n      )}\n      {answer === 'textarea' && (\n        <PageFormTextArea id=\"question-default\" name=\"default\" label={t`Default answer`} />\n      )}\n      {answer === 'password' && (\n        <PageFormTextInput\n          id=\"question-default\"\n          name=\"default\"\n          label={t`Default answer`}\n          type=\"password\"\n        />\n      )}\n      {['multiplechoice', 'multiselect'].includes(answer) && (\n        <MultipleChoiceField type={answer as MultipleChoiceFieldType} />\n      )}\n    </PageFormSection>\n  );\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport useSWR from 'swr';\nimport {\n  PageFormSubmitHandler,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { PageFormSingleSelect } from '../../../../framework/PageForm/Inputs/PageFormSingleSelect';\nimport { PageFormTextInput } from '../../../../framework/PageForm/Inputs/PageFormTextInput';\nimport { PageFormSection } from '../../../../framework/PageForm/Utils/PageFormSection';\nimport { requestGet, requestPatch, swrOptions } from '../../../common/crud/Data';\nimport { usePostRequest } from '../../../common/crud/usePostRequest';\nimport { AwxPageForm } from '../../common/AwxPageForm';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { AwxUser } from '../../interfaces/User';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { PageFormSelectOrganization } from '../organizations/components/PageFormOrganizationSelect';\n\nconst UserType = {\n  SystemAdministrator: 'System administrator',\n  SystemAuditor: 'System auditor',\n  NormalUser: 'Normal user',\n};\n\nexport function CreateUser() {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const navigate = useNavigate();\n  const postRequest = usePostRequest<AwxUser, AwxUser>();\n  const onSubmit: PageFormSubmitHandler<IUserInput> = async (\n    userInput,\n    setError,\n    setFieldError\n  ) => {\n    const { userType, confirmPassword, ...user } = userInput;\n    user.is_superuser = userType === UserType.SystemAdministrator;\n    user.is_system_auditor = userType === UserType.SystemAuditor;\n    if (confirmPassword !== user.password) {\n      setFieldError('confirmPassword', { message: t('Password does not match.') });\n      return false;\n    }\n    const newUser = await postRequest(\n      awxAPI`/organizations/${user.organization!.toString()}/users/`,\n      user\n    );\n    pageNavigate(AwxRoute.UserDetails, { params: { id: newUser.id } });\n  };\n\n  const onCancel = () => navigate(-1);\n  const getPageUrl = useGetPageUrl();\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Create user')}\n        breadcrumbs={[\n          { label: t('Users'), to: getPageUrl(AwxRoute.Users) },\n          { label: t('Create user') },\n        ]}\n      />\n      <AwxPageForm\n        submitText={t('Create user')}\n        onSubmit={onSubmit}\n        cancelText={t('Cancel')}\n        onCancel={onCancel}\n        defaultValue={{ userType: UserType.NormalUser }}\n      >\n        <UserInputs mode=\"create\" />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n\nexport function EditUser() {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const pageNavigate = usePageNavigate();\n  const params = useParams<{ id?: string }>();\n  const id = Number(params.id);\n  const { data: user } = useSWR<AwxUser>(awxAPI`/users/${id.toString()}/`, requestGet, swrOptions);\n\n  const onSubmit: PageFormSubmitHandler<IUserInput> = async (\n    userInput: IUserInput,\n    setError,\n    setFieldError\n  ) => {\n    const { userType, confirmPassword, ...user } = userInput;\n    user.is_superuser = userType === UserType.SystemAdministrator;\n    user.is_system_auditor = userType === UserType.SystemAuditor;\n    if (user.password) {\n      if (confirmPassword !== user.password) {\n        setFieldError('confirmPassword', { message: t('Password does not match.') });\n        return false;\n      }\n    }\n    const newUser = await requestPatch<AwxUser>(awxAPI`/users/${id.toString()}/`, user);\n    pageNavigate(AwxRoute.UserDetails, { params: { id: newUser.id } });\n  };\n\n  const getPageUrl = useGetPageUrl();\n\n  const onCancel = () => navigate(-1);\n\n  if (!user) {\n    return (\n      <PageLayout>\n        <PageHeader\n          breadcrumbs={[\n            { label: t('Users'), to: getPageUrl(AwxRoute.Users) },\n            { label: t('Edit User') },\n          ]}\n        />\n      </PageLayout>\n    );\n  }\n\n  const { password, ...defaultUserValue } = user;\n  const defaultValue: Partial<IUserInput> = {\n    ...defaultUserValue,\n    userType: user.is_superuser\n      ? UserType.SystemAdministrator\n      : user.is_system_auditor\n        ? UserType.SystemAuditor\n        : UserType.NormalUser,\n  };\n  return (\n    <PageLayout>\n      <PageHeader\n        title={user?.username ? t('Edit {{userName}}', { userName: user?.username }) : t('User')}\n        breadcrumbs={[\n          { label: t('Users'), to: getPageUrl(AwxRoute.Users) },\n          {\n            label: user?.username\n              ? t('Edit {{userName}}', { userName: user?.username })\n              : t('User'),\n          },\n        ]}\n      />\n      <AwxPageForm<IUserInput>\n        submitText={t('Save user')}\n        onSubmit={onSubmit}\n        cancelText={t('Cancel')}\n        onCancel={onCancel}\n        defaultValue={defaultValue}\n      >\n        <UserInputs mode=\"edit\" />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n\ntype IUserInput = AwxUser & { userType: string; confirmPassword: string };\n\nfunction UserInputs(props: { mode: 'create' | 'edit' }) {\n  const { mode } = props;\n  const { t } = useTranslation();\n  return (\n    <>\n      <PageFormTextInput<IUserInput>\n        name=\"username\"\n        label={t('Username')}\n        placeholder={t('Enter username')}\n        isRequired\n        maxLength={150}\n        validate={(username: string) => {\n          for (const c of username) {\n            if (\n              !'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890@.+-_'.includes(c)\n            ) {\n              return t('Username may contain only letters, numbers, and @.+-_ characters.');\n            }\n          }\n        }}\n      />\n      <PageFormSingleSelect<IUserInput>\n        name=\"userType\"\n        label={t('User type')}\n        placeholder={t('Select user type')}\n        options={[\n          {\n            label: t('System administrator'),\n            description: t('can edit, change, and update any inventory or automation definition'),\n            value: UserType.SystemAdministrator,\n          },\n          {\n            label: t('System auditor'),\n            description: t(\n              'can see all aspects of the systems automation, but has no permission to run or change automation'\n            ),\n            value: UserType.SystemAuditor,\n          },\n          {\n            label: t('Normal user'),\n            description: t(\n              'has read and write access limited to the resources (such as inventory, projects, and job templates) for which that user has been granted the appropriate roles and privileges'\n            ),\n            value: UserType.NormalUser,\n          },\n        ]}\n        isRequired\n      />\n      {mode === 'create' && (\n        <PageFormSelectOrganization<IUserInput> name=\"organization\" isRequired />\n      )}\n      <PageFormSection>\n        <PageFormTextInput<IUserInput>\n          name=\"password\"\n          label={t('Password')}\n          placeholder={t('Enter password')}\n          type=\"password\"\n          isRequired={mode === 'create'}\n        />\n        <PageFormTextInput<IUserInput>\n          name=\"confirmPassword\"\n          label={t('Confirm password')}\n          placeholder={t('Enter password')}\n          type=\"password\"\n          isRequired={mode === 'create'}\n        />\n      </PageFormSection>\n      <PageFormTextInput<IUserInput>\n        name=\"first_name\"\n        label={t('First name')}\n        placeholder={t('Enter first name')}\n        maxLength={150}\n      />\n      <PageFormTextInput<IUserInput>\n        name=\"last_name\"\n        label={t('Last name')}\n        placeholder={t('Enter last name')}\n        maxLength={150}\n      />\n      <PageFormTextInput<IUserInput>\n        name=\"email\"\n        label={t('Email')}\n        placeholder={t('Enter email')}\n      />\n    </>\n  );\n}\n","import { Label } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport function AuthenticationType<T extends { ldap_dn?: string; auth?: string[] }>(props: {\n  user: T;\n}) {\n  const { user } = props;\n  const { t } = useTranslation();\n  if (user.ldap_dn) {\n    return <Label>{t('LDAP')}</Label>;\n  }\n  if (user.auth && user.auth.length > 0) {\n    return <Label>{t('Social')}</Label>;\n  }\n  return <Label>{t('Local')}</Label>;\n}\n","import { useTranslation } from 'react-i18next';\nimport { DateTimeCell, LabelsCell, PageDetail, PageDetails } from '../../../framework';\nimport { AuthenticationType } from '../../awx/access/users/components/AuthenticationType';\nimport { UserType } from '../../awx/access/users/components/UserType';\nimport { LastModifiedPageDetail } from '../LastModifiedPageDetail';\n\nexport type UserDetailsType = {\n  first_name: string;\n  last_name: string;\n  email: string;\n  username: string;\n} & Partial<{\n  is_superuser: boolean | null;\n  is_system_auditor: boolean | null;\n  ldap_dn: string;\n  auth: string[];\n  created_at: string;\n  created: string;\n  created_on: string;\n  date_joined: string;\n  modified_at: string;\n  modified_on: string;\n  modified: string;\n  last_login: string;\n}>;\n\nexport function UserDetails<T extends UserDetailsType>(props: {\n  user: T;\n  organizations?: {\n    // Organization name\n    name: string;\n    // Link (route) to organization details\n    link: string;\n  }[];\n  options?: {\n    // Shows the authentication type based on the last login\n    showAuthType?: boolean;\n    // Displays user type: System Administrator/ System Auditor/ Normal User\n    showUserType?: boolean;\n  };\n}) {\n  const { t } = useTranslation();\n  const { user, organizations, options } = props;\n\n  return (\n    <PageDetails>\n      <PageDetail label={t('First name')}>{user.first_name}</PageDetail>\n      <PageDetail label={t('Last name')}>{user.last_name}</PageDetail>\n      <PageDetail label={t('Email')}>{user.email}</PageDetail>\n      <PageDetail label={t('Username')}>{user.username}</PageDetail>\n      {organizations && organizations.length > 0 && (\n        <PageDetail label={t('Organization', { count: organizations.length })}>\n          <LabelsCell labelsWithLinks={organizations} />\n        </PageDetail>\n      )}\n      {user.last_login && (\n        <PageDetail label={t('Last login')}>\n          <DateTimeCell value={user.last_login} />\n        </PageDetail>\n      )}\n      {options?.showAuthType && (\n        <PageDetail label={t('Authentication type')}>\n          <AuthenticationType user={user} />\n        </PageDetail>\n      )}{' '}\n      {options?.showUserType && (\n        <PageDetail label={t('User type')}>\n          <UserType user={user} />\n        </PageDetail>\n      )}\n      <PageDetail label={t('Created')}>\n        <DateTimeCell\n          value={user.created ?? user.created_at ?? user.date_joined ?? user.created_on}\n        />\n      </PageDetail>\n      {(user.modified || user.modified_at || user.modified_on) && (\n        <LastModifiedPageDetail\n          data-cy=\"modified\"\n          value={user.modified ?? user.modified_at ?? user.modified_on}\n        />\n      )}\n    </PageDetails>\n  );\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { useMemo } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useGetPageUrl } from '../../../../../framework';\nimport { UserDetails, UserDetailsType } from '../../../../common/access/UserDetails';\nimport { useGet, useGetItem } from '../../../../common/crud/useGet';\nimport { AwxItemsResponse } from '../../../common/AwxItemsResponse';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { Organization } from '../../../interfaces/Organization';\nimport { AwxUser } from '../../../interfaces/User';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\nexport function AwxUserDetails() {\n  const params = useParams<{ id: string }>();\n  const getPageUrl = useGetPageUrl();\n  const { data: user } = useGetItem<AwxUser>(awxAPI`/users`, params.id);\n  const itemsResponse = useGet<AwxItemsResponse<Organization>>(\n    user?.related?.organizations as string\n  );\n  const organizations = useMemo<\n    {\n      name: string;\n      link: string;\n    }[]\n  >(() => {\n    if (itemsResponse?.data?.results) {\n      return itemsResponse?.data?.results.map((organization: Organization) => ({\n        name: organization.name,\n        link: getPageUrl(AwxRoute.OrganizationDetails, {\n          params: { id: organization.id },\n        }),\n      }));\n    }\n    return [];\n  }, [getPageUrl, itemsResponse?.data?.results]);\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <>\n      <UserDetails\n        user={user as UserDetailsType}\n        organizations={organizations}\n        options={{ showAuthType: true, showUserType: true }}\n      />\n    </>\n  );\n}\n","import { Alert, PageSection } from '@patternfly/react-core';\n\nexport function DetailInfo(props: { title: string; description?: string }) {\n  const { title, description } = props;\n  return (\n    <PageSection variant=\"light\">\n      <Alert isInline isPlain variant=\"info\" title={title}>\n        {description && <p>{description}</p>}\n      </Alert>\n    </PageSection>\n  );\n}\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkActionDialog } from '../../../common/useAwxBulkActionDialog';\nimport { Organization } from '../../../interfaces/Organization';\nimport { AwxUser } from '../../../interfaces/User';\n\nexport function useRemoveOrganizationsFromUsers() {\n  const { t } = useTranslation();\n  const organizationProgressDialog = useAwxBulkActionDialog<Organization>();\n  const postRequest = usePostRequest<{ id: number; disassociate: boolean }, Organization>();\n  const removeUserToOrganizations = useCallback(\n    (\n      users: AwxUser[],\n      organizations: Organization[],\n      onComplete?: (organizations: Organization[]) => void\n    ) => {\n      organizationProgressDialog({\n        title: t('Removing user from organizations', {\n          count: organizations.length,\n        }),\n        keyFn: (organization: Organization) => organization.id,\n        items: organizations,\n        actionColumns: [\n          { header: t('Organization'), cell: (organization: Organization) => organization.name },\n        ],\n        actionFn: async (organization: Organization, signal: AbortSignal) => {\n          for (const user of users) {\n            await postRequest(\n              awxAPI`/users/${user.id.toString()}/roles/`,\n              { id: organization.summary_fields.object_roles.member_role.id, disassociate: true },\n              signal\n            );\n          }\n        },\n        processingText: t('Removing user from organizations...', {\n          count: organizations.length,\n        }),\n        onComplete,\n      });\n    },\n    [organizationProgressDialog, postRequest, t]\n  );\n  return removeUserToOrganizations;\n}\n","import { useCallback } from 'react';\nimport { usePageDialog } from '../../../../../framework';\nimport { MultiSelectDialog } from '../../../../../framework/PageDialogs/MultiSelectDialog';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxView } from '../../../common/useAwxView';\nimport { Organization } from '../../../interfaces/Organization';\nimport { useOrganizationsColumns, useOrganizationsFilters } from '../Organizations';\n\nfunction SelectOrganizations(props: {\n  title: string;\n  onSelect: (organizations: Organization[]) => void;\n}) {\n  const toolbarFilters = useOrganizationsFilters();\n  const tableColumns = useOrganizationsColumns({ disableLinks: true });\n  const view = useAwxView<Organization>({\n    url: awxAPI`/organizations/`,\n    toolbarFilters,\n    tableColumns,\n    disableQueryString: true,\n  });\n  return (\n    <MultiSelectDialog\n      {...props}\n      toolbarFilters={toolbarFilters}\n      tableColumns={tableColumns}\n      view={view}\n    />\n  );\n}\n\nexport function useSelectOrganizations() {\n  const [_, setDialog] = usePageDialog();\n  const openSelectOrganizations = useCallback(\n    (title: string, onSelect: (organizations: Organization[]) => void) => {\n      setDialog(<SelectOrganizations title={title} onSelect={onSelect} />);\n    },\n    [setDialog]\n  );\n  return openSelectOrganizations;\n}\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Organization } from '../../../interfaces/Organization';\nimport { AwxUser } from '../../../interfaces/User';\nimport { useAddOrganizationsToUsers } from './useAddOrganizationsToUsers';\nimport { useSelectOrganizations } from './useSelectOrganizations';\n\nexport function useSelectOrganizationsAddUsers(onClose?: (organizations: Organization[]) => void) {\n  const { t } = useTranslation();\n  const selectOrganizations = useSelectOrganizations();\n  const addOrganizationsToUsers = useAddOrganizationsToUsers();\n  const selectOrganizationsAddUsers = useCallback(\n    (users: AwxUser[]) => {\n      selectOrganizations(\n        t('Add users to organizations', { count: users.length }),\n        (organizations: Organization[]) => {\n          addOrganizationsToUsers(users, organizations, onClose);\n        }\n      );\n    },\n    [addOrganizationsToUsers, onClose, selectOrganizations, t]\n  );\n  return selectOrganizationsAddUsers;\n}\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkActionDialog } from '../../../common/useAwxBulkActionDialog';\nimport { Organization } from '../../../interfaces/Organization';\nimport { AwxUser } from '../../../interfaces/User';\n\nexport function useAddOrganizationsToUsers() {\n  const { t } = useTranslation();\n  const organizationProgressDialog = useAwxBulkActionDialog<Organization>();\n  const postRequest = usePostRequest<{ id: number }, Organization>();\n\n  const addUserToOrganizations = useCallback(\n    (\n      users: AwxUser[],\n      organizations: Organization[],\n      onComplete?: (organizations: Organization[]) => void\n    ) => {\n      organizationProgressDialog({\n        title: t('Adding users to organizations', {\n          count: organizations.length,\n        }),\n        keyFn: (organization: Organization) => organization.id,\n        items: organizations,\n        actionColumns: [\n          { header: t('Organization'), cell: (organization: Organization) => organization.name },\n        ],\n        actionFn: async (organization: Organization, signal: AbortSignal) => {\n          for (const user of users) {\n            await postRequest(\n              awxAPI`/users/${user.id.toString()}/roles/`,\n              { id: organization.summary_fields.object_roles.member_role.id },\n              signal\n            );\n          }\n        },\n        processingText: t('Adding user to organizations...', {\n          count: organizations.length,\n        }),\n        onComplete,\n      });\n    },\n    [organizationProgressDialog, postRequest, t]\n  );\n  return addUserToOrganizations;\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { ButtonVariant } from '@patternfly/react-core';\nimport { MinusCircleIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  PageTable,\n} from '../../../../../framework';\nimport { DetailInfo } from '../../../../../framework/components/DetailInfo';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxView } from '../../../common/useAwxView';\nimport { Organization } from '../../../interfaces/Organization';\nimport { AwxUser } from '../../../interfaces/User';\nimport {\n  useOrganizationsColumns,\n  useOrganizationsFilters,\n} from '../../organizations/Organizations';\nimport { useRemoveOrganizationsFromUsers } from '../../organizations/hooks/useRemoveOrganizationsFromUsers';\nimport { useSelectOrganizationsAddUsers } from '../../organizations/hooks/useSelectOrganizationsAddUsers';\n\nexport function UserOrganizations() {\n  const params = useParams<{ id: string }>();\n  const { data: user } = useGetItem<AwxUser>(awxAPI`/users`, params.id);\n\n  if (!user) {\n    return null;\n  }\n  return <UserOrganizationsInternal user={user} />;\n}\n\nfunction UserOrganizationsInternal(props: { user: AwxUser }) {\n  const { t } = useTranslation();\n  const { user } = props;\n  const toolbarFilters = useOrganizationsFilters();\n  const tableColumns = useOrganizationsColumns();\n\n  const view = useAwxView<Organization>({\n    url: awxAPI`/users/${user.id.toString()}/organizations/`,\n    toolbarFilters,\n    disableQueryString: true,\n  });\n\n  const selectOrganizationsAddUsers = useSelectOrganizationsAddUsers(view.selectItemsAndRefresh);\n  const removeOrganizationsFromUsers = useRemoveOrganizationsFromUsers();\n  const toolbarActions = useMemo<IPageAction<Organization>[]>(\n    () => [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.None,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        icon: PlusCircleIcon,\n        label: t('Add users to organizations'),\n        onClick: () => selectOrganizationsAddUsers([user]),\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: MinusCircleIcon,\n        label: t('Remove users from organizations'),\n        onClick: () =>\n          removeOrganizationsFromUsers([user], view.selectedItems, view.unselectItemsAndRefresh),\n        isDanger: true,\n      },\n    ],\n    [\n      removeOrganizationsFromUsers,\n      selectOrganizationsAddUsers,\n      t,\n      user,\n      view.selectedItems,\n      view.unselectItemsAndRefresh,\n    ]\n  );\n  const rowActions = useMemo<IPageAction<Organization>[]>(\n    () => [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: MinusCircleIcon,\n        label: t('Remove user from organization'),\n        onClick: (organization) =>\n          removeOrganizationsFromUsers([user], [organization], view.unselectItemsAndRefresh),\n        isDanger: true,\n      },\n    ],\n    [removeOrganizationsFromUsers, t, user, view.unselectItemsAndRefresh]\n  );\n  return (\n    <>\n      <DetailInfo\n        title={t(\n          'Adding a user to an organization adds them as a member only. Permissions can be granted using teams and user roles.'\n        )}\n      />\n      <PageTable<Organization>\n        id=\"awx-organizations-table\"\n        toolbarFilters={toolbarFilters}\n        tableColumns={tableColumns}\n        toolbarActions={toolbarActions}\n        rowActions={rowActions}\n        errorStateTitle={t('Error loading organizations')}\n        emptyStateTitle={t('User is not a member of any organizations.')}\n        emptyStateDescription={t('To get started, add the user to an organization.')}\n        emptyStateButtonIcon={<PlusCircleIcon />}\n        emptyStateButtonText={t('Add user to organization')}\n        emptyStateButtonClick={() => selectOrganizationsAddUsers([user])}\n        {...view}\n      />\n    </>\n  );\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { compareStrings, TextCell } from '../../../../../framework';\nimport { getItemKey, requestDelete } from '../../../../common/crud/Data';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { AwxUser } from '../../../interfaces/User';\nimport { useUsersColumns } from './useUsersColumns';\n\nexport function useDeleteUsers(onComplete: (users: AwxUser[]) => void) {\n  const { t } = useTranslation();\n  const confirmationColumns = useUsersColumns({ disableLinks: true, disableSort: true });\n  const deleteActionNameColumn = useMemo(\n    () => ({\n      header: t('Username'),\n      cell: (user: AwxUser) => <TextCell text={user.username} />,\n      sort: 'username',\n      maxWidth: 200,\n    }),\n    [t]\n  );\n  const actionColumns = useMemo(() => [deleteActionNameColumn], [deleteActionNameColumn]);\n  const cannotDeleteUser = (user: AwxUser) => {\n    return user?.summary_fields?.user_capabilities?.delete\n      ? undefined\n      : t('The user cannot be deleted due to insufficient permissions.');\n  };\n  const bulkAction = useAwxBulkConfirmation<AwxUser>();\n  const deleteUsers = (users: AwxUser[]) => {\n    const undeletableUsers = users.filter(cannotDeleteUser);\n\n    bulkAction({\n      title: t('Permanently delete users', { count: users.length }),\n      confirmText: t('Yes, I confirm that I want to delete these {{count}} users.', {\n        count: users.length - undeletableUsers.length,\n      }),\n      actionButtonText: t('Delete users', { count: users.length }),\n      items: users.sort((l, r) => compareStrings(l.username, r.username)),\n      alertPrompts:\n        undeletableUsers.length > 0\n          ? [\n              t(\n                '{{count}} of the selected users cannot be deleted due to insufficient permissions.',\n                {\n                  count: undeletableUsers.length,\n                }\n              ),\n            ]\n          : undefined,\n      isItemNonActionable: cannotDeleteUser,\n      keyFn: getItemKey,\n      isDanger: true,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: (user: AwxUser, signal) =>\n        requestDelete(awxAPI`/users/${user.id.toString()}/`, signal),\n    });\n  };\n  return deleteUsers;\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { PencilAltIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  PageActions,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { LoadingPage } from '../../../../../framework/components/LoadingPage';\nimport { PageRoutedTabs } from '../../../../common/PageRoutedTabs';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { AwxError } from '../../../common/AwxError';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxActiveUser } from '../../../common/useAwxActiveUser';\nimport { AwxUser } from '../../../interfaces/User';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useViewActivityStream } from '../../common/useViewActivityStream';\nimport { useDeleteUsers } from '../hooks/useDeleteUsers';\n\nexport function UserPage() {\n  const { t } = useTranslation();\n  const params = useParams<{ id: string }>();\n  const { error, data: user, refresh } = useGetItem<AwxUser>(awxAPI`/users`, params.id);\n  const pageNavigate = usePageNavigate();\n  const { activeAwxUser } = useAwxActiveUser();\n\n  const deleteUsers = useDeleteUsers((deleted: AwxUser[]) => {\n    if (deleted.length > 0) {\n      pageNavigate(AwxRoute.Users);\n    }\n  });\n  const activityStream = useViewActivityStream('user');\n  const itemActions: IPageAction<AwxUser>[] = useMemo(() => {\n    const itemActions: IPageAction<AwxUser>[] = [\n      ...activityStream,\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        icon: PencilAltIcon,\n        label: t('Edit user'),\n        onClick: (user) => pageNavigate(AwxRoute.EditUser, { params: { id: user.id } }),\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: TrashIcon,\n        label: t('Delete user'),\n        onClick: (user) => deleteUsers([user]),\n        isDanger: true,\n      },\n    ];\n    return itemActions;\n  }, [t, pageNavigate, deleteUsers, activityStream]);\n\n  const getPageUrl = useGetPageUrl();\n\n  const pageTabs = [\n    { label: t('Details'), page: AwxRoute.UserDetails },\n    { label: t('Organizations'), page: AwxRoute.UserOrganizations },\n    { label: t('Teams'), page: AwxRoute.UserTeams },\n    { label: t('Roles'), page: AwxRoute.UserRoles },\n  ];\n\n  // add tokens tab if the user from params(URL path) matches active user\n  if (activeAwxUser?.id !== undefined && activeAwxUser?.id.toString() === params.id) {\n    pageTabs.push({ label: t('Tokens'), page: AwxRoute.UserTokens });\n  }\n\n  if (error) return <AwxError error={error} handleRefresh={refresh} />;\n  if (!user) return <LoadingPage breadcrumbs tabs />;\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={user.username}\n        breadcrumbs={[\n          { label: t('Users'), to: getPageUrl(AwxRoute.Users) },\n          { label: user.username },\n        ]}\n        headerActions={\n          <PageActions<AwxUser>\n            actions={itemActions}\n            position={DropdownPosition.right}\n            selectedItem={user}\n          />\n        }\n      />\n      <PageRoutedTabs\n        backTab={{\n          label: t('Back to Users'),\n          page: AwxRoute.Users,\n          persistentFilterKey: 'users',\n        }}\n        tabs={pageTabs}\n        params={{ id: user.id }}\n      />\n    </PageLayout>\n  );\n}\n","import { useParams } from 'react-router-dom';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { ResourceAccess } from '../../../../common/access/components/ResourceAccess';\n\nexport function UserRoles(props: { id?: string; addRolesRoute?: string }) {\n  const params = useParams<{ id: string }>();\n  return (\n    <ResourceAccess\n      service=\"awx\"\n      id={props.id || params.id || ''}\n      type=\"user-roles\"\n      addRolesRoute={props.addRolesRoute || AwxRoute.AddRolesToUser}\n    />\n  );\n}\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkActionDialog } from '../../../common/useAwxBulkActionDialog';\nimport { Team } from '../../../interfaces/Team';\nimport { AwxUser } from '../../../interfaces/User';\n\nexport function useRemoveTeamsFromUsers(onComplete?: (team: Team[]) => void) {\n  const { t } = useTranslation();\n  const bulkProgressDialog = useAwxBulkActionDialog<Team>();\n  const postRequest = usePostRequest();\n  const removeUserToTeams = useCallback(\n    (users: AwxUser[], teams: Team[]) => {\n      bulkProgressDialog({\n        title: t('Removing user from teams', {\n          count: teams.length,\n        }),\n        keyFn: (team: Team) => team.id,\n        items: teams,\n        actionColumns: [{ header: t('Team'), cell: (team: Team) => team.name }],\n        actionFn: async (team: Team, signal: AbortSignal) => {\n          for (const user of users) {\n            await postRequest(\n              awxAPI`/users/${user.id.toString()}/roles/`,\n              { id: team.summary_fields.object_roles.member_role.id, disassociate: true },\n              signal\n            );\n          }\n        },\n        processingText: t('Removing user from teams...', {\n          count: teams.length,\n        }),\n        onComplete,\n      });\n    },\n    [bulkProgressDialog, t, onComplete, postRequest]\n  );\n  return removeUserToTeams;\n}\n","import { useCallback } from 'react';\nimport { usePageDialog } from '../../../../../framework';\nimport { MultiSelectDialog } from '../../../../../framework/PageDialogs/MultiSelectDialog';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxView } from '../../../common/useAwxView';\nimport { Team } from '../../../interfaces/Team';\nimport { useTeamsColumns } from './useTeamsColumns';\nimport { useTeamsFilters } from './useTeamsFilters';\n\nfunction SelectTeams(props: { title: string; onSelect: (teams: Team[]) => void }) {\n  const toolbarFilters = useTeamsFilters();\n  const tableColumns = useTeamsColumns({ disableLinks: true });\n  const view = useAwxView<Team>({\n    url: awxAPI`/teams/`,\n    toolbarFilters,\n    tableColumns,\n    disableQueryString: true,\n  });\n  return (\n    <MultiSelectDialog\n      {...props}\n      toolbarFilters={toolbarFilters}\n      tableColumns={tableColumns}\n      view={view}\n    />\n  );\n}\n\nexport function useSelectTeams() {\n  const [_, setDialog] = usePageDialog();\n  const openSelectTeams = useCallback(\n    (title: string, onSelect: (teams: Team[]) => void) => {\n      setDialog(<SelectTeams title={title} onSelect={onSelect} />);\n    },\n    [setDialog]\n  );\n  return openSelectTeams;\n}\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Team } from '../../../interfaces/Team';\nimport { AwxUser } from '../../../interfaces/User';\nimport { useAddTeamsToUsers } from './useAddTeamsToUsers';\nimport { useSelectTeams } from './useSelectTeams';\n\nexport function useSelectTeamsAddUsers(onClose?: (teams: Team[]) => void) {\n  const { t } = useTranslation();\n  const selectTeams = useSelectTeams();\n  const addTeamsToUsers = useAddTeamsToUsers();\n  const selectTeamsAddUsers = useCallback(\n    (users: AwxUser[]) => {\n      selectTeams(t('Add users to teams', { count: users.length }), (teams: Team[]) => {\n        addTeamsToUsers(teams, users, onClose);\n      });\n    },\n    [addTeamsToUsers, onClose, selectTeams, t]\n  );\n  return selectTeamsAddUsers;\n}\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkActionDialog } from '../../../common/useAwxBulkActionDialog';\nimport { Team } from '../../../interfaces/Team';\nimport { AwxUser } from '../../../interfaces/User';\n\nexport function useAddTeamsToUsers() {\n  const { t } = useTranslation();\n  const teamProgressDialog = useAwxBulkActionDialog<Team>();\n  const postRequest = usePostRequest();\n  const addTeamsToUser = useCallback(\n    (teams: Team[], users: AwxUser[], onComplete?: (teams: Team[]) => void) => {\n      teamProgressDialog({\n        title: t('Adding user to teams', { count: teams.length }),\n        keyFn: (team: Team) => team.id,\n        items: teams,\n        actionColumns: [{ header: t('Team'), cell: (team: Team) => team.name }],\n        actionFn: async (team: Team, signal: AbortSignal) => {\n          for (const user of users) {\n            await postRequest(\n              awxAPI`/users/${user.id.toString()}/roles/`,\n              { id: team.summary_fields.object_roles.member_role.id },\n              signal\n            );\n          }\n        },\n        processingText: t('Adding user to teams...', { count: teams.length }),\n        onComplete,\n      });\n    },\n    [teamProgressDialog, t, postRequest]\n  );\n  return addTeamsToUser;\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { ButtonVariant } from '@patternfly/react-core';\nimport { CubesIcon, MinusCircleIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  PageTable,\n} from '../../../../../framework';\nimport { DetailInfo } from '../../../../../framework/components/DetailInfo';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { useOptions } from '../../../../common/crud/useOptions';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxView } from '../../../common/useAwxView';\nimport { ActionsResponse, OptionsResponse } from '../../../interfaces/OptionsResponse';\nimport { Team } from '../../../interfaces/Team';\nimport { AwxUser } from '../../../interfaces/User';\nimport { useRemoveTeamsFromUsers } from '../../teams/hooks/useRemoveTeamsFromUsers';\nimport { useSelectTeamsAddUsers } from '../../teams/hooks/useSelectTeamsAddUsers';\nimport { useTeamsColumns } from '../../teams/hooks/useTeamsColumns';\nimport { useTeamsFilters } from '../../teams/hooks/useTeamsFilters';\n\nexport function UserTeams() {\n  const params = useParams<{ id: string }>();\n  const { data: user } = useGetItem<AwxUser>(awxAPI`/users`, params.id);\n\n  if (!user) {\n    return null;\n  }\n  return <UserTeamsInternal user={user} />;\n}\n\nfunction UserTeamsInternal(props: { user: AwxUser }) {\n  const { user } = props;\n  const { t } = useTranslation();\n  const toolbarFilters = useTeamsFilters();\n  const tableColumns = useTeamsColumns();\n  const view = useAwxView<Team>({\n    url: awxAPI`/users/${user.id.toString()}/teams/`,\n    toolbarFilters,\n    disableQueryString: true,\n  });\n  const selectTeamsAddUsers = useSelectTeamsAddUsers(view.selectItemsAndRefresh);\n  const removeTeamsFromUsers = useRemoveTeamsFromUsers(view.unselectItemsAndRefresh);\n  const { data } = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/users/`);\n  const canAddUserToTeam = Boolean(data && data.actions && data.actions['POST']);\n\n  const toolbarActions = useMemo<IPageAction<Team>[]>(\n    () => [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.None,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        icon: PlusCircleIcon,\n        label: t('Add users to teams'),\n        isDisabled: canAddUserToTeam\n          ? undefined\n          : t(\n              'You do not have permissions to add this user to a team. Please contact your organization administrator if there is an issue with your access.'\n            ),\n        onClick: () => selectTeamsAddUsers([user]),\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: MinusCircleIcon,\n        label: t('Remove users from teams'),\n        onClick: () => removeTeamsFromUsers([user], view.selectedItems),\n        isDanger: true,\n      },\n    ],\n    [t, canAddUserToTeam, selectTeamsAddUsers, user, removeTeamsFromUsers, view.selectedItems]\n  );\n  const rowActions = useMemo<IPageAction<Team>[]>(\n    () => [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: MinusCircleIcon,\n        label: t('Remove user from team'),\n        onClick: (team: Team) => removeTeamsFromUsers([user], [team]),\n        isDanger: true,\n      },\n    ],\n    [removeTeamsFromUsers, t, user]\n  );\n  return (\n    <>\n      <DetailInfo\n        title={t('Being a team member grants the user all the permissions of the team.')}\n      />\n      <PageTable<Team>\n        id=\"awx-teams-table\"\n        toolbarFilters={toolbarFilters}\n        tableColumns={tableColumns}\n        toolbarActions={toolbarActions}\n        rowActions={rowActions}\n        errorStateTitle={t('Error loading teams')}\n        emptyStateTitle={\n          canAddUserToTeam\n            ? t('This user currently does not belong to any teams.')\n            : t('You do not have permissions to add this user to a team.')\n        }\n        emptyStateDescription={\n          canAddUserToTeam\n            ? t('Please add a team by using the button below.')\n            : t(\n                'Please contact your organization administrator if there is an issue with your access.'\n              )\n        }\n        emptyStateIcon={canAddUserToTeam ? undefined : CubesIcon}\n        emptyStateButtonText={canAddUserToTeam ? t('Add team') : undefined}\n        emptyStateButtonIcon={canAddUserToTeam ? <PlusCircleIcon /> : null}\n        emptyStateButtonClick={canAddUserToTeam ? () => selectTeamsAddUsers([user]) : undefined}\n        {...view}\n      />\n    </>\n  );\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ITableColumn, TextCell, useGetPageUrl } from '../../../../../framework';\nimport { Token } from '../../../interfaces/Token';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useCreatedColumn, useModifiedColumn } from '../../../../common/columns';\n\nexport function useUserTokensColumns(options?: { disableLinks?: boolean; disableSort?: boolean }) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const createdColumn = useCreatedColumn(options);\n  const modifiedColumn = useModifiedColumn(options);\n\n  return useMemo<ITableColumn<Token>[]>(\n    () => [\n      {\n        header: t('Application name'),\n        cell: (token) => (\n          <TextCell\n            text={\n              token.summary_fields?.application?.name\n                ? token.summary_fields.application.name\n                : t('Personal access token')\n            }\n            to={\n              options?.disableLinks\n                ? undefined\n                : getPageUrl(AwxRoute.UserTokenDetails, {\n                    params: { id: token.summary_fields.user.id, tokenid: token.id.toString() },\n                  })\n            }\n          />\n        ),\n        maxWidth: 120,\n        defaultSort: true,\n        defaultSortDirection: 'asc',\n        sort: options?.disableSort ? undefined : 'id',\n      },\n      {\n        header: t('Description'),\n        type: 'text',\n        value: (token) => token.description,\n        sort: options?.disableSort ? undefined : 'description',\n      },\n      {\n        header: t('Scope'),\n        type: 'text',\n        value: (token) => token.scope,\n        sort: options?.disableSort ? undefined : 'scope',\n      },\n      {\n        header: t('Expires'),\n        type: 'datetime',\n        value: (token) => token.expires,\n        sort: options?.disableSort ? undefined : 'expires',\n      },\n      createdColumn,\n      modifiedColumn,\n    ],\n    [createdColumn, getPageUrl, modifiedColumn, options?.disableLinks, options?.disableSort, t]\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { compareStrings } from '../../../../../framework';\nimport { getItemKey, requestDelete } from '../../../../common/crud/Data';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { Token } from '../../../interfaces/Token';\nimport { useUserTokensColumns } from './useUserTokensColumns';\n\nexport function useDeleteUserTokens(onComplete: (items: Token[]) => void) {\n  const { t } = useTranslation();\n  const userTokensColumns = useUserTokensColumns({ disableLinks: true, disableSort: true });\n  const bulkAction = useAwxBulkConfirmation<Token>();\n  const deleteTokens = (tokens: Token[]) => {\n    bulkAction({\n      title: tokens.length === 1 ? t('Permanently delete token') : t('Permanently delete tokens'),\n      confirmText:\n        tokens.length === 1\n          ? t('Yes, I confirm that I want to delete this token.')\n          : t('Yes, I confirm that I want to delete these {{count}} tokens.', {\n              count: tokens.length,\n            }),\n      actionButtonText: t('Delete token', { count: tokens.length }),\n      items: tokens.sort((l, r) =>\n        compareStrings(l.summary_fields.user.username, r.summary_fields.user.username)\n      ),\n      keyFn: getItemKey,\n      isDanger: true,\n      confirmationColumns: userTokensColumns,\n      actionColumns: userTokensColumns,\n      onComplete,\n      actionFn: (token: Token, signal) =>\n        requestDelete(awxAPI`/tokens/${token.id.toString()}/`, signal),\n    });\n  };\n  return deleteTokens;\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { useEffect, useMemo } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport {\n  PageLayout,\n  PageTable,\n  usePageNavigate,\n  LoadingPage,\n  IPageAction,\n  PageActionType,\n  PageActionSelection,\n  useGetPageUrl,\n} from '../../../../../framework';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useAwxActiveUser } from '../../../common/useAwxActiveUser';\nimport { useAwxView } from '../../../common/useAwxView';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { AwxUser } from '../../../interfaces/User';\nimport { Token } from '../../../interfaces/Token';\nimport { useUserTokensColumns } from '../hooks/useUserTokensColumns';\nimport { DetailInfo } from '../../../../../framework/components/DetailInfo';\nimport { useUserTokensFilters } from '../hooks/useUserTokensFilters';\nimport { ButtonVariant } from '@patternfly/react-core';\nimport { PlusCircleIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useDeleteUserTokens } from '../hooks/useDeleteUserTokens';\n\nexport function UserTokens(props: {\n  id?: string;\n  infoMessage?: string;\n  createTokenRoute?: string;\n}) {\n  const params = useParams<{ id: string }>();\n  const userId = props.id || params.id;\n  const { activeAwxUser } = useAwxActiveUser();\n  const pageNavigate = usePageNavigate();\n\n  useEffect(() => {\n    if (activeAwxUser === undefined || activeAwxUser?.id.toString() !== userId) {\n      // redirect to user details for the active/logged-in user\n      pageNavigate(AwxRoute.UserDetails, { params: { id: activeAwxUser?.id } });\n    }\n  }, [activeAwxUser, userId, pageNavigate]);\n\n  if (!activeAwxUser) return <LoadingPage breadcrumbs tabs />;\n\n  return activeAwxUser?.id.toString() === userId ? (\n    <UserTokensInternal\n      user={activeAwxUser}\n      infoMessage={props.infoMessage}\n      createRoute={props.createTokenRoute || AwxRoute.CreateUserToken}\n    />\n  ) : (\n    <></>\n  );\n}\n\nfunction UserTokensInternal(props: { infoMessage?: string; user: AwxUser; createRoute: string }) {\n  const { user } = props;\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n\n  const tableColumns = useUserTokensColumns();\n  const toolbarFilters = useUserTokensFilters();\n  const view = useAwxView<Token>({\n    url: awxAPI`/users/${user.id.toString()}/tokens/`,\n    toolbarFilters,\n    tableColumns,\n  });\n  const deleteTokens = useDeleteUserTokens(view.unselectItemsAndRefresh);\n\n  const toolbarActions = useMemo<IPageAction<Token>[]>(\n    () => [\n      {\n        type: PageActionType.Link,\n        selection: PageActionSelection.None,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        icon: PlusCircleIcon,\n        label: t('Create token'),\n        href: getPageUrl(props.createRoute, { params: { id: user.id } }),\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: TrashIcon,\n        label: t('Delete tokens'),\n        isDanger: true,\n        onClick: deleteTokens,\n      },\n    ],\n    [deleteTokens, getPageUrl, t, user.id, props.createRoute]\n  );\n\n  const rowActions = useMemo<IPageAction<Token>[]>(\n    () => [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: TrashIcon,\n        label: t('Delete token'),\n        isDanger: true,\n        isPinned: true,\n        onClick: (token) => {\n          deleteTokens([token]);\n        },\n      },\n    ],\n    [deleteTokens, t]\n  );\n\n  return (\n    <PageLayout>\n      {props.infoMessage && <DetailInfo title={t(props.infoMessage)}></DetailInfo>}\n      <PageTable<Token>\n        id=\"awx-user-tokens\"\n        errorStateTitle={t('Error loading tokens')}\n        emptyStateTitle={t('There are currently no tokens.')}\n        emptyStateDescription={t('Create tokens by clicking the button below.')}\n        emptyStateButtonIcon={<PlusCircleIcon />}\n        emptyStateActions={toolbarActions.slice(0, 1)}\n        tableColumns={tableColumns}\n        toolbarFilters={toolbarFilters}\n        toolbarActions={toolbarActions}\n        rowActions={rowActions}\n        {...view}\n      />\n    </PageLayout>\n  );\n}\n","import { useDynamicToolbarFilters } from '../../../common/useDynamicFilters';\n\nexport function useUserTokensFilters() {\n  return useDynamicToolbarFilters({\n    optionsPath: 'tokens',\n    preSortedKeys: ['description', 'scope', 'id'],\n    preFilledValueKeys: {\n      id: {\n        apiPath: 'tokens',\n      },\n    },\n  });\n}\n","import { useParams } from 'react-router-dom';\nimport { LoadingPage, PageDetails, PageDetailsFromColumns } from '../../../../../framework';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { AwxError } from '../../../common/AwxError';\nimport { Token } from '../../../interfaces/Token';\nimport { AwxUser } from '../../../interfaces/User';\nimport { useUserTokensColumns } from '../hooks/useUserTokensColumns';\n\nexport function UserTokenDetails() {\n  const params = useParams<{ id: string; tokenid: string }>();\n  const {\n    error: userError,\n    data: user,\n    refresh: refreshUser,\n  } = useGetItem<AwxUser>(awxAPI`/users`, params.id);\n  const {\n    error: tokenError,\n    data: token,\n    refresh: refreshToken,\n  } = useGetItem<Token>(awxAPI`/tokens`, params.tokenid);\n\n  if (userError) return <AwxError error={userError} handleRefresh={refreshUser} />;\n  if (tokenError) return <AwxError error={tokenError} handleRefresh={refreshToken} />;\n\n  if (!user || !token) return <LoadingPage breadcrumbs tabs />;\n\n  return <UserTokenDetailsInternal token={token} />;\n}\n\nfunction UserTokenDetailsInternal(props: { token: Token }) {\n  const { token } = props;\n\n  const userTokensColumns = useUserTokensColumns({ disableLinks: true });\n\n  return (\n    <PageDetails>\n      <PageDetailsFromColumns columns={userTokensColumns} item={token}></PageDetailsFromColumns>\n    </PageDetails>\n  );\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport {\n  CubesIcon,\n  MinusCircleIcon,\n  PencilAltIcon,\n  PlusCircleIcon,\n  TrashIcon,\n} from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IPageAction,\n  PageActionSelection,\n  PageActionType,\n  PageHeader,\n  PageLayout,\n  PageTable,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { usePersistentFilters } from '../../../common/PersistentFilters';\nimport { useOptions } from '../../../common/crud/useOptions';\nimport { ActivityStreamIcon } from '../../common/ActivityStreamIcon';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { useAwxConfig } from '../../common/useAwxConfig';\nimport { useAwxView } from '../../common/useAwxView';\nimport { useGetDocsUrl } from '../../common/util/useGetDocsUrl';\nimport { ActionsResponse, OptionsResponse } from '../../interfaces/OptionsResponse';\nimport { AwxUser } from '../../interfaces/User';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { useSelectOrganizationsAddUsers } from '../organizations/hooks/useSelectOrganizationsAddUsers';\nimport { useSelectOrganizationsRemoveUsers } from '../organizations/hooks/useSelectOrganizationsRemoveUsers';\nimport { useSelectTeamsAddUsers } from '../teams/hooks/useSelectTeamsAddUsers';\nimport { useSelectTeamsRemoveUsers } from '../teams/hooks/useSelectTeamsRemoveUsers';\nimport { useDeleteUsers } from './hooks/useDeleteUsers';\nimport { useUsersColumns } from './hooks/useUsersColumns';\nimport { useUsersFilters } from './hooks/useUsersFilters';\n\nexport function Users() {\n  const { t } = useTranslation();\n  const product: string = process.env.PRODUCT ?? t('AWX');\n  const pageNavigate = usePageNavigate();\n  const getPageUrl = useGetPageUrl();\n  usePersistentFilters('users');\n  const config = useAwxConfig();\n\n  const toolbarFilters = useUsersFilters();\n\n  const tableColumns = useUsersColumns();\n\n  const view = useAwxView<AwxUser>({ url: awxAPI`/users/`, toolbarFilters, tableColumns });\n\n  const deleteUsers = useDeleteUsers(view.unselectItemsAndRefresh);\n\n  const selectOrganizationsAddUsers = useSelectOrganizationsAddUsers();\n  const selectTeamsAddUsers = useSelectTeamsAddUsers();\n  const selectOrganizationsRemoveUsers = useSelectOrganizationsRemoveUsers();\n  const selectTeamsRemoveUsers = useSelectTeamsRemoveUsers();\n\n  const { data } = useOptions<OptionsResponse<ActionsResponse>>(awxAPI`/users/`);\n  const canCreateUser = Boolean(data && data.actions && data.actions['POST']);\n\n  const toolbarActions = useMemo<IPageAction<AwxUser>[]>(\n    () => [\n      {\n        type: PageActionType.Link,\n        selection: PageActionSelection.None,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        icon: PlusCircleIcon,\n        label: t('Create user'),\n        isDisabled: canCreateUser\n          ? undefined\n          : t(\n              'You do not have permission to create a user. Please contact your system administrator if there is an issue with your access.'\n            ),\n        href: getPageUrl(AwxRoute.CreateUser),\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: PlusCircleIcon,\n        label: t('Add users to teams'),\n        onClick: () => selectTeamsAddUsers(view.selectedItems),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: MinusCircleIcon,\n        label: t('Remove users from teams'),\n        onClick: () => selectTeamsRemoveUsers(view.selectedItems),\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: PlusCircleIcon,\n        label: t('Add users to organizations'),\n        onClick: () => selectOrganizationsAddUsers(view.selectedItems),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: MinusCircleIcon,\n        label: t('Remove users from organizations'),\n        onClick: () => selectOrganizationsRemoveUsers(view.selectedItems),\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: TrashIcon,\n        label: t('Delete users'),\n        onClick: deleteUsers,\n        isDanger: true,\n      },\n    ],\n    [\n      t,\n      canCreateUser,\n      getPageUrl,\n      deleteUsers,\n      selectTeamsAddUsers,\n      view.selectedItems,\n      selectTeamsRemoveUsers,\n      selectOrganizationsAddUsers,\n      selectOrganizationsRemoveUsers,\n    ]\n  );\n\n  const rowActions = useMemo<IPageAction<AwxUser>[]>(() => {\n    const cannotDeleteUser = (user: AwxUser) =>\n      user?.summary_fields?.user_capabilities?.delete\n        ? ''\n        : t(`The user cannot be deleted due to insufficient permissions.`);\n    const cannotEditUser = (user: AwxUser) =>\n      user?.summary_fields?.user_capabilities?.edit\n        ? ''\n        : t(`The user cannot be edited due to insufficient permissions.`);\n\n    return [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        // variant: ButtonVariant.primary,\n        isPinned: true,\n        icon: PencilAltIcon,\n        label: t('Edit user'),\n        isDisabled: (user: AwxUser) => cannotEditUser(user),\n        onClick: (user) => pageNavigate(AwxRoute.EditUser, { params: { id: user.id } }),\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: PlusCircleIcon,\n        label: t('Add user to teams'),\n        onClick: (user) => selectTeamsAddUsers([user]),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: MinusCircleIcon,\n        label: t('Remove user from teams'),\n        onClick: (user) => selectTeamsRemoveUsers([user]),\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: PlusCircleIcon,\n        label: t('Add user to organizations'),\n        onClick: (user) => selectOrganizationsAddUsers([user]),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: MinusCircleIcon,\n        label: t('Remove user from organizations'),\n        onClick: (user) => selectOrganizationsRemoveUsers([user]),\n      },\n      { type: PageActionType.Seperator },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: TrashIcon,\n        label: t('Delete user'),\n        isDisabled: (user: AwxUser) => cannotDeleteUser(user),\n        onClick: (user) => deleteUsers([user]),\n        isDanger: true,\n      },\n    ];\n  }, [\n    deleteUsers,\n    pageNavigate,\n    selectOrganizationsAddUsers,\n    selectOrganizationsRemoveUsers,\n    selectTeamsAddUsers,\n    selectTeamsRemoveUsers,\n    t,\n  ]);\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Users')}\n        titleHelpTitle={t('Users')}\n        titleHelp={t(\n          `A user is someone who has access to {{product}} with associated permissions and credentials.`,\n          { product }\n        )}\n        titleDocLink={useGetDocsUrl(config, 'users')}\n        description={t(\n          `A user is someone who has access to {{product}} with associated permissions and credentials.`,\n          { product }\n        )}\n        headerActions={<ActivityStreamIcon type={'user'} />}\n      />\n      <PageTable<AwxUser>\n        id=\"awx-users-table\"\n        toolbarFilters={toolbarFilters}\n        toolbarActions={toolbarActions}\n        tableColumns={tableColumns}\n        rowActions={rowActions}\n        errorStateTitle={t('Error loading users')}\n        emptyStateTitle={\n          canCreateUser\n            ? t('There are currently no users added.')\n            : t('You do not have permission to create a user')\n        }\n        emptyStateDescription={\n          canCreateUser\n            ? t('Please create a user by using the button below.')\n            : t(\n                'Please contact your organization administrator if there is an issue with your access.'\n              )\n        }\n        emptyStateIcon={canCreateUser ? undefined : CubesIcon}\n        emptyStateButtonIcon={<PlusCircleIcon />}\n        emptyStateButtonText={canCreateUser ? t('Create user') : undefined}\n        emptyStateButtonClick={canCreateUser ? () => pageNavigate(AwxRoute.CreateUser) : undefined}\n        {...view}\n      />\n    </PageLayout>\n  );\n}\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Organization } from '../../../interfaces/Organization';\nimport { AwxUser } from '../../../interfaces/User';\nimport { useRemoveOrganizationsFromUsers } from './useRemoveOrganizationsFromUsers';\nimport { useSelectOrganizations } from './useSelectOrganizations';\n\nexport function useSelectOrganizationsRemoveUsers(\n  onClose?: (organizatinos: Organization[]) => void\n) {\n  const { t } = useTranslation();\n  const selectOrganizations = useSelectOrganizations();\n  const removeOrganizationsFromUsers = useRemoveOrganizationsFromUsers();\n  const selectOrganizationsRemoveUsers = useCallback(\n    (users: AwxUser[]) => {\n      selectOrganizations(\n        t('Remove users from organizations', { count: users.length }),\n        (organizations: Organization[]) => {\n          removeOrganizationsFromUsers(users, organizations, onClose);\n        }\n      );\n    },\n    [selectOrganizations, t, removeOrganizationsFromUsers, onClose]\n  );\n  return selectOrganizationsRemoveUsers;\n}\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Team } from '../../../interfaces/Team';\nimport { AwxUser } from '../../../interfaces/User';\nimport { useRemoveTeamsFromUsers } from './useRemoveTeamsFromUsers';\nimport { useSelectTeams } from './useSelectTeams';\n\nexport function useSelectTeamsRemoveUsers(onClose?: (teams: Team[]) => void) {\n  const { t } = useTranslation();\n  const selectTeams = useSelectTeams();\n  const removeTeamsFromUsers = useRemoveTeamsFromUsers(onClose);\n  const selectTeamsRemoveUsers = useCallback(\n    (users: AwxUser[]) => {\n      selectTeams(t('Remove users from teams', { count: users.length }), (teams: Team[]) => {\n        removeTeamsFromUsers(users, teams);\n      });\n    },\n    [selectTeams, removeTeamsFromUsers, t]\n  );\n  return selectTeamsRemoveUsers;\n}\n","import { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageHeader,\n  PageLayout,\n  PageWizard,\n  PageWizardStep,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { RoleAssignmentsReviewStep } from '../../../../common/access/RolesWizard/steps/RoleAssignmentsReviewStep';\nimport { postRequest } from '../../../../common/crud/Data';\nimport { useGet } from '../../../../common/crud/useGet';\nimport { awxErrorAdapter } from '../../../common/adapters/awxErrorAdapter';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkActionDialog } from '../../../common/useAwxBulkActionDialog';\nimport { AwxRbacRole } from '../../../interfaces/AwxRbacRole';\nimport { AwxUser } from '../../../interfaces/User';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { AwxSelectResourceTypeStep } from '../../common/AwxRolesWizardSteps/AwxSelectResourceTypeStep';\nimport {\n  AwxResourceType,\n  AwxSelectResourcesStep,\n} from '../../common/AwxRolesWizardSteps/AwxSelectResourcesStep';\nimport { AwxSelectRolesStep } from '../../common/AwxRolesWizardSteps/AwxSelectRolesStep';\ninterface WizardFormValues {\n  resourceType: string;\n  resources: AwxResourceType[];\n  awxRoles: AwxRbacRole[];\n}\n\ninterface ResourceRolePair {\n  resource: AwxResourceType;\n  role: AwxRbacRole;\n}\n\nexport function AddRolesToUser(props: { id?: string; userRolesRoute?: string }) {\n  const { t } = useTranslation();\n  const params = useParams<{ id: string }>();\n  const getPageUrl = useGetPageUrl();\n  const pageNavigate = usePageNavigate();\n  const progressDialog = useAwxBulkActionDialog<ResourceRolePair>();\n  // Use ansible_id to retrieve user\n  const { data: user, isLoading } = useGet<AwxUser>(awxAPI`/users/${props.id || params.id || ''}/`);\n\n  if (isLoading || !user) return <LoadingPage />;\n\n  const steps: PageWizardStep[] = [\n    {\n      id: 'resource-type',\n      label: t('Select a resource type'),\n      inputs: <AwxSelectResourceTypeStep />,\n    },\n    {\n      id: 'resources',\n      label: t('Select resources'),\n      inputs: <AwxSelectResourcesStep />,\n      validate: (formData, _) => {\n        const { resources } = formData as { resources: AwxResourceType[] };\n        if (!resources?.length) {\n          throw new Error(t('Select at least one resource.'));\n        }\n      },\n    },\n    {\n      id: 'roles',\n      label: t('Select roles to apply'),\n      inputs: <AwxSelectRolesStep fieldNameForPreviousStep=\"resources\" />,\n      validate: (formData, _) => {\n        const { awxRoles } = formData as { awxRoles: AwxRbacRole[] };\n        if (!awxRoles?.length) {\n          throw new Error(t('Select at least one role.'));\n        }\n      },\n    },\n    { id: 'review', label: t('Review'), element: <RoleAssignmentsReviewStep /> },\n  ];\n\n  const onSubmit = (data: WizardFormValues) => {\n    const { resources, awxRoles, resourceType } = data;\n    const items: ResourceRolePair[] = [];\n    for (const resource of resources) {\n      for (const role of awxRoles) {\n        items.push({ resource, role });\n      }\n    }\n    return new Promise<void>((resolve) => {\n      progressDialog({\n        title: t('Add roles'),\n        keyFn: ({ resource, role }) => `${resource.id}_${role.id}`,\n        items,\n        actionColumns: [\n          { header: t('Resource name'), cell: ({ resource }) => resource.name },\n          { header: t('Role'), cell: ({ role }) => role.name },\n        ],\n        actionFn: ({ resource, role }) =>\n          postRequest(awxAPI`/role_user_assignments/`, {\n            user: user.id,\n            role_definition: role.id,\n            content_type: resourceType,\n            object_id: resource.id,\n          }),\n        onComplete: () => {\n          resolve();\n        },\n        onClose: () => {\n          pageNavigate(props.userRolesRoute || AwxRoute.UserRoles, {\n            params: { id: params.id },\n          });\n        },\n      });\n    });\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Add roles')}\n        breadcrumbs={[\n          { label: t('Users'), to: getPageUrl(AwxRoute.Users) },\n          {\n            label: user?.username,\n            to: getPageUrl(AwxRoute.UserDetails, { params: { id: user?.id } }),\n          },\n          {\n            label: t('Roles'),\n            to: getPageUrl(AwxRoute.UserRoles, { params: { id: user?.id } }),\n          },\n          { label: t('Add roles') },\n        ]}\n      />\n      <PageWizard<WizardFormValues>\n        errorAdapter={awxErrorAdapter}\n        steps={steps}\n        onSubmit={onSubmit}\n        onCancel={() => {\n          pageNavigate(props.userRolesRoute || AwxRoute.UserRoles, { params: { id: params.id } });\n        }}\n        disableGrid\n      />\n    </PageLayout>\n  );\n}\n","import { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { TrashIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport {\n  IPageAction,\n  LoadingPage,\n  PageActionSelection,\n  PageActionType,\n  PageActions,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { PageRoutedTabs } from '../../../../common/PageRoutedTabs';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { AwxError } from '../../../common/AwxError';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { Token } from '../../../interfaces/Token';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useDeleteUserTokens } from '../hooks/useDeleteUserTokens';\n\nexport function UserTokenPage(props: {\n  breadcrumbLabelForPreviousPage?: string;\n  backTabLabel?: string;\n}) {\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const pageNavigate = usePageNavigate();\n  const params = useParams<{ id: string; tokenid: string }>();\n  const {\n    error: tokenError,\n    data: token,\n    refresh: refreshToken,\n  } = useGetItem<Token>(awxAPI`/tokens`, params.tokenid);\n\n  const deleteTokens = useDeleteUserTokens((deleted: Token[]) => {\n    if (deleted.length > 0) {\n      pageNavigate(AwxRoute.UserTokens, { params: { id: params.id } });\n    }\n  });\n\n  const itemActions: IPageAction<Token>[] = useMemo(() => {\n    return [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: TrashIcon,\n        label: t('Delete token'),\n        onClick: (token) => deleteTokens([token]),\n        isDanger: true,\n        isPinned: true,\n      },\n    ];\n  }, [deleteTokens, t]);\n\n  if (tokenError) return <AwxError error={tokenError} handleRefresh={refreshToken} />;\n  if (!token) return <LoadingPage breadcrumbs tabs />;\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Token')}\n        breadcrumbs={[\n          {\n            label: props.breadcrumbLabelForPreviousPage || t('Tokens'),\n            to: getPageUrl(AwxRoute.UserTokens, {\n              params: { id: params.id, tokenid: params.tokenid },\n            }),\n          },\n          {\n            label: token.summary_fields?.application?.name || t('Personal access token'),\n          },\n        ]}\n        headerActions={\n          <PageActions<Token>\n            actions={itemActions}\n            position={DropdownPosition.right}\n            selectedItem={token}\n          />\n        }\n      ></PageHeader>\n      <PageRoutedTabs\n        backTab={{\n          label: props.backTabLabel || t('Back to User Tokens'),\n          page: AwxRoute.UserTokens,\n          persistentFilterKey: 'user tokens',\n        }}\n        tabs={[{ label: t('Details'), page: AwxRoute.UserTokenDetails }]}\n        params={{ id: params.id, tokenid: params.tokenid }}\n      />\n    </PageLayout>\n  );\n}\n","import { FieldPath, FieldValues } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { PageFormSingleSelectAwxResource } from '../../../common/PageFormSingleSelectAwxResource';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useApplicationsColumns } from '../hooks/useApplicationsColumns';\nimport { useApplicationsFilters } from '../hooks/useApplicationsFilters';\nimport { Application } from '../../../interfaces/Application';\n\nexport function PageFormApplicationSelect<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: { name: TFieldName; isRequired?: boolean; isDisabled?: string; helperText?: string }) {\n  const { t } = useTranslation();\n  const applicationColumns = useApplicationsColumns({ disableLinks: true });\n  const applicationFilters = useApplicationsFilters();\n  return (\n    <PageFormSingleSelectAwxResource<Application, TFieldValues, TFieldName>\n      name={props.name}\n      id=\"application\"\n      label={t('Application')}\n      placeholder={t('Select application')}\n      queryPlaceholder={t('Loading applications...')}\n      queryErrorText={t('Error loading applications')}\n      isRequired={props.isRequired}\n      isDisabled={props.isDisabled}\n      helperText={props.helperText}\n      url={awxAPI`/applications/`}\n      tableColumns={applicationColumns}\n      toolbarFilters={applicationFilters}\n    />\n  );\n}\n","import { useMemo } from 'react';\nimport { ITableColumn } from '../../../../../framework';\nimport {\n  useCreatedColumn,\n  useDescriptionColumn,\n  useModifiedColumn,\n  useNameColumn,\n  useOrganizationNameColumn,\n} from '../../../../common/columns';\nimport { Application } from '../../../interfaces/Application';\nimport { AwxRoute } from '../../../main/AwxRoutes';\n\nexport function useApplicationsColumns(options?: {\n  disableSort?: boolean;\n  disableLinks?: boolean;\n}) {\n  const nameColumn = useNameColumn({\n    ...options,\n  });\n  const descriptionColumn = useDescriptionColumn();\n  const organizationColumn = useOrganizationNameColumn(AwxRoute.OrganizationDetails, options);\n  const createdColumn = useCreatedColumn(options);\n  const modifiedColumn = useModifiedColumn({ ...options, disableSort: true });\n  const tableColumns = useMemo<ITableColumn<Application>[]>(\n    () => [nameColumn, descriptionColumn, organizationColumn, createdColumn, modifiedColumn],\n    [nameColumn, descriptionColumn, organizationColumn, createdColumn, modifiedColumn]\n  );\n  return tableColumns;\n}\n","import { useDynamicToolbarFilters } from '../../../common/useDynamicFilters';\n\nexport function useApplicationsFilters() {\n  const toolbarFilters = useDynamicToolbarFilters({\n    optionsPath: 'applications',\n    preFilledValueKeys: {\n      name: {\n        apiPath: 'applications',\n      },\n      id: {\n        apiPath: 'applications',\n      },\n    },\n    preSortedKeys: ['name', 'id', 'description'],\n  });\n  return toolbarFilters;\n}\n","import { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport {\n  LoadingPage,\n  PageFormSelect,\n  PageFormSubmitHandler,\n  PageHeader,\n  PageLayout,\n  useGetPageUrl,\n  usePageNavigate,\n} from '../../../../framework';\nimport { useAwxActiveUser } from '../../common/useAwxActiveUser';\nimport { AwxRoute } from '../../main/AwxRoutes';\nimport { AwxUser } from '../../interfaces/User';\nimport { Token } from '../../interfaces/Token';\nimport { AwxPageForm } from '../../common/AwxPageForm';\nimport { PageFormTextInput } from '../../../../framework';\nimport { usePostRequest } from '../../../common/crud/usePostRequest';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { PageFormApplicationSelect } from '../../administration/applications/components/PageFormApplicationSelect';\n\nexport function CreateUserToken(props: { onSuccessfulCreate: (newToken: Token) => void }) {\n  const params = useParams<{ id: string }>();\n  const { activeAwxUser } = useAwxActiveUser();\n  const pageNavigate = usePageNavigate();\n\n  useEffect(() => {\n    if (activeAwxUser === undefined || activeAwxUser?.id.toString() !== params.id) {\n      // redirect to user details for the active/logged-in user\n      pageNavigate(AwxRoute.UserDetails, { params: { id: activeAwxUser?.id } });\n    }\n  }, [activeAwxUser, params.id, pageNavigate]);\n\n  if (!activeAwxUser) return <LoadingPage breadcrumbs tabs />;\n\n  return activeAwxUser?.id.toString() === params.id ? (\n    <CreateUserTokenInternal user={activeAwxUser} onCreate={props.onSuccessfulCreate} />\n  ) : (\n    <></>\n  );\n}\n\nfunction CreateUserTokenInternal(props: { user: AwxUser; onCreate: (newToken: Token) => void }) {\n  const { user } = props;\n  const { t } = useTranslation();\n  const getPageUrl = useGetPageUrl();\n  const navigate = useNavigate();\n  const postRequest = usePostRequest<Token, Token>();\n  const pageNavigate = usePageNavigate();\n\n  const onCancel = () => navigate(-1);\n  const onSubmit: PageFormSubmitHandler<Token> = async (tokenInput) => {\n    const newToken = await postRequest(awxAPI`/tokens/`, tokenInput);\n    props.onCreate(newToken);\n    pageNavigate(AwxRoute.UserTokenDetails, { params: { id: user.id, tokenid: newToken.id } });\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Create Token')}\n        breadcrumbs={[\n          { label: t('Users'), to: getPageUrl(AwxRoute.Users) },\n          {\n            label: user.username,\n            to: getPageUrl(AwxRoute.UserDetails, { params: { id: user.id } }),\n          },\n          {\n            label: t('Tokens'),\n            to: getPageUrl(AwxRoute.UserTokens, { params: { id: user.id } }),\n          },\n        ]}\n      />\n      <AwxPageForm\n        submitText={t('Create token')}\n        onSubmit={onSubmit}\n        cancelText={t('Cancel')}\n        onCancel={onCancel}\n      >\n        <UserTokenFormInputs />\n      </AwxPageForm>\n    </PageLayout>\n  );\n}\n\nfunction UserTokenFormInputs() {\n  const { t } = useTranslation();\n  return (\n    <>\n      <PageFormApplicationSelect name=\"application\" isRequired={false} />\n      <PageFormTextInput<Token>\n        name=\"description\"\n        label={t('Description')}\n        placeholder={t('Enter token description')}\n        isRequired={false}\n      />\n      <PageFormSelect<Token>\n        name=\"scope\"\n        label={t('Scope')}\n        placeholderText={t('Select a scope')}\n        options={[\n          {\n            label: t('Read'),\n            value: 'read',\n          },\n          {\n            label: t('Write'),\n            value: 'write',\n          },\n        ]}\n        isRequired\n      />\n    </>\n  );\n}\n","import { t } from 'i18next';\nimport { SetStateAction } from 'react';\nimport { Modal, ClipboardCopy, ClipboardCopyVariant } from '@patternfly/react-core';\nimport { PageDetails, PageDetail } from '../../../../../framework';\nimport { formatDateString } from '../../../../../framework/utils/formatDateString';\nimport { Token } from '../../../interfaces/Token';\n\nexport function UserTokenSecretsModal(props: {\n  onClose: (value: SetStateAction<Token | undefined>) => void;\n  newToken: Token;\n}) {\n  const { token, refresh_token } = props.newToken;\n  return (\n    <Modal\n      aria-label={t`Token information`}\n      isOpen\n      variant=\"medium\"\n      position=\"top\"\n      title={t('Token information')}\n      onClose={() => {\n        props.onClose(undefined);\n      }}\n      hasNoBodyWrapper\n    >\n      <PageDetails\n        alertPrompts={[t`This is the only time the token will be shown.`]}\n        numberOfColumns=\"single\"\n      >\n        <PageDetail label={t`Token`}>\n          <ClipboardCopy isReadOnly variant={ClipboardCopyVariant.expansion}>\n            {token}\n          </ClipboardCopy>\n        </PageDetail>\n        {refresh_token && (\n          <PageDetail label={t`Refresh Token`}>\n            <ClipboardCopy isReadOnly variant={ClipboardCopyVariant.expansion}>\n              {refresh_token}\n            </ClipboardCopy>\n          </PageDetail>\n        )}\n        <PageDetail label={t`Expires`}>{formatDateString(props.newToken.expires)}</PageDetail>\n      </PageDetails>\n    </Modal>\n  );\n}\n","/* eslint-disable i18next/no-literal-string */\nimport { Flex, FlexItem, Split, SplitItem } from '@patternfly/react-core';\nimport { useEffect, useMemo, useState } from 'react';\nimport { IconWrapper } from '../../../../../framework/components/IconWrapper';\nimport { ClockIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { TextCell, getPatternflyColor } from '../../../../../framework';\nimport { Trans, useTranslation } from 'react-i18next';\n\nexport function WorkflowApprovalTimeRemaining(props: { approval_expiration: string }) {\n  const { t } = useTranslation();\n  const approvalExpiration = useMemo(\n    () => new Date(props.approval_expiration ?? 0).valueOf(),\n    [props.approval_expiration]\n  );\n\n  const [timeRemaining, setTimeRemaining] = useState(\n    Math.max(0, approvalExpiration - Date.now().valueOf())\n  );\n\n  useEffect(() => {\n    if (timeRemaining === 0) return;\n    const timeout = setInterval(() => {\n      setTimeRemaining(Math.max(0, approvalExpiration - Date.now().valueOf()));\n    }, 1000);\n    return () => clearTimeout(timeout);\n  }, [approvalExpiration, timeRemaining]);\n\n  const totalSeconds = Math.floor(timeRemaining / 1000);\n  const seconds = Math.floor(totalSeconds % 60);\n  const minutes = Math.floor((totalSeconds / 60) % 60);\n  const hours = Math.floor((totalSeconds / 60 / 60) % 24);\n  const days = Math.floor(totalSeconds / 60 / 60 / 24);\n\n  const abbreviatedDays = t(`${days}d`);\n  const abbreviatedHours = t(`${hours}h`);\n  const abbreviatedMinutes = t(`${minutes}m`);\n  const abbreviatedSeconds = t(`${seconds}s`);\n\n  if (totalSeconds === 0)\n    return (\n      <TextCell\n        text={t`Timed out`}\n        color={'red'}\n        iconColor={'danger'}\n        icon={<ExclamationCircleIcon />}\n      />\n    );\n  return (\n    <Flex\n      spaceItems={{ default: 'spaceItemsNone' }}\n      flexWrap={{ default: 'nowrap' }}\n      alignItems={{ default: 'alignItemsBaseline' }}\n    >\n      <FlexItem alignSelf={{ default: 'alignSelfCenter' }}>\n        <IconWrapper size=\"sm\" color=\"blue\" padRight>\n          <ClockIcon />\n        </IconWrapper>\n      </FlexItem>\n      <FlexItem style={{ maxWidth: '100%' }}>\n        <div\n          style={{\n            minWidth: 200,\n            maxWidth: '100%',\n            whiteSpace: 'nowrap',\n            textOverflow: 'ellipsis',\n            overflow: 'hidden',\n            color: getPatternflyColor('blue'),\n          }}\n        >\n          <Trans>\n            <Split>\n              <SplitItem>Expires in&nbsp;</SplitItem>\n              {days !== 0 && <SplitItem>{abbreviatedDays}&nbsp;</SplitItem>}\n              {hours !== 0 && <SplitItem>{abbreviatedHours}&nbsp;</SplitItem>}\n              {minutes !== 0 && <SplitItem>{abbreviatedMinutes}&nbsp;</SplitItem>}\n              {<SplitItem>{abbreviatedSeconds}&nbsp;</SplitItem>}\n            </Split>\n          </Trans>\n        </div>\n      </FlexItem>\n    </Flex>\n  );\n}\n","import {\n  CheckCircleIcon,\n  ClockIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n} from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\nimport { TextCell } from '../../../../../framework';\nimport { WorkflowApproval } from '../../../interfaces/WorkflowApproval';\nimport { WorkflowApprovalTimeRemaining } from './WorkflowApprovalTimeRemaining';\n\nexport function WorkflowApprovalStatusCell(props: { workflow_approval: WorkflowApproval }) {\n  const { t } = useTranslation();\n\n  if (props.workflow_approval.timed_out) {\n    return (\n      <TextCell\n        text={t`Timed out`}\n        color={'red'}\n        iconColor={'danger'}\n        icon={<ExclamationCircleIcon />}\n      />\n    );\n  }\n\n  if (props.workflow_approval.canceled_on) {\n    return (\n      <TextCell\n        text={t`Canceled`}\n        color={'orange'}\n        iconColor={'warning'}\n        icon={<ExclamationTriangleIcon />}\n      />\n    );\n  }\n\n  switch (props.workflow_approval.status) {\n    case 'new':\n    case 'pending':\n    case 'waiting':\n    case 'running':\n      if (props.workflow_approval.approval_expiration) {\n        return (\n          <WorkflowApprovalTimeRemaining\n            approval_expiration={props.workflow_approval.approval_expiration}\n          />\n        );\n      }\n      return (\n        <TextCell text={t`Never expires`} color={'blue'} iconColor={'info'} icon={<ClockIcon />} />\n      );\n    case 'successful':\n      return (\n        <TextCell\n          text={t`Approved`}\n          color={'green'}\n          iconColor={'success'}\n          icon={<CheckCircleIcon />}\n        />\n      );\n    case 'failed':\n      return (\n        <TextCell\n          text={t`Denied`}\n          color={'red'}\n          iconColor={'danger'}\n          icon={<ExclamationCircleIcon />}\n        />\n      );\n    case 'error':\n      return (\n        <TextCell\n          text={t`Error`}\n          color={'red'}\n          iconColor={'danger'}\n          icon={<ExclamationCircleIcon />}\n        />\n      );\n    default:\n      return (\n        <TextCell\n          text={t`Unknown`}\n          color={'yellow'}\n          iconColor={'warning'}\n          icon={<ExclamationTriangleIcon />}\n        />\n      );\n  }\n}\n","import { useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ColumnModalOption,\n  DateTimeCell,\n  ITableColumn,\n  usePageNavigate,\n} from '../../../../../framework';\nimport { useIdColumn, useNameColumn } from '../../../../common/columns';\nimport { WorkflowApproval } from '../../../interfaces/WorkflowApproval';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { WorkflowApprovalStatusCell } from '../components/WorkflowApprovalStatusCell';\n\nexport function useWorkflowApprovalsColumns(options?: {\n  disableSort?: boolean;\n  disableLinks?: boolean;\n}) {\n  const { t } = useTranslation();\n  const pageNavigate = usePageNavigate();\n  const idColumn = useIdColumn(false);\n  const nameClick = useCallback(\n    (workflow_approval: WorkflowApproval) =>\n      pageNavigate(AwxRoute.WorkflowApprovalDetails, { params: { id: workflow_approval.id } }),\n    [pageNavigate]\n  );\n  const nameColumn = useNameColumn({\n    ...options,\n    onClick: nameClick,\n  });\n  const tableColumns = useMemo<ITableColumn<WorkflowApproval>[]>(\n    () => [\n      idColumn,\n      nameColumn,\n      {\n        header: t('Started'),\n        cell: (workflow_approval: WorkflowApproval) =>\n          workflow_approval.started && <DateTimeCell value={workflow_approval.started} />,\n        sort: 'started',\n        list: 'secondary',\n        defaultSortDirection: 'desc',\n        modal: ColumnModalOption.hidden,\n      },\n      {\n        header: t('Status'),\n        cell: (workflow_approval: WorkflowApproval) => (\n          <WorkflowApprovalStatusCell workflow_approval={workflow_approval} />\n        ),\n        sort: 'status',\n        defaultSortDirection: 'desc',\n      },\n    ],\n    [idColumn, nameColumn, t]\n  );\n  return tableColumns;\n}\n","import { useParams } from 'react-router-dom';\nimport { PageDetails, PageDetailsFromColumns } from '../../../../../framework';\nimport { useGetItem } from '../../../../common/crud/useGet';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { WorkflowApproval } from '../../../interfaces/WorkflowApproval';\nimport { useWorkflowApprovalsColumns } from '../hooks/useWorkflowApprovalsColumns';\n\nexport function WorkflowApprovalDetails() {\n  const params = useParams<{ id: string }>();\n  const { data: workflowApproval } = useGetItem<WorkflowApproval>(\n    awxAPI`/workflow_approvals`,\n    params.id\n  );\n  const columns = useWorkflowApprovalsColumns();\n  return workflowApproval ? (\n    <PageDetails>\n      <PageDetailsFromColumns item={workflowApproval} columns={columns} />\n    </PageDetails>\n  ) : null;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { compareStrings } from '../../../../../framework';\nimport { useNameColumn } from '../../../../common/columns';\nimport { getItemKey } from '../../../../common/crud/Data';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { WorkflowApproval } from '../../../interfaces/WorkflowApproval';\nimport { useWorkflowApprovalsColumns } from './useWorkflowApprovalsColumns';\n\nexport function useApproveWorkflowApprovals(\n  onComplete: (workflow_approvals: WorkflowApproval[]) => void\n) {\n  const { t } = useTranslation();\n  const confirmationColumns = useWorkflowApprovalsColumns({\n    disableLinks: true,\n    disableSort: true,\n  });\n  const cancelActionNameColumn = useNameColumn({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo(() => [cancelActionNameColumn], [cancelActionNameColumn]);\n  const bulkAction = useAwxBulkConfirmation<WorkflowApproval>();\n  const postRequest = usePostRequest();\n  const cannotApprove = (workflow_approval: WorkflowApproval) => {\n    if (workflow_approval.timed_out)\n      return t(`The workflow approval cannot be approved because it has timed out`);\n\n    switch (workflow_approval.status) {\n      case 'canceled':\n        return t(`The workflow approval cannot be approved because the workflow has been canceled`);\n      case 'successful':\n        return t(`The workflow approval cannot be approved because it has already been approved`);\n      case 'failed':\n        return t(`The workflow approval cannot be approved because it has already been denied`);\n      case 'error':\n        return t(`The workflow approval cannot be approved because it is in an error state`);\n      default:\n        if (!workflow_approval.can_approve_or_deny)\n          return t(`The workflow approval cannot be approved due to insufficient permissions`);\n        return '';\n    }\n  };\n\n  const approveWorkflowApprovals = (workflow_approvals: WorkflowApproval[]) => {\n    const unapproveableWorkflowApprovals: WorkflowApproval[] =\n      workflow_approvals.filter(cannotApprove);\n\n    bulkAction({\n      title: t('Approve workflow approvals', { count: workflow_approvals.length }),\n      confirmText: t('Yes, I confirm that I want to approve these {{count}} workflow approvals.', {\n        count: workflow_approvals.length - unapproveableWorkflowApprovals.length,\n      }),\n      actionButtonText: t('Approve workflow approvals', { count: workflow_approvals.length }),\n      items: workflow_approvals.sort((l, r) => compareStrings(l.name, r.name)),\n      alertPrompts: unapproveableWorkflowApprovals.length\n        ? [\n            ...(unapproveableWorkflowApprovals.length\n              ? [\n                  t('{{count}} of the selected workflow approvals cannot be approved.', {\n                    count: unapproveableWorkflowApprovals.length,\n                  }),\n                ]\n              : []),\n          ]\n        : undefined,\n      isItemNonActionable: (item: WorkflowApproval) => cannotApprove(item),\n      keyFn: getItemKey,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: (workflow_approval: WorkflowApproval) =>\n        postRequest(awxAPI`/workflow_approvals/${workflow_approval.id.toString()}/approve/`, {}),\n    });\n  };\n  return approveWorkflowApprovals;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { compareStrings } from '../../../../../framework';\nimport { useNameColumn } from '../../../../common/columns';\nimport { getItemKey, requestDelete } from '../../../../common/crud/Data';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { WorkflowApproval } from '../../../interfaces/WorkflowApproval';\nimport { useWorkflowApprovalsColumns } from './useWorkflowApprovalsColumns';\n\nexport function useDeleteWorkflowApprovals(\n  onComplete: (workflow_approvals: WorkflowApproval[]) => void\n) {\n  const { t } = useTranslation();\n  const confirmationColumns = useWorkflowApprovalsColumns({\n    disableLinks: true,\n    disableSort: true,\n  });\n  const cancelActionNameColumn = useNameColumn({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo(() => [cancelActionNameColumn], [cancelActionNameColumn]);\n  const bulkAction = useAwxBulkConfirmation<WorkflowApproval>();\n  const cannotDeleteDueToPermissions = (workflow_approval: WorkflowApproval) => {\n    if (!workflow_approval.summary_fields.user_capabilities.delete)\n      return t(`The workflow approval cannot be deleted due to insufficient permission`);\n    return '';\n  };\n\n  const deleteWorkflowApprovals = (workflow_approvals: WorkflowApproval[]) => {\n    const undeletableWorkflowApprovalsDueToPermissions: WorkflowApproval[] =\n      workflow_approvals.filter(cannotDeleteDueToPermissions);\n\n    bulkAction({\n      title: t('Delete workflow approvals', { count: workflow_approvals.length }),\n      confirmText: t('Yes, I confirm that I want to delete these {{count}} workflow approvals.', {\n        count: workflow_approvals.length - undeletableWorkflowApprovalsDueToPermissions.length,\n      }),\n      actionButtonText: t('Delete workflow approvals', { count: workflow_approvals.length }),\n      items: workflow_approvals.sort((l, r) => compareStrings(l.name, r.name)),\n      alertPrompts: undeletableWorkflowApprovalsDueToPermissions.length\n        ? [\n            ...(undeletableWorkflowApprovalsDueToPermissions.length\n              ? [\n                  t(\n                    '{{count}} of the selected workflow approvals cannot be deleted due to insufficient permissions.',\n                    {\n                      count: undeletableWorkflowApprovalsDueToPermissions.length,\n                    }\n                  ),\n                ]\n              : []),\n          ]\n        : undefined,\n      isItemNonActionable: (item: WorkflowApproval) => cannotDeleteDueToPermissions(item),\n      keyFn: getItemKey,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: (workflow_approval: WorkflowApproval, signal) =>\n        requestDelete(awxAPI`/workflow_approvals/${workflow_approval.id.toString()}/`, signal),\n    });\n  };\n  return deleteWorkflowApprovals;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { compareStrings } from '../../../../../framework';\nimport { useNameColumn } from '../../../../common/columns';\nimport { getItemKey } from '../../../../common/crud/Data';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { useAwxBulkConfirmation } from '../../../common/useAwxBulkConfirmation';\nimport { WorkflowApproval } from '../../../interfaces/WorkflowApproval';\nimport { useWorkflowApprovalsColumns } from './useWorkflowApprovalsColumns';\n\nexport function useDenyWorkflowApprovals(\n  onComplete: (workflow_approvals: WorkflowApproval[]) => void\n) {\n  const { t } = useTranslation();\n  const confirmationColumns = useWorkflowApprovalsColumns({\n    disableLinks: true,\n    disableSort: true,\n  });\n  const cancelActionNameColumn = useNameColumn({ disableLinks: true, disableSort: true });\n  const actionColumns = useMemo(() => [cancelActionNameColumn], [cancelActionNameColumn]);\n  const bulkAction = useAwxBulkConfirmation<WorkflowApproval>();\n  const postRequest = usePostRequest();\n  const cannotDeny = (workflow_approval: WorkflowApproval) => {\n    if (workflow_approval.timed_out)\n      return t(`The workflow approval cannot be denied because it has timed out`);\n\n    switch (workflow_approval.status) {\n      case 'canceled':\n        return t(`The workflow approval cannot be denied because the workflow has been canceled`);\n      case 'successful':\n        return t(`The workflow approval cannot be denied because it has already been approved`);\n      case 'failed':\n        return t(`The workflow approval cannot be denied because it has already been denied`);\n      case 'error':\n        return t(`The workflow approval cannot be denied because it is in an error state`);\n      default:\n        if (!workflow_approval.can_approve_or_deny)\n          return t(`The workflow approval cannot be denied due to insufficient permissions`);\n        return '';\n    }\n  };\n\n  const denyWorkflowApprovals = (workflow_approvals: WorkflowApproval[]) => {\n    const undeniableWorkflowApprovalsDueToPermissions: WorkflowApproval[] =\n      workflow_approvals.filter(cannotDeny);\n\n    bulkAction({\n      title: t('Deny workflow approvals', { count: workflow_approvals.length }),\n      confirmText: t('Yes, I confirm that I want to deny these {{count}} workflow approvals.', {\n        count: workflow_approvals.length - undeniableWorkflowApprovalsDueToPermissions.length,\n      }),\n      actionButtonText: t('Deny workflow approvals', { count: workflow_approvals.length }),\n      items: workflow_approvals.sort((l, r) => compareStrings(l.name, r.name)),\n      alertPrompts: undeniableWorkflowApprovalsDueToPermissions.length\n        ? [\n            ...(undeniableWorkflowApprovalsDueToPermissions.length\n              ? [\n                  t('{{count}} of the selected workflow approvals cannot be denied.', {\n                    count: undeniableWorkflowApprovalsDueToPermissions.length,\n                  }),\n                ]\n              : []),\n          ]\n        : undefined,\n      isItemNonActionable: (item: WorkflowApproval) => cannotDeny(item),\n      keyFn: getItemKey,\n      confirmationColumns,\n      actionColumns,\n      onComplete,\n      actionFn: (workflow_approval: WorkflowApproval) =>\n        postRequest(awxAPI`/workflow_approvals/${workflow_approval.id.toString()}/deny/`, {}),\n    });\n  };\n  return denyWorkflowApprovals;\n}\n","import { ButtonVariant } from '@patternfly/react-core';\nimport { MinusCircleIcon, ThumbsDownIcon, ThumbsUpIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { IPageAction, PageActionSelection, PageActionType } from '../../../../../framework';\nimport { WorkflowApproval } from '../../../interfaces/WorkflowApproval';\nimport { useApproveWorkflowApprovals } from './useApproveWorkflowApprovals';\nimport { useDeleteWorkflowApprovals } from './useDeleteWorkflowApprovals';\nimport { useDenyWorkflowApprovals } from './useDenyWorkflowApprovals';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { usePostRequest } from '../../../../common/crud/usePostRequest';\n\nexport function useWorkflowApprovalsRowActions(\n  onComplete: (workflow_approvals: WorkflowApproval[]) => void\n) {\n  const { t } = useTranslation();\n  const approveWorkflowApprovals = useApproveWorkflowApprovals(onComplete);\n  const deleteWorkflowApprovals = useDeleteWorkflowApprovals(onComplete);\n  const denyWorkflowApprovals = useDenyWorkflowApprovals(onComplete);\n  const postRequest = usePostRequest();\n\n  return useMemo<IPageAction<WorkflowApproval>[]>(() => {\n    const cannotDeleteWorkflowApproval = (workflow_approval: WorkflowApproval) => {\n      if (!['successful', 'failed', 'error', 'canceled'].includes(workflow_approval.status)) {\n        return t(\n          `The workflow approval cannot be deleted because the workflow job is still running`\n        );\n      }\n      if (!workflow_approval.summary_fields.user_capabilities.delete)\n        return t(`The workflow approval cannot be deleted due to insufficient permissions`);\n      return '';\n    };\n\n    const cannotApprove = (workflow_approval: WorkflowApproval) => {\n      if (!workflow_approval.can_approve_or_deny) {\n        return t(`The workflow approval cannot be approved due to insufficient permissions`);\n      }\n      return '';\n    };\n\n    const cannotDeny = (workflow_approval: WorkflowApproval) => {\n      if (!workflow_approval.can_approve_or_deny) {\n        return t(`The workflow approval cannot be denied due to insufficient permissions`);\n      }\n      return '';\n    };\n\n    const actions: IPageAction<WorkflowApproval>[] = [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        variant: ButtonVariant.primary,\n        isPinned: true,\n        icon: ThumbsUpIcon,\n        label: t(`Approve`),\n        isDisabled: (workflow_approval: WorkflowApproval) => cannotApprove(workflow_approval),\n        isHidden: (workflow_approval: WorkflowApproval) =>\n          ['successful', 'failed', 'error', 'canceled'].includes(workflow_approval.status),\n        onClick: (workflow_approval: WorkflowApproval) =>\n          approveWorkflowApprovals([workflow_approval]),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        variant: ButtonVariant.secondary,\n        isPinned: true,\n        icon: ThumbsDownIcon,\n        isDanger: true,\n        label: t(`Deny`),\n        isDisabled: (workflow_approval: WorkflowApproval) => cannotDeny(workflow_approval),\n        isHidden: (workflow_approval: WorkflowApproval) =>\n          ['successful', 'failed', 'error', 'canceled'].includes(workflow_approval.status),\n        onClick: (workflow_approval: WorkflowApproval) =>\n          denyWorkflowApprovals([workflow_approval]),\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        variant: ButtonVariant.secondary,\n        isPinned: true,\n        icon: MinusCircleIcon,\n        label: t(`Cancel`),\n        isDisabled: (workflow_approval: WorkflowApproval) => cannotDeny(workflow_approval),\n        isHidden: (workflow_approval: WorkflowApproval) =>\n          ['successful', 'failed', 'error', 'canceled'].includes(workflow_approval.status),\n        onClick: (workflow_approval: WorkflowApproval) =>\n          postRequest(\n            awxAPI`/workflow_jobs/${workflow_approval?.summary_fields?.workflow_job?.id.toString()}/cancel/`,\n            {}\n          ),\n      },\n\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Single,\n        icon: TrashIcon,\n        label: t(`Delete workflow approval`),\n        isDisabled: (workflow_approval: WorkflowApproval) =>\n          cannotDeleteWorkflowApproval(workflow_approval),\n        onClick: (workflow_approval: WorkflowApproval) =>\n          deleteWorkflowApprovals([workflow_approval]),\n        isDanger: true,\n      },\n    ];\n    return actions;\n  }, [t, approveWorkflowApprovals, denyWorkflowApprovals, postRequest, deleteWorkflowApprovals]);\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { DropdownPosition } from '@patternfly/react-core/deprecated';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport { PageActions, PageHeader, PageLayout, useGetPageUrl } from '../../../../../framework';\nimport { LoadingPage } from '../../../../../framework/components/LoadingPage';\nimport { PageRoutedTabs } from '../../../../common/PageRoutedTabs';\nimport { useGet, useGetItem } from '../../../../common/crud/useGet';\nimport { useViewActivityStream } from '../../../access/common/useViewActivityStream';\nimport { AwxError } from '../../../common/AwxError';\nimport { awxAPI } from '../../../common/api/awx-utils';\nimport { Job } from '../../../interfaces/Job';\nimport { WorkflowApproval } from '../../../interfaces/WorkflowApproval';\nimport { AwxRoute } from '../../../main/AwxRoutes';\nimport { useWorkflowApprovalsRowActions } from '../hooks/useWorkflowApprovalsRowActions';\n\nexport function WorkflowApprovalPage() {\n  const { t } = useTranslation();\n  const params = useParams<{ id: string }>();\n  const {\n    error: workflowApprovalError,\n    data: workflowApproval,\n    refresh,\n  } = useGetItem<WorkflowApproval>(awxAPI`/workflow_approvals`, params.id);\n\n  const workflowJobId = workflowApproval?.summary_fields?.source_workflow_job?.id;\n  const { data: workflowJob, error: workflowJobError } = useGet<Job>(\n    workflowJobId ? awxAPI`/workflow_jobs/${workflowJobId.toString()}/` : ''\n  );\n\n  const getPageUrl = useGetPageUrl();\n  const activityStream = useViewActivityStream('workflow_approval');\n  const actions = useWorkflowApprovalsRowActions(refresh);\n\n  const error = workflowApprovalError || workflowJobError;\n  if (error) return <AwxError error={error} handleRefresh={refresh} />;\n  if (!workflowApproval || !workflowJob) return <LoadingPage breadcrumbs tabs />;\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={workflowApproval?.name}\n        breadcrumbs={[\n          { label: t('Workflow Approvals'), to: getPageUrl(AwxRoute.WorkflowApprovals) },\n          { label: workflowApproval?.name },\n        ]}\n        headerActions={\n          <PageActions\n            actions={[...activityStream, ...actions]}\n            position={DropdownPosition.right}\n            selectedItem={workflowApproval}\n          />\n        }\n      />\n      <PageRoutedTabs\n        backTab={{\n          label: t('Back to Workflow Approvals'),\n          page: AwxRoute.WorkflowApprovals,\n          persistentFilterKey: 'workflow-approvals',\n        }}\n        tabs={[\n          { label: t('Details'), page: AwxRoute.WorkflowApprovalDetails },\n          { label: t('Workflow Job Details'), page: AwxRoute.WorkflowApprovalWorkflowJobDetails },\n        ]}\n        params={{\n          id: params.id || 0,\n          job_id: workflowApproval?.summary_fields?.workflow_job?.id,\n          job_type: 'workflow',\n        }}\n        componentParams={{ job: workflowJob }}\n      />\n    </PageLayout>\n  );\n}\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageHeader, PageLayout, PageTable } from '../../../../framework';\nimport { usePersistentFilters } from '../../../common/PersistentFilters';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { useAwxConfig } from '../../common/useAwxConfig';\nimport { useAwxView } from '../../common/useAwxView';\nimport { useAwxWebSocketSubscription } from '../../common/useAwxWebSocket';\nimport { useGetDocsUrl } from '../../common/util/useGetDocsUrl';\nimport { WorkflowApproval } from '../../interfaces/WorkflowApproval';\nimport { useWorkflowApprovalToolbarActions } from './hooks/useWorkflowApprovalToolbarActions';\nimport { useWorkflowApprovalsColumns } from './hooks/useWorkflowApprovalsColumns';\nimport { useWorkflowApprovalsFilters } from './hooks/useWorkflowApprovalsFilters';\nimport { useWorkflowApprovalsRowActions } from './hooks/useWorkflowApprovalsRowActions';\nimport { ActivityStreamIcon } from '../../common/ActivityStreamIcon';\n\nexport function WorkflowApprovals() {\n  const { t } = useTranslation();\n  const product: string = process.env.PRODUCT ?? t('AWX');\n  const toolbarFilters = useWorkflowApprovalsFilters();\n  const tableColumns = useWorkflowApprovalsColumns();\n  const view = useAwxView<WorkflowApproval>({\n    url: awxAPI`/workflow_approvals/`,\n    toolbarFilters,\n    tableColumns,\n  });\n  const toolbarActions = useWorkflowApprovalToolbarActions(view);\n  const rowActions = useWorkflowApprovalsRowActions(view.unselectItemsAndRefresh);\n  usePersistentFilters('jobs');\n  const config = useAwxConfig();\n\n  const { refresh } = view;\n  const handleWebSocketMessage = useCallback(\n    (message?: { group_name?: string; type?: string }) => {\n      switch (message?.group_name) {\n        case 'jobs':\n          switch (message?.type) {\n            case 'workflow_approval':\n              void refresh();\n              break;\n          }\n          break;\n      }\n    },\n    [refresh]\n  );\n\n  useAwxWebSocketSubscription(\n    { control: ['limit_reached_1'], jobs: ['status_changed'] },\n    handleWebSocketMessage as (data: unknown) => void\n  );\n\n  return (\n    <PageLayout>\n      <PageHeader\n        title={t('Workflow Approvals')}\n        titleHelpTitle={t('Workflow Approvals')}\n        titleHelp={t(\n          `A workflow approval represents a pause in a workflow where approval is needed before the workflow continues executing.`,\n          { product }\n        )}\n        titleDocLink={useGetDocsUrl(config, 'workflows')}\n        description={t(\n          `A workflow approval represents a pause in a workflow where approval is needed before the workflow continues executing.`,\n          { product }\n        )}\n        headerActions={<ActivityStreamIcon type={'workflow_approval'} />}\n      />\n      <PageTable\n        toolbarFilters={toolbarFilters}\n        tableColumns={tableColumns}\n        toolbarActions={toolbarActions}\n        rowActions={rowActions}\n        errorStateTitle={t('Error loading workflow approvals')}\n        emptyStateTitle={t('There are currently no workflow approvals')}\n        emptyStateDescription={t(\n          'Past and pending workflow approvals will appear here when available'\n        )}\n        {...view}\n        defaultSubtitle={t('Workflow Approval')}\n      />\n    </PageLayout>\n  );\n}\n","import { useDynamicToolbarFilters } from '../../../common/useDynamicFilters';\n\nexport function useWorkflowApprovalsFilters() {\n  const toolbarFilters = useDynamicToolbarFilters({\n    optionsPath: 'workflow_approvals',\n    preFilledValueKeys: {\n      name: { apiPath: 'workflow_approvals' },\n      id: { apiPath: 'workflow_approvals' },\n    },\n    preSortedKeys: ['name', 'id'],\n  });\n  return toolbarFilters;\n}\n","import { ThumbsDownIcon, ThumbsUpIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { IPageAction, PageActionSelection, PageActionType } from '../../../../../framework';\nimport { IAwxView } from '../../../common/useAwxView';\nimport { WorkflowApproval } from '../../../interfaces/WorkflowApproval';\nimport { useApproveWorkflowApprovals } from './useApproveWorkflowApprovals';\nimport { useDeleteWorkflowApprovals } from './useDeleteWorkflowApprovals';\nimport { useDenyWorkflowApprovals } from './useDenyWorkflowApprovals';\n\nexport function useWorkflowApprovalToolbarActions(view: IAwxView<WorkflowApproval>) {\n  const { t } = useTranslation();\n  const approveWorkflowApprovals = useApproveWorkflowApprovals(view.unselectItemsAndRefresh);\n  const denyWorkflowApprovals = useDenyWorkflowApprovals(view.unselectItemsAndRefresh);\n  const deleteWorkflowApprovals = useDeleteWorkflowApprovals(view.unselectItemsAndRefresh);\n\n  return useMemo<IPageAction<WorkflowApproval>[]>(\n    () => [\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: ThumbsUpIcon,\n        label: t('Approve'),\n        onClick: approveWorkflowApprovals,\n        isPinned: true,\n        isDisabled:\n          view.selectedItems.length === 0 ? t('Select at least one item from the list') : undefined,\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: ThumbsDownIcon,\n        label: t('Deny'),\n        onClick: denyWorkflowApprovals,\n        isDanger: true,\n        isPinned: true,\n        isDisabled:\n          view.selectedItems.length === 0 ? t('Select at least one item from the list') : undefined,\n      },\n      {\n        type: PageActionType.Button,\n        selection: PageActionSelection.Multiple,\n        icon: TrashIcon,\n        label: t('Delete workflow approvals'),\n        onClick: deleteWorkflowApprovals,\n        isDanger: true,\n      },\n    ],\n    [\n      t,\n      approveWorkflowApprovals,\n      view.selectedItems.length,\n      denyWorkflowApprovals,\n      deleteWorkflowApprovals,\n    ]\n  );\n}\n","import { PageApp } from '../../../framework/PageNavigation/PageApp';\nimport { AwxMasthead } from './AwxMasthead';\nimport { useAwxNavigation } from './useAwxNavigation';\n\nexport function AwxApp() {\n  const navigation = useAwxNavigation();\n  return (\n    <PageApp\n      masthead={<AwxMasthead />}\n      navigation={navigation}\n      basename={process.env.ROUTE_PREFIX}\n      defaultRefreshInterval={30}\n    />\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { Navigate } from 'react-router-dom';\nimport { PageNavigationItem } from '../../../framework/PageNavigation/PageNavigationItem';\nimport { PageSettingsDetails } from '../../../framework/PageSettings/PageSettingsDetails';\nimport { PageSettingsForm } from '../../../framework/PageSettings/PageSettingsForm';\nimport { AwxRoleDetails } from '../access/roles/AwxRoleDetails';\nimport { AwxRolePage } from '../access/roles/AwxRolePage';\nimport { AwxRoles } from '../access/roles/AwxRoles';\nimport { CreateRole, EditRole } from '../access/roles/RoleForm';\nimport { AwxSettings } from '../administration/settings/AwxSettings';\nimport { AwxSettingsCategoryDetailsPage } from '../administration/settings/AwxSettingsCategoryDetails';\nimport {\n  AwxSettingsCategoryForm,\n  AwxSettingsCategoryFormRoute,\n} from '../administration/settings/AwxSettingsCategoryForm';\nimport { Topology } from '../administration/topology/Topology';\nimport { Reports } from '../analytics/Reports/Reports';\nimport { SubscriptionUsage } from '../analytics/subscription-usage/SubscriptionUsage';\nimport { useAwxActiveUser } from '../common/useAwxActiveUser';\nimport { AwxOverview } from '../overview/AwxOverview';\nimport { HostMetrics } from '../views/jobs/HostMetrics';\nimport { AwxRoute } from './AwxRoutes';\nimport { useAwxActivityStreamRoutes } from './routes/useAwxActivityStreamRoutes';\nimport { useAwxCredentialRoutes } from './routes/useAwxCredentialRoutes';\nimport { useAwxCredentialTypesRoutes } from './routes/useAwxCredentialTypesRoutes';\nimport { useAwxExecutionEnvironmentRoutes } from './routes/useAwxExecutionEnironmentRoutes';\nimport { useAwxHostRoutes } from './routes/useAwxHostRoutes';\nimport { useAwxInstanceGroupsRoutes } from './routes/useAwxInstanceGroupsRoutes';\nimport { useAwxInstancesRoutes } from './routes/useAwxInstancesRoutes';\nimport { useAwxInventoryRoutes } from './routes/useAwxInventoryRoutes';\nimport { useAwxJobsRoutes } from './routes/useAwxJobsRoutes';\nimport { useAwxManagementJobsRoutes } from './routes/useAwxManagementJobsRoutes';\nimport { useAwxNotificationsRoutes } from './routes/useAwxNotificationsRoutes';\nimport { useAwxOrganizationRoutes } from './routes/useAwxOrganizationsRoutes';\nimport { useAwxProjectRoutes } from './routes/useAwxProjectRoutes';\nimport { useAwxSchedulesRoutes } from './routes/useAwxSchedulesRoutes';\nimport { useAwxTeamsRoutes } from './routes/useAwxTeamsRoutes';\nimport { useAwxTemplateRoutes } from './routes/useAwxTemplateRoutes';\nimport { useAwxUsersRoutes } from './routes/useAwxUsersRoutes';\nimport { useAwxWorkflowApprovalRoutes } from './routes/useAwxWorkflowApprovalRoutes';\n\nexport function useAwxNavigation() {\n  const { t } = useTranslation();\n  const awxInventoryRoutes = useAwxInventoryRoutes();\n  const awxHostRoutes = useAwxHostRoutes();\n  const awxProjectRoutes = useAwxProjectRoutes();\n  const awxCredentialRoutes = useAwxCredentialRoutes();\n  const awxTemplateRoutes = useAwxTemplateRoutes();\n  const awxWorkflowApprovalRoutes = useAwxWorkflowApprovalRoutes();\n  const awxSchedulesRoutes = useAwxSchedulesRoutes();\n  const awxJobsRoutes = useAwxJobsRoutes();\n  const awxActivityStreamRoutes = useAwxActivityStreamRoutes();\n  const awxOrganizationRoutes = useAwxOrganizationRoutes();\n  const awxTeamsRoutes = useAwxTeamsRoutes();\n  const awxUsersRoutes = useAwxUsersRoutes();\n  const awxNotificationsRoutes = useAwxNotificationsRoutes();\n  const awxManagementJobsRoutes = useAwxManagementJobsRoutes();\n  const awxInstanceGroupsRoutes = useAwxInstanceGroupsRoutes();\n  const awxInstancesRoutes = useAwxInstancesRoutes();\n  const awxExecutionEnvironmentsRoutes = useAwxExecutionEnvironmentRoutes();\n  const awxCredentialTypesRoutes = useAwxCredentialTypesRoutes();\n  const { activeAwxUser } = useAwxActiveUser();\n\n  const overview: PageNavigationItem[] = [\n    {\n      id: AwxRoute.Overview,\n      label: t('Overview'),\n      path: 'overview',\n      element: <AwxOverview />,\n    },\n  ];\n  const infrastructureItems: PageNavigationItem[] = [\n    {\n      id: AwxRoute.Infrastructure,\n      label: t('Infrastructure'),\n      path: 'infrastructure',\n      children: activeAwxUser?.is_superuser\n        ? [\n            {\n              id: AwxRoute.TopologyView,\n              label: t('Topology View'),\n              path: 'topology',\n              element: <Topology />,\n            },\n            awxInventoryRoutes,\n            awxHostRoutes,\n            awxInstanceGroupsRoutes,\n            awxInstancesRoutes,\n            awxExecutionEnvironmentsRoutes,\n          ]\n        : [\n            awxInventoryRoutes,\n            awxHostRoutes,\n            awxInstanceGroupsRoutes,\n            awxInstancesRoutes,\n            awxExecutionEnvironmentsRoutes,\n          ],\n    },\n  ];\n  const analyticsItems: PageNavigationItem[] = [\n    {\n      id: AwxRoute.Analytics,\n      label: t('Analytics'),\n      path: 'analytics',\n      children: [\n        {\n          id: AwxRoute.AutomationCalculator,\n          label: t('Automation Calculator'),\n          path: 'automation-calculator',\n          element: <Reports />,\n        },\n        {\n          id: AwxRoute.HostMetrics,\n          label: t('Host Metrics'),\n          path: 'host-metrics',\n          element: <HostMetrics />,\n        },\n        {\n          id: AwxRoute.SubscriptionUsage,\n          label: t('Subscription Usage'),\n          path: 'subscription-usage',\n          element: <SubscriptionUsage />,\n        },\n      ],\n    },\n  ];\n  const administrationItems: PageNavigationItem[] = [\n    {\n      id: AwxRoute.Administration,\n      label: t('Administration'),\n      path: 'administration',\n      children: activeAwxUser?.is_superuser\n        ? [\n            awxActivityStreamRoutes,\n            awxWorkflowApprovalRoutes,\n            awxNotificationsRoutes,\n            awxManagementJobsRoutes,\n          ]\n        : [awxActivityStreamRoutes, awxWorkflowApprovalRoutes],\n    },\n  ];\n  const accessItems: PageNavigationItem[] = [\n    {\n      id: AwxRoute.Access,\n      label: t('Access Management'),\n      path: 'access',\n      children: [\n        {\n          id: AwxRoute.SettingsAuthentication,\n          label: t('Authentication Methods'),\n          path: 'authentication',\n          children: [\n            {\n              id: AwxRoute.SettingsCategory,\n              path: ':category/edit',\n              element: <AwxSettingsCategoryFormRoute />,\n            },\n            {\n              path: '',\n              element: <AwxSettings />,\n            },\n          ],\n        },\n        awxOrganizationRoutes,\n        awxTeamsRoutes,\n        awxUsersRoutes,\n        {\n          id: AwxRoute.Roles,\n          label: t('Roles'),\n          path: 'roles',\n          children: [\n            {\n              id: AwxRoute.CreateRole,\n              path: 'create',\n              element: <CreateRole />,\n            },\n            {\n              id: AwxRoute.EditRole,\n              path: ':id/edit',\n              element: <EditRole />,\n            },\n            {\n              id: AwxRoute.RolePage,\n              path: ':id',\n              element: <AwxRolePage />,\n              children: [\n                {\n                  id: AwxRoute.RoleDetails,\n                  path: 'details',\n                  element: <AwxRoleDetails />,\n                },\n                {\n                  path: '',\n                  element: <Navigate to=\"details\" replace />,\n                },\n              ],\n            },\n            {\n              path: '',\n              element: <AwxRoles />,\n            },\n          ],\n        },\n        awxCredentialRoutes,\n        awxCredentialTypesRoutes,\n      ],\n    },\n  ];\n  const settingsItems: PageNavigationItem[] = [\n    {\n      id: AwxRoute.Settings,\n      label: t('Settings'),\n      path: 'settings',\n      children: [\n        {\n          id: AwxRoute.SettingsPreferences,\n          label: t('User Preferences'),\n          path: 'preferences',\n          children: [\n            {\n              path: 'edit',\n              element: <PageSettingsForm />,\n            },\n            {\n              path: '',\n              element: <PageSettingsDetails />,\n            },\n          ],\n        },\n        {\n          id: AwxRoute.SettingsSystem,\n          label: t('System'),\n          path: 'system',\n          children: [\n            {\n              path: 'edit',\n              element: <AwxSettingsCategoryForm categoryId=\"system\" key=\"system\" />,\n            },\n            {\n              path: '',\n              element: <AwxSettingsCategoryDetailsPage categoryId=\"system\" key=\"system\" />,\n            },\n          ],\n        },\n        {\n          id: AwxRoute.SettingsJobs,\n          label: t('Job'),\n          path: 'job-settings',\n          children: [\n            {\n              path: 'edit',\n              element: <AwxSettingsCategoryForm categoryId=\"jobs\" key=\"jobs\" />,\n            },\n            {\n              path: '',\n              element: <AwxSettingsCategoryDetailsPage categoryId=\"jobs\" key=\"jobs\" />,\n            },\n          ],\n        },\n        {\n          id: AwxRoute.SettingsLogging,\n          label: t('Logging'),\n          path: 'logging',\n          children: [\n            {\n              path: 'edit',\n              element: <AwxSettingsCategoryForm categoryId=\"logging\" key=\"logging\" />,\n            },\n            {\n              path: '',\n              element: <AwxSettingsCategoryDetailsPage categoryId=\"logging\" key=\"logging\" />,\n            },\n          ],\n        },\n        {\n          id: AwxRoute.SettingsTroubleshooting,\n          label: t('Troubleshooting'),\n          path: 'troubleshooting',\n          children: [\n            {\n              path: 'edit',\n              element: <AwxSettingsCategoryForm categoryId=\"debug\" key=\"debug\" />,\n            },\n            {\n              path: '',\n              element: <AwxSettingsCategoryDetailsPage categoryId=\"debug\" key=\"debug\" />,\n            },\n          ],\n        },\n        {\n          path: '',\n          element: <Navigate to=\"..\" replace />,\n        },\n      ],\n    },\n  ];\n\n  const navigationItems = [\n    ...overview,\n    awxJobsRoutes,\n    awxTemplateRoutes,\n    awxSchedulesRoutes,\n    awxProjectRoutes,\n    ...infrastructureItems,\n    ...(activeAwxUser?.is_superuser || activeAwxUser?.is_system_auditor ? analyticsItems : []),\n    ...administrationItems,\n    ...accessItems,\n    ...settingsItems,\n    {\n      path: '',\n      element: <Navigate to={'./overview'} replace />,\n    },\n  ];\n\n  return navigationItems;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageNavigationItem } from '../../../../framework';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { Inventories } from '../../resources/inventories/Inventories';\nimport { CreateInventory, EditInventory } from '../../resources/inventories/InventoryForm';\nimport { InventoryDetails } from '../../resources/inventories/InventoryPage/InventoryDetails';\nimport { InventoryPage } from '../../resources/inventories/InventoryPage/InventoryPage';\nimport { InventorySourceDetails } from '../../resources/inventories/inventorySources/InventorySourceDetails';\nimport { InventorySourcePage } from '../../resources/inventories/inventorySources/InventorySourcePage';\nimport { ScheduleAddWizard } from '../../views/schedules/wizard/ScheduleAddWizard';\nimport { ScheduleDetails } from '../../views/schedules/SchedulePage/ScheduleDetails';\nimport { SchedulePage } from '../../views/schedules/SchedulePage/SchedulePage';\nimport { AwxRoute } from '../AwxRoutes';\nimport { InventoryJobTemplates } from '../../resources/inventories/InventoryPage/InventoryJobTemplates';\nimport { InventoryHosts } from '../../resources/inventories/InventoryPage/InventoryHosts';\nimport { InventorySources } from '../../resources/inventories/InventoryPage/InventorySources';\nimport { InventoryGroups } from '../../resources/inventories/InventoryPage/InventoryGroups';\nimport { GroupPage } from '../../resources/groups/GroupPage';\nimport { InventoryHostPage } from '../../resources/inventories/inventoryHostsPage/InventoryHostPage';\nimport { InventoryHostDetails } from '../../resources/inventories/inventoryHostsPage/InventoryHostDetails';\nimport {\n  CreateGroup,\n  EditGroup,\n  CreateRelatedGroup,\n} from '../../resources/inventories/inventoryGroup/InventoryGroupForm';\nimport { InventoryHostGroups } from '../../resources/inventories/inventoryHostsPage/InventoryHostGroups';\nimport {\n  CreateInventorySource,\n  EditInventorySource,\n} from '../../resources/sources/InventorySourceForm';\nimport {\n  CreateHost,\n  EditHost,\n} from '../../resources/inventories/inventoryHostsPage/InventoryHostForm';\nimport { GroupDetails } from '../../resources/groups/GroupDetails';\nimport { InventoryHostJobs } from '../../resources/inventories/inventoryHostsPage/InventoryHostJobs';\nimport { InventoryHostFacts } from '../../resources/inventories/inventoryHostsPage/InventoryHostFacts';\nimport { GroupHosts } from '../../resources/groups/GroupHosts';\nimport { GroupRelatedGroups } from '../../resources/groups/GroupRelatedGroups';\nimport { ResourceNotifications } from '../../resources/notifications/ResourceNotifications';\nimport { SchedulesList } from '../../views/schedules/SchedulesList';\nimport { InventoryJobs } from '../../resources/inventories/InventoryPage/InventoryJobs';\nimport { InventoryRunCommand } from '../../resources/inventories/InventoryRunCommand';\nimport { ScheduleEditWizard } from '../../views/schedules/wizard/ScheduleEditWizard';\nimport { InventoryTeamAccess } from '../../resources/inventories/InventoryPage/InventoryTeamAccess';\nimport { InventoryUserAccess } from '../../resources/inventories/InventoryPage/InventoryUserAccess';\nimport { InventoryAddUsers } from '../../resources/inventories/components/InventoryAddUsers';\nimport { InventoryAddTeams } from '../../resources/inventories/components/InventoryAddTeams';\n\nexport function useAwxInventoryRoutes() {\n  const { t } = useTranslation();\n  const inventoryRoutes = useMemo<PageNavigationItem>(\n    () => ({\n      id: AwxRoute.Inventories,\n      label: t('Inventories'),\n      path: 'inventories',\n      children: [\n        {\n          id: AwxRoute.InventorySourceSchedulePage,\n          path: ':inventory_type/:id/sources/:source_id/schedules/:schedule_id/',\n          element: (\n            <SchedulePage\n              resourceEndPoint={awxAPI`/inventory_sources/`}\n              initialBreadCrumbs={[\n                { label: t('Inventories'), to: AwxRoute.Inventories },\n                { id: 'inventory', to: AwxRoute.InventoryDetails },\n                {\n                  id: 'inventory_sources',\n                  label: t('Inventory Sources'),\n                  to: AwxRoute.InventorySources,\n                },\n                { id: 'data', to: AwxRoute.InventorySourceDetail },\n                { label: t('Schedules'), id: 'schedules', to: AwxRoute.InventorySourceSchedules },\n              ]}\n              backTab={{\n                label: t('Back to Schedules'),\n                page: AwxRoute.InventorySourceSchedules,\n                persistentFilterKey: 'inventory-schedules',\n              }}\n              tabs={[\n                {\n                  label: t('Details'),\n                  page: AwxRoute.InventorySourceScheduleDetails,\n                },\n              ]}\n            />\n          ),\n          children: [\n            {\n              id: AwxRoute.InventorySourceScheduleDetails,\n              path: 'details',\n              element: <ScheduleDetails />,\n            },\n          ],\n        },\n        {\n          id: AwxRoute.InventorySourceScheduleCreate,\n          path: ':inventory_type/:id/sources/:source_id/schedules/create',\n          element: <ScheduleAddWizard resourceEndPoint={awxAPI`/inventory_sources/`} />,\n        },\n        {\n          id: AwxRoute.InventorySourceScheduleEdit,\n          path: ':inventory_type/:id/sources/:source_id/schedules/:schedule_id/edit',\n          element: <ScheduleEditWizard resourceEndPoint={awxAPI`/inventory_sources/`} />,\n        },\n        {\n          id: AwxRoute.InventorySourcePage,\n          path: ':inventory_type/:id/sources/:source_id',\n          element: <InventorySourcePage />,\n          children: [\n            {\n              id: AwxRoute.InventorySourceDetail,\n              path: 'details',\n              element: <InventorySourceDetails />,\n            },\n            {\n              id: AwxRoute.InventorySourceNotifications,\n              path: 'notifications',\n              element: <ResourceNotifications resourceType=\"inventory_sources\" />,\n            },\n            {\n              id: AwxRoute.InventorySourceSchedules,\n              path: 'schedules',\n              element: (\n                <SchedulesList\n                  createSchedulePageId={AwxRoute.InventorySourceScheduleCreate}\n                  resourceType=\"inventory-sources\"\n                  sublistEndpoint={awxAPI`/inventory_sources`}\n                />\n              ),\n            },\n          ],\n        },\n        {\n          id: AwxRoute.InventoryHostAdd,\n          path: ':inventory_type/:id/add',\n          element: <CreateHost />,\n        },\n        {\n          id: AwxRoute.InventoryHostEdit,\n          path: ':inventory_type/:id/host/:host_id/edit',\n          element: <EditHost />,\n        },\n        {\n          id: AwxRoute.InventoryGroupRelatedGroupsCreate,\n          path: ':inventory_type/:id/groups/:group_id/nested-groups/add',\n          element: <CreateRelatedGroup />,\n        },\n        {\n          id: AwxRoute.InventoryRunCommand,\n          path: ':inventory_type/:id/run_command',\n          element: <InventoryRunCommand />,\n        },\n        {\n          id: AwxRoute.InventoryGroupPage,\n          path: ':inventory_type/:id/groups/:group_id',\n          element: <GroupPage />,\n          children: [\n            {\n              id: AwxRoute.InventoryGroupDetails,\n              path: 'details',\n              element: <GroupDetails />,\n            },\n            {\n              id: AwxRoute.InventoryGroupRelatedGroups,\n              path: 'nested-groups',\n              element: <GroupRelatedGroups />,\n            },\n            {\n              id: AwxRoute.InventoryGroupHost,\n              path: 'nested-hosts',\n              element: <GroupHosts />,\n            },\n          ],\n        },\n        {\n          id: AwxRoute.InventoryGroupHostAdd,\n          path: ':inventory_type/:id/group/:group_id/nested-hosts/add',\n          element: <CreateHost />,\n        },\n        {\n          id: AwxRoute.InventoryGroupEdit,\n          path: ':inventory_type/:id/group/:group_id/edit',\n          element: <EditGroup />,\n        },\n        {\n          id: AwxRoute.InventoryGroupCreate,\n          path: ':inventory_type/:id/group/add',\n          element: <CreateGroup />,\n        },\n        {\n          id: AwxRoute.InventoryPage,\n          path: ':inventory_type/:id/',\n          element: <InventoryPage />,\n          children: [\n            {\n              id: AwxRoute.InventoryDetails,\n              path: 'details',\n              element: <InventoryDetails />,\n            },\n            {\n              id: AwxRoute.InventoryGroups,\n              path: 'groups',\n              element: <InventoryGroups />,\n            },\n            {\n              id: AwxRoute.InventoryHosts,\n              path: 'hosts',\n              element: <InventoryHosts />,\n            },\n            {\n              id: AwxRoute.InventorySources,\n              path: 'sources',\n              element: <InventorySources />,\n            },\n            {\n              id: AwxRoute.InventoryJobs,\n              path: 'jobs',\n              element: <InventoryJobs />,\n            },\n            {\n              id: AwxRoute.InventoryJobTemplates,\n              path: 'templates',\n              element: <InventoryJobTemplates />,\n            },\n            {\n              id: AwxRoute.InventoryTeamAccess,\n              path: 'team-access',\n              element: <InventoryTeamAccess />,\n            },\n            {\n              id: AwxRoute.InventoryUserAccess,\n              path: 'user-access',\n              element: <InventoryUserAccess />,\n            },\n          ],\n        },\n        {\n          id: AwxRoute.InventoryHostPage,\n          path: ':inventory_type/:id/hosts/:host_id',\n          element: <InventoryHostPage />,\n          children: [\n            {\n              id: AwxRoute.InventoryHostDetails,\n              path: 'details',\n              element: <InventoryHostDetails />,\n            },\n            {\n              id: AwxRoute.InventoryHostGroups,\n              path: 'groups',\n              element: <InventoryHostGroups page=\"inventory\" />,\n            },\n            {\n              id: AwxRoute.InventoryHostJobs,\n              path: 'jobs',\n              element: <InventoryHostJobs />,\n            },\n            {\n              id: AwxRoute.InventoryHostFacts,\n              path: 'facts',\n              element: <InventoryHostFacts page=\"inventory\" />,\n            },\n          ],\n        },\n        {\n          id: AwxRoute.EditInventory,\n          path: ':inventory_type/:id/edit',\n          element: <EditInventory />,\n        },\n        {\n          id: AwxRoute.CreateInventory,\n          path: 'inventory/create',\n          element: <CreateInventory inventoryKind=\"\" />,\n        },\n        {\n          id: AwxRoute.CreateSmartInventory,\n          path: 'smart-inventory/create',\n          element: <CreateInventory inventoryKind=\"smart\" />,\n        },\n        {\n          id: AwxRoute.CreateConstructedInventory,\n          path: 'constructed-inventory/create',\n          element: <CreateInventory inventoryKind=\"constructed\" />,\n        },\n        {\n          id: AwxRoute.InventoryAddUsers,\n          path: ':id/user-access/add',\n          element: <InventoryAddUsers />,\n        },\n        {\n          id: AwxRoute.InventoryAddTeams,\n          path: ':id/team-access/add',\n          element: <InventoryAddTeams />,\n        },\n        {\n          path: '',\n          element: <Inventories />,\n        },\n        {\n          id: AwxRoute.InventorySourceEdit,\n          path: ':inventory_type/:id/sources/:source_id/edit',\n          element: <EditInventorySource />,\n        },\n        {\n          id: AwxRoute.InventorySourcesAdd,\n          path: ':inventory_type/:id/sources/add',\n          element: <CreateInventorySource />,\n        },\n      ],\n    }),\n    [t]\n  );\n  return inventoryRoutes;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageNavigationItem } from '../../../../framework';\nimport { HostPage } from '../../resources/hosts/HostPage/HostPage';\nimport { Hosts } from '../../resources/hosts/Hosts';\nimport { AwxRoute } from '../AwxRoutes';\nimport { HostJobs } from '../../resources/hosts/HostPage/HostJobs';\nimport {\n  CreateHost,\n  EditHost,\n} from '../../resources/inventories/inventoryHostsPage/InventoryHostForm';\nimport { InventoryHostDetails } from '../../resources/inventories/inventoryHostsPage/InventoryHostDetails';\nimport { InventoryHostGroups } from '../../resources/inventories/inventoryHostsPage/InventoryHostGroups';\nimport { InventoryHostFacts } from '../../resources/inventories/inventoryHostsPage/InventoryHostFacts';\n\nexport function useAwxHostRoutes() {\n  const { t } = useTranslation();\n  const hostRoutes = useMemo<PageNavigationItem>(\n    () => ({\n      id: AwxRoute.Hosts,\n      label: t('Hosts'),\n      path: 'hosts',\n      children: [\n        {\n          id: AwxRoute.HostPage,\n          path: ':id',\n          element: <HostPage />,\n          children: [\n            {\n              id: AwxRoute.HostDetails,\n              path: 'details',\n              element: <InventoryHostDetails />,\n            },\n            {\n              id: AwxRoute.HostFacts,\n              path: 'facts',\n              element: <InventoryHostFacts page=\"host\" />,\n            },\n            {\n              id: AwxRoute.HostGroups,\n              path: 'groups',\n              element: <InventoryHostGroups page=\"host\" />,\n            },\n            {\n              id: AwxRoute.HostJobs,\n              path: 'jobs',\n              element: <HostJobs />,\n            },\n          ],\n        },\n        {\n          id: AwxRoute.EditHost,\n          path: ':id/edit',\n          element: <EditHost />,\n        },\n        {\n          id: AwxRoute.CreateHost,\n          path: 'create',\n          element: <CreateHost />,\n        },\n        {\n          path: '',\n          element: <Hosts />,\n        },\n      ],\n    }),\n    [t]\n  );\n  return hostRoutes;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Navigate } from 'react-router-dom';\nimport { PageNavigationItem } from '../../../../framework';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { ProjectDetails } from '../../resources/projects/ProjectPage/ProjectDetails';\nimport { CreateProject, EditProject } from '../../resources/projects/ProjectPage/ProjectForm';\nimport { ProjectJobTemplates } from '../../resources/projects/ProjectPage/ProjectJobTemplates';\nimport { ProjectPage } from '../../resources/projects/ProjectPage/ProjectPage';\nimport { Projects } from '../../resources/projects/Projects';\nimport { ScheduleAddWizard } from '../../views/schedules/wizard/ScheduleAddWizard';\nimport { ScheduleDetails } from '../../views/schedules/SchedulePage/ScheduleDetails';\nimport { SchedulePage } from '../../views/schedules/SchedulePage/SchedulePage';\nimport { AwxRoute } from '../AwxRoutes';\nimport { ResourceNotifications } from '../../resources/notifications/ResourceNotifications';\nimport { SchedulesList } from '../../views/schedules/SchedulesList';\nimport { ScheduleEditWizard } from '../../views/schedules/wizard/ScheduleEditWizard';\nimport { ProjectTeams } from '../../resources/projects/ProjectPage/ProjectTeams';\nimport { ProjectUsers } from '../../resources/projects/ProjectPage/ProjectUsers';\nimport { AwxProjectAddUsers } from '../../resources/projects/components/AwxProjectAddUsers';\nimport { AwxProjectAddTeams } from '../../resources/projects/components/AwxProjectAddTeams';\n\nexport function useAwxProjectRoutes() {\n  const { t } = useTranslation();\n  const projectRoutes = useMemo<PageNavigationItem>(\n    () => ({\n      id: AwxRoute.Projects,\n      label: t('Projects'),\n      path: 'projects',\n      children: [\n        {\n          id: AwxRoute.CreateProject,\n          path: 'create',\n          element: <CreateProject />,\n        },\n        {\n          id: AwxRoute.EditProject,\n          path: ':id/edit',\n          element: <EditProject />,\n        },\n        {\n          id: AwxRoute.ProjectScheduleCreate,\n          path: ':id/schedules/create',\n          element: <ScheduleAddWizard resourceEndPoint={awxAPI`/projects/`} />,\n        },\n        {\n          id: AwxRoute.ProjectScheduleEdit,\n          path: ':id/schedules/:schedule_id/edit',\n          element: <ScheduleEditWizard resourceEndPoint={awxAPI`/projects/`} />,\n        },\n        {\n          id: AwxRoute.ProjectSchedulePage,\n          path: ':id/schedules/:schedule_id',\n          element: (\n            <SchedulePage\n              resourceEndPoint={awxAPI`/projects/`}\n              initialBreadCrumbs={[\n                { label: t('Projects'), to: AwxRoute.Projects },\n                { id: 'data', to: AwxRoute.ProjectPage },\n                { label: t('Schedules'), id: 'schedules', to: AwxRoute.ProjectSchedules },\n              ]}\n              backTab={{\n                label: t('Back to Schedules'),\n                page: AwxRoute.ProjectSchedules,\n                persistentFilterKey: 'project-schedules',\n              }}\n              tabs={[\n                {\n                  label: t('Details'),\n                  page: AwxRoute.ProjectScheduleDetails,\n                },\n              ]}\n            />\n          ),\n          children: [\n            {\n              id: AwxRoute.ProjectScheduleDetails,\n              path: 'details',\n              element: <ScheduleDetails />,\n            },\n          ],\n        },\n\n        {\n          id: AwxRoute.ProjectPage,\n          path: ':id',\n          element: <ProjectPage />,\n          children: [\n            { id: AwxRoute.ProjectDetails, path: 'details', element: <ProjectDetails /> },\n            {\n              id: AwxRoute.ProjectJobTemplates,\n              path: 'job-templates',\n              element: <ProjectJobTemplates />,\n            },\n            {\n              id: AwxRoute.ProjectNotifications,\n              path: 'notifications',\n              element: <ResourceNotifications resourceType=\"projects\" />,\n            },\n            {\n              id: AwxRoute.ProjectSchedules,\n              path: 'schedules',\n              element: (\n                <SchedulesList\n                  createSchedulePageId={AwxRoute.ProjectScheduleCreate}\n                  resourceType=\"projects\"\n                  sublistEndpoint={awxAPI`/projects`}\n                />\n              ),\n            },\n            {\n              id: AwxRoute.ProjectUsers,\n              path: 'user-access',\n              element: <ProjectUsers />,\n            },\n            {\n              id: AwxRoute.ProjectTeams,\n              path: 'team-access',\n              element: <ProjectTeams />,\n            },\n            {\n              path: '',\n              element: <Navigate to=\"details\" replace />,\n            },\n          ],\n        },\n        {\n          id: AwxRoute.ProjectAddUsers,\n          path: ':id/user-access/add-users',\n          element: <AwxProjectAddUsers />,\n        },\n        {\n          id: AwxRoute.ProjectAddTeams,\n          path: ':id/team-access/add-teams',\n          element: <AwxProjectAddTeams />,\n        },\n        {\n          path: '',\n          element: <Projects />,\n        },\n      ],\n    }),\n    [t]\n  );\n  return projectRoutes;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageNavigationItem } from '../../../../framework';\nimport { CreateCredential, EditCredential } from '../../access/credentials/CredentialForm';\nimport { CredentialDetails } from '../../access/credentials/CredentialPage/CredentialDetails';\nimport { CredentialPage } from '../../access/credentials/CredentialPage/CredentialPage';\nimport { Credentials } from '../../access/credentials/Credentials';\nimport { AwxRoute } from '../AwxRoutes';\nimport { CredentialJobTemplates } from '../../access/credentials/CredentialPage/CredentialJobTemplates';\nimport { CredentialAddUsers } from '../../access/credentials/components/CredentialAddUsers';\nimport { CredentialAddTeams } from '../../access/credentials/components/CredentialAddTeams';\nimport { CredentialTeamAccess } from '../../access/credentials/CredentialPage/CredentialTeamAccess';\nimport { CredentialUserAccess } from '../../access/credentials/CredentialPage/CredentialUserAccess';\n\nexport function useAwxCredentialRoutes() {\n  const { t } = useTranslation();\n  const credentialRoutes = useMemo<PageNavigationItem>(\n    () => ({\n      id: AwxRoute.Credentials,\n      label: t('Credentials'),\n      path: 'credentials',\n      children: [\n        {\n          id: AwxRoute.CreateCredential,\n          path: 'create',\n          element: <CreateCredential />,\n        },\n        {\n          id: AwxRoute.EditCredential,\n          path: ':id/edit',\n          element: <EditCredential />,\n        },\n        {\n          id: AwxRoute.CredentialPage,\n          path: ':id',\n          element: <CredentialPage />,\n          children: [\n            {\n              id: AwxRoute.CredentialDetails,\n              path: 'details',\n              element: <CredentialDetails />,\n            },\n            {\n              id: AwxRoute.CredentialJobTemplates,\n              path: 'templates',\n              element: <CredentialJobTemplates />,\n            },\n            {\n              id: AwxRoute.CredentialTeamAccess,\n              path: 'team-access',\n              element: <CredentialTeamAccess />,\n            },\n            {\n              id: AwxRoute.CredentialUserAccess,\n              path: 'user-access',\n              element: <CredentialUserAccess />,\n            },\n          ],\n        },\n        {\n          id: AwxRoute.CredentialAddUsers,\n          path: ':id/user-access/add',\n          element: <CredentialAddUsers />,\n        },\n        {\n          id: AwxRoute.CredentialAddTeams,\n          path: ':id/team-access/add',\n          element: <CredentialAddTeams />,\n        },\n        {\n          path: '',\n          element: <Credentials />,\n        },\n      ],\n    }),\n    [t]\n  );\n  return credentialRoutes;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Navigate } from 'react-router-dom';\nimport { PageNavigationItem } from '../../../../framework';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { CreateJobTemplate, EditJobTemplate } from '../../resources/templates/TemplateForm';\nimport { TemplateDetails } from '../../resources/templates/TemplatePage/TemplateDetails';\nimport { LaunchTemplate } from '../../resources/templates/TemplatePage/TemplateLaunchWizard';\nimport { TemplatePage } from '../../resources/templates/TemplatePage/TemplatePage';\nimport { Templates } from '../../resources/templates/Templates';\nimport {\n  CreateWorkflowJobTemplate,\n  EditWorkflowJobTemplate,\n} from '../../resources/templates/WorkflowJobTemplateForm';\nimport { WorkflowJobTemplateDetails } from '../../resources/templates/WorkflowJobTemplatePage/WorkflowJobTemplateDetails';\nimport { WorkflowJobTemplatePage } from '../../resources/templates/WorkflowJobTemplatePage/WorkflowJobTemplatePage';\nimport { WorkflowJobTemplateTeamAccess } from '../../resources/templates/WorkflowJobTemplatePage/WorkflowJobTemplateTeamAccess';\nimport { WorkflowJobTemplateUserAccess } from '../../resources/templates/WorkflowJobTemplatePage/WorkflowJobTemplateUserAccess';\nimport { WorkflowJobTemplateAddTeams } from '../../resources/templates/WorkflowJobTemplateAddTeams';\nimport { WorkflowJobTemplateAddUsers } from '../../resources/templates/WorkflowJobTemplateAddUsers';\nimport { WorkflowVisualizer } from '../../resources/templates/WorkflowVisualizer/WorkflowVisualizer';\nimport { ScheduleAddWizard } from '../../views/schedules/wizard/ScheduleAddWizard';\nimport { ScheduleDetails } from '../../views/schedules/SchedulePage/ScheduleDetails';\nimport { SchedulePage } from '../../views/schedules/SchedulePage/SchedulePage';\nimport { AwxRoute } from '../AwxRoutes';\nimport { ResourceNotifications } from '../../resources/notifications/ResourceNotifications';\nimport { TemplateTeamAccess } from '../../resources/templates/TemplatePage/TemplateTeamAccess';\nimport { TemplateUserAccess } from '../../resources/templates/TemplatePage/TemplateUserAccess';\nimport { JobTemplateAddTeams } from '../../resources/templates/JobTemplateAddTeams';\nimport { JobTemplateAddUsers } from '../../resources/templates/JobTemplateAddUsers';\nimport { TemplateJobs } from '../../resources/templates/TemplatePage/TemplateJobs';\nimport { TemplateSurvey } from '../../resources/templates/TemplatePage/TemplateSurvey';\nimport { SchedulesList } from '../../views/schedules/SchedulesList';\nimport { ScheduleEditWizard } from '../../views/schedules/wizard/ScheduleEditWizard';\nimport {\n  EditTemplateSurveyForm,\n  AddTemplateSurveyForm,\n} from '../../resources/templates/TemplatePage/TemplateSurveyForm';\n\nexport function useAwxTemplateRoutes() {\n  const { t } = useTranslation();\n  const templateRoutes = useMemo<PageNavigationItem>(\n    () => ({\n      label: t('Templates'),\n      path: 'templates',\n      children: [\n        {\n          path: 'job-template',\n          children: [\n            {\n              id: AwxRoute.CreateJobTemplate,\n              path: 'create',\n              element: <CreateJobTemplate />,\n            },\n            {\n              id: AwxRoute.EditJobTemplate,\n              path: ':id/edit',\n              element: <EditJobTemplate />,\n            },\n            {\n              id: AwxRoute.JobTemplateScheduleCreate,\n              path: ':id/schedules/create',\n              element: <ScheduleAddWizard resourceEndPoint={awxAPI`/job_templates/`} />,\n            },\n            {\n              id: AwxRoute.JobTemplateScheduleEdit,\n              path: ':id/schedules/:schedule_id/edit',\n              element: <ScheduleEditWizard resourceEndPoint={awxAPI`/job_templates/`} />,\n            },\n            {\n              id: AwxRoute.JobTemplateSchedulePage,\n              path: ':id/schedules/:schedule_id',\n              element: (\n                <SchedulePage\n                  resourceEndPoint={awxAPI`/job_templates/`}\n                  initialBreadCrumbs={[\n                    { label: t('Templates'), to: AwxRoute.Templates },\n                    { id: 'data', to: AwxRoute.JobTemplatePage },\n                    { label: t('Schedules'), id: 'schedules', to: AwxRoute.JobTemplateSchedules },\n                  ]}\n                  backTab={{\n                    label: t('Back to Schedules'),\n                    page: AwxRoute.JobTemplateSchedules,\n                    persistentFilterKey: 'job_template-schedules',\n                  }}\n                  tabs={[\n                    {\n                      label: t('Details'),\n                      page: AwxRoute.JobTemplateScheduleDetails,\n                    },\n                  ]}\n                />\n              ),\n              children: [\n                {\n                  id: AwxRoute.JobTemplateScheduleDetails,\n                  path: 'details',\n                  element: <ScheduleDetails />,\n                },\n              ],\n            },\n            {\n              id: AwxRoute.JobTemplatePage,\n              path: ':id',\n              element: <TemplatePage />,\n              children: [\n                {\n                  id: AwxRoute.JobTemplateDetails,\n                  path: 'details',\n                  element: <TemplateDetails />,\n                },\n                {\n                  id: AwxRoute.JobTemplateTeamAccess,\n                  path: 'team-access',\n                  element: <TemplateTeamAccess />,\n                },\n                {\n                  id: AwxRoute.JobTemplateUserAccess,\n                  path: 'user-access',\n                  element: <TemplateUserAccess />,\n                },\n                {\n                  id: AwxRoute.JobTemplateJobs,\n                  path: 'job',\n                  element: <TemplateJobs resourceType=\"job_templates\" />,\n                },\n                {\n                  id: AwxRoute.JobTemplateNotifications,\n                  path: 'notifications',\n                  element: <ResourceNotifications resourceType=\"job_templates\" />,\n                },\n                {\n                  id: AwxRoute.JobTemplateSurvey,\n                  path: 'survey',\n                  element: <TemplateSurvey resourceType=\"job_templates\" />,\n                },\n                {\n                  id: AwxRoute.AddJobTemplateSurvey,\n                  path: 'survey/add',\n                  element: <AddTemplateSurveyForm resourceType=\"job_templates\" />,\n                },\n                {\n                  id: AwxRoute.EditJobTemplateSurvey,\n                  path: 'survey/edit',\n                  element: <EditTemplateSurveyForm resourceType=\"job_templates\" />,\n                },\n                {\n                  id: AwxRoute.JobTemplateSchedules,\n                  path: 'schedules',\n                  element: (\n                    <SchedulesList\n                      createSchedulePageId={AwxRoute.JobTemplateScheduleCreate}\n                      resourceType=\"job-template\"\n                      sublistEndpoint={awxAPI`/job_templates`}\n                    />\n                  ),\n                },\n                {\n                  path: '',\n                  element: <Navigate to=\"details\" replace />,\n                },\n              ],\n            },\n            {\n              id: AwxRoute.JobTemplateAddTeams,\n              path: ':id/team-access/add',\n              element: <JobTemplateAddTeams />,\n            },\n            {\n              id: AwxRoute.JobTemplateAddUsers,\n              path: ':id/user-access/add',\n              element: <JobTemplateAddUsers />,\n            },\n            {\n              id: AwxRoute.TemplateLaunchWizard,\n              path: ':id/launch',\n              element: <LaunchTemplate jobType=\"job_templates\" />,\n            },\n          ],\n        },\n        {\n          path: 'workflow-job-template',\n          children: [\n            {\n              id: AwxRoute.CreateWorkflowJobTemplate,\n              path: 'create',\n              element: <CreateWorkflowJobTemplate />,\n            },\n            {\n              id: AwxRoute.EditWorkflowJobTemplate,\n              path: ':id/edit',\n              element: <EditWorkflowJobTemplate />,\n            },\n            {\n              id: AwxRoute.WorkflowJobTemplateScheduleCreate,\n              path: ':id/schedules/create',\n              element: <ScheduleAddWizard resourceEndPoint={awxAPI`/workflow_job_templates/`} />,\n            },\n            {\n              id: AwxRoute.WorkflowJobTemplateScheduleEdit,\n              path: ':id/schedules/:schedule_id/edit',\n              element: <ScheduleEditWizard resourceEndPoint={awxAPI`/workflow_job_templates/`} />,\n            },\n            {\n              id: AwxRoute.WorkflowJobTemplateSchedulePage,\n              path: ':id/schedules/:schedule_id',\n              element: (\n                <SchedulePage\n                  resourceEndPoint={awxAPI`/workflow_job_templates/`}\n                  initialBreadCrumbs={[\n                    { label: t('Templates'), to: AwxRoute.Templates },\n                    { id: 'data', to: AwxRoute.WorkflowJobTemplatePage },\n                    {\n                      label: t('Schedules'),\n                      id: 'schedules',\n                      to: AwxRoute.WorkflowJobTemplateSchedules,\n                    },\n                  ]}\n                  backTab={{\n                    label: t('Back to Schedules'),\n                    page: AwxRoute.WorkflowJobTemplateSchedules,\n                    persistentFilterKey: 'workflow_job_template-schedules',\n                  }}\n                  tabs={[\n                    {\n                      label: t('Details'),\n                      page: AwxRoute.WorkflowJobTemplateScheduleDetails,\n                    },\n                  ]}\n                />\n              ),\n              children: [\n                {\n                  id: AwxRoute.WorkflowJobTemplateScheduleDetails,\n                  path: 'details',\n                  element: <ScheduleDetails />,\n                },\n              ],\n            },\n            {\n              id: AwxRoute.WorkflowVisualizer,\n              path: ':id/visualizer',\n              element: <WorkflowVisualizer />,\n            },\n            {\n              id: AwxRoute.WorkflowJobTemplatePage,\n              path: ':id',\n              element: <WorkflowJobTemplatePage />,\n              children: [\n                {\n                  id: AwxRoute.WorkflowJobTemplateDetails,\n                  path: 'details',\n                  element: <WorkflowJobTemplateDetails />,\n                },\n                {\n                  id: AwxRoute.WorkflowJobTemplateTeamAccess,\n                  path: 'team-access',\n                  element: <WorkflowJobTemplateTeamAccess />,\n                },\n                {\n                  id: AwxRoute.WorkflowJobTemplateUserAccess,\n                  path: 'user-access',\n                  element: <WorkflowJobTemplateUserAccess />,\n                },\n                {\n                  id: AwxRoute.WorkflowJobTemplateJobs,\n                  path: 'workflow-jobs',\n                  element: <TemplateJobs resourceType=\"workflow_job_templates\" />,\n                },\n                {\n                  id: AwxRoute.WorkflowJobTemplateSurvey,\n                  path: 'survey',\n                  element: <TemplateSurvey resourceType=\"workflow_job_templates\" />,\n                },\n                {\n                  id: AwxRoute.AddWorkflowJobTemplateSurvey,\n                  path: 'survey/add',\n                  element: <AddTemplateSurveyForm resourceType=\"workflow_job_templates\" />,\n                },\n                {\n                  id: AwxRoute.EditWorkflowJobTemplateSurvey,\n                  path: 'survey/edit',\n                  element: <EditTemplateSurveyForm resourceType=\"workflow_job_templates\" />,\n                },\n                {\n                  id: AwxRoute.WorkflowJobTemplateSchedules,\n                  path: 'schedules',\n                  element: (\n                    <SchedulesList\n                      createSchedulePageId={AwxRoute.WorkflowJobTemplateScheduleCreate}\n                      resourceType=\"workflow-job-template\"\n                      sublistEndpoint={awxAPI`/workflow_job_templates`}\n                    />\n                  ),\n                },\n                {\n                  id: AwxRoute.WorkflowJobTemplateNotifications,\n                  path: 'notifications',\n                  element: <ResourceNotifications resourceType=\"workflow_job_templates\" />,\n                },\n                {\n                  path: '',\n                  element: <Navigate to=\"details\" replace />,\n                },\n              ],\n            },\n            {\n              id: AwxRoute.WorkflowJobTemplateAddTeams,\n              path: ':id/team-access/add',\n              element: <WorkflowJobTemplateAddTeams />,\n            },\n            {\n              id: AwxRoute.WorkflowJobTemplateAddUsers,\n              path: ':id/user-access/add',\n              element: <WorkflowJobTemplateAddUsers />,\n            },\n            {\n              id: AwxRoute.WorkflowJobTemplateLaunchWizard,\n              path: ':id/launch',\n              element: <LaunchTemplate jobType=\"workflow_job_templates\" />,\n            },\n          ],\n        },\n        {\n          id: AwxRoute.Templates,\n          path: '',\n          element: <Templates />,\n        },\n      ],\n    }),\n    [t]\n  );\n  return templateRoutes;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageNavigationItem } from '../../../../framework';\nimport { WorkflowApprovalDetails } from '../../administration/workflow-approvals/WorkflowApprovalPage/WorkflowApprovalDetails';\nimport { WorkflowApprovalPage } from '../../administration/workflow-approvals/WorkflowApprovalPage/WorkflowApprovalPage';\nimport { WorkflowApprovals } from '../../administration/workflow-approvals/WorkflowApprovals';\nimport { AwxRoute } from '../AwxRoutes';\nimport { JobDetails } from '../../views/jobs/JobDetails';\n\nexport function useAwxWorkflowApprovalRoutes() {\n  const { t } = useTranslation();\n  const workflowApprovalRoutes = useMemo<PageNavigationItem>(\n    () => ({\n      id: AwxRoute.WorkflowApprovals,\n      label: t('Workflow Approvals'),\n      path: 'workflow-approvals',\n      children: [\n        {\n          id: AwxRoute.WorkflowApprovalPage,\n          path: ':id/',\n          element: <WorkflowApprovalPage />,\n          children: [\n            {\n              id: AwxRoute.WorkflowApprovalDetails,\n              path: 'details',\n              element: <WorkflowApprovalDetails />,\n            },\n            {\n              id: AwxRoute.WorkflowApprovalWorkflowJobDetails,\n              path: ':job_type/:job_id/job-details',\n              element: <JobDetails />,\n            },\n          ],\n        },\n        {\n          path: '',\n          element: <WorkflowApprovals />,\n        },\n      ],\n    }),\n    [t]\n  );\n  return workflowApprovalRoutes;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageNavigationItem } from '../../../../framework';\nimport { ScheduleAddWizard } from '../../views/schedules/wizard/ScheduleAddWizard';\nimport { Schedules } from '../../views/schedules/Schedules';\nimport { AwxRoute } from '../AwxRoutes';\n\nexport function useAwxSchedulesRoutes() {\n  const { t } = useTranslation();\n  const schedulesRoutes = useMemo<PageNavigationItem>(\n    () => ({\n      id: AwxRoute.Schedules,\n      label: t('Schedules'),\n      path: 'schedules',\n      children: [\n        {\n          id: AwxRoute.CreateSchedule,\n          path: 'create',\n          element: <ScheduleAddWizard isTopLevelSchedule />,\n        },\n        {\n          path: '',\n          element: <Schedules />,\n        },\n      ],\n    }),\n    [t]\n  );\n  return schedulesRoutes;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageNavigationItem } from '../../../../framework';\nimport { JobDetails } from '../../views/jobs/JobDetails';\nimport { JobOutput } from '../../views/jobs/JobOutput/JobOutput';\nimport { JobPage } from '../../views/jobs/JobPage';\nimport { Jobs } from '../../views/jobs/Jobs';\nimport { AwxRoute } from '../AwxRoutes';\nimport { RelaunchTemplate } from '../../resources/templates/TemplatePage/RelaunchTemplateWithPasswords';\n\nexport function useAwxJobsRoutes() {\n  const { t } = useTranslation();\n  const jobRoutes = useMemo<PageNavigationItem>(\n    () => ({\n      id: AwxRoute.Jobs,\n      label: t('Jobs'),\n      path: 'jobs',\n      children: [\n        {\n          id: AwxRoute.TemplateLaunchWithPasswordsWizard,\n          path: ':job_type/:id/relaunch-with-passwords',\n          element: <RelaunchTemplate />,\n        },\n        {\n          id: AwxRoute.JobPage,\n          path: ':job_type/:id',\n          element: <JobPage />,\n          children: [\n            {\n              id: AwxRoute.JobOutput,\n              path: 'output',\n              element: <JobOutput />,\n            },\n            {\n              id: AwxRoute.JobDetails,\n              path: 'details',\n              element: <JobDetails />,\n            },\n          ],\n        },\n\n        {\n          path: '',\n          element: <Jobs />,\n        },\n      ],\n    }),\n    [t]\n  );\n  return jobRoutes;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageNavigationItem } from '../../../../framework';\nimport { AwxRoute } from '../AwxRoutes';\nimport { ActivityStreams } from '../../administration/activity-stream/ActivityStream';\n\nexport function useAwxActivityStreamRoutes() {\n  const { t } = useTranslation();\n  const activityStreamRoutes = useMemo<PageNavigationItem>(\n    () => ({\n      id: AwxRoute.ActivityStream,\n      label: t('Activity Stream'),\n      path: 'activity-stream',\n      element: <ActivityStreams />,\n    }),\n    [t]\n  );\n  return activityStreamRoutes;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Navigate } from 'react-router-dom';\nimport { PageNavigationItem } from '../../../../framework';\nimport { CreateOrganization, EditOrganization } from '../../access/organizations/OrganizationForm';\nimport { OrganizationUserAccess } from '../../access/organizations/OrganizationPage/OrganizationUserAccess';\nimport { OrganizationDetails } from '../../access/organizations/OrganizationPage/OrganizationDetails';\nimport { OrganizationPage } from '../../access/organizations/OrganizationPage/OrganizationPage';\nimport { OrganizationTeamsAccess } from '../../access/organizations/OrganizationPage/OrganizationTeamsAccess';\nimport { Organizations } from '../../access/organizations/Organizations';\nimport { AwxRoute } from '../AwxRoutes';\nimport { ResourceNotifications } from '../../resources/notifications/ResourceNotifications';\nimport { OrganizationExecutionEnvironments } from '../../access/organizations/OrganizationPage/OrganizationExecutionEnvironments';\nimport { OrganizationAddUsers } from '../../access/organizations/components/OrganizationAddUsers';\nimport { OrganizationAddTeams } from '../../access/organizations/components/OrganizationAddTeams';\n\nexport function useAwxOrganizationRoutes() {\n  const { t } = useTranslation();\n  const workflowApprovalRoutes = useMemo<PageNavigationItem>(\n    () => ({\n      id: AwxRoute.Organizations,\n      label: t('Organizations'),\n      path: 'organizations',\n      children: [\n        {\n          id: AwxRoute.CreateOrganization,\n          path: 'create',\n          element: <CreateOrganization />,\n        },\n        {\n          id: AwxRoute.EditOrganization,\n          path: ':id/edit',\n          element: <EditOrganization />,\n        },\n        {\n          id: AwxRoute.OrganizationPage,\n          path: ':id',\n          element: <OrganizationPage />,\n          children: [\n            {\n              id: AwxRoute.OrganizationDetails,\n              path: 'details',\n              element: <OrganizationDetails />,\n            },\n            {\n              id: AwxRoute.OrganizationUsersAccess,\n              path: 'user-access',\n              element: <OrganizationUserAccess />,\n            },\n            {\n              id: AwxRoute.OrganizationTeamsAccess,\n              path: 'team-access',\n              element: <OrganizationTeamsAccess />,\n            },\n            {\n              id: AwxRoute.OrganizationExecutionEnvironments,\n              path: 'execution-environments',\n              element: <OrganizationExecutionEnvironments />,\n            },\n            {\n              id: AwxRoute.OrganizationNotifications,\n              path: 'notifications',\n              element: <ResourceNotifications resourceType=\"organizations\" />,\n            },\n            {\n              path: '',\n              element: <Navigate to=\"details\" replace />,\n            },\n          ],\n        },\n        {\n          id: AwxRoute.OrganizationAddUsers,\n          path: ':id/user-access/add',\n          element: <OrganizationAddUsers />,\n        },\n        {\n          id: AwxRoute.OrganizationAddTeams,\n          path: ':id/team-access/add',\n          element: <OrganizationAddTeams />,\n        },\n        {\n          path: '',\n          element: <Organizations />,\n        },\n      ],\n    }),\n    [t]\n  );\n  return workflowApprovalRoutes;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Navigate } from 'react-router-dom';\nimport { PageNavigationItem } from '../../../../framework';\nimport { CreateTeam, EditTeam } from '../../access/teams/TeamForm';\nimport { AwxTeamDetails } from '../../access/teams/TeamPage/AwxTeamDetails';\nimport { TeamAccess } from '../../access/teams/TeamPage/TeamAccess';\nimport { TeamPage } from '../../access/teams/TeamPage/TeamPage';\nimport { Teams } from '../../access/teams/Teams';\nimport { AwxRoute } from '../AwxRoutes';\nimport { AwxAddTeamRoles } from '../../access/teams/AwxAddTeamRoles';\nimport { AwxTeamRoles } from '../../access/teams/TeamPage/AwxTeamRoles';\nimport { TeamMembersAdd } from '../../access/teams/components/TeamMembersAdd';\n\nexport function useAwxTeamsRoutes() {\n  const { t } = useTranslation();\n  const teamsRoutes = useMemo<PageNavigationItem>(\n    () => ({\n      id: AwxRoute.Teams,\n      label: t('Teams'),\n      path: 'teams',\n      children: [\n        {\n          id: AwxRoute.CreateTeam,\n          path: 'create',\n          element: <CreateTeam />,\n        },\n        {\n          id: AwxRoute.EditTeam,\n          path: ':id/edit',\n          element: <EditTeam />,\n        },\n        {\n          id: AwxRoute.AddRolesToTeam,\n          path: ':id/roles/add',\n          element: <AwxAddTeamRoles />,\n        },\n        {\n          id: AwxRoute.TeamPage,\n          path: ':id',\n          element: <TeamPage />,\n          children: [\n            {\n              id: AwxRoute.TeamDetails,\n              path: 'details',\n              element: <AwxTeamDetails />,\n            },\n            {\n              id: AwxRoute.TeamMembers,\n              path: 'access',\n              element: <TeamAccess />,\n            },\n            {\n              id: AwxRoute.TeamRoles,\n              path: 'roles',\n              element: <AwxTeamRoles />,\n            },\n            {\n              path: '',\n              element: <Navigate to=\"details\" replace />,\n            },\n          ],\n        },\n        {\n          id: AwxRoute.TeamAddMembers,\n          path: ':id/user-access/add',\n          element: <TeamMembersAdd />,\n        },\n        {\n          path: '',\n          element: <Teams />,\n        },\n      ],\n    }),\n    [t]\n  );\n  return teamsRoutes;\n}\n","import { useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Navigate } from 'react-router-dom';\nimport { PageNavigationItem } from '../../../../framework';\nimport { CreateUser, EditUser } from '../../access/users/UserForm';\nimport { AwxUserDetails } from '../../access/users/UserPage/AwxUserDetails';\nimport { UserOrganizations } from '../../access/users/UserPage/UserOrganizations';\nimport { UserPage } from '../../access/users/UserPage/UserPage';\nimport { UserRoles } from '../../access/users/UserPage/UserRoles';\nimport { UserTeams } from '../../access/users/UserPage/UserTeams';\nimport { UserTokens } from '../../access/users/UserPage/UserTokens';\nimport { UserTokenDetails } from '../../access/users/UserPage/UserTokenDetails';\nimport { Users } from '../../access/users/Users';\nimport { AddRolesToUser } from '../../access/users/components/AddRolesToUser';\nimport { AwxRoute } from '../AwxRoutes';\nimport { UserTokenPage } from '../../access/users/UserPage/UserTokenPage';\nimport { CreateUserToken } from '../../access/users/UserTokenForm';\nimport { Token } from '../../interfaces/Token';\nimport { UserTokenSecretsModal } from '../../access/users/UserPage/UserTokenSecretsModal';\n\nexport function useAwxUsersRoutes() {\n  const { t } = useTranslation();\n  const [newUserToken, setNewUserToken] = useState<Token>();\n\n  const usersRoutes = useMemo<PageNavigationItem>(\n    () => ({\n      id: AwxRoute.Users,\n      label: t('Users'),\n      path: 'users',\n      children: [\n        {\n          id: AwxRoute.CreateUser,\n          path: 'create',\n          element: <CreateUser />,\n        },\n        {\n          id: AwxRoute.EditUser,\n          path: ':id/edit',\n          element: <EditUser />,\n        },\n        {\n          id: AwxRoute.UserPage,\n          path: ':id',\n          element: <UserPage />,\n          children: [\n            {\n              id: AwxRoute.UserDetails,\n              path: 'details',\n              element: <AwxUserDetails />,\n            },\n            {\n              id: AwxRoute.UserOrganizations,\n              path: 'organizations',\n              element: <UserOrganizations />,\n            },\n            {\n              id: AwxRoute.UserTeams,\n              path: 'teams',\n              element: <UserTeams />,\n            },\n            {\n              id: AwxRoute.UserRoles,\n              path: 'roles',\n              element: <UserRoles />,\n            },\n            {\n              id: AwxRoute.UserTokens,\n              path: 'tokens',\n              element: <UserTokens />,\n            },\n            {\n              path: '',\n              element: <Navigate to=\"details\" replace />,\n            },\n          ],\n        },\n        {\n          id: AwxRoute.AddRolesToUser,\n          path: ':id/roles/add-roles',\n          element: <AddRolesToUser />,\n        },\n        {\n          id: AwxRoute.CreateUserToken,\n          path: ':id/tokens/create',\n          element: <CreateUserToken onSuccessfulCreate={(t: Token) => setNewUserToken(t)} />,\n        },\n        {\n          id: AwxRoute.UserTokenPage,\n          path: ':id/tokens/:tokenid',\n          element: (\n            <>\n              <UserTokenPage />\n              {newUserToken && (\n                <UserTokenSecretsModal\n                  onClose={setNewUserToken}\n                  newToken={newUserToken}\n                ></UserTokenSecretsModal>\n              )}\n            </>\n          ),\n          children: [\n            {\n              id: AwxRoute.UserTokenDetails,\n              path: 'details',\n              element: <UserTokenDetails />,\n            },\n            {\n              path: '',\n              element: <Navigate to=\"details\" />,\n            },\n          ],\n        },\n        {\n          path: '',\n          element: <Users />,\n        },\n      ],\n    }),\n    [newUserToken, t]\n  );\n  return usersRoutes;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Navigate } from 'react-router-dom';\nimport { PageNavigationItem } from '../../../../framework';\nimport { Notifiers } from '../../administration/notifiers/Notifiers';\nimport { AwxRoute } from '../AwxRoutes';\n\nimport { AddNotifier, EditNotifier } from '../../administration/notifiers/NotifierForm';\n\nimport { NotificationDetails } from '../../administration/notifiers/NotificationPage/NotificationDetails';\nimport { NotificationPage } from '../../administration/notifiers/NotificationPage/NotificationPage';\nimport { NotificationTeamAccess } from '../../administration/notifiers/NotificationPage/NotificationTeamAccess';\nimport { NotificationUserAccess } from '../../administration/notifiers/NotificationPage/NotificationUserAccess';\nimport { NotifierAddUsers } from '../../administration/notifiers/components/NotifierAddUsers';\nimport { NotifierAddTeams } from '../../administration/notifiers/components/NotifierAddTeams';\n\nexport function useAwxNotificationsRoutes() {\n  const { t } = useTranslation();\n  const notificationsRoutes = useMemo<PageNavigationItem>(\n    () => ({\n      id: AwxRoute.NotificationTemplates,\n      label: t('Notifiers'),\n      path: 'notifiers',\n      children: [\n        {\n          id: AwxRoute.NotificationTemplatePage,\n          path: ':id/',\n          element: <NotificationPage />,\n          children: [\n            {\n              id: AwxRoute.NotificationTemplateDetails,\n              path: 'details',\n              element: <NotificationDetails />,\n            },\n            {\n              id: AwxRoute.NotificationTemplateTeamAccess,\n              path: 'team-access',\n              element: <NotificationTeamAccess />,\n            },\n            {\n              id: AwxRoute.NotificationTemplateUserAccess,\n              path: 'user-access',\n              element: <NotificationUserAccess />,\n            },\n            {\n              path: '',\n              element: <Navigate to=\"details\" replace />,\n            },\n          ],\n        },\n        {\n          id: AwxRoute.EditNotificationTemplate,\n          path: ':id/edit',\n          element: <EditNotifier />,\n        },\n        {\n          id: AwxRoute.NotificationAddUsers,\n          path: ':id/user-access/add',\n          element: <NotifierAddUsers />,\n        },\n        {\n          id: AwxRoute.NotificationAddTeams,\n          path: ':id/team-access/add',\n          element: <NotifierAddTeams />,\n        },\n        {\n          id: AwxRoute.AddNotificationTemplate,\n          path: 'create',\n          element: <AddNotifier />,\n        },\n        {\n          path: '',\n          element: <Notifiers />,\n        },\n      ],\n    }),\n    [t]\n  );\n  return notificationsRoutes;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Navigate } from 'react-router-dom';\nimport { PageNavigationItem } from '../../../../framework';\nimport { ManagementJobPage } from '../../administration/management-jobs/ManagementJobPage/ManagementJobPage';\nimport { ManagementJobs } from '../../administration/management-jobs/ManagementJobsList';\nimport { AwxRoute } from '../AwxRoutes';\nimport { ScheduleAddWizard } from '../../views/schedules/wizard/ScheduleAddWizard';\nimport { ScheduleEditWizard } from '../../views/schedules/wizard/ScheduleEditWizard';\nimport { SchedulesList } from '../../views/schedules/SchedulesList';\nimport { awxAPI } from '../../common/api/awx-utils';\nimport { SchedulePage } from '../../views/schedules/SchedulePage/SchedulePage';\nimport { ScheduleDetails } from '../../views/schedules/SchedulePage/ScheduleDetails';\nimport { ResourceNotifications } from '../../resources/notifications/ResourceNotifications';\n\nexport function useAwxManagementJobsRoutes() {\n  const { t } = useTranslation();\n  const managementJobsRoutes = useMemo<PageNavigationItem>(\n    () => ({\n      id: AwxRoute.ManagementJobs,\n      label: t('Management Jobs'),\n      path: 'management-jobs',\n      children: [\n        {\n          id: AwxRoute.ManagementJobSchedulePage,\n          path: ':id/schedules/:schedule_id/',\n          element: (\n            <SchedulePage\n              resourceEndPoint={awxAPI`/system_job_templates/`}\n              initialBreadCrumbs={[\n                { label: t('Management Jobs'), to: AwxRoute.ManagementJobs },\n                { id: 'data', to: AwxRoute.ManagementJobPage },\n                { label: t('Schedules'), id: 'schedules', to: AwxRoute.ManagementJobSchedules },\n              ]}\n              backTab={{\n                label: t('Back to Schedules'),\n                page: AwxRoute.ManagementJobSchedules,\n                persistentFilterKey: 'management-jobs-schedules',\n              }}\n              tabs={[\n                {\n                  label: t('Details'),\n                  page: AwxRoute.ManagementJobScheduleDetails,\n                },\n              ]}\n            />\n          ),\n          children: [\n            {\n              id: AwxRoute.ManagementJobScheduleDetails,\n              path: 'details',\n              element: <ScheduleDetails isSystemJobTemplateSchedule />,\n            },\n          ],\n        },\n        {\n          id: AwxRoute.ManagementJobScheduleEdit,\n          path: ':id/schedules/:schedule_id/edit',\n          element: <ScheduleEditWizard resourceEndPoint={awxAPI`/system_job_templates/`} />,\n        },\n        {\n          id: AwxRoute.ManagementJobScheduleCreate,\n          path: ':id/schedules/create',\n          element: <ScheduleAddWizard resourceEndPoint={awxAPI`/system_job_templates/`} />,\n        },\n        {\n          id: AwxRoute.ManagementJobPage,\n          path: ':id',\n          element: <ManagementJobPage />,\n          children: [\n            {\n              id: AwxRoute.ManagementJobSchedules,\n              path: 'schedules',\n              element: (\n                <SchedulesList\n                  createSchedulePageId={AwxRoute.ManagementJobScheduleCreate}\n                  sublistEndpoint={awxAPI`/system_job_templates`}\n                  resourceType=\"management-jobs\"\n                />\n              ),\n            },\n            {\n              id: AwxRoute.ManagementJobNotifications,\n              path: 'notifications',\n              element: <ResourceNotifications resourceType=\"system_job_templates\" />,\n            },\n            {\n              path: '',\n              element: <Navigate to=\"schedules\" replace />,\n            },\n          ],\n        },\n        {\n          path: '',\n          element: <ManagementJobs />,\n        },\n      ],\n    }),\n    [t]\n  );\n  return managementJobsRoutes;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Navigate } from 'react-router-dom';\nimport { PageNavigationItem } from '../../../../framework';\nimport { InstanceGroups } from '../../administration/instance-groups/InstanceGroups';\nimport { AwxRoute } from '../AwxRoutes';\nimport { InstanceGroupInstances } from '../../administration/instance-groups/InstanceGroupPage/InstanceGroupInstances';\nimport { InstanceDetails } from '../../administration/instances/InstanceDetails';\nimport { InstanceGroupInstancesPage } from '../../administration/instance-groups/InstanceGroupPage/InstanceGroupInstancesPage/InstanceGroupInstancesPage';\nimport { InstanceGroupTeamAccess } from '../../administration/instance-groups/InstanceGroupPage/InstanceGroupTeamAccess';\nimport { InstanceGroupUserAccess } from '../../administration/instance-groups/InstanceGroupPage/InstanceGroupUserAccess';\nimport {\n  CreateInstanceGroup,\n  EditInstanceGroup,\n} from '../../administration/instance-groups/InstanceGroupForm';\nimport { InstanceGroupAddTeams } from '../../administration/instance-groups/InstanceGroupAddTeams';\nimport { InstanceGroupAddUsers } from '../../administration/instance-groups/InstanceGroupAddUsers';\nimport { InstanceGroupDetails } from '../../administration/instance-groups/InstanceGroupPage/InstanceGroupDetails';\nimport { InstanceGroupJobs } from '../../administration/instance-groups/InstanceGroupPage/InstanceGroupJobs';\nimport {\n  CreateContainerGroup,\n  EditContainerGroup,\n} from '../../administration/instance-groups/ContainerGroupForm';\nimport { InstanceGroupPage } from '../../administration/instance-groups/InstanceGroupPage/InstanceGroupPage';\n\nexport function useAwxInstanceGroupsRoutes() {\n  const { t } = useTranslation();\n  const instanceGroupsRoutes = useMemo<PageNavigationItem>(\n    () => ({\n      id: AwxRoute.InstanceGroups,\n      label: t('Instance Groups'),\n      path: 'instance-groups',\n      children: [\n        {\n          id: AwxRoute.CreateContainerGroup,\n          path: 'container-group/create',\n          element: <CreateContainerGroup />,\n        },\n        {\n          id: AwxRoute.EditContainerGroup,\n          path: 'container-group/:id/edit',\n          element: <EditContainerGroup />,\n        },\n        {\n          id: AwxRoute.CreateInstanceGroup,\n          path: 'instance-group/create',\n          element: <CreateInstanceGroup />,\n        },\n        {\n          id: AwxRoute.EditInstanceGroup,\n          path: 'instance-group/:id/edit',\n          element: <EditInstanceGroup />,\n        },\n        {\n          id: AwxRoute.InstanceGroupPage,\n          path: ':id',\n          element: <InstanceGroupPage />,\n          children: [\n            {\n              id: AwxRoute.InstanceGroupDetails,\n              path: 'details',\n              element: <InstanceGroupDetails />,\n            },\n            {\n              id: AwxRoute.InstanceGroupInstances,\n              path: 'instances',\n              element: <InstanceGroupInstances />,\n            },\n            {\n              id: AwxRoute.InstanceGroupTeamAccess,\n              path: 'team-access',\n              element: <InstanceGroupTeamAccess />,\n            },\n            {\n              id: AwxRoute.InstanceGroupUserAccess,\n              path: 'user-access',\n              element: <InstanceGroupUserAccess />,\n            },\n            {\n              id: AwxRoute.InstanceGroupJobs,\n              path: 'jobs',\n              element: <InstanceGroupJobs />,\n            },\n            {\n              path: '',\n              element: <Navigate to=\"details\" replace />,\n            },\n          ],\n        },\n        {\n          id: AwxRoute.InstanceGroupInstancesPage,\n          path: ':id/instances/:instance_id/',\n          element: <InstanceGroupInstancesPage />,\n          children: [\n            {\n              id: AwxRoute.InstanceGroupInstanceDetails,\n              path: 'details',\n              element: <InstanceDetails />,\n            },\n          ],\n        },\n        {\n          id: AwxRoute.InstanceGroupAddTeams,\n          path: ':id/instance-groups/teams/add-teams',\n          element: <InstanceGroupAddTeams />,\n        },\n        {\n          id: AwxRoute.InstanceGroupAddUsers,\n          path: ':id/instance-groups/users/add-users',\n          element: <InstanceGroupAddUsers />,\n        },\n        {\n          path: '',\n          element: <InstanceGroups />,\n        },\n      ],\n    }),\n    [t]\n  );\n  return instanceGroupsRoutes;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageNavigationItem } from '../../../../framework';\nimport { AddInstance, EditInstance } from '../../administration/instances/InstanceForm';\nimport { InstanceDetails } from '../../administration/instances/InstanceDetails';\nimport { Instances } from '../../administration/instances/Instances';\nimport { AwxRoute } from '../AwxRoutes';\nimport { InstancePage } from '../../administration/instances/InstancesPage';\nimport { InstancePeers } from '../../administration/instances/InstancePeers';\nimport { InstanceListenerAddresses } from '../../administration/instances/InstanceListenerAddresses';\n\nexport function useAwxInstancesRoutes() {\n  const { t } = useTranslation();\n\n  const instancesRoutes = useMemo<PageNavigationItem>(() => {\n    return {\n      id: AwxRoute.Instances,\n      label: t('Instances'),\n      path: 'instances',\n      children: [\n        {\n          id: AwxRoute.AddInstance,\n          path: 'add',\n          element: <AddInstance />,\n        },\n        {\n          id: AwxRoute.EditInstance,\n          path: ':id/edit',\n          element: <EditInstance />,\n        },\n        {\n          id: AwxRoute.InstancePage,\n          path: ':id',\n          element: <InstancePage />,\n          children: [\n            {\n              id: AwxRoute.InstanceDetails,\n              path: 'details',\n              element: <InstanceDetails />,\n            },\n            {\n              id: AwxRoute.InstanceListenerAddresses,\n              path: 'listener-addresses',\n              element: <InstanceListenerAddresses />,\n            },\n            {\n              id: AwxRoute.InstancePeers,\n              path: 'peers',\n              element: <InstancePeers />,\n            },\n          ],\n        },\n        {\n          path: '',\n          element: <Instances />,\n        },\n      ],\n    };\n  }, [t]);\n  return instancesRoutes;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageNavigationItem } from '../../../../framework';\nimport { ExecutionEnvironmentPage } from '../../administration/execution-environments/ExecutionEnvironmentPage/ExecutionEnvironmentPage';\nimport { ExecutionEnvironments } from '../../administration/execution-environments/ExecutionEnvironments';\nimport { ExecutionEnvironmentDetails } from '../../administration/execution-environments/ExecutionEnvironmentPage/ExecutionEnvironmentDetails';\nimport { AwxRoute } from '../AwxRoutes';\nimport {\n  CreateExecutionEnvironment,\n  EditExecutionEnvironment,\n} from '../../administration/execution-environments/ExecutionEnvironmentForm';\nimport { ExecutionEnvironmentTemplates } from '../../administration/execution-environments/ExecutionEnvironmentPage/ExecutionEnvironmentTemplates';\nimport { ExecutionEnvironmentAddTeams } from '../../administration/execution-environments/components/ExecutionEnvironmentAddTeams';\nimport { ExecutionEnvironmentAddUsers } from '../../administration/execution-environments/components/ExecutionEnvironmentAddUsers';\nimport { ExecutionEnvironmentTeamAccess } from '../../administration/execution-environments/ExecutionEnvironmentPage/ExecutionEnvironmentTeamAccess';\nimport { ExecutionEnvironmentUserAccess } from '../../administration/execution-environments/ExecutionEnvironmentPage/ExecutionEnvironmentUserAccess';\n\nexport function useAwxExecutionEnvironmentRoutes() {\n  const { t } = useTranslation();\n  const executionEnironmentRoutes = useMemo<PageNavigationItem>(\n    () => ({\n      id: AwxRoute.ExecutionEnvironments,\n      label: t('Execution Environments'),\n      path: 'execution-environments',\n      children: [\n        {\n          id: AwxRoute.ExecutionEnvironmentPage,\n          path: ':id',\n          element: <ExecutionEnvironmentPage />,\n          children: [\n            {\n              id: AwxRoute.ExecutionEnvironmentDetails,\n              path: 'details',\n              element: <ExecutionEnvironmentDetails />,\n            },\n            {\n              id: AwxRoute.ExecutionEnvironmentTemplates,\n              path: 'templates',\n              element: <ExecutionEnvironmentTemplates />,\n            },\n            {\n              id: AwxRoute.ExecutionEnvironmentTeamAccess,\n              path: 'team-access',\n              element: <ExecutionEnvironmentTeamAccess />,\n            },\n            {\n              id: AwxRoute.ExecutionEnvironmentUserAccess,\n              path: 'user-access',\n              element: <ExecutionEnvironmentUserAccess />,\n            },\n          ],\n        },\n        {\n          path: '',\n          element: <ExecutionEnvironments />,\n        },\n        {\n          id: AwxRoute.CreateExecutionEnvironment,\n          path: 'add',\n          element: <CreateExecutionEnvironment />,\n        },\n        {\n          id: AwxRoute.EditExecutionEnvironment,\n          path: ':id/edit',\n          element: <EditExecutionEnvironment />,\n        },\n        {\n          id: AwxRoute.ExecutionEnvironmentAddUsers,\n          path: ':id/user-access/add',\n          element: <ExecutionEnvironmentAddUsers />,\n        },\n        {\n          id: AwxRoute.ExecutionEnvironmentAddTeams,\n          path: ':id/team-access/add',\n          element: <ExecutionEnvironmentAddTeams />,\n        },\n      ],\n    }),\n    [t]\n  );\n  return executionEnironmentRoutes;\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Navigate } from 'react-router-dom';\nimport { PageNavigationItem } from '../../../../framework';\nimport {\n  CreateCredentialType,\n  EditCredentialType,\n} from '../../access/credential-types/CredentialTypeForm';\nimport { CredentialTypeCredentials } from '../../access/credential-types/CredentialTypePage/CredentialTypeCredentials';\nimport { CredentialTypeDetails } from '../../access/credential-types/CredentialTypePage/CredentialTypeDetails';\nimport { CredentialTypePage } from '../../access/credential-types/CredentialTypePage/CredentialTypePage';\nimport { CredentialTypes } from '../../access/credential-types/CredentialTypes';\nimport { AwxRoute } from '../AwxRoutes';\n\nexport function useAwxCredentialTypesRoutes() {\n  const { t } = useTranslation();\n  const workflowApprovalRoutes = useMemo<PageNavigationItem>(\n    () => ({\n      id: AwxRoute.CredentialTypes,\n      label: t('Credential Types'),\n      path: 'credential-types',\n      children: [\n        {\n          id: AwxRoute.CreateCredentialType,\n          path: 'create',\n          element: <CreateCredentialType />,\n        },\n        {\n          id: AwxRoute.EditCredentialType,\n          path: ':id/edit',\n          element: <EditCredentialType />,\n        },\n        {\n          id: AwxRoute.CredentialTypePage,\n          path: ':id/',\n          element: <CredentialTypePage />,\n          children: [\n            {\n              id: AwxRoute.CredentialTypeDetails,\n              path: 'details',\n              element: <CredentialTypeDetails />,\n            },\n            {\n              id: AwxRoute.CredentialTypeCredentials,\n              path: 'credentials',\n              element: <CredentialTypeCredentials />,\n            },\n            {\n              path: '',\n              element: <Navigate to=\"details\" replace />,\n            },\n          ],\n        },\n        {\n          path: '',\n          element: <CredentialTypes />,\n        },\n      ],\n    }),\n    [t]\n  );\n  return workflowApprovalRoutes;\n}\n","import { Button as PFButton, Stack, Title } from '@patternfly/react-core';\nimport { AzureIcon, GithubIcon, GoogleIcon, UserCircleIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\n\nconst Button = styled(PFButton)`\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nexport type AuthOption = {\n  name?: string;\n  login_url: string;\n  type: string;\n};\n\ntype SocialAuthLoginProps = {\n  options?: AuthOption[];\n};\n\nexport function SocialAuthLogin(props: SocialAuthLoginProps) {\n  const { options } = props;\n  const { t } = useTranslation();\n\n  if (!options || !Object.keys(options).length) {\n    return null;\n  }\n\n  return (\n    <>\n      <Title headingLevel=\"h3\">{t`Log in with`}</Title>\n      <Stack style={{ width: '100%' }} hasGutter>\n        {options.map((option) => (\n          <SocialAuthLink key={option.login_url} option={option} />\n        ))}\n      </Stack>\n    </>\n  );\n}\n\nconst icons: { [key: string]: typeof GithubIcon } = {\n  'azuread-oauth2': AzureIcon,\n  github: GithubIcon,\n  'github-org': GithubIcon,\n  'github-team': GithubIcon,\n  'github-enterprise': GithubIcon,\n  'github-enterprise-org': GithubIcon,\n  'github-enterprise-team': GithubIcon,\n  'google-oauth2': GoogleIcon,\n  oidc: UserCircleIcon,\n  saml: UserCircleIcon,\n};\n\nfunction SocialAuthLink(props: { option: AuthOption }) {\n  const { option } = props;\n  const { t } = useTranslation();\n\n  const labels: { [key: string]: string } = {\n    'azuread-oauth2': t('Azure AD'),\n    github: t('GitHub'),\n    'github-org': t('GitHub Organizations'),\n    'github-team': t('Github Teams'),\n    'github-enterprise': t('GitHub Enterprise'),\n    'github-enterprise-org': t('GitHub Enterprise Organizations'),\n    'github-enterprise-team': t('GitHub Enterprise Teams'),\n    'google-oauth2': t('Google'),\n    oidc: t('OIDC'),\n    saml: t('SAML'),\n  };\n\n  const Icon = icons[option.type] ?? UserCircleIcon;\n\n  return (\n    <Button\n      data-cy={`social-auth-${option.type}`}\n      component=\"a\"\n      href={option.login_url}\n      variant=\"secondary\"\n      icon={<Icon />}\n    >\n      {option.name || labels[option.type] || ''}\n    </Button>\n  );\n}\n","import {\n  BackgroundImage,\n  Brand,\n  Login,\n  LoginFooter,\n  LoginForm,\n  LoginHeader,\n  LoginMainBody,\n  LoginMainFooter,\n  LoginMainHeader,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { ReactNode, useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLocation } from 'react-router';\nimport styled from 'styled-components';\nimport { useFrameworkTranslations } from '../../../framework';\nimport { ErrorBoundary } from '../../../framework/components/ErrorBoundary';\nimport { getCookie } from '../crud/cookie';\nimport { createRequestError, RequestError } from '../crud/RequestError';\nimport { AuthOption, SocialAuthLogin } from '../SocialAuthLogin';\n\nexport function AnsibleLogin(props: {\n  /** Title for the login main body header of the login page */\n  loginTitle?: string;\n\n  /** Subtitle for the login main body header of the login page */\n  loginSubtitle?: string;\n\n  /** The brand image for the login page */\n  brandImg?: ReactNode;\n\n  /** Attribute that specifies the alt text of the brand image for the login page */\n  brandImgAlt: string;\n\n  /** Content rendered inside of the text component of the login page */\n  textContent?: string;\n\n  /** Content rendered inside of social media login footer section */\n  authOptions?: AuthOption[];\n\n  /** Attribute that specifies the URL of the background image for the login page */\n  backgroundImgSrc?: string;\n\n  /** The url to the API endpoint for logging in */\n  loginApiUrl: string;\n\n  /** Callback function that is called when the user successfully logs in */\n  onSuccess: () => void;\n}) {\n  const { t } = useTranslation();\n  const [translations] = useFrameworkTranslations();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [helperText, setHelperText] = useState<ReactNode>('');\n  const location = useLocation();\n\n  const { loginApiUrl } = props;\n  const queryParams = new URLSearchParams(location.search);\n  const nextPath = queryParams.get('next');\n  const onSubmit = useCallback(async () => {\n    try {\n      const loginPageResponse = await fetch(loginApiUrl, {\n        credentials: 'include',\n        headers: { Accept: 'application/json,text/*' },\n      });\n      if (!loginPageResponse.ok) {\n        throw await createRequestError(loginPageResponse);\n      }\n\n      const searchParams = new URLSearchParams();\n      searchParams.set('username', username);\n      searchParams.set('password', password);\n\n      const headers = {\n        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',\n        ['X-Csrftoken']: getCookie('csrftoken') || '',\n      };\n\n      try {\n        // We need to make a request to the login page first to get the CSRF token\n        // the CSRF token is required for the login request\n        // and is set as a cookie on the login page response\n        const response = await fetch(loginApiUrl, {\n          credentials: 'include',\n          method: 'POST',\n          headers,\n          body: searchParams,\n          redirect: 'manual',\n        });\n        if (!response.ok) {\n          throw await createRequestError(response);\n        }\n      } catch (err) {\n        if (!(err instanceof RequestError)) {\n          throw err;\n        }\n        if (err.statusCode === 401 || err.statusCode === 403) {\n          throw new Error(t('Invalid username or password. Please try again.'));\n        } else if (err.statusCode !== 0) {\n          throw err;\n        }\n      }\n\n      if (nextPath) {\n        window.location.href = nextPath;\n      } else {\n        props.onSuccess?.();\n      }\n    } catch (err) {\n      if (err instanceof Error) {\n        setHelperText(<ErrorSpanStyled>{err.message}</ErrorSpanStyled>);\n      } else {\n        setHelperText(\n          <ErrorSpanStyled>{t('Invalid username or password. Please try again.')}</ErrorSpanStyled>\n        );\n      }\n    }\n  }, [loginApiUrl, password, props, t, username, nextPath]);\n\n  const hasAuthFailedFlag = location.search.includes('auth_failed');\n  useEffect(() => {\n    if (hasAuthFailedFlag) {\n      setHelperText(<ErrorSpanStyled>{t('Unable to complete social auth login')}</ErrorSpanStyled>);\n    }\n  }, [hasAuthFailedFlag, t]);\n\n  // Need to use component version of PatternFly's LoginPage\n  // because we need to be able to use a component for the brand image\n  // SEE: https://github.com/patternfly/patternfly-react/blob/main/packages/react-core/src/components/LoginPage/LoginPage.tsx\n  return (\n    <ErrorBoundary message={translations.errorText}>\n      {props.backgroundImgSrc && <BackgroundImage src={props.backgroundImgSrc} />}\n      <Login\n        header={\n          <LoginHeader\n            headerBrand={\n              typeof props.brandImg === 'string' ? (\n                <Brand src={props.brandImg} alt={props.brandImgAlt} />\n              ) : (\n                <BrandStyled>{props.brandImg}</BrandStyled>\n              )\n            }\n          />\n        }\n        footer={\n          props.textContent && (\n            <LoginFooter>\n              <p>{props.textContent}</p>\n            </LoginFooter>\n          )\n        }\n      >\n        <LoginMainHeader\n          title={props.loginTitle ?? t('Log in to your account')}\n          subtitle={props.loginSubtitle}\n        />\n        <LoginMainBody>\n          <LoginForm\n            showHelperText={!!helperText}\n            helperText={helperText}\n            helperTextIcon={<ErrorExclamationCircleIconStyled />}\n            usernameLabel={t('Username')}\n            usernameValue={username}\n            onChangeUsername={(_, username) => {\n              setHelperText('');\n              setUsername(username);\n            }}\n            isValidUsername={!helperText || !!username}\n            passwordLabel={t('Password')}\n            passwordValue={password}\n            onChangePassword={(_, password) => {\n              setHelperText('');\n              setPassword(password);\n            }}\n            isValidPassword={!helperText || !!password}\n            isShowPasswordEnabled\n            showPasswordAriaLabel={t('Show password')}\n            hidePasswordAriaLabel={t('Hide password')}\n            loginButtonLabel={t('Log in')}\n            onLoginButtonClick={(event) => {\n              event.preventDefault();\n              if (!username) {\n                setHelperText(t('Username is required'));\n                return;\n              }\n              if (!password) {\n                setHelperText(t('Password is required'));\n                return;\n              }\n              void onSubmit();\n            }}\n          />\n        </LoginMainBody>\n        {props.authOptions && (\n          <LoginMainFooter\n            socialMediaLoginContent={\n              props.authOptions ? <SocialAuthLogin options={props.authOptions} /> : undefined\n            }\n            socialMediaLoginAriaLabel={t('Log in with authentication provider')}\n          />\n        )}\n      </Login>\n    </ErrorBoundary>\n  );\n}\n\nconst ErrorSpanStyled = styled.span`\n  color: var(--pf-v5-global--danger-color--200);\n`;\n\nconst ErrorExclamationCircleIconStyled = styled(ExclamationCircleIcon)`\n  color: var(--pf-v5-global--danger-color--100);\n`;\n\nconst BrandStyled = styled.div`\n  margin-bottom: 16px;\n`;\n","import { Page } from '@patternfly/react-core';\nimport useSWR, { mutate } from 'swr';\nimport { LoadingState } from '../../../framework/components/LoadingState';\nimport { AnsibleLogin } from '../../common/AnsibleLogin/AnsibleLogin';\nimport type { AuthOption } from '../../common/SocialAuthLogin';\nimport { requestGet } from '../../common/crud/Data';\nimport { awxAPI } from '../common/api/awx-utils';\nimport { useAwxActiveUser } from '../common/useAwxActiveUser';\nimport { AwxConfigProvider } from '../common/useAwxConfig';\nimport { WebSocketProvider } from '../common/useAwxWebSocket';\nimport { DocsVersionProvider } from '../common/useDocsVersion';\n\ntype AwxAuthOptions = {\n  [key: string]: {\n    login_url: string;\n  };\n};\n\nexport function AwxLogin(props: { children: React.ReactNode }) {\n  const { data: options } = useSWR<AwxAuthOptions>(awxAPI`/auth/`, requestGet);\n  const authOptions: AuthOption[] = [];\n  if (options && typeof options === 'object') {\n    Object.keys(options).forEach((key) => {\n      authOptions.push({ login_url: options[key].login_url, type: key });\n    });\n  }\n\n  const { activeAwxUser, refreshActiveAwxUser } = useAwxActiveUser();\n\n  if (activeAwxUser === undefined) {\n    return (\n      <Page>\n        <LoadingState />\n      </Page>\n    );\n  }\n\n  if (!activeAwxUser) {\n    return (\n      <AnsibleLogin\n        authOptions={authOptions}\n        loginApiUrl=\"/api/login/\"\n        onSuccess={() => {\n          refreshActiveAwxUser?.();\n          void mutate(() => true);\n        }}\n        brandImg=\"/assets/awx-logo.svg\"\n        brandImgAlt={process.env.PRODUCT}\n      />\n    );\n  }\n\n  return (\n    <DocsVersionProvider version={undefined}>\n      <WebSocketProvider>\n        <AwxConfigProvider>{props.children}</AwxConfigProvider>\n      </WebSocketProvider>\n    </DocsVersionProvider>\n  );\n}\n","import '@patternfly/patternfly/patternfly-addons.css';\nimport '@patternfly/patternfly/patternfly-base.css';\nimport '@patternfly/patternfly/patternfly-charts.css';\n\nimport '@patternfly/patternfly/patternfly-charts-theme-dark.css';\n\nimport { BrowserRouter } from 'react-router-dom';\nimport { PageFramework } from '../../../framework';\nimport '../../common/i18n';\nimport { AwxActiveUserProvider } from '../common/useAwxActiveUser';\nimport { AwxApp } from './AwxApp';\nimport { AwxLogin } from './AwxLogin';\n\n// eslint-disable-next-line no-restricted-exports\nexport default function AwxMain() {\n  return (\n    <BrowserRouter>\n      <PageFramework defaultRefreshInterval={10}>\n        <AwxActiveUserProvider>\n          <AwxLogin>\n            <AwxApp />\n          </AwxLogin>\n        </AwxActiveUserProvider>\n      </PageFramework>\n    </BrowserRouter>\n  );\n}\n"],"names":["PageActionType","PageActionSelection","breakpoints","xs","Number","xsBreakpoint","value","replace","sm","smBreakpoint","md","mdBreakpoint","lg","lgBreakpoint","xl","xlBreakpoint","xxl","xl2Breakpoint","useBreakpoint","size","windowSize","setWindowSize","useState","window","innerWidth","handleResize","useCallback","useEffect","handler","addEventListener","removeEventListener","useWindowSize","PFColorE","getPatternflyColor","color","pfSuccess","pfDanger","pfWarning","pfInfo","pfDisabled","pfUnreachable","useID","props","generatedId","useId","getID","toLowerCase","id","name","title","label","defaultTranslations","by","cancelText","canceledText","cardView","clearAllFilters","clickToRefresh","closeText","confirmText","countMore","documentation","errorText","filter","listView","manageColumns","moreInformation","noItemsFound","noResultsFound","noResultsMatchCriteria","noSelection","noSelections","noneSelectedText","ofText","pendingText","pleaseFixValidationErrors","processingText","selectNone","selectedText","showLess","sort","submitText","submittingText","successText","tableView","unknownError","validating","FrameworkTranslationsContext","createContext","alert","FrameworkTranslationsProvider","state","_jsx","Provider","children","useFrameworkTranslations","useContext","isPageActionHidden","action","selectedItem","selection","None","isHidden","Single","usePageActionDisabled","translations","selectedItems","isDisabled","Multiple","PageActionSwitch","wrapper","iconOnly","isPageActionDisabled","Wrapper","Fragment","isChecked","isSwitchOn","tooltip","labelOff","undefined","showPinnedLabel","style","marginLeft","marginRight","Tooltip","content","trigger","Switch","ariaLabel","hasCheckIcon","onChange","onToggle","isReversed","StyledDropdownItem","styled","div","withConfig","componentId","$hasSwitches","$isDanger","ActionSwitchDiv","PageActionDropdown","icon","onOpen","position","variant","actions","filteredActions","length","type","Seperator","shift","pop","result","previousAction","push","collapseAdjacentSeperators","filterActionSeperators","dropdownOpen","setDropdownOpen","hasBulkActions","useMemo","every","hasIcons","find","hasSwitches","_Fragment","isPrimary","ButtonVariant","primary","isSecondary","isKebab","Boolean","CustomIcon","tooltipContent","dropdownMenuLabel","Icon","disabledMenuToggle","_jsxs","Button","backgroundColor","isAriaDisabled","paddingLeft","CaretDownIcon","Dropdown","isOpen","onSelect","onOpenChange","popperProps","appendTo","document","body","preventOverflow","enableFlip","toggle","toggleRef","MenuToggle","ref","className","onClick","isExpanded","EllipsisVIcon","DropdownList","map","index","PageDropdownActionItem","t","useTranslation","TransparentIcon","isButtonDisabled","isDanger","DropdownItem","split","join","Danger","iconSize","paddingRight","Link","to","href","Divider","component","CircleIcon","opacity","PageActionButton","secondary","danger","includes","plain","ouiaId","p","PageActionsPinned","Split","hasGutter","alignItems","PageActionPinned","isLink","DropdownPosition","right","PageActions","collapseBreakpoint","collapse","collapseButtons","visibleActions","pinnedActions","isPageActionPinned","dropdownActions","openLabels","setOpenLabels","Object","values","v","handleOnOpen","open","labels","Flex","flexWrap","default","spaceItems","justifyContent","FlexItem","isPinned","PageAlertToasterContext","addAlert","removeAlert","replaceAlert","removeAlerts","usePageAlertToaster","PageAlertToasterProvider","toasterAlerts","setToasterAlerts","pageAlertToaster","alerts","a","isInteger","timeout","setTimeout","alertIndex","findIndex","newAlerts","oldAlert","oldAlertIndex","AlertGroup","isToast","isLiveRegion","alertProps","_createElement","Alert","key","actionClose","AlertActionCloseButton","onClose","ErrorBoundary","Component","constructor","args","hasError","getDerivedStateFromError","_","componentDidCatch","error","errorInfo","console","render","this","message","BytesCell","bytes","decimals","dm","i","Math","floor","log","parseFloat","pow","toFixed","useClipboard","copySuccess","setCopySuccess","alertToaster","alertSuccess","alertError","alertNavigatorWarning","writeToClipboard","text","async","navigator","clipboard","writeText","err","copyToClipboardAsync","catch","CopyCell","ClipboardCopy","hoverTip","clickTip","textAriaLabel","toggleAriaLabel","display","borderRadius","onCopy","Truncate","minWidth","PageSettingsContext","usePageSettings","settings","PageSettingsProvider","setSettingsState","preferencesStorage","localStorage","getItem","JSON","parse","e","refreshInterval","defaultRefreshInterval","theme","tableLayout","formColumns","formLayout","dateFormat","dataEditorFormat","setSettings","setItem","stringify","activeTheme","matchMedia","matches","documentElement","classList","add","remove","SWRConfig","formatDateString","dateObj","Date","toLocaleString","DateCell","date","SplitItem","toLocaleDateString","toLocaleTimeString","DateCellSpan","span","DateTimeCell","author","dateTime","setDateTime","format","updateTime","DateTime","fromMillis","fromISO","now","toMillis","toRelative","toJSDate","setInterval","clearTimeout","isInline","ElapsedTimeCell","start","valueOf","finish","elapsed","setElapsed","max","totalSeconds","seconds","minutes","hours","days","LabelsCell","LabelGroup","numLabels","noWrap","Label","labelsWithLinks","labelWithLink","link","IconWrapper","newProps","padRight","padLeft","newChildren","Children","toArray","child","isValidElement","cloneElement","TextCell","navigate","useNavigate","iconAlign","alignSelf","iconColor","maxWidth","whiteSpace","textOverflow","overflow","disableLinks","preventDefault","PageChartContainer","useRef","containerSize","setContainerSize","width","current","clientWidth","height","updateSize","newContainerSize","clientHeight","useResizeObserver","ChartContainerDiv","PropsDiv","Scrollable","divEl","topShadow","setTopShadow","bottomShadow","setBottomShadow","update","scrollTop","scrollBottom","scrollHeight","innerClassNames","borderTop","borderBottom","innerClassName","onScroll","PageDashboardContext","columns","Divisor","PageDashboard","setColumns","useLayoutEffect","entry","contentRect","PageSection","isWidthLimited","gap","gridTemplateColumns","IconButton","button","Help","help","docLink","Popover","headerContent","bodyContent","Stack","Array","isArray","StackItem","ExternalLinkAltIcon","IconButtonStyled","OutlinedQuestionCircleIcon","heightUnit","PageDashboardCard","dashboardContext","colSpan","xxs","isCollapsed","setCollapsedState","heightSpan","none","rowSpan","minHeight","Card","isFlat","isRounded","transition","gridColumn","gridRow","maxHeight","isCompact","linkText","CardHeader","grow","supertitle","Text","Title","headingLevel","verticalAlign","lineHeight","helpTitle","helpDocLink","subtitle","headerControls","canCollapse","AngleRightIcon","transform","setCollapsed","collapsed","description","paddingTop","footerActionButton","CardFooter","textAlign","PageChartLegend","horizontal","PageChartLegendHorizontalStyle","legend","item","count","allowZero","PageChartLegendHorizontalItemStyle","PageChartLegendColor","showLegendCount","PageChartLegendCount","PageChartLegendLabel","PageChartLegendVerticalStyle","PageChartLegendColorStyle","PageChartLegendCountStyle","PageChartLegendLabelStyle","textDecoration","CursorVoronoiContainer","createContainer","PageDashboardChart","xLabel","yLabel","minDomain","onlyIntegerTicks","groups","group","legendData","childName","symbol","fill","reduce","acc","maxDomainY","maxValues","padding","top","bottom","left","round","toString","flexGrow","YAxisLabel","paddingBottom","flexDirection","margin","Chart","colorScale","maxDomain","y","containerComponent","cursorDimension","point","datum","labelComponent","ChartLegendTooltip","cornerRadius","mouseFollowTooltips","voronoiDimension","voronoiPadding","ChartAxis","fixLabelOverlap","dependentAxis","showGrid","tickFormat","ChartLine","data","strokeWidth","stroke","x","interpolation","ChartScatter","active","ChartStack","ChartArea","XAxisLabel","PopoverButton","StandardPopover","header","rest","hideOnOutsideClick","HelpIcon","PageDetail","helpText","isEmpty","DescriptionListGroup","fullWidth","DescriptionListTerm","DescriptionListDescriptionStyled","DescriptionListDescription","PageDetails","disablePadding","alertPrompts","orientation","labelOrientation","numberOfColumns","PageSectionStyled","alertPrompt","DescriptionList","columnModifier","disableScroll","PageTableViewTypeE","ColumnTableOption","ColumnListOption","ColumnCardOption","ColumnModalOption","ColumnDashboardOption","ColumnPriority","TableColumnCell","column","cell","useVisibleModalColumns","modal","hidden","useDashboardColumns","table","expanded","useColumnsWithoutExpandedRow","useColumnsWithoutSort","dashboard","PageDetailsFromColumns","columnsWithValue","itemValue","trim","firstColumns","priority","last","lastColumns","genericErrorAdapter","errorDetailKeys","genericErrorKeys","genericErrors","fieldErrors","errorDetailsKey","Error","BulkSelector","setIsOpen","isSmallOrLarger","pageItems","selectItems","unselectAll","maxSelections","allPageItemsSelected","itemCount","onToggleCheckbox","toggleText","unselectedPageItems","disableBulkSelector","selectedCount","DropdownToggle","splitButtonItems","DropdownToggleCheckbox","_event","selectNoneDropdownItem","selectNoneText","selectPageDropdownItem","dropdownItems","zIndex","useOverridableState","setValue","valueState","setValueState","setValueFn","PageMultiSelect","placeholder","options","disableClearSelection","maxChipSize","queryLabel","compareOptionValues","setOpen","searchValue","setSearchValue","selectListRef","selectedOptions","option","selected","onSelectHandler","itemId","previousValues","newSelectedOption","searchRef","visibleOptions","newOptions","disableSortOptions","b","localeCompare","some","Select","onKeyDown","event","focus","isFullWidth","Chip","isReadOnly","marginTop","marginBottom","ChipGroup","numChips","disableClearChips","textMaxWidth","TimesIcon","role","innerRef","MenuSearch","MenuSearchInput","SearchInput","onClear","stopPropagation","resultsCount","firstElement","querySelector","isLoading","Bullseye","Spinner","SelectOption","ScrollableStyled","keys","groupName","SelectGroup","PageMultiSelectList","footer","MenuFooter","SelectList","optionId","hasCheckbox","isSelected","PageAsyncMultiSelect","loading","setLoading","allLoaded","setAllLoaded","loadingError","setLoadingError","total","setTotal","setOptions","nextRef","setSearch","debounce","search","queryOptions","activeAbortController","queryHandler","abort","abortController","AbortController","prevOptions","next","signal","then","aborted","remaining","uniqueValues","Set","has","lhs","rhs","finally","onLoadMore","onReset","ActionList","onBrowse","ActionListItem","ButtonFullWidth","SyncAltIcon","iconPosition","queryErrorText","PageSingleSelect","selectedOption","selectedLabel","disableAutoSelect","isRequired","PageSingleSelectContext","pointerEvents","cursor","shouldFocusToggleOnSelect","PageSingleSelectList","PageAsyncSingleSelect","writeInOption","DateRangeFilterPresets","ToolbarDateRangeFilter","filterValues","setFilterValues","defaultValue","selectedValue","from","setFrom","setTo","isCustom","newValues","ToolbarItem","DateRange","fromDate","DatePicker","onFromChange","onToChange","isValidDate","rangeStart","validators","invalidFormatText","TimesCircleIcon","ToolbarTextMultiFilter","comparison","InputGroup","InputGroupItem","TextInputGroup","TextInputGroupMain","onKeyUp","addFilter","TextInputGroupUtilities","tabIndex","ArrowRightIcon","ToolbarSingleTextFilter","setValueDebounced","hasKey","PageToolbarToggleGroup","setIsExpanded","activeGroup","setActiveGroup","PageToolbarToggleGroupContext","ToolbarToggleGroup","ToolbarFilterType","FiltersToolbarItem","toolbarFilters","filterState","setFilterState","selectedFilterKey","setSeletedFilterKey","selectedFilter","showLabel","SingleSelect","ToolbarFilterComponent","limitFiltersToOneOrOperation","FilterIcon","PageToolbarFilters","showFilterLabel","groupedFilters","pinnedFilters","toggleIcon","breakpoint","ToolbarGroup","ToolbarFilter","categoryName","chips","MultiSelect","o","AsyncSingleSelect","AsyncMultiSelect","node","deleteChip","_group","filters","newState","deleteChipGroup","showToolbarItem","setter","newFilters","isHasOrFilter","SingleText","MultiText","queryPlaceholder","openBrowse","Consumer","context","PageToolbarSort","setSort","sortDirection","setSortDirection","sortOptions","sortOption","sortType","sortDirectionIcon","SortAlphaUpIcon","SortAlphaDownAltIcon","SortNumericUpIcon","SortNumericDownAltIcon","SortAmountUpIcon","SortAmountDownIcon","ToolbarSortSelect","defaultDirection","PageToolbarView","viewType","setViewType","openColumnModal","viewTypeCount","disableTableView","disableCardView","disableListView","TableIcon","Cards","ThLargeIcon","List","ListIcon","ColumnsIcon","ToggleGroup","Table","vt","ToggleGroupItem","FlexGrowDiv","ToolbarContent","PFToolbarContent","PageToolbar","page","perPage","setPage","setPerPage","clearAllFiltersProp","perPageOptions","isMdOrLarger","isXxlOrLarger","toolbarActions","onSetPage","onPerPageSelect","showSearchAndFilters","showToolbarActions","showSelect","toolbarAction","Toolbar","Skeleton","inset","toolbarContent","disablePagination","autoHidePagination","visibility","Pagination","PaginationVariant","EmptyStateError","titleProp","EmptyState","isFullHeight","EmptyStateHeader","titleText","EmptyStateIcon","ExclamationCircleIcon","EmptyStateBody","EmptyStateFooter","location","reload","EmptyStateCustom","footNote","image","EmptyStateVariant","full","EmptyStateActions","EmptyStateNoData","PlusCircleIcon","CubesIcon","PageDialogContext","dialogs","clearDialogs","pushDialog","_dialog","popDialog","PageDialogProvider","setDialogs","dialog","slice","usePageDialogs","usePageDialog","setDialog","useSelected","items","keyFn","defaultSelection","selectedMap","setSelectedMap","changed","forEach","selectItem","itemKey","unselectItem","itemsRef","selectAll","unselectItems","allSelected","usePaged","source","paged","setPaged","newPaged","ceil","ReorderItems","setItems","hideColumnHeaders","isSelectableWithCheckbox","itemStartIndex","setStartItemIndex","draggedItemId","setDraggedItemId","isDragging","setIsDragging","bodyRef","isValidDrop","evt","ulRect","getBoundingClientRect","clientX","clientY","onDrop","onDragCancel","el","styles","modifiers","ghostRow","setAttribute","onDragEnd","target","onDragStart","dataTransfer","effectAllowed","newDraggedItemId","currentTarget","originalStartIndex","updateItem","newItems","dragOver","gridBreakPoint","Thead","Tr","Th","select","columnIndex","Tbody","onDragOver","curListItem","closest","contains","dragId","newDraggedItemIndex","tempItemOrder","moveItem","arr","toIndex","fromIndex","temp","splice","onDragLeave","rowIndex","draggable","Td","draggableRow","useManageItems","saveFn","loadFn","itemsState","setItemsState","itemState","aIndex","bIndex","enabled","onApplyChanges","orderedItems","managedItemsState","onSubmit","openManageItems","ManageItemsModal","defaultSelectedItems","managedItems","Modal","ModalVariant","medium","onApply","hasNoBodyWrapper","ModalBoxBody","hideSelection","PageLoadingTable","PagePagination","compact","boxShadow","PageGrid","setGridTemplateColumns","resize","min","maxColumns","gridAutoRows","Small","small","CardHeaderDiv","CardIconDiv","CardTopDiv","CardDiv","CardFooterDiv","CardFooterLabelsDiv","PageDetailDiv","ColumnsDiv","PageTableCard","itemToCardFn","itemActions","defaultCardSubtitle","card","isItemSelected","onSelectClick","showDropdown","showActions","isLarge","isSelectable","Checkbox","hasNoOffset","iconAboveTitle","CardTitle","badge","badgeTooltip","badgeTooltipTitle","badgeColor","cardBody","alertTitle","alertVariant","alertContent","PageTableCards","tableColumns","rowActions","defaultSubtitle","nameColumn","subtitleColumn","descriptionColumn","countColumns","labelColumn","cardColumns","hasDescription","visibleCardColumns","pageTableCard","CardBody","useColumnsToTableCardFn","catalogCards","PageTableList","columnsToDataList","primaryColumns","secondaryColumns","list","DataListItem","DataListItemRow","DataListCheck","DataListItemCells","dataListCells","DataListCell","fontWeight","DataListAction","isPlainButtonAction","useColumnsToDataList","DataList","ScrollDiv","PageTable","hasTableViewType","hasListViewType","setViewTypeState","defaultTableView","openColumnManagement","managedColumns","setColumn","loadColumn","saveColumn","tableColumn","useManageColumns","defaultSort","defaultSortDirection","s","errorStateTitle","emptyStateTitle","emptyStateDescription","emptyStateNoDataIcon","emptyStateButtonClick","emptyStateButtonText","emptyStateButtonIcon","emptyStateActions","topContent","scrollTopContent","hideTable","PageTableView","topBorder","isSelectMultiple","useVisibleTableColumns","descriptionColumns","expandedRowColumns","useExpandedColumns","expandedRow","expandedRowFunctions","fn","containerRef","scroll","setScroll","updateScroll","scrollLeft","scrollWidth","returnElement","borders","borderless","isStickyHeader","TableHead","scrollRight","TableRow","isLastRow","disableLastRowBorder","defaultExpandedRows","emptyStateIcon","SearchIcon","getColumnSort","onSort","_columnIndex","sortByDirection","sortBy","direction","isStickyColumn","stickyMinWidth","hasRightBorder","modifier","isActionCell","expandedRowContent","setExpanded","disableRow","expand","isSelecting","TableCells","CollapseColumn","actionsExpanded","setActionsExpanded","dataLabel","useAbortController","abortControllerRef","BulkActionDialog","actionColumns","actionFn","onComplete","errorAdapter","isProcessing","setProcessing","isCanceled","setCanceled","progress","setProgress","setError","statuses","setStatuses","onCancelClicked","newStatuses","onCloseClicked","limit","pLimit","successfulItems","Promise","all","parsedErrors","process","pagination","modalColumns","titleIconVariant","status","PendingIcon","CheckCircleIcon","disableBodyPadding","Progress","ProgressSize","ProgressVariant","success","useBulkActionDialog","defaultErrorAdapter","setProps","onCloseHandler","failedItems","canceledItems","compareStrings","ModalBodyDiv","ConfirmBoxDiv","BulkConfirmationDialog","prompt","confirmationColumns","isItemNonActionable","onConfirm","actionButtonText","l","r","confirmed","setConfirmed","columnsForConfirmation","ExclamationTriangleIcon","actionableItems","val","useBulkConfirmation","bulkConfirmationDialog","useBulkConfirmationDialog","bulkActionDialog","bulkActionOptions","view","labelForSelectedItems","fontStyle","MultiSelectDialog","allowZeroSelections","PageNotFound","ErrorContent","React","ErrorAlert","isMd","onCancel","isExpandable","String","PageFormSubmitButton","isSubmitting","errors","useFormState","clearErrors","useForm","hasErrors","PageFormCancelButton","FormContainer","FormActionGroup","ActionGroup","PageForm","isWizard","form","handleSubmit","handleSubmitError","setFieldError","defaultValues","parsedGenericErrorMessages","genericError","fieldError","useFormErrors","frameworkTranslations","isHorizontal","isVertical","multipleColumns","singleColumn","disableGrid","PageFormGrid","FormProvider","Form","disableSubmitOnEnter","autoComplete","isFilled","additionalActions","xl2","Grid","capitalizeFirstLetter","charAt","toUpperCase","useRequiredValidationRule","fixSpecialCases","toLocaleLowerCase","names","PageFormCheckbox","readOnly","validate","control","formState","useFormContext","required","Controller","shouldUnregister","field","fieldState","helperTextInvalid","labelHelp","labelHelpTitle","enableReset","rules","DataEditor","language","ready","setReady","outerDivEl","innerDivEl","updateEditorHeight","EditorLineHeight","EditorPadding","visibleLines","editorRef","editor","monaco","create","lineNumbers","lineDecorationsWidth","EditorPaddingTop","EditorPaddingBottom","fontSize","fontFamily","scrollBeyondLastLine","minimap","renderLineHighlightOnlyWhenFocus","scrollbar","alwaysConsumeMouseWheel","dispose","model","getModel","didChangeContentDisposable","onDidChangeContent","getValue","updateOptions","setHasError","setModelLanguage","didChangeMarkersDisposable","onDidChangeMarkers","markers","getModelMarkers","owner","getLanguageId","resource","uri","marker","layout","OuterDiv","InnerDiv","editorWorkerService","jsonWorker","yamlWorker","MonacoEnvironment","getWorker","moduleId","Worker","URL","json","jsonDefaults","setDiagnosticsOptions","configureMonacoYaml","schemas","fileMatch","schema","properties","additionalProperties","defineTheme","base","inherit","colors","token","background","DropZone","onLoad","files","file","reader","FileReader","onload","contents","onerror","readAsText","getRootProps","getInputProps","useDropzone","noClick","accept","disabled","inputRef","ExpandIcon","AngleDownIcon","downloadTextFile","extension","Blob","element","createElement","createObjectURL","download","appendChild","click","removeChild","PageFormGroup","helperText","FormGroup","fieldId","labelIcon","labelInfo","additionalControls","FormHelperText","HelperText","HelperTextItem","PageFormDataEditor","valueFormat","disableCopy","disableUpload","disableDownload","disableExpand","isValidating","getValues","defaultLanguage","setLanguage","defaultCollapsed","dataEditorValue","setDataEditorValue","objectToString","handleCopy","valueToObject","dropZoneInputRef","handleUpload","handleDownload","undoValue","DataEditorActions","stringValue","valueAsObject","enableUndo","isDeepEqual","DataEditorButtons","CopyIcon","UploadIcon","DownloadIcon","align","jsyaml","YAMLException","obj","yaml","trimEnd","PageFormSelect","placeholderText","fieldNameToResetOnFieldChange","resetField","itemID","selections","validated","hasPlaceholderStyle","PageFormSwitch","labelOn","PageFormTextArea","minLength","maxLength","pattern","selectTitle","selectOpen","selectValue","autoFocus","disableAutoResize","showSecret","setShowSecret","isFill","TextArea","trimStart","onChangeHandler","readOnlyVariant","autoResize","EyeIcon","EyeSlashIcon","shouldValidate","PageFormTextInput","parsedValue","utcDate","getTime","getTimezoneOffset","toISOString","TextInput","numberValue","isNaN","PageNavSideBarContext","setState","usePageNavSideBar","PageNavSideBarProvider","isXl","PageNavigationContext","PageNavigationRoutesProvider","routes","setRoutes","setNavigation","navigation","createNavigateToRoutes","itemPath","path","assign","PageNotificationsContext","notificationsDrawerOpen","setNotificationsDrawerOpen","notificationGroups","setNotificationGroups","usePageNotifications","PageNotificationsProvider","PageNotificationsDrawer","drawerRef","Drawer","onExpand","DrawerContent","panelContent","DrawerPanelContent","NotificationDrawer","NotificationDrawerHeader","DrawerCloseButton","NotificationDrawerBody","NotificationDrawerGroupList","PageNotificationGroup","DrawerContentBodyStyled","DrawerContentBody","NotificationDrawerGroup","notifications","NotificationDrawerList","notification","PageNotification","notificationVariant","timestamp","timestampString","NotificationDrawerListItem","NotificationDrawerListItemHeader","NotificationDrawerListItemBody","PageBreadcrumbsContext","tabBreadcrumb","setTabBreadcrumb","PageBreadcrumbsProvider","usePageBreadcrumbs","PageFramework","Breadcrumbs","breadcrumbs","Breadcrumb","breadcrumb","BreadcrumbItem","isActive","PageHeader","controls","headerActions","isLg","pageBreadcrumbs","PageSectionVariants","light","titleHelp","titleHelpTitle","titleDocLink","PageLayout","PageMasthead","Masthead","PageMastheadToggle","MastheadMain","MastheadBrand","brand","MastheadContent","navBar","MastheadToggle","PageToggleButton","BarsIcon","PageNotificationsIcon","NotificationBadge","PageThemeSwitcher","MoonIcon","SunIcon","PageNavigation","navigationItems","PageSidebar","isSidebarOpen","PageSidebarBody","Nav","NavList","PageNavigationItems","baseRoute","basename","PageNavigationItemComponent","rootChild","onClickNavItem","usePageNavBarClick","route","hasChildNavItems","subtitleStyle","pathname","startsWith","NavItem","NavExpandable","_e","PageApp","masthead","Page","sidebar","banner","Outlet","Routes","NavigationRoute","Route","useGetPageUrl","url","params","query","encodeURIComponent","stringToReplace","regex","RegExp","usePageNavigate","getPageUrl","pageId","useWindowLocation","isMounted","setIsMounted","useIsMounted","setLocation","setWindowLocation","history","replaceState","useURLSearchParams","searchParams","substring","indexOf","URLSearchParams","setSearchParams","newSearch","PageWizardContext","usePageWizard","isPageWizardParentStep","step","substeps","PageWizardProvider","steps","isToggleExpanded","setToggleExpanded","activeStep","setActiveStep","wizardData","setWizardData","stepData","setStepData","stepError","setStepError","submitError","setSubmitError","flattenedSteps","getFlattenedSteps","visibleSteps","getVisibleSteps","onNext","formData","visibleStepsFlattened","getVisibleStepsFlattened","resolve","activeStepIndex","nextStep","prev","onBack","previousStep","isStepVisible","PageWizardFooter","nextButtonLabel","isFirstStep","backClassName","PageWizardBody","RequestErrorAlert","StepErrors","inputs","hasOverflowScroll","formErrors","WizardHeader","PageWizardHeader","css","wizardHeader","wizardTitle","wizardTitleText","wizardClose","PageWizardNavigation","navClassName","goToStepByIndex","useGoToStepByIndex","visibleStep","substep","SubstepsNav","indexOfSubstep","PageWizardToggle","toggleNavExpanded","isNavExpanded","wizardToggle","wizardToggleList","wizardToggleListItem","wizardToggleNum","wizardToggleIcon","PageWizard","LoadingState","LoadingPage","tabs","Spin","keyframes","RunningIcon","useView","disableQueryString","ignoreQueryStringKeys","filterQueryStringKeys","mountedRef","useIsMountedRef","queryPage","get","queryPerPage","localPerPage","querySort","defaultIgnoreQueryStringKeys","newSearchParams","set","delete","displayName","useInMemoryView","sorted","sortFn","reverse","useSorted","compareNumbers","compareUnknowns","filtered","filterMapRef","filterFn","setFilterFnState","setFilterFn","setFiltered","cachedFilterFn","cached","passes","useFiltered","toolbarFilter","itemsKeys","removeKeyMap","removeKeys","useSelectedInMemory","pseudolocalizationEnabled","i18n","use","backend","detector","initReactI18next","init","detection","lookupQuerystring","lookupCookie","lookupLocalStorage","fallbackLng","supportedLngs","escapeValue","postProcess","createRequestError","response","statusText","details","contentType","headers","parseJSON","tryParseJSON","parseText","RequestError","statusCode","super","setPrototypeOf","prototype","isRequestError","getCookie","cookieName","cookies","cookie","requestCommon","method","Accepts","fetch","credentials","redirect","requestGet","requestFactory","postRequest","requestPatch","requestDelete","ok","useFetcher","getItemKey","swrOptions","dedupingInterval","normalizeQueryString","normalizedQuery","sortKeys","pageKeys","url2keys","sortKey","entries","k","pageKey","apiTag","strings","fragment","checkParam","good","bad","hubApiPath","hubAPI","endsWith","newParams","limitKey","offset","page_size","hubQueryString","lastIndexOf","hubApiTag","awxApiPath","awxAPI","AwxActiveUserContext","useAwxActiveUser","AwxActiveUserProvider","AwxActiveUserProviderInternal","useSWR","activeAwxUser","setActiveAwxUser","activeUser","results","mutate","refreshActiveAwxUser","_style","_path","_path2","_path3","_path4","_path5","_path6","_path7","_path8","_path9","_path10","_path11","_circle","_path12","_circle2","_path13","_circle3","_path14","PageMastheadDropdown","toggleIndicator","wrap","isPlain","_extends","bind","n","arguments","hasOwnProperty","call","apply","xmlns","xmlSpace","viewBox","d","strokeMiterlimit","cx","cy","AnsibleAboutModal","AboutModal","trademark","fullYear","getFullYear","brandImageSrc","brandImageAlt","productName","TextContent","TextList","TextListItem","PageRefreshIcon","refreshing","setRefreshing","refresh","rotation","setRotation","frame","requestAnimationFrame","rotate","cancelAnimationFrame","stop","entryDelay","RedoAltIcon","useGet","swrConfiguration","getRequest","useGetRequest","useGetItem","AwxConfigContext","useAwxConfig","awxConfig","AwxConfigProvider","awxConfigError","refreshAwxConfig","AwxConfigProviderInternal","WebSocketContext","sendMessage","sendJsonMessage","lastMessage","lastJsonMessage","readyState","ReadyState","UNINSTANTIATED","getWebSocket","setSubscriptions","WebSocketProvider","webSocketUrl","setWebSocketUrl","webSocket","useReactWebSocket","shouldReconnect","subscriptions","loc","new_uri","protocol","host","csrftoken","OPEN","xrftoken","useAwxWebSocketSubscription","events","onMessage","evts","subscriptionsEvents","DocsVersionContext","version","DocsVersionProvider","useGetDocsUrl","config","doc","licenseType","license_info","license_type","downstreamPaths","upstreamPaths","credentialTypes","organizations","teams","users","activityStream","applications","executionEnvironments","managementJobs","notifiers","topology","workflows","eeMigration","jobTemplateSurveys","hosts","inventories","constructedInventories","managePlaybooksSC","projects","templates","workflowVisualizer","workflowVisBuild","jobs","schedules","AwxRoute","AwxMasthead","openAnsibleAboutModal","useAnsibleAboutModal","pageNavigate","group_name","workflow_approval","summary_fields","workflow_job","created","WorkflowApprovalDetails","useAwxNotifications","logout","AwxBrand","QuestionCircleIcon","UserCircleIcon","username","UserDetails","usePageSettingsOptions","PageSettingsDetails","PencilAltIcon","PageSettingsDetail","optionLabel","PageFormSingleSelect","PageSettingsForm","useAwxRoleColumns","RoleDetails","disableSort","managed","useAwxRoleMetadata","content_types","permissions","AwxRolePermissions","rolesMetadata","horizontalTermWidthModifier","content_type","permission","AwxError","handleRefresh","SyncIcon","AwxRoleDetails","useParams","PERSISTENT_FILTER_KEY","usePersistentFilters","qs","sessionStorage","PageRoutedTabs","useLocation","activeTab","tab","useSearchParams","sharedQueryKeysObj","sharedQueryKeys","queryString","pairs","substr","pair","decodeURIComponent","parseQuery","filterString","getPersistentFilters","backTab","persistentFilterKey","Tab","eventKey","dataCy","Tabs","isBox","activeKey","flexShrink","TabTitleText","CaretLeftIcon","componentParams","awxErrorAdapter","detail","input","module_args","useAwxBulkConfirmation","idKeyFn","useDeleteAwxRoles","bulkAction","cannotDeleteBuiltInRole","cannotDeleteRoleDueToPermissions","is_superuser","roles","undeletableBuiltInRoles","undeletableRolesDueToPermissions","useAwxRoleRowActions","deleteRoles","EditRole","TrashIcon","AwxRolePage","Roles","breadcrumbLabelForPreviousPage","backTabLabel","useAwxView","defaultSortColumn","itemCountRef","queryParams","subval","setSeconds","setMilliseconds","LastHour","Last24Hours","LastWeek","LastMonth","fetcher","selectItemsAndRefresh","unselectItemsAndRefresh","AwxRoleExpandedRow","roleDetails","ExpandableRowContent","AwxRoles","AwxRolesTable","CreateRole","useAwxRoleToolbarActions","PageFormMultiSelect","getNewValues","PageFormHidden","useWatch","watch","useInvalidateCacheOnUnmount","cache","useSWRConfig","clear","useClearCache","clearAllCache","clearCacheByKey","cacheKey","removeQueryString","usePatchRequest","blob","usePostRequest","AwxPageForm","newRole","Role","AwxRoleInputs","patchRequest","roleName","disableContentType","awxRoleMetadata","ActivityStreamIcon","ActivityStream","HistoryIcon","useOptions","getOptions","useOptionsRequest","setData","setIsLoading","awxSettingsExcludeKeys","useAwxSettingsGroupsBase","defaultSlugs","categories","useAwxSettingsGroups","groupsBase","optionsResponse","PUT","GET","getKeys","putKeys","awxSettingsDefinedInFile","defined_in_file","category","slug","category_slug","slugs","AwxSettings","authenticationGroup","GroupsCards","SettingsCategory","ListItem","AwxSettingsCategoryDetailsPage","categoryId","categoryOptions","AwxSettingsCategoryDetails","AwxSettingsCategoryDetail","line","choices","choice","PageFormSection","setIsCollapsed","sectionClassNames","gridItemClassNames","FormSection","GridItem","PageFormFileUpload","onInputChange","filename","setFilename","inputError","setInputError","handleFileInputChange","handleFileReadStarted","_fileHandle","handleClear","onClearClick","handleFileReadFinished","handleTextOrDataChange","FileUpload","dropzoneProps","hideDefaultPreview","filenamePlaceholder","onFileInputChange","onDataChange","onTextChange","onReadStarted","onReadFinished","allowEditingUploadedText","isClearButtonDisabled","additionalHelperText","useDeleteRequest","RevertAllDialog","categorySlugs","deleteRequest","onRevertAll","AwxSettingsForm","patch","openRevertAllSettingsModal","useRevertAllSettingsModal","patchData","booleanOptions","otherOptions","getCategorySlugs","OptionActionsFormInput","isStack","help_text","min_value","max_value","AwxSettingsCategoryFormRoute","AwxSettingsCategoryForm","getNodeIcon","nodeType","BuilderImageIcon","CubeIcon","DatabaseIcon","DataProcessorIcon","MeshNode","getData","statusDecorator","ClockIcon","MinusCircleIcon","getStatusIcon","nodeStatus","getDefaultShapeDecoratorCenter","TopologyQuadrant","upperLeft","Decorator","radius","DEFAULT_DECORATOR_RADIUS","showBackground","DefaultNode","onStatusDecoratorClick","truncateLength","Panel","PFPanel","Legend","ControlNodeIcon","ExecutionNodeIcon","HybridNodeIcon","HopNodeIcon","LegendDescription","PanelMain","PanelMainBody","AddCircleOIcon","x1","y1","x2","y2","strokeDasharray","PFEmptyState","TopologyIcon","PFTopologyIcon","Loader","measureLocation","ProgressMeasureLocation","inside","TextVariants","Span","Dotted","LastModifiedPageDetail","StatusCell","useLabel","getColor","getIcon","hideLabel","StatusLabel","approved","completed","canceled","deleting","denied","deprovisioning","failed","healthy","installed","new","pending","provisioning","running","skipped","starting","stopping","stopped","successful","timedOut","unavailable","unresponsive","unknown","unreachable","waiting","InfoCircleIcon","BanIcon","HourglassStartIcon","StopCircleIcon","toTitleCase","string","word","stringIsUUID","test","CredentialLabel","credential","cloud","kind","vault_id","CredentialDetails","useIdColumn","team","useNameColumn","hostname","user","useDescriptionColumn","tableViewOption","useCreatedColumn","created_on","date_joined","pulp_created","created_by","userDetailsPageId","useModifiedColumn","modified","modified_on","modified_by","useOrganizationNameColumn","orgDetailsRoute","organization","useInventoryNameColumn","inventoryDetailsRoute","inventory","inventory_type","inventoryUrlPaths","useProjectNameColumn","projectDetailsRoute","project","dashboardOption","useTypeColumn","makeReadable","smart","constructed","useNodeTypeTooltip","hybrid","execution","hop","InstanceForksSlider","instance","instanceForks","handleInstanceForksSlider","useInstanceActions","capacityAvailable","cpu_capacity","mem_capacity","Slider","areCustomStepsContinuous","is_system_auditor","Unavailable","useInstancesColumns","onNameClick","toolTipMap","nameClick","InstanceDetails","node_type","createdColumn","modifiedColumn","health_check_pending","node_state","computeForks","capacity_adjustment","isContentLeftAligned","percent_capacity_remaining","jobs_running","jobs_total","memory","managed_by_policy","useRemoveInstances","deleteActionNameColumn","instances","useInstanceRowActions","toggleInstanceRowAction","useToggleInstanceRowAction","healthCheckRowAction","useRunHealthCheckRowAction","editInstanceRowAction","useEditInstanceRowAction","handleToggleInstance","userAccess","isEnabled","_instance","cannotRunHealthCheckDueToNodeType","cannotRunHealthCheckDueToPermissions","cannotRunHealthCheckDueToManagedInstance","cannotRunHealthCheckDueToPending","HeartbeatIcon","isK8s","IS_K8S","EditInstance","instanceId","instanceRes","setInstance","instanceGroups","setInstanceGroups","setInstanceForks","fetchInstanceDetails","pDebounce","computedVal","useInstanceDetailsActions","isManagedInstance","editInstanceAction","removeInstanceAction","removeInstances","_instances","Instances","cannotRemoveInstances","useRemoveInstanceItemAction","runHealthCheckAction","addEditPrivileges","removeableInstance","memCapacity","cpuCapacity","selectedCapacityAdjustment","minCapacity","maxCapacity","PageDetailCodeEditor","showCopyToClipboard","toggleLanguage","copied","setCopied","codeEditorValue","setCodeEditorValue","translatedVal","CodeBlockAction","ClipboardCopyButton","textId","exitDelay","onTooltipHidden","CodeBlock","CodeBlockCode","InstanceSwitch","instance_id","InstanceDetailsTab","InstanceGroupDetails","related","install_bundle","rel","listener_port","last_health_check","useCloseSidebar","controller","useVisualizationController","setSidebarMode","useViewOptions","getState","selectedIds","sourceNode","EdgeStatus","NodeStatus","info","useCreateEdge","tagStatus","tag","visible","originalStatus","endTerminalType","EdgeTerminalType","directional","endTerminalStatus","endTerminalSize","useGetNodeTypeDetail","typeMapping","job","project_update","inventory_update","system_job","GRAPH_ID","NODE_DIAMETER","START_NODE_ID","RESOURCE_TYPE","useRemoveGraphElements","removeNode","createEdge","newEdges","setVisible","edgesToParents","getTargetEdges","edgesToChildren","getSourceEdges","parentEdge","childEdge","getSource","newParentId","getId","newChildId","getTarget","newEdgeId","getController","getEdgeById","newEdge","toModel","edges","fromModel","useRemoveNode","handleRemoveNodes","nodes","getGraph","nodeNameColumn","unified_job_template","nodeIdColumn","identifier","nodeConfirmationColumns","nodeActionColumns","removeNodes","hasMultipleNodes","sourceColumn","getLabel","targetColumn","statusColumn","getStatusColor","linkConfirmationColumns","linkActionColumns","linkBulkAction","handleRemoveLink","setNodeStatus","edge","isVisible","removeLink","jsonToYaml","jsonString","yamlToJson","yamlString","parseVariableField","variableField","isJsonString","useAwxGetAllPages","getKey","pageIndex","previousPageData","useSWRInfinite","initialSize","getAddedAndRemoved","original","added","removed","orig","cur","useSaveVisualizer","templateId","patchWorkflowNode","patchWorkflowNodeApproval","postAssociateNode","postDisassociate","postWorkflowNode","postWorkflowNodeApproval","processCredentials","useProcessCredentials","processInstanceGroups","useProcessInstanceGroups","processLabels","useProcessLabels","workflowNodeRefresh","graphNodes","getNodes","deletedNodeIds","associateSuccessNodes","associateFailureNodes","associateAlwaysNodes","disassociateSuccessNodes","disassociateFailureNodes","disassociateAlwaysNodes","newApprovalNodes","editedApprovalNodes","newNodes","editedNodes","setCreatedNodeId","newId","nodeData","setId","always_nodes","failure_nodes","success_nodes","nodeId","nodeState","isDeleted","isNewNode","isEdited","handleNodeDeletion","unified_job_type","handleNewNode","handleEditNode","approvalNodes","promises","nodeTemplate","nodeIdentifier","toKeyedObject","workflowNode","workflowTemplate","all_parents_must_converge","createApprovalNodes","createNodePayload","isPrompt","prompts","launch_data","launch_config","diff_mode","ask_diff_mode_on_launch","extra_data","ask_variables_on_launch","execution_environment","ask_execution_environment_on_launch","forks","ask_forks_on_launch","ask_inventory_on_launch","job_slice_count","ask_job_slice_count_on_launch","job_type","ask_job_type_on_launch","ask_limit_on_launch","scm_branch","ask_scm_branch_on_launch","skip_tags","ask_skip_tags_on_launch","job_tags","ask_tags_on_launch","ask_timeout_on_launch","verbosity","ask_verbosity_on_launch","survey_data","extra_vars","newNode","newNodeId","createNewNodes","updateApprovalNodes","allSettled","updatedNodePayload","updateExistingNodes","sourceEdges","successNodeId","sourceId","targetId","failureNodeId","alwaysNodeId","parseInt","handleEdgeModification","disassociate","getElements","postAssociateLabel","hasLabelsPrompt","ask_labels_on_launch","existingLabels","defaultOrganization","getDefaultOrganization","disassociationPromises","associationPromises","postAssociateInstanceGroup","hasInstanceGroupsPrompt","ask_instance_groups_on_launch","instance_groups","existingInstanceGroups","postAssociateCredential","promptCredentials","templateCredentials","defaults","nodeCredentials","getAddedAndRemovedCredentials","aggregateCredentials","promptCredential","aggregateCredential","nodeCredential","useGetTimeoutString","getJobTemplateDefaultValues","template","allow_simultaneous","ask_credential_on_launch","become_enabled","host_config_key","parseStringToTagArray","playbook","prevent_instance_group_fallback","use_fact_cache","webhook_service","webhook_url","webhook_receiver","origin","webhook_key","webhook_credential","isProvisioningCallbackEnabled","callback","isWebhookEnabled","str","stringifyTags","tags","hasDaysToKeep","getValueBasedOnJobType","workflowValue","getNodeLabel","alias","shouldHideOtherStep","launchData","useNodeTypeStepDefaults","defaultMapper","nodeUJT","nodeConvergence","convergence","nodeDaysToKeep","approvalTimeout","approvalName","approval_description","approval_name","approval_timeout","node_alias","node_convergence","node_days_to_keep","node_status_type","getRelated","endpoint","itemsResponse","FullPage","ViewWrapper","ViewOptionsContext","toggleFullScreen","isFullScreen","isLegendOpen","toggleLegend","sidebarMode","ViewOptionsProvider","observer","isGraphReady","graph","isGraphSelected","setIsEmpty","setIsFullScreen","setIsLegendOpen","AppendBody","ReactDOM","AddNodeButton","getEdgeStyles","pfStatusColor","CustomLabel","xPoint","yPoint","onContextMenu","hoverRef","isSourceRootNode","textSize","textRef","useSize","calculateDimensions","paddingX","paddingY","iconRef","contextIconRadius","rx","ry","dy","Position","handleDirections","Left","Right","Top","Bottom","getDirection","sourcePosition","distance","sqrt","EdgeTerminal","points","CustomEdgeInner","edgeElement","contextMenuOpen","dragging","targetDragRef","sourceDragRef","hover","useHover","tagHover","tagHoverRef","edgePath","centerPoint","getPosition","targetPosition","labelCoordinates","labelX","labelY","sourceDir","targetDir","sourceGapped","targetGapped","dir","dirAccessor","currDir","centerX","centerY","sourceGapOffset","targetGapOffset","defaultCenterX","defaultCenterY","xOffset","abs","yOffset","getEdgeCenter","verticalSplit","horizontalSplit","sourceTarget","targetSource","diff","gapOffset","dirAccessorOpposite","isSameDir","sourceGtTargetOppo","sourceLtTargetOppo","sourceGapPoint","targetGapPoint","getPoints","res","segment","c","bendSize","xDir","getBend","getSmoothStepPath","useGetPath","edgeStyles","StatusModifier","Layer","TOP_LAYER","fillOpacity","strokeLinecap","shapeRendering","CustomEdge","isEdge","NodeIcon","ProcessAutomationIcon","ClipboardCheckIcon","CogIcon","ShareAltIcon","deleted_resource","CustomNode","jobType","isNode","labelClassName","badgeTextColor","badgeBorderColor","HomeIcon","EdgeContextMenu","handleModified","useEdgeMenuItems","ContextMenuSeparator","ContextMenuItem","NodeContextMenu","setSelectedIds","useVisualizationState","__","setSourceNode","useNodeMenuItems","useVerbosityString","InventorySourceDetails","sourceOptions","sourceMap","useGetSourceOptions","verbosityString","OrganizationDetails","InventoryDetails","source_project","ProjectDetails","source_path","update_cache_timeout","PromptDetail","isOverridden","overriddenValue","overriddenText","NodeCodeEditorDetail","nodeExtraVars","templateExtraVars","isMatch","NodeTagDetail","nodeTags","templateTags","arr1","arr2","idSet1","idSet2","arraysMatch","useWebhookServiceOptions","WebhookService","service","selectedService","JobTemplateDetails","diffMode","executionEnvironment","jobSliceCount","jobTags","scmBranch","skipTags","templateInstanceGroups","templateTimeoutString","templateVerbosityString","timeoutString","variables","webhookKey","promptValues","surveyValues","nodeValues","nodeLabels","nodeInstanceGroups","fetchedEE","jsonObj","part","mergedData","useAggregateJobTemplateDetails","ExecutionEnvironmentDetails","CredentialsDetail","InstanceGroupsDetail","TextListVariants","ul","TextListItemVariants","li","arrayIdsMatch","ig","ResourceLink","InventorySourceDetail","ManagementJobSchedules","WorkflowJobTemplateDetails","NodeNameDetail","InventorySourceLink","inventorySource","inventoryType","inventoryId","source_id","ScmType","scm","scm_type","getScmType","scmType","scm_revision","scm_url","scm_refspec","scm_update_cache_timeout","project_base_dir","local_path","TopologySideBarHeader","SidebarHeader","launchConfig","launch","showOptionsField","WorkflowNodeDetails","unifiedJobTemplate","getRelatedResourceUrl","nodeTypeDetail","RBAC","Details","WorkflowNodeDetailsHeader","edit","WorkflowNodeDetailsFooter","closeSidebar","handleEdit","handleRemove","FormGroupTypeAheadMultiSelect","onHandleClear","onHandleSelection","chipGroupComponent","trimmedValues","SelectVariant","typeaheadMulti","isCreatable","isCreateOptionOnTop","PageFormCreatableSelect","chip","newValue","SingleSelectDialog","PageFormAsyncSingleSelect","AsyncQueryLabel","PageFormSingleSelectAwxResource","baseUrl","urlSearchParams","subVal","openSelectDialog","SelectResource","useCredentialsColumns","idColumn","allCredTypes","credentialTypesMap","credTypes","credentialType","credential_type","useDynamicToolbarFilters","optionsPath","preSortedKeys","preFilledValueKeys","additionalFilters","removeFilters","decodedUrl","filterableFields","filterable","queryResource","knownAwxFilter","knownAwxFilterKeys","labelKey","valueKey","queryKey","craftRequestUrl","apiPath","queryResourceLabel","getToolbars","isPreFilled","fieldType","indexA","indexB","default_environment","execution_node","controller_node","last_job","useNameToolbarFilter","useDescriptionToolbarFilter","useCreatedByToolbarFilter","useModifiedByToolbarFilter","useCredentialsFilters","PageFormAsyncMultiSelect","PageFormMultiSelectAwxResource","formatLabel","resources","PageFormCredentialSelect","credentialColumns","credentialFilters","validateCredentials","allowDuplicateCredentialTypes","originalCredentials","newCredentials","selectedCredentials","allCredentials","defCred","vaultIds","vaultCred","otherCredentialTypes","nonVaultCred","hasDuplicateVaultIds","vaultId","_index","array","duplicateCredentialTypes","cred","useCredentialsValidate","isMultiple","currentCredential","selectCredential","useExecutionEnvironmentsColumns","organizationColumn","useExecutionEnvironmentsFilters","PageFormSelectExecutionEnvironment","executionEnvironmentColumns","executionEnvironmentFilters","organizationId","or__organization__id","or__organization__isnull","useInstanceGroupsColumns","instanceGroup","is_container_group","capacity","useDeleteInstanceGroups","cannotDeleteInstanceGroup","user_capabilities","buildAlertPrompts","undeletableInstanceGroups","isInstanceGroupBeingUsed","relatedOrganizationsData","relatedInventoriesData","relatedTemplatesData","totalResourceCount","relatedOrganizationsCount","relatedInventoriesCount","relatedTemplatesCount","checkIfInstanceGroupIsBeingUsed","relatedResourceMessage","isOnlyContainerGroups","useDisableCreateInstanceGroup","useInstanceGroupRowActions","deleteInstanceGroups","EditInstanceGroup","EditContainerGroup","InstanceGroups","useInstanceGroupsFilters","isCreateActionDisabled","CreateContainerGroup","CreateInstanceGroup","useInstanceGroupToolbarActions","PageFormInstanceGroupSelect","originalIG","selectedIG","PageFormLabelSelect","order_by","PageFormAsyncSelect","loadingErrorText","loadingPlaceholder","valueToString","valueToDescription","AsyncSelect","labeledBy","AsyncSelectSelectOptionObject","useSelectDialog","setUseSelectDialog","onFilter","filterValue","toggleId","single","typeAheadAriaLabel","hasInlineFilter","menuAppendTo","showRefreshButton","asString","compareTo","selectOption","useInventoriesColumns","typeColumn","syncStatus","has_inventory_sources","inventory_sources_with_failures","useInventoriesFilters","inventoryTypeToolbarFilter","useInventoryTypeToolbarFilter","SelectInventory","PageFormInventorySelect","useSelectInventory","concat","PageFormSelectInventory","ConditionalField","NodePromptsStep","reset","promptForm","nodePromptsStep","readOnlyLabels","defaultPromptValues","PromptReviewDetails","survey","surveyConfig","getSurveySpecUrl","ee","extraVarDetails","extraVarsObj","updatedSurvey","spec","maskedSurveyPasswords","vars","passwordKeys","updated","maskPasswords","q","variable","passwordKey","processSurvey","CredentialDetail","credentialID","credentialData","NodeReviewStep","hasPromptDetails","nameDetail","descriptionDetail","convergenceDetail","timeoutDetail","showDaysToKeep","extraVarsDetail","resourceDetailsLink","surveyDetails","PageFormWatch","useManagementJobColumns","systemJobTemplate","useManagementJobFilters","SelectManagementJob","PageFormManagementJobsSelect","useSelectManagementJobs","useInventorySourceColumns","sourceChoices","scMatch","useInventorySourceFilters","SelectInventorySource","PageFormInventorySourceSelect","useSelectInventorySource","useProjectsColumns","custom_virtualenv","venvName","current_job","JobOutput","tooltipAlt","useProjectStatusColumn","lastUsedColumn","last_job_run","useLastUsedColumn","defaultEnvironmentColumn","useExecutionEnvironmentColumn","useProjectsFilters","SelectProject","PageFormProjectSelect","useSelectProject","useGetJobOutputUrl","jobPaths","ad_hoc_command","Sparkline","JOB_TYPE_URL_SEGMENTS","getJobOutputUrl","generateTooltip","finished","statusIcons","jobOutputUrl","missingResources","useTemplateColumns","activityColumn","recent_jobs","useActivityColumn","inventoryColumn","projectColumn","credentialsColumn","useCredentialsColumn","labelsColumn","useLabelsColumn","executionEnvColumn","envDetailsRoute","useExecutionEnvColumn","ExecutionEnvironments","lastRanColumn","useLastRanColumn","typeOfTemplate","SelectJobTemplate","nameToolbarFilter","descriptionToolbarFilter","createdByToolbarFilter","modifiedByToolbarFilter","PageFormJobTemplateSelect","templateType","useSelectJobTemplate","NodeTypeStep","getFieldState","register","allSteps","nodeResource","isDirty","isTouched","currentFormValues","isApprovalType","shouldTouch","keepDefaultValues","nodeTypeStep","launchConfigValue","launchConfigResults","shouldShowPromptStep","shouldShowSurveyStep","survey_enabled","isNodeTypeDirty","setLaunchToWizardData","NodeTypeInput","NodeResourceInput","hasSourceNode","NodeStatusType","ConvergenceInput","AliasInput","TimeoutInputs","SystemJobInputs","unit","totalApprovalTimeout","InputGroupText","isAliasRequired","SurveyStep","getJobType","survey_spec","surveyStep","surveyVariable","specDefault","getChoices","question_name","question_description","tz","zone","DATETIME_SHORT_WITH_SECONDS","dateToInputDateTime","dt","toFormat","secondsToHHMMSS","Duration","fromObject","TopologyView","PFTopologyView","WorkflowOutputGraph","reloadJob","setMessage","handleWebSocketMessage","unified_job_id","useWorkflowOutput","workflow_node_id","getNodeById","refreshNodeStatus","secondaryLabel","getElapsedTime","controlBar","TopologyControlBar","controlButtons","createTopologyControlButtons","defaultControlButtonsOptions","zoomInCallback","scaleBy","zoomOutCallback","fitToScreenCallback","fit","resetViewCallback","legendCallback","sideBarOpen","VisualizationSurface","g","StyledNode","WorkflowOutputNode","getNodeStatus","WarningTriangleIcon","routeParams","graphModel","greyBadgeLabel","WorkflowOutput","workflowNodes","baselineComponentFactory","DefaultGroup","ModelKind","withPanZoom","GraphComponent","withSelection","createVisualization","newVisualization","Visualization","setFitToScreenOnLayout","registerComponentFactory","registerLayoutFactory","DagreLayout","edgesep","marginx","marginy","rankdir","ranker","ranksep","visualization","startNode","nodeLabel","time","shape","NodeShape","circle","labelPosition","LabelPosition","nonRootNodes","rootNodes","VisualizationProvider","NodeAddWizard","initialValues","nodeTypeStepDefaults","__all__","formValues","nodeName","nodeToCreate","rootEdge","NodeEditWizard","getInitialValues","getLaunchData","hidePromptStep","hideSurveyStep","getCredentialData","getLabelData","getInstanceGroupData","UJT","getTemplateCredentialData","aggregateCredentialsMap","templateCredential","getAggregateCredentials","extraVarsWithoutSurvey","surveySpec","getSurveySpec","extraVars","surveyData","extraData","question","extractSurveyDataFromExtraVars","nodePromptsValues","useGetInitialValues","setInitialValues","fetchValues","nodeOriginalResources","nodeToEdit","setLabel","TopologySideBar","PFTopologySideBar","Sidebar","selectedNode","selectedId","useSelectedNode","nodeSidebar","resizable","show","useLaunchTemplate","launchEndpoint","getLaunchEndpoint","reject","can_start_without_user_input","passwords_needed_to_start","variables_needed_to_start","awxRoute","WorkflowJobTemplateLaunchWizard","TemplateLaunchWizard","launchJob","ToolbarHeader","setIsSubmitting","showUnsavedChangesModal","setShowUnsavedChangesModal","handleSave","isModified","handleCancel","CloseIcon","saveWorkflowVisualizer","WorkflowVisualizerToolbar","isKebabOpen","setIsKebabOpen","handleLaunchWorkflow","tooltipProps","RocketIcon","Badge","isRead","CompressAltIcon","ExpandAltIcon","InstanceDetailInner","InstanceDetailSidebar","MeshEdge","DefaultEdge","ContentLoading","getEdgeStyle","EdgeStyle","dashed","getEdgeStatus","TopologyViewLayer","mesh","meshLayout","setMeshLayout","links","showLegend","setShowLegend","controllerRef","selector","d3","getWidth","getHeight","postMessage","onmessage","calculatedPercent","handleProgress","terminate","newController","SELECTION_EVENT","rect","edgeStyle","link_state","sideBarResizable","sideBar","EmptyStateUnauthorized","adminMessage","loginLink","LockIcon","Topology","errorRetryCount","isUnauthorized","EmptyStateFilter","ApiType","CustomPoint","disableInlineStyles","customFunctions","specificFunctions","functions","axisFormat","formatAsYear","tick","Intl","DateTimeFormat","year","formatAsMonth","month","labelFormat","dataComponent","scatterPlot","chartSeriesHiddenProps","chartData","setChartData","series","applyHiddenFilter","chartSeriesHidden","serie","host_id","grouped","nonGrouped","dates","idx","v4","created_date","convertGroupedByData","meta","serieId","convertApiToData","ChartBuilder","dataState","newChartData","hydrateSchema","hydratedSchema","regVar","currencyFormatter","NumberFormat","currency","SavingsPerTemplateText","Trans","FailedHostPerTemplateText","MonetaryGainPerTemplateText","AutomationFormula","PFInputGroup","validFloat","NaN","CalculationCost","costManual","setFromCalculation","costAutomation","DollarSignIcon","AnalyticsErrorState","errorTexts","unauthorized","ErrorState","propsState","errorState","KeyIcon","DisabledState","MonitoringIcon","numberFormatter","maximumSignificantDigits","ExpandedRowContents","host_count","total_count","total_org_count","total_cluster_count","total_inventory_count","template_success_rate","successful_hosts_savings","failed_hosts_costs","monetary_gain","Row","variableRow","setLabeledValue","manual_effort_minutes","onBlur","successful_hosts_total","globalSuccessColor200","globalDisabledColor200","TopTemplates","getSortParams","TableVariant","SpinnerDiv","TotalSavings","totalSavings","currentPageSavings","AutomationCalculator","requestPost","filterKeys","searchParam","filterKey","cluster_id","org_id","template_id","inventory_id","quick_date_range","sort_options","AutomationCalculatorInternal","sortOrder","setSortOrder","requestBody","dateRange","start_date","end_date","sort_order","only_root_workflows_and_standalone_jobs","template_weigh_in","attributes","group_by","group_by_time","totalCount","pageCount","customTooltipFormatting","formattedValue","monetary_gain_other_pages","monetary_gain_current_page","cost","hourly_manual_labor_cost","hourly_automation_cost","TagName","TAGS","operations","executive","subscription","migration","catalog","automationHub","modules","tasks","jobTemplate","jobRuns","timeSeries","performanceAnomalyDetection","savings","Reports","specificError","setSpecificError","ReportsInternal","report","layoutProps","keyword","reportTags","ReportTagsLabelGroup","tagKey","TooltipPosition","usePageChartColors","successfulColor","failedColor","errorColor","warningColor","canceledColor","blueColor","cyanColor","redColor","greenColor","yellowColor","purpleColor","orangeColor","greyColor","chartColors","SubscriptionUsageChart","calculateDateRange","today","period","getMonth","dateFormatter","oldDate","splitDate","consumed","license_consumed","license_capacity","SubscriptionUsage","useSubscriptionUsageFilters","setDateRange","systemData","HOST_METRIC_SUMMARY_TASK_LAST_TS","PageDashboardCountBar","counts","curr","ChartPie","allowTooltip","AwxCountsCard","Hosts","Projects","Inventories","inventory_failed","JobsChart","reducer","tuple","getDate","Jobs","AwxJobActivityCard","setPeriod","setJobType","AwxRecentInventoriesCard","canCreateInventory","emptyStateVariant","CreateInventory","getJobsAPIUrl","isJobRunning","relaunchEndpoint","inventory_source","useGetScheduleUrl","scheduleId","schedule","scheduleUrl","InventorySourceScheduleDetails","schedule_id","JobTemplateScheduleDetails","ProjectScheduleDetails","ManagementJobScheduleDetails","WorkflowJobTemplateScheduleDetails","useGetLaunchedByDetails","getScheduleUrl","createdBy","job_template","workflowJT","workflow_job_template","launch_type","useJobsColumns","inventorySourceChoices","getLaunchedByDetails","jobTypes","started","launchedByValue","launchedByLink","JobDetails","source_workflow_job","collapsedText","job_explanation","job_slice_number","_job","is_sliced_job","AwxRecentJobsCard","jobTemplateActions","wfJobTemplateActions","canCreateJobTemplate","canCreateWFJobTemplate","CreateJobTemplate","AwxRecentProjectsCard","canCreateProject","CreateProject","AwxOverview","openManageDashboard","managedResources","useManagedAwxDashboard","product","AwxOverviewInternal","useHostMetricsColumns","first_automation","last_automation","automated_counter","deleted_counter","useDeleteHostMetrics","HostMetrics","useHostMetricsFilters","not__deleted","deleteHostMetrics","useHostMetricsToolbarActions","useHostMetricsRowActions","useGetActivityStreamRoute","HostDetails","TeamDetails","CredentialTypeDetails","INVENTORYURLPATHS","getResourceName","activity","resourceKey","getResourceObject","resourceArray","ActivityDescription","operationText","operation","getOperationText","sourceResourceRoute","object1","targetResourceRoute","object2","sourceResourceName","targetResourceName","targetResourceObj","sourceResourceObj","roleResource","eventText","deletedResourceName","changes","role_field","generateEventText","ActivityStreamInitiatedByCell","actorId","actor","actorUsername","pageUrl","ActivityStreamDialog","setting","ActivityStreams","useKeywordToolbarFilter","useInitiatedByToolbarFilter","activity_stream","useActivityStreamColumns","showActivityStreamDialog","useActivityStreamDialog","SearchPlusIcon","useActivityStreamActions","useAwxBulkActionDialog","useAddUsersToResources","userProgressDialog","object_roles","member_role","UserType","useUsersColumns","first_name","last_name","email","useUsersFilters","SelectUsers","accessUrl","sortRoles","access","team_id","team_roles","user_roles","direct_access","indirect_access","useUserAndTeamRolesLists","useSelectUsers","useDeleteOrganizations","useOrganizationsColumns","Organizations","useOrganizationsFilters","deleteOrganizations","selectUsersAddOrganizations","selectUsers","addUsersToResources","useSelectUsersAddOrganizations","selectUsersRemoveOrganizations","removeUsersFromOrganizations","useRemoveUsersFromOrganizations","useSelectUsersRemoveOrganizations","CreateOrganization","EditOrganization","related_field_counts","admins","job_templates","PageFormSelectOrganization","organizationColumns","organizationFilters","BecomeMethodField","fieldOptions","useController","typeahead","onCreateOption","noResultsFoundText","createText","clearSelectionsAriaLabel","CredentialMultilineInput","requiredFields","handleModalToggle","accumulatedPluginValues","setAccumulatedPluginValues","setPluginsToDelete","fieldInitialValue","shouldHideField","setShouldHideField","secret","watchedFieldValue","sourceCredential","useGetSourceCredential","cp","input_field_name","source_credential","renderFieldValue","shouldDirty","handleHelperText","handleIsDisabled","UndoIcon","clearField","hideField","GCEUploadField","GCEFileContents","setGCEFileContents","uploadError","setUploadError","isRejected","setIsRejected","project_id","client_email","private_key","fileText","fileJSON","onDropRejected","handleFileRejected","useCredentialTypesFilters","useCredentialTypesColumns","PageFormSelectCredentialType","PageFormExternalCredentialSelect","credential_type__kind","CredentialsTestButton","isValid","handleTest","CredentialPlugins","CredentialSubForm","credentialId","useCredentialFields","metadata","multiline","CredentialPluginsModal","large","setCredentialPluginValues","payload","pluginValues","plugin","getDefaultValues","CredentialsExternalTestModal","populatedInput","fromEntries","retainInput","fields","filteredInputs","watchedSubFormFields","useCredentialsTestModal","toaster","CreateCredential","selectedCredentialTypeId","setSelectedCredentialTypeId","setWatchedSubFormFields","openCredentialsExternalTestModal","credentialPluginValues","prevValue","isTestButtonEnabled","setIsTestButtonEnabled","isTestButtonEnabledSubForm","setIsTestButtonEnabledSubForm","parsedCredentialTypes","isExternalCredential","Credentials","credentialTypeInputs","pluginInputs","isHandledByCredentialPlugin","newCredential","credentialInputSourcePayload","credentialInputSource","target_credential","CredentialInputs","isEditMode","EditCredential","pluginsToDelete","updatedValues","fieldEncryptedID","setFieldEncryptedID","isLoadingCredential","inputSources","isLoadingInputSources","updatedPluginValues","inputSource","pluginsToDeletePayload","isLoadingCredentialType","promptPassword","promptPasswordObj","credentialName","editedCredential","modifiedCredential","watchedCredentialTypeId","credentialTypeID","isGalaxyCredential","watchedRequiredFields","verify","openCredentialPluginsModal","useCredentialPluginsModal","requiredFieldsInSubForm","subFormFields","stringFields","choiceFields","booleanFields","namespace","CredentialTextInput","isRevert","setIsRevert","ASK_VALUE","isSecretField","isInitialValueEncrypted","isCurrentFieldValueEncrypted","setIsCurrentFieldValueEncrypted","isPromptOnLaunchChecked","clearFieldValue","revertInitialValue","shouldShowRevertButton","inputType","flipBehavior","RevertReplaceButton","revertField","ask_at_runtime","CredentialTypeDetail","PluginFieldText","CredentialDetailsInner","credentialInputs","inputSourcesError","isInputSourceLoading","refreshInputSources","inputSourcesMap","useViewActivityStream","queryType","cannotEditResource","canCreateResource","cannotDeleteResource","cannotDeleteResources","cannotCopyResource","copy","useDeleteCredentials","useCredentialActions","deleteCredentials","onDeleted","copyCredential","toTimeString","useCopyCredential","onCredentialCopied","CredentialPage","CredentialJobTemplates","CredentialTeamAccess","CredentialUserAccess","CredentialsList","useCredentialToolbarActions","useDeleteTemplates","useTemplateActions","onTemplatesDeleted","onTemplateCopied","deleteTemplates","launchTemplate","copyTemplate","useCopyTemplate","ProjectDiagramIcon","WorkflowVisualizer","EditJobTemplate","EditWorkflowJobTemplate","TemplatesList","projectId","credentialsId","executionEnvironmentId","splitUrl","typeToolbarFilter","useTemplateTypeToolbarFilter","getQueryParams","templateQueryParams","project__id","inventory__id","credentials__id","execution_environment__id","useTemplateFilters","CreateWorkflowJobTemplate","useMapContentTypeToDisplayName","contentTypeToDisplayName","edacredential","isTitleCase","activation","rulebook","rulebookprocess","credentialtype","decisionenvironment","eventstream","auditrule","executionenvironment","jobtemplate","workflowjobtemplate","notificationtemplate","instancegroup","collectionremote","containernamespace","containerrepository","ansiblerepository","system","null","shortType","StyledBadge","StyledDivider","RoleAssignmentsReviewStep","resourceType","edaRoles","awxRoles","hubRoles","getDisplayName","selectedUser","selectedTeam","ReviewExpandableList","fieldName","edaRolesLabel","awxRolesLabel","hubRolesLabel","pulp_href","ExpandableSection","toggleContent","useAwxMultiSelectListView","viewOptions","StyledTitle","SelectRolesStep","fieldNameForPreviousStep","descriptionForRoleSelection","selectedItemsFromPreviousStep","labelForSelectedItemsFromPreviousStep","SelectRolesStepHeader","AwxSelectRolesStep","useAwxRolesFilters","content_type__model","AwxSelectUsersStep","descriptionForUsersSelection","CredentialAddUsers","role_definition","object_id","useTeamsFilters","AwxSelectTeamsStep","descriptionForTeamsSelection","CredentialAddTeams","edaApiPath","edaAPI","edaErrorAdapter","useEdaBulkConfirmation","hubErrorAdapter","mappedKeys","non_field_errors","parameter","parsedMessages","useHubBulkConfirmation","Access","additionalTableColumns","tableColumnFunctions","function","accessListType","toolbarNameColumnFiltersValues","additionalTableFilters","content_type_model","user_id","viewPage","viewPerPage","useEdaView","removeRoles","bulkActionEda","bulkActionAwx","bulkActionHub","removeConfirmationText","removeRoleText","useRemoveRoles","addRoleButtonText","addRolesRoute","TeamAccess","roleTeamAssignmentsURL","teamAccess","UserAccess","roleUserAssignmentsURL","CreateCredentialType","CredentialTypes","createdCredentialType","getInitialFormValues","CredentialTypeInputs","EditCredentialType","hasCredentialType","credentialtypeName","editedCredentialType","injectors","CredentialTypeCredentials","CredentialTypeDetailInner","useDeleteCredentialTypes","cannotDeleteCredentialTypeDueToPermissions","cannotDeleteManagedCredentialType","undeletableManagedCredentialTypes","undeletableCustomCredentialTypesDueToPermissions","useCredentialTypeRowActions","onCredentialTypesDeleted","deleteCredentialTypes","cannotEditManagedCredentialType","cannotEditCredentialTypeDueToPermissions","CredentialTypePage","canCreateCredentialType","useCredentialTypeToolbarActions","useDeleteExecutionEnvironments","useExecutionEnvRowActions","onDelete","deleteExecutionEnvironments","EditExecutionEnvironment","ExecutionEnvironmentPage","ExecutionEnvironmentTemplates","ExecutionEnvironmentTeamAccess","ExecutionEnvironmentUserAccess","ExecutionEnvironmentsList","hideOrgColumn","filteredColumns","canCreateExecutionEnvironment","CreateExecutionEnvironment","useExecutionEnvToolbarActions","ExecutionEnvironmentDetailInner","execution_env","pull","PullOption","Always","Missing","Never","newExecutionEnv","executionEnvInput","ExecutionEnvironmentInputs","mode","executionenvironmentName","editedExecutionEnv","executionEnv","isOrgGloballyAvailable","credential_type__namespace","ExecutionEnvironmentAddTeams","ExecutionEnvironmentAddUsers","useGetHost","useHostsColumns","recentPlaybookJobs","canceled_on","useDeleteHosts","useHostsActions","deleteHosts","handleToggleHost","patchedHost","InventoryHostEdit","EditHost","HostPage","_host","HostFacts","HostGroups","HostJobs","useHostsFilters","canCreateHost","CreateHost","CreateSmartInventory","useHostsToolbarActions","useCancelJobs","cancelActionNameColumn","cannotCancelJobDueToPermissions","cannotCancelJobDueToStatus","uncancellableJobsDueToStatus","uncancellableJobsDueToPermissions","useDeleteJobs","cannotDeleteJobDueToPermissions","cannotDeleteJobDueToStatus","undeletableJobsDueToStatus","undeletableJobsDueToPermissions","useRelaunchJob","jobRelaunchParams","relaunchConfig","TemplateLaunchWithPasswordsWizard","relaunchJob","useRelaunchOptions","relaunchAllHosts","relaunchFailedHosts","cannotCancelJob","useJobsFilters","JobsList","deleteJobs","cancelJobs","relaunchOptions","cannotDeleteJob","useJobRowActions","useJobToolbarActions","useJobLaunchedByColumn","tableOption","cardOption","listOption","modalOption","useJobTemplateColumn","useSourceWorkflowColumn","useJobSliceColumn","useJobExecutionEnvColumn","useHostsJobsColumns","IDColumns","startTimeColumn","finishTimeColumn","launchedByColumn","jobSliceColumn","jobTemplateColumn","sourceWorkflowColumn","projectNameColumn","jobsColumns","job__hosts","not__launch_type","useDeleteInventories","cannotDeleteInventory","undeletableInventories","useInventoryActions","onInventoriesDeleted","onInventoryCopied","deleteInventories","copyInventory","useCopyInventory","updateJobId","setUpdateJobId","hideCancelButton","setHideCancelButton","cancelSync","startSync","cannotSyncInventory","kinds","cannotEditInventory","EditInventory","cannotCopyInventory","isSyncRunning","inventorySourceSyncJob","syncRunning","InventoryPage","urlType","getDetailsPageUrl","inventoryRequest","inventoryData","inventorySourceRequest","inventorySourceData","isSmartInventory","isConstructedInventory","InventoryUserAccess","InventoryTeamAccess","InventoryGroups","InventoryHosts","InventorySources","InventoryJobs","InventoryJobTemplates","useGetInventory","setGroupName","useHostParams","group_id","getGroup","inventoryResponse","inventory_host","InventoryGroupDetails","hostInput","modifiedHostInput","newHost","InventoryHostDetails","HostInputs","edit_mode","hostResponse","setHost","hostName","useHostDetailParams","InventoryHostDetailsInner","useHostsGroupsFilters","useHostsGroupsColumns","useGroupInventory","kindToInventoryType","InventoryHostGroupsAddModal","not__hosts","hostId","onAdd","useInventoryHostGroupsAddModal","useAssociateGroupsToHost","addActionNameColumn","DeleteGroupsDialog","deleteType","setDeleteType","deletedGroups","setDeletedGroups","currentlyDeletedGroups","failedGroups","ex","errorStr","failedGroup","handleDelete","Radio","useDeleteGroups","useRunCommandAction","adhocOptions","canRunAdHocCommand","storage","InventoryRunCommand","rowAction","actionType","InventoryHostGroups","isHostPage","disassociateGroups","useDisassociateGroups","groupOptions","canCreateGroup","openInventoryHostsGroupsAddModal","associateGroups","runCommandAction","useHostsGroupsToolbarActions","InventoryGroupEdit","useHostsGroupsActions","InventoryHostFacts","facts","useInstancesFilters","useAssociateInstanceToIG","instanceGroupId","AssociateInstanceModal","onAssociate","not__node_type","not__rampart_groups__id","useAssociateInstanceModal","InstancesList","useToolbarActions","useRowActions","canCreateInstance","associateInstance","openAssociateInstanceModal","AddInstance","useInstanceToolbarActions","healthCheckAction","useRunHealthCheckToolbarAction","addInstanceAction","canAddAndEditInstances","useAddInstanceToolbarAction","useRemoveInstanceToolbarAction","runHealthCheck","nonHealthCheckableInstances","useRunHealthCheck","useIGInstanceToolbarActions","associateAction","associateInstanceToIG","canAssociateInstance","useIGInstanceAssociateToolbarAction","disassociateAction","disassociateInstance","bulkConfirmation","useDisassociateInstanceFromIG","itemsToDisassociate","verifyCannotDisassociate","itemsUnableToDisassociate","isDisassociateBtnDisabled","useIGInstanceDisassociateToolbarAction","useIGInstanceRowActions","InstanceGroupInstances","InstanceGroupInstanceDetails","InstanceGroupInstancesPage","InstanceGroupTeamAccess","InstanceGroupAddTeams","InstanceGroupUserAccess","InstanceGroupAddUsers","policy_instance_minimum","policy_instance_percentage","max_concurrent_jobs","max_forks","InstanceGroupInputs","instancegroupName","updateInstanceGroup","teamRoleProgressDialog","instanceGroupName","InstanceGroupDetailInner","pod_spec_override","InstanceGroupJobs","useJobTypeColumn","scheduleColumn","useJobScheduleColumn","useInstanceGroupJobsColumns","instance_group","override","podSpecForSubmit","containerGroup","POST","ContainerGroupInputs","igError","optionsError","optionsLoading","containergroupName","updateContainerGroup","hasOverride","InstanceGroupPage","newInstance","peers_from_control_nodes","InstanceInputs","instanceName","instanceInput","peersFromControlNodes","usePeersTabFilters","addressToolbarFilter","useAddressToolbarFilter","InstancePage","pageActions","InstanceListenerAddresses","InstancePeers","usePeersColumns","_options","peer","address","isListenerAddresses","port","GetNodeTypePeer","receptor_addresses","canonical","GetCanonical","PeerInstanceModal","onPeer","receptors","peeredInstanceIds","peers","peeredReceptorIds","receptor","is_internal","not__instance","InstancePeersTab","ResourcePeersList","associatePeerToInstance","peerIds","useAssociatePeersToInstance","openPeerInstanceModal","usePeerInstanceModal","disassociatePeer","useAddressColumn","peersToRemove","peersToRemoveIds","resultantPeers","currentPeerIds","useDisassociatePeer","hostnameToolbarFilter","useHostnameToolbarFilter","usePeersFilters","CreateConstructedInventory","useInventoriesToolbarActions","wsInventory","inv","ConstructedInventoryHint","actionLinks","AlertActionLink","LimitToIntersectionExample","FilterOnNestedGroupExample","HostsByProcessorTypeExample","limitToIntersectionCode","FormFieldGroupExpandable","FormFieldGroupHeader","titleDescription","clipboardCopyFunc","clipboardCopy","nestedGroupsInventorySourceVars","hostsByProcessorSourceVars","ansibleDocUrls","ec2","azure_rm","gce","insights","openstack","satellite6","rhv","vmware","terraform","LabelHelp","inventoryKind","labelHelpVarsInventory","labelHelpVarsSmartInventory","labelHelpVarsConstructedInventory","inputInventories","source_vars","loadInputInventories","newInventory","submitInstanceGroups","submitInputInventories","submitLabels","InventoryInputs","iGroupsRequest","igResponse","inputInventoriesRequest","inputInventoriesResponse","originalInstanceGroups","isLoaded","isError","inventoryName","editedInventory","updatedInventory","useInventoryFormDetailLabels","cache_timeout","input_inventories","inventoryFormDetailLabels","PageFormMultiSelectInventories","currentInstanceGroups","currentInputInventories","originalInputInventories","inventoriesData","promise","originalInv","selectedInv","PFExclamationTriangleIcon","ExclamationTrianglePopover","ExecutionEnvironmentDetail","isDefaultEnvironment","virtualEnvironment","verifyMissingVirtualEnv","docsLink","urlId","inventorySourceId","overwrite","overwrite_vars","update_on_launch","optionsList","lastJob","LastJobTooltip","host_filter","enabled_var","enabled_value","sourceType","getSourceVarsHelpText","useOutletContext","InventoryDetailsInner","inventoryTypes","useInventoryTypes","useInstanceGroups","inputInventoriesError","inventoryFormDetailLables","PageDetailJobStatus","total_hosts","hosts_with_active_failures","total_groups","total_inventory_sources","useInventorySourceActions","onInventorySourcesDeleted","onInvUpdateCanceled","deleteInventorySources","cannotDeleteInventorySources","inventorySources","undeletableInventorySources","useDeleteInventorySources","handleUpdate","invSrc","cancelInventoryUpdate","useCancelIventoryUpdate","cannotLaunchInventorySourceUpdate","cannotEditInventorySource","InventorySourceEdit","startPerms","unlaunchableStatus","cannotDeleteInventorySource","InventorySourcePage","InventorySourceSchedules","InventorySourceNotifications","RuleType","INVENTORY_TYPE","RULES_DEFAULT_VALUES","freq","Frequency","YEARLY","interval","wkst","RRule","SU","byweekday","byweekno","bymonth","bymonthday","byyearday","bysetpos","until","byminute","byhour","endType","WEEKS_OF_YEAR","week","DAYS_OF_YEAR","day","MINUTES_OF_HOUR","minute","DAYS_OF_MONTH","HOURS_OF_DAY","hour","FormGroupDateTimePicker","dateValue","timeValue","datePlaceHolder","timePlaceHolder","onDateChange","onTimeChange","handleDateChange","inputDate","newDate","yyyyMMddFormat","TimePicker","inputProps","PageFormDateTimePicker","pad","num","RuleForm","get24Hour","fromFormat","ruleId","timezone","startDateTime","isRulesStep","weekdayOptions","MO","TU","WE","TH","FR","SA","useGetWeekdayOptions","frequencyOptions","MONTHLY","WEEKLY","DAILY","HOURLY","MINUTELY","useGetFrequencyOptions","monthOptions","useGetMonthOptions","handleAddItem","exceptions","dateString","rrulestring","ruleStart","fromString","rule","untilTime","untilDate","toUTC","datetime","plus","ruleObject","ruleType","Rules","Exceptions","ruleArray","LabelGroupWrapper","PFLabelGroup","toggleCollapse","prevState","currentRef","headingRef","isTooltipVisible","offsetWidth","ScheduleSummary","preview","setPreview","rrule","local","utc","fetchPreview","timesArray","isLocal","hideColumnTitle","setZone","TimezoneToggle","setIsLocal","localTimezone","RulesList","isExceptions","wizard","isExceptionStep","existingRules","existingExceptions","untilDateTime","tzid","ruleData","filteredRules","deleteRule","useRuleRowActions","isLocalForDetails","docUrl","needsHeader","RulesStep","hasRules","startHour","startMinute","isStartPM","updatedRules","dtstart","ExceptionsStep","hasExceptions","updatedExceptions","SelectWorkflowJobTemplate","PageFormWorkflowJobTemplateSelect","useSelectWorkflowJobTemplate","ScheduleTypeInputs","resourceInventory","scheduleType","management_job_template","ScheduleResourceInputs","timezoneMessage","setTimezoneMessage","timeZone","hasDaysToKeepField","timeZones","zones","useGetTimezones","ScheduleSelectStep","isTopLevelScheduleForm","isTopLevelSchedule","resourceEndPoint","scheduleResource","schedule_type","getResource","resourceIsNotATemplate","endPoint","promptStep","useProcessSchedule","postAccessories","usePostAccessories","postSchedule","updateSchedule","schedule_days_to_keep","payloadData","request","restOfPrompt","extraDataObject","hasJobTags","hasSkipTags","ScheduleReviewStep","resourceTypeDetail","useGetScheduleTypeDetail","ruleSet","RRuleSet","exrule","InventorySourceScheduleCreate","InventorySourceScheduleEdit","scheduleList","JobTemplateScheduleCreate","JobTemplateScheduleEdit","JobTemplateSchedules","ProjectScheduleCreate","ProjectScheduleEdit","ProjectSchedules","ManagementJobScheduleCreate","ManagementJobScheduleEdit","WorkflowJobTemplateScheduleCreate","WorkflowJobTemplateScheduleEdit","WorkflowJobTemplateSchedules","useSetRRuleItemToRuleSet","ruleset","ScheduleAddWizard","processSchedules","getRuleSet","closestQuarterHour","currentDate","toISO","SchedulePromptsStep","_formData","resolvedOptions","Schedules","missingResource","UserDateDetail","ScheduleDetails","rrulestr","forceset","rrules","exrules","next_run","dtend","isSystemJobTemplateSchedule","useSchedulesColumns","relatedNameClick","sched","useDeleteSchedules","useSchedulesActions","deleteSchedule","onScheduleDeleteCompleted","canCreateSchedule","handleToggleSchedule","patchedSchedule","onScheduleToggleCompleted","editHref","SchedulePage","viewActivityStreamAction","setInventory","isInventorySource","initialBreadCrumbs","resourceError","resourceRefresh","getScheduleURL","fetchInventory","breadCrumbs","allParams","relevantError","relevantRefresh","relatedGroupColumn","useRelatedGroupsColumn","recentJobs","useInventoriesHostsColumns","hostOptions","InventoryHostAdd","useInventoriesHostsToolbarActions","useInventoriesSourcesToolbarActions","deleteSources","useSourcesColumns","sources","useDeleteSources","canCreateSource","cannotLaunchInventorySourcesUpdate","syncAll","useSyncAll","InventorySourcesAdd","useGroupsFilters","useGroupTypeToolbarFilter","useInventoriesGroupsActions","useInventoriesGroupsColumns","deleteGroups","InventoryGroupCreate","useInventoriesGroupsToolbarActions","constructed_inventory","GroupPage","inventoryGroup","useInventoriesGroupActions","InventoryGroupRelatedGroups","InventoryGroupHost","InventoryHostPage","InventoryHostJobs","GroupCreate","postParentGroup","groupInput","createGroup","newGroup","parentGroup","GroupEdit","editGroup","editedGroup","GroupFormPageHeader","breadcrumbsParams","urlParams","breadcrumbsObj","relatedGroups","CreateGroup","EditGroup","CreateRelatedGroup","PageFormInventoryFileSelect","newResponse","InventorySourceSubForm","isUpdateOnLaunchEnabled","sourceTypes","credential_type__kind__in","handleQueryParams","CreateInventorySource","InventorySourceInputs","EditInventorySource","sourceName","formContext","setSourceType","scmTypeOptions","GroupDetails","HostSelectDialog","onSelectedHosts","groupId","GroupHosts","useInventoriesGroupHostsColumns","disassociateHosts","useDisassociateHosts","selectedHosts","InventoryGroupHostAdd","useInventoriesGroupsHostsToolbarActions","useInventoriesGroupsHostsActions","useHostsEmptyStateActions","useGroupsColumns","GroupSelectDialog","onSelectedGroups","not__id","not__parents","GroupRelatedGroups","useRelatedGroupsColumns","isConstructed","selectedGroups","InventoryGroupRelatedGroupsCreate","useRelatedGroupsToolbarActions","useRelatedGroupsEmptyStateActions","groupsOptions","ResourceNotifications","resourceToErrorMsg","inventory_sources","workflow_job_templates","system_job_templates","resourceId","notificationStarted","notificationStartedRefresh","notificationSuccess","notificationSuccessRefresh","notificationError","notificationErrorRefresh","approval","notificationApproval","notificationApprovalRefresh","notificationTypes","notification_type","useNotificationFilters","notificationTemplate","NotificationTemplateDetails","useNotificationsColumns","toggleNotification","postData","createNotificationAction","notificationType","enable","isNotificationDisabled","notificationArray","unshift","useNotificationActions","SchedulesList","compParams","isMissingResource","apiEndPoint","sublistEndpoint","useSchedulesFilter","createUrl","deleteSchedules","useScheduleToolbarActions","createSchedulePageId","or__adhoccommand__inventory","or__inventoryupdate__inventory_source__inventory","or__job__inventory","or__workflowjob__inventory","RunCommandDetailStep","module","moduleOptions","verbosityOptions","RunCommandExecutionEnvionment","orgId","RunCommandCredentialStep","RunCommandReviewStep","module_name","eeId","runCommandObj","ScheduleEditWizard","startDate","PromptsStep","currentValues","scheduleName","InventoryAddTeams","InventoryAddUsers","timeoutDefaultText","WorkflowOutputNavigation","setSelected","filteredNodes","setFilteredNodes","totalResults","flatStatuses","onToggleClick","JobHeader","useGetJob","wfJobId","relevantNodes","downloadJobOutput","stdout","useJobHeaderActions","JobPage","refreshJob","command","management","workflow","BarWrapper","BarSegment","TooltipContent","LegendBox","WorkflowNodesStatusBar","workflowStatus","segments","nodeVal","StatusBar","HostStatusBar","hostStatus","failures","dark","noData","totalCounts","sum","barSegments","jobStatus","LegendItem","percent","JobOutputLoadingRow","queryJobOutputEvent","counter","Ansi","Anser","ansiOptions","fg","remove_empty","use_classes","JobEventEllipsis","LineNumberGutter","ExpandButton","LineNumber","StdOutColumn","JobOutputRow","row","canCollapseEvents","setHeight","uuid","isClickableRow","taskUuid","isHeaderLine","jobEventToRows","jobEvent","playUuid","event_data","play_uuid","task_uuid","lines","foundHeaderLine","eventLine","parent_uuid","start_line","ControllsWrapper","ScrollWrapper","ExpandCollapseWrapper","PageControls","onScrollFirst","onScrollLast","onScrollNext","onScrollPrevious","toggleExpandCollapseAll","isAllCollapsed","isFlatMode","isTemplateJob","AngleUpIcon","AngleDoubleUpIcon","AngleDoubleDownIcon","WS_EVENTS_BATCH_SIZE","runningJobTypes","processCodeEditorValue","getStdOutValue","hostEvent","taskAction","task_action","stdOut","HostEventModal","activeTabKey","setActiveTabKey","stdErr","stderr","processEventStatus","play","task","ScrollContainer","JobOutputEvents","isFollowModeEnabled","setIsFollowModeEnabled","hostModalData","setHostModalData","isFiltered","childrenSummary","forceFlatMode","useJobOutputChildrenSummary","jobEventCount","getJobOutputEvent","pageSize","isQuerying","querying","missingEvents","queryTimeout","setJobEventCount","jobEvents","setJobEvents","fetchEvents","qsParts","eventsSlug","eventCounters","parts","getFiltersQueryString","batchedEvents","batchTimeout","addBatchedEvents","maxCounter","eventGroup","useJobOutput","jobOutputRows","result_traceback","collapsedState","setCollapsedAll","collapsedAll","nonCollapsedRows","counterKey","children_summary","summary","numChildren","useNonCollapsedRows","beforeRowsHeight","visibleItems","setRowHeight","afterRowsHeight","setScrollTop","containerHeight","setContainerHeight","onResize","rowHeights","setRowHeights","minRowHeight","setMinRowHeight","heights","newHeights","totalRowCount","totalHeight","rowHeight","beforeRowsCount","maxVisibleHeight","visibleRowsCount","visibleRowsHeight","useVirtualizedList","event_processing_finished","is_tree","estimatedMaxLines","outputLineChars","scrollToTop","scrollToBottom","scrollPageDown","scrollPageUp","numRows","numTicksAtBottom","setNumTicksAtBottom","scrollTo","clearInterval","isAtBottom","failSafe","scrollBy","useScrollControls","visibleHostIndex","visibleHost","visibleHostCounter","selectedRowHostData","isHostModalOpen","isHost","isHostEvent","found","visibleItem","JobOutputToolbar","handleFollowToggle","HeaderTitle","JobStatusBar","activeJobElapsedTime","setActiveJobElapsedTime","secTimer","elapsedTime","calculateElapsed","playCount","playbook_counts","play_count","taskCount","task_count","darkCount","host_status_counts","failureCount","totalHostCount","viewWFVisAction","Count","duration","toObject","Section","JobOutputInner","useOutputFilters","isRunning","CredentialPasswordsStep","vaultsThatPrompt","showCredentialPasswordSsh","showCredentialPasswordPrivilegeEscalation","showCredentialPasswordPrivateKeyPassphrase","launchConfigCredential","defaultCred","passwords_needed","vaultPasswordIds","passwordNeeded","vaultPassword","inputCheck","password","become_password","ssh_key_unlock","vault_password","credId","TemplateLaunchReviewStep","fullInventory","RelaunchTemplate","configError","configRefresh","templateError","templateRefresh","credential_passwords","ManagementJobPage","isNotifAdmin","isNotifAdminError","refreshNotifAdmin","ManagementJobNotifications","ManagementJobs","ManagementJobsRetainDataModal","newJob","openManagementJobsModal","useManagementJobPrompt","launchManagementJob","managementJob","useManagementJobRowActions","useNotifiersColumns","runningNotifications","recent_notifications","useDeleteNotifiers","useNotifiersRowActions","onNotifierCopied","onNotifierStartTest","deleteNotifiers","copyNotifier","useCopyNotifier","EditNotificationTemplate","BellIcon","useNotificationsWatch","setRunningNotifications","notificationId","checkNotifiers","notificationsTemplate","Notifiers","notificationsOptions","canAddNotificationTemplate","AddNotificationTemplate","useNotifiersToolbarActions","InnerForm","EmailForm","SlackForm","TwilioForm","PagerdutyForm","GrafanaForm","WebhookForm","MattermostForm","RocketchatForm","IrcForm","getLabelHelp","splitVals","validateEmail","validateNumber","twilioPhoneNumber","validateUrl","phoneNumbers","NotifierFormMessages","oldType","setOldType","type_changed","hasMessages","hasBody","customize_messages","defaultMessages","timed_out","getDefaultMessages","messages","EditNotifier","NotifierForm","AddNotifier","notifierRequest","messagesError","setMessagesError","optionsRequest","notification_configuration","isList","arraysToString","messagesEmpty","NotificationTemplates","fieldValue","stringToArrays","mess","job_friendly_name","NotificationDetails","runningTest","RenderInnerDetail","RenderMessages","object","caption","returnCaption","contentEditable","rows","NotificationPage","NotificationTemplateTeamAccess","NotificationTemplateUserAccess","NotificationTeamAccess","NotificationAddTeams","NotificationUserAccess","NotificationAddUsers","NotifierAddUsers","NotifierAddTeams","createdOrganization","igRequests","OrganizationInputs","organizationName","editedOrganization","disassociateRequests","OrganizationUserAccess","OrganizationAddUsers","galaxyCredentials","useGalaxyCredentials","detailColumns","col","OrganizationPage","deleted","OrganizationPageTabs","OrganizationUsersAccess","OrganizationTeamsAccess","OrganizationExecutionEnvironments","OrganizationNotifications","OrganizationAddTeams","signatureValidationHelpText","playbookDirectoryHelpText","cacheTimeoutHelpText","defaultEnvironmentHelpText","sourceControlRefspecHelpBlock","basePathHelpBlock","scmUrlHelpBlock","signature_validation_credential","scm_clean","scm_delete_on_update","scm_track_submodules","scm_update_on_launch","allow_override","ScmTypeOptions","hideAllowOverride","scmUpdateOnLaunch","ArchiveSubForm","archiveSourceControlUrlHelp","i18nKey","GitSubForm","gitSourceControlUrlHelp","sourceControlRefspecHelp","InsightsSubForm","ManualSubForm","noPlaybookDirectoriesAlert","project_local_paths","localPath","SvnSubForm","svnSourceControlUrlHelp","base_dir","newProject","ProjectInputs","EditProject","projectName","updatedProject","scmFormFieldDefaults","ProjectJobTemplates","useCancelProjects","isProjectRunning","cannotCancelProjectDueToPermissions","cannotCancelProjectDueToStatus","uncancellableProjectsDueToStatus","uncancellableProjectsDueToPermissions","current_update","useDeleteProjects","useProjectActions","showToastMessage","deleteProjects","cancelProjects","cannotEditProject","cannotCopyProject","cannotDeleteProject","ProjectPage","projectError","projectRefresh","isProjectLoading","isNotifAdminLoading","role_level","ProjectUsers","ProjectTeams","ProjectNotifications","useProjectToolbarActions","ProjectAddTeams","ProjectAddUsers","AwxProjectAddUsers","AwxProjectAddTeams","CreateSchedule","CreateTeam","Teams","createdTeam","TeamInputs","EditTeam","teamName","organizationDetailsUrl","createdByUserDetailsUrl","modifiedByUserDetailsUrl","created_at","modified_at","AwxTeamDetails","TeamAddMembers","useSelectUsersAddTeams","useTeamsColumns","nameColumnClick","useDeleteTeams","deleteActionOrganizationColumn","cannotDeleteTeam","undeletableTeams","useTeamActions","onTeamsDeleted","deleteTeams","selectUsersAddTeams","selectAndRemoveUsersFromTeam","removeUsersFromTeams","removeUserConfirmationDialog","canRemoveUsers","cannotRemoveUser","undeletableUsers","useRemoveUsersFromResource","useSelectAndRemoveUsersFromTeam","cannotEditTeam","cannotAddUsers","cannotRemoveUsers","TeamPage","isDetailsPageAction","TeamMembers","TeamRoles","canCreateTeam","useTeamToolbarActions","AwxSelectResourceTypeStep","display_name","resourceToEndpointMapping","AwxSelectResourcesStep","resourceToTitleMapping","not__organization","AwxAddRoles","progressDialog","AwxAddTeamRoles","teamRolesRoute","EdaRoute","HubRoute","ResourceAccess","roleDefinitionsURL","getLinkToResourcePage","objectId","RulebookActivationDetails","RulebookActivationInstanceDetails","DecisionEnvironmentDetails","RuleAuditDetails","NamespaceDetails","RepositoryDetails","RemoteDetails","useGetLinkToResourcePage","contentTypeFilterOptions","optionsArray","assignment","content_object","AwxTeamRoles","AddRolesToTeam","TeamMembersAdd","WebhookSubForm","webhookService","webhookServices","whkData","handleFetchWebhookKey","handleGenerateWebhookKey","isUpdateKeyDisabled","acceptableCredentialKinds","JobTemplateInputs","playbookOptions","setPlaybookOptions","projectPath","isInventoryPrompted","askJobTypeOnLaunch","playbooks","handleFetchPlaybooks","jobTemplateError","jobTemplateRefresh","isJobTemplateLoading","instanceGroupsError","isInstanceGroupsLoading","instanceGroupRefresh","jobTemplateFormError","jobtemplateName","Templates","submitCredentials","disassociateCredentials","disassociatePromise","associateCredentials","associatePromise","newInstanceGroups","array1","array2","DangerText","DeletedDetail","TemplateDetails","summaryFields","askInventoryOnLaunch","resolved_environment","TemplateLaunchPromptStep","hasPreviousPromptValues","formFieldToLaunchConfig","job_slice","LaunchTemplate","createLabelPayload","createdLabels","newLabels","labelRequests","useLabelPayload","getTemplateError","getTemplateRefresh","getLaunchError","getLaunchRefresh","LaunchWizard","labelPayload","credentialVaultId","selectedCredential","missingCredentialTypes","originalCredential","selectedCredentialVaultID","originalCredentialVaultID","wizardValues","launchConfigAsksCredentials","launchConfigRequiresPasswords","showCredentialPasswordsStep","inputName","TemplatePage","isTemplateLoading","JobTemplateTeamAccess","JobTemplateUserAccess","JobTemplateJobs","JobTemplateSurvey","JobTemplateNotifications","WorkflowJobTemplateInputs","workflowJobTemplate","wfjtError","wfjtRefresh","isWfjtLoading","workflowjobtemplateName","WorkflowJobTemplatePage","WorkflowJobTemplateTeamAccess","WorkflowJobTemplateUserAccess","WorkflowJobTemplateJobs","WorkflowJobTemplateSurvey","WorkflowJobTemplateNotifications","WorkflowJobTemplateAddTeams","WorkflowJobTemplateAddUsers","templateName","useCreateNodeComponent","createConnector","useCreateConnector","nodeContextMenu","handleCollectNodeProps","targetNodeAncestors","getEdges","parentMap","invalidLinkTargetIds","parents","traversed","getAncestors","parentId","ancestorId","setNodeShape","hexagon","monitor","getDropResult","iteratedNode","canDrop","edgeDragging","useHandleCollectNodeProps","nodeDropTargetSpec","EDGE_DRAG_TYPE","CREATE_CONNECTOR_DROP_TYPE","collect","withCreateConnector","withContextMenu","withDndDrop","withDragNode","nodeDragSourceSpec","WorkflowTopology","dedupeOldNodes","elements","staleNode","getElementById","removeElement","createNodeComponent","handleSelectedNode","clickedNodeIdentifier","edgeContextMenu","contextToolbar","viewToolbar","minSideBarSize","flex","workflowNodeError","workflowNodeIsLoading","workflowError","workflowRefresh","workflowIsLoading","TemplateTeamAccess","JobTemplateAddTeams","TemplateUserAccess","JobTemplateAddUsers","TemplateJobs","useSurveyColumns","AsteriskIcon","EditJobTemplateSurvey","EditWorkflowJobTemplateSurvey","question_variable","useDeleteSurveyDialog","onError","questions","DeleteSurveyDialog","deleteSurvey","surveySpecEndpoint","surveyQuestions","useDeleteSurvey","SurveySwitch","TemplateSurvey","handleToggleSurvey","TemplateSurveyInternal","onToggleSurvey","useSurveyView","canCreateSurvey","canDeleteSurvey","deleteQuestions","isJobTemplate","openManageQuestionOrder","useManageSurveyQuestions","canModifySurvey","AddJobTemplateSurvey","AddWorkflowJobTemplateSurvey","useSurveyToolbarActions","DividerWithSpace","MultipleChoiceField","docsURL","emptyChoiceMsg","duplicateChoiceMsg","defaultOptLabel","append","useFieldArray","updatedChoices","addChoice","plainChoices","handleAdd","columnGap","alignContent","pc","ValidatedOptions","minDefault","maxDefault","EditTemplateSurveyForm","questionVariable","TemplateSurveyForm","AddTemplateSurveyForm","pageNavigateSurveyRoute","isMultiSelect","displayDuplicateError","formattedChoices","new_question","newQuestion","isDuplicate","selectedQuestionIndex","postBody","TemplateSurveyInputs","answerType","SelectedAnswerType","answer","keepValues","keepErrors","SystemAdministrator","SystemAuditor","NormalUser","CreateUser","Users","userInput","userType","confirmPassword","newUser","UserInputs","EditUser","defaultUserValue","userName","AuthenticationType","ldap_dn","auth","last_login","showAuthType","showUserType","AwxUserDetails","DetailInfo","useRemoveOrganizationsFromUsers","organizationProgressDialog","SelectOrganizations","useSelectOrganizations","useSelectOrganizationsAddUsers","selectOrganizations","addOrganizationsToUsers","useAddOrganizationsToUsers","UserOrganizations","UserOrganizationsInternal","selectOrganizationsAddUsers","removeOrganizationsFromUsers","useDeleteUsers","cannotDeleteUser","UserPage","deleteUsers","pageTabs","UserTeams","UserRoles","UserTokens","AddRolesToUser","useRemoveTeamsFromUsers","bulkProgressDialog","SelectTeams","useSelectTeams","useSelectTeamsAddUsers","selectTeams","addTeamsToUsers","teamProgressDialog","useAddTeamsToUsers","UserTeamsInternal","selectTeamsAddUsers","removeTeamsFromUsers","canAddUserToTeam","useUserTokensColumns","application","UserTokenDetails","tokenid","scope","expires","useDeleteUserTokens","userTokensColumns","tokens","userId","UserTokensInternal","infoMessage","createRoute","createTokenRoute","CreateUserToken","deleteTokens","userError","refreshUser","tokenError","refreshToken","UserTokenDetailsInternal","selectOrganizationsRemoveUsers","useSelectOrganizationsRemoveUsers","selectTeamsRemoveUsers","useSelectTeamsRemoveUsers","canCreateUser","cannotEditUser","userRolesRoute","UserTokenPage","PageFormApplicationSelect","applicationColumns","useApplicationsColumns","applicationFilters","CreateUserTokenInternal","onCreate","onSuccessfulCreate","newToken","tokenInput","UserTokenFormInputs","UserTokenSecretsModal","refresh_token","ClipboardCopyVariant","expansion","WorkflowApprovalTimeRemaining","approvalExpiration","approval_expiration","timeRemaining","setTimeRemaining","abbreviatedDays","abbreviatedHours","abbreviatedMinutes","abbreviatedSeconds","WorkflowApprovalStatusCell","useWorkflowApprovalsColumns","workflowApproval","useApproveWorkflowApprovals","cannotApprove","can_approve_or_deny","workflow_approvals","unapproveableWorkflowApprovals","useDeleteWorkflowApprovals","cannotDeleteDueToPermissions","undeletableWorkflowApprovalsDueToPermissions","useDenyWorkflowApprovals","cannotDeny","undeniableWorkflowApprovalsDueToPermissions","useWorkflowApprovalsRowActions","approveWorkflowApprovals","deleteWorkflowApprovals","denyWorkflowApprovals","ThumbsUpIcon","ThumbsDownIcon","cannotDeleteWorkflowApproval","WorkflowApprovalPage","workflowApprovalError","workflowJobId","workflowJob","workflowJobError","WorkflowApprovals","WorkflowApprovalWorkflowJobDetails","job_id","useWorkflowApprovalToolbarActions","AwxApp","awxInventoryRoutes","InventorySourceSchedulePage","InventoryGroupPage","useAwxInventoryRoutes","awxHostRoutes","useAwxHostRoutes","awxProjectRoutes","ProjectSchedulePage","Navigate","useAwxProjectRoutes","awxCredentialRoutes","useAwxCredentialRoutes","awxTemplateRoutes","JobTemplateSchedulePage","JobTemplatePage","WorkflowJobTemplateSchedulePage","useAwxTemplateRoutes","awxWorkflowApprovalRoutes","useAwxWorkflowApprovalRoutes","awxSchedulesRoutes","useAwxSchedulesRoutes","awxJobsRoutes","useAwxJobsRoutes","awxActivityStreamRoutes","useAwxActivityStreamRoutes","awxOrganizationRoutes","useAwxOrganizationRoutes","awxTeamsRoutes","useAwxTeamsRoutes","awxUsersRoutes","newUserToken","setNewUserToken","useAwxUsersRoutes","awxNotificationsRoutes","NotificationTemplatePage","useAwxNotificationsRoutes","awxManagementJobsRoutes","ManagementJobSchedulePage","useAwxManagementJobsRoutes","awxInstanceGroupsRoutes","useAwxInstanceGroupsRoutes","awxInstancesRoutes","useAwxInstancesRoutes","awxExecutionEnvironmentsRoutes","useAwxExecutionEnvironmentRoutes","awxCredentialTypesRoutes","useAwxCredentialTypesRoutes","overview","Overview","infrastructureItems","Infrastructure","analyticsItems","Analytics","administrationItems","Administration","accessItems","SettingsAuthentication","RolePage","settingsItems","Settings","SettingsPreferences","SettingsSystem","SettingsJobs","SettingsLogging","SettingsTroubleshooting","useAwxNavigation","PFButton","SocialAuthLogin","SocialAuthLink","login_url","icons","AzureIcon","github","GithubIcon","GoogleIcon","oidc","saml","AnsibleLogin","setUsername","setPassword","setHelperText","loginApiUrl","nextPath","loginPageResponse","Accept","onSuccess","ErrorSpanStyled","hasAuthFailedFlag","backgroundImgSrc","BackgroundImage","src","Login","LoginHeader","headerBrand","brandImg","Brand","alt","brandImgAlt","BrandStyled","textContent","LoginFooter","LoginMainHeader","loginTitle","loginSubtitle","LoginMainBody","LoginForm","showHelperText","helperTextIcon","ErrorExclamationCircleIconStyled","usernameLabel","usernameValue","onChangeUsername","isValidUsername","passwordLabel","passwordValue","onChangePassword","isValidPassword","isShowPasswordEnabled","showPasswordAriaLabel","hidePasswordAriaLabel","loginButtonLabel","onLoginButtonClick","authOptions","LoginMainFooter","socialMediaLoginContent","socialMediaLoginAriaLabel","AwxLogin","AwxMain","BrowserRouter"],"sourceRoot":""}