{"version":3,"file":"5dc388db5ad4cc1a2cbd.js","mappings":"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","sources":["webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/base/common/codiconsLibrary.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/base/common/codicons.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/base/common/functional.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/base/common/lazy.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/base/common/linkedList.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/base/common/process.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/base/common/stopwatch.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/base/common/uint.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/editor/common/core/position.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/editor/common/core/positionToOffset.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/editor/common/core/range.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/editor/common/core/selection.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/editor/common/core/textLength.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/utils.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/dynamicProgrammingDiffing.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/myersDiffAlgorithm.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/linesSliceCharSequence.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/computeMovedLines.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/lineSequence.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/heuristicSequenceOptimizations.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputer.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/editor/common/diff/rangeMapping.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/editor/common/services/editorBaseApi.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/editor/common/languages/linkComputer.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/editor/common/languages/supports/inplaceReplaceSupport.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/editor/common/diff/legacyLinesDiffComputer.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/editor/common/languages/defaultDocumentColorsComputer.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/editor/common/services/findSectionHeaders.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputers.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/editor/common/services/unicodeTextModelHighlighter.js","webpack://@ansible/ansible-ui/./node_modules/monaco-editor/esm/vs/editor/common/tokenizationRegistry.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { register } from './codiconsUtil.js';\n// This file is automatically generated by (microsoft/vscode-codicons)/scripts/export-to-ts.js\n// Please don't edit it, as your changes will be overwritten.\n// Instead, add mappings to codiconsDerived in codicons.ts.\nexport const codiconsLibrary = {\n    add: register('add', 0xea60),\n    plus: register('plus', 0xea60),\n    gistNew: register('gist-new', 0xea60),\n    repoCreate: register('repo-create', 0xea60),\n    lightbulb: register('lightbulb', 0xea61),\n    lightBulb: register('light-bulb', 0xea61),\n    repo: register('repo', 0xea62),\n    repoDelete: register('repo-delete', 0xea62),\n    gistFork: register('gist-fork', 0xea63),\n    repoForked: register('repo-forked', 0xea63),\n    gitPullRequest: register('git-pull-request', 0xea64),\n    gitPullRequestAbandoned: register('git-pull-request-abandoned', 0xea64),\n    recordKeys: register('record-keys', 0xea65),\n    keyboard: register('keyboard', 0xea65),\n    tag: register('tag', 0xea66),\n    gitPullRequestLabel: register('git-pull-request-label', 0xea66),\n    tagAdd: register('tag-add', 0xea66),\n    tagRemove: register('tag-remove', 0xea66),\n    person: register('person', 0xea67),\n    personFollow: register('person-follow', 0xea67),\n    personOutline: register('person-outline', 0xea67),\n    personFilled: register('person-filled', 0xea67),\n    gitBranch: register('git-branch', 0xea68),\n    gitBranchCreate: register('git-branch-create', 0xea68),\n    gitBranchDelete: register('git-branch-delete', 0xea68),\n    sourceControl: register('source-control', 0xea68),\n    mirror: register('mirror', 0xea69),\n    mirrorPublic: register('mirror-public', 0xea69),\n    star: register('star', 0xea6a),\n    starAdd: register('star-add', 0xea6a),\n    starDelete: register('star-delete', 0xea6a),\n    starEmpty: register('star-empty', 0xea6a),\n    comment: register('comment', 0xea6b),\n    commentAdd: register('comment-add', 0xea6b),\n    alert: register('alert', 0xea6c),\n    warning: register('warning', 0xea6c),\n    search: register('search', 0xea6d),\n    searchSave: register('search-save', 0xea6d),\n    logOut: register('log-out', 0xea6e),\n    signOut: register('sign-out', 0xea6e),\n    logIn: register('log-in', 0xea6f),\n    signIn: register('sign-in', 0xea6f),\n    eye: register('eye', 0xea70),\n    eyeUnwatch: register('eye-unwatch', 0xea70),\n    eyeWatch: register('eye-watch', 0xea70),\n    circleFilled: register('circle-filled', 0xea71),\n    primitiveDot: register('primitive-dot', 0xea71),\n    closeDirty: register('close-dirty', 0xea71),\n    debugBreakpoint: register('debug-breakpoint', 0xea71),\n    debugBreakpointDisabled: register('debug-breakpoint-disabled', 0xea71),\n    debugHint: register('debug-hint', 0xea71),\n    terminalDecorationSuccess: register('terminal-decoration-success', 0xea71),\n    primitiveSquare: register('primitive-square', 0xea72),\n    edit: register('edit', 0xea73),\n    pencil: register('pencil', 0xea73),\n    info: register('info', 0xea74),\n    issueOpened: register('issue-opened', 0xea74),\n    gistPrivate: register('gist-private', 0xea75),\n    gitForkPrivate: register('git-fork-private', 0xea75),\n    lock: register('lock', 0xea75),\n    mirrorPrivate: register('mirror-private', 0xea75),\n    close: register('close', 0xea76),\n    removeClose: register('remove-close', 0xea76),\n    x: register('x', 0xea76),\n    repoSync: register('repo-sync', 0xea77),\n    sync: register('sync', 0xea77),\n    clone: register('clone', 0xea78),\n    desktopDownload: register('desktop-download', 0xea78),\n    beaker: register('beaker', 0xea79),\n    microscope: register('microscope', 0xea79),\n    vm: register('vm', 0xea7a),\n    deviceDesktop: register('device-desktop', 0xea7a),\n    file: register('file', 0xea7b),\n    fileText: register('file-text', 0xea7b),\n    more: register('more', 0xea7c),\n    ellipsis: register('ellipsis', 0xea7c),\n    kebabHorizontal: register('kebab-horizontal', 0xea7c),\n    mailReply: register('mail-reply', 0xea7d),\n    reply: register('reply', 0xea7d),\n    organization: register('organization', 0xea7e),\n    organizationFilled: register('organization-filled', 0xea7e),\n    organizationOutline: register('organization-outline', 0xea7e),\n    newFile: register('new-file', 0xea7f),\n    fileAdd: register('file-add', 0xea7f),\n    newFolder: register('new-folder', 0xea80),\n    fileDirectoryCreate: register('file-directory-create', 0xea80),\n    trash: register('trash', 0xea81),\n    trashcan: register('trashcan', 0xea81),\n    history: register('history', 0xea82),\n    clock: register('clock', 0xea82),\n    folder: register('folder', 0xea83),\n    fileDirectory: register('file-directory', 0xea83),\n    symbolFolder: register('symbol-folder', 0xea83),\n    logoGithub: register('logo-github', 0xea84),\n    markGithub: register('mark-github', 0xea84),\n    github: register('github', 0xea84),\n    terminal: register('terminal', 0xea85),\n    console: register('console', 0xea85),\n    repl: register('repl', 0xea85),\n    zap: register('zap', 0xea86),\n    symbolEvent: register('symbol-event', 0xea86),\n    error: register('error', 0xea87),\n    stop: register('stop', 0xea87),\n    variable: register('variable', 0xea88),\n    symbolVariable: register('symbol-variable', 0xea88),\n    array: register('array', 0xea8a),\n    symbolArray: register('symbol-array', 0xea8a),\n    symbolModule: register('symbol-module', 0xea8b),\n    symbolPackage: register('symbol-package', 0xea8b),\n    symbolNamespace: register('symbol-namespace', 0xea8b),\n    symbolObject: register('symbol-object', 0xea8b),\n    symbolMethod: register('symbol-method', 0xea8c),\n    symbolFunction: register('symbol-function', 0xea8c),\n    symbolConstructor: register('symbol-constructor', 0xea8c),\n    symbolBoolean: register('symbol-boolean', 0xea8f),\n    symbolNull: register('symbol-null', 0xea8f),\n    symbolNumeric: register('symbol-numeric', 0xea90),\n    symbolNumber: register('symbol-number', 0xea90),\n    symbolStructure: register('symbol-structure', 0xea91),\n    symbolStruct: register('symbol-struct', 0xea91),\n    symbolParameter: register('symbol-parameter', 0xea92),\n    symbolTypeParameter: register('symbol-type-parameter', 0xea92),\n    symbolKey: register('symbol-key', 0xea93),\n    symbolText: register('symbol-text', 0xea93),\n    symbolReference: register('symbol-reference', 0xea94),\n    goToFile: register('go-to-file', 0xea94),\n    symbolEnum: register('symbol-enum', 0xea95),\n    symbolValue: register('symbol-value', 0xea95),\n    symbolRuler: register('symbol-ruler', 0xea96),\n    symbolUnit: register('symbol-unit', 0xea96),\n    activateBreakpoints: register('activate-breakpoints', 0xea97),\n    archive: register('archive', 0xea98),\n    arrowBoth: register('arrow-both', 0xea99),\n    arrowDown: register('arrow-down', 0xea9a),\n    arrowLeft: register('arrow-left', 0xea9b),\n    arrowRight: register('arrow-right', 0xea9c),\n    arrowSmallDown: register('arrow-small-down', 0xea9d),\n    arrowSmallLeft: register('arrow-small-left', 0xea9e),\n    arrowSmallRight: register('arrow-small-right', 0xea9f),\n    arrowSmallUp: register('arrow-small-up', 0xeaa0),\n    arrowUp: register('arrow-up', 0xeaa1),\n    bell: register('bell', 0xeaa2),\n    bold: register('bold', 0xeaa3),\n    book: register('book', 0xeaa4),\n    bookmark: register('bookmark', 0xeaa5),\n    debugBreakpointConditionalUnverified: register('debug-breakpoint-conditional-unverified', 0xeaa6),\n    debugBreakpointConditional: register('debug-breakpoint-conditional', 0xeaa7),\n    debugBreakpointConditionalDisabled: register('debug-breakpoint-conditional-disabled', 0xeaa7),\n    debugBreakpointDataUnverified: register('debug-breakpoint-data-unverified', 0xeaa8),\n    debugBreakpointData: register('debug-breakpoint-data', 0xeaa9),\n    debugBreakpointDataDisabled: register('debug-breakpoint-data-disabled', 0xeaa9),\n    debugBreakpointLogUnverified: register('debug-breakpoint-log-unverified', 0xeaaa),\n    debugBreakpointLog: register('debug-breakpoint-log', 0xeaab),\n    debugBreakpointLogDisabled: register('debug-breakpoint-log-disabled', 0xeaab),\n    briefcase: register('briefcase', 0xeaac),\n    broadcast: register('broadcast', 0xeaad),\n    browser: register('browser', 0xeaae),\n    bug: register('bug', 0xeaaf),\n    calendar: register('calendar', 0xeab0),\n    caseSensitive: register('case-sensitive', 0xeab1),\n    check: register('check', 0xeab2),\n    checklist: register('checklist', 0xeab3),\n    chevronDown: register('chevron-down', 0xeab4),\n    chevronLeft: register('chevron-left', 0xeab5),\n    chevronRight: register('chevron-right', 0xeab6),\n    chevronUp: register('chevron-up', 0xeab7),\n    chromeClose: register('chrome-close', 0xeab8),\n    chromeMaximize: register('chrome-maximize', 0xeab9),\n    chromeMinimize: register('chrome-minimize', 0xeaba),\n    chromeRestore: register('chrome-restore', 0xeabb),\n    circleOutline: register('circle-outline', 0xeabc),\n    circle: register('circle', 0xeabc),\n    debugBreakpointUnverified: register('debug-breakpoint-unverified', 0xeabc),\n    terminalDecorationIncomplete: register('terminal-decoration-incomplete', 0xeabc),\n    circleSlash: register('circle-slash', 0xeabd),\n    circuitBoard: register('circuit-board', 0xeabe),\n    clearAll: register('clear-all', 0xeabf),\n    clippy: register('clippy', 0xeac0),\n    closeAll: register('close-all', 0xeac1),\n    cloudDownload: register('cloud-download', 0xeac2),\n    cloudUpload: register('cloud-upload', 0xeac3),\n    code: register('code', 0xeac4),\n    collapseAll: register('collapse-all', 0xeac5),\n    colorMode: register('color-mode', 0xeac6),\n    commentDiscussion: register('comment-discussion', 0xeac7),\n    creditCard: register('credit-card', 0xeac9),\n    dash: register('dash', 0xeacc),\n    dashboard: register('dashboard', 0xeacd),\n    database: register('database', 0xeace),\n    debugContinue: register('debug-continue', 0xeacf),\n    debugDisconnect: register('debug-disconnect', 0xead0),\n    debugPause: register('debug-pause', 0xead1),\n    debugRestart: register('debug-restart', 0xead2),\n    debugStart: register('debug-start', 0xead3),\n    debugStepInto: register('debug-step-into', 0xead4),\n    debugStepOut: register('debug-step-out', 0xead5),\n    debugStepOver: register('debug-step-over', 0xead6),\n    debugStop: register('debug-stop', 0xead7),\n    debug: register('debug', 0xead8),\n    deviceCameraVideo: register('device-camera-video', 0xead9),\n    deviceCamera: register('device-camera', 0xeada),\n    deviceMobile: register('device-mobile', 0xeadb),\n    diffAdded: register('diff-added', 0xeadc),\n    diffIgnored: register('diff-ignored', 0xeadd),\n    diffModified: register('diff-modified', 0xeade),\n    diffRemoved: register('diff-removed', 0xeadf),\n    diffRenamed: register('diff-renamed', 0xeae0),\n    diff: register('diff', 0xeae1),\n    diffSidebyside: register('diff-sidebyside', 0xeae1),\n    discard: register('discard', 0xeae2),\n    editorLayout: register('editor-layout', 0xeae3),\n    emptyWindow: register('empty-window', 0xeae4),\n    exclude: register('exclude', 0xeae5),\n    extensions: register('extensions', 0xeae6),\n    eyeClosed: register('eye-closed', 0xeae7),\n    fileBinary: register('file-binary', 0xeae8),\n    fileCode: register('file-code', 0xeae9),\n    fileMedia: register('file-media', 0xeaea),\n    filePdf: register('file-pdf', 0xeaeb),\n    fileSubmodule: register('file-submodule', 0xeaec),\n    fileSymlinkDirectory: register('file-symlink-directory', 0xeaed),\n    fileSymlinkFile: register('file-symlink-file', 0xeaee),\n    fileZip: register('file-zip', 0xeaef),\n    files: register('files', 0xeaf0),\n    filter: register('filter', 0xeaf1),\n    flame: register('flame', 0xeaf2),\n    foldDown: register('fold-down', 0xeaf3),\n    foldUp: register('fold-up', 0xeaf4),\n    fold: register('fold', 0xeaf5),\n    folderActive: register('folder-active', 0xeaf6),\n    folderOpened: register('folder-opened', 0xeaf7),\n    gear: register('gear', 0xeaf8),\n    gift: register('gift', 0xeaf9),\n    gistSecret: register('gist-secret', 0xeafa),\n    gist: register('gist', 0xeafb),\n    gitCommit: register('git-commit', 0xeafc),\n    gitCompare: register('git-compare', 0xeafd),\n    compareChanges: register('compare-changes', 0xeafd),\n    gitMerge: register('git-merge', 0xeafe),\n    githubAction: register('github-action', 0xeaff),\n    githubAlt: register('github-alt', 0xeb00),\n    globe: register('globe', 0xeb01),\n    grabber: register('grabber', 0xeb02),\n    graph: register('graph', 0xeb03),\n    gripper: register('gripper', 0xeb04),\n    heart: register('heart', 0xeb05),\n    home: register('home', 0xeb06),\n    horizontalRule: register('horizontal-rule', 0xeb07),\n    hubot: register('hubot', 0xeb08),\n    inbox: register('inbox', 0xeb09),\n    issueReopened: register('issue-reopened', 0xeb0b),\n    issues: register('issues', 0xeb0c),\n    italic: register('italic', 0xeb0d),\n    jersey: register('jersey', 0xeb0e),\n    json: register('json', 0xeb0f),\n    kebabVertical: register('kebab-vertical', 0xeb10),\n    key: register('key', 0xeb11),\n    law: register('law', 0xeb12),\n    lightbulbAutofix: register('lightbulb-autofix', 0xeb13),\n    linkExternal: register('link-external', 0xeb14),\n    link: register('link', 0xeb15),\n    listOrdered: register('list-ordered', 0xeb16),\n    listUnordered: register('list-unordered', 0xeb17),\n    liveShare: register('live-share', 0xeb18),\n    loading: register('loading', 0xeb19),\n    location: register('location', 0xeb1a),\n    mailRead: register('mail-read', 0xeb1b),\n    mail: register('mail', 0xeb1c),\n    markdown: register('markdown', 0xeb1d),\n    megaphone: register('megaphone', 0xeb1e),\n    mention: register('mention', 0xeb1f),\n    milestone: register('milestone', 0xeb20),\n    gitPullRequestMilestone: register('git-pull-request-milestone', 0xeb20),\n    mortarBoard: register('mortar-board', 0xeb21),\n    move: register('move', 0xeb22),\n    multipleWindows: register('multiple-windows', 0xeb23),\n    mute: register('mute', 0xeb24),\n    noNewline: register('no-newline', 0xeb25),\n    note: register('note', 0xeb26),\n    octoface: register('octoface', 0xeb27),\n    openPreview: register('open-preview', 0xeb28),\n    package: register('package', 0xeb29),\n    paintcan: register('paintcan', 0xeb2a),\n    pin: register('pin', 0xeb2b),\n    play: register('play', 0xeb2c),\n    run: register('run', 0xeb2c),\n    plug: register('plug', 0xeb2d),\n    preserveCase: register('preserve-case', 0xeb2e),\n    preview: register('preview', 0xeb2f),\n    project: register('project', 0xeb30),\n    pulse: register('pulse', 0xeb31),\n    question: register('question', 0xeb32),\n    quote: register('quote', 0xeb33),\n    radioTower: register('radio-tower', 0xeb34),\n    reactions: register('reactions', 0xeb35),\n    references: register('references', 0xeb36),\n    refresh: register('refresh', 0xeb37),\n    regex: register('regex', 0xeb38),\n    remoteExplorer: register('remote-explorer', 0xeb39),\n    remote: register('remote', 0xeb3a),\n    remove: register('remove', 0xeb3b),\n    replaceAll: register('replace-all', 0xeb3c),\n    replace: register('replace', 0xeb3d),\n    repoClone: register('repo-clone', 0xeb3e),\n    repoForcePush: register('repo-force-push', 0xeb3f),\n    repoPull: register('repo-pull', 0xeb40),\n    repoPush: register('repo-push', 0xeb41),\n    report: register('report', 0xeb42),\n    requestChanges: register('request-changes', 0xeb43),\n    rocket: register('rocket', 0xeb44),\n    rootFolderOpened: register('root-folder-opened', 0xeb45),\n    rootFolder: register('root-folder', 0xeb46),\n    rss: register('rss', 0xeb47),\n    ruby: register('ruby', 0xeb48),\n    saveAll: register('save-all', 0xeb49),\n    saveAs: register('save-as', 0xeb4a),\n    save: register('save', 0xeb4b),\n    screenFull: register('screen-full', 0xeb4c),\n    screenNormal: register('screen-normal', 0xeb4d),\n    searchStop: register('search-stop', 0xeb4e),\n    server: register('server', 0xeb50),\n    settingsGear: register('settings-gear', 0xeb51),\n    settings: register('settings', 0xeb52),\n    shield: register('shield', 0xeb53),\n    smiley: register('smiley', 0xeb54),\n    sortPrecedence: register('sort-precedence', 0xeb55),\n    splitHorizontal: register('split-horizontal', 0xeb56),\n    splitVertical: register('split-vertical', 0xeb57),\n    squirrel: register('squirrel', 0xeb58),\n    starFull: register('star-full', 0xeb59),\n    starHalf: register('star-half', 0xeb5a),\n    symbolClass: register('symbol-class', 0xeb5b),\n    symbolColor: register('symbol-color', 0xeb5c),\n    symbolConstant: register('symbol-constant', 0xeb5d),\n    symbolEnumMember: register('symbol-enum-member', 0xeb5e),\n    symbolField: register('symbol-field', 0xeb5f),\n    symbolFile: register('symbol-file', 0xeb60),\n    symbolInterface: register('symbol-interface', 0xeb61),\n    symbolKeyword: register('symbol-keyword', 0xeb62),\n    symbolMisc: register('symbol-misc', 0xeb63),\n    symbolOperator: register('symbol-operator', 0xeb64),\n    symbolProperty: register('symbol-property', 0xeb65),\n    wrench: register('wrench', 0xeb65),\n    wrenchSubaction: register('wrench-subaction', 0xeb65),\n    symbolSnippet: register('symbol-snippet', 0xeb66),\n    tasklist: register('tasklist', 0xeb67),\n    telescope: register('telescope', 0xeb68),\n    textSize: register('text-size', 0xeb69),\n    threeBars: register('three-bars', 0xeb6a),\n    thumbsdown: register('thumbsdown', 0xeb6b),\n    thumbsup: register('thumbsup', 0xeb6c),\n    tools: register('tools', 0xeb6d),\n    triangleDown: register('triangle-down', 0xeb6e),\n    triangleLeft: register('triangle-left', 0xeb6f),\n    triangleRight: register('triangle-right', 0xeb70),\n    triangleUp: register('triangle-up', 0xeb71),\n    twitter: register('twitter', 0xeb72),\n    unfold: register('unfold', 0xeb73),\n    unlock: register('unlock', 0xeb74),\n    unmute: register('unmute', 0xeb75),\n    unverified: register('unverified', 0xeb76),\n    verified: register('verified', 0xeb77),\n    versions: register('versions', 0xeb78),\n    vmActive: register('vm-active', 0xeb79),\n    vmOutline: register('vm-outline', 0xeb7a),\n    vmRunning: register('vm-running', 0xeb7b),\n    watch: register('watch', 0xeb7c),\n    whitespace: register('whitespace', 0xeb7d),\n    wholeWord: register('whole-word', 0xeb7e),\n    window: register('window', 0xeb7f),\n    wordWrap: register('word-wrap', 0xeb80),\n    zoomIn: register('zoom-in', 0xeb81),\n    zoomOut: register('zoom-out', 0xeb82),\n    listFilter: register('list-filter', 0xeb83),\n    listFlat: register('list-flat', 0xeb84),\n    listSelection: register('list-selection', 0xeb85),\n    selection: register('selection', 0xeb85),\n    listTree: register('list-tree', 0xeb86),\n    debugBreakpointFunctionUnverified: register('debug-breakpoint-function-unverified', 0xeb87),\n    debugBreakpointFunction: register('debug-breakpoint-function', 0xeb88),\n    debugBreakpointFunctionDisabled: register('debug-breakpoint-function-disabled', 0xeb88),\n    debugStackframeActive: register('debug-stackframe-active', 0xeb89),\n    circleSmallFilled: register('circle-small-filled', 0xeb8a),\n    debugStackframeDot: register('debug-stackframe-dot', 0xeb8a),\n    terminalDecorationMark: register('terminal-decoration-mark', 0xeb8a),\n    debugStackframe: register('debug-stackframe', 0xeb8b),\n    debugStackframeFocused: register('debug-stackframe-focused', 0xeb8b),\n    debugBreakpointUnsupported: register('debug-breakpoint-unsupported', 0xeb8c),\n    symbolString: register('symbol-string', 0xeb8d),\n    debugReverseContinue: register('debug-reverse-continue', 0xeb8e),\n    debugStepBack: register('debug-step-back', 0xeb8f),\n    debugRestartFrame: register('debug-restart-frame', 0xeb90),\n    debugAlt: register('debug-alt', 0xeb91),\n    callIncoming: register('call-incoming', 0xeb92),\n    callOutgoing: register('call-outgoing', 0xeb93),\n    menu: register('menu', 0xeb94),\n    expandAll: register('expand-all', 0xeb95),\n    feedback: register('feedback', 0xeb96),\n    gitPullRequestReviewer: register('git-pull-request-reviewer', 0xeb96),\n    groupByRefType: register('group-by-ref-type', 0xeb97),\n    ungroupByRefType: register('ungroup-by-ref-type', 0xeb98),\n    account: register('account', 0xeb99),\n    gitPullRequestAssignee: register('git-pull-request-assignee', 0xeb99),\n    bellDot: register('bell-dot', 0xeb9a),\n    debugConsole: register('debug-console', 0xeb9b),\n    library: register('library', 0xeb9c),\n    output: register('output', 0xeb9d),\n    runAll: register('run-all', 0xeb9e),\n    syncIgnored: register('sync-ignored', 0xeb9f),\n    pinned: register('pinned', 0xeba0),\n    githubInverted: register('github-inverted', 0xeba1),\n    serverProcess: register('server-process', 0xeba2),\n    serverEnvironment: register('server-environment', 0xeba3),\n    pass: register('pass', 0xeba4),\n    issueClosed: register('issue-closed', 0xeba4),\n    stopCircle: register('stop-circle', 0xeba5),\n    playCircle: register('play-circle', 0xeba6),\n    record: register('record', 0xeba7),\n    debugAltSmall: register('debug-alt-small', 0xeba8),\n    vmConnect: register('vm-connect', 0xeba9),\n    cloud: register('cloud', 0xebaa),\n    merge: register('merge', 0xebab),\n    export: register('export', 0xebac),\n    graphLeft: register('graph-left', 0xebad),\n    magnet: register('magnet', 0xebae),\n    notebook: register('notebook', 0xebaf),\n    redo: register('redo', 0xebb0),\n    checkAll: register('check-all', 0xebb1),\n    pinnedDirty: register('pinned-dirty', 0xebb2),\n    passFilled: register('pass-filled', 0xebb3),\n    circleLargeFilled: register('circle-large-filled', 0xebb4),\n    circleLarge: register('circle-large', 0xebb5),\n    circleLargeOutline: register('circle-large-outline', 0xebb5),\n    combine: register('combine', 0xebb6),\n    gather: register('gather', 0xebb6),\n    table: register('table', 0xebb7),\n    variableGroup: register('variable-group', 0xebb8),\n    typeHierarchy: register('type-hierarchy', 0xebb9),\n    typeHierarchySub: register('type-hierarchy-sub', 0xebba),\n    typeHierarchySuper: register('type-hierarchy-super', 0xebbb),\n    gitPullRequestCreate: register('git-pull-request-create', 0xebbc),\n    runAbove: register('run-above', 0xebbd),\n    runBelow: register('run-below', 0xebbe),\n    notebookTemplate: register('notebook-template', 0xebbf),\n    debugRerun: register('debug-rerun', 0xebc0),\n    workspaceTrusted: register('workspace-trusted', 0xebc1),\n    workspaceUntrusted: register('workspace-untrusted', 0xebc2),\n    workspaceUnknown: register('workspace-unknown', 0xebc3),\n    terminalCmd: register('terminal-cmd', 0xebc4),\n    terminalDebian: register('terminal-debian', 0xebc5),\n    terminalLinux: register('terminal-linux', 0xebc6),\n    terminalPowershell: register('terminal-powershell', 0xebc7),\n    terminalTmux: register('terminal-tmux', 0xebc8),\n    terminalUbuntu: register('terminal-ubuntu', 0xebc9),\n    terminalBash: register('terminal-bash', 0xebca),\n    arrowSwap: register('arrow-swap', 0xebcb),\n    copy: register('copy', 0xebcc),\n    personAdd: register('person-add', 0xebcd),\n    filterFilled: register('filter-filled', 0xebce),\n    wand: register('wand', 0xebcf),\n    debugLineByLine: register('debug-line-by-line', 0xebd0),\n    inspect: register('inspect', 0xebd1),\n    layers: register('layers', 0xebd2),\n    layersDot: register('layers-dot', 0xebd3),\n    layersActive: register('layers-active', 0xebd4),\n    compass: register('compass', 0xebd5),\n    compassDot: register('compass-dot', 0xebd6),\n    compassActive: register('compass-active', 0xebd7),\n    azure: register('azure', 0xebd8),\n    issueDraft: register('issue-draft', 0xebd9),\n    gitPullRequestClosed: register('git-pull-request-closed', 0xebda),\n    gitPullRequestDraft: register('git-pull-request-draft', 0xebdb),\n    debugAll: register('debug-all', 0xebdc),\n    debugCoverage: register('debug-coverage', 0xebdd),\n    runErrors: register('run-errors', 0xebde),\n    folderLibrary: register('folder-library', 0xebdf),\n    debugContinueSmall: register('debug-continue-small', 0xebe0),\n    beakerStop: register('beaker-stop', 0xebe1),\n    graphLine: register('graph-line', 0xebe2),\n    graphScatter: register('graph-scatter', 0xebe3),\n    pieChart: register('pie-chart', 0xebe4),\n    bracket: register('bracket', 0xeb0f),\n    bracketDot: register('bracket-dot', 0xebe5),\n    bracketError: register('bracket-error', 0xebe6),\n    lockSmall: register('lock-small', 0xebe7),\n    azureDevops: register('azure-devops', 0xebe8),\n    verifiedFilled: register('verified-filled', 0xebe9),\n    newline: register('newline', 0xebea),\n    layout: register('layout', 0xebeb),\n    layoutActivitybarLeft: register('layout-activitybar-left', 0xebec),\n    layoutActivitybarRight: register('layout-activitybar-right', 0xebed),\n    layoutPanelLeft: register('layout-panel-left', 0xebee),\n    layoutPanelCenter: register('layout-panel-center', 0xebef),\n    layoutPanelJustify: register('layout-panel-justify', 0xebf0),\n    layoutPanelRight: register('layout-panel-right', 0xebf1),\n    layoutPanel: register('layout-panel', 0xebf2),\n    layoutSidebarLeft: register('layout-sidebar-left', 0xebf3),\n    layoutSidebarRight: register('layout-sidebar-right', 0xebf4),\n    layoutStatusbar: register('layout-statusbar', 0xebf5),\n    layoutMenubar: register('layout-menubar', 0xebf6),\n    layoutCentered: register('layout-centered', 0xebf7),\n    target: register('target', 0xebf8),\n    indent: register('indent', 0xebf9),\n    recordSmall: register('record-small', 0xebfa),\n    errorSmall: register('error-small', 0xebfb),\n    terminalDecorationError: register('terminal-decoration-error', 0xebfb),\n    arrowCircleDown: register('arrow-circle-down', 0xebfc),\n    arrowCircleLeft: register('arrow-circle-left', 0xebfd),\n    arrowCircleRight: register('arrow-circle-right', 0xebfe),\n    arrowCircleUp: register('arrow-circle-up', 0xebff),\n    layoutSidebarRightOff: register('layout-sidebar-right-off', 0xec00),\n    layoutPanelOff: register('layout-panel-off', 0xec01),\n    layoutSidebarLeftOff: register('layout-sidebar-left-off', 0xec02),\n    blank: register('blank', 0xec03),\n    heartFilled: register('heart-filled', 0xec04),\n    map: register('map', 0xec05),\n    mapHorizontal: register('map-horizontal', 0xec05),\n    foldHorizontal: register('fold-horizontal', 0xec05),\n    mapFilled: register('map-filled', 0xec06),\n    mapHorizontalFilled: register('map-horizontal-filled', 0xec06),\n    foldHorizontalFilled: register('fold-horizontal-filled', 0xec06),\n    circleSmall: register('circle-small', 0xec07),\n    bellSlash: register('bell-slash', 0xec08),\n    bellSlashDot: register('bell-slash-dot', 0xec09),\n    commentUnresolved: register('comment-unresolved', 0xec0a),\n    gitPullRequestGoToChanges: register('git-pull-request-go-to-changes', 0xec0b),\n    gitPullRequestNewChanges: register('git-pull-request-new-changes', 0xec0c),\n    searchFuzzy: register('search-fuzzy', 0xec0d),\n    commentDraft: register('comment-draft', 0xec0e),\n    send: register('send', 0xec0f),\n    sparkle: register('sparkle', 0xec10),\n    insert: register('insert', 0xec11),\n    mic: register('mic', 0xec12),\n    thumbsdownFilled: register('thumbsdown-filled', 0xec13),\n    thumbsupFilled: register('thumbsup-filled', 0xec14),\n    coffee: register('coffee', 0xec15),\n    snake: register('snake', 0xec16),\n    game: register('game', 0xec17),\n    vr: register('vr', 0xec18),\n    chip: register('chip', 0xec19),\n    piano: register('piano', 0xec1a),\n    music: register('music', 0xec1b),\n    micFilled: register('mic-filled', 0xec1c),\n    repoFetch: register('repo-fetch', 0xec1d),\n    copilot: register('copilot', 0xec1e),\n    lightbulbSparkle: register('lightbulb-sparkle', 0xec1f),\n    robot: register('robot', 0xec20),\n    sparkleFilled: register('sparkle-filled', 0xec21),\n    diffSingle: register('diff-single', 0xec22),\n    diffMultiple: register('diff-multiple', 0xec23),\n    surroundWith: register('surround-with', 0xec24),\n    share: register('share', 0xec25),\n    gitStash: register('git-stash', 0xec26),\n    gitStashApply: register('git-stash-apply', 0xec27),\n    gitStashPop: register('git-stash-pop', 0xec28),\n    vscode: register('vscode', 0xec29),\n    vscodeInsiders: register('vscode-insiders', 0xec2a),\n    codeOss: register('code-oss', 0xec2b),\n    runCoverage: register('run-coverage', 0xec2c),\n    runAllCoverage: register('run-all-coverage', 0xec2d),\n    coverage: register('coverage', 0xec2e),\n    githubProject: register('github-project', 0xec2f),\n    mapVertical: register('map-vertical', 0xec30),\n    foldVertical: register('fold-vertical', 0xec30),\n    mapVerticalFilled: register('map-vertical-filled', 0xec31),\n    foldVerticalFilled: register('fold-vertical-filled', 0xec31),\n    goToSearch: register('go-to-search', 0xec32),\n    percentage: register('percentage', 0xec33),\n    sortPercentage: register('sort-percentage', 0xec33),\n    attach: register('attach', 0xec34),\n};\n","import { register } from './codiconsUtil.js';\nimport { codiconsLibrary } from './codiconsLibrary.js';\n/**\n * Derived icons, that could become separate icons.\n * These mappings should be moved into the mapping file in the vscode-codicons repo at some point.\n */\nexport const codiconsDerived = {\n    dialogError: register('dialog-error', 'error'),\n    dialogWarning: register('dialog-warning', 'warning'),\n    dialogInfo: register('dialog-info', 'info'),\n    dialogClose: register('dialog-close', 'close'),\n    treeItemExpanded: register('tree-item-expanded', 'chevron-down'), // collapsed is done with rotation\n    treeFilterOnTypeOn: register('tree-filter-on-type-on', 'list-filter'),\n    treeFilterOnTypeOff: register('tree-filter-on-type-off', 'list-selection'),\n    treeFilterClear: register('tree-filter-clear', 'close'),\n    treeItemLoading: register('tree-item-loading', 'loading'),\n    menuSelection: register('menu-selection', 'check'),\n    menuSubmenu: register('menu-submenu', 'chevron-right'),\n    menuBarMore: register('menubar-more', 'more'),\n    scrollbarButtonLeft: register('scrollbar-button-left', 'triangle-left'),\n    scrollbarButtonRight: register('scrollbar-button-right', 'triangle-right'),\n    scrollbarButtonUp: register('scrollbar-button-up', 'triangle-up'),\n    scrollbarButtonDown: register('scrollbar-button-down', 'triangle-down'),\n    toolBarMore: register('toolbar-more', 'more'),\n    quickInputBack: register('quick-input-back', 'arrow-left'),\n    dropDownButton: register('drop-down-button', 0xeab4),\n    symbolCustomColor: register('symbol-customcolor', 0xeb5c),\n    exportIcon: register('export', 0xebac),\n    workspaceUnspecified: register('workspace-unspecified', 0xebc3),\n    newLine: register('newline', 0xebea),\n    thumbsDownFilled: register('thumbsdown-filled', 0xec13),\n    thumbsUpFilled: register('thumbsup-filled', 0xec14),\n    gitFetch: register('git-fetch', 0xec1d),\n    lightbulbSparkleAutofix: register('lightbulb-sparkle-autofix', 0xec1f),\n    debugBreakpointPending: register('debug-breakpoint-pending', 0xebd9),\n};\n/**\n * The Codicon library is a set of default icons that are built-in in VS Code.\n *\n * In the product (outside of base) Codicons should only be used as defaults. In order to have all icons in VS Code\n * themeable, component should define new, UI component specific icons using `iconRegistry.registerIcon`.\n * In that call a Codicon can be named as default.\n */\nexport const Codicon = {\n    ...codiconsLibrary,\n    ...codiconsDerived\n};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Represents information about a specific difference between two sequences.\n */\nexport class DiffChange {\n    /**\n     * Constructs a new DiffChange with the given sequence information\n     * and content.\n     */\n    constructor(originalStart, originalLength, modifiedStart, modifiedLength) {\n        //Debug.Assert(originalLength > 0 || modifiedLength > 0, \"originalLength and modifiedLength cannot both be <= 0\");\n        this.originalStart = originalStart;\n        this.originalLength = originalLength;\n        this.modifiedStart = modifiedStart;\n        this.modifiedLength = modifiedLength;\n    }\n    /**\n     * The end point (exclusive) of the change in the original sequence.\n     */\n    getOriginalEnd() {\n        return this.originalStart + this.originalLength;\n    }\n    /**\n     * The end point (exclusive) of the change in the modified sequence.\n     */\n    getModifiedEnd() {\n        return this.modifiedStart + this.modifiedLength;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Given a function, returns a function that is only calling that function once.\n */\nexport function createSingleCallFunction(fn, fnDidRunCallback) {\n    const _this = this;\n    let didCall = false;\n    let result;\n    return function () {\n        if (didCall) {\n            return result;\n        }\n        didCall = true;\n        if (fnDidRunCallback) {\n            try {\n                result = fn.apply(_this, arguments);\n            }\n            finally {\n                fnDidRunCallback();\n            }\n        }\n        else {\n            result = fn.apply(_this, arguments);\n        }\n        return result;\n    };\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class Lazy {\n    constructor(executor) {\n        this.executor = executor;\n        this._didRun = false;\n    }\n    /**\n     * Get the wrapped value.\n     *\n     * This will force evaluation of the lazy value if it has not been resolved yet. Lazy values are only\n     * resolved once. `getValue` will re-throw exceptions that are hit while resolving the value\n     */\n    get value() {\n        if (!this._didRun) {\n            try {\n                this._value = this.executor();\n            }\n            catch (err) {\n                this._error = err;\n            }\n            finally {\n                this._didRun = true;\n            }\n        }\n        if (this._error) {\n            throw this._error;\n        }\n        return this._value;\n    }\n    /**\n     * Get the wrapped value without forcing evaluation.\n     */\n    get rawValue() { return this._value; }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nclass Node {\n    constructor(element) {\n        this.element = element;\n        this.next = Node.Undefined;\n        this.prev = Node.Undefined;\n    }\n}\nNode.Undefined = new Node(undefined);\nexport class LinkedList {\n    constructor() {\n        this._first = Node.Undefined;\n        this._last = Node.Undefined;\n        this._size = 0;\n    }\n    get size() {\n        return this._size;\n    }\n    isEmpty() {\n        return this._first === Node.Undefined;\n    }\n    clear() {\n        let node = this._first;\n        while (node !== Node.Undefined) {\n            const next = node.next;\n            node.prev = Node.Undefined;\n            node.next = Node.Undefined;\n            node = next;\n        }\n        this._first = Node.Undefined;\n        this._last = Node.Undefined;\n        this._size = 0;\n    }\n    unshift(element) {\n        return this._insert(element, false);\n    }\n    push(element) {\n        return this._insert(element, true);\n    }\n    _insert(element, atTheEnd) {\n        const newNode = new Node(element);\n        if (this._first === Node.Undefined) {\n            this._first = newNode;\n            this._last = newNode;\n        }\n        else if (atTheEnd) {\n            // push\n            const oldLast = this._last;\n            this._last = newNode;\n            newNode.prev = oldLast;\n            oldLast.next = newNode;\n        }\n        else {\n            // unshift\n            const oldFirst = this._first;\n            this._first = newNode;\n            newNode.next = oldFirst;\n            oldFirst.prev = newNode;\n        }\n        this._size += 1;\n        let didRemove = false;\n        return () => {\n            if (!didRemove) {\n                didRemove = true;\n                this._remove(newNode);\n            }\n        };\n    }\n    shift() {\n        if (this._first === Node.Undefined) {\n            return undefined;\n        }\n        else {\n            const res = this._first.element;\n            this._remove(this._first);\n            return res;\n        }\n    }\n    pop() {\n        if (this._last === Node.Undefined) {\n            return undefined;\n        }\n        else {\n            const res = this._last.element;\n            this._remove(this._last);\n            return res;\n        }\n    }\n    _remove(node) {\n        if (node.prev !== Node.Undefined && node.next !== Node.Undefined) {\n            // middle\n            const anchor = node.prev;\n            anchor.next = node.next;\n            node.next.prev = anchor;\n        }\n        else if (node.prev === Node.Undefined && node.next === Node.Undefined) {\n            // only node\n            this._first = Node.Undefined;\n            this._last = Node.Undefined;\n        }\n        else if (node.next === Node.Undefined) {\n            // last\n            this._last = this._last.prev;\n            this._last.next = Node.Undefined;\n        }\n        else if (node.prev === Node.Undefined) {\n            // first\n            this._first = this._first.next;\n            this._first.prev = Node.Undefined;\n        }\n        // done\n        this._size -= 1;\n    }\n    *[Symbol.iterator]() {\n        let node = this._first;\n        while (node !== Node.Undefined) {\n            yield node.element;\n            node = node.next;\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { isMacintosh, isWindows } from './platform.js';\nlet safeProcess;\n// Native sandbox environment\nconst vscodeGlobal = globalThis.vscode;\nif (typeof vscodeGlobal !== 'undefined' && typeof vscodeGlobal.process !== 'undefined') {\n    const sandboxProcess = vscodeGlobal.process;\n    safeProcess = {\n        get platform() { return sandboxProcess.platform; },\n        get arch() { return sandboxProcess.arch; },\n        get env() { return sandboxProcess.env; },\n        cwd() { return sandboxProcess.cwd(); }\n    };\n}\n// Native node.js environment\nelse if (typeof process !== 'undefined') {\n    safeProcess = {\n        get platform() { return process.platform; },\n        get arch() { return process.arch; },\n        get env() { return process.env; },\n        cwd() { return process.env['VSCODE_CWD'] || process.cwd(); }\n    };\n}\n// Web environment\nelse {\n    safeProcess = {\n        // Supported\n        get platform() { return isWindows ? 'win32' : isMacintosh ? 'darwin' : 'linux'; },\n        get arch() { return undefined; /* arch is undefined in web */ },\n        // Unsupported\n        get env() { return {}; },\n        cwd() { return '/'; }\n    };\n}\n/**\n * Provides safe access to the `cwd` property in node.js, sandboxed or web\n * environments.\n *\n * Note: in web, this property is hardcoded to be `/`.\n *\n * @skipMangle\n */\nexport const cwd = safeProcess.cwd;\n/**\n * Provides safe access to the `env` property in node.js, sandboxed or web\n * environments.\n *\n * Note: in web, this property is hardcoded to be `{}`.\n */\nexport const env = safeProcess.env;\n/**\n * Provides safe access to the `platform` property in node.js, sandboxed or web\n * environments.\n */\nexport const platform = safeProcess.platform;\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nconst hasPerformanceNow = (globalThis.performance && typeof globalThis.performance.now === 'function');\nexport class StopWatch {\n    static create(highResolution) {\n        return new StopWatch(highResolution);\n    }\n    constructor(highResolution) {\n        this._now = hasPerformanceNow && highResolution === false ? Date.now : globalThis.performance.now.bind(globalThis.performance);\n        this._startTime = this._now();\n        this._stopTime = -1;\n    }\n    stop() {\n        this._stopTime = this._now();\n    }\n    reset() {\n        this._startTime = this._now();\n        this._stopTime = -1;\n    }\n    elapsed() {\n        if (this._stopTime !== -1) {\n            return this._stopTime - this._startTime;\n        }\n        return this._now() - this._startTime;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport function toUint8(v) {\n    if (v < 0) {\n        return 0;\n    }\n    if (v > 255 /* Constants.MAX_UINT_8 */) {\n        return 255 /* Constants.MAX_UINT_8 */;\n    }\n    return v | 0;\n}\nexport function toUint32(v) {\n    if (v < 0) {\n        return 0;\n    }\n    if (v > 4294967295 /* Constants.MAX_UINT_32 */) {\n        return 4294967295 /* Constants.MAX_UINT_32 */;\n    }\n    return v | 0;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { BugIndicatingError } from '../../../base/common/errors.js';\nimport { OffsetRange } from './offsetRange.js';\nimport { Range } from './range.js';\nimport { findFirstIdxMonotonousOrArrLen, findLastIdxMonotonous, findLastMonotonous } from '../../../base/common/arraysFind.js';\n/**\n * A range of lines (1-based).\n */\nexport class LineRange {\n    static fromRangeInclusive(range) {\n        return new LineRange(range.startLineNumber, range.endLineNumber + 1);\n    }\n    /**\n     * @param lineRanges An array of sorted line ranges.\n     */\n    static joinMany(lineRanges) {\n        if (lineRanges.length === 0) {\n            return [];\n        }\n        let result = new LineRangeSet(lineRanges[0].slice());\n        for (let i = 1; i < lineRanges.length; i++) {\n            result = result.getUnion(new LineRangeSet(lineRanges[i].slice()));\n        }\n        return result.ranges;\n    }\n    static join(lineRanges) {\n        if (lineRanges.length === 0) {\n            throw new BugIndicatingError('lineRanges cannot be empty');\n        }\n        let startLineNumber = lineRanges[0].startLineNumber;\n        let endLineNumberExclusive = lineRanges[0].endLineNumberExclusive;\n        for (let i = 1; i < lineRanges.length; i++) {\n            startLineNumber = Math.min(startLineNumber, lineRanges[i].startLineNumber);\n            endLineNumberExclusive = Math.max(endLineNumberExclusive, lineRanges[i].endLineNumberExclusive);\n        }\n        return new LineRange(startLineNumber, endLineNumberExclusive);\n    }\n    static ofLength(startLineNumber, length) {\n        return new LineRange(startLineNumber, startLineNumber + length);\n    }\n    /**\n     * @internal\n     */\n    static deserialize(lineRange) {\n        return new LineRange(lineRange[0], lineRange[1]);\n    }\n    constructor(startLineNumber, endLineNumberExclusive) {\n        if (startLineNumber > endLineNumberExclusive) {\n            throw new BugIndicatingError(`startLineNumber ${startLineNumber} cannot be after endLineNumberExclusive ${endLineNumberExclusive}`);\n        }\n        this.startLineNumber = startLineNumber;\n        this.endLineNumberExclusive = endLineNumberExclusive;\n    }\n    /**\n     * Indicates if this line range contains the given line number.\n     */\n    contains(lineNumber) {\n        return this.startLineNumber <= lineNumber && lineNumber < this.endLineNumberExclusive;\n    }\n    /**\n     * Indicates if this line range is empty.\n     */\n    get isEmpty() {\n        return this.startLineNumber === this.endLineNumberExclusive;\n    }\n    /**\n     * Moves this line range by the given offset of line numbers.\n     */\n    delta(offset) {\n        return new LineRange(this.startLineNumber + offset, this.endLineNumberExclusive + offset);\n    }\n    deltaLength(offset) {\n        return new LineRange(this.startLineNumber, this.endLineNumberExclusive + offset);\n    }\n    /**\n     * The number of lines this line range spans.\n     */\n    get length() {\n        return this.endLineNumberExclusive - this.startLineNumber;\n    }\n    /**\n     * Creates a line range that combines this and the given line range.\n     */\n    join(other) {\n        return new LineRange(Math.min(this.startLineNumber, other.startLineNumber), Math.max(this.endLineNumberExclusive, other.endLineNumberExclusive));\n    }\n    toString() {\n        return `[${this.startLineNumber},${this.endLineNumberExclusive})`;\n    }\n    /**\n     * The resulting range is empty if the ranges do not intersect, but touch.\n     * If the ranges don't even touch, the result is undefined.\n     */\n    intersect(other) {\n        const startLineNumber = Math.max(this.startLineNumber, other.startLineNumber);\n        const endLineNumberExclusive = Math.min(this.endLineNumberExclusive, other.endLineNumberExclusive);\n        if (startLineNumber <= endLineNumberExclusive) {\n            return new LineRange(startLineNumber, endLineNumberExclusive);\n        }\n        return undefined;\n    }\n    intersectsStrict(other) {\n        return this.startLineNumber < other.endLineNumberExclusive && other.startLineNumber < this.endLineNumberExclusive;\n    }\n    overlapOrTouch(other) {\n        return this.startLineNumber <= other.endLineNumberExclusive && other.startLineNumber <= this.endLineNumberExclusive;\n    }\n    equals(b) {\n        return this.startLineNumber === b.startLineNumber && this.endLineNumberExclusive === b.endLineNumberExclusive;\n    }\n    toInclusiveRange() {\n        if (this.isEmpty) {\n            return null;\n        }\n        return new Range(this.startLineNumber, 1, this.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER);\n    }\n    /**\n     * @deprecated Using this function is discouraged because it might lead to bugs: The end position is not guaranteed to be a valid position!\n    */\n    toExclusiveRange() {\n        return new Range(this.startLineNumber, 1, this.endLineNumberExclusive, 1);\n    }\n    mapToLineArray(f) {\n        const result = [];\n        for (let lineNumber = this.startLineNumber; lineNumber < this.endLineNumberExclusive; lineNumber++) {\n            result.push(f(lineNumber));\n        }\n        return result;\n    }\n    forEach(f) {\n        for (let lineNumber = this.startLineNumber; lineNumber < this.endLineNumberExclusive; lineNumber++) {\n            f(lineNumber);\n        }\n    }\n    /**\n     * @internal\n     */\n    serialize() {\n        return [this.startLineNumber, this.endLineNumberExclusive];\n    }\n    includes(lineNumber) {\n        return this.startLineNumber <= lineNumber && lineNumber < this.endLineNumberExclusive;\n    }\n    /**\n     * Converts this 1-based line range to a 0-based offset range (subtracts 1!).\n     * @internal\n     */\n    toOffsetRange() {\n        return new OffsetRange(this.startLineNumber - 1, this.endLineNumberExclusive - 1);\n    }\n}\nexport class LineRangeSet {\n    constructor(\n    /**\n     * Sorted by start line number.\n     * No two line ranges are touching or intersecting.\n     */\n    _normalizedRanges = []) {\n        this._normalizedRanges = _normalizedRanges;\n    }\n    get ranges() {\n        return this._normalizedRanges;\n    }\n    addRange(range) {\n        if (range.length === 0) {\n            return;\n        }\n        // Idea: Find joinRange such that:\n        // replaceRange = _normalizedRanges.replaceRange(joinRange, range.joinAll(joinRange.map(idx => this._normalizedRanges[idx])))\n        // idx of first element that touches range or that is after range\n        const joinRangeStartIdx = findFirstIdxMonotonousOrArrLen(this._normalizedRanges, r => r.endLineNumberExclusive >= range.startLineNumber);\n        // idx of element after { last element that touches range or that is before range }\n        const joinRangeEndIdxExclusive = findLastIdxMonotonous(this._normalizedRanges, r => r.startLineNumber <= range.endLineNumberExclusive) + 1;\n        if (joinRangeStartIdx === joinRangeEndIdxExclusive) {\n            // If there is no element that touches range, then joinRangeStartIdx === joinRangeEndIdxExclusive and that value is the index of the element after range\n            this._normalizedRanges.splice(joinRangeStartIdx, 0, range);\n        }\n        else if (joinRangeStartIdx === joinRangeEndIdxExclusive - 1) {\n            // Else, there is an element that touches range and in this case it is both the first and last element. Thus we can replace it\n            const joinRange = this._normalizedRanges[joinRangeStartIdx];\n            this._normalizedRanges[joinRangeStartIdx] = joinRange.join(range);\n        }\n        else {\n            // First and last element are different - we need to replace the entire range\n            const joinRange = this._normalizedRanges[joinRangeStartIdx].join(this._normalizedRanges[joinRangeEndIdxExclusive - 1]).join(range);\n            this._normalizedRanges.splice(joinRangeStartIdx, joinRangeEndIdxExclusive - joinRangeStartIdx, joinRange);\n        }\n    }\n    contains(lineNumber) {\n        const rangeThatStartsBeforeEnd = findLastMonotonous(this._normalizedRanges, r => r.startLineNumber <= lineNumber);\n        return !!rangeThatStartsBeforeEnd && rangeThatStartsBeforeEnd.endLineNumberExclusive > lineNumber;\n    }\n    intersects(range) {\n        const rangeThatStartsBeforeEnd = findLastMonotonous(this._normalizedRanges, r => r.startLineNumber < range.endLineNumberExclusive);\n        return !!rangeThatStartsBeforeEnd && rangeThatStartsBeforeEnd.endLineNumberExclusive > range.startLineNumber;\n    }\n    getUnion(other) {\n        if (this._normalizedRanges.length === 0) {\n            return other;\n        }\n        if (other._normalizedRanges.length === 0) {\n            return this;\n        }\n        const result = [];\n        let i1 = 0;\n        let i2 = 0;\n        let current = null;\n        while (i1 < this._normalizedRanges.length || i2 < other._normalizedRanges.length) {\n            let next = null;\n            if (i1 < this._normalizedRanges.length && i2 < other._normalizedRanges.length) {\n                const lineRange1 = this._normalizedRanges[i1];\n                const lineRange2 = other._normalizedRanges[i2];\n                if (lineRange1.startLineNumber < lineRange2.startLineNumber) {\n                    next = lineRange1;\n                    i1++;\n                }\n                else {\n                    next = lineRange2;\n                    i2++;\n                }\n            }\n            else if (i1 < this._normalizedRanges.length) {\n                next = this._normalizedRanges[i1];\n                i1++;\n            }\n            else {\n                next = other._normalizedRanges[i2];\n                i2++;\n            }\n            if (current === null) {\n                current = next;\n            }\n            else {\n                if (current.endLineNumberExclusive >= next.startLineNumber) {\n                    // merge\n                    current = new LineRange(current.startLineNumber, Math.max(current.endLineNumberExclusive, next.endLineNumberExclusive));\n                }\n                else {\n                    // push\n                    result.push(current);\n                    current = next;\n                }\n            }\n        }\n        if (current !== null) {\n            result.push(current);\n        }\n        return new LineRangeSet(result);\n    }\n    /**\n     * Subtracts all ranges in this set from `range` and returns the result.\n     */\n    subtractFrom(range) {\n        // idx of first element that touches range or that is after range\n        const joinRangeStartIdx = findFirstIdxMonotonousOrArrLen(this._normalizedRanges, r => r.endLineNumberExclusive >= range.startLineNumber);\n        // idx of element after { last element that touches range or that is before range }\n        const joinRangeEndIdxExclusive = findLastIdxMonotonous(this._normalizedRanges, r => r.startLineNumber <= range.endLineNumberExclusive) + 1;\n        if (joinRangeStartIdx === joinRangeEndIdxExclusive) {\n            return new LineRangeSet([range]);\n        }\n        const result = [];\n        let startLineNumber = range.startLineNumber;\n        for (let i = joinRangeStartIdx; i < joinRangeEndIdxExclusive; i++) {\n            const r = this._normalizedRanges[i];\n            if (r.startLineNumber > startLineNumber) {\n                result.push(new LineRange(startLineNumber, r.startLineNumber));\n            }\n            startLineNumber = r.endLineNumberExclusive;\n        }\n        if (startLineNumber < range.endLineNumberExclusive) {\n            result.push(new LineRange(startLineNumber, range.endLineNumberExclusive));\n        }\n        return new LineRangeSet(result);\n    }\n    toString() {\n        return this._normalizedRanges.map(r => r.toString()).join(', ');\n    }\n    getIntersection(other) {\n        const result = [];\n        let i1 = 0;\n        let i2 = 0;\n        while (i1 < this._normalizedRanges.length && i2 < other._normalizedRanges.length) {\n            const r1 = this._normalizedRanges[i1];\n            const r2 = other._normalizedRanges[i2];\n            const i = r1.intersect(r2);\n            if (i && !i.isEmpty) {\n                result.push(i);\n            }\n            if (r1.endLineNumberExclusive < r2.endLineNumberExclusive) {\n                i1++;\n            }\n            else {\n                i2++;\n            }\n        }\n        return new LineRangeSet(result);\n    }\n    getWithDelta(value) {\n        return new LineRangeSet(this._normalizedRanges.map(r => r.delta(value)));\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * A position in the editor.\n */\nexport class Position {\n    constructor(lineNumber, column) {\n        this.lineNumber = lineNumber;\n        this.column = column;\n    }\n    /**\n     * Create a new position from this position.\n     *\n     * @param newLineNumber new line number\n     * @param newColumn new column\n     */\n    with(newLineNumber = this.lineNumber, newColumn = this.column) {\n        if (newLineNumber === this.lineNumber && newColumn === this.column) {\n            return this;\n        }\n        else {\n            return new Position(newLineNumber, newColumn);\n        }\n    }\n    /**\n     * Derive a new position from this position.\n     *\n     * @param deltaLineNumber line number delta\n     * @param deltaColumn column delta\n     */\n    delta(deltaLineNumber = 0, deltaColumn = 0) {\n        return this.with(this.lineNumber + deltaLineNumber, this.column + deltaColumn);\n    }\n    /**\n     * Test if this position equals other position\n     */\n    equals(other) {\n        return Position.equals(this, other);\n    }\n    /**\n     * Test if position `a` equals position `b`\n     */\n    static equals(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        return (!!a &&\n            !!b &&\n            a.lineNumber === b.lineNumber &&\n            a.column === b.column);\n    }\n    /**\n     * Test if this position is before other position.\n     * If the two positions are equal, the result will be false.\n     */\n    isBefore(other) {\n        return Position.isBefore(this, other);\n    }\n    /**\n     * Test if position `a` is before position `b`.\n     * If the two positions are equal, the result will be false.\n     */\n    static isBefore(a, b) {\n        if (a.lineNumber < b.lineNumber) {\n            return true;\n        }\n        if (b.lineNumber < a.lineNumber) {\n            return false;\n        }\n        return a.column < b.column;\n    }\n    /**\n     * Test if this position is before other position.\n     * If the two positions are equal, the result will be true.\n     */\n    isBeforeOrEqual(other) {\n        return Position.isBeforeOrEqual(this, other);\n    }\n    /**\n     * Test if position `a` is before position `b`.\n     * If the two positions are equal, the result will be true.\n     */\n    static isBeforeOrEqual(a, b) {\n        if (a.lineNumber < b.lineNumber) {\n            return true;\n        }\n        if (b.lineNumber < a.lineNumber) {\n            return false;\n        }\n        return a.column <= b.column;\n    }\n    /**\n     * A function that compares positions, useful for sorting\n     */\n    static compare(a, b) {\n        const aLineNumber = a.lineNumber | 0;\n        const bLineNumber = b.lineNumber | 0;\n        if (aLineNumber === bLineNumber) {\n            const aColumn = a.column | 0;\n            const bColumn = b.column | 0;\n            return aColumn - bColumn;\n        }\n        return aLineNumber - bLineNumber;\n    }\n    /**\n     * Clone this position.\n     */\n    clone() {\n        return new Position(this.lineNumber, this.column);\n    }\n    /**\n     * Convert to a human-readable representation.\n     */\n    toString() {\n        return '(' + this.lineNumber + ',' + this.column + ')';\n    }\n    // ---\n    /**\n     * Create a `Position` from an `IPosition`.\n     */\n    static lift(pos) {\n        return new Position(pos.lineNumber, pos.column);\n    }\n    /**\n     * Test if `obj` is an `IPosition`.\n     */\n    static isIPosition(obj) {\n        return (obj\n            && (typeof obj.lineNumber === 'number')\n            && (typeof obj.column === 'number'));\n    }\n    toJSON() {\n        return {\n            lineNumber: this.lineNumber,\n            column: this.column\n        };\n    }\n}\n","import { OffsetRange } from './offsetRange.js';\nimport { TextLength } from './textLength.js';\nexport class PositionOffsetTransformer {\n    constructor(text) {\n        this.text = text;\n        this.lineStartOffsetByLineIdx = [];\n        this.lineStartOffsetByLineIdx.push(0);\n        for (let i = 0; i < text.length; i++) {\n            if (text.charAt(i) === '\\n') {\n                this.lineStartOffsetByLineIdx.push(i + 1);\n            }\n        }\n    }\n    getOffset(position) {\n        return this.lineStartOffsetByLineIdx[position.lineNumber - 1] + position.column - 1;\n    }\n    getOffsetRange(range) {\n        return new OffsetRange(this.getOffset(range.getStartPosition()), this.getOffset(range.getEndPosition()));\n    }\n    get textLength() {\n        const lineIdx = this.lineStartOffsetByLineIdx.length - 1;\n        return new TextLength(lineIdx, this.text.length - this.lineStartOffsetByLineIdx[lineIdx]);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from './position.js';\n/**\n * A range in the editor. (startLineNumber,startColumn) is <= (endLineNumber,endColumn)\n */\nexport class Range {\n    constructor(startLineNumber, startColumn, endLineNumber, endColumn) {\n        if ((startLineNumber > endLineNumber) || (startLineNumber === endLineNumber && startColumn > endColumn)) {\n            this.startLineNumber = endLineNumber;\n            this.startColumn = endColumn;\n            this.endLineNumber = startLineNumber;\n            this.endColumn = startColumn;\n        }\n        else {\n            this.startLineNumber = startLineNumber;\n            this.startColumn = startColumn;\n            this.endLineNumber = endLineNumber;\n            this.endColumn = endColumn;\n        }\n    }\n    /**\n     * Test if this range is empty.\n     */\n    isEmpty() {\n        return Range.isEmpty(this);\n    }\n    /**\n     * Test if `range` is empty.\n     */\n    static isEmpty(range) {\n        return (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn);\n    }\n    /**\n     * Test if position is in this range. If the position is at the edges, will return true.\n     */\n    containsPosition(position) {\n        return Range.containsPosition(this, position);\n    }\n    /**\n     * Test if `position` is in `range`. If the position is at the edges, will return true.\n     */\n    static containsPosition(range, position) {\n        if (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {\n            return false;\n        }\n        if (position.lineNumber === range.startLineNumber && position.column < range.startColumn) {\n            return false;\n        }\n        if (position.lineNumber === range.endLineNumber && position.column > range.endColumn) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Test if `position` is in `range`. If the position is at the edges, will return false.\n     * @internal\n     */\n    static strictContainsPosition(range, position) {\n        if (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {\n            return false;\n        }\n        if (position.lineNumber === range.startLineNumber && position.column <= range.startColumn) {\n            return false;\n        }\n        if (position.lineNumber === range.endLineNumber && position.column >= range.endColumn) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Test if range is in this range. If the range is equal to this range, will return true.\n     */\n    containsRange(range) {\n        return Range.containsRange(this, range);\n    }\n    /**\n     * Test if `otherRange` is in `range`. If the ranges are equal, will return true.\n     */\n    static containsRange(range, otherRange) {\n        if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\n            return false;\n        }\n        if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\n            return false;\n        }\n        if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn < range.startColumn) {\n            return false;\n        }\n        if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn > range.endColumn) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Test if `range` is strictly in this range. `range` must start after and end before this range for the result to be true.\n     */\n    strictContainsRange(range) {\n        return Range.strictContainsRange(this, range);\n    }\n    /**\n     * Test if `otherRange` is strictly in `range` (must start after, and end before). If the ranges are equal, will return false.\n     */\n    static strictContainsRange(range, otherRange) {\n        if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\n            return false;\n        }\n        if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\n            return false;\n        }\n        if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn <= range.startColumn) {\n            return false;\n        }\n        if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn >= range.endColumn) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * A reunion of the two ranges.\n     * The smallest position will be used as the start point, and the largest one as the end point.\n     */\n    plusRange(range) {\n        return Range.plusRange(this, range);\n    }\n    /**\n     * A reunion of the two ranges.\n     * The smallest position will be used as the start point, and the largest one as the end point.\n     */\n    static plusRange(a, b) {\n        let startLineNumber;\n        let startColumn;\n        let endLineNumber;\n        let endColumn;\n        if (b.startLineNumber < a.startLineNumber) {\n            startLineNumber = b.startLineNumber;\n            startColumn = b.startColumn;\n        }\n        else if (b.startLineNumber === a.startLineNumber) {\n            startLineNumber = b.startLineNumber;\n            startColumn = Math.min(b.startColumn, a.startColumn);\n        }\n        else {\n            startLineNumber = a.startLineNumber;\n            startColumn = a.startColumn;\n        }\n        if (b.endLineNumber > a.endLineNumber) {\n            endLineNumber = b.endLineNumber;\n            endColumn = b.endColumn;\n        }\n        else if (b.endLineNumber === a.endLineNumber) {\n            endLineNumber = b.endLineNumber;\n            endColumn = Math.max(b.endColumn, a.endColumn);\n        }\n        else {\n            endLineNumber = a.endLineNumber;\n            endColumn = a.endColumn;\n        }\n        return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n    }\n    /**\n     * A intersection of the two ranges.\n     */\n    intersectRanges(range) {\n        return Range.intersectRanges(this, range);\n    }\n    /**\n     * A intersection of the two ranges.\n     */\n    static intersectRanges(a, b) {\n        let resultStartLineNumber = a.startLineNumber;\n        let resultStartColumn = a.startColumn;\n        let resultEndLineNumber = a.endLineNumber;\n        let resultEndColumn = a.endColumn;\n        const otherStartLineNumber = b.startLineNumber;\n        const otherStartColumn = b.startColumn;\n        const otherEndLineNumber = b.endLineNumber;\n        const otherEndColumn = b.endColumn;\n        if (resultStartLineNumber < otherStartLineNumber) {\n            resultStartLineNumber = otherStartLineNumber;\n            resultStartColumn = otherStartColumn;\n        }\n        else if (resultStartLineNumber === otherStartLineNumber) {\n            resultStartColumn = Math.max(resultStartColumn, otherStartColumn);\n        }\n        if (resultEndLineNumber > otherEndLineNumber) {\n            resultEndLineNumber = otherEndLineNumber;\n            resultEndColumn = otherEndColumn;\n        }\n        else if (resultEndLineNumber === otherEndLineNumber) {\n            resultEndColumn = Math.min(resultEndColumn, otherEndColumn);\n        }\n        // Check if selection is now empty\n        if (resultStartLineNumber > resultEndLineNumber) {\n            return null;\n        }\n        if (resultStartLineNumber === resultEndLineNumber && resultStartColumn > resultEndColumn) {\n            return null;\n        }\n        return new Range(resultStartLineNumber, resultStartColumn, resultEndLineNumber, resultEndColumn);\n    }\n    /**\n     * Test if this range equals other.\n     */\n    equalsRange(other) {\n        return Range.equalsRange(this, other);\n    }\n    /**\n     * Test if range `a` equals `b`.\n     */\n    static equalsRange(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        return (!!a &&\n            !!b &&\n            a.startLineNumber === b.startLineNumber &&\n            a.startColumn === b.startColumn &&\n            a.endLineNumber === b.endLineNumber &&\n            a.endColumn === b.endColumn);\n    }\n    /**\n     * Return the end position (which will be after or equal to the start position)\n     */\n    getEndPosition() {\n        return Range.getEndPosition(this);\n    }\n    /**\n     * Return the end position (which will be after or equal to the start position)\n     */\n    static getEndPosition(range) {\n        return new Position(range.endLineNumber, range.endColumn);\n    }\n    /**\n     * Return the start position (which will be before or equal to the end position)\n     */\n    getStartPosition() {\n        return Range.getStartPosition(this);\n    }\n    /**\n     * Return the start position (which will be before or equal to the end position)\n     */\n    static getStartPosition(range) {\n        return new Position(range.startLineNumber, range.startColumn);\n    }\n    /**\n     * Transform to a user presentable string representation.\n     */\n    toString() {\n        return '[' + this.startLineNumber + ',' + this.startColumn + ' -> ' + this.endLineNumber + ',' + this.endColumn + ']';\n    }\n    /**\n     * Create a new range using this range's start position, and using endLineNumber and endColumn as the end position.\n     */\n    setEndPosition(endLineNumber, endColumn) {\n        return new Range(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\n    }\n    /**\n     * Create a new range using this range's end position, and using startLineNumber and startColumn as the start position.\n     */\n    setStartPosition(startLineNumber, startColumn) {\n        return new Range(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\n    }\n    /**\n     * Create a new empty range using this range's start position.\n     */\n    collapseToStart() {\n        return Range.collapseToStart(this);\n    }\n    /**\n     * Create a new empty range using this range's start position.\n     */\n    static collapseToStart(range) {\n        return new Range(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);\n    }\n    /**\n     * Create a new empty range using this range's end position.\n     */\n    collapseToEnd() {\n        return Range.collapseToEnd(this);\n    }\n    /**\n     * Create a new empty range using this range's end position.\n     */\n    static collapseToEnd(range) {\n        return new Range(range.endLineNumber, range.endColumn, range.endLineNumber, range.endColumn);\n    }\n    /**\n     * Moves the range by the given amount of lines.\n     */\n    delta(lineCount) {\n        return new Range(this.startLineNumber + lineCount, this.startColumn, this.endLineNumber + lineCount, this.endColumn);\n    }\n    // ---\n    static fromPositions(start, end = start) {\n        return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n    }\n    static lift(range) {\n        if (!range) {\n            return null;\n        }\n        return new Range(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n    }\n    /**\n     * Test if `obj` is an `IRange`.\n     */\n    static isIRange(obj) {\n        return (obj\n            && (typeof obj.startLineNumber === 'number')\n            && (typeof obj.startColumn === 'number')\n            && (typeof obj.endLineNumber === 'number')\n            && (typeof obj.endColumn === 'number'));\n    }\n    /**\n     * Test if the two ranges are touching in any way.\n     */\n    static areIntersectingOrTouching(a, b) {\n        // Check if `a` is before `b`\n        if (a.endLineNumber < b.startLineNumber || (a.endLineNumber === b.startLineNumber && a.endColumn < b.startColumn)) {\n            return false;\n        }\n        // Check if `b` is before `a`\n        if (b.endLineNumber < a.startLineNumber || (b.endLineNumber === a.startLineNumber && b.endColumn < a.startColumn)) {\n            return false;\n        }\n        // These ranges must intersect\n        return true;\n    }\n    /**\n     * Test if the two ranges are intersecting. If the ranges are touching it returns true.\n     */\n    static areIntersecting(a, b) {\n        // Check if `a` is before `b`\n        if (a.endLineNumber < b.startLineNumber || (a.endLineNumber === b.startLineNumber && a.endColumn <= b.startColumn)) {\n            return false;\n        }\n        // Check if `b` is before `a`\n        if (b.endLineNumber < a.startLineNumber || (b.endLineNumber === a.startLineNumber && b.endColumn <= a.startColumn)) {\n            return false;\n        }\n        // These ranges must intersect\n        return true;\n    }\n    /**\n     * A function that compares ranges, useful for sorting ranges\n     * It will first compare ranges on the startPosition and then on the endPosition\n     */\n    static compareRangesUsingStarts(a, b) {\n        if (a && b) {\n            const aStartLineNumber = a.startLineNumber | 0;\n            const bStartLineNumber = b.startLineNumber | 0;\n            if (aStartLineNumber === bStartLineNumber) {\n                const aStartColumn = a.startColumn | 0;\n                const bStartColumn = b.startColumn | 0;\n                if (aStartColumn === bStartColumn) {\n                    const aEndLineNumber = a.endLineNumber | 0;\n                    const bEndLineNumber = b.endLineNumber | 0;\n                    if (aEndLineNumber === bEndLineNumber) {\n                        const aEndColumn = a.endColumn | 0;\n                        const bEndColumn = b.endColumn | 0;\n                        return aEndColumn - bEndColumn;\n                    }\n                    return aEndLineNumber - bEndLineNumber;\n                }\n                return aStartColumn - bStartColumn;\n            }\n            return aStartLineNumber - bStartLineNumber;\n        }\n        const aExists = (a ? 1 : 0);\n        const bExists = (b ? 1 : 0);\n        return aExists - bExists;\n    }\n    /**\n     * A function that compares ranges, useful for sorting ranges\n     * It will first compare ranges on the endPosition and then on the startPosition\n     */\n    static compareRangesUsingEnds(a, b) {\n        if (a.endLineNumber === b.endLineNumber) {\n            if (a.endColumn === b.endColumn) {\n                if (a.startLineNumber === b.startLineNumber) {\n                    return a.startColumn - b.startColumn;\n                }\n                return a.startLineNumber - b.startLineNumber;\n            }\n            return a.endColumn - b.endColumn;\n        }\n        return a.endLineNumber - b.endLineNumber;\n    }\n    /**\n     * Test if the range spans multiple lines.\n     */\n    static spansMultipleLines(range) {\n        return range.endLineNumber > range.startLineNumber;\n    }\n    toJSON() {\n        return this;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from './position.js';\nimport { Range } from './range.js';\n/**\n * A selection in the editor.\n * The selection is a range that has an orientation.\n */\nexport class Selection extends Range {\n    constructor(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn) {\n        super(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn);\n        this.selectionStartLineNumber = selectionStartLineNumber;\n        this.selectionStartColumn = selectionStartColumn;\n        this.positionLineNumber = positionLineNumber;\n        this.positionColumn = positionColumn;\n    }\n    /**\n     * Transform to a human-readable representation.\n     */\n    toString() {\n        return '[' + this.selectionStartLineNumber + ',' + this.selectionStartColumn + ' -> ' + this.positionLineNumber + ',' + this.positionColumn + ']';\n    }\n    /**\n     * Test if equals other selection.\n     */\n    equalsSelection(other) {\n        return (Selection.selectionsEqual(this, other));\n    }\n    /**\n     * Test if the two selections are equal.\n     */\n    static selectionsEqual(a, b) {\n        return (a.selectionStartLineNumber === b.selectionStartLineNumber &&\n            a.selectionStartColumn === b.selectionStartColumn &&\n            a.positionLineNumber === b.positionLineNumber &&\n            a.positionColumn === b.positionColumn);\n    }\n    /**\n     * Get directions (LTR or RTL).\n     */\n    getDirection() {\n        if (this.selectionStartLineNumber === this.startLineNumber && this.selectionStartColumn === this.startColumn) {\n            return 0 /* SelectionDirection.LTR */;\n        }\n        return 1 /* SelectionDirection.RTL */;\n    }\n    /**\n     * Create a new selection with a different `positionLineNumber` and `positionColumn`.\n     */\n    setEndPosition(endLineNumber, endColumn) {\n        if (this.getDirection() === 0 /* SelectionDirection.LTR */) {\n            return new Selection(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\n        }\n        return new Selection(endLineNumber, endColumn, this.startLineNumber, this.startColumn);\n    }\n    /**\n     * Get the position at `positionLineNumber` and `positionColumn`.\n     */\n    getPosition() {\n        return new Position(this.positionLineNumber, this.positionColumn);\n    }\n    /**\n     * Get the position at the start of the selection.\n    */\n    getSelectionStart() {\n        return new Position(this.selectionStartLineNumber, this.selectionStartColumn);\n    }\n    /**\n     * Create a new selection with a different `selectionStartLineNumber` and `selectionStartColumn`.\n     */\n    setStartPosition(startLineNumber, startColumn) {\n        if (this.getDirection() === 0 /* SelectionDirection.LTR */) {\n            return new Selection(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\n        }\n        return new Selection(this.endLineNumber, this.endColumn, startLineNumber, startColumn);\n    }\n    // ----\n    /**\n     * Create a `Selection` from one or two positions\n     */\n    static fromPositions(start, end = start) {\n        return new Selection(start.lineNumber, start.column, end.lineNumber, end.column);\n    }\n    /**\n     * Creates a `Selection` from a range, given a direction.\n     */\n    static fromRange(range, direction) {\n        if (direction === 0 /* SelectionDirection.LTR */) {\n            return new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n        }\n        else {\n            return new Selection(range.endLineNumber, range.endColumn, range.startLineNumber, range.startColumn);\n        }\n    }\n    /**\n     * Create a `Selection` from an `ISelection`.\n     */\n    static liftSelection(sel) {\n        return new Selection(sel.selectionStartLineNumber, sel.selectionStartColumn, sel.positionLineNumber, sel.positionColumn);\n    }\n    /**\n     * `a` equals `b`.\n     */\n    static selectionsArrEqual(a, b) {\n        if (a && !b || !a && b) {\n            return false;\n        }\n        if (!a && !b) {\n            return true;\n        }\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (let i = 0, len = a.length; i < len; i++) {\n            if (!this.selectionsEqual(a[i], b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Test if `obj` is an `ISelection`.\n     */\n    static isISelection(obj) {\n        return (obj\n            && (typeof obj.selectionStartLineNumber === 'number')\n            && (typeof obj.selectionStartColumn === 'number')\n            && (typeof obj.positionLineNumber === 'number')\n            && (typeof obj.positionColumn === 'number'));\n    }\n    /**\n     * Create with a direction.\n     */\n    static createWithDirection(startLineNumber, startColumn, endLineNumber, endColumn, direction) {\n        if (direction === 0 /* SelectionDirection.LTR */) {\n            return new Selection(startLineNumber, startColumn, endLineNumber, endColumn);\n        }\n        return new Selection(endLineNumber, endColumn, startLineNumber, startColumn);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from './position.js';\nimport { Range } from './range.js';\n/**\n * Represents a non-negative length of text in terms of line and column count.\n*/\nexport class TextLength {\n    static betweenPositions(position1, position2) {\n        if (position1.lineNumber === position2.lineNumber) {\n            return new TextLength(0, position2.column - position1.column);\n        }\n        else {\n            return new TextLength(position2.lineNumber - position1.lineNumber, position2.column - 1);\n        }\n    }\n    static ofRange(range) {\n        return TextLength.betweenPositions(range.getStartPosition(), range.getEndPosition());\n    }\n    static ofText(text) {\n        let line = 0;\n        let column = 0;\n        for (const c of text) {\n            if (c === '\\n') {\n                line++;\n                column = 0;\n            }\n            else {\n                column++;\n            }\n        }\n        return new TextLength(line, column);\n    }\n    constructor(lineCount, columnCount) {\n        this.lineCount = lineCount;\n        this.columnCount = columnCount;\n    }\n    isGreaterThanOrEqualTo(other) {\n        if (this.lineCount !== other.lineCount) {\n            return this.lineCount > other.lineCount;\n        }\n        return this.columnCount >= other.columnCount;\n    }\n    createRange(startPosition) {\n        if (this.lineCount === 0) {\n            return new Range(startPosition.lineNumber, startPosition.column, startPosition.lineNumber, startPosition.column + this.columnCount);\n        }\n        else {\n            return new Range(startPosition.lineNumber, startPosition.column, startPosition.lineNumber + this.lineCount, this.columnCount + 1);\n        }\n    }\n    addToPosition(position) {\n        if (this.lineCount === 0) {\n            return new Position(position.lineNumber, position.column + this.columnCount);\n        }\n        else {\n            return new Position(position.lineNumber + this.lineCount, this.columnCount + 1);\n        }\n    }\n    toString() {\n        return `${this.lineCount},${this.columnCount}`;\n    }\n}\nTextLength.zero = new TextLength(0, 0);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { forEachAdjacent } from '../../../../../base/common/arrays.js';\nimport { BugIndicatingError } from '../../../../../base/common/errors.js';\nimport { OffsetRange } from '../../../core/offsetRange.js';\nexport class DiffAlgorithmResult {\n    static trivial(seq1, seq2) {\n        return new DiffAlgorithmResult([new SequenceDiff(OffsetRange.ofLength(seq1.length), OffsetRange.ofLength(seq2.length))], false);\n    }\n    static trivialTimedOut(seq1, seq2) {\n        return new DiffAlgorithmResult([new SequenceDiff(OffsetRange.ofLength(seq1.length), OffsetRange.ofLength(seq2.length))], true);\n    }\n    constructor(diffs, \n    /**\n     * Indicates if the time out was reached.\n     * In that case, the diffs might be an approximation and the user should be asked to rerun the diff with more time.\n     */\n    hitTimeout) {\n        this.diffs = diffs;\n        this.hitTimeout = hitTimeout;\n    }\n}\nexport class SequenceDiff {\n    static invert(sequenceDiffs, doc1Length) {\n        const result = [];\n        forEachAdjacent(sequenceDiffs, (a, b) => {\n            result.push(SequenceDiff.fromOffsetPairs(a ? a.getEndExclusives() : OffsetPair.zero, b ? b.getStarts() : new OffsetPair(doc1Length, (a ? a.seq2Range.endExclusive - a.seq1Range.endExclusive : 0) + doc1Length)));\n        });\n        return result;\n    }\n    static fromOffsetPairs(start, endExclusive) {\n        return new SequenceDiff(new OffsetRange(start.offset1, endExclusive.offset1), new OffsetRange(start.offset2, endExclusive.offset2));\n    }\n    constructor(seq1Range, seq2Range) {\n        this.seq1Range = seq1Range;\n        this.seq2Range = seq2Range;\n    }\n    swap() {\n        return new SequenceDiff(this.seq2Range, this.seq1Range);\n    }\n    toString() {\n        return `${this.seq1Range} <-> ${this.seq2Range}`;\n    }\n    join(other) {\n        return new SequenceDiff(this.seq1Range.join(other.seq1Range), this.seq2Range.join(other.seq2Range));\n    }\n    delta(offset) {\n        if (offset === 0) {\n            return this;\n        }\n        return new SequenceDiff(this.seq1Range.delta(offset), this.seq2Range.delta(offset));\n    }\n    deltaStart(offset) {\n        if (offset === 0) {\n            return this;\n        }\n        return new SequenceDiff(this.seq1Range.deltaStart(offset), this.seq2Range.deltaStart(offset));\n    }\n    deltaEnd(offset) {\n        if (offset === 0) {\n            return this;\n        }\n        return new SequenceDiff(this.seq1Range.deltaEnd(offset), this.seq2Range.deltaEnd(offset));\n    }\n    intersect(other) {\n        const i1 = this.seq1Range.intersect(other.seq1Range);\n        const i2 = this.seq2Range.intersect(other.seq2Range);\n        if (!i1 || !i2) {\n            return undefined;\n        }\n        return new SequenceDiff(i1, i2);\n    }\n    getStarts() {\n        return new OffsetPair(this.seq1Range.start, this.seq2Range.start);\n    }\n    getEndExclusives() {\n        return new OffsetPair(this.seq1Range.endExclusive, this.seq2Range.endExclusive);\n    }\n}\nexport class OffsetPair {\n    constructor(offset1, offset2) {\n        this.offset1 = offset1;\n        this.offset2 = offset2;\n    }\n    toString() {\n        return `${this.offset1} <-> ${this.offset2}`;\n    }\n    delta(offset) {\n        if (offset === 0) {\n            return this;\n        }\n        return new OffsetPair(this.offset1 + offset, this.offset2 + offset);\n    }\n    equals(other) {\n        return this.offset1 === other.offset1 && this.offset2 === other.offset2;\n    }\n}\nOffsetPair.zero = new OffsetPair(0, 0);\nOffsetPair.max = new OffsetPair(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);\nexport class InfiniteTimeout {\n    isValid() {\n        return true;\n    }\n}\nInfiniteTimeout.instance = new InfiniteTimeout();\nexport class DateTimeout {\n    constructor(timeout) {\n        this.timeout = timeout;\n        this.startTime = Date.now();\n        this.valid = true;\n        if (timeout <= 0) {\n            throw new BugIndicatingError('timeout must be positive');\n        }\n    }\n    // Recommendation: Set a log-point `{this.disable()}` in the body\n    isValid() {\n        const valid = Date.now() - this.startTime < this.timeout;\n        if (!valid && this.valid) {\n            this.valid = false; // timeout reached\n            // eslint-disable-next-line no-debugger\n            debugger; // WARNING: Most likely debugging caused the timeout. Call `this.disable()` to continue without timing out.\n        }\n        return this.valid;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class Array2D {\n    constructor(width, height) {\n        this.width = width;\n        this.height = height;\n        this.array = [];\n        this.array = new Array(width * height);\n    }\n    get(x, y) {\n        return this.array[x + y * this.width];\n    }\n    set(x, y, value) {\n        this.array[x + y * this.width] = value;\n    }\n}\nexport function isSpace(charCode) {\n    return charCode === 32 /* CharCode.Space */ || charCode === 9 /* CharCode.Tab */;\n}\nexport class LineRangeFragment {\n    static getKey(chr) {\n        let key = this.chrKeys.get(chr);\n        if (key === undefined) {\n            key = this.chrKeys.size;\n            this.chrKeys.set(chr, key);\n        }\n        return key;\n    }\n    constructor(range, lines, source) {\n        this.range = range;\n        this.lines = lines;\n        this.source = source;\n        this.histogram = [];\n        let counter = 0;\n        for (let i = range.startLineNumber - 1; i < range.endLineNumberExclusive - 1; i++) {\n            const line = lines[i];\n            for (let j = 0; j < line.length; j++) {\n                counter++;\n                const chr = line[j];\n                const key = LineRangeFragment.getKey(chr);\n                this.histogram[key] = (this.histogram[key] || 0) + 1;\n            }\n            counter++;\n            const key = LineRangeFragment.getKey('\\n');\n            this.histogram[key] = (this.histogram[key] || 0) + 1;\n        }\n        this.totalCount = counter;\n    }\n    computeSimilarity(other) {\n        var _a, _b;\n        let sumDifferences = 0;\n        const maxLength = Math.max(this.histogram.length, other.histogram.length);\n        for (let i = 0; i < maxLength; i++) {\n            sumDifferences += Math.abs(((_a = this.histogram[i]) !== null && _a !== void 0 ? _a : 0) - ((_b = other.histogram[i]) !== null && _b !== void 0 ? _b : 0));\n        }\n        return 1 - (sumDifferences / (this.totalCount + other.totalCount));\n    }\n}\nLineRangeFragment.chrKeys = new Map();\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { OffsetRange } from '../../../core/offsetRange.js';\nimport { SequenceDiff, InfiniteTimeout, DiffAlgorithmResult } from './diffAlgorithm.js';\nimport { Array2D } from '../utils.js';\n/**\n * A O(MN) diffing algorithm that supports a score function.\n * The algorithm can be improved by processing the 2d array diagonally.\n*/\nexport class DynamicProgrammingDiffing {\n    compute(sequence1, sequence2, timeout = InfiniteTimeout.instance, equalityScore) {\n        if (sequence1.length === 0 || sequence2.length === 0) {\n            return DiffAlgorithmResult.trivial(sequence1, sequence2);\n        }\n        /**\n         * lcsLengths.get(i, j): Length of the longest common subsequence of sequence1.substring(0, i + 1) and sequence2.substring(0, j + 1).\n         */\n        const lcsLengths = new Array2D(sequence1.length, sequence2.length);\n        const directions = new Array2D(sequence1.length, sequence2.length);\n        const lengths = new Array2D(sequence1.length, sequence2.length);\n        // ==== Initializing lcsLengths ====\n        for (let s1 = 0; s1 < sequence1.length; s1++) {\n            for (let s2 = 0; s2 < sequence2.length; s2++) {\n                if (!timeout.isValid()) {\n                    return DiffAlgorithmResult.trivialTimedOut(sequence1, sequence2);\n                }\n                const horizontalLen = s1 === 0 ? 0 : lcsLengths.get(s1 - 1, s2);\n                const verticalLen = s2 === 0 ? 0 : lcsLengths.get(s1, s2 - 1);\n                let extendedSeqScore;\n                if (sequence1.getElement(s1) === sequence2.getElement(s2)) {\n                    if (s1 === 0 || s2 === 0) {\n                        extendedSeqScore = 0;\n                    }\n                    else {\n                        extendedSeqScore = lcsLengths.get(s1 - 1, s2 - 1);\n                    }\n                    if (s1 > 0 && s2 > 0 && directions.get(s1 - 1, s2 - 1) === 3) {\n                        // Prefer consecutive diagonals\n                        extendedSeqScore += lengths.get(s1 - 1, s2 - 1);\n                    }\n                    extendedSeqScore += (equalityScore ? equalityScore(s1, s2) : 1);\n                }\n                else {\n                    extendedSeqScore = -1;\n                }\n                const newValue = Math.max(horizontalLen, verticalLen, extendedSeqScore);\n                if (newValue === extendedSeqScore) {\n                    // Prefer diagonals\n                    const prevLen = s1 > 0 && s2 > 0 ? lengths.get(s1 - 1, s2 - 1) : 0;\n                    lengths.set(s1, s2, prevLen + 1);\n                    directions.set(s1, s2, 3);\n                }\n                else if (newValue === horizontalLen) {\n                    lengths.set(s1, s2, 0);\n                    directions.set(s1, s2, 1);\n                }\n                else if (newValue === verticalLen) {\n                    lengths.set(s1, s2, 0);\n                    directions.set(s1, s2, 2);\n                }\n                lcsLengths.set(s1, s2, newValue);\n            }\n        }\n        // ==== Backtracking ====\n        const result = [];\n        let lastAligningPosS1 = sequence1.length;\n        let lastAligningPosS2 = sequence2.length;\n        function reportDecreasingAligningPositions(s1, s2) {\n            if (s1 + 1 !== lastAligningPosS1 || s2 + 1 !== lastAligningPosS2) {\n                result.push(new SequenceDiff(new OffsetRange(s1 + 1, lastAligningPosS1), new OffsetRange(s2 + 1, lastAligningPosS2)));\n            }\n            lastAligningPosS1 = s1;\n            lastAligningPosS2 = s2;\n        }\n        let s1 = sequence1.length - 1;\n        let s2 = sequence2.length - 1;\n        while (s1 >= 0 && s2 >= 0) {\n            if (directions.get(s1, s2) === 3) {\n                reportDecreasingAligningPositions(s1, s2);\n                s1--;\n                s2--;\n            }\n            else {\n                if (directions.get(s1, s2) === 1) {\n                    s1--;\n                }\n                else {\n                    s2--;\n                }\n            }\n        }\n        reportDecreasingAligningPositions(-1, -1);\n        result.reverse();\n        return new DiffAlgorithmResult(result, false);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { OffsetRange } from '../../../core/offsetRange.js';\nimport { DiffAlgorithmResult, InfiniteTimeout, SequenceDiff } from './diffAlgorithm.js';\n/**\n * An O(ND) diff algorithm that has a quadratic space worst-case complexity.\n*/\nexport class MyersDiffAlgorithm {\n    compute(seq1, seq2, timeout = InfiniteTimeout.instance) {\n        // These are common special cases.\n        // The early return improves performance dramatically.\n        if (seq1.length === 0 || seq2.length === 0) {\n            return DiffAlgorithmResult.trivial(seq1, seq2);\n        }\n        const seqX = seq1; // Text on the x axis\n        const seqY = seq2; // Text on the y axis\n        function getXAfterSnake(x, y) {\n            while (x < seqX.length && y < seqY.length && seqX.getElement(x) === seqY.getElement(y)) {\n                x++;\n                y++;\n            }\n            return x;\n        }\n        let d = 0;\n        // V[k]: X value of longest d-line that ends in diagonal k.\n        // d-line: path from (0,0) to (x,y) that uses exactly d non-diagonals.\n        // diagonal k: Set of points (x,y) with x-y = k.\n        // k=1 -> (1,0),(2,1)\n        const V = new FastInt32Array();\n        V.set(0, getXAfterSnake(0, 0));\n        const paths = new FastArrayNegativeIndices();\n        paths.set(0, V.get(0) === 0 ? null : new SnakePath(null, 0, 0, V.get(0)));\n        let k = 0;\n        loop: while (true) {\n            d++;\n            if (!timeout.isValid()) {\n                return DiffAlgorithmResult.trivialTimedOut(seqX, seqY);\n            }\n            // The paper has `for (k = -d; k <= d; k += 2)`, but we can ignore diagonals that cannot influence the result.\n            const lowerBound = -Math.min(d, seqY.length + (d % 2));\n            const upperBound = Math.min(d, seqX.length + (d % 2));\n            for (k = lowerBound; k <= upperBound; k += 2) {\n                let step = 0;\n                // We can use the X values of (d-1)-lines to compute X value of the longest d-lines.\n                const maxXofDLineTop = k === upperBound ? -1 : V.get(k + 1); // We take a vertical non-diagonal (add a symbol in seqX)\n                const maxXofDLineLeft = k === lowerBound ? -1 : V.get(k - 1) + 1; // We take a horizontal non-diagonal (+1 x) (delete a symbol in seqX)\n                step++;\n                const x = Math.min(Math.max(maxXofDLineTop, maxXofDLineLeft), seqX.length);\n                const y = x - k;\n                step++;\n                if (x > seqX.length || y > seqY.length) {\n                    // This diagonal is irrelevant for the result.\n                    // TODO: Don't pay the cost for this in the next iteration.\n                    continue;\n                }\n                const newMaxX = getXAfterSnake(x, y);\n                V.set(k, newMaxX);\n                const lastPath = x === maxXofDLineTop ? paths.get(k + 1) : paths.get(k - 1);\n                paths.set(k, newMaxX !== x ? new SnakePath(lastPath, x, y, newMaxX - x) : lastPath);\n                if (V.get(k) === seqX.length && V.get(k) - k === seqY.length) {\n                    break loop;\n                }\n            }\n        }\n        let path = paths.get(k);\n        const result = [];\n        let lastAligningPosS1 = seqX.length;\n        let lastAligningPosS2 = seqY.length;\n        while (true) {\n            const endX = path ? path.x + path.length : 0;\n            const endY = path ? path.y + path.length : 0;\n            if (endX !== lastAligningPosS1 || endY !== lastAligningPosS2) {\n                result.push(new SequenceDiff(new OffsetRange(endX, lastAligningPosS1), new OffsetRange(endY, lastAligningPosS2)));\n            }\n            if (!path) {\n                break;\n            }\n            lastAligningPosS1 = path.x;\n            lastAligningPosS2 = path.y;\n            path = path.prev;\n        }\n        result.reverse();\n        return new DiffAlgorithmResult(result, false);\n    }\n}\nclass SnakePath {\n    constructor(prev, x, y, length) {\n        this.prev = prev;\n        this.x = x;\n        this.y = y;\n        this.length = length;\n    }\n}\n/**\n * An array that supports fast negative indices.\n*/\nclass FastInt32Array {\n    constructor() {\n        this.positiveArr = new Int32Array(10);\n        this.negativeArr = new Int32Array(10);\n    }\n    get(idx) {\n        if (idx < 0) {\n            idx = -idx - 1;\n            return this.negativeArr[idx];\n        }\n        else {\n            return this.positiveArr[idx];\n        }\n    }\n    set(idx, value) {\n        if (idx < 0) {\n            idx = -idx - 1;\n            if (idx >= this.negativeArr.length) {\n                const arr = this.negativeArr;\n                this.negativeArr = new Int32Array(arr.length * 2);\n                this.negativeArr.set(arr);\n            }\n            this.negativeArr[idx] = value;\n        }\n        else {\n            if (idx >= this.positiveArr.length) {\n                const arr = this.positiveArr;\n                this.positiveArr = new Int32Array(arr.length * 2);\n                this.positiveArr.set(arr);\n            }\n            this.positiveArr[idx] = value;\n        }\n    }\n}\n/**\n * An array that supports fast negative indices.\n*/\nclass FastArrayNegativeIndices {\n    constructor() {\n        this.positiveArr = [];\n        this.negativeArr = [];\n    }\n    get(idx) {\n        if (idx < 0) {\n            idx = -idx - 1;\n            return this.negativeArr[idx];\n        }\n        else {\n            return this.positiveArr[idx];\n        }\n    }\n    set(idx, value) {\n        if (idx < 0) {\n            idx = -idx - 1;\n            this.negativeArr[idx] = value;\n        }\n        else {\n            this.positiveArr[idx] = value;\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { findLastIdxMonotonous, findLastMonotonous, findFirstMonotonous } from '../../../../base/common/arraysFind.js';\nimport { OffsetRange } from '../../core/offsetRange.js';\nimport { Position } from '../../core/position.js';\nimport { Range } from '../../core/range.js';\nimport { isSpace } from './utils.js';\nexport class LinesSliceCharSequence {\n    constructor(lines, lineRange, considerWhitespaceChanges) {\n        // This slice has to have lineRange.length many \\n! (otherwise diffing against an empty slice will be problematic)\n        // (Unless it covers the entire document, in that case the other slice also has to cover the entire document ands it's okay)\n        this.lines = lines;\n        this.considerWhitespaceChanges = considerWhitespaceChanges;\n        this.elements = [];\n        this.firstCharOffsetByLine = [];\n        // To account for trimming\n        this.additionalOffsetByLine = [];\n        // If the slice covers the end, but does not start at the beginning, we include just the \\n of the previous line.\n        let trimFirstLineFully = false;\n        if (lineRange.start > 0 && lineRange.endExclusive >= lines.length) {\n            lineRange = new OffsetRange(lineRange.start - 1, lineRange.endExclusive);\n            trimFirstLineFully = true;\n        }\n        this.lineRange = lineRange;\n        this.firstCharOffsetByLine[0] = 0;\n        for (let i = this.lineRange.start; i < this.lineRange.endExclusive; i++) {\n            let line = lines[i];\n            let offset = 0;\n            if (trimFirstLineFully) {\n                offset = line.length;\n                line = '';\n                trimFirstLineFully = false;\n            }\n            else if (!considerWhitespaceChanges) {\n                const trimmedStartLine = line.trimStart();\n                offset = line.length - trimmedStartLine.length;\n                line = trimmedStartLine.trimEnd();\n            }\n            this.additionalOffsetByLine.push(offset);\n            for (let i = 0; i < line.length; i++) {\n                this.elements.push(line.charCodeAt(i));\n            }\n            // Don't add an \\n that does not exist in the document.\n            if (i < lines.length - 1) {\n                this.elements.push('\\n'.charCodeAt(0));\n                this.firstCharOffsetByLine[i - this.lineRange.start + 1] = this.elements.length;\n            }\n        }\n        // To account for the last line\n        this.additionalOffsetByLine.push(0);\n    }\n    toString() {\n        return `Slice: \"${this.text}\"`;\n    }\n    get text() {\n        return this.getText(new OffsetRange(0, this.length));\n    }\n    getText(range) {\n        return this.elements.slice(range.start, range.endExclusive).map(e => String.fromCharCode(e)).join('');\n    }\n    getElement(offset) {\n        return this.elements[offset];\n    }\n    get length() {\n        return this.elements.length;\n    }\n    getBoundaryScore(length) {\n        //   a   b   c   ,           d   e   f\n        // 11  0   0   12  15  6   13  0   0   11\n        const prevCategory = getCategory(length > 0 ? this.elements[length - 1] : -1);\n        const nextCategory = getCategory(length < this.elements.length ? this.elements[length] : -1);\n        if (prevCategory === 7 /* CharBoundaryCategory.LineBreakCR */ && nextCategory === 8 /* CharBoundaryCategory.LineBreakLF */) {\n            // don't break between \\r and \\n\n            return 0;\n        }\n        if (prevCategory === 8 /* CharBoundaryCategory.LineBreakLF */) {\n            // prefer the linebreak before the change\n            return 150;\n        }\n        let score = 0;\n        if (prevCategory !== nextCategory) {\n            score += 10;\n            if (prevCategory === 0 /* CharBoundaryCategory.WordLower */ && nextCategory === 1 /* CharBoundaryCategory.WordUpper */) {\n                score += 1;\n            }\n        }\n        score += getCategoryBoundaryScore(prevCategory);\n        score += getCategoryBoundaryScore(nextCategory);\n        return score;\n    }\n    translateOffset(offset) {\n        // find smallest i, so that lineBreakOffsets[i] <= offset using binary search\n        if (this.lineRange.isEmpty) {\n            return new Position(this.lineRange.start + 1, 1);\n        }\n        const i = findLastIdxMonotonous(this.firstCharOffsetByLine, (value) => value <= offset);\n        return new Position(this.lineRange.start + i + 1, offset - this.firstCharOffsetByLine[i] + this.additionalOffsetByLine[i] + 1);\n    }\n    translateRange(range) {\n        return Range.fromPositions(this.translateOffset(range.start), this.translateOffset(range.endExclusive));\n    }\n    /**\n     * Finds the word that contains the character at the given offset\n     */\n    findWordContaining(offset) {\n        if (offset < 0 || offset >= this.elements.length) {\n            return undefined;\n        }\n        if (!isWordChar(this.elements[offset])) {\n            return undefined;\n        }\n        // find start\n        let start = offset;\n        while (start > 0 && isWordChar(this.elements[start - 1])) {\n            start--;\n        }\n        // find end\n        let end = offset;\n        while (end < this.elements.length && isWordChar(this.elements[end])) {\n            end++;\n        }\n        return new OffsetRange(start, end);\n    }\n    countLinesIn(range) {\n        return this.translateOffset(range.endExclusive).lineNumber - this.translateOffset(range.start).lineNumber;\n    }\n    isStronglyEqual(offset1, offset2) {\n        return this.elements[offset1] === this.elements[offset2];\n    }\n    extendToFullLines(range) {\n        var _a, _b;\n        const start = (_a = findLastMonotonous(this.firstCharOffsetByLine, x => x <= range.start)) !== null && _a !== void 0 ? _a : 0;\n        const end = (_b = findFirstMonotonous(this.firstCharOffsetByLine, x => range.endExclusive <= x)) !== null && _b !== void 0 ? _b : this.elements.length;\n        return new OffsetRange(start, end);\n    }\n}\nfunction isWordChar(charCode) {\n    return charCode >= 97 /* CharCode.a */ && charCode <= 122 /* CharCode.z */\n        || charCode >= 65 /* CharCode.A */ && charCode <= 90 /* CharCode.Z */\n        || charCode >= 48 /* CharCode.Digit0 */ && charCode <= 57 /* CharCode.Digit9 */;\n}\nconst score = {\n    [0 /* CharBoundaryCategory.WordLower */]: 0,\n    [1 /* CharBoundaryCategory.WordUpper */]: 0,\n    [2 /* CharBoundaryCategory.WordNumber */]: 0,\n    [3 /* CharBoundaryCategory.End */]: 10,\n    [4 /* CharBoundaryCategory.Other */]: 2,\n    [5 /* CharBoundaryCategory.Separator */]: 30,\n    [6 /* CharBoundaryCategory.Space */]: 3,\n    [7 /* CharBoundaryCategory.LineBreakCR */]: 10,\n    [8 /* CharBoundaryCategory.LineBreakLF */]: 10,\n};\nfunction getCategoryBoundaryScore(category) {\n    return score[category];\n}\nfunction getCategory(charCode) {\n    if (charCode === 10 /* CharCode.LineFeed */) {\n        return 8 /* CharBoundaryCategory.LineBreakLF */;\n    }\n    else if (charCode === 13 /* CharCode.CarriageReturn */) {\n        return 7 /* CharBoundaryCategory.LineBreakCR */;\n    }\n    else if (isSpace(charCode)) {\n        return 6 /* CharBoundaryCategory.Space */;\n    }\n    else if (charCode >= 97 /* CharCode.a */ && charCode <= 122 /* CharCode.z */) {\n        return 0 /* CharBoundaryCategory.WordLower */;\n    }\n    else if (charCode >= 65 /* CharCode.A */ && charCode <= 90 /* CharCode.Z */) {\n        return 1 /* CharBoundaryCategory.WordUpper */;\n    }\n    else if (charCode >= 48 /* CharCode.Digit0 */ && charCode <= 57 /* CharCode.Digit9 */) {\n        return 2 /* CharBoundaryCategory.WordNumber */;\n    }\n    else if (charCode === -1) {\n        return 3 /* CharBoundaryCategory.End */;\n    }\n    else if (charCode === 44 /* CharCode.Comma */ || charCode === 59 /* CharCode.Semicolon */) {\n        return 5 /* CharBoundaryCategory.Separator */;\n    }\n    else {\n        return 4 /* CharBoundaryCategory.Other */;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { SequenceDiff } from './algorithms/diffAlgorithm.js';\nimport { LineRangeMapping } from '../rangeMapping.js';\nimport { pushMany, compareBy, numberComparator, reverseOrder } from '../../../../base/common/arrays.js';\nimport { MonotonousArray, findLastMonotonous } from '../../../../base/common/arraysFind.js';\nimport { SetMap } from '../../../../base/common/map.js';\nimport { LineRange, LineRangeSet } from '../../core/lineRange.js';\nimport { OffsetRange } from '../../core/offsetRange.js';\nimport { LinesSliceCharSequence } from './linesSliceCharSequence.js';\nimport { LineRangeFragment, isSpace } from './utils.js';\nimport { MyersDiffAlgorithm } from './algorithms/myersDiffAlgorithm.js';\nexport function computeMovedLines(changes, originalLines, modifiedLines, hashedOriginalLines, hashedModifiedLines, timeout) {\n    let { moves, excludedChanges } = computeMovesFromSimpleDeletionsToSimpleInsertions(changes, originalLines, modifiedLines, timeout);\n    if (!timeout.isValid()) {\n        return [];\n    }\n    const filteredChanges = changes.filter(c => !excludedChanges.has(c));\n    const unchangedMoves = computeUnchangedMoves(filteredChanges, hashedOriginalLines, hashedModifiedLines, originalLines, modifiedLines, timeout);\n    pushMany(moves, unchangedMoves);\n    moves = joinCloseConsecutiveMoves(moves);\n    // Ignore too short moves\n    moves = moves.filter(current => {\n        const lines = current.original.toOffsetRange().slice(originalLines).map(l => l.trim());\n        const originalText = lines.join('\\n');\n        return originalText.length >= 15 && countWhere(lines, l => l.length >= 2) >= 2;\n    });\n    moves = removeMovesInSameDiff(changes, moves);\n    return moves;\n}\nfunction countWhere(arr, predicate) {\n    let count = 0;\n    for (const t of arr) {\n        if (predicate(t)) {\n            count++;\n        }\n    }\n    return count;\n}\nfunction computeMovesFromSimpleDeletionsToSimpleInsertions(changes, originalLines, modifiedLines, timeout) {\n    const moves = [];\n    const deletions = changes\n        .filter(c => c.modified.isEmpty && c.original.length >= 3)\n        .map(d => new LineRangeFragment(d.original, originalLines, d));\n    const insertions = new Set(changes\n        .filter(c => c.original.isEmpty && c.modified.length >= 3)\n        .map(d => new LineRangeFragment(d.modified, modifiedLines, d)));\n    const excludedChanges = new Set();\n    for (const deletion of deletions) {\n        let highestSimilarity = -1;\n        let best;\n        for (const insertion of insertions) {\n            const similarity = deletion.computeSimilarity(insertion);\n            if (similarity > highestSimilarity) {\n                highestSimilarity = similarity;\n                best = insertion;\n            }\n        }\n        if (highestSimilarity > 0.90 && best) {\n            insertions.delete(best);\n            moves.push(new LineRangeMapping(deletion.range, best.range));\n            excludedChanges.add(deletion.source);\n            excludedChanges.add(best.source);\n        }\n        if (!timeout.isValid()) {\n            return { moves, excludedChanges };\n        }\n    }\n    return { moves, excludedChanges };\n}\nfunction computeUnchangedMoves(changes, hashedOriginalLines, hashedModifiedLines, originalLines, modifiedLines, timeout) {\n    const moves = [];\n    const original3LineHashes = new SetMap();\n    for (const change of changes) {\n        for (let i = change.original.startLineNumber; i < change.original.endLineNumberExclusive - 2; i++) {\n            const key = `${hashedOriginalLines[i - 1]}:${hashedOriginalLines[i + 1 - 1]}:${hashedOriginalLines[i + 2 - 1]}`;\n            original3LineHashes.add(key, { range: new LineRange(i, i + 3) });\n        }\n    }\n    const possibleMappings = [];\n    changes.sort(compareBy(c => c.modified.startLineNumber, numberComparator));\n    for (const change of changes) {\n        let lastMappings = [];\n        for (let i = change.modified.startLineNumber; i < change.modified.endLineNumberExclusive - 2; i++) {\n            const key = `${hashedModifiedLines[i - 1]}:${hashedModifiedLines[i + 1 - 1]}:${hashedModifiedLines[i + 2 - 1]}`;\n            const currentModifiedRange = new LineRange(i, i + 3);\n            const nextMappings = [];\n            original3LineHashes.forEach(key, ({ range }) => {\n                for (const lastMapping of lastMappings) {\n                    // does this match extend some last match?\n                    if (lastMapping.originalLineRange.endLineNumberExclusive + 1 === range.endLineNumberExclusive &&\n                        lastMapping.modifiedLineRange.endLineNumberExclusive + 1 === currentModifiedRange.endLineNumberExclusive) {\n                        lastMapping.originalLineRange = new LineRange(lastMapping.originalLineRange.startLineNumber, range.endLineNumberExclusive);\n                        lastMapping.modifiedLineRange = new LineRange(lastMapping.modifiedLineRange.startLineNumber, currentModifiedRange.endLineNumberExclusive);\n                        nextMappings.push(lastMapping);\n                        return;\n                    }\n                }\n                const mapping = {\n                    modifiedLineRange: currentModifiedRange,\n                    originalLineRange: range,\n                };\n                possibleMappings.push(mapping);\n                nextMappings.push(mapping);\n            });\n            lastMappings = nextMappings;\n        }\n        if (!timeout.isValid()) {\n            return [];\n        }\n    }\n    possibleMappings.sort(reverseOrder(compareBy(m => m.modifiedLineRange.length, numberComparator)));\n    const modifiedSet = new LineRangeSet();\n    const originalSet = new LineRangeSet();\n    for (const mapping of possibleMappings) {\n        const diffOrigToMod = mapping.modifiedLineRange.startLineNumber - mapping.originalLineRange.startLineNumber;\n        const modifiedSections = modifiedSet.subtractFrom(mapping.modifiedLineRange);\n        const originalTranslatedSections = originalSet.subtractFrom(mapping.originalLineRange).getWithDelta(diffOrigToMod);\n        const modifiedIntersectedSections = modifiedSections.getIntersection(originalTranslatedSections);\n        for (const s of modifiedIntersectedSections.ranges) {\n            if (s.length < 3) {\n                continue;\n            }\n            const modifiedLineRange = s;\n            const originalLineRange = s.delta(-diffOrigToMod);\n            moves.push(new LineRangeMapping(originalLineRange, modifiedLineRange));\n            modifiedSet.addRange(modifiedLineRange);\n            originalSet.addRange(originalLineRange);\n        }\n    }\n    moves.sort(compareBy(m => m.original.startLineNumber, numberComparator));\n    const monotonousChanges = new MonotonousArray(changes);\n    for (let i = 0; i < moves.length; i++) {\n        const move = moves[i];\n        const firstTouchingChangeOrig = monotonousChanges.findLastMonotonous(c => c.original.startLineNumber <= move.original.startLineNumber);\n        const firstTouchingChangeMod = findLastMonotonous(changes, c => c.modified.startLineNumber <= move.modified.startLineNumber);\n        const linesAbove = Math.max(move.original.startLineNumber - firstTouchingChangeOrig.original.startLineNumber, move.modified.startLineNumber - firstTouchingChangeMod.modified.startLineNumber);\n        const lastTouchingChangeOrig = monotonousChanges.findLastMonotonous(c => c.original.startLineNumber < move.original.endLineNumberExclusive);\n        const lastTouchingChangeMod = findLastMonotonous(changes, c => c.modified.startLineNumber < move.modified.endLineNumberExclusive);\n        const linesBelow = Math.max(lastTouchingChangeOrig.original.endLineNumberExclusive - move.original.endLineNumberExclusive, lastTouchingChangeMod.modified.endLineNumberExclusive - move.modified.endLineNumberExclusive);\n        let extendToTop;\n        for (extendToTop = 0; extendToTop < linesAbove; extendToTop++) {\n            const origLine = move.original.startLineNumber - extendToTop - 1;\n            const modLine = move.modified.startLineNumber - extendToTop - 1;\n            if (origLine > originalLines.length || modLine > modifiedLines.length) {\n                break;\n            }\n            if (modifiedSet.contains(modLine) || originalSet.contains(origLine)) {\n                break;\n            }\n            if (!areLinesSimilar(originalLines[origLine - 1], modifiedLines[modLine - 1], timeout)) {\n                break;\n            }\n        }\n        if (extendToTop > 0) {\n            originalSet.addRange(new LineRange(move.original.startLineNumber - extendToTop, move.original.startLineNumber));\n            modifiedSet.addRange(new LineRange(move.modified.startLineNumber - extendToTop, move.modified.startLineNumber));\n        }\n        let extendToBottom;\n        for (extendToBottom = 0; extendToBottom < linesBelow; extendToBottom++) {\n            const origLine = move.original.endLineNumberExclusive + extendToBottom;\n            const modLine = move.modified.endLineNumberExclusive + extendToBottom;\n            if (origLine > originalLines.length || modLine > modifiedLines.length) {\n                break;\n            }\n            if (modifiedSet.contains(modLine) || originalSet.contains(origLine)) {\n                break;\n            }\n            if (!areLinesSimilar(originalLines[origLine - 1], modifiedLines[modLine - 1], timeout)) {\n                break;\n            }\n        }\n        if (extendToBottom > 0) {\n            originalSet.addRange(new LineRange(move.original.endLineNumberExclusive, move.original.endLineNumberExclusive + extendToBottom));\n            modifiedSet.addRange(new LineRange(move.modified.endLineNumberExclusive, move.modified.endLineNumberExclusive + extendToBottom));\n        }\n        if (extendToTop > 0 || extendToBottom > 0) {\n            moves[i] = new LineRangeMapping(new LineRange(move.original.startLineNumber - extendToTop, move.original.endLineNumberExclusive + extendToBottom), new LineRange(move.modified.startLineNumber - extendToTop, move.modified.endLineNumberExclusive + extendToBottom));\n        }\n    }\n    return moves;\n}\nfunction areLinesSimilar(line1, line2, timeout) {\n    if (line1.trim() === line2.trim()) {\n        return true;\n    }\n    if (line1.length > 300 && line2.length > 300) {\n        return false;\n    }\n    const myersDiffingAlgorithm = new MyersDiffAlgorithm();\n    const result = myersDiffingAlgorithm.compute(new LinesSliceCharSequence([line1], new OffsetRange(0, 1), false), new LinesSliceCharSequence([line2], new OffsetRange(0, 1), false), timeout);\n    let commonNonSpaceCharCount = 0;\n    const inverted = SequenceDiff.invert(result.diffs, line1.length);\n    for (const seq of inverted) {\n        seq.seq1Range.forEach(idx => {\n            if (!isSpace(line1.charCodeAt(idx))) {\n                commonNonSpaceCharCount++;\n            }\n        });\n    }\n    function countNonWsChars(str) {\n        let count = 0;\n        for (let i = 0; i < line1.length; i++) {\n            if (!isSpace(str.charCodeAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n    const longerLineLength = countNonWsChars(line1.length > line2.length ? line1 : line2);\n    const r = commonNonSpaceCharCount / longerLineLength > 0.6 && longerLineLength > 10;\n    return r;\n}\nfunction joinCloseConsecutiveMoves(moves) {\n    if (moves.length === 0) {\n        return moves;\n    }\n    moves.sort(compareBy(m => m.original.startLineNumber, numberComparator));\n    const result = [moves[0]];\n    for (let i = 1; i < moves.length; i++) {\n        const last = result[result.length - 1];\n        const current = moves[i];\n        const originalDist = current.original.startLineNumber - last.original.endLineNumberExclusive;\n        const modifiedDist = current.modified.startLineNumber - last.modified.endLineNumberExclusive;\n        const currentMoveAfterLast = originalDist >= 0 && modifiedDist >= 0;\n        if (currentMoveAfterLast && originalDist + modifiedDist <= 2) {\n            result[result.length - 1] = last.join(current);\n            continue;\n        }\n        result.push(current);\n    }\n    return result;\n}\nfunction removeMovesInSameDiff(changes, moves) {\n    const changesMonotonous = new MonotonousArray(changes);\n    moves = moves.filter(m => {\n        const diffBeforeEndOfMoveOriginal = changesMonotonous.findLastMonotonous(c => c.original.startLineNumber < m.original.endLineNumberExclusive)\n            || new LineRangeMapping(new LineRange(1, 1), new LineRange(1, 1));\n        const diffBeforeEndOfMoveModified = findLastMonotonous(changes, c => c.modified.startLineNumber < m.modified.endLineNumberExclusive);\n        const differentDiffs = diffBeforeEndOfMoveOriginal !== diffBeforeEndOfMoveModified;\n        return differentDiffs;\n    });\n    return moves;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class LineSequence {\n    constructor(trimmedHash, lines) {\n        this.trimmedHash = trimmedHash;\n        this.lines = lines;\n    }\n    getElement(offset) {\n        return this.trimmedHash[offset];\n    }\n    get length() {\n        return this.trimmedHash.length;\n    }\n    getBoundaryScore(length) {\n        const indentationBefore = length === 0 ? 0 : getIndentation(this.lines[length - 1]);\n        const indentationAfter = length === this.lines.length ? 0 : getIndentation(this.lines[length]);\n        return 1000 - (indentationBefore + indentationAfter);\n    }\n    getText(range) {\n        return this.lines.slice(range.start, range.endExclusive).join('\\n');\n    }\n    isStronglyEqual(offset1, offset2) {\n        return this.lines[offset1] === this.lines[offset2];\n    }\n}\nfunction getIndentation(str) {\n    let i = 0;\n    while (i < str.length && (str.charCodeAt(i) === 32 /* CharCode.Space */ || str.charCodeAt(i) === 9 /* CharCode.Tab */)) {\n        i++;\n    }\n    return i;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { equals, groupAdjacentBy } from '../../../../base/common/arrays.js';\nimport { assertFn, checkAdjacentItems } from '../../../../base/common/assert.js';\nimport { LineRange } from '../../core/lineRange.js';\nimport { OffsetRange } from '../../core/offsetRange.js';\nimport { Range } from '../../core/range.js';\nimport { DateTimeout, InfiniteTimeout, SequenceDiff } from './algorithms/diffAlgorithm.js';\nimport { DynamicProgrammingDiffing } from './algorithms/dynamicProgrammingDiffing.js';\nimport { MyersDiffAlgorithm } from './algorithms/myersDiffAlgorithm.js';\nimport { computeMovedLines } from './computeMovedLines.js';\nimport { extendDiffsToEntireWordIfAppropriate, optimizeSequenceDiffs, removeShortMatches, removeVeryShortMatchingLinesBetweenDiffs, removeVeryShortMatchingTextBetweenLongDiffs } from './heuristicSequenceOptimizations.js';\nimport { LineSequence } from './lineSequence.js';\nimport { LinesSliceCharSequence } from './linesSliceCharSequence.js';\nimport { LinesDiff, MovedText } from '../linesDiffComputer.js';\nimport { DetailedLineRangeMapping, RangeMapping } from '../rangeMapping.js';\nexport class DefaultLinesDiffComputer {\n    constructor() {\n        this.dynamicProgrammingDiffing = new DynamicProgrammingDiffing();\n        this.myersDiffingAlgorithm = new MyersDiffAlgorithm();\n    }\n    computeDiff(originalLines, modifiedLines, options) {\n        if (originalLines.length <= 1 && equals(originalLines, modifiedLines, (a, b) => a === b)) {\n            return new LinesDiff([], [], false);\n        }\n        if (originalLines.length === 1 && originalLines[0].length === 0 || modifiedLines.length === 1 && modifiedLines[0].length === 0) {\n            return new LinesDiff([\n                new DetailedLineRangeMapping(new LineRange(1, originalLines.length + 1), new LineRange(1, modifiedLines.length + 1), [\n                    new RangeMapping(new Range(1, 1, originalLines.length, originalLines[originalLines.length - 1].length + 1), new Range(1, 1, modifiedLines.length, modifiedLines[modifiedLines.length - 1].length + 1))\n                ])\n            ], [], false);\n        }\n        const timeout = options.maxComputationTimeMs === 0 ? InfiniteTimeout.instance : new DateTimeout(options.maxComputationTimeMs);\n        const considerWhitespaceChanges = !options.ignoreTrimWhitespace;\n        const perfectHashes = new Map();\n        function getOrCreateHash(text) {\n            let hash = perfectHashes.get(text);\n            if (hash === undefined) {\n                hash = perfectHashes.size;\n                perfectHashes.set(text, hash);\n            }\n            return hash;\n        }\n        const originalLinesHashes = originalLines.map((l) => getOrCreateHash(l.trim()));\n        const modifiedLinesHashes = modifiedLines.map((l) => getOrCreateHash(l.trim()));\n        const sequence1 = new LineSequence(originalLinesHashes, originalLines);\n        const sequence2 = new LineSequence(modifiedLinesHashes, modifiedLines);\n        const lineAlignmentResult = (() => {\n            if (sequence1.length + sequence2.length < 1700) {\n                // Use the improved algorithm for small files\n                return this.dynamicProgrammingDiffing.compute(sequence1, sequence2, timeout, (offset1, offset2) => originalLines[offset1] === modifiedLines[offset2]\n                    ? modifiedLines[offset2].length === 0\n                        ? 0.1\n                        : 1 + Math.log(1 + modifiedLines[offset2].length)\n                    : 0.99);\n            }\n            return this.myersDiffingAlgorithm.compute(sequence1, sequence2, timeout);\n        })();\n        let lineAlignments = lineAlignmentResult.diffs;\n        let hitTimeout = lineAlignmentResult.hitTimeout;\n        lineAlignments = optimizeSequenceDiffs(sequence1, sequence2, lineAlignments);\n        lineAlignments = removeVeryShortMatchingLinesBetweenDiffs(sequence1, sequence2, lineAlignments);\n        const alignments = [];\n        const scanForWhitespaceChanges = (equalLinesCount) => {\n            if (!considerWhitespaceChanges) {\n                return;\n            }\n            for (let i = 0; i < equalLinesCount; i++) {\n                const seq1Offset = seq1LastStart + i;\n                const seq2Offset = seq2LastStart + i;\n                if (originalLines[seq1Offset] !== modifiedLines[seq2Offset]) {\n                    // This is because of whitespace changes, diff these lines\n                    const characterDiffs = this.refineDiff(originalLines, modifiedLines, new SequenceDiff(new OffsetRange(seq1Offset, seq1Offset + 1), new OffsetRange(seq2Offset, seq2Offset + 1)), timeout, considerWhitespaceChanges);\n                    for (const a of characterDiffs.mappings) {\n                        alignments.push(a);\n                    }\n                    if (characterDiffs.hitTimeout) {\n                        hitTimeout = true;\n                    }\n                }\n            }\n        };\n        let seq1LastStart = 0;\n        let seq2LastStart = 0;\n        for (const diff of lineAlignments) {\n            assertFn(() => diff.seq1Range.start - seq1LastStart === diff.seq2Range.start - seq2LastStart);\n            const equalLinesCount = diff.seq1Range.start - seq1LastStart;\n            scanForWhitespaceChanges(equalLinesCount);\n            seq1LastStart = diff.seq1Range.endExclusive;\n            seq2LastStart = diff.seq2Range.endExclusive;\n            const characterDiffs = this.refineDiff(originalLines, modifiedLines, diff, timeout, considerWhitespaceChanges);\n            if (characterDiffs.hitTimeout) {\n                hitTimeout = true;\n            }\n            for (const a of characterDiffs.mappings) {\n                alignments.push(a);\n            }\n        }\n        scanForWhitespaceChanges(originalLines.length - seq1LastStart);\n        const changes = lineRangeMappingFromRangeMappings(alignments, originalLines, modifiedLines);\n        let moves = [];\n        if (options.computeMoves) {\n            moves = this.computeMoves(changes, originalLines, modifiedLines, originalLinesHashes, modifiedLinesHashes, timeout, considerWhitespaceChanges);\n        }\n        // Make sure all ranges are valid\n        assertFn(() => {\n            function validatePosition(pos, lines) {\n                if (pos.lineNumber < 1 || pos.lineNumber > lines.length) {\n                    return false;\n                }\n                const line = lines[pos.lineNumber - 1];\n                if (pos.column < 1 || pos.column > line.length + 1) {\n                    return false;\n                }\n                return true;\n            }\n            function validateRange(range, lines) {\n                if (range.startLineNumber < 1 || range.startLineNumber > lines.length + 1) {\n                    return false;\n                }\n                if (range.endLineNumberExclusive < 1 || range.endLineNumberExclusive > lines.length + 1) {\n                    return false;\n                }\n                return true;\n            }\n            for (const c of changes) {\n                if (!c.innerChanges) {\n                    return false;\n                }\n                for (const ic of c.innerChanges) {\n                    const valid = validatePosition(ic.modifiedRange.getStartPosition(), modifiedLines) && validatePosition(ic.modifiedRange.getEndPosition(), modifiedLines) &&\n                        validatePosition(ic.originalRange.getStartPosition(), originalLines) && validatePosition(ic.originalRange.getEndPosition(), originalLines);\n                    if (!valid) {\n                        return false;\n                    }\n                }\n                if (!validateRange(c.modified, modifiedLines) || !validateRange(c.original, originalLines)) {\n                    return false;\n                }\n            }\n            return true;\n        });\n        return new LinesDiff(changes, moves, hitTimeout);\n    }\n    computeMoves(changes, originalLines, modifiedLines, hashedOriginalLines, hashedModifiedLines, timeout, considerWhitespaceChanges) {\n        const moves = computeMovedLines(changes, originalLines, modifiedLines, hashedOriginalLines, hashedModifiedLines, timeout);\n        const movesWithDiffs = moves.map(m => {\n            const moveChanges = this.refineDiff(originalLines, modifiedLines, new SequenceDiff(m.original.toOffsetRange(), m.modified.toOffsetRange()), timeout, considerWhitespaceChanges);\n            const mappings = lineRangeMappingFromRangeMappings(moveChanges.mappings, originalLines, modifiedLines, true);\n            return new MovedText(m, mappings);\n        });\n        return movesWithDiffs;\n    }\n    refineDiff(originalLines, modifiedLines, diff, timeout, considerWhitespaceChanges) {\n        const slice1 = new LinesSliceCharSequence(originalLines, diff.seq1Range, considerWhitespaceChanges);\n        const slice2 = new LinesSliceCharSequence(modifiedLines, diff.seq2Range, considerWhitespaceChanges);\n        const diffResult = slice1.length + slice2.length < 500\n            ? this.dynamicProgrammingDiffing.compute(slice1, slice2, timeout)\n            : this.myersDiffingAlgorithm.compute(slice1, slice2, timeout);\n        let diffs = diffResult.diffs;\n        diffs = optimizeSequenceDiffs(slice1, slice2, diffs);\n        diffs = extendDiffsToEntireWordIfAppropriate(slice1, slice2, diffs);\n        diffs = removeShortMatches(slice1, slice2, diffs);\n        diffs = removeVeryShortMatchingTextBetweenLongDiffs(slice1, slice2, diffs);\n        const result = diffs.map((d) => new RangeMapping(slice1.translateRange(d.seq1Range), slice2.translateRange(d.seq2Range)));\n        // Assert: result applied on original should be the same as diff applied to original\n        return {\n            mappings: result,\n            hitTimeout: diffResult.hitTimeout,\n        };\n    }\n}\nexport function lineRangeMappingFromRangeMappings(alignments, originalLines, modifiedLines, dontAssertStartLine = false) {\n    const changes = [];\n    for (const g of groupAdjacentBy(alignments.map(a => getLineRangeMapping(a, originalLines, modifiedLines)), (a1, a2) => a1.original.overlapOrTouch(a2.original)\n        || a1.modified.overlapOrTouch(a2.modified))) {\n        const first = g[0];\n        const last = g[g.length - 1];\n        changes.push(new DetailedLineRangeMapping(first.original.join(last.original), first.modified.join(last.modified), g.map(a => a.innerChanges[0])));\n    }\n    assertFn(() => {\n        if (!dontAssertStartLine && changes.length > 0) {\n            if (changes[0].modified.startLineNumber !== changes[0].original.startLineNumber) {\n                return false;\n            }\n            if (modifiedLines.length - changes[changes.length - 1].modified.endLineNumberExclusive !== originalLines.length - changes[changes.length - 1].original.endLineNumberExclusive) {\n                return false;\n            }\n        }\n        return checkAdjacentItems(changes, (m1, m2) => m2.original.startLineNumber - m1.original.endLineNumberExclusive === m2.modified.startLineNumber - m1.modified.endLineNumberExclusive &&\n            // There has to be an unchanged line in between (otherwise both diffs should have been joined)\n            m1.original.endLineNumberExclusive < m2.original.startLineNumber &&\n            m1.modified.endLineNumberExclusive < m2.modified.startLineNumber);\n    });\n    return changes;\n}\nexport function getLineRangeMapping(rangeMapping, originalLines, modifiedLines) {\n    let lineStartDelta = 0;\n    let lineEndDelta = 0;\n    // rangeMapping describes the edit that replaces `rangeMapping.originalRange` with `newText := getText(modifiedLines, rangeMapping.modifiedRange)`.\n    // original: ]xxx \\n <- this line is not modified\n    // modified: ]xx  \\n\n    if (rangeMapping.modifiedRange.endColumn === 1 && rangeMapping.originalRange.endColumn === 1\n        && rangeMapping.originalRange.startLineNumber + lineStartDelta <= rangeMapping.originalRange.endLineNumber\n        && rangeMapping.modifiedRange.startLineNumber + lineStartDelta <= rangeMapping.modifiedRange.endLineNumber) {\n        // We can only do this if the range is not empty yet\n        lineEndDelta = -1;\n    }\n    // original: xxx[ \\n <- this line is not modified\n    // modified: xxx[ \\n\n    if (rangeMapping.modifiedRange.startColumn - 1 >= modifiedLines[rangeMapping.modifiedRange.startLineNumber - 1].length\n        && rangeMapping.originalRange.startColumn - 1 >= originalLines[rangeMapping.originalRange.startLineNumber - 1].length\n        && rangeMapping.originalRange.startLineNumber <= rangeMapping.originalRange.endLineNumber + lineEndDelta\n        && rangeMapping.modifiedRange.startLineNumber <= rangeMapping.modifiedRange.endLineNumber + lineEndDelta) {\n        // We can only do this if the range is not empty yet\n        lineStartDelta = 1;\n    }\n    const originalLineRange = new LineRange(rangeMapping.originalRange.startLineNumber + lineStartDelta, rangeMapping.originalRange.endLineNumber + 1 + lineEndDelta);\n    const modifiedLineRange = new LineRange(rangeMapping.modifiedRange.startLineNumber + lineStartDelta, rangeMapping.modifiedRange.endLineNumber + 1 + lineEndDelta);\n    return new DetailedLineRangeMapping(originalLineRange, modifiedLineRange, [rangeMapping]);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { forEachWithNeighbors } from '../../../../base/common/arrays.js';\nimport { OffsetRange } from '../../core/offsetRange.js';\nimport { OffsetPair, SequenceDiff } from './algorithms/diffAlgorithm.js';\nexport function optimizeSequenceDiffs(sequence1, sequence2, sequenceDiffs) {\n    let result = sequenceDiffs;\n    result = joinSequenceDiffsByShifting(sequence1, sequence2, result);\n    // Sometimes, calling this function twice improves the result.\n    // Uncomment the second invocation and run the tests to see the difference.\n    result = joinSequenceDiffsByShifting(sequence1, sequence2, result);\n    result = shiftSequenceDiffs(sequence1, sequence2, result);\n    return result;\n}\n/**\n * This function fixes issues like this:\n * ```\n * import { Baz, Bar } from \"foo\";\n * ```\n * <->\n * ```\n * import { Baz, Bar, Foo } from \"foo\";\n * ```\n * Computed diff: [ {Add \",\" after Bar}, {Add \"Foo \" after space} }\n * Improved diff: [{Add \", Foo\" after Bar}]\n */\nfunction joinSequenceDiffsByShifting(sequence1, sequence2, sequenceDiffs) {\n    if (sequenceDiffs.length === 0) {\n        return sequenceDiffs;\n    }\n    const result = [];\n    result.push(sequenceDiffs[0]);\n    // First move them all to the left as much as possible and join them if possible\n    for (let i = 1; i < sequenceDiffs.length; i++) {\n        const prevResult = result[result.length - 1];\n        let cur = sequenceDiffs[i];\n        if (cur.seq1Range.isEmpty || cur.seq2Range.isEmpty) {\n            const length = cur.seq1Range.start - prevResult.seq1Range.endExclusive;\n            let d;\n            for (d = 1; d <= length; d++) {\n                if (sequence1.getElement(cur.seq1Range.start - d) !== sequence1.getElement(cur.seq1Range.endExclusive - d) ||\n                    sequence2.getElement(cur.seq2Range.start - d) !== sequence2.getElement(cur.seq2Range.endExclusive - d)) {\n                    break;\n                }\n            }\n            d--;\n            if (d === length) {\n                // Merge previous and current diff\n                result[result.length - 1] = new SequenceDiff(new OffsetRange(prevResult.seq1Range.start, cur.seq1Range.endExclusive - length), new OffsetRange(prevResult.seq2Range.start, cur.seq2Range.endExclusive - length));\n                continue;\n            }\n            cur = cur.delta(-d);\n        }\n        result.push(cur);\n    }\n    const result2 = [];\n    // Then move them all to the right and join them again if possible\n    for (let i = 0; i < result.length - 1; i++) {\n        const nextResult = result[i + 1];\n        let cur = result[i];\n        if (cur.seq1Range.isEmpty || cur.seq2Range.isEmpty) {\n            const length = nextResult.seq1Range.start - cur.seq1Range.endExclusive;\n            let d;\n            for (d = 0; d < length; d++) {\n                if (!sequence1.isStronglyEqual(cur.seq1Range.start + d, cur.seq1Range.endExclusive + d) ||\n                    !sequence2.isStronglyEqual(cur.seq2Range.start + d, cur.seq2Range.endExclusive + d)) {\n                    break;\n                }\n            }\n            if (d === length) {\n                // Merge previous and current diff, write to result!\n                result[i + 1] = new SequenceDiff(new OffsetRange(cur.seq1Range.start + length, nextResult.seq1Range.endExclusive), new OffsetRange(cur.seq2Range.start + length, nextResult.seq2Range.endExclusive));\n                continue;\n            }\n            if (d > 0) {\n                cur = cur.delta(d);\n            }\n        }\n        result2.push(cur);\n    }\n    if (result.length > 0) {\n        result2.push(result[result.length - 1]);\n    }\n    return result2;\n}\n// align character level diffs at whitespace characters\n// import { IBar } from \"foo\";\n// import { I[Arr, I]Bar } from \"foo\";\n// ->\n// import { [IArr, ]IBar } from \"foo\";\n// import { ITransaction, observableValue, transaction } from 'vs/base/common/observable';\n// import { ITransaction, observable[FromEvent, observable]Value, transaction } from 'vs/base/common/observable';\n// ->\n// import { ITransaction, [observableFromEvent, ]observableValue, transaction } from 'vs/base/common/observable';\n// collectBrackets(level + 1, levelPerBracketType);\n// collectBrackets(level + 1, levelPerBracket[ + 1, levelPerBracket]Type);\n// ->\n// collectBrackets(level + 1, [levelPerBracket + 1, ]levelPerBracketType);\nfunction shiftSequenceDiffs(sequence1, sequence2, sequenceDiffs) {\n    if (!sequence1.getBoundaryScore || !sequence2.getBoundaryScore) {\n        return sequenceDiffs;\n    }\n    for (let i = 0; i < sequenceDiffs.length; i++) {\n        const prevDiff = (i > 0 ? sequenceDiffs[i - 1] : undefined);\n        const diff = sequenceDiffs[i];\n        const nextDiff = (i + 1 < sequenceDiffs.length ? sequenceDiffs[i + 1] : undefined);\n        const seq1ValidRange = new OffsetRange(prevDiff ? prevDiff.seq1Range.endExclusive + 1 : 0, nextDiff ? nextDiff.seq1Range.start - 1 : sequence1.length);\n        const seq2ValidRange = new OffsetRange(prevDiff ? prevDiff.seq2Range.endExclusive + 1 : 0, nextDiff ? nextDiff.seq2Range.start - 1 : sequence2.length);\n        if (diff.seq1Range.isEmpty) {\n            sequenceDiffs[i] = shiftDiffToBetterPosition(diff, sequence1, sequence2, seq1ValidRange, seq2ValidRange);\n        }\n        else if (diff.seq2Range.isEmpty) {\n            sequenceDiffs[i] = shiftDiffToBetterPosition(diff.swap(), sequence2, sequence1, seq2ValidRange, seq1ValidRange).swap();\n        }\n    }\n    return sequenceDiffs;\n}\nfunction shiftDiffToBetterPosition(diff, sequence1, sequence2, seq1ValidRange, seq2ValidRange) {\n    const maxShiftLimit = 100; // To prevent performance issues\n    // don't touch previous or next!\n    let deltaBefore = 1;\n    while (diff.seq1Range.start - deltaBefore >= seq1ValidRange.start &&\n        diff.seq2Range.start - deltaBefore >= seq2ValidRange.start &&\n        sequence2.isStronglyEqual(diff.seq2Range.start - deltaBefore, diff.seq2Range.endExclusive - deltaBefore) && deltaBefore < maxShiftLimit) {\n        deltaBefore++;\n    }\n    deltaBefore--;\n    let deltaAfter = 0;\n    while (diff.seq1Range.start + deltaAfter < seq1ValidRange.endExclusive &&\n        diff.seq2Range.endExclusive + deltaAfter < seq2ValidRange.endExclusive &&\n        sequence2.isStronglyEqual(diff.seq2Range.start + deltaAfter, diff.seq2Range.endExclusive + deltaAfter) && deltaAfter < maxShiftLimit) {\n        deltaAfter++;\n    }\n    if (deltaBefore === 0 && deltaAfter === 0) {\n        return diff;\n    }\n    // Visualize `[sequence1.text, diff.seq1Range.start + deltaAfter]`\n    // and `[sequence2.text, diff.seq2Range.start + deltaAfter, diff.seq2Range.endExclusive + deltaAfter]`\n    let bestDelta = 0;\n    let bestScore = -1;\n    // find best scored delta\n    for (let delta = -deltaBefore; delta <= deltaAfter; delta++) {\n        const seq2OffsetStart = diff.seq2Range.start + delta;\n        const seq2OffsetEndExclusive = diff.seq2Range.endExclusive + delta;\n        const seq1Offset = diff.seq1Range.start + delta;\n        const score = sequence1.getBoundaryScore(seq1Offset) + sequence2.getBoundaryScore(seq2OffsetStart) + sequence2.getBoundaryScore(seq2OffsetEndExclusive);\n        if (score > bestScore) {\n            bestScore = score;\n            bestDelta = delta;\n        }\n    }\n    return diff.delta(bestDelta);\n}\nexport function removeShortMatches(sequence1, sequence2, sequenceDiffs) {\n    const result = [];\n    for (const s of sequenceDiffs) {\n        const last = result[result.length - 1];\n        if (!last) {\n            result.push(s);\n            continue;\n        }\n        if (s.seq1Range.start - last.seq1Range.endExclusive <= 2 || s.seq2Range.start - last.seq2Range.endExclusive <= 2) {\n            result[result.length - 1] = new SequenceDiff(last.seq1Range.join(s.seq1Range), last.seq2Range.join(s.seq2Range));\n        }\n        else {\n            result.push(s);\n        }\n    }\n    return result;\n}\nexport function extendDiffsToEntireWordIfAppropriate(sequence1, sequence2, sequenceDiffs) {\n    const equalMappings = SequenceDiff.invert(sequenceDiffs, sequence1.length);\n    const additional = [];\n    let lastPoint = new OffsetPair(0, 0);\n    function scanWord(pair, equalMapping) {\n        if (pair.offset1 < lastPoint.offset1 || pair.offset2 < lastPoint.offset2) {\n            return;\n        }\n        const w1 = sequence1.findWordContaining(pair.offset1);\n        const w2 = sequence2.findWordContaining(pair.offset2);\n        if (!w1 || !w2) {\n            return;\n        }\n        let w = new SequenceDiff(w1, w2);\n        const equalPart = w.intersect(equalMapping);\n        let equalChars1 = equalPart.seq1Range.length;\n        let equalChars2 = equalPart.seq2Range.length;\n        // The words do not touch previous equals mappings, as we would have processed them already.\n        // But they might touch the next ones.\n        while (equalMappings.length > 0) {\n            const next = equalMappings[0];\n            const intersects = next.seq1Range.intersects(w.seq1Range) || next.seq2Range.intersects(w.seq2Range);\n            if (!intersects) {\n                break;\n            }\n            const v1 = sequence1.findWordContaining(next.seq1Range.start);\n            const v2 = sequence2.findWordContaining(next.seq2Range.start);\n            // Because there is an intersection, we know that the words are not empty.\n            const v = new SequenceDiff(v1, v2);\n            const equalPart = v.intersect(next);\n            equalChars1 += equalPart.seq1Range.length;\n            equalChars2 += equalPart.seq2Range.length;\n            w = w.join(v);\n            if (w.seq1Range.endExclusive >= next.seq1Range.endExclusive) {\n                // The word extends beyond the next equal mapping.\n                equalMappings.shift();\n            }\n            else {\n                break;\n            }\n        }\n        if (equalChars1 + equalChars2 < (w.seq1Range.length + w.seq2Range.length) * 2 / 3) {\n            additional.push(w);\n        }\n        lastPoint = w.getEndExclusives();\n    }\n    while (equalMappings.length > 0) {\n        const next = equalMappings.shift();\n        if (next.seq1Range.isEmpty) {\n            continue;\n        }\n        scanWord(next.getStarts(), next);\n        // The equal parts are not empty, so -1 gives us a character that is equal in both parts.\n        scanWord(next.getEndExclusives().delta(-1), next);\n    }\n    const merged = mergeSequenceDiffs(sequenceDiffs, additional);\n    return merged;\n}\nfunction mergeSequenceDiffs(sequenceDiffs1, sequenceDiffs2) {\n    const result = [];\n    while (sequenceDiffs1.length > 0 || sequenceDiffs2.length > 0) {\n        const sd1 = sequenceDiffs1[0];\n        const sd2 = sequenceDiffs2[0];\n        let next;\n        if (sd1 && (!sd2 || sd1.seq1Range.start < sd2.seq1Range.start)) {\n            next = sequenceDiffs1.shift();\n        }\n        else {\n            next = sequenceDiffs2.shift();\n        }\n        if (result.length > 0 && result[result.length - 1].seq1Range.endExclusive >= next.seq1Range.start) {\n            result[result.length - 1] = result[result.length - 1].join(next);\n        }\n        else {\n            result.push(next);\n        }\n    }\n    return result;\n}\nexport function removeVeryShortMatchingLinesBetweenDiffs(sequence1, _sequence2, sequenceDiffs) {\n    let diffs = sequenceDiffs;\n    if (diffs.length === 0) {\n        return diffs;\n    }\n    let counter = 0;\n    let shouldRepeat;\n    do {\n        shouldRepeat = false;\n        const result = [\n            diffs[0]\n        ];\n        for (let i = 1; i < diffs.length; i++) {\n            const cur = diffs[i];\n            const lastResult = result[result.length - 1];\n            function shouldJoinDiffs(before, after) {\n                const unchangedRange = new OffsetRange(lastResult.seq1Range.endExclusive, cur.seq1Range.start);\n                const unchangedText = sequence1.getText(unchangedRange);\n                const unchangedTextWithoutWs = unchangedText.replace(/\\s/g, '');\n                if (unchangedTextWithoutWs.length <= 4\n                    && (before.seq1Range.length + before.seq2Range.length > 5 || after.seq1Range.length + after.seq2Range.length > 5)) {\n                    return true;\n                }\n                return false;\n            }\n            const shouldJoin = shouldJoinDiffs(lastResult, cur);\n            if (shouldJoin) {\n                shouldRepeat = true;\n                result[result.length - 1] = result[result.length - 1].join(cur);\n            }\n            else {\n                result.push(cur);\n            }\n        }\n        diffs = result;\n    } while (counter++ < 10 && shouldRepeat);\n    return diffs;\n}\nexport function removeVeryShortMatchingTextBetweenLongDiffs(sequence1, sequence2, sequenceDiffs) {\n    let diffs = sequenceDiffs;\n    if (diffs.length === 0) {\n        return diffs;\n    }\n    let counter = 0;\n    let shouldRepeat;\n    do {\n        shouldRepeat = false;\n        const result = [\n            diffs[0]\n        ];\n        for (let i = 1; i < diffs.length; i++) {\n            const cur = diffs[i];\n            const lastResult = result[result.length - 1];\n            function shouldJoinDiffs(before, after) {\n                const unchangedRange = new OffsetRange(lastResult.seq1Range.endExclusive, cur.seq1Range.start);\n                const unchangedLineCount = sequence1.countLinesIn(unchangedRange);\n                if (unchangedLineCount > 5 || unchangedRange.length > 500) {\n                    return false;\n                }\n                const unchangedText = sequence1.getText(unchangedRange).trim();\n                if (unchangedText.length > 20 || unchangedText.split(/\\r\\n|\\r|\\n/).length > 1) {\n                    return false;\n                }\n                const beforeLineCount1 = sequence1.countLinesIn(before.seq1Range);\n                const beforeSeq1Length = before.seq1Range.length;\n                const beforeLineCount2 = sequence2.countLinesIn(before.seq2Range);\n                const beforeSeq2Length = before.seq2Range.length;\n                const afterLineCount1 = sequence1.countLinesIn(after.seq1Range);\n                const afterSeq1Length = after.seq1Range.length;\n                const afterLineCount2 = sequence2.countLinesIn(after.seq2Range);\n                const afterSeq2Length = after.seq2Range.length;\n                // TODO: Maybe a neural net can be used to derive the result from these numbers\n                const max = 2 * 40 + 50;\n                function cap(v) {\n                    return Math.min(v, max);\n                }\n                if (Math.pow(Math.pow(cap(beforeLineCount1 * 40 + beforeSeq1Length), 1.5) + Math.pow(cap(beforeLineCount2 * 40 + beforeSeq2Length), 1.5), 1.5)\n                    + Math.pow(Math.pow(cap(afterLineCount1 * 40 + afterSeq1Length), 1.5) + Math.pow(cap(afterLineCount2 * 40 + afterSeq2Length), 1.5), 1.5) > ((max ** 1.5) ** 1.5) * 1.3) {\n                    return true;\n                }\n                return false;\n            }\n            const shouldJoin = shouldJoinDiffs(lastResult, cur);\n            if (shouldJoin) {\n                shouldRepeat = true;\n                result[result.length - 1] = result[result.length - 1].join(cur);\n            }\n            else {\n                result.push(cur);\n            }\n        }\n        diffs = result;\n    } while (counter++ < 10 && shouldRepeat);\n    const newDiffs = [];\n    // Remove short suffixes/prefixes\n    forEachWithNeighbors(diffs, (prev, cur, next) => {\n        let newDiff = cur;\n        function shouldMarkAsChanged(text) {\n            return text.length > 0 && text.trim().length <= 3 && cur.seq1Range.length + cur.seq2Range.length > 100;\n        }\n        const fullRange1 = sequence1.extendToFullLines(cur.seq1Range);\n        const prefix = sequence1.getText(new OffsetRange(fullRange1.start, cur.seq1Range.start));\n        if (shouldMarkAsChanged(prefix)) {\n            newDiff = newDiff.deltaStart(-prefix.length);\n        }\n        const suffix = sequence1.getText(new OffsetRange(cur.seq1Range.endExclusive, fullRange1.endExclusive));\n        if (shouldMarkAsChanged(suffix)) {\n            newDiff = newDiff.deltaEnd(suffix.length);\n        }\n        const availableSpace = SequenceDiff.fromOffsetPairs(prev ? prev.getEndExclusives() : OffsetPair.zero, next ? next.getStarts() : OffsetPair.max);\n        const result = newDiff.intersect(availableSpace);\n        if (newDiffs.length > 0 && result.getStarts().equals(newDiffs[newDiffs.length - 1].getEndExclusives())) {\n            newDiffs[newDiffs.length - 1] = newDiffs[newDiffs.length - 1].join(result);\n        }\n        else {\n            newDiffs.push(result);\n        }\n    });\n    return newDiffs;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class LinesDiff {\n    constructor(changes, \n    /**\n     * Sorted by original line ranges.\n     * The original line ranges and the modified line ranges must be disjoint (but can be touching).\n     */\n    moves, \n    /**\n     * Indicates if the time out was reached.\n     * In that case, the diffs might be an approximation and the user should be asked to rerun the diff with more time.\n     */\n    hitTimeout) {\n        this.changes = changes;\n        this.moves = moves;\n        this.hitTimeout = hitTimeout;\n    }\n}\nexport class MovedText {\n    constructor(lineRangeMapping, changes) {\n        this.lineRangeMapping = lineRangeMapping;\n        this.changes = changes;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { BugIndicatingError } from '../../../base/common/errors.js';\nimport { LineRange } from '../core/lineRange.js';\nimport { Range } from '../core/range.js';\nimport { SingleTextEdit } from '../core/textEdit.js';\n/**\n * Maps a line range in the original text model to a line range in the modified text model.\n */\nexport class LineRangeMapping {\n    static inverse(mapping, originalLineCount, modifiedLineCount) {\n        const result = [];\n        let lastOriginalEndLineNumber = 1;\n        let lastModifiedEndLineNumber = 1;\n        for (const m of mapping) {\n            const r = new LineRangeMapping(new LineRange(lastOriginalEndLineNumber, m.original.startLineNumber), new LineRange(lastModifiedEndLineNumber, m.modified.startLineNumber));\n            if (!r.modified.isEmpty) {\n                result.push(r);\n            }\n            lastOriginalEndLineNumber = m.original.endLineNumberExclusive;\n            lastModifiedEndLineNumber = m.modified.endLineNumberExclusive;\n        }\n        const r = new LineRangeMapping(new LineRange(lastOriginalEndLineNumber, originalLineCount + 1), new LineRange(lastModifiedEndLineNumber, modifiedLineCount + 1));\n        if (!r.modified.isEmpty) {\n            result.push(r);\n        }\n        return result;\n    }\n    static clip(mapping, originalRange, modifiedRange) {\n        const result = [];\n        for (const m of mapping) {\n            const original = m.original.intersect(originalRange);\n            const modified = m.modified.intersect(modifiedRange);\n            if (original && !original.isEmpty && modified && !modified.isEmpty) {\n                result.push(new LineRangeMapping(original, modified));\n            }\n        }\n        return result;\n    }\n    constructor(originalRange, modifiedRange) {\n        this.original = originalRange;\n        this.modified = modifiedRange;\n    }\n    toString() {\n        return `{${this.original.toString()}->${this.modified.toString()}}`;\n    }\n    flip() {\n        return new LineRangeMapping(this.modified, this.original);\n    }\n    join(other) {\n        return new LineRangeMapping(this.original.join(other.original), this.modified.join(other.modified));\n    }\n    /**\n     * This method assumes that the LineRangeMapping describes a valid diff!\n     * I.e. if one range is empty, the other range cannot be the entire document.\n     * It avoids various problems when the line range points to non-existing line-numbers.\n    */\n    toRangeMapping() {\n        const origInclusiveRange = this.original.toInclusiveRange();\n        const modInclusiveRange = this.modified.toInclusiveRange();\n        if (origInclusiveRange && modInclusiveRange) {\n            return new RangeMapping(origInclusiveRange, modInclusiveRange);\n        }\n        else if (this.original.startLineNumber === 1 || this.modified.startLineNumber === 1) {\n            if (!(this.modified.startLineNumber === 1 && this.original.startLineNumber === 1)) {\n                // If one line range starts at 1, the other one must start at 1 as well.\n                throw new BugIndicatingError('not a valid diff');\n            }\n            // Because one range is empty and both ranges start at line 1, none of the ranges can cover all lines.\n            // Thus, `endLineNumberExclusive` is a valid line number.\n            return new RangeMapping(new Range(this.original.startLineNumber, 1, this.original.endLineNumberExclusive, 1), new Range(this.modified.startLineNumber, 1, this.modified.endLineNumberExclusive, 1));\n        }\n        else {\n            // We can assume here that both startLineNumbers are greater than 1.\n            return new RangeMapping(new Range(this.original.startLineNumber - 1, Number.MAX_SAFE_INTEGER, this.original.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER), new Range(this.modified.startLineNumber - 1, Number.MAX_SAFE_INTEGER, this.modified.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER));\n        }\n    }\n}\n/**\n * Maps a line range in the original text model to a line range in the modified text model.\n * Also contains inner range mappings.\n */\nexport class DetailedLineRangeMapping extends LineRangeMapping {\n    static fromRangeMappings(rangeMappings) {\n        const originalRange = LineRange.join(rangeMappings.map(r => LineRange.fromRangeInclusive(r.originalRange)));\n        const modifiedRange = LineRange.join(rangeMappings.map(r => LineRange.fromRangeInclusive(r.modifiedRange)));\n        return new DetailedLineRangeMapping(originalRange, modifiedRange, rangeMappings);\n    }\n    constructor(originalRange, modifiedRange, innerChanges) {\n        super(originalRange, modifiedRange);\n        this.innerChanges = innerChanges;\n    }\n    flip() {\n        var _a;\n        return new DetailedLineRangeMapping(this.modified, this.original, (_a = this.innerChanges) === null || _a === void 0 ? void 0 : _a.map(c => c.flip()));\n    }\n    withInnerChangesFromLineRanges() {\n        return new DetailedLineRangeMapping(this.original, this.modified, [this.toRangeMapping()]);\n    }\n}\n/**\n * Maps a range in the original text model to a range in the modified text model.\n */\nexport class RangeMapping {\n    constructor(originalRange, modifiedRange) {\n        this.originalRange = originalRange;\n        this.modifiedRange = modifiedRange;\n    }\n    toString() {\n        return `{${this.originalRange.toString()}->${this.modifiedRange.toString()}}`;\n    }\n    flip() {\n        return new RangeMapping(this.modifiedRange, this.originalRange);\n    }\n    /**\n     * Creates a single text edit that describes the change from the original to the modified text.\n    */\n    toTextEdit(modified) {\n        const newText = modified.getValueOfRange(this.modifiedRange);\n        return new SingleTextEdit(this.originalRange, newText);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { KeyChord } from '../../../base/common/keyCodes.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { Token } from '../languages.js';\nimport * as standaloneEnums from '../standalone/standaloneEnums.js';\nexport class KeyMod {\n    static chord(firstPart, secondPart) {\n        return KeyChord(firstPart, secondPart);\n    }\n}\nKeyMod.CtrlCmd = 2048 /* ConstKeyMod.CtrlCmd */;\nKeyMod.Shift = 1024 /* ConstKeyMod.Shift */;\nKeyMod.Alt = 512 /* ConstKeyMod.Alt */;\nKeyMod.WinCtrl = 256 /* ConstKeyMod.WinCtrl */;\nexport function createMonacoBaseAPI() {\n    return {\n        editor: undefined, // undefined override expected here\n        languages: undefined, // undefined override expected here\n        CancellationTokenSource: CancellationTokenSource,\n        Emitter: Emitter,\n        KeyCode: standaloneEnums.KeyCode,\n        KeyMod: KeyMod,\n        Position: Position,\n        Range: Range,\n        Selection: Selection,\n        SelectionDirection: standaloneEnums.SelectionDirection,\n        MarkerSeverity: standaloneEnums.MarkerSeverity,\n        MarkerTag: standaloneEnums.MarkerTag,\n        Uri: URI,\n        Token: Token\n    };\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { splitLines } from '../../../base/common/strings.js';\nimport { Position } from '../core/position.js';\nimport { PrefixSumComputer } from './prefixSumComputer.js';\nexport class MirrorTextModel {\n    constructor(uri, lines, eol, versionId) {\n        this._uri = uri;\n        this._lines = lines;\n        this._eol = eol;\n        this._versionId = versionId;\n        this._lineStarts = null;\n        this._cachedTextValue = null;\n    }\n    dispose() {\n        this._lines.length = 0;\n    }\n    get version() {\n        return this._versionId;\n    }\n    getText() {\n        if (this._cachedTextValue === null) {\n            this._cachedTextValue = this._lines.join(this._eol);\n        }\n        return this._cachedTextValue;\n    }\n    onEvents(e) {\n        if (e.eol && e.eol !== this._eol) {\n            this._eol = e.eol;\n            this._lineStarts = null;\n        }\n        // Update my lines\n        const changes = e.changes;\n        for (const change of changes) {\n            this._acceptDeleteRange(change.range);\n            this._acceptInsertText(new Position(change.range.startLineNumber, change.range.startColumn), change.text);\n        }\n        this._versionId = e.versionId;\n        this._cachedTextValue = null;\n    }\n    _ensureLineStarts() {\n        if (!this._lineStarts) {\n            const eolLength = this._eol.length;\n            const linesLength = this._lines.length;\n            const lineStartValues = new Uint32Array(linesLength);\n            for (let i = 0; i < linesLength; i++) {\n                lineStartValues[i] = this._lines[i].length + eolLength;\n            }\n            this._lineStarts = new PrefixSumComputer(lineStartValues);\n        }\n    }\n    /**\n     * All changes to a line's text go through this method\n     */\n    _setLineText(lineIndex, newValue) {\n        this._lines[lineIndex] = newValue;\n        if (this._lineStarts) {\n            // update prefix sum\n            this._lineStarts.setValue(lineIndex, this._lines[lineIndex].length + this._eol.length);\n        }\n    }\n    _acceptDeleteRange(range) {\n        if (range.startLineNumber === range.endLineNumber) {\n            if (range.startColumn === range.endColumn) {\n                // Nothing to delete\n                return;\n            }\n            // Delete text on the affected line\n            this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1)\n                + this._lines[range.startLineNumber - 1].substring(range.endColumn - 1));\n            return;\n        }\n        // Take remaining text on last line and append it to remaining text on first line\n        this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1)\n            + this._lines[range.endLineNumber - 1].substring(range.endColumn - 1));\n        // Delete middle lines\n        this._lines.splice(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n        if (this._lineStarts) {\n            // update prefix sum\n            this._lineStarts.removeValues(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n        }\n    }\n    _acceptInsertText(position, insertText) {\n        if (insertText.length === 0) {\n            // Nothing to insert\n            return;\n        }\n        const insertLines = splitLines(insertText);\n        if (insertLines.length === 1) {\n            // Inserting text on one line\n            this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1)\n                + insertLines[0]\n                + this._lines[position.lineNumber - 1].substring(position.column - 1));\n            return;\n        }\n        // Append overflowing text from first line to the end of text to insert\n        insertLines[insertLines.length - 1] += this._lines[position.lineNumber - 1].substring(position.column - 1);\n        // Delete overflowing text from first line and insert text on first line\n        this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1)\n            + insertLines[0]);\n        // Insert new lines & store lengths\n        const newLengths = new Uint32Array(insertLines.length - 1);\n        for (let i = 1; i < insertLines.length; i++) {\n            this._lines.splice(position.lineNumber + i - 1, 0, insertLines[i]);\n            newLengths[i - 1] = insertLines[i].length + this._eol.length;\n        }\n        if (this._lineStarts) {\n            // update prefix sum\n            this._lineStarts.insertValues(position.lineNumber, newLengths);\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CharacterClassifier } from '../core/characterClassifier.js';\nclass Uint8Matrix {\n    constructor(rows, cols, defaultValue) {\n        const data = new Uint8Array(rows * cols);\n        for (let i = 0, len = rows * cols; i < len; i++) {\n            data[i] = defaultValue;\n        }\n        this._data = data;\n        this.rows = rows;\n        this.cols = cols;\n    }\n    get(row, col) {\n        return this._data[row * this.cols + col];\n    }\n    set(row, col, value) {\n        this._data[row * this.cols + col] = value;\n    }\n}\nexport class StateMachine {\n    constructor(edges) {\n        let maxCharCode = 0;\n        let maxState = 0 /* State.Invalid */;\n        for (let i = 0, len = edges.length; i < len; i++) {\n            const [from, chCode, to] = edges[i];\n            if (chCode > maxCharCode) {\n                maxCharCode = chCode;\n            }\n            if (from > maxState) {\n                maxState = from;\n            }\n            if (to > maxState) {\n                maxState = to;\n            }\n        }\n        maxCharCode++;\n        maxState++;\n        const states = new Uint8Matrix(maxState, maxCharCode, 0 /* State.Invalid */);\n        for (let i = 0, len = edges.length; i < len; i++) {\n            const [from, chCode, to] = edges[i];\n            states.set(from, chCode, to);\n        }\n        this._states = states;\n        this._maxCharCode = maxCharCode;\n    }\n    nextState(currentState, chCode) {\n        if (chCode < 0 || chCode >= this._maxCharCode) {\n            return 0 /* State.Invalid */;\n        }\n        return this._states.get(currentState, chCode);\n    }\n}\n// State machine for http:// or https:// or file://\nlet _stateMachine = null;\nfunction getStateMachine() {\n    if (_stateMachine === null) {\n        _stateMachine = new StateMachine([\n            [1 /* State.Start */, 104 /* CharCode.h */, 2 /* State.H */],\n            [1 /* State.Start */, 72 /* CharCode.H */, 2 /* State.H */],\n            [1 /* State.Start */, 102 /* CharCode.f */, 6 /* State.F */],\n            [1 /* State.Start */, 70 /* CharCode.F */, 6 /* State.F */],\n            [2 /* State.H */, 116 /* CharCode.t */, 3 /* State.HT */],\n            [2 /* State.H */, 84 /* CharCode.T */, 3 /* State.HT */],\n            [3 /* State.HT */, 116 /* CharCode.t */, 4 /* State.HTT */],\n            [3 /* State.HT */, 84 /* CharCode.T */, 4 /* State.HTT */],\n            [4 /* State.HTT */, 112 /* CharCode.p */, 5 /* State.HTTP */],\n            [4 /* State.HTT */, 80 /* CharCode.P */, 5 /* State.HTTP */],\n            [5 /* State.HTTP */, 115 /* CharCode.s */, 9 /* State.BeforeColon */],\n            [5 /* State.HTTP */, 83 /* CharCode.S */, 9 /* State.BeforeColon */],\n            [5 /* State.HTTP */, 58 /* CharCode.Colon */, 10 /* State.AfterColon */],\n            [6 /* State.F */, 105 /* CharCode.i */, 7 /* State.FI */],\n            [6 /* State.F */, 73 /* CharCode.I */, 7 /* State.FI */],\n            [7 /* State.FI */, 108 /* CharCode.l */, 8 /* State.FIL */],\n            [7 /* State.FI */, 76 /* CharCode.L */, 8 /* State.FIL */],\n            [8 /* State.FIL */, 101 /* CharCode.e */, 9 /* State.BeforeColon */],\n            [8 /* State.FIL */, 69 /* CharCode.E */, 9 /* State.BeforeColon */],\n            [9 /* State.BeforeColon */, 58 /* CharCode.Colon */, 10 /* State.AfterColon */],\n            [10 /* State.AfterColon */, 47 /* CharCode.Slash */, 11 /* State.AlmostThere */],\n            [11 /* State.AlmostThere */, 47 /* CharCode.Slash */, 12 /* State.End */],\n        ]);\n    }\n    return _stateMachine;\n}\nlet _classifier = null;\nfunction getClassifier() {\n    if (_classifier === null) {\n        _classifier = new CharacterClassifier(0 /* CharacterClass.None */);\n        // allow-any-unicode-next-line\n        const FORCE_TERMINATION_CHARACTERS = ' \\t<>\\'\\\"、。｡､，．：；‘〈「『〔（［｛｢｣｝］）〕』」〉’｀～…';\n        for (let i = 0; i < FORCE_TERMINATION_CHARACTERS.length; i++) {\n            _classifier.set(FORCE_TERMINATION_CHARACTERS.charCodeAt(i), 1 /* CharacterClass.ForceTermination */);\n        }\n        const CANNOT_END_WITH_CHARACTERS = '.,;:';\n        for (let i = 0; i < CANNOT_END_WITH_CHARACTERS.length; i++) {\n            _classifier.set(CANNOT_END_WITH_CHARACTERS.charCodeAt(i), 2 /* CharacterClass.CannotEndIn */);\n        }\n    }\n    return _classifier;\n}\nexport class LinkComputer {\n    static _createLink(classifier, line, lineNumber, linkBeginIndex, linkEndIndex) {\n        // Do not allow to end link in certain characters...\n        let lastIncludedCharIndex = linkEndIndex - 1;\n        do {\n            const chCode = line.charCodeAt(lastIncludedCharIndex);\n            const chClass = classifier.get(chCode);\n            if (chClass !== 2 /* CharacterClass.CannotEndIn */) {\n                break;\n            }\n            lastIncludedCharIndex--;\n        } while (lastIncludedCharIndex > linkBeginIndex);\n        // Handle links enclosed in parens, square brackets and curlys.\n        if (linkBeginIndex > 0) {\n            const charCodeBeforeLink = line.charCodeAt(linkBeginIndex - 1);\n            const lastCharCodeInLink = line.charCodeAt(lastIncludedCharIndex);\n            if ((charCodeBeforeLink === 40 /* CharCode.OpenParen */ && lastCharCodeInLink === 41 /* CharCode.CloseParen */)\n                || (charCodeBeforeLink === 91 /* CharCode.OpenSquareBracket */ && lastCharCodeInLink === 93 /* CharCode.CloseSquareBracket */)\n                || (charCodeBeforeLink === 123 /* CharCode.OpenCurlyBrace */ && lastCharCodeInLink === 125 /* CharCode.CloseCurlyBrace */)) {\n                // Do not end in ) if ( is before the link start\n                // Do not end in ] if [ is before the link start\n                // Do not end in } if { is before the link start\n                lastIncludedCharIndex--;\n            }\n        }\n        return {\n            range: {\n                startLineNumber: lineNumber,\n                startColumn: linkBeginIndex + 1,\n                endLineNumber: lineNumber,\n                endColumn: lastIncludedCharIndex + 2\n            },\n            url: line.substring(linkBeginIndex, lastIncludedCharIndex + 1)\n        };\n    }\n    static computeLinks(model, stateMachine = getStateMachine()) {\n        const classifier = getClassifier();\n        const result = [];\n        for (let i = 1, lineCount = model.getLineCount(); i <= lineCount; i++) {\n            const line = model.getLineContent(i);\n            const len = line.length;\n            let j = 0;\n            let linkBeginIndex = 0;\n            let linkBeginChCode = 0;\n            let state = 1 /* State.Start */;\n            let hasOpenParens = false;\n            let hasOpenSquareBracket = false;\n            let inSquareBrackets = false;\n            let hasOpenCurlyBracket = false;\n            while (j < len) {\n                let resetStateMachine = false;\n                const chCode = line.charCodeAt(j);\n                if (state === 13 /* State.Accept */) {\n                    let chClass;\n                    switch (chCode) {\n                        case 40 /* CharCode.OpenParen */:\n                            hasOpenParens = true;\n                            chClass = 0 /* CharacterClass.None */;\n                            break;\n                        case 41 /* CharCode.CloseParen */:\n                            chClass = (hasOpenParens ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\n                            break;\n                        case 91 /* CharCode.OpenSquareBracket */:\n                            inSquareBrackets = true;\n                            hasOpenSquareBracket = true;\n                            chClass = 0 /* CharacterClass.None */;\n                            break;\n                        case 93 /* CharCode.CloseSquareBracket */:\n                            inSquareBrackets = false;\n                            chClass = (hasOpenSquareBracket ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\n                            break;\n                        case 123 /* CharCode.OpenCurlyBrace */:\n                            hasOpenCurlyBracket = true;\n                            chClass = 0 /* CharacterClass.None */;\n                            break;\n                        case 125 /* CharCode.CloseCurlyBrace */:\n                            chClass = (hasOpenCurlyBracket ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\n                            break;\n                        // The following three rules make it that ' or \" or ` are allowed inside links\n                        // only if the link is wrapped by some other quote character\n                        case 39 /* CharCode.SingleQuote */:\n                        case 34 /* CharCode.DoubleQuote */:\n                        case 96 /* CharCode.BackTick */:\n                            if (linkBeginChCode === chCode) {\n                                chClass = 1 /* CharacterClass.ForceTermination */;\n                            }\n                            else if (linkBeginChCode === 39 /* CharCode.SingleQuote */ || linkBeginChCode === 34 /* CharCode.DoubleQuote */ || linkBeginChCode === 96 /* CharCode.BackTick */) {\n                                chClass = 0 /* CharacterClass.None */;\n                            }\n                            else {\n                                chClass = 1 /* CharacterClass.ForceTermination */;\n                            }\n                            break;\n                        case 42 /* CharCode.Asterisk */:\n                            // `*` terminates a link if the link began with `*`\n                            chClass = (linkBeginChCode === 42 /* CharCode.Asterisk */) ? 1 /* CharacterClass.ForceTermination */ : 0 /* CharacterClass.None */;\n                            break;\n                        case 124 /* CharCode.Pipe */:\n                            // `|` terminates a link if the link began with `|`\n                            chClass = (linkBeginChCode === 124 /* CharCode.Pipe */) ? 1 /* CharacterClass.ForceTermination */ : 0 /* CharacterClass.None */;\n                            break;\n                        case 32 /* CharCode.Space */:\n                            // ` ` allow space in between [ and ]\n                            chClass = (inSquareBrackets ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\n                            break;\n                        default:\n                            chClass = classifier.get(chCode);\n                    }\n                    // Check if character terminates link\n                    if (chClass === 1 /* CharacterClass.ForceTermination */) {\n                        result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, j));\n                        resetStateMachine = true;\n                    }\n                }\n                else if (state === 12 /* State.End */) {\n                    let chClass;\n                    if (chCode === 91 /* CharCode.OpenSquareBracket */) {\n                        // Allow for the authority part to contain ipv6 addresses which contain [ and ]\n                        hasOpenSquareBracket = true;\n                        chClass = 0 /* CharacterClass.None */;\n                    }\n                    else {\n                        chClass = classifier.get(chCode);\n                    }\n                    // Check if character terminates link\n                    if (chClass === 1 /* CharacterClass.ForceTermination */) {\n                        resetStateMachine = true;\n                    }\n                    else {\n                        state = 13 /* State.Accept */;\n                    }\n                }\n                else {\n                    state = stateMachine.nextState(state, chCode);\n                    if (state === 0 /* State.Invalid */) {\n                        resetStateMachine = true;\n                    }\n                }\n                if (resetStateMachine) {\n                    state = 1 /* State.Start */;\n                    hasOpenParens = false;\n                    hasOpenSquareBracket = false;\n                    hasOpenCurlyBracket = false;\n                    // Record where the link started\n                    linkBeginIndex = j + 1;\n                    linkBeginChCode = chCode;\n                }\n                j++;\n            }\n            if (state === 13 /* State.Accept */) {\n                result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, len));\n            }\n        }\n        return result;\n    }\n}\n/**\n * Returns an array of all links contains in the provided\n * document. *Note* that this operation is computational\n * expensive and should not run in the UI thread.\n */\nexport function computeLinks(model) {\n    if (!model || typeof model.getLineCount !== 'function' || typeof model.getLineContent !== 'function') {\n        // Unknown caller!\n        return [];\n    }\n    return LinkComputer.computeLinks(model);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class BasicInplaceReplace {\n    constructor() {\n        this._defaultValueSet = [\n            ['true', 'false'],\n            ['True', 'False'],\n            ['Private', 'Public', 'Friend', 'ReadOnly', 'Partial', 'Protected', 'WriteOnly'],\n            ['public', 'protected', 'private'],\n        ];\n    }\n    navigateValueSet(range1, text1, range2, text2, up) {\n        if (range1 && text1) {\n            const result = this.doNavigateValueSet(text1, up);\n            if (result) {\n                return {\n                    range: range1,\n                    value: result\n                };\n            }\n        }\n        if (range2 && text2) {\n            const result = this.doNavigateValueSet(text2, up);\n            if (result) {\n                return {\n                    range: range2,\n                    value: result\n                };\n            }\n        }\n        return null;\n    }\n    doNavigateValueSet(text, up) {\n        const numberResult = this.numberReplace(text, up);\n        if (numberResult !== null) {\n            return numberResult;\n        }\n        return this.textReplace(text, up);\n    }\n    numberReplace(value, up) {\n        const precision = Math.pow(10, value.length - (value.lastIndexOf('.') + 1));\n        let n1 = Number(value);\n        const n2 = parseFloat(value);\n        if (!isNaN(n1) && !isNaN(n2) && n1 === n2) {\n            if (n1 === 0 && !up) {\n                return null; // don't do negative\n                //\t\t\t} else if(n1 === 9 && up) {\n                //\t\t\t\treturn null; // don't insert 10 into a number\n            }\n            else {\n                n1 = Math.floor(n1 * precision);\n                n1 += up ? precision : -precision;\n                return String(n1 / precision);\n            }\n        }\n        return null;\n    }\n    textReplace(value, up) {\n        return this.valueSetsReplace(this._defaultValueSet, value, up);\n    }\n    valueSetsReplace(valueSets, value, up) {\n        let result = null;\n        for (let i = 0, len = valueSets.length; result === null && i < len; i++) {\n            result = this.valueSetReplace(valueSets[i], value, up);\n        }\n        return result;\n    }\n    valueSetReplace(valueSet, value, up) {\n        let idx = valueSet.indexOf(value);\n        if (idx >= 0) {\n            idx += up ? +1 : -1;\n            if (idx < 0) {\n                idx = valueSet.length - 1;\n            }\n            else {\n                idx %= valueSet.length;\n            }\n            return valueSet[idx];\n        }\n        return null;\n    }\n}\nBasicInplaceReplace.INSTANCE = new BasicInplaceReplace();\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LcsDiff } from '../../../base/common/diff/diff.js';\nimport { LinesDiff } from './linesDiffComputer.js';\nimport { RangeMapping, DetailedLineRangeMapping } from './rangeMapping.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { Range } from '../core/range.js';\nimport { assertFn, checkAdjacentItems } from '../../../base/common/assert.js';\nimport { LineRange } from '../core/lineRange.js';\nconst MINIMUM_MATCHING_CHARACTER_LENGTH = 3;\nexport class LegacyLinesDiffComputer {\n    computeDiff(originalLines, modifiedLines, options) {\n        var _a;\n        const diffComputer = new DiffComputer(originalLines, modifiedLines, {\n            maxComputationTime: options.maxComputationTimeMs,\n            shouldIgnoreTrimWhitespace: options.ignoreTrimWhitespace,\n            shouldComputeCharChanges: true,\n            shouldMakePrettyDiff: true,\n            shouldPostProcessCharChanges: true,\n        });\n        const result = diffComputer.computeDiff();\n        const changes = [];\n        let lastChange = null;\n        for (const c of result.changes) {\n            let originalRange;\n            if (c.originalEndLineNumber === 0) {\n                // Insertion\n                originalRange = new LineRange(c.originalStartLineNumber + 1, c.originalStartLineNumber + 1);\n            }\n            else {\n                originalRange = new LineRange(c.originalStartLineNumber, c.originalEndLineNumber + 1);\n            }\n            let modifiedRange;\n            if (c.modifiedEndLineNumber === 0) {\n                // Deletion\n                modifiedRange = new LineRange(c.modifiedStartLineNumber + 1, c.modifiedStartLineNumber + 1);\n            }\n            else {\n                modifiedRange = new LineRange(c.modifiedStartLineNumber, c.modifiedEndLineNumber + 1);\n            }\n            let change = new DetailedLineRangeMapping(originalRange, modifiedRange, (_a = c.charChanges) === null || _a === void 0 ? void 0 : _a.map(c => new RangeMapping(new Range(c.originalStartLineNumber, c.originalStartColumn, c.originalEndLineNumber, c.originalEndColumn), new Range(c.modifiedStartLineNumber, c.modifiedStartColumn, c.modifiedEndLineNumber, c.modifiedEndColumn))));\n            if (lastChange) {\n                if (lastChange.modified.endLineNumberExclusive === change.modified.startLineNumber\n                    || lastChange.original.endLineNumberExclusive === change.original.startLineNumber) {\n                    // join touching diffs. Probably moving diffs up/down in the algorithm causes touching diffs.\n                    change = new DetailedLineRangeMapping(lastChange.original.join(change.original), lastChange.modified.join(change.modified), lastChange.innerChanges && change.innerChanges ?\n                        lastChange.innerChanges.concat(change.innerChanges) : undefined);\n                    changes.pop();\n                }\n            }\n            changes.push(change);\n            lastChange = change;\n        }\n        assertFn(() => {\n            return checkAdjacentItems(changes, (m1, m2) => m2.original.startLineNumber - m1.original.endLineNumberExclusive === m2.modified.startLineNumber - m1.modified.endLineNumberExclusive &&\n                // There has to be an unchanged line in between (otherwise both diffs should have been joined)\n                m1.original.endLineNumberExclusive < m2.original.startLineNumber &&\n                m1.modified.endLineNumberExclusive < m2.modified.startLineNumber);\n        });\n        return new LinesDiff(changes, [], result.quitEarly);\n    }\n}\nfunction computeDiff(originalSequence, modifiedSequence, continueProcessingPredicate, pretty) {\n    const diffAlgo = new LcsDiff(originalSequence, modifiedSequence, continueProcessingPredicate);\n    return diffAlgo.ComputeDiff(pretty);\n}\nclass LineSequence {\n    constructor(lines) {\n        const startColumns = [];\n        const endColumns = [];\n        for (let i = 0, length = lines.length; i < length; i++) {\n            startColumns[i] = getFirstNonBlankColumn(lines[i], 1);\n            endColumns[i] = getLastNonBlankColumn(lines[i], 1);\n        }\n        this.lines = lines;\n        this._startColumns = startColumns;\n        this._endColumns = endColumns;\n    }\n    getElements() {\n        const elements = [];\n        for (let i = 0, len = this.lines.length; i < len; i++) {\n            elements[i] = this.lines[i].substring(this._startColumns[i] - 1, this._endColumns[i] - 1);\n        }\n        return elements;\n    }\n    getStrictElement(index) {\n        return this.lines[index];\n    }\n    getStartLineNumber(i) {\n        return i + 1;\n    }\n    getEndLineNumber(i) {\n        return i + 1;\n    }\n    createCharSequence(shouldIgnoreTrimWhitespace, startIndex, endIndex) {\n        const charCodes = [];\n        const lineNumbers = [];\n        const columns = [];\n        let len = 0;\n        for (let index = startIndex; index <= endIndex; index++) {\n            const lineContent = this.lines[index];\n            const startColumn = (shouldIgnoreTrimWhitespace ? this._startColumns[index] : 1);\n            const endColumn = (shouldIgnoreTrimWhitespace ? this._endColumns[index] : lineContent.length + 1);\n            for (let col = startColumn; col < endColumn; col++) {\n                charCodes[len] = lineContent.charCodeAt(col - 1);\n                lineNumbers[len] = index + 1;\n                columns[len] = col;\n                len++;\n            }\n            if (!shouldIgnoreTrimWhitespace && index < endIndex) {\n                // Add \\n if trim whitespace is not ignored\n                charCodes[len] = 10 /* CharCode.LineFeed */;\n                lineNumbers[len] = index + 1;\n                columns[len] = lineContent.length + 1;\n                len++;\n            }\n        }\n        return new CharSequence(charCodes, lineNumbers, columns);\n    }\n}\nclass CharSequence {\n    constructor(charCodes, lineNumbers, columns) {\n        this._charCodes = charCodes;\n        this._lineNumbers = lineNumbers;\n        this._columns = columns;\n    }\n    toString() {\n        return ('[' + this._charCodes.map((s, idx) => (s === 10 /* CharCode.LineFeed */ ? '\\\\n' : String.fromCharCode(s)) + `-(${this._lineNumbers[idx]},${this._columns[idx]})`).join(', ') + ']');\n    }\n    _assertIndex(index, arr) {\n        if (index < 0 || index >= arr.length) {\n            throw new Error(`Illegal index`);\n        }\n    }\n    getElements() {\n        return this._charCodes;\n    }\n    getStartLineNumber(i) {\n        if (i > 0 && i === this._lineNumbers.length) {\n            // the start line number of the element after the last element\n            // is the end line number of the last element\n            return this.getEndLineNumber(i - 1);\n        }\n        this._assertIndex(i, this._lineNumbers);\n        return this._lineNumbers[i];\n    }\n    getEndLineNumber(i) {\n        if (i === -1) {\n            // the end line number of the element before the first element\n            // is the start line number of the first element\n            return this.getStartLineNumber(i + 1);\n        }\n        this._assertIndex(i, this._lineNumbers);\n        if (this._charCodes[i] === 10 /* CharCode.LineFeed */) {\n            return this._lineNumbers[i] + 1;\n        }\n        return this._lineNumbers[i];\n    }\n    getStartColumn(i) {\n        if (i > 0 && i === this._columns.length) {\n            // the start column of the element after the last element\n            // is the end column of the last element\n            return this.getEndColumn(i - 1);\n        }\n        this._assertIndex(i, this._columns);\n        return this._columns[i];\n    }\n    getEndColumn(i) {\n        if (i === -1) {\n            // the end column of the element before the first element\n            // is the start column of the first element\n            return this.getStartColumn(i + 1);\n        }\n        this._assertIndex(i, this._columns);\n        if (this._charCodes[i] === 10 /* CharCode.LineFeed */) {\n            return 1;\n        }\n        return this._columns[i] + 1;\n    }\n}\nclass CharChange {\n    constructor(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn) {\n        this.originalStartLineNumber = originalStartLineNumber;\n        this.originalStartColumn = originalStartColumn;\n        this.originalEndLineNumber = originalEndLineNumber;\n        this.originalEndColumn = originalEndColumn;\n        this.modifiedStartLineNumber = modifiedStartLineNumber;\n        this.modifiedStartColumn = modifiedStartColumn;\n        this.modifiedEndLineNumber = modifiedEndLineNumber;\n        this.modifiedEndColumn = modifiedEndColumn;\n    }\n    static createFromDiffChange(diffChange, originalCharSequence, modifiedCharSequence) {\n        const originalStartLineNumber = originalCharSequence.getStartLineNumber(diffChange.originalStart);\n        const originalStartColumn = originalCharSequence.getStartColumn(diffChange.originalStart);\n        const originalEndLineNumber = originalCharSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\n        const originalEndColumn = originalCharSequence.getEndColumn(diffChange.originalStart + diffChange.originalLength - 1);\n        const modifiedStartLineNumber = modifiedCharSequence.getStartLineNumber(diffChange.modifiedStart);\n        const modifiedStartColumn = modifiedCharSequence.getStartColumn(diffChange.modifiedStart);\n        const modifiedEndLineNumber = modifiedCharSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n        const modifiedEndColumn = modifiedCharSequence.getEndColumn(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n        return new CharChange(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn);\n    }\n}\nfunction postProcessCharChanges(rawChanges) {\n    if (rawChanges.length <= 1) {\n        return rawChanges;\n    }\n    const result = [rawChanges[0]];\n    let prevChange = result[0];\n    for (let i = 1, len = rawChanges.length; i < len; i++) {\n        const currChange = rawChanges[i];\n        const originalMatchingLength = currChange.originalStart - (prevChange.originalStart + prevChange.originalLength);\n        const modifiedMatchingLength = currChange.modifiedStart - (prevChange.modifiedStart + prevChange.modifiedLength);\n        // Both of the above should be equal, but the continueProcessingPredicate may prevent this from being true\n        const matchingLength = Math.min(originalMatchingLength, modifiedMatchingLength);\n        if (matchingLength < MINIMUM_MATCHING_CHARACTER_LENGTH) {\n            // Merge the current change into the previous one\n            prevChange.originalLength = (currChange.originalStart + currChange.originalLength) - prevChange.originalStart;\n            prevChange.modifiedLength = (currChange.modifiedStart + currChange.modifiedLength) - prevChange.modifiedStart;\n        }\n        else {\n            // Add the current change\n            result.push(currChange);\n            prevChange = currChange;\n        }\n    }\n    return result;\n}\nclass LineChange {\n    constructor(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges) {\n        this.originalStartLineNumber = originalStartLineNumber;\n        this.originalEndLineNumber = originalEndLineNumber;\n        this.modifiedStartLineNumber = modifiedStartLineNumber;\n        this.modifiedEndLineNumber = modifiedEndLineNumber;\n        this.charChanges = charChanges;\n    }\n    static createFromDiffResult(shouldIgnoreTrimWhitespace, diffChange, originalLineSequence, modifiedLineSequence, continueCharDiff, shouldComputeCharChanges, shouldPostProcessCharChanges) {\n        let originalStartLineNumber;\n        let originalEndLineNumber;\n        let modifiedStartLineNumber;\n        let modifiedEndLineNumber;\n        let charChanges = undefined;\n        if (diffChange.originalLength === 0) {\n            originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart) - 1;\n            originalEndLineNumber = 0;\n        }\n        else {\n            originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart);\n            originalEndLineNumber = originalLineSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\n        }\n        if (diffChange.modifiedLength === 0) {\n            modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart) - 1;\n            modifiedEndLineNumber = 0;\n        }\n        else {\n            modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart);\n            modifiedEndLineNumber = modifiedLineSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n        }\n        if (shouldComputeCharChanges && diffChange.originalLength > 0 && diffChange.originalLength < 20 && diffChange.modifiedLength > 0 && diffChange.modifiedLength < 20 && continueCharDiff()) {\n            // Compute character changes for diff chunks of at most 20 lines...\n            const originalCharSequence = originalLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.originalStart, diffChange.originalStart + diffChange.originalLength - 1);\n            const modifiedCharSequence = modifiedLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.modifiedStart, diffChange.modifiedStart + diffChange.modifiedLength - 1);\n            if (originalCharSequence.getElements().length > 0 && modifiedCharSequence.getElements().length > 0) {\n                let rawChanges = computeDiff(originalCharSequence, modifiedCharSequence, continueCharDiff, true).changes;\n                if (shouldPostProcessCharChanges) {\n                    rawChanges = postProcessCharChanges(rawChanges);\n                }\n                charChanges = [];\n                for (let i = 0, length = rawChanges.length; i < length; i++) {\n                    charChanges.push(CharChange.createFromDiffChange(rawChanges[i], originalCharSequence, modifiedCharSequence));\n                }\n            }\n        }\n        return new LineChange(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges);\n    }\n}\nexport class DiffComputer {\n    constructor(originalLines, modifiedLines, opts) {\n        this.shouldComputeCharChanges = opts.shouldComputeCharChanges;\n        this.shouldPostProcessCharChanges = opts.shouldPostProcessCharChanges;\n        this.shouldIgnoreTrimWhitespace = opts.shouldIgnoreTrimWhitespace;\n        this.shouldMakePrettyDiff = opts.shouldMakePrettyDiff;\n        this.originalLines = originalLines;\n        this.modifiedLines = modifiedLines;\n        this.original = new LineSequence(originalLines);\n        this.modified = new LineSequence(modifiedLines);\n        this.continueLineDiff = createContinueProcessingPredicate(opts.maxComputationTime);\n        this.continueCharDiff = createContinueProcessingPredicate(opts.maxComputationTime === 0 ? 0 : Math.min(opts.maxComputationTime, 5000)); // never run after 5s for character changes...\n    }\n    computeDiff() {\n        if (this.original.lines.length === 1 && this.original.lines[0].length === 0) {\n            // empty original => fast path\n            if (this.modified.lines.length === 1 && this.modified.lines[0].length === 0) {\n                return {\n                    quitEarly: false,\n                    changes: []\n                };\n            }\n            return {\n                quitEarly: false,\n                changes: [{\n                        originalStartLineNumber: 1,\n                        originalEndLineNumber: 1,\n                        modifiedStartLineNumber: 1,\n                        modifiedEndLineNumber: this.modified.lines.length,\n                        charChanges: undefined\n                    }]\n            };\n        }\n        if (this.modified.lines.length === 1 && this.modified.lines[0].length === 0) {\n            // empty modified => fast path\n            return {\n                quitEarly: false,\n                changes: [{\n                        originalStartLineNumber: 1,\n                        originalEndLineNumber: this.original.lines.length,\n                        modifiedStartLineNumber: 1,\n                        modifiedEndLineNumber: 1,\n                        charChanges: undefined\n                    }]\n            };\n        }\n        const diffResult = computeDiff(this.original, this.modified, this.continueLineDiff, this.shouldMakePrettyDiff);\n        const rawChanges = diffResult.changes;\n        const quitEarly = diffResult.quitEarly;\n        // The diff is always computed with ignoring trim whitespace\n        // This ensures we get the prettiest diff\n        if (this.shouldIgnoreTrimWhitespace) {\n            const lineChanges = [];\n            for (let i = 0, length = rawChanges.length; i < length; i++) {\n                lineChanges.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, rawChanges[i], this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));\n            }\n            return {\n                quitEarly: quitEarly,\n                changes: lineChanges\n            };\n        }\n        // Need to post-process and introduce changes where the trim whitespace is different\n        // Note that we are looping starting at -1 to also cover the lines before the first change\n        const result = [];\n        let originalLineIndex = 0;\n        let modifiedLineIndex = 0;\n        for (let i = -1 /* !!!! */, len = rawChanges.length; i < len; i++) {\n            const nextChange = (i + 1 < len ? rawChanges[i + 1] : null);\n            const originalStop = (nextChange ? nextChange.originalStart : this.originalLines.length);\n            const modifiedStop = (nextChange ? nextChange.modifiedStart : this.modifiedLines.length);\n            while (originalLineIndex < originalStop && modifiedLineIndex < modifiedStop) {\n                const originalLine = this.originalLines[originalLineIndex];\n                const modifiedLine = this.modifiedLines[modifiedLineIndex];\n                if (originalLine !== modifiedLine) {\n                    // These lines differ only in trim whitespace\n                    // Check the leading whitespace\n                    {\n                        let originalStartColumn = getFirstNonBlankColumn(originalLine, 1);\n                        let modifiedStartColumn = getFirstNonBlankColumn(modifiedLine, 1);\n                        while (originalStartColumn > 1 && modifiedStartColumn > 1) {\n                            const originalChar = originalLine.charCodeAt(originalStartColumn - 2);\n                            const modifiedChar = modifiedLine.charCodeAt(modifiedStartColumn - 2);\n                            if (originalChar !== modifiedChar) {\n                                break;\n                            }\n                            originalStartColumn--;\n                            modifiedStartColumn--;\n                        }\n                        if (originalStartColumn > 1 || modifiedStartColumn > 1) {\n                            this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, 1, originalStartColumn, modifiedLineIndex + 1, 1, modifiedStartColumn);\n                        }\n                    }\n                    // Check the trailing whitespace\n                    {\n                        let originalEndColumn = getLastNonBlankColumn(originalLine, 1);\n                        let modifiedEndColumn = getLastNonBlankColumn(modifiedLine, 1);\n                        const originalMaxColumn = originalLine.length + 1;\n                        const modifiedMaxColumn = modifiedLine.length + 1;\n                        while (originalEndColumn < originalMaxColumn && modifiedEndColumn < modifiedMaxColumn) {\n                            const originalChar = originalLine.charCodeAt(originalEndColumn - 1);\n                            const modifiedChar = originalLine.charCodeAt(modifiedEndColumn - 1);\n                            if (originalChar !== modifiedChar) {\n                                break;\n                            }\n                            originalEndColumn++;\n                            modifiedEndColumn++;\n                        }\n                        if (originalEndColumn < originalMaxColumn || modifiedEndColumn < modifiedMaxColumn) {\n                            this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, originalEndColumn, originalMaxColumn, modifiedLineIndex + 1, modifiedEndColumn, modifiedMaxColumn);\n                        }\n                    }\n                }\n                originalLineIndex++;\n                modifiedLineIndex++;\n            }\n            if (nextChange) {\n                // Emit the actual change\n                result.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, nextChange, this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));\n                originalLineIndex += nextChange.originalLength;\n                modifiedLineIndex += nextChange.modifiedLength;\n            }\n        }\n        return {\n            quitEarly: quitEarly,\n            changes: result\n        };\n    }\n    _pushTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {\n        if (this._mergeTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn)) {\n            // Merged into previous\n            return;\n        }\n        let charChanges = undefined;\n        if (this.shouldComputeCharChanges) {\n            charChanges = [new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn)];\n        }\n        result.push(new LineChange(originalLineNumber, originalLineNumber, modifiedLineNumber, modifiedLineNumber, charChanges));\n    }\n    _mergeTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {\n        const len = result.length;\n        if (len === 0) {\n            return false;\n        }\n        const prevChange = result[len - 1];\n        if (prevChange.originalEndLineNumber === 0 || prevChange.modifiedEndLineNumber === 0) {\n            // Don't merge with inserts/deletes\n            return false;\n        }\n        if (prevChange.originalEndLineNumber === originalLineNumber && prevChange.modifiedEndLineNumber === modifiedLineNumber) {\n            if (this.shouldComputeCharChanges && prevChange.charChanges) {\n                prevChange.charChanges.push(new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn));\n            }\n            return true;\n        }\n        if (prevChange.originalEndLineNumber + 1 === originalLineNumber && prevChange.modifiedEndLineNumber + 1 === modifiedLineNumber) {\n            prevChange.originalEndLineNumber = originalLineNumber;\n            prevChange.modifiedEndLineNumber = modifiedLineNumber;\n            if (this.shouldComputeCharChanges && prevChange.charChanges) {\n                prevChange.charChanges.push(new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn));\n            }\n            return true;\n        }\n        return false;\n    }\n}\nfunction getFirstNonBlankColumn(txt, defaultValue) {\n    const r = strings.firstNonWhitespaceIndex(txt);\n    if (r === -1) {\n        return defaultValue;\n    }\n    return r + 1;\n}\nfunction getLastNonBlankColumn(txt, defaultValue) {\n    const r = strings.lastNonWhitespaceIndex(txt);\n    if (r === -1) {\n        return defaultValue;\n    }\n    return r + 2;\n}\nfunction createContinueProcessingPredicate(maximumRuntime) {\n    if (maximumRuntime === 0) {\n        return () => true;\n    }\n    const startTime = Date.now();\n    return () => {\n        return Date.now() - startTime < maximumRuntime;\n    };\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Color, HSLA } from '../../../base/common/color.js';\nfunction _parseCaptureGroups(captureGroups) {\n    const values = [];\n    for (const captureGroup of captureGroups) {\n        const parsedNumber = Number(captureGroup);\n        if (parsedNumber || parsedNumber === 0 && captureGroup.replace(/\\s/g, '') !== '') {\n            values.push(parsedNumber);\n        }\n    }\n    return values;\n}\nfunction _toIColor(r, g, b, a) {\n    return {\n        red: r / 255,\n        blue: b / 255,\n        green: g / 255,\n        alpha: a\n    };\n}\nfunction _findRange(model, match) {\n    const index = match.index;\n    const length = match[0].length;\n    if (!index) {\n        return;\n    }\n    const startPosition = model.positionAt(index);\n    const range = {\n        startLineNumber: startPosition.lineNumber,\n        startColumn: startPosition.column,\n        endLineNumber: startPosition.lineNumber,\n        endColumn: startPosition.column + length\n    };\n    return range;\n}\nfunction _findHexColorInformation(range, hexValue) {\n    if (!range) {\n        return;\n    }\n    const parsedHexColor = Color.Format.CSS.parseHex(hexValue);\n    if (!parsedHexColor) {\n        return;\n    }\n    return {\n        range: range,\n        color: _toIColor(parsedHexColor.rgba.r, parsedHexColor.rgba.g, parsedHexColor.rgba.b, parsedHexColor.rgba.a)\n    };\n}\nfunction _findRGBColorInformation(range, matches, isAlpha) {\n    if (!range || matches.length !== 1) {\n        return;\n    }\n    const match = matches[0];\n    const captureGroups = match.values();\n    const parsedRegex = _parseCaptureGroups(captureGroups);\n    return {\n        range: range,\n        color: _toIColor(parsedRegex[0], parsedRegex[1], parsedRegex[2], isAlpha ? parsedRegex[3] : 1)\n    };\n}\nfunction _findHSLColorInformation(range, matches, isAlpha) {\n    if (!range || matches.length !== 1) {\n        return;\n    }\n    const match = matches[0];\n    const captureGroups = match.values();\n    const parsedRegex = _parseCaptureGroups(captureGroups);\n    const colorEquivalent = new Color(new HSLA(parsedRegex[0], parsedRegex[1] / 100, parsedRegex[2] / 100, isAlpha ? parsedRegex[3] : 1));\n    return {\n        range: range,\n        color: _toIColor(colorEquivalent.rgba.r, colorEquivalent.rgba.g, colorEquivalent.rgba.b, colorEquivalent.rgba.a)\n    };\n}\nfunction _findMatches(model, regex) {\n    if (typeof model === 'string') {\n        return [...model.matchAll(regex)];\n    }\n    else {\n        return model.findMatches(regex);\n    }\n}\nfunction computeColors(model) {\n    const result = [];\n    // Early validation for RGB and HSL\n    const initialValidationRegex = /\\b(rgb|rgba|hsl|hsla)(\\([0-9\\s,.\\%]*\\))|(#)([A-Fa-f0-9]{3})\\b|(#)([A-Fa-f0-9]{4})\\b|(#)([A-Fa-f0-9]{6})\\b|(#)([A-Fa-f0-9]{8})\\b/gm;\n    const initialValidationMatches = _findMatches(model, initialValidationRegex);\n    // Potential colors have been found, validate the parameters\n    if (initialValidationMatches.length > 0) {\n        for (const initialMatch of initialValidationMatches) {\n            const initialCaptureGroups = initialMatch.filter(captureGroup => captureGroup !== undefined);\n            const colorScheme = initialCaptureGroups[1];\n            const colorParameters = initialCaptureGroups[2];\n            if (!colorParameters) {\n                continue;\n            }\n            let colorInformation;\n            if (colorScheme === 'rgb') {\n                const regexParameters = /^\\(\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*\\)$/gm;\n                colorInformation = _findRGBColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), false);\n            }\n            else if (colorScheme === 'rgba') {\n                const regexParameters = /^\\(\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(0[.][0-9]+|[.][0-9]+|[01][.]|[01])\\s*\\)$/gm;\n                colorInformation = _findRGBColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), true);\n            }\n            else if (colorScheme === 'hsl') {\n                const regexParameters = /^\\(\\s*(36[0]|3[0-5][0-9]|[12][0-9][0-9]|[1-9]?[0-9])\\s*,\\s*(100|\\d{1,2}[.]\\d*|\\d{1,2})%\\s*,\\s*(100|\\d{1,2}[.]\\d*|\\d{1,2})%\\s*\\)$/gm;\n                colorInformation = _findHSLColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), false);\n            }\n            else if (colorScheme === 'hsla') {\n                const regexParameters = /^\\(\\s*(36[0]|3[0-5][0-9]|[12][0-9][0-9]|[1-9]?[0-9])\\s*,\\s*(100|\\d{1,2}[.]\\d*|\\d{1,2})%\\s*,\\s*(100|\\d{1,2}[.]\\d*|\\d{1,2})%\\s*,\\s*(0[.][0-9]+|[.][0-9]+|[01][.]|[01])\\s*\\)$/gm;\n                colorInformation = _findHSLColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), true);\n            }\n            else if (colorScheme === '#') {\n                colorInformation = _findHexColorInformation(_findRange(model, initialMatch), colorScheme + colorParameters);\n            }\n            if (colorInformation) {\n                result.push(colorInformation);\n            }\n        }\n    }\n    return result;\n}\n/**\n * Returns an array of all default document colors in the provided document\n */\nexport function computeDefaultDocumentColors(model) {\n    if (!model || typeof model.getValue !== 'function' || typeof model.positionAt !== 'function') {\n        // Unknown caller!\n        return [];\n    }\n    return computeColors(model);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nconst markRegex = new RegExp('\\\\bMARK:\\\\s*(.*)$', 'd');\nconst trimDashesRegex = /^-+|-+$/g;\n/**\n * Find section headers in the model.\n *\n * @param model the text model to search in\n * @param options options to search with\n * @returns an array of section headers\n */\nexport function findSectionHeaders(model, options) {\n    var _a;\n    let headers = [];\n    if (options.findRegionSectionHeaders && ((_a = options.foldingRules) === null || _a === void 0 ? void 0 : _a.markers)) {\n        const regionHeaders = collectRegionHeaders(model, options);\n        headers = headers.concat(regionHeaders);\n    }\n    if (options.findMarkSectionHeaders) {\n        const markHeaders = collectMarkHeaders(model);\n        headers = headers.concat(markHeaders);\n    }\n    return headers;\n}\nfunction collectRegionHeaders(model, options) {\n    const regionHeaders = [];\n    const endLineNumber = model.getLineCount();\n    for (let lineNumber = 1; lineNumber <= endLineNumber; lineNumber++) {\n        const lineContent = model.getLineContent(lineNumber);\n        const match = lineContent.match(options.foldingRules.markers.start);\n        if (match) {\n            const range = { startLineNumber: lineNumber, startColumn: match[0].length + 1, endLineNumber: lineNumber, endColumn: lineContent.length + 1 };\n            if (range.endColumn > range.startColumn) {\n                const sectionHeader = {\n                    range,\n                    ...getHeaderText(lineContent.substring(match[0].length)),\n                    shouldBeInComments: false\n                };\n                if (sectionHeader.text || sectionHeader.hasSeparatorLine) {\n                    regionHeaders.push(sectionHeader);\n                }\n            }\n        }\n    }\n    return regionHeaders;\n}\nfunction collectMarkHeaders(model) {\n    const markHeaders = [];\n    const endLineNumber = model.getLineCount();\n    for (let lineNumber = 1; lineNumber <= endLineNumber; lineNumber++) {\n        const lineContent = model.getLineContent(lineNumber);\n        addMarkHeaderIfFound(lineContent, lineNumber, markHeaders);\n    }\n    return markHeaders;\n}\nfunction addMarkHeaderIfFound(lineContent, lineNumber, sectionHeaders) {\n    markRegex.lastIndex = 0;\n    const match = markRegex.exec(lineContent);\n    if (match) {\n        const column = match.indices[1][0] + 1;\n        const endColumn = match.indices[1][1] + 1;\n        const range = { startLineNumber: lineNumber, startColumn: column, endLineNumber: lineNumber, endColumn: endColumn };\n        if (range.endColumn > range.startColumn) {\n            const sectionHeader = {\n                range,\n                ...getHeaderText(match[1]),\n                shouldBeInComments: true\n            };\n            if (sectionHeader.text || sectionHeader.hasSeparatorLine) {\n                sectionHeaders.push(sectionHeader);\n            }\n        }\n    }\n}\nfunction getHeaderText(text) {\n    text = text.trim();\n    const hasSeparatorLine = text.startsWith('-');\n    text = text.replace(trimDashesRegex, '');\n    return { text, hasSeparatorLine };\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { stringDiff } from '../../../base/common/diff/diff.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { MirrorTextModel as BaseMirrorModel } from '../model/mirrorTextModel.js';\nimport { ensureValidWordDefinition, getWordAtText } from '../core/wordHelper.js';\nimport { computeLinks } from '../languages/linkComputer.js';\nimport { BasicInplaceReplace } from '../languages/supports/inplaceReplaceSupport.js';\nimport { createMonacoBaseAPI } from './editorBaseApi.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\nimport { UnicodeTextModelHighlighter } from './unicodeTextModelHighlighter.js';\nimport { linesDiffComputers } from '../diff/linesDiffComputers.js';\nimport { createProxyObject, getAllMethodNames } from '../../../base/common/objects.js';\nimport { computeDefaultDocumentColors } from '../languages/defaultDocumentColorsComputer.js';\nimport { findSectionHeaders } from './findSectionHeaders.js';\n/**\n * @internal\n */\nclass MirrorModel extends BaseMirrorModel {\n    get uri() {\n        return this._uri;\n    }\n    get eol() {\n        return this._eol;\n    }\n    getValue() {\n        return this.getText();\n    }\n    findMatches(regex) {\n        const matches = [];\n        for (let i = 0; i < this._lines.length; i++) {\n            const line = this._lines[i];\n            const offsetToAdd = this.offsetAt(new Position(i + 1, 1));\n            const iteratorOverMatches = line.matchAll(regex);\n            for (const match of iteratorOverMatches) {\n                if (match.index || match.index === 0) {\n                    match.index = match.index + offsetToAdd;\n                }\n                matches.push(match);\n            }\n        }\n        return matches;\n    }\n    getLinesContent() {\n        return this._lines.slice(0);\n    }\n    getLineCount() {\n        return this._lines.length;\n    }\n    getLineContent(lineNumber) {\n        return this._lines[lineNumber - 1];\n    }\n    getWordAtPosition(position, wordDefinition) {\n        const wordAtText = getWordAtText(position.column, ensureValidWordDefinition(wordDefinition), this._lines[position.lineNumber - 1], 0);\n        if (wordAtText) {\n            return new Range(position.lineNumber, wordAtText.startColumn, position.lineNumber, wordAtText.endColumn);\n        }\n        return null;\n    }\n    words(wordDefinition) {\n        const lines = this._lines;\n        const wordenize = this._wordenize.bind(this);\n        let lineNumber = 0;\n        let lineText = '';\n        let wordRangesIdx = 0;\n        let wordRanges = [];\n        return {\n            *[Symbol.iterator]() {\n                while (true) {\n                    if (wordRangesIdx < wordRanges.length) {\n                        const value = lineText.substring(wordRanges[wordRangesIdx].start, wordRanges[wordRangesIdx].end);\n                        wordRangesIdx += 1;\n                        yield value;\n                    }\n                    else {\n                        if (lineNumber < lines.length) {\n                            lineText = lines[lineNumber];\n                            wordRanges = wordenize(lineText, wordDefinition);\n                            wordRangesIdx = 0;\n                            lineNumber += 1;\n                        }\n                        else {\n                            break;\n                        }\n                    }\n                }\n            }\n        };\n    }\n    getLineWords(lineNumber, wordDefinition) {\n        const content = this._lines[lineNumber - 1];\n        const ranges = this._wordenize(content, wordDefinition);\n        const words = [];\n        for (const range of ranges) {\n            words.push({\n                word: content.substring(range.start, range.end),\n                startColumn: range.start + 1,\n                endColumn: range.end + 1\n            });\n        }\n        return words;\n    }\n    _wordenize(content, wordDefinition) {\n        const result = [];\n        let match;\n        wordDefinition.lastIndex = 0; // reset lastIndex just to be sure\n        while (match = wordDefinition.exec(content)) {\n            if (match[0].length === 0) {\n                // it did match the empty string\n                break;\n            }\n            result.push({ start: match.index, end: match.index + match[0].length });\n        }\n        return result;\n    }\n    getValueInRange(range) {\n        range = this._validateRange(range);\n        if (range.startLineNumber === range.endLineNumber) {\n            return this._lines[range.startLineNumber - 1].substring(range.startColumn - 1, range.endColumn - 1);\n        }\n        const lineEnding = this._eol;\n        const startLineIndex = range.startLineNumber - 1;\n        const endLineIndex = range.endLineNumber - 1;\n        const resultLines = [];\n        resultLines.push(this._lines[startLineIndex].substring(range.startColumn - 1));\n        for (let i = startLineIndex + 1; i < endLineIndex; i++) {\n            resultLines.push(this._lines[i]);\n        }\n        resultLines.push(this._lines[endLineIndex].substring(0, range.endColumn - 1));\n        return resultLines.join(lineEnding);\n    }\n    offsetAt(position) {\n        position = this._validatePosition(position);\n        this._ensureLineStarts();\n        return this._lineStarts.getPrefixSum(position.lineNumber - 2) + (position.column - 1);\n    }\n    positionAt(offset) {\n        offset = Math.floor(offset);\n        offset = Math.max(0, offset);\n        this._ensureLineStarts();\n        const out = this._lineStarts.getIndexOf(offset);\n        const lineLength = this._lines[out.index].length;\n        // Ensure we return a valid position\n        return {\n            lineNumber: 1 + out.index,\n            column: 1 + Math.min(out.remainder, lineLength)\n        };\n    }\n    _validateRange(range) {\n        const start = this._validatePosition({ lineNumber: range.startLineNumber, column: range.startColumn });\n        const end = this._validatePosition({ lineNumber: range.endLineNumber, column: range.endColumn });\n        if (start.lineNumber !== range.startLineNumber\n            || start.column !== range.startColumn\n            || end.lineNumber !== range.endLineNumber\n            || end.column !== range.endColumn) {\n            return {\n                startLineNumber: start.lineNumber,\n                startColumn: start.column,\n                endLineNumber: end.lineNumber,\n                endColumn: end.column\n            };\n        }\n        return range;\n    }\n    _validatePosition(position) {\n        if (!Position.isIPosition(position)) {\n            throw new Error('bad position');\n        }\n        let { lineNumber, column } = position;\n        let hasChanged = false;\n        if (lineNumber < 1) {\n            lineNumber = 1;\n            column = 1;\n            hasChanged = true;\n        }\n        else if (lineNumber > this._lines.length) {\n            lineNumber = this._lines.length;\n            column = this._lines[lineNumber - 1].length + 1;\n            hasChanged = true;\n        }\n        else {\n            const maxCharacter = this._lines[lineNumber - 1].length + 1;\n            if (column < 1) {\n                column = 1;\n                hasChanged = true;\n            }\n            else if (column > maxCharacter) {\n                column = maxCharacter;\n                hasChanged = true;\n            }\n        }\n        if (!hasChanged) {\n            return position;\n        }\n        else {\n            return { lineNumber, column };\n        }\n    }\n}\n/**\n * @internal\n */\nexport class EditorSimpleWorker {\n    constructor(host, foreignModuleFactory) {\n        this._host = host;\n        this._models = Object.create(null);\n        this._foreignModuleFactory = foreignModuleFactory;\n        this._foreignModule = null;\n    }\n    dispose() {\n        this._models = Object.create(null);\n    }\n    _getModel(uri) {\n        return this._models[uri];\n    }\n    _getModels() {\n        const all = [];\n        Object.keys(this._models).forEach((key) => all.push(this._models[key]));\n        return all;\n    }\n    acceptNewModel(data) {\n        this._models[data.url] = new MirrorModel(URI.parse(data.url), data.lines, data.EOL, data.versionId);\n    }\n    acceptModelChanged(strURL, e) {\n        if (!this._models[strURL]) {\n            return;\n        }\n        const model = this._models[strURL];\n        model.onEvents(e);\n    }\n    acceptRemovedModel(strURL) {\n        if (!this._models[strURL]) {\n            return;\n        }\n        delete this._models[strURL];\n    }\n    async computeUnicodeHighlights(url, options, range) {\n        const model = this._getModel(url);\n        if (!model) {\n            return { ranges: [], hasMore: false, ambiguousCharacterCount: 0, invisibleCharacterCount: 0, nonBasicAsciiCharacterCount: 0 };\n        }\n        return UnicodeTextModelHighlighter.computeUnicodeHighlights(model, options, range);\n    }\n    async findSectionHeaders(url, options) {\n        const model = this._getModel(url);\n        if (!model) {\n            return [];\n        }\n        return findSectionHeaders(model, options);\n    }\n    // ---- BEGIN diff --------------------------------------------------------------------------\n    async computeDiff(originalUrl, modifiedUrl, options, algorithm) {\n        const original = this._getModel(originalUrl);\n        const modified = this._getModel(modifiedUrl);\n        if (!original || !modified) {\n            return null;\n        }\n        const result = EditorSimpleWorker.computeDiff(original, modified, options, algorithm);\n        return result;\n    }\n    static computeDiff(originalTextModel, modifiedTextModel, options, algorithm) {\n        const diffAlgorithm = algorithm === 'advanced' ? linesDiffComputers.getDefault() : linesDiffComputers.getLegacy();\n        const originalLines = originalTextModel.getLinesContent();\n        const modifiedLines = modifiedTextModel.getLinesContent();\n        const result = diffAlgorithm.computeDiff(originalLines, modifiedLines, options);\n        const identical = (result.changes.length > 0 ? false : this._modelsAreIdentical(originalTextModel, modifiedTextModel));\n        function getLineChanges(changes) {\n            return changes.map(m => {\n                var _a;\n                return ([m.original.startLineNumber, m.original.endLineNumberExclusive, m.modified.startLineNumber, m.modified.endLineNumberExclusive, (_a = m.innerChanges) === null || _a === void 0 ? void 0 : _a.map(m => [\n                        m.originalRange.startLineNumber,\n                        m.originalRange.startColumn,\n                        m.originalRange.endLineNumber,\n                        m.originalRange.endColumn,\n                        m.modifiedRange.startLineNumber,\n                        m.modifiedRange.startColumn,\n                        m.modifiedRange.endLineNumber,\n                        m.modifiedRange.endColumn,\n                    ])]);\n            });\n        }\n        return {\n            identical,\n            quitEarly: result.hitTimeout,\n            changes: getLineChanges(result.changes),\n            moves: result.moves.map(m => ([\n                m.lineRangeMapping.original.startLineNumber,\n                m.lineRangeMapping.original.endLineNumberExclusive,\n                m.lineRangeMapping.modified.startLineNumber,\n                m.lineRangeMapping.modified.endLineNumberExclusive,\n                getLineChanges(m.changes)\n            ])),\n        };\n    }\n    static _modelsAreIdentical(original, modified) {\n        const originalLineCount = original.getLineCount();\n        const modifiedLineCount = modified.getLineCount();\n        if (originalLineCount !== modifiedLineCount) {\n            return false;\n        }\n        for (let line = 1; line <= originalLineCount; line++) {\n            const originalLine = original.getLineContent(line);\n            const modifiedLine = modified.getLineContent(line);\n            if (originalLine !== modifiedLine) {\n                return false;\n            }\n        }\n        return true;\n    }\n    async computeMoreMinimalEdits(modelUrl, edits, pretty) {\n        const model = this._getModel(modelUrl);\n        if (!model) {\n            return edits;\n        }\n        const result = [];\n        let lastEol = undefined;\n        edits = edits.slice(0).sort((a, b) => {\n            if (a.range && b.range) {\n                return Range.compareRangesUsingStarts(a.range, b.range);\n            }\n            // eol only changes should go to the end\n            const aRng = a.range ? 0 : 1;\n            const bRng = b.range ? 0 : 1;\n            return aRng - bRng;\n        });\n        // merge adjacent edits\n        let writeIndex = 0;\n        for (let readIndex = 1; readIndex < edits.length; readIndex++) {\n            if (Range.getEndPosition(edits[writeIndex].range).equals(Range.getStartPosition(edits[readIndex].range))) {\n                edits[writeIndex].range = Range.fromPositions(Range.getStartPosition(edits[writeIndex].range), Range.getEndPosition(edits[readIndex].range));\n                edits[writeIndex].text += edits[readIndex].text;\n            }\n            else {\n                writeIndex++;\n                edits[writeIndex] = edits[readIndex];\n            }\n        }\n        edits.length = writeIndex + 1;\n        for (let { range, text, eol } of edits) {\n            if (typeof eol === 'number') {\n                lastEol = eol;\n            }\n            if (Range.isEmpty(range) && !text) {\n                // empty change\n                continue;\n            }\n            const original = model.getValueInRange(range);\n            text = text.replace(/\\r\\n|\\n|\\r/g, model.eol);\n            if (original === text) {\n                // noop\n                continue;\n            }\n            // make sure diff won't take too long\n            if (Math.max(text.length, original.length) > EditorSimpleWorker._diffLimit) {\n                result.push({ range, text });\n                continue;\n            }\n            // compute diff between original and edit.text\n            const changes = stringDiff(original, text, pretty);\n            const editOffset = model.offsetAt(Range.lift(range).getStartPosition());\n            for (const change of changes) {\n                const start = model.positionAt(editOffset + change.originalStart);\n                const end = model.positionAt(editOffset + change.originalStart + change.originalLength);\n                const newEdit = {\n                    text: text.substr(change.modifiedStart, change.modifiedLength),\n                    range: { startLineNumber: start.lineNumber, startColumn: start.column, endLineNumber: end.lineNumber, endColumn: end.column }\n                };\n                if (model.getValueInRange(newEdit.range) !== newEdit.text) {\n                    result.push(newEdit);\n                }\n            }\n        }\n        if (typeof lastEol === 'number') {\n            result.push({ eol: lastEol, text: '', range: { startLineNumber: 0, startColumn: 0, endLineNumber: 0, endColumn: 0 } });\n        }\n        return result;\n    }\n    // ---- END minimal edits ---------------------------------------------------------------\n    async computeLinks(modelUrl) {\n        const model = this._getModel(modelUrl);\n        if (!model) {\n            return null;\n        }\n        return computeLinks(model);\n    }\n    // --- BEGIN default document colors -----------------------------------------------------------\n    async computeDefaultDocumentColors(modelUrl) {\n        const model = this._getModel(modelUrl);\n        if (!model) {\n            return null;\n        }\n        return computeDefaultDocumentColors(model);\n    }\n    async textualSuggest(modelUrls, leadingWord, wordDef, wordDefFlags) {\n        const sw = new StopWatch();\n        const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n        const seen = new Set();\n        outer: for (const url of modelUrls) {\n            const model = this._getModel(url);\n            if (!model) {\n                continue;\n            }\n            for (const word of model.words(wordDefRegExp)) {\n                if (word === leadingWord || !isNaN(Number(word))) {\n                    continue;\n                }\n                seen.add(word);\n                if (seen.size > EditorSimpleWorker._suggestionsLimit) {\n                    break outer;\n                }\n            }\n        }\n        return { words: Array.from(seen), duration: sw.elapsed() };\n    }\n    // ---- END suggest --------------------------------------------------------------------------\n    //#region -- word ranges --\n    async computeWordRanges(modelUrl, range, wordDef, wordDefFlags) {\n        const model = this._getModel(modelUrl);\n        if (!model) {\n            return Object.create(null);\n        }\n        const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n        const result = Object.create(null);\n        for (let line = range.startLineNumber; line < range.endLineNumber; line++) {\n            const words = model.getLineWords(line, wordDefRegExp);\n            for (const word of words) {\n                if (!isNaN(Number(word.word))) {\n                    continue;\n                }\n                let array = result[word.word];\n                if (!array) {\n                    array = [];\n                    result[word.word] = array;\n                }\n                array.push({\n                    startLineNumber: line,\n                    startColumn: word.startColumn,\n                    endLineNumber: line,\n                    endColumn: word.endColumn\n                });\n            }\n        }\n        return result;\n    }\n    //#endregion\n    async navigateValueSet(modelUrl, range, up, wordDef, wordDefFlags) {\n        const model = this._getModel(modelUrl);\n        if (!model) {\n            return null;\n        }\n        const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n        if (range.startColumn === range.endColumn) {\n            range = {\n                startLineNumber: range.startLineNumber,\n                startColumn: range.startColumn,\n                endLineNumber: range.endLineNumber,\n                endColumn: range.endColumn + 1\n            };\n        }\n        const selectionText = model.getValueInRange(range);\n        const wordRange = model.getWordAtPosition({ lineNumber: range.startLineNumber, column: range.startColumn }, wordDefRegExp);\n        if (!wordRange) {\n            return null;\n        }\n        const word = model.getValueInRange(wordRange);\n        const result = BasicInplaceReplace.INSTANCE.navigateValueSet(range, selectionText, wordRange, word, up);\n        return result;\n    }\n    // ---- BEGIN foreign module support --------------------------------------------------------------------------\n    loadForeignModule(moduleId, createData, foreignHostMethods) {\n        const proxyMethodRequest = (method, args) => {\n            return this._host.fhr(method, args);\n        };\n        const foreignHost = createProxyObject(foreignHostMethods, proxyMethodRequest);\n        const ctx = {\n            host: foreignHost,\n            getMirrorModels: () => {\n                return this._getModels();\n            }\n        };\n        if (this._foreignModuleFactory) {\n            this._foreignModule = this._foreignModuleFactory(ctx, createData);\n            // static foreing module\n            return Promise.resolve(getAllMethodNames(this._foreignModule));\n        }\n        // ESM-comment-begin\n        // \t\treturn new Promise<any>((resolve, reject) => {\n        // \t\t\trequire([moduleId], (foreignModule: { create: IForeignModuleFactory }) => {\n        // \t\t\t\tthis._foreignModule = foreignModule.create(ctx, createData);\n        // \n        // \t\t\t\tresolve(getAllMethodNames(this._foreignModule));\n        // \n        // \t\t\t}, reject);\n        // \t\t});\n        // ESM-comment-end\n        // ESM-uncomment-begin\n        return Promise.reject(new Error(`Unexpected usage`));\n        // ESM-uncomment-end\n    }\n    // foreign method request\n    fmr(method, args) {\n        if (!this._foreignModule || typeof this._foreignModule[method] !== 'function') {\n            return Promise.reject(new Error('Missing requestHandler or method: ' + method));\n        }\n        try {\n            return Promise.resolve(this._foreignModule[method].apply(this._foreignModule, args));\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n}\n// ---- END diff --------------------------------------------------------------------------\n// ---- BEGIN minimal edits ---------------------------------------------------------------\nEditorSimpleWorker._diffLimit = 100000;\n// ---- BEGIN suggest --------------------------------------------------------------------------\nEditorSimpleWorker._suggestionsLimit = 10000;\n/**\n * Called on the worker side\n * @internal\n */\nexport function create(host) {\n    return new EditorSimpleWorker(host, null);\n}\nif (typeof importScripts === 'function') {\n    // Running in a web worker\n    globalThis.monaco = createMonacoBaseAPI();\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LegacyLinesDiffComputer } from './legacyLinesDiffComputer.js';\nimport { DefaultLinesDiffComputer } from './defaultLinesDiffComputer/defaultLinesDiffComputer.js';\nexport const linesDiffComputers = {\n    getLegacy: () => new LegacyLinesDiffComputer(),\n    getDefault: () => new DefaultLinesDiffComputer(),\n};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../core/range.js';\nimport { Searcher } from '../model/textModelSearch.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { assertNever } from '../../../base/common/assert.js';\nimport { DEFAULT_WORD_REGEXP, getWordAtText } from '../core/wordHelper.js';\nexport class UnicodeTextModelHighlighter {\n    static computeUnicodeHighlights(model, options, range) {\n        const startLine = range ? range.startLineNumber : 1;\n        const endLine = range ? range.endLineNumber : model.getLineCount();\n        const codePointHighlighter = new CodePointHighlighter(options);\n        const candidates = codePointHighlighter.getCandidateCodePoints();\n        let regex;\n        if (candidates === 'allNonBasicAscii') {\n            regex = new RegExp('[^\\\\t\\\\n\\\\r\\\\x20-\\\\x7E]', 'g');\n        }\n        else {\n            regex = new RegExp(`${buildRegExpCharClassExpr(Array.from(candidates))}`, 'g');\n        }\n        const searcher = new Searcher(null, regex);\n        const ranges = [];\n        let hasMore = false;\n        let m;\n        let ambiguousCharacterCount = 0;\n        let invisibleCharacterCount = 0;\n        let nonBasicAsciiCharacterCount = 0;\n        forLoop: for (let lineNumber = startLine, lineCount = endLine; lineNumber <= lineCount; lineNumber++) {\n            const lineContent = model.getLineContent(lineNumber);\n            const lineLength = lineContent.length;\n            // Reset regex to search from the beginning\n            searcher.reset(0);\n            do {\n                m = searcher.next(lineContent);\n                if (m) {\n                    let startIndex = m.index;\n                    let endIndex = m.index + m[0].length;\n                    // Extend range to entire code point\n                    if (startIndex > 0) {\n                        const charCodeBefore = lineContent.charCodeAt(startIndex - 1);\n                        if (strings.isHighSurrogate(charCodeBefore)) {\n                            startIndex--;\n                        }\n                    }\n                    if (endIndex + 1 < lineLength) {\n                        const charCodeBefore = lineContent.charCodeAt(endIndex - 1);\n                        if (strings.isHighSurrogate(charCodeBefore)) {\n                            endIndex++;\n                        }\n                    }\n                    const str = lineContent.substring(startIndex, endIndex);\n                    let word = getWordAtText(startIndex + 1, DEFAULT_WORD_REGEXP, lineContent, 0);\n                    if (word && word.endColumn <= startIndex + 1) {\n                        // The word does not include the problematic character, ignore the word\n                        word = null;\n                    }\n                    const highlightReason = codePointHighlighter.shouldHighlightNonBasicASCII(str, word ? word.word : null);\n                    if (highlightReason !== 0 /* SimpleHighlightReason.None */) {\n                        if (highlightReason === 3 /* SimpleHighlightReason.Ambiguous */) {\n                            ambiguousCharacterCount++;\n                        }\n                        else if (highlightReason === 2 /* SimpleHighlightReason.Invisible */) {\n                            invisibleCharacterCount++;\n                        }\n                        else if (highlightReason === 1 /* SimpleHighlightReason.NonBasicASCII */) {\n                            nonBasicAsciiCharacterCount++;\n                        }\n                        else {\n                            assertNever(highlightReason);\n                        }\n                        const MAX_RESULT_LENGTH = 1000;\n                        if (ranges.length >= MAX_RESULT_LENGTH) {\n                            hasMore = true;\n                            break forLoop;\n                        }\n                        ranges.push(new Range(lineNumber, startIndex + 1, lineNumber, endIndex + 1));\n                    }\n                }\n            } while (m);\n        }\n        return {\n            ranges,\n            hasMore,\n            ambiguousCharacterCount,\n            invisibleCharacterCount,\n            nonBasicAsciiCharacterCount\n        };\n    }\n    static computeUnicodeHighlightReason(char, options) {\n        const codePointHighlighter = new CodePointHighlighter(options);\n        const reason = codePointHighlighter.shouldHighlightNonBasicASCII(char, null);\n        switch (reason) {\n            case 0 /* SimpleHighlightReason.None */:\n                return null;\n            case 2 /* SimpleHighlightReason.Invisible */:\n                return { kind: 1 /* UnicodeHighlighterReasonKind.Invisible */ };\n            case 3 /* SimpleHighlightReason.Ambiguous */: {\n                const codePoint = char.codePointAt(0);\n                const primaryConfusable = codePointHighlighter.ambiguousCharacters.getPrimaryConfusable(codePoint);\n                const notAmbiguousInLocales = strings.AmbiguousCharacters.getLocales().filter((l) => !strings.AmbiguousCharacters.getInstance(new Set([...options.allowedLocales, l])).isAmbiguous(codePoint));\n                return { kind: 0 /* UnicodeHighlighterReasonKind.Ambiguous */, confusableWith: String.fromCodePoint(primaryConfusable), notAmbiguousInLocales };\n            }\n            case 1 /* SimpleHighlightReason.NonBasicASCII */:\n                return { kind: 2 /* UnicodeHighlighterReasonKind.NonBasicAscii */ };\n        }\n    }\n}\nfunction buildRegExpCharClassExpr(codePoints, flags) {\n    const src = `[${strings.escapeRegExpCharacters(codePoints.map((i) => String.fromCodePoint(i)).join(''))}]`;\n    return src;\n}\nclass CodePointHighlighter {\n    constructor(options) {\n        this.options = options;\n        this.allowedCodePoints = new Set(options.allowedCodePoints);\n        this.ambiguousCharacters = strings.AmbiguousCharacters.getInstance(new Set(options.allowedLocales));\n    }\n    getCandidateCodePoints() {\n        if (this.options.nonBasicASCII) {\n            return 'allNonBasicAscii';\n        }\n        const set = new Set();\n        if (this.options.invisibleCharacters) {\n            for (const cp of strings.InvisibleCharacters.codePoints) {\n                if (!isAllowedInvisibleCharacter(String.fromCodePoint(cp))) {\n                    set.add(cp);\n                }\n            }\n        }\n        if (this.options.ambiguousCharacters) {\n            for (const cp of this.ambiguousCharacters.getConfusableCodePoints()) {\n                set.add(cp);\n            }\n        }\n        for (const cp of this.allowedCodePoints) {\n            set.delete(cp);\n        }\n        return set;\n    }\n    shouldHighlightNonBasicASCII(character, wordContext) {\n        const codePoint = character.codePointAt(0);\n        if (this.allowedCodePoints.has(codePoint)) {\n            return 0 /* SimpleHighlightReason.None */;\n        }\n        if (this.options.nonBasicASCII) {\n            return 1 /* SimpleHighlightReason.NonBasicASCII */;\n        }\n        let hasBasicASCIICharacters = false;\n        let hasNonConfusableNonBasicAsciiCharacter = false;\n        if (wordContext) {\n            for (const char of wordContext) {\n                const codePoint = char.codePointAt(0);\n                const isBasicASCII = strings.isBasicASCII(char);\n                hasBasicASCIICharacters = hasBasicASCIICharacters || isBasicASCII;\n                if (!isBasicASCII &&\n                    !this.ambiguousCharacters.isAmbiguous(codePoint) &&\n                    !strings.InvisibleCharacters.isInvisibleCharacter(codePoint)) {\n                    hasNonConfusableNonBasicAsciiCharacter = true;\n                }\n            }\n        }\n        if (\n        /* Don't allow mixing weird looking characters with ASCII */ !hasBasicASCIICharacters &&\n            /* Is there an obviously weird looking character? */ hasNonConfusableNonBasicAsciiCharacter) {\n            return 0 /* SimpleHighlightReason.None */;\n        }\n        if (this.options.invisibleCharacters) {\n            // TODO check for emojis\n            if (!isAllowedInvisibleCharacter(character) && strings.InvisibleCharacters.isInvisibleCharacter(codePoint)) {\n                return 2 /* SimpleHighlightReason.Invisible */;\n            }\n        }\n        if (this.options.ambiguousCharacters) {\n            if (this.ambiguousCharacters.isAmbiguous(codePoint)) {\n                return 3 /* SimpleHighlightReason.Ambiguous */;\n            }\n        }\n        return 0 /* SimpleHighlightReason.None */;\n    }\n}\nfunction isAllowedInvisibleCharacter(character) {\n    return character === ' ' || character === '\\n' || character === '\\t';\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../base/common/event.js';\nimport { Disposable, toDisposable } from '../../base/common/lifecycle.js';\nexport class TokenizationRegistry {\n    constructor() {\n        this._tokenizationSupports = new Map();\n        this._factories = new Map();\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this._colorMap = null;\n    }\n    handleChange(languageIds) {\n        this._onDidChange.fire({\n            changedLanguages: languageIds,\n            changedColorMap: false\n        });\n    }\n    register(languageId, support) {\n        this._tokenizationSupports.set(languageId, support);\n        this.handleChange([languageId]);\n        return toDisposable(() => {\n            if (this._tokenizationSupports.get(languageId) !== support) {\n                return;\n            }\n            this._tokenizationSupports.delete(languageId);\n            this.handleChange([languageId]);\n        });\n    }\n    get(languageId) {\n        return this._tokenizationSupports.get(languageId) || null;\n    }\n    registerFactory(languageId, factory) {\n        var _a;\n        (_a = this._factories.get(languageId)) === null || _a === void 0 ? void 0 : _a.dispose();\n        const myData = new TokenizationSupportFactoryData(this, languageId, factory);\n        this._factories.set(languageId, myData);\n        return toDisposable(() => {\n            const v = this._factories.get(languageId);\n            if (!v || v !== myData) {\n                return;\n            }\n            this._factories.delete(languageId);\n            v.dispose();\n        });\n    }\n    async getOrCreate(languageId) {\n        // check first if the support is already set\n        const tokenizationSupport = this.get(languageId);\n        if (tokenizationSupport) {\n            return tokenizationSupport;\n        }\n        const factory = this._factories.get(languageId);\n        if (!factory || factory.isResolved) {\n            // no factory or factory.resolve already finished\n            return null;\n        }\n        await factory.resolve();\n        return this.get(languageId);\n    }\n    isResolved(languageId) {\n        const tokenizationSupport = this.get(languageId);\n        if (tokenizationSupport) {\n            return true;\n        }\n        const factory = this._factories.get(languageId);\n        if (!factory || factory.isResolved) {\n            return true;\n        }\n        return false;\n    }\n    setColorMap(colorMap) {\n        this._colorMap = colorMap;\n        this._onDidChange.fire({\n            changedLanguages: Array.from(this._tokenizationSupports.keys()),\n            changedColorMap: true\n        });\n    }\n    getColorMap() {\n        return this._colorMap;\n    }\n    getDefaultBackground() {\n        if (this._colorMap && this._colorMap.length > 2 /* ColorId.DefaultBackground */) {\n            return this._colorMap[2 /* ColorId.DefaultBackground */];\n        }\n        return null;\n    }\n}\nclass TokenizationSupportFactoryData extends Disposable {\n    get isResolved() {\n        return this._isResolved;\n    }\n    constructor(_registry, _languageId, _factory) {\n        super();\n        this._registry = _registry;\n        this._languageId = _languageId;\n        this._factory = _factory;\n        this._isDisposed = false;\n        this._resolvePromise = null;\n        this._isResolved = false;\n    }\n    dispose() {\n        this._isDisposed = true;\n        super.dispose();\n    }\n    async resolve() {\n        if (!this._resolvePromise) {\n            this._resolvePromise = this._create();\n        }\n        return this._resolvePromise;\n    }\n    async _create() {\n        const value = await this._factory.tokenizationSupport;\n        this._isResolved = true;\n        if (value && !this._isDisposed) {\n            this._register(this._registry.register(this._languageId, value));\n        }\n    }\n}\n"],"names":["Codicon","add","plus","gistNew","repoCreate","lightbulb","lightBulb","repo","repoDelete","gistFork","repoForked","gitPullRequest","gitPullRequestAbandoned","recordKeys","keyboard","tag","gitPullRequestLabel","tagAdd","tagRemove","person","personFollow","personOutline","personFilled","gitBranch","gitBranchCreate","gitBranchDelete","sourceControl","mirror","mirrorPublic","star","starAdd","starDelete","starEmpty","comment","commentAdd","alert","warning","search","searchSave","logOut","signOut","logIn","signIn","eye","eyeUnwatch","eyeWatch","circleFilled","primitiveDot","closeDirty","debugBreakpoint","debugBreakpointDisabled","debugHint","terminalDecorationSuccess","primitiveSquare","edit","pencil","info","issueOpened","gistPrivate","gitForkPrivate","lock","mirrorPrivate","close","removeClose","x","repoSync","sync","clone","desktopDownload","beaker","microscope","vm","deviceDesktop","file","fileText","more","ellipsis","kebabHorizontal","mailReply","reply","organization","organizationFilled","organizationOutline","newFile","fileAdd","newFolder","fileDirectoryCreate","trash","trashcan","history","clock","folder","fileDirectory","symbolFolder","logoGithub","markGithub","github","terminal","console","repl","zap","symbolEvent","error","stop","variable","symbolVariable","array","symbolArray","symbolModule","symbolPackage","symbolNamespace","symbolObject","symbolMethod","symbolFunction","symbolConstructor","symbolBoolean","symbolNull","symbolNumeric","symbolNumber","symbolStructure","symbolStruct","symbolParameter","symbolTypeParameter","symbolKey","symbolText","symbolReference","goToFile","symbolEnum","symbolValue","symbolRuler","symbolUnit","activateBreakpoints","archive","arrowBoth","arrowDown","arrowLeft","arrowRight","arrowSmallDown","arrowSmallLeft","arrowSmallRight","arrowSmallUp","arrowUp","bell","bold","book","bookmark","debugBreakpointConditionalUnverified","debugBreakpointConditional","debugBreakpointConditionalDisabled","debugBreakpointDataUnverified","debugBreakpointData","debugBreakpointDataDisabled","debugBreakpointLogUnverified","debugBreakpointLog","debugBreakpointLogDisabled","briefcase","broadcast","browser","bug","calendar","caseSensitive","check","checklist","chevronDown","chevronLeft","chevronRight","chevronUp","chromeClose","chromeMaximize","chromeMinimize","chromeRestore","circleOutline","circle","debugBreakpointUnverified","terminalDecorationIncomplete","circleSlash","circuitBoard","clearAll","clippy","closeAll","cloudDownload","cloudUpload","code","collapseAll","colorMode","commentDiscussion","creditCard","dash","dashboard","database","debugContinue","debugDisconnect","debugPause","debugRestart","debugStart","debugStepInto","debugStepOut","debugStepOver","debugStop","debug","deviceCameraVideo","deviceCamera","deviceMobile","diffAdded","diffIgnored","diffModified","diffRemoved","diffRenamed","diff","diffSidebyside","discard","editorLayout","emptyWindow","exclude","extensions","eyeClosed","fileBinary","fileCode","fileMedia","filePdf","fileSubmodule","fileSymlinkDirectory","fileSymlinkFile","fileZip","files","filter","flame","foldDown","foldUp","fold","folderActive","folderOpened","gear","gift","gistSecret","gist","gitCommit","gitCompare","compareChanges","gitMerge","githubAction","githubAlt","globe","grabber","graph","gripper","heart","home","horizontalRule","hubot","inbox","issueReopened","issues","italic","jersey","json","kebabVertical","key","law","lightbulbAutofix","linkExternal","link","listOrdered","listUnordered","liveShare","loading","location","mailRead","mail","markdown","megaphone","mention","milestone","gitPullRequestMilestone","mortarBoard","move","multipleWindows","mute","noNewline","note","octoface","openPreview","package","paintcan","pin","play","run","plug","preserveCase","preview","project","pulse","question","quote","radioTower","reactions","references","refresh","regex","remoteExplorer","remote","remove","replaceAll","replace","repoClone","repoForcePush","repoPull","repoPush","report","requestChanges","rocket","rootFolderOpened","rootFolder","rss","ruby","saveAll","saveAs","save","screenFull","screenNormal","searchStop","server","settingsGear","settings","shield","smiley","sortPrecedence","splitHorizontal","splitVertical","squirrel","starFull","starHalf","symbolClass","symbolColor","symbolConstant","symbolEnumMember","symbolField","symbolFile","symbolInterface","symbolKeyword","symbolMisc","symbolOperator","symbolProperty","wrench","wrenchSubaction","symbolSnippet","tasklist","telescope","textSize","threeBars","thumbsdown","thumbsup","tools","triangleDown","triangleLeft","triangleRight","triangleUp","twitter","unfold","unlock","unmute","unverified","verified","versions","vmActive","vmOutline","vmRunning","watch","whitespace","wholeWord","window","wordWrap","zoomIn","zoomOut","listFilter","listFlat","listSelection","selection","listTree","debugBreakpointFunctionUnverified","debugBreakpointFunction","debugBreakpointFunctionDisabled","debugStackframeActive","circleSmallFilled","debugStackframeDot","terminalDecorationMark","debugStackframe","debugStackframeFocused","debugBreakpointUnsupported","symbolString","debugReverseContinue","debugStepBack","debugRestartFrame","debugAlt","callIncoming","callOutgoing","menu","expandAll","feedback","gitPullRequestReviewer","groupByRefType","ungroupByRefType","account","gitPullRequestAssignee","bellDot","debugConsole","library","output","runAll","syncIgnored","pinned","githubInverted","serverProcess","serverEnvironment","pass","issueClosed","stopCircle","playCircle","record","debugAltSmall","vmConnect","cloud","merge","export","graphLeft","magnet","notebook","redo","checkAll","pinnedDirty","passFilled","circleLargeFilled","circleLarge","circleLargeOutline","combine","gather","table","variableGroup","typeHierarchy","typeHierarchySub","typeHierarchySuper","gitPullRequestCreate","runAbove","runBelow","notebookTemplate","debugRerun","workspaceTrusted","workspaceUntrusted","workspaceUnknown","terminalCmd","terminalDebian","terminalLinux","terminalPowershell","terminalTmux","terminalUbuntu","terminalBash","arrowSwap","copy","personAdd","filterFilled","wand","debugLineByLine","inspect","layers","layersDot","layersActive","compass","compassDot","compassActive","azure","issueDraft","gitPullRequestClosed","gitPullRequestDraft","debugAll","debugCoverage","runErrors","folderLibrary","debugContinueSmall","beakerStop","graphLine","graphScatter","pieChart","bracket","bracketDot","bracketError","lockSmall","azureDevops","verifiedFilled","newline","layout","layoutActivitybarLeft","layoutActivitybarRight","layoutPanelLeft","layoutPanelCenter","layoutPanelJustify","layoutPanelRight","layoutPanel","layoutSidebarLeft","layoutSidebarRight","layoutStatusbar","layoutMenubar","layoutCentered","target","indent","recordSmall","errorSmall","terminalDecorationError","arrowCircleDown","arrowCircleLeft","arrowCircleRight","arrowCircleUp","layoutSidebarRightOff","layoutPanelOff","layoutSidebarLeftOff","blank","heartFilled","map","mapHorizontal","foldHorizontal","mapFilled","mapHorizontalFilled","foldHorizontalFilled","circleSmall","bellSlash","bellSlashDot","commentUnresolved","gitPullRequestGoToChanges","gitPullRequestNewChanges","searchFuzzy","commentDraft","send","sparkle","insert","mic","thumbsdownFilled","thumbsupFilled","coffee","snake","game","vr","chip","piano","music","micFilled","repoFetch","copilot","lightbulbSparkle","robot","sparkleFilled","diffSingle","diffMultiple","surroundWith","share","gitStash","gitStashApply","gitStashPop","vscode","vscodeInsiders","codeOss","runCoverage","runAllCoverage","coverage","githubProject","mapVertical","foldVertical","mapVerticalFilled","foldVerticalFilled","goToSearch","percentage","sortPercentage","attach","dialogError","dialogWarning","dialogInfo","dialogClose","treeItemExpanded","treeFilterOnTypeOn","treeFilterOnTypeOff","treeFilterClear","treeItemLoading","menuSelection","menuSubmenu","menuBarMore","scrollbarButtonLeft","scrollbarButtonRight","scrollbarButtonUp","scrollbarButtonDown","toolBarMore","quickInputBack","dropDownButton","symbolCustomColor","exportIcon","workspaceUnspecified","newLine","thumbsDownFilled","thumbsUpFilled","gitFetch","lightbulbSparkleAutofix","debugBreakpointPending","DiffChange","constructor","originalStart","originalLength","modifiedStart","modifiedLength","this","getOriginalEnd","getModifiedEnd","createSingleCallFunction","fn","fnDidRunCallback","_this","result","didCall","apply","arguments","Lazy","executor","_didRun","value","_value","err","_error","rawValue","Node","element","next","Undefined","prev","undefined","LinkedList","_first","_last","_size","size","isEmpty","clear","node","unshift","_insert","push","atTheEnd","newNode","oldLast","oldFirst","didRemove","_remove","shift","res","pop","anchor","Symbol","iterator","safeProcess","vscodeGlobal","globalThis","process","sandboxProcess","platform","arch","env","cwd","hasPerformanceNow","performance","now","StopWatch","create","highResolution","_now","Date","bind","_startTime","_stopTime","reset","elapsed","toUint8","v","toUint32","LineRange","fromRangeInclusive","range","startLineNumber","endLineNumber","joinMany","lineRanges","length","LineRangeSet","slice","i","getUnion","ranges","join","endLineNumberExclusive","Math","min","max","ofLength","deserialize","lineRange","contains","lineNumber","delta","offset","deltaLength","other","toString","intersect","intersectsStrict","overlapOrTouch","equals","b","toInclusiveRange","Number","MAX_SAFE_INTEGER","toExclusiveRange","mapToLineArray","f","forEach","serialize","includes","toOffsetRange","_normalizedRanges","addRange","joinRangeStartIdx","r","joinRangeEndIdxExclusive","splice","joinRange","rangeThatStartsBeforeEnd","intersects","i1","i2","current","lineRange1","lineRange2","subtractFrom","getIntersection","r1","r2","getWithDelta","Position","column","newLineNumber","newColumn","deltaLineNumber","deltaColumn","with","a","isBefore","isBeforeOrEqual","compare","aLineNumber","bLineNumber","lift","pos","isIPosition","obj","toJSON","PositionOffsetTransformer","text","lineStartOffsetByLineIdx","charAt","getOffset","position","getOffsetRange","getStartPosition","getEndPosition","textLength","lineIdx","Range","startColumn","endColumn","containsPosition","strictContainsPosition","containsRange","otherRange","strictContainsRange","plusRange","intersectRanges","resultStartLineNumber","resultStartColumn","resultEndLineNumber","resultEndColumn","otherStartLineNumber","otherStartColumn","otherEndLineNumber","otherEndColumn","equalsRange","setEndPosition","setStartPosition","collapseToStart","collapseToEnd","lineCount","fromPositions","start","end","isIRange","areIntersectingOrTouching","areIntersecting","compareRangesUsingStarts","aStartLineNumber","bStartLineNumber","aStartColumn","bStartColumn","aEndLineNumber","bEndLineNumber","compareRangesUsingEnds","spansMultipleLines","Selection","selectionStartLineNumber","selectionStartColumn","positionLineNumber","positionColumn","super","equalsSelection","selectionsEqual","getDirection","getPosition","getSelectionStart","fromRange","direction","liftSelection","sel","selectionsArrEqual","len","isISelection","createWithDirection","TextLength","betweenPositions","position1","position2","ofRange","ofText","line","c","columnCount","isGreaterThanOrEqualTo","createRange","startPosition","addToPosition","zero","DiffAlgorithmResult","trivial","seq1","seq2","SequenceDiff","trivialTimedOut","diffs","hitTimeout","invert","sequenceDiffs","doc1Length","fromOffsetPairs","getEndExclusives","OffsetPair","getStarts","seq2Range","endExclusive","seq1Range","offset1","offset2","swap","deltaStart","deltaEnd","InfiniteTimeout","isValid","instance","DateTimeout","timeout","startTime","valid","Array2D","width","height","Array","get","y","set","isSpace","charCode","LineRangeFragment","getKey","chr","chrKeys","lines","source","histogram","counter","j","totalCount","computeSimilarity","_a","_b","sumDifferences","maxLength","abs","Map","DynamicProgrammingDiffing","compute","sequence1","sequence2","equalityScore","lcsLengths","directions","lengths","s1","s2","horizontalLen","verticalLen","extendedSeqScore","getElement","newValue","prevLen","lastAligningPosS1","lastAligningPosS2","reportDecreasingAligningPositions","reverse","MyersDiffAlgorithm","seqX","seqY","getXAfterSnake","d","V","FastInt32Array","paths","FastArrayNegativeIndices","SnakePath","k","loop","lowerBound","upperBound","step","maxXofDLineTop","maxXofDLineLeft","newMaxX","lastPath","path","endX","endY","positiveArr","Int32Array","negativeArr","idx","arr","LinesSliceCharSequence","considerWhitespaceChanges","elements","firstCharOffsetByLine","additionalOffsetByLine","trimFirstLineFully","trimmedStartLine","trimStart","trimEnd","charCodeAt","getText","e","String","fromCharCode","getBoundaryScore","prevCategory","getCategory","nextCategory","score","getCategoryBoundaryScore","translateOffset","translateRange","findWordContaining","isWordChar","countLinesIn","isStronglyEqual","extendToFullLines","category","areLinesSimilar","line1","line2","trim","commonNonSpaceCharCount","inverted","seq","longerLineLength","str","count","countNonWsChars","LineSequence","trimmedHash","getIndentation","DefaultLinesDiffComputer","dynamicProgrammingDiffing","myersDiffingAlgorithm","computeDiff","originalLines","modifiedLines","options","maxComputationTimeMs","ignoreTrimWhitespace","perfectHashes","getOrCreateHash","hash","originalLinesHashes","l","modifiedLinesHashes","lineAlignmentResult","log","lineAlignments","alignments","scanForWhitespaceChanges","equalLinesCount","seq1Offset","seq1LastStart","seq2Offset","seq2LastStart","characterDiffs","refineDiff","mappings","assert","changes","lineRangeMappingFromRangeMappings","moves","computeMoves","validatePosition","validateRange","innerChanges","ic","modifiedRange","originalRange","modified","original","hashedOriginalLines","hashedModifiedLines","excludedChanges","deletions","insertions","Set","deletion","best","highestSimilarity","insertion","similarity","delete","computeMovesFromSimpleDeletionsToSimpleInsertions","unchangedMoves","original3LineHashes","change","possibleMappings","sort","lastMappings","currentModifiedRange","nextMappings","lastMapping","originalLineRange","modifiedLineRange","mapping","m","modifiedSet","originalSet","diffOrigToMod","modifiedSections","originalTranslatedSections","modifiedIntersectedSections","s","monotonousChanges","firstTouchingChangeOrig","findLastMonotonous","firstTouchingChangeMod","linesAbove","lastTouchingChangeOrig","lastTouchingChangeMod","linesBelow","extendToTop","extendToBottom","origLine","modLine","computeUnchangedMoves","has","last","originalDist","modifiedDist","joinCloseConsecutiveMoves","predicate","t","countWhere","changesMonotonous","removeMovesInSameDiff","computeMovedLines","slice1","slice2","diffResult","dontAssertStartLine","g","rangeMapping","lineStartDelta","lineEndDelta","getLineRangeMapping","a1","a2","first","m1","m2","optimizeSequenceDiffs","joinSequenceDiffsByShifting","prevDiff","nextDiff","seq1ValidRange","seq2ValidRange","shiftDiffToBetterPosition","shiftSequenceDiffs","prevResult","cur","result2","nextResult","deltaBefore","deltaAfter","bestDelta","bestScore","seq2OffsetStart","seq2OffsetEndExclusive","removeShortMatches","extendDiffsToEntireWordIfAppropriate","equalMappings","additional","lastPoint","scanWord","pair","equalMapping","w1","w2","w","equalPart","equalChars1","equalChars2","v1","v2","sequenceDiffs1","sequenceDiffs2","sd1","sd2","mergeSequenceDiffs","removeVeryShortMatchingLinesBetweenDiffs","_sequence2","shouldRepeat","lastResult","shouldJoinDiffs","before","after","unchangedRange","removeVeryShortMatchingTextBetweenLongDiffs","unchangedText","split","beforeLineCount1","beforeSeq1Length","beforeLineCount2","beforeSeq2Length","afterLineCount1","afterSeq1Length","afterLineCount2","afterSeq2Length","cap","pow","newDiffs","newDiff","shouldMarkAsChanged","fullRange1","prefix","suffix","availableSpace","LinesDiff","MovedText","lineRangeMapping","LineRangeMapping","inverse","originalLineCount","modifiedLineCount","lastOriginalEndLineNumber","lastModifiedEndLineNumber","clip","flip","toRangeMapping","origInclusiveRange","modInclusiveRange","RangeMapping","DetailedLineRangeMapping","fromRangeMappings","rangeMappings","withInnerChangesFromLineRanges","toTextEdit","newText","getValueOfRange","KeyMod","chord","firstPart","secondPart","createMonacoBaseAPI","editor","languages","CancellationTokenSource","Emitter","KeyCode","SelectionDirection","MarkerSeverity","MarkerTag","Uri","Token","CtrlCmd","Shift","Alt","WinCtrl","MirrorTextModel","uri","eol","versionId","_uri","_lines","_eol","_versionId","_lineStarts","_cachedTextValue","dispose","version","onEvents","_acceptDeleteRange","_acceptInsertText","_ensureLineStarts","eolLength","linesLength","lineStartValues","Uint32Array","_setLineText","lineIndex","setValue","substring","removeValues","insertText","insertLines","newLengths","insertValues","Uint8Matrix","rows","cols","defaultValue","data","Uint8Array","_data","row","col","StateMachine","edges","maxCharCode","maxState","from","chCode","to","states","_states","_maxCharCode","nextState","currentState","_stateMachine","_classifier","LinkComputer","_createLink","classifier","linkBeginIndex","linkEndIndex","lastIncludedCharIndex","charCodeBeforeLink","lastCharCodeInLink","url","computeLinks","model","stateMachine","getStateMachine","FORCE_TERMINATION_CHARACTERS","CANNOT_END_WITH_CHARACTERS","getClassifier","getLineCount","getLineContent","linkBeginChCode","state","hasOpenParens","hasOpenSquareBracket","inSquareBrackets","hasOpenCurlyBracket","resetStateMachine","chClass","BasicInplaceReplace","_defaultValueSet","navigateValueSet","range1","text1","range2","text2","up","doNavigateValueSet","numberResult","numberReplace","textReplace","precision","lastIndexOf","n1","n2","parseFloat","isNaN","floor","valueSetsReplace","valueSets","valueSetReplace","valueSet","indexOf","INSTANCE","LegacyLinesDiffComputer","DiffComputer","maxComputationTime","shouldIgnoreTrimWhitespace","shouldComputeCharChanges","shouldMakePrettyDiff","shouldPostProcessCharChanges","lastChange","originalEndLineNumber","originalStartLineNumber","modifiedEndLineNumber","modifiedStartLineNumber","charChanges","originalStartColumn","originalEndColumn","modifiedStartColumn","modifiedEndColumn","concat","quitEarly","originalSequence","modifiedSequence","continueProcessingPredicate","pretty","ComputeDiff","startColumns","endColumns","getFirstNonBlankColumn","getLastNonBlankColumn","_startColumns","_endColumns","getElements","getStrictElement","index","getStartLineNumber","getEndLineNumber","createCharSequence","startIndex","endIndex","charCodes","lineNumbers","columns","lineContent","CharSequence","_charCodes","_lineNumbers","_columns","_assertIndex","Error","getStartColumn","getEndColumn","CharChange","createFromDiffChange","diffChange","originalCharSequence","modifiedCharSequence","LineChange","createFromDiffResult","originalLineSequence","modifiedLineSequence","continueCharDiff","rawChanges","prevChange","currChange","originalMatchingLength","modifiedMatchingLength","postProcessCharChanges","opts","continueLineDiff","createContinueProcessingPredicate","lineChanges","originalLineIndex","modifiedLineIndex","nextChange","originalStop","modifiedStop","originalLine","modifiedLine","_pushTrimWhitespaceCharChange","originalMaxColumn","modifiedMaxColumn","originalLineNumber","modifiedLineNumber","_mergeTrimWhitespaceCharChange","txt","strings","maximumRuntime","_parseCaptureGroups","captureGroups","values","captureGroup","parsedNumber","_toIColor","red","blue","green","alpha","_findRange","match","positionAt","_findHexColorInformation","hexValue","parsedHexColor","Format","CSS","parseHex","color","rgba","_findRGBColorInformation","matches","isAlpha","parsedRegex","_findHSLColorInformation","colorEquivalent","_findMatches","matchAll","findMatches","markRegex","RegExp","trimDashesRegex","addMarkHeaderIfFound","sectionHeaders","lastIndex","exec","indices","sectionHeader","getHeaderText","shouldBeInComments","hasSeparatorLine","startsWith","MirrorModel","getValue","offsetToAdd","offsetAt","iteratorOverMatches","getLinesContent","getWordAtPosition","wordDefinition","wordAtText","words","wordenize","_wordenize","lineText","wordRangesIdx","wordRanges","getLineWords","content","word","getValueInRange","_validateRange","lineEnding","startLineIndex","endLineIndex","resultLines","_validatePosition","getPrefixSum","out","getIndexOf","lineLength","remainder","hasChanged","maxCharacter","EditorSimpleWorker","host","foreignModuleFactory","_host","_models","Object","_foreignModuleFactory","_foreignModule","_getModel","_getModels","all","keys","acceptNewModel","parse","EOL","acceptModelChanged","strURL","acceptRemovedModel","computeUnicodeHighlights","hasMore","ambiguousCharacterCount","invisibleCharacterCount","nonBasicAsciiCharacterCount","findSectionHeaders","headers","findRegionSectionHeaders","foldingRules","markers","regionHeaders","collectRegionHeaders","findMarkSectionHeaders","markHeaders","collectMarkHeaders","originalUrl","modifiedUrl","algorithm","originalTextModel","modifiedTextModel","diffAlgorithm","getLineChanges","identical","_modelsAreIdentical","computeMoreMinimalEdits","modelUrl","edits","lastEol","writeIndex","readIndex","_diffLimit","editOffset","newEdit","substr","computeDefaultDocumentColors","initialValidationMatches","initialMatch","initialCaptureGroups","colorScheme","colorParameters","colorInformation","regexParameters","computeColors","textualSuggest","modelUrls","leadingWord","wordDef","wordDefFlags","sw","wordDefRegExp","seen","outer","_suggestionsLimit","duration","computeWordRanges","selectionText","wordRange","loadForeignModule","moduleId","createData","foreignHostMethods","ctx","method","args","fhr","getMirrorModels","Promise","resolve","reject","fmr","importScripts","monaco","UnicodeTextModelHighlighter","startLine","endLine","codePointHighlighter","CodePointHighlighter","candidates","getCandidateCodePoints","codePoints","fromCodePoint","searcher","forLoop","charCodeBefore","highlightReason","shouldHighlightNonBasicASCII","MAX_RESULT_LENGTH","computeUnicodeHighlightReason","char","kind","codePoint","codePointAt","primaryConfusable","ambiguousCharacters","getPrimaryConfusable","notAmbiguousInLocales","getLocales","getInstance","allowedLocales","isAmbiguous","confusableWith","allowedCodePoints","nonBasicASCII","invisibleCharacters","cp","isAllowedInvisibleCharacter","getConfusableCodePoints","character","wordContext","hasBasicASCIICharacters","hasNonConfusableNonBasicAsciiCharacter","isBasicASCII","isInvisibleCharacter","TokenizationRegistry","_tokenizationSupports","_factories","_onDidChange","onDidChange","event","_colorMap","handleChange","languageIds","fire","changedLanguages","changedColorMap","register","languageId","support","registerFactory","factory","myData","TokenizationSupportFactoryData","getOrCreate","tokenizationSupport","isResolved","setColorMap","colorMap","getColorMap","getDefaultBackground","_isResolved","_registry","_languageId","_factory","_isDisposed","_resolvePromise","_create","_register"],"sourceRoot":""}